pub trait AsyncIDebugApplicationNodeEventsImpl: Sized {
    fn Begin_onAddChild(&mut self, prddpchild: ::core::option::Option<IDebugApplicationNode>) -> ::windows::core::Result<()>;
    fn Finish_onAddChild(&mut self) -> ::windows::core::Result<()>;
    fn Begin_onRemoveChild(&mut self, prddpchild: ::core::option::Option<IDebugApplicationNode>) -> ::windows::core::Result<()>;
    fn Finish_onRemoveChild(&mut self) -> ::windows::core::Result<()>;
    fn Begin_onDetach(&mut self) -> ::windows::core::Result<()>;
    fn Finish_onDetach(&mut self) -> ::windows::core::Result<()>;
    fn Begin_onAttach(&mut self, prddpparent: ::core::option::Option<IDebugApplicationNode>) -> ::windows::core::Result<()>;
    fn Finish_onAttach(&mut self) -> ::windows::core::Result<()>;
}
impl AsyncIDebugApplicationNodeEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: AsyncIDebugApplicationNodeEventsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> AsyncIDebugApplicationNodeEventsVtbl {
        unsafe extern "system" fn Begin_onAddChild<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prddpchild: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Begin_onAddChild(::core::mem::transmute(&prddpchild)).into()
        }
        unsafe extern "system" fn Finish_onAddChild<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Finish_onAddChild().into()
        }
        unsafe extern "system" fn Begin_onRemoveChild<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prddpchild: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Begin_onRemoveChild(::core::mem::transmute(&prddpchild)).into()
        }
        unsafe extern "system" fn Finish_onRemoveChild<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Finish_onRemoveChild().into()
        }
        unsafe extern "system" fn Begin_onDetach<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Begin_onDetach().into()
        }
        unsafe extern "system" fn Finish_onDetach<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Finish_onDetach().into()
        }
        unsafe extern "system" fn Begin_onAttach<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prddpparent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Begin_onAttach(::core::mem::transmute(&prddpparent)).into()
        }
        unsafe extern "system" fn Finish_onAttach<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Finish_onAttach().into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Begin_onAddChild: Begin_onAddChild::<Impl, IMPL_OFFSET>,
            Finish_onAddChild: Finish_onAddChild::<Impl, IMPL_OFFSET>,
            Begin_onRemoveChild: Begin_onRemoveChild::<Impl, IMPL_OFFSET>,
            Finish_onRemoveChild: Finish_onRemoveChild::<Impl, IMPL_OFFSET>,
            Begin_onDetach: Begin_onDetach::<Impl, IMPL_OFFSET>,
            Finish_onDetach: Finish_onDetach::<Impl, IMPL_OFFSET>,
            Begin_onAttach: Begin_onAttach::<Impl, IMPL_OFFSET>,
            Finish_onAttach: Finish_onAttach::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<AsyncIDebugApplicationNodeEvents as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait DebugBaseEventCallbacksImpl: Sized + IDebugEventCallbacksImpl {}
#[cfg(feature = "Win32_Foundation")]
impl DebugBaseEventCallbacksVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: DebugBaseEventCallbacksImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> DebugBaseEventCallbacksVtbl {
        Self { base: IDebugEventCallbacksVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>() }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<DebugBaseEventCallbacks as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait DebugBaseEventCallbacksWideImpl: Sized + IDebugEventCallbacksWideImpl {}
#[cfg(feature = "Win32_Foundation")]
impl DebugBaseEventCallbacksWideVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: DebugBaseEventCallbacksWideImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> DebugBaseEventCallbacksWideVtbl {
        Self { base: IDebugEventCallbacksWideVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>() }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<DebugBaseEventCallbacksWide as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptImpl: Sized {
    fn SetScriptSite(&mut self, pass: ::core::option::Option<IActiveScriptSite>) -> ::windows::core::Result<()>;
    fn GetScriptSite(&mut self, riid: *const ::windows::core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::Result<()>;
    fn SetScriptState(&mut self, ss: SCRIPTSTATE) -> ::windows::core::Result<()>;
    fn GetScriptState(&mut self) -> ::windows::core::Result<SCRIPTSTATE>;
    fn Close(&mut self) -> ::windows::core::Result<()>;
    fn AddNamedItem(&mut self, pstrname: super::super::super::Foundation::PWSTR, dwflags: u32) -> ::windows::core::Result<()>;
    fn AddTypeLib(&mut self, rguidtypelib: *const ::windows::core::GUID, dwmajor: u32, dwminor: u32, dwflags: u32) -> ::windows::core::Result<()>;
    fn GetScriptDispatch(&mut self, pstritemname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<super::super::Com::IDispatch>;
    fn GetCurrentScriptThreadID(&mut self) -> ::windows::core::Result<u32>;
    fn GetScriptThreadID(&mut self, dwwin32threadid: u32) -> ::windows::core::Result<u32>;
    fn GetScriptThreadState(&mut self, stidthread: u32) -> ::windows::core::Result<SCRIPTTHREADSTATE>;
    fn InterruptScriptThread(&mut self, stidthread: u32, pexcepinfo: *const super::super::Com::EXCEPINFO, dwflags: u32) -> ::windows::core::Result<()>;
    fn Clone(&mut self) -> ::windows::core::Result<IActiveScript>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptVtbl {
        unsafe extern "system" fn SetScriptSite<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pass: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScriptSite(::core::mem::transmute(&pass)).into()
        }
        unsafe extern "system" fn GetScriptSite<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScriptSite(::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvobject)).into()
        }
        unsafe extern "system" fn SetScriptState<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ss: SCRIPTSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScriptState(::core::mem::transmute_copy(&ss)).into()
        }
        unsafe extern "system" fn GetScriptState<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pssstate: *mut SCRIPTSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetScriptState() {
                ::core::result::Result::Ok(ok__) => {
                    *pssstate = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Close<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Close().into()
        }
        unsafe extern "system" fn AddNamedItem<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrname: super::super::super::Foundation::PWSTR, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddNamedItem(::core::mem::transmute_copy(&pstrname), ::core::mem::transmute_copy(&dwflags)).into()
        }
        unsafe extern "system" fn AddTypeLib<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rguidtypelib: *const ::windows::core::GUID, dwmajor: u32, dwminor: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddTypeLib(::core::mem::transmute_copy(&rguidtypelib), ::core::mem::transmute_copy(&dwmajor), ::core::mem::transmute_copy(&dwminor), ::core::mem::transmute_copy(&dwflags)).into()
        }
        unsafe extern "system" fn GetScriptDispatch<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstritemname: super::super::super::Foundation::PWSTR, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetScriptDispatch(::core::mem::transmute_copy(&pstritemname)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppdisp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentScriptThreadID<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstidthread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentScriptThreadID() {
                ::core::result::Result::Ok(ok__) => {
                    *pstidthread = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptThreadID<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwwin32threadid: u32, pstidthread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetScriptThreadID(::core::mem::transmute_copy(&dwwin32threadid)) {
                ::core::result::Result::Ok(ok__) => {
                    *pstidthread = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptThreadState<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, stidthread: u32, pstsstate: *mut SCRIPTTHREADSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetScriptThreadState(::core::mem::transmute_copy(&stidthread)) {
                ::core::result::Result::Ok(ok__) => {
                    *pstsstate = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InterruptScriptThread<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, stidthread: u32, pexcepinfo: *const super::super::Com::EXCEPINFO, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).InterruptScriptThread(::core::mem::transmute_copy(&stidthread), ::core::mem::transmute_copy(&pexcepinfo), ::core::mem::transmute_copy(&dwflags)).into()
        }
        unsafe extern "system" fn Clone<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppscript: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone() {
                ::core::result::Result::Ok(ok__) => {
                    *ppscript = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            SetScriptSite: SetScriptSite::<Impl, IMPL_OFFSET>,
            GetScriptSite: GetScriptSite::<Impl, IMPL_OFFSET>,
            SetScriptState: SetScriptState::<Impl, IMPL_OFFSET>,
            GetScriptState: GetScriptState::<Impl, IMPL_OFFSET>,
            Close: Close::<Impl, IMPL_OFFSET>,
            AddNamedItem: AddNamedItem::<Impl, IMPL_OFFSET>,
            AddTypeLib: AddTypeLib::<Impl, IMPL_OFFSET>,
            GetScriptDispatch: GetScriptDispatch::<Impl, IMPL_OFFSET>,
            GetCurrentScriptThreadID: GetCurrentScriptThreadID::<Impl, IMPL_OFFSET>,
            GetScriptThreadID: GetScriptThreadID::<Impl, IMPL_OFFSET>,
            GetScriptThreadState: GetScriptThreadState::<Impl, IMPL_OFFSET>,
            InterruptScriptThread: InterruptScriptThread::<Impl, IMPL_OFFSET>,
            Clone: Clone::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScript as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptAuthorImpl: Sized {
    fn AddNamedItem(&mut self, pszname: super::super::super::Foundation::PWSTR, dwflags: u32, pdisp: ::core::option::Option<super::super::Com::IDispatch>) -> ::windows::core::Result<()>;
    fn AddScriptlet(&mut self, pszdefaultname: super::super::super::Foundation::PWSTR, pszcode: super::super::super::Foundation::PWSTR, pszitemname: super::super::super::Foundation::PWSTR, pszsubitemname: super::super::super::Foundation::PWSTR, pszeventname: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, dwcookie: u32, dwflags: u32) -> ::windows::core::Result<()>;
    fn ParseScriptText(&mut self, pszcode: super::super::super::Foundation::PWSTR, pszitemname: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, dwcookie: u32, dwflags: u32) -> ::windows::core::Result<()>;
    fn GetScriptTextAttributes(&mut self, pszcode: super::super::super::Foundation::PWSTR, cch: u32, pszdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::Result<()>;
    fn GetScriptletTextAttributes(&mut self, pszcode: super::super::super::Foundation::PWSTR, cch: u32, pszdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::Result<()>;
    fn GetRoot(&mut self) -> ::windows::core::Result<IScriptNode>;
    fn GetLanguageFlags(&mut self) -> ::windows::core::Result<u32>;
    fn GetEventHandler(&mut self, pdisp: ::core::option::Option<super::super::Com::IDispatch>, pszitem: super::super::super::Foundation::PWSTR, pszsubitem: super::super::super::Foundation::PWSTR, pszevent: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<IScriptEntry>;
    fn RemoveNamedItem(&mut self, pszname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AddTypeLib(&mut self, rguidtypelib: *const ::windows::core::GUID, dwmajor: u32, dwminor: u32, dwflags: u32) -> ::windows::core::Result<()>;
    fn RemoveTypeLib(&mut self, rguidtypelib: *const ::windows::core::GUID, dwmajor: u32, dwminor: u32) -> ::windows::core::Result<()>;
    fn GetChars(&mut self, frequestedlist: u32) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetInfoFromContext(&mut self, pszcode: super::super::super::Foundation::PWSTR, cchcode: u32, ichcurrentposition: u32, dwlisttypesrequested: u32, pdwlisttypesprovided: *mut u32, pichlistanchorposition: *mut u32, pichfuncanchorposition: *mut u32, pmemid: *mut i32, picurrentparameter: *mut i32, ppunk: *mut ::core::option::Option<::windows::core::IUnknown>) -> ::windows::core::Result<()>;
    fn IsCommitChar(&mut self, ch: u16) -> ::windows::core::Result<super::super::super::Foundation::BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptAuthorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptAuthorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptAuthorVtbl {
        unsafe extern "system" fn AddNamedItem<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::super::Foundation::PWSTR, dwflags: u32, pdisp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddNamedItem(::core::mem::transmute_copy(&pszname), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute(&pdisp)).into()
        }
        unsafe extern "system" fn AddScriptlet<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdefaultname: super::super::super::Foundation::PWSTR, pszcode: super::super::super::Foundation::PWSTR, pszitemname: super::super::super::Foundation::PWSTR, pszsubitemname: super::super::super::Foundation::PWSTR, pszeventname: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, dwcookie: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddScriptlet(::core::mem::transmute_copy(&pszdefaultname), ::core::mem::transmute_copy(&pszcode), ::core::mem::transmute_copy(&pszitemname), ::core::mem::transmute_copy(&pszsubitemname), ::core::mem::transmute_copy(&pszeventname), ::core::mem::transmute_copy(&pszdelimiter), ::core::mem::transmute_copy(&dwcookie), ::core::mem::transmute_copy(&dwflags)).into()
        }
        unsafe extern "system" fn ParseScriptText<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: super::super::super::Foundation::PWSTR, pszitemname: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, dwcookie: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ParseScriptText(::core::mem::transmute_copy(&pszcode), ::core::mem::transmute_copy(&pszitemname), ::core::mem::transmute_copy(&pszdelimiter), ::core::mem::transmute_copy(&dwcookie), ::core::mem::transmute_copy(&dwflags)).into()
        }
        unsafe extern "system" fn GetScriptTextAttributes<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: super::super::super::Foundation::PWSTR, cch: u32, pszdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScriptTextAttributes(::core::mem::transmute_copy(&pszcode), ::core::mem::transmute_copy(&cch), ::core::mem::transmute_copy(&pszdelimiter), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&pattr)).into()
        }
        unsafe extern "system" fn GetScriptletTextAttributes<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: super::super::super::Foundation::PWSTR, cch: u32, pszdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScriptletTextAttributes(::core::mem::transmute_copy(&pszcode), ::core::mem::transmute_copy(&cch), ::core::mem::transmute_copy(&pszdelimiter), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&pattr)).into()
        }
        unsafe extern "system" fn GetRoot<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRoot() {
                ::core::result::Result::Ok(ok__) => {
                    *ppsp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLanguageFlags<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pgrfasa: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLanguageFlags() {
                ::core::result::Result::Ok(ok__) => {
                    *pgrfasa = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventHandler<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdisp: ::windows::core::RawPtr, pszitem: super::super::super::Foundation::PWSTR, pszsubitem: super::super::super::Foundation::PWSTR, pszevent: super::super::super::Foundation::PWSTR, ppse: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventHandler(::core::mem::transmute(&pdisp), ::core::mem::transmute_copy(&pszitem), ::core::mem::transmute_copy(&pszsubitem), ::core::mem::transmute_copy(&pszevent)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppse = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveNamedItem<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveNamedItem(::core::mem::transmute_copy(&pszname)).into()
        }
        unsafe extern "system" fn AddTypeLib<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rguidtypelib: *const ::windows::core::GUID, dwmajor: u32, dwminor: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddTypeLib(::core::mem::transmute_copy(&rguidtypelib), ::core::mem::transmute_copy(&dwmajor), ::core::mem::transmute_copy(&dwminor), ::core::mem::transmute_copy(&dwflags)).into()
        }
        unsafe extern "system" fn RemoveTypeLib<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rguidtypelib: *const ::windows::core::GUID, dwmajor: u32, dwminor: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveTypeLib(::core::mem::transmute_copy(&rguidtypelib), ::core::mem::transmute_copy(&dwmajor), ::core::mem::transmute_copy(&dwminor)).into()
        }
        unsafe extern "system" fn GetChars<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frequestedlist: u32, pbstrchars: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetChars(::core::mem::transmute_copy(&frequestedlist)) {
                ::core::result::Result::Ok(ok__) => {
                    *pbstrchars = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInfoFromContext<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: super::super::super::Foundation::PWSTR, cchcode: u32, ichcurrentposition: u32, dwlisttypesrequested: u32, pdwlisttypesprovided: *mut u32, pichlistanchorposition: *mut u32, pichfuncanchorposition: *mut u32, pmemid: *mut i32, picurrentparameter: *mut i32, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .GetInfoFromContext(::core::mem::transmute_copy(&pszcode), ::core::mem::transmute_copy(&cchcode), ::core::mem::transmute_copy(&ichcurrentposition), ::core::mem::transmute_copy(&dwlisttypesrequested), ::core::mem::transmute_copy(&pdwlisttypesprovided), ::core::mem::transmute_copy(&pichlistanchorposition), ::core::mem::transmute_copy(&pichfuncanchorposition), ::core::mem::transmute_copy(&pmemid), ::core::mem::transmute_copy(&picurrentparameter), ::core::mem::transmute_copy(&ppunk))
                .into()
        }
        unsafe extern "system" fn IsCommitChar<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ch: u16, pfcommit: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsCommitChar(::core::mem::transmute_copy(&ch)) {
                ::core::result::Result::Ok(ok__) => {
                    *pfcommit = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            AddNamedItem: AddNamedItem::<Impl, IMPL_OFFSET>,
            AddScriptlet: AddScriptlet::<Impl, IMPL_OFFSET>,
            ParseScriptText: ParseScriptText::<Impl, IMPL_OFFSET>,
            GetScriptTextAttributes: GetScriptTextAttributes::<Impl, IMPL_OFFSET>,
            GetScriptletTextAttributes: GetScriptletTextAttributes::<Impl, IMPL_OFFSET>,
            GetRoot: GetRoot::<Impl, IMPL_OFFSET>,
            GetLanguageFlags: GetLanguageFlags::<Impl, IMPL_OFFSET>,
            GetEventHandler: GetEventHandler::<Impl, IMPL_OFFSET>,
            RemoveNamedItem: RemoveNamedItem::<Impl, IMPL_OFFSET>,
            AddTypeLib: AddTypeLib::<Impl, IMPL_OFFSET>,
            RemoveTypeLib: RemoveTypeLib::<Impl, IMPL_OFFSET>,
            GetChars: GetChars::<Impl, IMPL_OFFSET>,
            GetInfoFromContext: GetInfoFromContext::<Impl, IMPL_OFFSET>,
            IsCommitChar: IsCommitChar::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptAuthor as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptAuthorProcedureImpl: Sized {
    fn ParseProcedureText(&mut self, pszcode: super::super::super::Foundation::PWSTR, pszformalparams: super::super::super::Foundation::PWSTR, pszprocedurename: super::super::super::Foundation::PWSTR, pszitemname: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, dwcookie: u32, dwflags: u32, pdispfor: ::core::option::Option<super::super::Com::IDispatch>) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptAuthorProcedureVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptAuthorProcedureImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptAuthorProcedureVtbl {
        unsafe extern "system" fn ParseProcedureText<Impl: IActiveScriptAuthorProcedureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: super::super::super::Foundation::PWSTR, pszformalparams: super::super::super::Foundation::PWSTR, pszprocedurename: super::super::super::Foundation::PWSTR, pszitemname: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, dwcookie: u32, dwflags: u32, pdispfor: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ParseProcedureText(::core::mem::transmute_copy(&pszcode), ::core::mem::transmute_copy(&pszformalparams), ::core::mem::transmute_copy(&pszprocedurename), ::core::mem::transmute_copy(&pszitemname), ::core::mem::transmute_copy(&pszdelimiter), ::core::mem::transmute_copy(&dwcookie), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute(&pdispfor)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), ParseProcedureText: ParseProcedureText::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptAuthorProcedure as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptDebug32Impl: Sized {
    fn GetScriptTextAttributes(&mut self, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::Result<()>;
    fn GetScriptletTextAttributes(&mut self, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::Result<()>;
    fn EnumCodeContextsOfPosition(&mut self, dwsourcecontext: u32, ucharacteroffset: u32, unumchars: u32) -> ::windows::core::Result<IEnumDebugCodeContexts>;
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptDebug32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptDebug32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptDebug32Vtbl {
        unsafe extern "system" fn GetScriptTextAttributes<Impl: IActiveScriptDebug32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScriptTextAttributes(::core::mem::transmute_copy(&pstrcode), ::core::mem::transmute_copy(&unumcodechars), ::core::mem::transmute_copy(&pstrdelimiter), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&pattr)).into()
        }
        unsafe extern "system" fn GetScriptletTextAttributes<Impl: IActiveScriptDebug32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScriptletTextAttributes(::core::mem::transmute_copy(&pstrcode), ::core::mem::transmute_copy(&unumcodechars), ::core::mem::transmute_copy(&pstrdelimiter), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&pattr)).into()
        }
        unsafe extern "system" fn EnumCodeContextsOfPosition<Impl: IActiveScriptDebug32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u32, ucharacteroffset: u32, unumchars: u32, ppescc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumCodeContextsOfPosition(::core::mem::transmute_copy(&dwsourcecontext), ::core::mem::transmute_copy(&ucharacteroffset), ::core::mem::transmute_copy(&unumchars)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppescc = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetScriptTextAttributes: GetScriptTextAttributes::<Impl, IMPL_OFFSET>,
            GetScriptletTextAttributes: GetScriptletTextAttributes::<Impl, IMPL_OFFSET>,
            EnumCodeContextsOfPosition: EnumCodeContextsOfPosition::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptDebug32 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptDebug64Impl: Sized {
    fn GetScriptTextAttributes(&mut self, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::Result<()>;
    fn GetScriptletTextAttributes(&mut self, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::Result<()>;
    fn EnumCodeContextsOfPosition(&mut self, dwsourcecontext: u64, ucharacteroffset: u32, unumchars: u32) -> ::windows::core::Result<IEnumDebugCodeContexts>;
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptDebug64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptDebug64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptDebug64Vtbl {
        unsafe extern "system" fn GetScriptTextAttributes<Impl: IActiveScriptDebug64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScriptTextAttributes(::core::mem::transmute_copy(&pstrcode), ::core::mem::transmute_copy(&unumcodechars), ::core::mem::transmute_copy(&pstrdelimiter), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&pattr)).into()
        }
        unsafe extern "system" fn GetScriptletTextAttributes<Impl: IActiveScriptDebug64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScriptletTextAttributes(::core::mem::transmute_copy(&pstrcode), ::core::mem::transmute_copy(&unumcodechars), ::core::mem::transmute_copy(&pstrdelimiter), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&pattr)).into()
        }
        unsafe extern "system" fn EnumCodeContextsOfPosition<Impl: IActiveScriptDebug64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u64, ucharacteroffset: u32, unumchars: u32, ppescc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumCodeContextsOfPosition(::core::mem::transmute_copy(&dwsourcecontext), ::core::mem::transmute_copy(&ucharacteroffset), ::core::mem::transmute_copy(&unumchars)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppescc = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetScriptTextAttributes: GetScriptTextAttributes::<Impl, IMPL_OFFSET>,
            GetScriptletTextAttributes: GetScriptletTextAttributes::<Impl, IMPL_OFFSET>,
            EnumCodeContextsOfPosition: EnumCodeContextsOfPosition::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptDebug64 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptEncodeImpl: Sized {
    fn EncodeSection(&mut self, pchin: super::super::super::Foundation::PWSTR, cchin: u32, pchout: super::super::super::Foundation::PWSTR, cchout: u32, pcchret: *mut u32) -> ::windows::core::Result<()>;
    fn DecodeScript(&mut self, pchin: super::super::super::Foundation::PWSTR, cchin: u32, pchout: super::super::super::Foundation::PWSTR, cchout: u32, pcchret: *mut u32) -> ::windows::core::Result<()>;
    fn GetEncodeProgId(&mut self, pbstrout: *mut super::super::super::Foundation::BSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptEncodeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptEncodeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptEncodeVtbl {
        unsafe extern "system" fn EncodeSection<Impl: IActiveScriptEncodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pchin: super::super::super::Foundation::PWSTR, cchin: u32, pchout: super::super::super::Foundation::PWSTR, cchout: u32, pcchret: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EncodeSection(::core::mem::transmute_copy(&pchin), ::core::mem::transmute_copy(&cchin), ::core::mem::transmute_copy(&pchout), ::core::mem::transmute_copy(&cchout), ::core::mem::transmute_copy(&pcchret)).into()
        }
        unsafe extern "system" fn DecodeScript<Impl: IActiveScriptEncodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pchin: super::super::super::Foundation::PWSTR, cchin: u32, pchout: super::super::super::Foundation::PWSTR, cchout: u32, pcchret: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DecodeScript(::core::mem::transmute_copy(&pchin), ::core::mem::transmute_copy(&cchin), ::core::mem::transmute_copy(&pchout), ::core::mem::transmute_copy(&cchout), ::core::mem::transmute_copy(&pcchret)).into()
        }
        unsafe extern "system" fn GetEncodeProgId<Impl: IActiveScriptEncodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrout: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEncodeProgId(::core::mem::transmute_copy(&pbstrout)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            EncodeSection: EncodeSection::<Impl, IMPL_OFFSET>,
            DecodeScript: DecodeScript::<Impl, IMPL_OFFSET>,
            GetEncodeProgId: GetEncodeProgId::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptEncode as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptErrorImpl: Sized {
    fn GetExceptionInfo(&mut self) -> ::windows::core::Result<super::super::Com::EXCEPINFO>;
    fn GetSourcePosition(&mut self, pdwsourcecontext: *mut u32, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::core::Result<()>;
    fn GetSourceLineText(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptErrorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptErrorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptErrorVtbl {
        unsafe extern "system" fn GetExceptionInfo<Impl: IActiveScriptErrorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExceptionInfo() {
                ::core::result::Result::Ok(ok__) => {
                    *pexcepinfo = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePosition<Impl: IActiveScriptErrorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwsourcecontext: *mut u32, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePosition(::core::mem::transmute_copy(&pdwsourcecontext), ::core::mem::transmute_copy(&pullinenumber), ::core::mem::transmute_copy(&plcharacterposition)).into()
        }
        unsafe extern "system" fn GetSourceLineText<Impl: IActiveScriptErrorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrsourceline: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSourceLineText() {
                ::core::result::Result::Ok(ok__) => {
                    *pbstrsourceline = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetExceptionInfo: GetExceptionInfo::<Impl, IMPL_OFFSET>,
            GetSourcePosition: GetSourcePosition::<Impl, IMPL_OFFSET>,
            GetSourceLineText: GetSourceLineText::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptError as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptError64Impl: Sized + IActiveScriptErrorImpl {
    fn GetSourcePosition64(&mut self, pdwsourcecontext: *mut u64, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptError64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptError64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptError64Vtbl {
        unsafe extern "system" fn GetSourcePosition64<Impl: IActiveScriptError64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwsourcecontext: *mut u64, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePosition64(::core::mem::transmute_copy(&pdwsourcecontext), ::core::mem::transmute_copy(&pullinenumber), ::core::mem::transmute_copy(&plcharacterposition)).into()
        }
        Self { base: IActiveScriptErrorVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(), GetSourcePosition64: GetSourcePosition64::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptError64 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptErrorDebugImpl: Sized + IActiveScriptErrorImpl {
    fn GetDocumentContext(&mut self) -> ::windows::core::Result<IDebugDocumentContext>;
    fn GetStackFrame(&mut self) -> ::windows::core::Result<IDebugStackFrame>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptErrorDebugVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptErrorDebugImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptErrorDebugVtbl {
        unsafe extern "system" fn GetDocumentContext<Impl: IActiveScriptErrorDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppssc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDocumentContext() {
                ::core::result::Result::Ok(ok__) => {
                    *ppssc = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackFrame<Impl: IActiveScriptErrorDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetStackFrame() {
                ::core::result::Result::Ok(ok__) => {
                    *ppdsf = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IActiveScriptErrorVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            GetDocumentContext: GetDocumentContext::<Impl, IMPL_OFFSET>,
            GetStackFrame: GetStackFrame::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptErrorDebug as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptErrorDebug110Impl: Sized {
    fn GetExceptionThrownKind(&mut self) -> ::windows::core::Result<SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND>;
}
impl IActiveScriptErrorDebug110Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptErrorDebug110Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptErrorDebug110Vtbl {
        unsafe extern "system" fn GetExceptionThrownKind<Impl: IActiveScriptErrorDebug110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pexceptionkind: *mut SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExceptionThrownKind() {
                ::core::result::Result::Ok(ok__) => {
                    *pexceptionkind = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), GetExceptionThrownKind: GetExceptionThrownKind::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptErrorDebug110 as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptGarbageCollectorImpl: Sized {
    fn CollectGarbage(&mut self, scriptgctype: SCRIPTGCTYPE) -> ::windows::core::Result<()>;
}
impl IActiveScriptGarbageCollectorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptGarbageCollectorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptGarbageCollectorVtbl {
        unsafe extern "system" fn CollectGarbage<Impl: IActiveScriptGarbageCollectorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scriptgctype: SCRIPTGCTYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CollectGarbage(::core::mem::transmute_copy(&scriptgctype)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), CollectGarbage: CollectGarbage::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptGarbageCollector as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptHostEncodeImpl: Sized {
    fn EncodeScriptHostFile(&mut self, bstrinfile: super::super::super::Foundation::BSTR, pbstroutfile: *mut super::super::super::Foundation::BSTR, cflags: u32, bstrdefaultlang: super::super::super::Foundation::BSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptHostEncodeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptHostEncodeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptHostEncodeVtbl {
        unsafe extern "system" fn EncodeScriptHostFile<Impl: IActiveScriptHostEncodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrinfile: ::core::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, pbstroutfile: *mut super::super::super::Foundation::BSTR, cflags: u32, bstrdefaultlang: ::core::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EncodeScriptHostFile(::core::mem::transmute_copy(&bstrinfile), ::core::mem::transmute_copy(&pbstroutfile), ::core::mem::transmute_copy(&cflags), ::core::mem::transmute_copy(&bstrdefaultlang)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), EncodeScriptHostFile: EncodeScriptHostFile::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptHostEncode as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IActiveScriptParse32Impl: Sized {
    fn InitNew(&mut self) -> ::windows::core::Result<()>;
    fn AddScriptlet(&mut self, pstrdefaultname: super::super::super::Foundation::PWSTR, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, pstrsubitemname: super::super::super::Foundation::PWSTR, pstreventname: super::super::super::Foundation::PWSTR, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32, pbstrname: *mut super::super::super::Foundation::BSTR, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::Result<()>;
    fn ParseScriptText(&mut self, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: ::core::option::Option<::windows::core::IUnknown>, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32, pvarresult: *mut super::super::Com::VARIANT, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IActiveScriptParse32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParse32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParse32Vtbl {
        unsafe extern "system" fn InitNew<Impl: IActiveScriptParse32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).InitNew().into()
        }
        unsafe extern "system" fn AddScriptlet<Impl: IActiveScriptParse32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrdefaultname: super::super::super::Foundation::PWSTR, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, pstrsubitemname: super::super::super::Foundation::PWSTR, pstreventname: super::super::super::Foundation::PWSTR, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32, pbstrname: *mut super::super::super::Foundation::BSTR, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .AddScriptlet(
                    ::core::mem::transmute_copy(&pstrdefaultname),
                    ::core::mem::transmute_copy(&pstrcode),
                    ::core::mem::transmute_copy(&pstritemname),
                    ::core::mem::transmute_copy(&pstrsubitemname),
                    ::core::mem::transmute_copy(&pstreventname),
                    ::core::mem::transmute_copy(&pstrdelimiter),
                    ::core::mem::transmute_copy(&dwsourcecontextcookie),
                    ::core::mem::transmute_copy(&ulstartinglinenumber),
                    ::core::mem::transmute_copy(&dwflags),
                    ::core::mem::transmute_copy(&pbstrname),
                    ::core::mem::transmute_copy(&pexcepinfo),
                )
                .into()
        }
        unsafe extern "system" fn ParseScriptText<Impl: IActiveScriptParse32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32, pvarresult: *mut super::super::Com::VARIANT, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ParseScriptText(::core::mem::transmute_copy(&pstrcode), ::core::mem::transmute_copy(&pstritemname), ::core::mem::transmute(&punkcontext), ::core::mem::transmute_copy(&pstrdelimiter), ::core::mem::transmute_copy(&dwsourcecontextcookie), ::core::mem::transmute_copy(&ulstartinglinenumber), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&pvarresult), ::core::mem::transmute_copy(&pexcepinfo)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            InitNew: InitNew::<Impl, IMPL_OFFSET>,
            AddScriptlet: AddScriptlet::<Impl, IMPL_OFFSET>,
            ParseScriptText: ParseScriptText::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParse32 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IActiveScriptParse64Impl: Sized {
    fn InitNew(&mut self) -> ::windows::core::Result<()>;
    fn AddScriptlet(&mut self, pstrdefaultname: super::super::super::Foundation::PWSTR, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, pstrsubitemname: super::super::super::Foundation::PWSTR, pstreventname: super::super::super::Foundation::PWSTR, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32, pbstrname: *mut super::super::super::Foundation::BSTR, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::Result<()>;
    fn ParseScriptText(&mut self, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: ::core::option::Option<::windows::core::IUnknown>, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32, pvarresult: *mut super::super::Com::VARIANT, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IActiveScriptParse64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParse64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParse64Vtbl {
        unsafe extern "system" fn InitNew<Impl: IActiveScriptParse64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).InitNew().into()
        }
        unsafe extern "system" fn AddScriptlet<Impl: IActiveScriptParse64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrdefaultname: super::super::super::Foundation::PWSTR, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, pstrsubitemname: super::super::super::Foundation::PWSTR, pstreventname: super::super::super::Foundation::PWSTR, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32, pbstrname: *mut super::super::super::Foundation::BSTR, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .AddScriptlet(
                    ::core::mem::transmute_copy(&pstrdefaultname),
                    ::core::mem::transmute_copy(&pstrcode),
                    ::core::mem::transmute_copy(&pstritemname),
                    ::core::mem::transmute_copy(&pstrsubitemname),
                    ::core::mem::transmute_copy(&pstreventname),
                    ::core::mem::transmute_copy(&pstrdelimiter),
                    ::core::mem::transmute_copy(&dwsourcecontextcookie),
                    ::core::mem::transmute_copy(&ulstartinglinenumber),
                    ::core::mem::transmute_copy(&dwflags),
                    ::core::mem::transmute_copy(&pbstrname),
                    ::core::mem::transmute_copy(&pexcepinfo),
                )
                .into()
        }
        unsafe extern "system" fn ParseScriptText<Impl: IActiveScriptParse64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32, pvarresult: *mut super::super::Com::VARIANT, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ParseScriptText(::core::mem::transmute_copy(&pstrcode), ::core::mem::transmute_copy(&pstritemname), ::core::mem::transmute(&punkcontext), ::core::mem::transmute_copy(&pstrdelimiter), ::core::mem::transmute_copy(&dwsourcecontextcookie), ::core::mem::transmute_copy(&ulstartinglinenumber), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&pvarresult), ::core::mem::transmute_copy(&pexcepinfo)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            InitNew: InitNew::<Impl, IMPL_OFFSET>,
            AddScriptlet: AddScriptlet::<Impl, IMPL_OFFSET>,
            ParseScriptText: ParseScriptText::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParse64 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptParseProcedure2_32Impl: Sized + IActiveScriptParseProcedure32Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptParseProcedure2_32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParseProcedure2_32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParseProcedure2_32Vtbl {
        Self { base: IActiveScriptParseProcedure32Vtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>() }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParseProcedure2_32 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptParseProcedure2_64Impl: Sized + IActiveScriptParseProcedure64Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptParseProcedure2_64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParseProcedure2_64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParseProcedure2_64Vtbl {
        Self { base: IActiveScriptParseProcedure64Vtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>() }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParseProcedure2_64 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptParseProcedure32Impl: Sized {
    fn ParseProcedureText(&mut self, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstrprocedurename: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: ::core::option::Option<::windows::core::IUnknown>, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32) -> ::windows::core::Result<super::super::Com::IDispatch>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptParseProcedure32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParseProcedure32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParseProcedure32Vtbl {
        unsafe extern "system" fn ParseProcedureText<Impl: IActiveScriptParseProcedure32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstrprocedurename: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ParseProcedureText(::core::mem::transmute_copy(&pstrcode), ::core::mem::transmute_copy(&pstrformalparams), ::core::mem::transmute_copy(&pstrprocedurename), ::core::mem::transmute_copy(&pstritemname), ::core::mem::transmute(&punkcontext), ::core::mem::transmute_copy(&pstrdelimiter), ::core::mem::transmute_copy(&dwsourcecontextcookie), ::core::mem::transmute_copy(&ulstartinglinenumber), ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppdisp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), ParseProcedureText: ParseProcedureText::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParseProcedure32 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptParseProcedure64Impl: Sized {
    fn ParseProcedureText(&mut self, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstrprocedurename: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: ::core::option::Option<::windows::core::IUnknown>, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32) -> ::windows::core::Result<super::super::Com::IDispatch>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptParseProcedure64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParseProcedure64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParseProcedure64Vtbl {
        unsafe extern "system" fn ParseProcedureText<Impl: IActiveScriptParseProcedure64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstrprocedurename: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ParseProcedureText(::core::mem::transmute_copy(&pstrcode), ::core::mem::transmute_copy(&pstrformalparams), ::core::mem::transmute_copy(&pstrprocedurename), ::core::mem::transmute_copy(&pstritemname), ::core::mem::transmute(&punkcontext), ::core::mem::transmute_copy(&pstrdelimiter), ::core::mem::transmute_copy(&dwsourcecontextcookie), ::core::mem::transmute_copy(&ulstartinglinenumber), ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppdisp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), ParseProcedureText: ParseProcedureText::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParseProcedure64 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptParseProcedureOld32Impl: Sized {
    fn ParseProcedureText(&mut self, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: ::core::option::Option<::windows::core::IUnknown>, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32) -> ::windows::core::Result<super::super::Com::IDispatch>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptParseProcedureOld32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParseProcedureOld32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParseProcedureOld32Vtbl {
        unsafe extern "system" fn ParseProcedureText<Impl: IActiveScriptParseProcedureOld32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ParseProcedureText(::core::mem::transmute_copy(&pstrcode), ::core::mem::transmute_copy(&pstrformalparams), ::core::mem::transmute_copy(&pstritemname), ::core::mem::transmute(&punkcontext), ::core::mem::transmute_copy(&pstrdelimiter), ::core::mem::transmute_copy(&dwsourcecontextcookie), ::core::mem::transmute_copy(&ulstartinglinenumber), ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppdisp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), ParseProcedureText: ParseProcedureText::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParseProcedureOld32 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptParseProcedureOld64Impl: Sized {
    fn ParseProcedureText(&mut self, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: ::core::option::Option<::windows::core::IUnknown>, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32) -> ::windows::core::Result<super::super::Com::IDispatch>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptParseProcedureOld64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParseProcedureOld64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParseProcedureOld64Vtbl {
        unsafe extern "system" fn ParseProcedureText<Impl: IActiveScriptParseProcedureOld64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ParseProcedureText(::core::mem::transmute_copy(&pstrcode), ::core::mem::transmute_copy(&pstrformalparams), ::core::mem::transmute_copy(&pstritemname), ::core::mem::transmute(&punkcontext), ::core::mem::transmute_copy(&pstrdelimiter), ::core::mem::transmute_copy(&dwsourcecontextcookie), ::core::mem::transmute_copy(&ulstartinglinenumber), ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppdisp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), ParseProcedureText: ParseProcedureText::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParseProcedureOld64 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptProfilerCallbackImpl: Sized {
    fn Initialize(&mut self, dwcontext: u32) -> ::windows::core::Result<()>;
    fn Shutdown(&mut self, hrreason: ::windows::core::HRESULT) -> ::windows::core::Result<()>;
    fn ScriptCompiled(&mut self, scriptid: i32, r#type: PROFILER_SCRIPT_TYPE, pidebugdocumentcontext: ::core::option::Option<::windows::core::IUnknown>) -> ::windows::core::Result<()>;
    fn FunctionCompiled(&mut self, functionid: i32, scriptid: i32, pwszfunctionname: super::super::super::Foundation::PWSTR, pwszfunctionnamehint: super::super::super::Foundation::PWSTR, pidebugdocumentcontext: ::core::option::Option<::windows::core::IUnknown>) -> ::windows::core::Result<()>;
    fn OnFunctionEnter(&mut self, scriptid: i32, functionid: i32) -> ::windows::core::Result<()>;
    fn OnFunctionExit(&mut self, scriptid: i32, functionid: i32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptProfilerCallbackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerCallbackImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerCallbackVtbl {
        unsafe extern "system" fn Initialize<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcontext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Initialize(::core::mem::transmute_copy(&dwcontext)).into()
        }
        unsafe extern "system" fn Shutdown<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hrreason: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Shutdown(::core::mem::transmute_copy(&hrreason)).into()
        }
        unsafe extern "system" fn ScriptCompiled<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scriptid: i32, r#type: PROFILER_SCRIPT_TYPE, pidebugdocumentcontext: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ScriptCompiled(::core::mem::transmute_copy(&scriptid), ::core::mem::transmute_copy(&r#type), ::core::mem::transmute(&pidebugdocumentcontext)).into()
        }
        unsafe extern "system" fn FunctionCompiled<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, functionid: i32, scriptid: i32, pwszfunctionname: super::super::super::Foundation::PWSTR, pwszfunctionnamehint: super::super::super::Foundation::PWSTR, pidebugdocumentcontext: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FunctionCompiled(::core::mem::transmute_copy(&functionid), ::core::mem::transmute_copy(&scriptid), ::core::mem::transmute_copy(&pwszfunctionname), ::core::mem::transmute_copy(&pwszfunctionnamehint), ::core::mem::transmute(&pidebugdocumentcontext)).into()
        }
        unsafe extern "system" fn OnFunctionEnter<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scriptid: i32, functionid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnFunctionEnter(::core::mem::transmute_copy(&scriptid), ::core::mem::transmute_copy(&functionid)).into()
        }
        unsafe extern "system" fn OnFunctionExit<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scriptid: i32, functionid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnFunctionExit(::core::mem::transmute_copy(&scriptid), ::core::mem::transmute_copy(&functionid)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Initialize: Initialize::<Impl, IMPL_OFFSET>,
            Shutdown: Shutdown::<Impl, IMPL_OFFSET>,
            ScriptCompiled: ScriptCompiled::<Impl, IMPL_OFFSET>,
            FunctionCompiled: FunctionCompiled::<Impl, IMPL_OFFSET>,
            OnFunctionEnter: OnFunctionEnter::<Impl, IMPL_OFFSET>,
            OnFunctionExit: OnFunctionExit::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerCallback as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptProfilerCallback2Impl: Sized + IActiveScriptProfilerCallbackImpl {
    fn OnFunctionEnterByName(&mut self, pwszfunctionname: super::super::super::Foundation::PWSTR, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::core::Result<()>;
    fn OnFunctionExitByName(&mut self, pwszfunctionname: super::super::super::Foundation::PWSTR, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptProfilerCallback2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerCallback2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerCallback2Vtbl {
        unsafe extern "system" fn OnFunctionEnterByName<Impl: IActiveScriptProfilerCallback2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszfunctionname: super::super::super::Foundation::PWSTR, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnFunctionEnterByName(::core::mem::transmute_copy(&pwszfunctionname), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn OnFunctionExitByName<Impl: IActiveScriptProfilerCallback2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszfunctionname: super::super::super::Foundation::PWSTR, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnFunctionExitByName(::core::mem::transmute_copy(&pwszfunctionname), ::core::mem::transmute_copy(&r#type)).into()
        }
        Self {
            base: IActiveScriptProfilerCallbackVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            OnFunctionEnterByName: OnFunctionEnterByName::<Impl, IMPL_OFFSET>,
            OnFunctionExitByName: OnFunctionExitByName::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerCallback2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptProfilerCallback3Impl: Sized + IActiveScriptProfilerCallbackImpl + IActiveScriptProfilerCallback2Impl {
    fn SetWebWorkerId(&mut self, webworkerid: u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptProfilerCallback3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerCallback3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerCallback3Vtbl {
        unsafe extern "system" fn SetWebWorkerId<Impl: IActiveScriptProfilerCallback3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, webworkerid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetWebWorkerId(::core::mem::transmute_copy(&webworkerid)).into()
        }
        Self { base: IActiveScriptProfilerCallback2Vtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(), SetWebWorkerId: SetWebWorkerId::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerCallback3 as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptProfilerControlImpl: Sized {
    fn StartProfiling(&mut self, clsidprofilerobject: *const ::windows::core::GUID, dweventmask: u32, dwcontext: u32) -> ::windows::core::Result<()>;
    fn SetProfilerEventMask(&mut self, dweventmask: u32) -> ::windows::core::Result<()>;
    fn StopProfiling(&mut self, hrshutdownreason: ::windows::core::HRESULT) -> ::windows::core::Result<()>;
}
impl IActiveScriptProfilerControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerControlVtbl {
        unsafe extern "system" fn StartProfiling<Impl: IActiveScriptProfilerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsidprofilerobject: *const ::windows::core::GUID, dweventmask: u32, dwcontext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartProfiling(::core::mem::transmute_copy(&clsidprofilerobject), ::core::mem::transmute_copy(&dweventmask), ::core::mem::transmute_copy(&dwcontext)).into()
        }
        unsafe extern "system" fn SetProfilerEventMask<Impl: IActiveScriptProfilerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dweventmask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetProfilerEventMask(::core::mem::transmute_copy(&dweventmask)).into()
        }
        unsafe extern "system" fn StopProfiling<Impl: IActiveScriptProfilerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hrshutdownreason: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StopProfiling(::core::mem::transmute_copy(&hrshutdownreason)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            StartProfiling: StartProfiling::<Impl, IMPL_OFFSET>,
            SetProfilerEventMask: SetProfilerEventMask::<Impl, IMPL_OFFSET>,
            StopProfiling: StopProfiling::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerControl as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptProfilerControl2Impl: Sized + IActiveScriptProfilerControlImpl {
    fn CompleteProfilerStart(&mut self) -> ::windows::core::Result<()>;
    fn PrepareProfilerStop(&mut self) -> ::windows::core::Result<()>;
}
impl IActiveScriptProfilerControl2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerControl2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerControl2Vtbl {
        unsafe extern "system" fn CompleteProfilerStart<Impl: IActiveScriptProfilerControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CompleteProfilerStart().into()
        }
        unsafe extern "system" fn PrepareProfilerStop<Impl: IActiveScriptProfilerControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).PrepareProfilerStop().into()
        }
        Self {
            base: IActiveScriptProfilerControlVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            CompleteProfilerStart: CompleteProfilerStart::<Impl, IMPL_OFFSET>,
            PrepareProfilerStop: PrepareProfilerStop::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerControl2 as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptProfilerControl3Impl: Sized + IActiveScriptProfilerControlImpl + IActiveScriptProfilerControl2Impl {
    fn EnumHeap(&mut self) -> ::windows::core::Result<IActiveScriptProfilerHeapEnum>;
}
impl IActiveScriptProfilerControl3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerControl3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerControl3Vtbl {
        unsafe extern "system" fn EnumHeap<Impl: IActiveScriptProfilerControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumHeap() {
                ::core::result::Result::Ok(ok__) => {
                    *ppenum = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: IActiveScriptProfilerControl2Vtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(), EnumHeap: EnumHeap::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerControl3 as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptProfilerControl4Impl: Sized + IActiveScriptProfilerControlImpl + IActiveScriptProfilerControl2Impl + IActiveScriptProfilerControl3Impl {
    fn SummarizeHeap(&mut self, heapsummary: *mut PROFILER_HEAP_SUMMARY) -> ::windows::core::Result<()>;
}
impl IActiveScriptProfilerControl4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerControl4Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerControl4Vtbl {
        unsafe extern "system" fn SummarizeHeap<Impl: IActiveScriptProfilerControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, heapsummary: *mut PROFILER_HEAP_SUMMARY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SummarizeHeap(::core::mem::transmute_copy(&heapsummary)).into()
        }
        Self { base: IActiveScriptProfilerControl3Vtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(), SummarizeHeap: SummarizeHeap::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerControl4 as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptProfilerControl5Impl: Sized + IActiveScriptProfilerControlImpl + IActiveScriptProfilerControl2Impl + IActiveScriptProfilerControl3Impl + IActiveScriptProfilerControl4Impl {
    fn EnumHeap2(&mut self, enumflags: PROFILER_HEAP_ENUM_FLAGS) -> ::windows::core::Result<IActiveScriptProfilerHeapEnum>;
}
impl IActiveScriptProfilerControl5Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerControl5Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerControl5Vtbl {
        unsafe extern "system" fn EnumHeap2<Impl: IActiveScriptProfilerControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enumflags: PROFILER_HEAP_ENUM_FLAGS, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumHeap2(::core::mem::transmute_copy(&enumflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppenum = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: IActiveScriptProfilerControl4Vtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(), EnumHeap2: EnumHeap2::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerControl5 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptProfilerHeapEnumImpl: Sized {
    fn Next(&mut self, celt: u32, heapobjects: *mut *mut PROFILER_HEAP_OBJECT, pceltfetched: *mut u32) -> ::windows::core::Result<()>;
    fn GetOptionalInfo(&mut self, heapobject: *const PROFILER_HEAP_OBJECT, celt: u32, optionalinfo: *mut PROFILER_HEAP_OBJECT_OPTIONAL_INFO) -> ::windows::core::Result<()>;
    fn FreeObjectAndOptionalInfo(&mut self, celt: u32, heapobjects: *const *const PROFILER_HEAP_OBJECT) -> ::windows::core::Result<()>;
    fn GetNameIdMap(&mut self, pnamelist: *mut *mut *mut super::super::super::Foundation::PWSTR, pcelt: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptProfilerHeapEnumVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerHeapEnumImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerHeapEnumVtbl {
        unsafe extern "system" fn Next<Impl: IActiveScriptProfilerHeapEnumImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, heapobjects: *mut *mut PROFILER_HEAP_OBJECT, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Next(::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&heapobjects), ::core::mem::transmute_copy(&pceltfetched)).into()
        }
        unsafe extern "system" fn GetOptionalInfo<Impl: IActiveScriptProfilerHeapEnumImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, heapobject: *const PROFILER_HEAP_OBJECT, celt: u32, optionalinfo: *mut PROFILER_HEAP_OBJECT_OPTIONAL_INFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOptionalInfo(::core::mem::transmute_copy(&heapobject), ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&optionalinfo)).into()
        }
        unsafe extern "system" fn FreeObjectAndOptionalInfo<Impl: IActiveScriptProfilerHeapEnumImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, heapobjects: *const *const PROFILER_HEAP_OBJECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FreeObjectAndOptionalInfo(::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&heapobjects)).into()
        }
        unsafe extern "system" fn GetNameIdMap<Impl: IActiveScriptProfilerHeapEnumImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnamelist: *mut *mut *mut super::super::super::Foundation::PWSTR, pcelt: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNameIdMap(::core::mem::transmute_copy(&pnamelist), ::core::mem::transmute_copy(&pcelt)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Next: Next::<Impl, IMPL_OFFSET>,
            GetOptionalInfo: GetOptionalInfo::<Impl, IMPL_OFFSET>,
            FreeObjectAndOptionalInfo: FreeObjectAndOptionalInfo::<Impl, IMPL_OFFSET>,
            GetNameIdMap: GetNameIdMap::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerHeapEnum as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IActiveScriptPropertyImpl: Sized {
    fn GetProperty(&mut self, dwproperty: u32, pvarindex: *const super::super::Com::VARIANT) -> ::windows::core::Result<super::super::Com::VARIANT>;
    fn SetProperty(&mut self, dwproperty: u32, pvarindex: *const super::super::Com::VARIANT, pvarvalue: *const super::super::Com::VARIANT) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IActiveScriptPropertyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptPropertyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptPropertyVtbl {
        unsafe extern "system" fn GetProperty<Impl: IActiveScriptPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwproperty: u32, pvarindex: *const super::super::Com::VARIANT, pvarvalue: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProperty(::core::mem::transmute_copy(&dwproperty), ::core::mem::transmute_copy(&pvarindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *pvarvalue = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProperty<Impl: IActiveScriptPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwproperty: u32, pvarindex: *const super::super::Com::VARIANT, pvarvalue: *const super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetProperty(::core::mem::transmute_copy(&dwproperty), ::core::mem::transmute_copy(&pvarindex), ::core::mem::transmute_copy(&pvarvalue)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetProperty: GetProperty::<Impl, IMPL_OFFSET>,
            SetProperty: SetProperty::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProperty as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptSIPInfoImpl: Sized {
    fn GetSIPOID(&mut self) -> ::windows::core::Result<::windows::core::GUID>;
}
impl IActiveScriptSIPInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSIPInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSIPInfoVtbl {
        unsafe extern "system" fn GetSIPOID<Impl: IActiveScriptSIPInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, poid_sip: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSIPOID() {
                ::core::result::Result::Ok(ok__) => {
                    *poid_sip = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), GetSIPOID: GetSIPOID::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSIPInfo as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IActiveScriptSiteImpl: Sized {
    fn GetLCID(&mut self) -> ::windows::core::Result<u32>;
    fn GetItemInfo(&mut self, pstrname: super::super::super::Foundation::PWSTR, dwreturnmask: u32, ppiunkitem: *mut ::core::option::Option<::windows::core::IUnknown>, ppti: *mut ::core::option::Option<super::super::Com::ITypeInfo>) -> ::windows::core::Result<()>;
    fn GetDocVersionString(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn OnScriptTerminate(&mut self, pvarresult: *const super::super::Com::VARIANT, pexcepinfo: *const super::super::Com::EXCEPINFO) -> ::windows::core::Result<()>;
    fn OnStateChange(&mut self, ssscriptstate: SCRIPTSTATE) -> ::windows::core::Result<()>;
    fn OnScriptError(&mut self, pscripterror: ::core::option::Option<IActiveScriptError>) -> ::windows::core::Result<()>;
    fn OnEnterScript(&mut self) -> ::windows::core::Result<()>;
    fn OnLeaveScript(&mut self) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IActiveScriptSiteVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteVtbl {
        unsafe extern "system" fn GetLCID<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plcid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLCID() {
                ::core::result::Result::Ok(ok__) => {
                    *plcid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemInfo<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrname: super::super::super::Foundation::PWSTR, dwreturnmask: u32, ppiunkitem: *mut *mut ::core::ffi::c_void, ppti: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetItemInfo(::core::mem::transmute_copy(&pstrname), ::core::mem::transmute_copy(&dwreturnmask), ::core::mem::transmute_copy(&ppiunkitem), ::core::mem::transmute_copy(&ppti)).into()
        }
        unsafe extern "system" fn GetDocVersionString<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrversion: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDocVersionString() {
                ::core::result::Result::Ok(ok__) => {
                    *pbstrversion = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnScriptTerminate<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvarresult: *const super::super::Com::VARIANT, pexcepinfo: *const super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnScriptTerminate(::core::mem::transmute_copy(&pvarresult), ::core::mem::transmute_copy(&pexcepinfo)).into()
        }
        unsafe extern "system" fn OnStateChange<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ssscriptstate: SCRIPTSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnStateChange(::core::mem::transmute_copy(&ssscriptstate)).into()
        }
        unsafe extern "system" fn OnScriptError<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pscripterror: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnScriptError(::core::mem::transmute(&pscripterror)).into()
        }
        unsafe extern "system" fn OnEnterScript<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnEnterScript().into()
        }
        unsafe extern "system" fn OnLeaveScript<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnLeaveScript().into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetLCID: GetLCID::<Impl, IMPL_OFFSET>,
            GetItemInfo: GetItemInfo::<Impl, IMPL_OFFSET>,
            GetDocVersionString: GetDocVersionString::<Impl, IMPL_OFFSET>,
            OnScriptTerminate: OnScriptTerminate::<Impl, IMPL_OFFSET>,
            OnStateChange: OnStateChange::<Impl, IMPL_OFFSET>,
            OnScriptError: OnScriptError::<Impl, IMPL_OFFSET>,
            OnEnterScript: OnEnterScript::<Impl, IMPL_OFFSET>,
            OnLeaveScript: OnLeaveScript::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSite as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptSiteDebug32Impl: Sized {
    fn GetDocumentContextFromPosition(&mut self, dwsourcecontext: u32, ucharacteroffset: u32, unumchars: u32) -> ::windows::core::Result<IDebugDocumentContext>;
    fn GetApplication(&mut self) -> ::windows::core::Result<IDebugApplication32>;
    fn GetRootApplicationNode(&mut self) -> ::windows::core::Result<IDebugApplicationNode>;
    fn OnScriptErrorDebug(&mut self, perrordebug: ::core::option::Option<IActiveScriptErrorDebug>, pfenterdebugger: *mut super::super::super::Foundation::BOOL, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptSiteDebug32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteDebug32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteDebug32Vtbl {
        unsafe extern "system" fn GetDocumentContextFromPosition<Impl: IActiveScriptSiteDebug32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u32, ucharacteroffset: u32, unumchars: u32, ppsc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDocumentContextFromPosition(::core::mem::transmute_copy(&dwsourcecontext), ::core::mem::transmute_copy(&ucharacteroffset), ::core::mem::transmute_copy(&unumchars)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppsc = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetApplication<Impl: IActiveScriptSiteDebug32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetApplication() {
                ::core::result::Result::Ok(ok__) => {
                    *ppda = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRootApplicationNode<Impl: IActiveScriptSiteDebug32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdanroot: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRootApplicationNode() {
                ::core::result::Result::Ok(ok__) => {
                    *ppdanroot = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnScriptErrorDebug<Impl: IActiveScriptSiteDebug32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, perrordebug: ::windows::core::RawPtr, pfenterdebugger: *mut super::super::super::Foundation::BOOL, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnScriptErrorDebug(::core::mem::transmute(&perrordebug), ::core::mem::transmute_copy(&pfenterdebugger), ::core::mem::transmute_copy(&pfcallonscripterrorwhencontinuing)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetDocumentContextFromPosition: GetDocumentContextFromPosition::<Impl, IMPL_OFFSET>,
            GetApplication: GetApplication::<Impl, IMPL_OFFSET>,
            GetRootApplicationNode: GetRootApplicationNode::<Impl, IMPL_OFFSET>,
            OnScriptErrorDebug: OnScriptErrorDebug::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSiteDebug32 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptSiteDebug64Impl: Sized {
    fn GetDocumentContextFromPosition(&mut self, dwsourcecontext: u64, ucharacteroffset: u32, unumchars: u32) -> ::windows::core::Result<IDebugDocumentContext>;
    fn GetApplication(&mut self) -> ::windows::core::Result<IDebugApplication64>;
    fn GetRootApplicationNode(&mut self) -> ::windows::core::Result<IDebugApplicationNode>;
    fn OnScriptErrorDebug(&mut self, perrordebug: ::core::option::Option<IActiveScriptErrorDebug>, pfenterdebugger: *mut super::super::super::Foundation::BOOL, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptSiteDebug64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteDebug64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteDebug64Vtbl {
        unsafe extern "system" fn GetDocumentContextFromPosition<Impl: IActiveScriptSiteDebug64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u64, ucharacteroffset: u32, unumchars: u32, ppsc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDocumentContextFromPosition(::core::mem::transmute_copy(&dwsourcecontext), ::core::mem::transmute_copy(&ucharacteroffset), ::core::mem::transmute_copy(&unumchars)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppsc = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetApplication<Impl: IActiveScriptSiteDebug64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetApplication() {
                ::core::result::Result::Ok(ok__) => {
                    *ppda = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRootApplicationNode<Impl: IActiveScriptSiteDebug64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdanroot: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRootApplicationNode() {
                ::core::result::Result::Ok(ok__) => {
                    *ppdanroot = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnScriptErrorDebug<Impl: IActiveScriptSiteDebug64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, perrordebug: ::windows::core::RawPtr, pfenterdebugger: *mut super::super::super::Foundation::BOOL, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnScriptErrorDebug(::core::mem::transmute(&perrordebug), ::core::mem::transmute_copy(&pfenterdebugger), ::core::mem::transmute_copy(&pfcallonscripterrorwhencontinuing)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetDocumentContextFromPosition: GetDocumentContextFromPosition::<Impl, IMPL_OFFSET>,
            GetApplication: GetApplication::<Impl, IMPL_OFFSET>,
            GetRootApplicationNode: GetRootApplicationNode::<Impl, IMPL_OFFSET>,
            OnScriptErrorDebug: OnScriptErrorDebug::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSiteDebug64 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptSiteDebugExImpl: Sized {
    fn OnCanNotJITScriptErrorDebug(&mut self, perrordebug: ::core::option::Option<IActiveScriptErrorDebug>) -> ::windows::core::Result<super::super::super::Foundation::BOOL>;
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptSiteDebugExVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteDebugExImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteDebugExVtbl {
        unsafe extern "system" fn OnCanNotJITScriptErrorDebug<Impl: IActiveScriptSiteDebugExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, perrordebug: ::windows::core::RawPtr, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnCanNotJITScriptErrorDebug(::core::mem::transmute(&perrordebug)) {
                ::core::result::Result::Ok(ok__) => {
                    *pfcallonscripterrorwhencontinuing = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            OnCanNotJITScriptErrorDebug: OnCanNotJITScriptErrorDebug::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSiteDebugEx as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptSiteInterruptPollImpl: Sized {
    fn QueryContinue(&mut self) -> ::windows::core::Result<()>;
}
impl IActiveScriptSiteInterruptPollVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteInterruptPollImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteInterruptPollVtbl {
        unsafe extern "system" fn QueryContinue<Impl: IActiveScriptSiteInterruptPollImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).QueryContinue().into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), QueryContinue: QueryContinue::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSiteInterruptPoll as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptSiteTraceInfoImpl: Sized {
    fn SendScriptTraceInfo(&mut self, stieventtype: SCRIPTTRACEINFO, guidcontextid: ::windows::core::GUID, dwscriptcontextcookie: u32, lscriptstatementstart: i32, lscriptstatementend: i32, dwreserved: u64) -> ::windows::core::Result<()>;
}
impl IActiveScriptSiteTraceInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteTraceInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteTraceInfoVtbl {
        unsafe extern "system" fn SendScriptTraceInfo<Impl: IActiveScriptSiteTraceInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, stieventtype: SCRIPTTRACEINFO, guidcontextid: ::windows::core::GUID, dwscriptcontextcookie: u32, lscriptstatementstart: i32, lscriptstatementend: i32, dwreserved: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SendScriptTraceInfo(::core::mem::transmute_copy(&stieventtype), ::core::mem::transmute_copy(&guidcontextid), ::core::mem::transmute_copy(&dwscriptcontextcookie), ::core::mem::transmute_copy(&lscriptstatementstart), ::core::mem::transmute_copy(&lscriptstatementend), ::core::mem::transmute_copy(&dwreserved)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), SendScriptTraceInfo: SendScriptTraceInfo::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSiteTraceInfo as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptSiteUIControlImpl: Sized {
    fn GetUIBehavior(&mut self, uicitem: SCRIPTUICITEM) -> ::windows::core::Result<SCRIPTUICHANDLING>;
}
impl IActiveScriptSiteUIControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteUIControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteUIControlVtbl {
        unsafe extern "system" fn GetUIBehavior<Impl: IActiveScriptSiteUIControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uicitem: SCRIPTUICITEM, puichandling: *mut SCRIPTUICHANDLING) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetUIBehavior(::core::mem::transmute_copy(&uicitem)) {
                ::core::result::Result::Ok(ok__) => {
                    *puichandling = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), GetUIBehavior: GetUIBehavior::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSiteUIControl as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptSiteWindowImpl: Sized {
    fn GetWindow(&mut self) -> ::windows::core::Result<super::super::super::Foundation::HWND>;
    fn EnableModeless(&mut self, fenable: super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptSiteWindowVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteWindowImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteWindowVtbl {
        unsafe extern "system" fn GetWindow<Impl: IActiveScriptSiteWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetWindow() {
                ::core::result::Result::Ok(ok__) => {
                    *phwnd = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnableModeless<Impl: IActiveScriptSiteWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fenable: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EnableModeless(::core::mem::transmute_copy(&fenable)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetWindow: GetWindow::<Impl, IMPL_OFFSET>,
            EnableModeless: EnableModeless::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSiteWindow as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptStatsImpl: Sized {
    fn GetStat(&mut self, stid: u32, pluhi: *mut u32, plulo: *mut u32) -> ::windows::core::Result<()>;
    fn GetStatEx(&mut self, guid: *const ::windows::core::GUID, pluhi: *mut u32, plulo: *mut u32) -> ::windows::core::Result<()>;
    fn ResetStats(&mut self) -> ::windows::core::Result<()>;
}
impl IActiveScriptStatsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptStatsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptStatsVtbl {
        unsafe extern "system" fn GetStat<Impl: IActiveScriptStatsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, stid: u32, pluhi: *mut u32, plulo: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStat(::core::mem::transmute_copy(&stid), ::core::mem::transmute_copy(&pluhi), ::core::mem::transmute_copy(&plulo)).into()
        }
        unsafe extern "system" fn GetStatEx<Impl: IActiveScriptStatsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: *const ::windows::core::GUID, pluhi: *mut u32, plulo: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStatEx(::core::mem::transmute_copy(&guid), ::core::mem::transmute_copy(&pluhi), ::core::mem::transmute_copy(&plulo)).into()
        }
        unsafe extern "system" fn ResetStats<Impl: IActiveScriptStatsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ResetStats().into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetStat: GetStat::<Impl, IMPL_OFFSET>,
            GetStatEx: GetStatEx::<Impl, IMPL_OFFSET>,
            ResetStats: ResetStats::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptStats as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptStringCompareImpl: Sized {
    fn StrComp(&mut self, bszstr1: super::super::super::Foundation::BSTR, bszstr2: super::super::super::Foundation::BSTR) -> ::windows::core::Result<i32>;
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptStringCompareVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptStringCompareImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptStringCompareVtbl {
        unsafe extern "system" fn StrComp<Impl: IActiveScriptStringCompareImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bszstr1: ::core::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, bszstr2: ::core::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, iret: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StrComp(::core::mem::transmute_copy(&bszstr1), ::core::mem::transmute_copy(&bszstr2)) {
                ::core::result::Result::Ok(ok__) => {
                    *iret = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), StrComp: StrComp::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptStringCompare as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptTraceInfoImpl: Sized {
    fn StartScriptTracing(&mut self, psitetraceinfo: ::core::option::Option<IActiveScriptSiteTraceInfo>, guidcontextid: ::windows::core::GUID) -> ::windows::core::Result<()>;
    fn StopScriptTracing(&mut self) -> ::windows::core::Result<()>;
}
impl IActiveScriptTraceInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptTraceInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptTraceInfoVtbl {
        unsafe extern "system" fn StartScriptTracing<Impl: IActiveScriptTraceInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psitetraceinfo: ::windows::core::RawPtr, guidcontextid: ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartScriptTracing(::core::mem::transmute(&psitetraceinfo), ::core::mem::transmute_copy(&guidcontextid)).into()
        }
        unsafe extern "system" fn StopScriptTracing<Impl: IActiveScriptTraceInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StopScriptTracing().into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            StartScriptTracing: StartScriptTracing::<Impl, IMPL_OFFSET>,
            StopScriptTracing: StopScriptTracing::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptTraceInfo as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptWinRTErrorDebugImpl: Sized + IActiveScriptErrorImpl {
    fn GetRestrictedErrorString(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetRestrictedErrorReference(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetCapabilitySid(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptWinRTErrorDebugVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptWinRTErrorDebugImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptWinRTErrorDebugVtbl {
        unsafe extern "system" fn GetRestrictedErrorString<Impl: IActiveScriptWinRTErrorDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, errorstring: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRestrictedErrorString() {
                ::core::result::Result::Ok(ok__) => {
                    *errorstring = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRestrictedErrorReference<Impl: IActiveScriptWinRTErrorDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, referencestring: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRestrictedErrorReference() {
                ::core::result::Result::Ok(ok__) => {
                    *referencestring = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCapabilitySid<Impl: IActiveScriptWinRTErrorDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, capabilitysid: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCapabilitySid() {
                ::core::result::Result::Ok(ok__) => {
                    *capabilitysid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IActiveScriptErrorVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            GetRestrictedErrorString: GetRestrictedErrorString::<Impl, IMPL_OFFSET>,
            GetRestrictedErrorReference: GetRestrictedErrorReference::<Impl, IMPL_OFFSET>,
            GetCapabilitySid: GetCapabilitySid::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptWinRTErrorDebug as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IApplicationDebuggerImpl: Sized {
    fn QueryAlive(&mut self) -> ::windows::core::Result<()>;
    fn CreateInstanceAtDebugger(&mut self, rclsid: *const ::windows::core::GUID, punkouter: ::core::option::Option<::windows::core::IUnknown>, dwclscontext: u32, riid: *const ::windows::core::GUID) -> ::windows::core::Result<::windows::core::IUnknown>;
    fn onDebugOutput(&mut self, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn onHandleBreakPoint(&mut self, prpt: ::core::option::Option<IRemoteDebugApplicationThread>, br: BREAKREASON, perror: ::core::option::Option<IActiveScriptErrorDebug>) -> ::windows::core::Result<()>;
    fn onClose(&mut self) -> ::windows::core::Result<()>;
    fn onDebuggerEvent(&mut self, riid: *const ::windows::core::GUID, punk: ::core::option::Option<::windows::core::IUnknown>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IApplicationDebuggerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IApplicationDebuggerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IApplicationDebuggerVtbl {
        unsafe extern "system" fn QueryAlive<Impl: IApplicationDebuggerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).QueryAlive().into()
        }
        unsafe extern "system" fn CreateInstanceAtDebugger<Impl: IApplicationDebuggerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rclsid: *const ::windows::core::GUID, punkouter: *mut ::core::ffi::c_void, dwclscontext: u32, riid: *const ::windows::core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateInstanceAtDebugger(::core::mem::transmute_copy(&rclsid), ::core::mem::transmute(&punkouter), ::core::mem::transmute_copy(&dwclscontext), ::core::mem::transmute_copy(&riid)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppvobject = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn onDebugOutput<Impl: IApplicationDebuggerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onDebugOutput(::core::mem::transmute_copy(&pstr)).into()
        }
        unsafe extern "system" fn onHandleBreakPoint<Impl: IApplicationDebuggerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prpt: ::windows::core::RawPtr, br: BREAKREASON, perror: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onHandleBreakPoint(::core::mem::transmute(&prpt), ::core::mem::transmute_copy(&br), ::core::mem::transmute(&perror)).into()
        }
        unsafe extern "system" fn onClose<Impl: IApplicationDebuggerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onClose().into()
        }
        unsafe extern "system" fn onDebuggerEvent<Impl: IApplicationDebuggerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onDebuggerEvent(::core::mem::transmute_copy(&riid), ::core::mem::transmute(&punk)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            QueryAlive: QueryAlive::<Impl, IMPL_OFFSET>,
            CreateInstanceAtDebugger: CreateInstanceAtDebugger::<Impl, IMPL_OFFSET>,
            onDebugOutput: onDebugOutput::<Impl, IMPL_OFFSET>,
            onHandleBreakPoint: onHandleBreakPoint::<Impl, IMPL_OFFSET>,
            onClose: onClose::<Impl, IMPL_OFFSET>,
            onDebuggerEvent: onDebuggerEvent::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IApplicationDebugger as ::windows::core::Interface>::IID
    }
}
pub trait IApplicationDebuggerUIImpl: Sized {
    fn BringDocumentToTop(&mut self, pddt: ::core::option::Option<IDebugDocumentText>) -> ::windows::core::Result<()>;
    fn BringDocumentContextToTop(&mut self, pddc: ::core::option::Option<IDebugDocumentContext>) -> ::windows::core::Result<()>;
}
impl IApplicationDebuggerUIVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IApplicationDebuggerUIImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IApplicationDebuggerUIVtbl {
        unsafe extern "system" fn BringDocumentToTop<Impl: IApplicationDebuggerUIImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddt: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).BringDocumentToTop(::core::mem::transmute(&pddt)).into()
        }
        unsafe extern "system" fn BringDocumentContextToTop<Impl: IApplicationDebuggerUIImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).BringDocumentContextToTop(::core::mem::transmute(&pddc)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            BringDocumentToTop: BringDocumentToTop::<Impl, IMPL_OFFSET>,
            BringDocumentContextToTop: BringDocumentContextToTop::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IApplicationDebuggerUI as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IBindEventHandlerImpl: Sized {
    fn BindHandler(&mut self, pstrevent: super::super::super::Foundation::PWSTR, pdisp: ::core::option::Option<super::super::Com::IDispatch>) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IBindEventHandlerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBindEventHandlerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBindEventHandlerVtbl {
        unsafe extern "system" fn BindHandler<Impl: IBindEventHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrevent: super::super::super::Foundation::PWSTR, pdisp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).BindHandler(::core::mem::transmute_copy(&pstrevent), ::core::mem::transmute(&pdisp)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), BindHandler: BindHandler::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBindEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICodeAddressConceptImpl: Sized {
    fn GetContainingSymbol(&mut self, pcontextobject: ::core::option::Option<IModelObject>) -> ::windows::core::Result<IDebugHostSymbol>;
}
impl ICodeAddressConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICodeAddressConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ICodeAddressConceptVtbl {
        unsafe extern "system" fn GetContainingSymbol<Impl: ICodeAddressConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcontextobject: ::windows::core::RawPtr, ppsymbol: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetContainingSymbol(::core::mem::transmute(&pcontextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppsymbol = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), GetContainingSymbol: GetContainingSymbol::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICodeAddressConcept as ::windows::core::Interface>::IID
    }
}
pub trait IComparableConceptImpl: Sized {
    fn CompareObjects(&mut self, contextobject: ::core::option::Option<IModelObject>, otherobject: ::core::option::Option<IModelObject>) -> ::windows::core::Result<i32>;
}
impl IComparableConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IComparableConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IComparableConceptVtbl {
        unsafe extern "system" fn CompareObjects<Impl: IComparableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, otherobject: ::windows::core::RawPtr, comparisonresult: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CompareObjects(::core::mem::transmute(&contextobject), ::core::mem::transmute(&otherobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *comparisonresult = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), CompareObjects: CompareObjects::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IComparableConcept as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelConceptImpl: Sized {
    fn InitializeObject(&mut self, modelobject: ::core::option::Option<IModelObject>, matchingtypesignature: ::core::option::Option<IDebugHostTypeSignature>, wildcardmatches: ::core::option::Option<IDebugHostSymbolEnumerator>) -> ::windows::core::Result<()>;
    fn GetName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelConceptVtbl {
        unsafe extern "system" fn InitializeObject<Impl: IDataModelConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modelobject: ::windows::core::RawPtr, matchingtypesignature: ::windows::core::RawPtr, wildcardmatches: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).InitializeObject(::core::mem::transmute(&modelobject), ::core::mem::transmute(&matchingtypesignature), ::core::mem::transmute(&wildcardmatches)).into()
        }
        unsafe extern "system" fn GetName<Impl: IDataModelConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modelname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName() {
                ::core::result::Result::Ok(ok__) => {
                    *modelname = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            InitializeObject: InitializeObject::<Impl, IMPL_OFFSET>,
            GetName: GetName::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelConcept as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDataModelManagerImpl: Sized {
    fn Close(&mut self) -> ::windows::core::Result<()>;
    fn CreateNoValue(&mut self) -> ::windows::core::Result<IModelObject>;
    fn CreateErrorObject(&mut self, hrerror: ::windows::core::HRESULT, pwszmessage: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<IModelObject>;
    fn CreateTypedObject(&mut self, context: ::core::option::Option<IDebugHostContext>, objectlocation: Location, objecttype: ::core::option::Option<IDebugHostType>) -> ::windows::core::Result<IModelObject>;
    fn CreateTypedObjectReference(&mut self, context: ::core::option::Option<IDebugHostContext>, objectlocation: Location, objecttype: ::core::option::Option<IDebugHostType>) -> ::windows::core::Result<IModelObject>;
    fn CreateSyntheticObject(&mut self, context: ::core::option::Option<IDebugHostContext>) -> ::windows::core::Result<IModelObject>;
    fn CreateDataModelObject(&mut self, datamodel: ::core::option::Option<IDataModelConcept>) -> ::windows::core::Result<IModelObject>;
    fn CreateIntrinsicObject(&mut self, objectkind: ModelObjectKind, intrinsicdata: *const super::super::Com::VARIANT) -> ::windows::core::Result<IModelObject>;
    fn CreateTypedIntrinsicObject(&mut self, intrinsicdata: *const super::super::Com::VARIANT, r#type: ::core::option::Option<IDebugHostType>) -> ::windows::core::Result<IModelObject>;
    fn GetModelForTypeSignature(&mut self, typesignature: ::core::option::Option<IDebugHostTypeSignature>) -> ::windows::core::Result<IModelObject>;
    fn GetModelForType(&mut self, r#type: ::core::option::Option<IDebugHostType>, datamodel: *mut ::core::option::Option<IModelObject>, typesignature: *mut ::core::option::Option<IDebugHostTypeSignature>, wildcardmatches: *mut ::core::option::Option<IDebugHostSymbolEnumerator>) -> ::windows::core::Result<()>;
    fn RegisterModelForTypeSignature(&mut self, typesignature: ::core::option::Option<IDebugHostTypeSignature>, datamodel: ::core::option::Option<IModelObject>) -> ::windows::core::Result<()>;
    fn UnregisterModelForTypeSignature(&mut self, datamodel: ::core::option::Option<IModelObject>, typesignature: ::core::option::Option<IDebugHostTypeSignature>) -> ::windows::core::Result<()>;
    fn RegisterExtensionForTypeSignature(&mut self, typesignature: ::core::option::Option<IDebugHostTypeSignature>, datamodel: ::core::option::Option<IModelObject>) -> ::windows::core::Result<()>;
    fn UnregisterExtensionForTypeSignature(&mut self, datamodel: ::core::option::Option<IModelObject>, typesignature: ::core::option::Option<IDebugHostTypeSignature>) -> ::windows::core::Result<()>;
    fn CreateMetadataStore(&mut self, parentstore: ::core::option::Option<IKeyStore>) -> ::windows::core::Result<IKeyStore>;
    fn GetRootNamespace(&mut self) -> ::windows::core::Result<IModelObject>;
    fn RegisterNamedModel(&mut self, modelname: super::super::super::Foundation::PWSTR, modeobject: ::core::option::Option<IModelObject>) -> ::windows::core::Result<()>;
    fn UnregisterNamedModel(&mut self, modelname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AcquireNamedModel(&mut self, modelname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<IModelObject>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDataModelManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelManagerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelManagerVtbl {
        unsafe extern "system" fn Close<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Close().into()
        }
        unsafe extern "system" fn CreateNoValue<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateNoValue() {
                ::core::result::Result::Ok(ok__) => {
                    *object = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateErrorObject<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hrerror: ::windows::core::HRESULT, pwszmessage: super::super::super::Foundation::PWSTR, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateErrorObject(::core::mem::transmute_copy(&hrerror), ::core::mem::transmute_copy(&pwszmessage)) {
                ::core::result::Result::Ok(ok__) => {
                    *object = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateTypedObject<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, objectlocation: Location, objecttype: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateTypedObject(::core::mem::transmute(&context), ::core::mem::transmute_copy(&objectlocation), ::core::mem::transmute(&objecttype)) {
                ::core::result::Result::Ok(ok__) => {
                    *object = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateTypedObjectReference<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, objectlocation: Location, objecttype: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateTypedObjectReference(::core::mem::transmute(&context), ::core::mem::transmute_copy(&objectlocation), ::core::mem::transmute(&objecttype)) {
                ::core::result::Result::Ok(ok__) => {
                    *object = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSyntheticObject<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateSyntheticObject(::core::mem::transmute(&context)) {
                ::core::result::Result::Ok(ok__) => {
                    *object = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateDataModelObject<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, datamodel: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateDataModelObject(::core::mem::transmute(&datamodel)) {
                ::core::result::Result::Ok(ok__) => {
                    *object = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateIntrinsicObject<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, objectkind: ModelObjectKind, intrinsicdata: *const super::super::Com::VARIANT, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateIntrinsicObject(::core::mem::transmute_copy(&objectkind), ::core::mem::transmute_copy(&intrinsicdata)) {
                ::core::result::Result::Ok(ok__) => {
                    *object = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateTypedIntrinsicObject<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, intrinsicdata: *const super::super::Com::VARIANT, r#type: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateTypedIntrinsicObject(::core::mem::transmute_copy(&intrinsicdata), ::core::mem::transmute(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *object = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModelForTypeSignature<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, typesignature: ::windows::core::RawPtr, datamodel: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetModelForTypeSignature(::core::mem::transmute(&typesignature)) {
                ::core::result::Result::Ok(ok__) => {
                    *datamodel = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModelForType<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: ::windows::core::RawPtr, datamodel: *mut ::windows::core::RawPtr, typesignature: *mut ::windows::core::RawPtr, wildcardmatches: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModelForType(::core::mem::transmute(&r#type), ::core::mem::transmute_copy(&datamodel), ::core::mem::transmute_copy(&typesignature), ::core::mem::transmute_copy(&wildcardmatches)).into()
        }
        unsafe extern "system" fn RegisterModelForTypeSignature<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, typesignature: ::windows::core::RawPtr, datamodel: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RegisterModelForTypeSignature(::core::mem::transmute(&typesignature), ::core::mem::transmute(&datamodel)).into()
        }
        unsafe extern "system" fn UnregisterModelForTypeSignature<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, datamodel: ::windows::core::RawPtr, typesignature: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).UnregisterModelForTypeSignature(::core::mem::transmute(&datamodel), ::core::mem::transmute(&typesignature)).into()
        }
        unsafe extern "system" fn RegisterExtensionForTypeSignature<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, typesignature: ::windows::core::RawPtr, datamodel: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RegisterExtensionForTypeSignature(::core::mem::transmute(&typesignature), ::core::mem::transmute(&datamodel)).into()
        }
        unsafe extern "system" fn UnregisterExtensionForTypeSignature<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, datamodel: ::windows::core::RawPtr, typesignature: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).UnregisterExtensionForTypeSignature(::core::mem::transmute(&datamodel), ::core::mem::transmute(&typesignature)).into()
        }
        unsafe extern "system" fn CreateMetadataStore<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, parentstore: ::windows::core::RawPtr, metadatastore: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateMetadataStore(::core::mem::transmute(&parentstore)) {
                ::core::result::Result::Ok(ok__) => {
                    *metadatastore = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRootNamespace<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rootnamespace: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRootNamespace() {
                ::core::result::Result::Ok(ok__) => {
                    *rootnamespace = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterNamedModel<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modelname: super::super::super::Foundation::PWSTR, modeobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RegisterNamedModel(::core::mem::transmute_copy(&modelname), ::core::mem::transmute(&modeobject)).into()
        }
        unsafe extern "system" fn UnregisterNamedModel<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modelname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).UnregisterNamedModel(::core::mem::transmute_copy(&modelname)).into()
        }
        unsafe extern "system" fn AcquireNamedModel<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modelname: super::super::super::Foundation::PWSTR, modelobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AcquireNamedModel(::core::mem::transmute_copy(&modelname)) {
                ::core::result::Result::Ok(ok__) => {
                    *modelobject = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Close: Close::<Impl, IMPL_OFFSET>,
            CreateNoValue: CreateNoValue::<Impl, IMPL_OFFSET>,
            CreateErrorObject: CreateErrorObject::<Impl, IMPL_OFFSET>,
            CreateTypedObject: CreateTypedObject::<Impl, IMPL_OFFSET>,
            CreateTypedObjectReference: CreateTypedObjectReference::<Impl, IMPL_OFFSET>,
            CreateSyntheticObject: CreateSyntheticObject::<Impl, IMPL_OFFSET>,
            CreateDataModelObject: CreateDataModelObject::<Impl, IMPL_OFFSET>,
            CreateIntrinsicObject: CreateIntrinsicObject::<Impl, IMPL_OFFSET>,
            CreateTypedIntrinsicObject: CreateTypedIntrinsicObject::<Impl, IMPL_OFFSET>,
            GetModelForTypeSignature: GetModelForTypeSignature::<Impl, IMPL_OFFSET>,
            GetModelForType: GetModelForType::<Impl, IMPL_OFFSET>,
            RegisterModelForTypeSignature: RegisterModelForTypeSignature::<Impl, IMPL_OFFSET>,
            UnregisterModelForTypeSignature: UnregisterModelForTypeSignature::<Impl, IMPL_OFFSET>,
            RegisterExtensionForTypeSignature: RegisterExtensionForTypeSignature::<Impl, IMPL_OFFSET>,
            UnregisterExtensionForTypeSignature: UnregisterExtensionForTypeSignature::<Impl, IMPL_OFFSET>,
            CreateMetadataStore: CreateMetadataStore::<Impl, IMPL_OFFSET>,
            GetRootNamespace: GetRootNamespace::<Impl, IMPL_OFFSET>,
            RegisterNamedModel: RegisterNamedModel::<Impl, IMPL_OFFSET>,
            UnregisterNamedModel: UnregisterNamedModel::<Impl, IMPL_OFFSET>,
            AcquireNamedModel: AcquireNamedModel::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelManager as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDataModelManager2Impl: Sized + IDataModelManagerImpl {
    fn AcquireSubNamespace(&mut self, modelname: super::super::super::Foundation::PWSTR, subnamespacemodelname: super::super::super::Foundation::PWSTR, accessname: super::super::super::Foundation::PWSTR, metadata: ::core::option::Option<IKeyStore>) -> ::windows::core::Result<IModelObject>;
    fn CreateTypedIntrinsicObjectEx(&mut self, context: ::core::option::Option<IDebugHostContext>, intrinsicdata: *const super::super::Com::VARIANT, r#type: ::core::option::Option<IDebugHostType>) -> ::windows::core::Result<IModelObject>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDataModelManager2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelManager2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelManager2Vtbl {
        unsafe extern "system" fn AcquireSubNamespace<Impl: IDataModelManager2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modelname: super::super::super::Foundation::PWSTR, subnamespacemodelname: super::super::super::Foundation::PWSTR, accessname: super::super::super::Foundation::PWSTR, metadata: ::windows::core::RawPtr, namespacemodelobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AcquireSubNamespace(::core::mem::transmute_copy(&modelname), ::core::mem::transmute_copy(&subnamespacemodelname), ::core::mem::transmute_copy(&accessname), ::core::mem::transmute(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *namespacemodelobject = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateTypedIntrinsicObjectEx<Impl: IDataModelManager2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, intrinsicdata: *const super::super::Com::VARIANT, r#type: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateTypedIntrinsicObjectEx(::core::mem::transmute(&context), ::core::mem::transmute_copy(&intrinsicdata), ::core::mem::transmute(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *object = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IDataModelManagerVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            AcquireSubNamespace: AcquireSubNamespace::<Impl, IMPL_OFFSET>,
            CreateTypedIntrinsicObjectEx: CreateTypedIntrinsicObjectEx::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelManager2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelNameBinderImpl: Sized {
    fn BindValue(&mut self, contextobject: ::core::option::Option<IModelObject>, name: super::super::super::Foundation::PWSTR, value: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn BindReference(&mut self, contextobject: ::core::option::Option<IModelObject>, name: super::super::super::Foundation::PWSTR, reference: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn EnumerateValues(&mut self, contextobject: ::core::option::Option<IModelObject>) -> ::windows::core::Result<IKeyEnumerator>;
    fn EnumerateReferences(&mut self, contextobject: ::core::option::Option<IModelObject>) -> ::windows::core::Result<IKeyEnumerator>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelNameBinderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelNameBinderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelNameBinderVtbl {
        unsafe extern "system" fn BindValue<Impl: IDataModelNameBinderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, name: super::super::super::Foundation::PWSTR, value: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).BindValue(::core::mem::transmute(&contextobject), ::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&metadata)).into()
        }
        unsafe extern "system" fn BindReference<Impl: IDataModelNameBinderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, name: super::super::super::Foundation::PWSTR, reference: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).BindReference(::core::mem::transmute(&contextobject), ::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&reference), ::core::mem::transmute_copy(&metadata)).into()
        }
        unsafe extern "system" fn EnumerateValues<Impl: IDataModelNameBinderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateValues(::core::mem::transmute(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *enumerator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateReferences<Impl: IDataModelNameBinderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateReferences(::core::mem::transmute(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *enumerator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            BindValue: BindValue::<Impl, IMPL_OFFSET>,
            BindReference: BindReference::<Impl, IMPL_OFFSET>,
            EnumerateValues: EnumerateValues::<Impl, IMPL_OFFSET>,
            EnumerateReferences: EnumerateReferences::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelNameBinder as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IDataModelScriptImpl: Sized {
    fn GetName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn Rename(&mut self, scriptname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn Populate(&mut self, contentstream: ::core::option::Option<super::super::Com::IStream>) -> ::windows::core::Result<()>;
    fn Execute(&mut self, client: ::core::option::Option<IDataModelScriptClient>) -> ::windows::core::Result<()>;
    fn Unlink(&mut self) -> ::windows::core::Result<()>;
    fn IsInvocable(&mut self) -> ::windows::core::Result<bool>;
    fn InvokeMain(&mut self, client: ::core::option::Option<IDataModelScriptClient>) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IDataModelScriptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptVtbl {
        unsafe extern "system" fn GetName<Impl: IDataModelScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scriptname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName() {
                ::core::result::Result::Ok(ok__) => {
                    *scriptname = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Rename<Impl: IDataModelScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scriptname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Rename(::core::mem::transmute_copy(&scriptname)).into()
        }
        unsafe extern "system" fn Populate<Impl: IDataModelScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contentstream: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Populate(::core::mem::transmute(&contentstream)).into()
        }
        unsafe extern "system" fn Execute<Impl: IDataModelScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Execute(::core::mem::transmute(&client)).into()
        }
        unsafe extern "system" fn Unlink<Impl: IDataModelScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Unlink().into()
        }
        unsafe extern "system" fn IsInvocable<Impl: IDataModelScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, isinvocable: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsInvocable() {
                ::core::result::Result::Ok(ok__) => {
                    *isinvocable = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InvokeMain<Impl: IDataModelScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).InvokeMain(::core::mem::transmute(&client)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetName: GetName::<Impl, IMPL_OFFSET>,
            Rename: Rename::<Impl, IMPL_OFFSET>,
            Populate: Populate::<Impl, IMPL_OFFSET>,
            Execute: Execute::<Impl, IMPL_OFFSET>,
            Unlink: Unlink::<Impl, IMPL_OFFSET>,
            IsInvocable: IsInvocable::<Impl, IMPL_OFFSET>,
            InvokeMain: InvokeMain::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScript as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptClientImpl: Sized {
    fn ReportError(&mut self, errclass: ErrorClass, hrfail: ::windows::core::HRESULT, message: super::super::super::Foundation::PWSTR, line: u32, position: u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptClientVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptClientImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptClientVtbl {
        unsafe extern "system" fn ReportError<Impl: IDataModelScriptClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, errclass: ErrorClass, hrfail: ::windows::core::HRESULT, message: super::super::super::Foundation::PWSTR, line: u32, position: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReportError(::core::mem::transmute_copy(&errclass), ::core::mem::transmute_copy(&hrfail), ::core::mem::transmute_copy(&message), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&position)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), ReportError: ReportError::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptClient as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptDebugImpl: Sized {
    fn GetDebugState(&mut self) -> ScriptDebugState;
    fn GetCurrentPosition(&mut self, currentposition: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::core::Result<()>;
    fn GetStack(&mut self) -> ::windows::core::Result<IDataModelScriptDebugStack>;
    fn SetBreakpoint(&mut self, lineposition: u32, columnposition: u32) -> ::windows::core::Result<IDataModelScriptDebugBreakpoint>;
    fn FindBreakpointById(&mut self, breakpointid: u64) -> ::windows::core::Result<IDataModelScriptDebugBreakpoint>;
    fn EnumerateBreakpoints(&mut self) -> ::windows::core::Result<IDataModelScriptDebugBreakpointEnumerator>;
    fn GetEventFilter(&mut self, eventfilter: ScriptDebugEventFilter) -> ::windows::core::Result<bool>;
    fn SetEventFilter(&mut self, eventfilter: ScriptDebugEventFilter, isbreakenabled: u8) -> ::windows::core::Result<()>;
    fn StartDebugging(&mut self, debugclient: ::core::option::Option<IDataModelScriptDebugClient>) -> ::windows::core::Result<()>;
    fn StopDebugging(&mut self, debugclient: ::core::option::Option<IDataModelScriptDebugClient>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptDebugVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebugImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebugVtbl {
        unsafe extern "system" fn GetDebugState<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ScriptDebugState {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDebugState()
        }
        unsafe extern "system" fn GetCurrentPosition<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentposition: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetCurrentPosition(::core::mem::transmute_copy(&currentposition), ::core::mem::transmute_copy(&positionspanend), ::core::mem::transmute_copy(&linetext)).into()
        }
        unsafe extern "system" fn GetStack<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, stack: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetStack() {
                ::core::result::Result::Ok(ok__) => {
                    *stack = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBreakpoint<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lineposition: u32, columnposition: u32, breakpoint: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBreakpoint(::core::mem::transmute_copy(&lineposition), ::core::mem::transmute_copy(&columnposition)) {
                ::core::result::Result::Ok(ok__) => {
                    *breakpoint = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindBreakpointById<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, breakpointid: u64, breakpoint: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindBreakpointById(::core::mem::transmute_copy(&breakpointid)) {
                ::core::result::Result::Ok(ok__) => {
                    *breakpoint = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateBreakpoints<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, breakpointenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateBreakpoints() {
                ::core::result::Result::Ok(ok__) => {
                    *breakpointenum = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilter<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventfilter: ScriptDebugEventFilter, isbreakenabled: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventFilter(::core::mem::transmute_copy(&eventfilter)) {
                ::core::result::Result::Ok(ok__) => {
                    *isbreakenabled = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventFilter<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventfilter: ScriptDebugEventFilter, isbreakenabled: u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventFilter(::core::mem::transmute_copy(&eventfilter), ::core::mem::transmute_copy(&isbreakenabled)).into()
        }
        unsafe extern "system" fn StartDebugging<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, debugclient: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartDebugging(::core::mem::transmute(&debugclient)).into()
        }
        unsafe extern "system" fn StopDebugging<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, debugclient: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StopDebugging(::core::mem::transmute(&debugclient)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetDebugState: GetDebugState::<Impl, IMPL_OFFSET>,
            GetCurrentPosition: GetCurrentPosition::<Impl, IMPL_OFFSET>,
            GetStack: GetStack::<Impl, IMPL_OFFSET>,
            SetBreakpoint: SetBreakpoint::<Impl, IMPL_OFFSET>,
            FindBreakpointById: FindBreakpointById::<Impl, IMPL_OFFSET>,
            EnumerateBreakpoints: EnumerateBreakpoints::<Impl, IMPL_OFFSET>,
            GetEventFilter: GetEventFilter::<Impl, IMPL_OFFSET>,
            SetEventFilter: SetEventFilter::<Impl, IMPL_OFFSET>,
            StartDebugging: StartDebugging::<Impl, IMPL_OFFSET>,
            StopDebugging: StopDebugging::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebug as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptDebug2Impl: Sized + IDataModelScriptDebugImpl {
    fn SetBreakpointAtFunction(&mut self, functionname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<IDataModelScriptDebugBreakpoint>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptDebug2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebug2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebug2Vtbl {
        unsafe extern "system" fn SetBreakpointAtFunction<Impl: IDataModelScriptDebug2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, functionname: super::super::super::Foundation::PWSTR, breakpoint: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBreakpointAtFunction(::core::mem::transmute_copy(&functionname)) {
                ::core::result::Result::Ok(ok__) => {
                    *breakpoint = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IDataModelScriptDebugVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            SetBreakpointAtFunction: SetBreakpointAtFunction::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebug2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptDebugBreakpointImpl: Sized {
    fn GetId(&mut self) -> u64;
    fn IsEnabled(&mut self) -> bool;
    fn Enable(&mut self);
    fn Disable(&mut self);
    fn Remove(&mut self);
    fn GetPosition(&mut self, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptDebugBreakpointVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebugBreakpointImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebugBreakpointVtbl {
        unsafe extern "system" fn GetId<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> u64 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetId()
        }
        unsafe extern "system" fn IsEnabled<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> bool {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsEnabled()
        }
        unsafe extern "system" fn Enable<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Enable()
        }
        unsafe extern "system" fn Disable<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Disable()
        }
        unsafe extern "system" fn Remove<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Remove()
        }
        unsafe extern "system" fn GetPosition<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPosition(::core::mem::transmute_copy(&position), ::core::mem::transmute_copy(&positionspanend), ::core::mem::transmute_copy(&linetext)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetId: GetId::<Impl, IMPL_OFFSET>,
            IsEnabled: IsEnabled::<Impl, IMPL_OFFSET>,
            Enable: Enable::<Impl, IMPL_OFFSET>,
            Disable: Disable::<Impl, IMPL_OFFSET>,
            Remove: Remove::<Impl, IMPL_OFFSET>,
            GetPosition: GetPosition::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebugBreakpoint as ::windows::core::Interface>::IID
    }
}
pub trait IDataModelScriptDebugBreakpointEnumeratorImpl: Sized {
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn GetNext(&mut self) -> ::windows::core::Result<IDataModelScriptDebugBreakpoint>;
}
impl IDataModelScriptDebugBreakpointEnumeratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebugBreakpointEnumeratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebugBreakpointEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IDataModelScriptDebugBreakpointEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn GetNext<Impl: IDataModelScriptDebugBreakpointEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, breakpoint: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNext() {
                ::core::result::Result::Ok(ok__) => {
                    *breakpoint = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), Reset: Reset::<Impl, IMPL_OFFSET>, GetNext: GetNext::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebugBreakpointEnumerator as ::windows::core::Interface>::IID
    }
}
pub trait IDataModelScriptDebugClientImpl: Sized {
    fn NotifyDebugEvent(&mut self, peventinfo: *const ScriptDebugEventInformation, pscript: ::core::option::Option<IDataModelScript>, peventdataobject: ::core::option::Option<IModelObject>, resumeeventkind: *mut ScriptExecutionKind) -> ::windows::core::Result<()>;
}
impl IDataModelScriptDebugClientVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebugClientImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebugClientVtbl {
        unsafe extern "system" fn NotifyDebugEvent<Impl: IDataModelScriptDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, peventinfo: *const ScriptDebugEventInformation, pscript: ::windows::core::RawPtr, peventdataobject: ::windows::core::RawPtr, resumeeventkind: *mut ScriptExecutionKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).NotifyDebugEvent(::core::mem::transmute_copy(&peventinfo), ::core::mem::transmute(&pscript), ::core::mem::transmute(&peventdataobject), ::core::mem::transmute_copy(&resumeeventkind)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), NotifyDebugEvent: NotifyDebugEvent::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebugClient as ::windows::core::Interface>::IID
    }
}
pub trait IDataModelScriptDebugStackImpl: Sized {
    fn GetFrameCount(&mut self) -> u64;
    fn GetStackFrame(&mut self, framenumber: u64) -> ::windows::core::Result<IDataModelScriptDebugStackFrame>;
}
impl IDataModelScriptDebugStackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebugStackImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebugStackVtbl {
        unsafe extern "system" fn GetFrameCount<Impl: IDataModelScriptDebugStackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> u64 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFrameCount()
        }
        unsafe extern "system" fn GetStackFrame<Impl: IDataModelScriptDebugStackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, framenumber: u64, stackframe: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetStackFrame(::core::mem::transmute_copy(&framenumber)) {
                ::core::result::Result::Ok(ok__) => {
                    *stackframe = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetFrameCount: GetFrameCount::<Impl, IMPL_OFFSET>,
            GetStackFrame: GetStackFrame::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebugStack as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptDebugStackFrameImpl: Sized {
    fn GetName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetPosition(&mut self, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::core::Result<()>;
    fn IsTransitionPoint(&mut self) -> ::windows::core::Result<bool>;
    fn GetTransition(&mut self, transitionscript: *mut ::core::option::Option<IDataModelScript>, istransitioncontiguous: *mut bool) -> ::windows::core::Result<()>;
    fn Evaluate(&mut self, pwszexpression: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<IModelObject>;
    fn EnumerateLocals(&mut self) -> ::windows::core::Result<IDataModelScriptDebugVariableSetEnumerator>;
    fn EnumerateArguments(&mut self) -> ::windows::core::Result<IDataModelScriptDebugVariableSetEnumerator>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptDebugStackFrameVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebugStackFrameImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebugStackFrameVtbl {
        unsafe extern "system" fn GetName<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName() {
                ::core::result::Result::Ok(ok__) => {
                    *name = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPosition<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPosition(::core::mem::transmute_copy(&position), ::core::mem::transmute_copy(&positionspanend), ::core::mem::transmute_copy(&linetext)).into()
        }
        unsafe extern "system" fn IsTransitionPoint<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, istransitionpoint: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsTransitionPoint() {
                ::core::result::Result::Ok(ok__) => {
                    *istransitionpoint = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTransition<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, transitionscript: *mut ::windows::core::RawPtr, istransitioncontiguous: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTransition(::core::mem::transmute_copy(&transitionscript), ::core::mem::transmute_copy(&istransitioncontiguous)).into()
        }
        unsafe extern "system" fn Evaluate<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszexpression: super::super::super::Foundation::PWSTR, ppresult: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Evaluate(::core::mem::transmute_copy(&pwszexpression)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppresult = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateLocals<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, variablesenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateLocals() {
                ::core::result::Result::Ok(ok__) => {
                    *variablesenum = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateArguments<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, variablesenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateArguments() {
                ::core::result::Result::Ok(ok__) => {
                    *variablesenum = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetName: GetName::<Impl, IMPL_OFFSET>,
            GetPosition: GetPosition::<Impl, IMPL_OFFSET>,
            IsTransitionPoint: IsTransitionPoint::<Impl, IMPL_OFFSET>,
            GetTransition: GetTransition::<Impl, IMPL_OFFSET>,
            Evaluate: Evaluate::<Impl, IMPL_OFFSET>,
            EnumerateLocals: EnumerateLocals::<Impl, IMPL_OFFSET>,
            EnumerateArguments: EnumerateArguments::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebugStackFrame as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptDebugVariableSetEnumeratorImpl: Sized {
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn GetNext(&mut self, variablename: *mut super::super::super::Foundation::BSTR, variablevalue: *mut ::core::option::Option<IModelObject>, variablemetadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptDebugVariableSetEnumeratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebugVariableSetEnumeratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebugVariableSetEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IDataModelScriptDebugVariableSetEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn GetNext<Impl: IDataModelScriptDebugVariableSetEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, variablename: *mut super::super::super::Foundation::BSTR, variablevalue: *mut ::windows::core::RawPtr, variablemetadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNext(::core::mem::transmute_copy(&variablename), ::core::mem::transmute_copy(&variablevalue), ::core::mem::transmute_copy(&variablemetadata)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), Reset: Reset::<Impl, IMPL_OFFSET>, GetNext: GetNext::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebugVariableSetEnumerator as ::windows::core::Interface>::IID
    }
}
pub trait IDataModelScriptHostContextImpl: Sized {
    fn NotifyScriptChange(&mut self, script: ::core::option::Option<IDataModelScript>, changekind: ScriptChangeKind) -> ::windows::core::Result<()>;
    fn GetNamespaceObject(&mut self) -> ::windows::core::Result<IModelObject>;
}
impl IDataModelScriptHostContextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptHostContextImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptHostContextVtbl {
        unsafe extern "system" fn NotifyScriptChange<Impl: IDataModelScriptHostContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, script: ::windows::core::RawPtr, changekind: ScriptChangeKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).NotifyScriptChange(::core::mem::transmute(&script), ::core::mem::transmute_copy(&changekind)).into()
        }
        unsafe extern "system" fn GetNamespaceObject<Impl: IDataModelScriptHostContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, namespaceobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNamespaceObject() {
                ::core::result::Result::Ok(ok__) => {
                    *namespaceobject = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            NotifyScriptChange: NotifyScriptChange::<Impl, IMPL_OFFSET>,
            GetNamespaceObject: GetNamespaceObject::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptHostContext as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptManagerImpl: Sized {
    fn GetDefaultNameBinder(&mut self) -> ::windows::core::Result<IDataModelNameBinder>;
    fn RegisterScriptProvider(&mut self, provider: ::core::option::Option<IDataModelScriptProvider>) -> ::windows::core::Result<()>;
    fn UnregisterScriptProvider(&mut self, provider: ::core::option::Option<IDataModelScriptProvider>) -> ::windows::core::Result<()>;
    fn FindProviderForScriptType(&mut self, scripttype: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<IDataModelScriptProvider>;
    fn FindProviderForScriptExtension(&mut self, scriptextension: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<IDataModelScriptProvider>;
    fn EnumerateScriptProviders(&mut self) -> ::windows::core::Result<IDataModelScriptProviderEnumerator>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptManagerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptManagerVtbl {
        unsafe extern "system" fn GetDefaultNameBinder<Impl: IDataModelScriptManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppnamebinder: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDefaultNameBinder() {
                ::core::result::Result::Ok(ok__) => {
                    *ppnamebinder = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterScriptProvider<Impl: IDataModelScriptManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, provider: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RegisterScriptProvider(::core::mem::transmute(&provider)).into()
        }
        unsafe extern "system" fn UnregisterScriptProvider<Impl: IDataModelScriptManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, provider: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).UnregisterScriptProvider(::core::mem::transmute(&provider)).into()
        }
        unsafe extern "system" fn FindProviderForScriptType<Impl: IDataModelScriptManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scripttype: super::super::super::Foundation::PWSTR, provider: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindProviderForScriptType(::core::mem::transmute_copy(&scripttype)) {
                ::core::result::Result::Ok(ok__) => {
                    *provider = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindProviderForScriptExtension<Impl: IDataModelScriptManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scriptextension: super::super::super::Foundation::PWSTR, provider: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindProviderForScriptExtension(::core::mem::transmute_copy(&scriptextension)) {
                ::core::result::Result::Ok(ok__) => {
                    *provider = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateScriptProviders<Impl: IDataModelScriptManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateScriptProviders() {
                ::core::result::Result::Ok(ok__) => {
                    *enumerator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetDefaultNameBinder: GetDefaultNameBinder::<Impl, IMPL_OFFSET>,
            RegisterScriptProvider: RegisterScriptProvider::<Impl, IMPL_OFFSET>,
            UnregisterScriptProvider: UnregisterScriptProvider::<Impl, IMPL_OFFSET>,
            FindProviderForScriptType: FindProviderForScriptType::<Impl, IMPL_OFFSET>,
            FindProviderForScriptExtension: FindProviderForScriptExtension::<Impl, IMPL_OFFSET>,
            EnumerateScriptProviders: EnumerateScriptProviders::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptManager as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptProviderImpl: Sized {
    fn GetName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetExtension(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn CreateScript(&mut self) -> ::windows::core::Result<IDataModelScript>;
    fn GetDefaultTemplateContent(&mut self) -> ::windows::core::Result<IDataModelScriptTemplate>;
    fn EnumerateTemplates(&mut self) -> ::windows::core::Result<IDataModelScriptTemplateEnumerator>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptProviderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptProviderVtbl {
        unsafe extern "system" fn GetName<Impl: IDataModelScriptProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName() {
                ::core::result::Result::Ok(ok__) => {
                    *name = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtension<Impl: IDataModelScriptProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, extension: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExtension() {
                ::core::result::Result::Ok(ok__) => {
                    *extension = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateScript<Impl: IDataModelScriptProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, script: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateScript() {
                ::core::result::Result::Ok(ok__) => {
                    *script = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDefaultTemplateContent<Impl: IDataModelScriptProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, templatecontent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDefaultTemplateContent() {
                ::core::result::Result::Ok(ok__) => {
                    *templatecontent = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateTemplates<Impl: IDataModelScriptProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateTemplates() {
                ::core::result::Result::Ok(ok__) => {
                    *enumerator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetName: GetName::<Impl, IMPL_OFFSET>,
            GetExtension: GetExtension::<Impl, IMPL_OFFSET>,
            CreateScript: CreateScript::<Impl, IMPL_OFFSET>,
            GetDefaultTemplateContent: GetDefaultTemplateContent::<Impl, IMPL_OFFSET>,
            EnumerateTemplates: EnumerateTemplates::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptProvider as ::windows::core::Interface>::IID
    }
}
pub trait IDataModelScriptProviderEnumeratorImpl: Sized {
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn GetNext(&mut self) -> ::windows::core::Result<IDataModelScriptProvider>;
}
impl IDataModelScriptProviderEnumeratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptProviderEnumeratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptProviderEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IDataModelScriptProviderEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn GetNext<Impl: IDataModelScriptProviderEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, provider: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNext() {
                ::core::result::Result::Ok(ok__) => {
                    *provider = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), Reset: Reset::<Impl, IMPL_OFFSET>, GetNext: GetNext::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptProviderEnumerator as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IDataModelScriptTemplateImpl: Sized {
    fn GetName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetDescription(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetContent(&mut self) -> ::windows::core::Result<super::super::Com::IStream>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IDataModelScriptTemplateVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptTemplateImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptTemplateVtbl {
        unsafe extern "system" fn GetName<Impl: IDataModelScriptTemplateImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, templatename: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName() {
                ::core::result::Result::Ok(ok__) => {
                    *templatename = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDescription<Impl: IDataModelScriptTemplateImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, templatedescription: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDescription() {
                ::core::result::Result::Ok(ok__) => {
                    *templatedescription = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContent<Impl: IDataModelScriptTemplateImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contentstream: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetContent() {
                ::core::result::Result::Ok(ok__) => {
                    *contentstream = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetName: GetName::<Impl, IMPL_OFFSET>,
            GetDescription: GetDescription::<Impl, IMPL_OFFSET>,
            GetContent: GetContent::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptTemplate as ::windows::core::Interface>::IID
    }
}
pub trait IDataModelScriptTemplateEnumeratorImpl: Sized {
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn GetNext(&mut self) -> ::windows::core::Result<IDataModelScriptTemplate>;
}
impl IDataModelScriptTemplateEnumeratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptTemplateEnumeratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptTemplateEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IDataModelScriptTemplateEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn GetNext<Impl: IDataModelScriptTemplateEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, templatecontent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNext() {
                ::core::result::Result::Ok(ok__) => {
                    *templatecontent = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), Reset: Reset::<Impl, IMPL_OFFSET>, GetNext: GetNext::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptTemplateEnumerator as ::windows::core::Interface>::IID
    }
}
pub trait IDebugAdvancedImpl: Sized {
    fn GetThreadContext(&mut self, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn SetThreadContext(&mut self, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
}
impl IDebugAdvancedVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugAdvancedImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugAdvancedVtbl {
        unsafe extern "system" fn GetThreadContext<Impl: IDebugAdvancedImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetThreadContext(::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn SetThreadContext<Impl: IDebugAdvancedImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetThreadContext(::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetThreadContext: GetThreadContext::<Impl, IMPL_OFFSET>,
            SetThreadContext: SetThreadContext::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugAdvanced as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugAdvanced2Impl: Sized {
    fn GetThreadContext(&mut self, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn SetThreadContext(&mut self, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn Request(&mut self, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceFileInformation(&mut self, which: u32, sourcefile: super::super::super::Foundation::PSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::Result<()>;
    fn FindSourceFileAndToken(&mut self, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolInformation(&mut self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSystemObjectInformation(&mut self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugAdvanced2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugAdvanced2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugAdvanced2Vtbl {
        unsafe extern "system" fn GetThreadContext<Impl: IDebugAdvanced2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetThreadContext(::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn SetThreadContext<Impl: IDebugAdvanced2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetThreadContext(::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn Request<Impl: IDebugAdvanced2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Request(::core::mem::transmute_copy(&request), ::core::mem::transmute_copy(&inbuffer), ::core::mem::transmute_copy(&inbuffersize), ::core::mem::transmute_copy(&outbuffer), ::core::mem::transmute_copy(&outbuffersize), ::core::mem::transmute_copy(&outsize)).into()
        }
        unsafe extern "system" fn GetSourceFileInformation<Impl: IDebugAdvanced2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: super::super::super::Foundation::PSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceFileInformation(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&sourcefile), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into()
        }
        unsafe extern "system" fn FindSourceFileAndToken<Impl: IDebugAdvanced2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FindSourceFileAndToken(::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&modaddr), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&filetoken), ::core::mem::transmute_copy(&filetokensize), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into()
        }
        unsafe extern "system" fn GetSymbolInformation<Impl: IDebugAdvanced2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolInformation(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), ::core::mem::transmute_copy(&stringbuffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSystemObjectInformation<Impl: IDebugAdvanced2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemObjectInformation(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetThreadContext: GetThreadContext::<Impl, IMPL_OFFSET>,
            SetThreadContext: SetThreadContext::<Impl, IMPL_OFFSET>,
            Request: Request::<Impl, IMPL_OFFSET>,
            GetSourceFileInformation: GetSourceFileInformation::<Impl, IMPL_OFFSET>,
            FindSourceFileAndToken: FindSourceFileAndToken::<Impl, IMPL_OFFSET>,
            GetSymbolInformation: GetSymbolInformation::<Impl, IMPL_OFFSET>,
            GetSystemObjectInformation: GetSystemObjectInformation::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugAdvanced2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugAdvanced3Impl: Sized {
    fn GetThreadContext(&mut self, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn SetThreadContext(&mut self, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn Request(&mut self, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceFileInformation(&mut self, which: u32, sourcefile: super::super::super::Foundation::PSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::Result<()>;
    fn FindSourceFileAndToken(&mut self, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolInformation(&mut self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSystemObjectInformation(&mut self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceFileInformationWide(&mut self, which: u32, sourcefile: super::super::super::Foundation::PWSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::Result<()>;
    fn FindSourceFileAndTokenWide(&mut self, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PWSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolInformationWide(&mut self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugAdvanced3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugAdvanced3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugAdvanced3Vtbl {
        unsafe extern "system" fn GetThreadContext<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetThreadContext(::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn SetThreadContext<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetThreadContext(::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn Request<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Request(::core::mem::transmute_copy(&request), ::core::mem::transmute_copy(&inbuffer), ::core::mem::transmute_copy(&inbuffersize), ::core::mem::transmute_copy(&outbuffer), ::core::mem::transmute_copy(&outbuffersize), ::core::mem::transmute_copy(&outsize)).into()
        }
        unsafe extern "system" fn GetSourceFileInformation<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: super::super::super::Foundation::PSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceFileInformation(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&sourcefile), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into()
        }
        unsafe extern "system" fn FindSourceFileAndToken<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FindSourceFileAndToken(::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&modaddr), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&filetoken), ::core::mem::transmute_copy(&filetokensize), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into()
        }
        unsafe extern "system" fn GetSymbolInformation<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolInformation(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), ::core::mem::transmute_copy(&stringbuffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSystemObjectInformation<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemObjectInformation(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into()
        }
        unsafe extern "system" fn GetSourceFileInformationWide<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: super::super::super::Foundation::PWSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceFileInformationWide(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&sourcefile), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into()
        }
        unsafe extern "system" fn FindSourceFileAndTokenWide<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PWSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FindSourceFileAndTokenWide(::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&modaddr), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&filetoken), ::core::mem::transmute_copy(&filetokensize), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into()
        }
        unsafe extern "system" fn GetSymbolInformationWide<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolInformationWide(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), ::core::mem::transmute_copy(&stringbuffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetThreadContext: GetThreadContext::<Impl, IMPL_OFFSET>,
            SetThreadContext: SetThreadContext::<Impl, IMPL_OFFSET>,
            Request: Request::<Impl, IMPL_OFFSET>,
            GetSourceFileInformation: GetSourceFileInformation::<Impl, IMPL_OFFSET>,
            FindSourceFileAndToken: FindSourceFileAndToken::<Impl, IMPL_OFFSET>,
            GetSymbolInformation: GetSymbolInformation::<Impl, IMPL_OFFSET>,
            GetSystemObjectInformation: GetSystemObjectInformation::<Impl, IMPL_OFFSET>,
            GetSourceFileInformationWide: GetSourceFileInformationWide::<Impl, IMPL_OFFSET>,
            FindSourceFileAndTokenWide: FindSourceFileAndTokenWide::<Impl, IMPL_OFFSET>,
            GetSymbolInformationWide: GetSymbolInformationWide::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugAdvanced3 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugAdvanced4Impl: Sized {
    fn GetThreadContext(&mut self, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn SetThreadContext(&mut self, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn Request(&mut self, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceFileInformation(&mut self, which: u32, sourcefile: super::super::super::Foundation::PSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::Result<()>;
    fn FindSourceFileAndToken(&mut self, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolInformation(&mut self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSystemObjectInformation(&mut self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceFileInformationWide(&mut self, which: u32, sourcefile: super::super::super::Foundation::PWSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::Result<()>;
    fn FindSourceFileAndTokenWide(&mut self, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PWSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolInformationWide(&mut self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolInformationWideEx(&mut self, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32, pinfoex: *mut SYMBOL_INFO_EX) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugAdvanced4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugAdvanced4Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugAdvanced4Vtbl {
        unsafe extern "system" fn GetThreadContext<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetThreadContext(::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn SetThreadContext<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetThreadContext(::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn Request<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Request(::core::mem::transmute_copy(&request), ::core::mem::transmute_copy(&inbuffer), ::core::mem::transmute_copy(&inbuffersize), ::core::mem::transmute_copy(&outbuffer), ::core::mem::transmute_copy(&outbuffersize), ::core::mem::transmute_copy(&outsize)).into()
        }
        unsafe extern "system" fn GetSourceFileInformation<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: super::super::super::Foundation::PSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceFileInformation(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&sourcefile), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into()
        }
        unsafe extern "system" fn FindSourceFileAndToken<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FindSourceFileAndToken(::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&modaddr), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&filetoken), ::core::mem::transmute_copy(&filetokensize), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into()
        }
        unsafe extern "system" fn GetSymbolInformation<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolInformation(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), ::core::mem::transmute_copy(&stringbuffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSystemObjectInformation<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemObjectInformation(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into()
        }
        unsafe extern "system" fn GetSourceFileInformationWide<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: super::super::super::Foundation::PWSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceFileInformationWide(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&sourcefile), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into()
        }
        unsafe extern "system" fn FindSourceFileAndTokenWide<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PWSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FindSourceFileAndTokenWide(::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&modaddr), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&filetoken), ::core::mem::transmute_copy(&filetokensize), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into()
        }
        unsafe extern "system" fn GetSymbolInformationWide<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolInformationWide(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), ::core::mem::transmute_copy(&stringbuffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSymbolInformationWideEx<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32, pinfoex: *mut SYMBOL_INFO_EX) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolInformationWideEx(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), ::core::mem::transmute_copy(&stringbuffersize), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&pinfoex)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetThreadContext: GetThreadContext::<Impl, IMPL_OFFSET>,
            SetThreadContext: SetThreadContext::<Impl, IMPL_OFFSET>,
            Request: Request::<Impl, IMPL_OFFSET>,
            GetSourceFileInformation: GetSourceFileInformation::<Impl, IMPL_OFFSET>,
            FindSourceFileAndToken: FindSourceFileAndToken::<Impl, IMPL_OFFSET>,
            GetSymbolInformation: GetSymbolInformation::<Impl, IMPL_OFFSET>,
            GetSystemObjectInformation: GetSystemObjectInformation::<Impl, IMPL_OFFSET>,
            GetSourceFileInformationWide: GetSourceFileInformationWide::<Impl, IMPL_OFFSET>,
            FindSourceFileAndTokenWide: FindSourceFileAndTokenWide::<Impl, IMPL_OFFSET>,
            GetSymbolInformationWide: GetSymbolInformationWide::<Impl, IMPL_OFFSET>,
            GetSymbolInformationWideEx: GetSymbolInformationWideEx::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugAdvanced4 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplication11032Impl: Sized + IRemoteDebugApplication110Impl {
    fn SynchronousCallInMainThread(&mut self, pptc: ::core::option::Option<IDebugThreadCall32>, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::Result<()>;
    fn AsynchronousCallInMainThread(&mut self, pptc: ::core::option::Option<IDebugThreadCall32>, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::Result<()>;
    fn CallableWaitForHandles(&mut self, handlecount: u32, phandles: *const super::super::super::Foundation::HANDLE) -> ::windows::core::Result<u32>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplication11032Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplication11032Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplication11032Vtbl {
        unsafe extern "system" fn SynchronousCallInMainThread<Impl: IDebugApplication11032Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SynchronousCallInMainThread(::core::mem::transmute(&pptc), ::core::mem::transmute_copy(&dwparam1), ::core::mem::transmute_copy(&dwparam2), ::core::mem::transmute_copy(&dwparam3)).into()
        }
        unsafe extern "system" fn AsynchronousCallInMainThread<Impl: IDebugApplication11032Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AsynchronousCallInMainThread(::core::mem::transmute(&pptc), ::core::mem::transmute_copy(&dwparam1), ::core::mem::transmute_copy(&dwparam2), ::core::mem::transmute_copy(&dwparam3)).into()
        }
        unsafe extern "system" fn CallableWaitForHandles<Impl: IDebugApplication11032Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handlecount: u32, phandles: *const super::super::super::Foundation::HANDLE, pindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CallableWaitForHandles(::core::mem::transmute_copy(&handlecount), ::core::mem::transmute_copy(&phandles)) {
                ::core::result::Result::Ok(ok__) => {
                    *pindex = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IRemoteDebugApplication110Vtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            SynchronousCallInMainThread: SynchronousCallInMainThread::<Impl, IMPL_OFFSET>,
            AsynchronousCallInMainThread: AsynchronousCallInMainThread::<Impl, IMPL_OFFSET>,
            CallableWaitForHandles: CallableWaitForHandles::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplication11032 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplication11064Impl: Sized + IRemoteDebugApplication110Impl {
    fn SynchronousCallInMainThread(&mut self, pptc: ::core::option::Option<IDebugThreadCall64>, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::Result<()>;
    fn AsynchronousCallInMainThread(&mut self, pptc: ::core::option::Option<IDebugThreadCall64>, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::Result<()>;
    fn CallableWaitForHandles(&mut self, handlecount: u32, phandles: *const super::super::super::Foundation::HANDLE) -> ::windows::core::Result<u32>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplication11064Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplication11064Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplication11064Vtbl {
        unsafe extern "system" fn SynchronousCallInMainThread<Impl: IDebugApplication11064Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SynchronousCallInMainThread(::core::mem::transmute(&pptc), ::core::mem::transmute_copy(&dwparam1), ::core::mem::transmute_copy(&dwparam2), ::core::mem::transmute_copy(&dwparam3)).into()
        }
        unsafe extern "system" fn AsynchronousCallInMainThread<Impl: IDebugApplication11064Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AsynchronousCallInMainThread(::core::mem::transmute(&pptc), ::core::mem::transmute_copy(&dwparam1), ::core::mem::transmute_copy(&dwparam2), ::core::mem::transmute_copy(&dwparam3)).into()
        }
        unsafe extern "system" fn CallableWaitForHandles<Impl: IDebugApplication11064Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handlecount: u32, phandles: *const super::super::super::Foundation::HANDLE, pindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CallableWaitForHandles(::core::mem::transmute_copy(&handlecount), ::core::mem::transmute_copy(&phandles)) {
                ::core::result::Result::Ok(ok__) => {
                    *pindex = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IRemoteDebugApplication110Vtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            SynchronousCallInMainThread: SynchronousCallInMainThread::<Impl, IMPL_OFFSET>,
            AsynchronousCallInMainThread: AsynchronousCallInMainThread::<Impl, IMPL_OFFSET>,
            CallableWaitForHandles: CallableWaitForHandles::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplication11064 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplication32Impl: Sized + IRemoteDebugApplicationImpl {
    fn SetName(&mut self, pstrname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn StepOutComplete(&mut self) -> ::windows::core::Result<()>;
    fn DebugOutput(&mut self, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn StartDebugSession(&mut self) -> ::windows::core::Result<()>;
    fn HandleBreakPoint(&mut self, br: BREAKREASON) -> ::windows::core::Result<BREAKRESUME_ACTION>;
    fn Close(&mut self) -> ::windows::core::Result<()>;
    fn GetBreakFlags(&mut self, pabf: *mut u32, pprdatsteppingthread: *mut ::core::option::Option<IRemoteDebugApplicationThread>) -> ::windows::core::Result<()>;
    fn GetCurrentThread(&mut self) -> ::windows::core::Result<IDebugApplicationThread>;
    fn CreateAsyncDebugOperation(&mut self, psdo: ::core::option::Option<IDebugSyncOperation>) -> ::windows::core::Result<IDebugAsyncOperation>;
    fn AddStackFrameSniffer(&mut self, pdsfs: ::core::option::Option<IDebugStackFrameSniffer>) -> ::windows::core::Result<u32>;
    fn RemoveStackFrameSniffer(&mut self, dwcookie: u32) -> ::windows::core::Result<()>;
    fn QueryCurrentThreadIsDebuggerThread(&mut self) -> ::windows::core::Result<()>;
    fn SynchronousCallInDebuggerThread(&mut self, pptc: ::core::option::Option<IDebugThreadCall32>, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::core::Result<()>;
    fn CreateApplicationNode(&mut self) -> ::windows::core::Result<IDebugApplicationNode>;
    fn FireDebuggerEvent(&mut self, riid: *const ::windows::core::GUID, punk: ::core::option::Option<::windows::core::IUnknown>) -> ::windows::core::Result<()>;
    fn HandleRuntimeError(&mut self, perrordebug: ::core::option::Option<IActiveScriptErrorDebug>, pscriptsite: ::core::option::Option<IActiveScriptSite>, pbra: *mut BREAKRESUME_ACTION, perra: *mut ERRORRESUMEACTION, pfcallonscripterror: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn FCanJitDebug(&mut self) -> super::super::super::Foundation::BOOL;
    fn FIsAutoJitDebugEnabled(&mut self) -> super::super::super::Foundation::BOOL;
    fn AddGlobalExpressionContextProvider(&mut self, pdsfs: ::core::option::Option<IProvideExpressionContexts>) -> ::windows::core::Result<u32>;
    fn RemoveGlobalExpressionContextProvider(&mut self, dwcookie: u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplication32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplication32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplication32Vtbl {
        unsafe extern "system" fn SetName<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetName(::core::mem::transmute_copy(&pstrname)).into()
        }
        unsafe extern "system" fn StepOutComplete<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StepOutComplete().into()
        }
        unsafe extern "system" fn DebugOutput<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DebugOutput(::core::mem::transmute_copy(&pstr)).into()
        }
        unsafe extern "system" fn StartDebugSession<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartDebugSession().into()
        }
        unsafe extern "system" fn HandleBreakPoint<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, br: BREAKREASON, pbra: *mut BREAKRESUME_ACTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HandleBreakPoint(::core::mem::transmute_copy(&br)) {
                ::core::result::Result::Ok(ok__) => {
                    *pbra = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Close<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Close().into()
        }
        unsafe extern "system" fn GetBreakFlags<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pabf: *mut u32, pprdatsteppingthread: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetBreakFlags(::core::mem::transmute_copy(&pabf), ::core::mem::transmute_copy(&pprdatsteppingthread)).into()
        }
        unsafe extern "system" fn GetCurrentThread<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThread() {
                ::core::result::Result::Ok(ok__) => {
                    *pat = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateAsyncDebugOperation<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psdo: ::windows::core::RawPtr, ppado: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateAsyncDebugOperation(::core::mem::transmute(&psdo)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppado = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddStackFrameSniffer<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdsfs: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddStackFrameSniffer(::core::mem::transmute(&pdsfs)) {
                ::core::result::Result::Ok(ok__) => {
                    *pdwcookie = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveStackFrameSniffer<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveStackFrameSniffer(::core::mem::transmute_copy(&dwcookie)).into()
        }
        unsafe extern "system" fn QueryCurrentThreadIsDebuggerThread<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).QueryCurrentThreadIsDebuggerThread().into()
        }
        unsafe extern "system" fn SynchronousCallInDebuggerThread<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SynchronousCallInDebuggerThread(::core::mem::transmute(&pptc), ::core::mem::transmute_copy(&dwparam1), ::core::mem::transmute_copy(&dwparam2), ::core::mem::transmute_copy(&dwparam3)).into()
        }
        unsafe extern "system" fn CreateApplicationNode<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdannew: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateApplicationNode() {
                ::core::result::Result::Ok(ok__) => {
                    *ppdannew = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FireDebuggerEvent<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FireDebuggerEvent(::core::mem::transmute_copy(&riid), ::core::mem::transmute(&punk)).into()
        }
        unsafe extern "system" fn HandleRuntimeError<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, perrordebug: ::windows::core::RawPtr, pscriptsite: ::windows::core::RawPtr, pbra: *mut BREAKRESUME_ACTION, perra: *mut ERRORRESUMEACTION, pfcallonscripterror: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).HandleRuntimeError(::core::mem::transmute(&perrordebug), ::core::mem::transmute(&pscriptsite), ::core::mem::transmute_copy(&pbra), ::core::mem::transmute_copy(&perra), ::core::mem::transmute_copy(&pfcallonscripterror)).into()
        }
        unsafe extern "system" fn FCanJitDebug<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> super::super::super::Foundation::BOOL {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FCanJitDebug()
        }
        unsafe extern "system" fn FIsAutoJitDebugEnabled<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> super::super::super::Foundation::BOOL {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FIsAutoJitDebugEnabled()
        }
        unsafe extern "system" fn AddGlobalExpressionContextProvider<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdsfs: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddGlobalExpressionContextProvider(::core::mem::transmute(&pdsfs)) {
                ::core::result::Result::Ok(ok__) => {
                    *pdwcookie = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveGlobalExpressionContextProvider<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveGlobalExpressionContextProvider(::core::mem::transmute_copy(&dwcookie)).into()
        }
        Self {
            base: IRemoteDebugApplicationVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            SetName: SetName::<Impl, IMPL_OFFSET>,
            StepOutComplete: StepOutComplete::<Impl, IMPL_OFFSET>,
            DebugOutput: DebugOutput::<Impl, IMPL_OFFSET>,
            StartDebugSession: StartDebugSession::<Impl, IMPL_OFFSET>,
            HandleBreakPoint: HandleBreakPoint::<Impl, IMPL_OFFSET>,
            Close: Close::<Impl, IMPL_OFFSET>,
            GetBreakFlags: GetBreakFlags::<Impl, IMPL_OFFSET>,
            GetCurrentThread: GetCurrentThread::<Impl, IMPL_OFFSET>,
            CreateAsyncDebugOperation: CreateAsyncDebugOperation::<Impl, IMPL_OFFSET>,
            AddStackFrameSniffer: AddStackFrameSniffer::<Impl, IMPL_OFFSET>,
            RemoveStackFrameSniffer: RemoveStackFrameSniffer::<Impl, IMPL_OFFSET>,
            QueryCurrentThreadIsDebuggerThread: QueryCurrentThreadIsDebuggerThread::<Impl, IMPL_OFFSET>,
            SynchronousCallInDebuggerThread: SynchronousCallInDebuggerThread::<Impl, IMPL_OFFSET>,
            CreateApplicationNode: CreateApplicationNode::<Impl, IMPL_OFFSET>,
            FireDebuggerEvent: FireDebuggerEvent::<Impl, IMPL_OFFSET>,
            HandleRuntimeError: HandleRuntimeError::<Impl, IMPL_OFFSET>,
            FCanJitDebug: FCanJitDebug::<Impl, IMPL_OFFSET>,
            FIsAutoJitDebugEnabled: FIsAutoJitDebugEnabled::<Impl, IMPL_OFFSET>,
            AddGlobalExpressionContextProvider: AddGlobalExpressionContextProvider::<Impl, IMPL_OFFSET>,
            RemoveGlobalExpressionContextProvider: RemoveGlobalExpressionContextProvider::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplication32 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplication64Impl: Sized + IRemoteDebugApplicationImpl {
    fn SetName(&mut self, pstrname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn StepOutComplete(&mut self) -> ::windows::core::Result<()>;
    fn DebugOutput(&mut self, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn StartDebugSession(&mut self) -> ::windows::core::Result<()>;
    fn HandleBreakPoint(&mut self, br: BREAKREASON) -> ::windows::core::Result<BREAKRESUME_ACTION>;
    fn Close(&mut self) -> ::windows::core::Result<()>;
    fn GetBreakFlags(&mut self, pabf: *mut u32, pprdatsteppingthread: *mut ::core::option::Option<IRemoteDebugApplicationThread>) -> ::windows::core::Result<()>;
    fn GetCurrentThread(&mut self) -> ::windows::core::Result<IDebugApplicationThread>;
    fn CreateAsyncDebugOperation(&mut self, psdo: ::core::option::Option<IDebugSyncOperation>) -> ::windows::core::Result<IDebugAsyncOperation>;
    fn AddStackFrameSniffer(&mut self, pdsfs: ::core::option::Option<IDebugStackFrameSniffer>) -> ::windows::core::Result<u32>;
    fn RemoveStackFrameSniffer(&mut self, dwcookie: u32) -> ::windows::core::Result<()>;
    fn QueryCurrentThreadIsDebuggerThread(&mut self) -> ::windows::core::Result<()>;
    fn SynchronousCallInDebuggerThread(&mut self, pptc: ::core::option::Option<IDebugThreadCall64>, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::core::Result<()>;
    fn CreateApplicationNode(&mut self) -> ::windows::core::Result<IDebugApplicationNode>;
    fn FireDebuggerEvent(&mut self, riid: *const ::windows::core::GUID, punk: ::core::option::Option<::windows::core::IUnknown>) -> ::windows::core::Result<()>;
    fn HandleRuntimeError(&mut self, perrordebug: ::core::option::Option<IActiveScriptErrorDebug>, pscriptsite: ::core::option::Option<IActiveScriptSite>, pbra: *mut BREAKRESUME_ACTION, perra: *mut ERRORRESUMEACTION, pfcallonscripterror: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn FCanJitDebug(&mut self) -> super::super::super::Foundation::BOOL;
    fn FIsAutoJitDebugEnabled(&mut self) -> super::super::super::Foundation::BOOL;
    fn AddGlobalExpressionContextProvider(&mut self, pdsfs: ::core::option::Option<IProvideExpressionContexts>) -> ::windows::core::Result<u64>;
    fn RemoveGlobalExpressionContextProvider(&mut self, dwcookie: u64) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplication64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplication64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplication64Vtbl {
        unsafe extern "system" fn SetName<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetName(::core::mem::transmute_copy(&pstrname)).into()
        }
        unsafe extern "system" fn StepOutComplete<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StepOutComplete().into()
        }
        unsafe extern "system" fn DebugOutput<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DebugOutput(::core::mem::transmute_copy(&pstr)).into()
        }
        unsafe extern "system" fn StartDebugSession<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartDebugSession().into()
        }
        unsafe extern "system" fn HandleBreakPoint<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, br: BREAKREASON, pbra: *mut BREAKRESUME_ACTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HandleBreakPoint(::core::mem::transmute_copy(&br)) {
                ::core::result::Result::Ok(ok__) => {
                    *pbra = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Close<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Close().into()
        }
        unsafe extern "system" fn GetBreakFlags<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pabf: *mut u32, pprdatsteppingthread: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetBreakFlags(::core::mem::transmute_copy(&pabf), ::core::mem::transmute_copy(&pprdatsteppingthread)).into()
        }
        unsafe extern "system" fn GetCurrentThread<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThread() {
                ::core::result::Result::Ok(ok__) => {
                    *pat = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateAsyncDebugOperation<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psdo: ::windows::core::RawPtr, ppado: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateAsyncDebugOperation(::core::mem::transmute(&psdo)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppado = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddStackFrameSniffer<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdsfs: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddStackFrameSniffer(::core::mem::transmute(&pdsfs)) {
                ::core::result::Result::Ok(ok__) => {
                    *pdwcookie = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveStackFrameSniffer<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveStackFrameSniffer(::core::mem::transmute_copy(&dwcookie)).into()
        }
        unsafe extern "system" fn QueryCurrentThreadIsDebuggerThread<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).QueryCurrentThreadIsDebuggerThread().into()
        }
        unsafe extern "system" fn SynchronousCallInDebuggerThread<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SynchronousCallInDebuggerThread(::core::mem::transmute(&pptc), ::core::mem::transmute_copy(&dwparam1), ::core::mem::transmute_copy(&dwparam2), ::core::mem::transmute_copy(&dwparam3)).into()
        }
        unsafe extern "system" fn CreateApplicationNode<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdannew: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateApplicationNode() {
                ::core::result::Result::Ok(ok__) => {
                    *ppdannew = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FireDebuggerEvent<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FireDebuggerEvent(::core::mem::transmute_copy(&riid), ::core::mem::transmute(&punk)).into()
        }
        unsafe extern "system" fn HandleRuntimeError<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, perrordebug: ::windows::core::RawPtr, pscriptsite: ::windows::core::RawPtr, pbra: *mut BREAKRESUME_ACTION, perra: *mut ERRORRESUMEACTION, pfcallonscripterror: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).HandleRuntimeError(::core::mem::transmute(&perrordebug), ::core::mem::transmute(&pscriptsite), ::core::mem::transmute_copy(&pbra), ::core::mem::transmute_copy(&perra), ::core::mem::transmute_copy(&pfcallonscripterror)).into()
        }
        unsafe extern "system" fn FCanJitDebug<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> super::super::super::Foundation::BOOL {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FCanJitDebug()
        }
        unsafe extern "system" fn FIsAutoJitDebugEnabled<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> super::super::super::Foundation::BOOL {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FIsAutoJitDebugEnabled()
        }
        unsafe extern "system" fn AddGlobalExpressionContextProvider<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdsfs: ::windows::core::RawPtr, pdwcookie: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddGlobalExpressionContextProvider(::core::mem::transmute(&pdsfs)) {
                ::core::result::Result::Ok(ok__) => {
                    *pdwcookie = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveGlobalExpressionContextProvider<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveGlobalExpressionContextProvider(::core::mem::transmute_copy(&dwcookie)).into()
        }
        Self {
            base: IRemoteDebugApplicationVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            SetName: SetName::<Impl, IMPL_OFFSET>,
            StepOutComplete: StepOutComplete::<Impl, IMPL_OFFSET>,
            DebugOutput: DebugOutput::<Impl, IMPL_OFFSET>,
            StartDebugSession: StartDebugSession::<Impl, IMPL_OFFSET>,
            HandleBreakPoint: HandleBreakPoint::<Impl, IMPL_OFFSET>,
            Close: Close::<Impl, IMPL_OFFSET>,
            GetBreakFlags: GetBreakFlags::<Impl, IMPL_OFFSET>,
            GetCurrentThread: GetCurrentThread::<Impl, IMPL_OFFSET>,
            CreateAsyncDebugOperation: CreateAsyncDebugOperation::<Impl, IMPL_OFFSET>,
            AddStackFrameSniffer: AddStackFrameSniffer::<Impl, IMPL_OFFSET>,
            RemoveStackFrameSniffer: RemoveStackFrameSniffer::<Impl, IMPL_OFFSET>,
            QueryCurrentThreadIsDebuggerThread: QueryCurrentThreadIsDebuggerThread::<Impl, IMPL_OFFSET>,
            SynchronousCallInDebuggerThread: SynchronousCallInDebuggerThread::<Impl, IMPL_OFFSET>,
            CreateApplicationNode: CreateApplicationNode::<Impl, IMPL_OFFSET>,
            FireDebuggerEvent: FireDebuggerEvent::<Impl, IMPL_OFFSET>,
            HandleRuntimeError: HandleRuntimeError::<Impl, IMPL_OFFSET>,
            FCanJitDebug: FCanJitDebug::<Impl, IMPL_OFFSET>,
            FIsAutoJitDebugEnabled: FIsAutoJitDebugEnabled::<Impl, IMPL_OFFSET>,
            AddGlobalExpressionContextProvider: AddGlobalExpressionContextProvider::<Impl, IMPL_OFFSET>,
            RemoveGlobalExpressionContextProvider: RemoveGlobalExpressionContextProvider::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplication64 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplicationNodeImpl: Sized + IDebugDocumentInfoImpl + IDebugDocumentProviderImpl {
    fn EnumChildren(&mut self) -> ::windows::core::Result<IEnumDebugApplicationNodes>;
    fn GetParent(&mut self) -> ::windows::core::Result<IDebugApplicationNode>;
    fn SetDocumentProvider(&mut self, pddp: ::core::option::Option<IDebugDocumentProvider>) -> ::windows::core::Result<()>;
    fn Close(&mut self) -> ::windows::core::Result<()>;
    fn Attach(&mut self, pdanparent: ::core::option::Option<IDebugApplicationNode>) -> ::windows::core::Result<()>;
    fn Detach(&mut self) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplicationNodeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationNodeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationNodeVtbl {
        unsafe extern "system" fn EnumChildren<Impl: IDebugApplicationNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pperddp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumChildren() {
                ::core::result::Result::Ok(ok__) => {
                    *pperddp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetParent<Impl: IDebugApplicationNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pprddp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetParent() {
                ::core::result::Result::Ok(ok__) => {
                    *pprddp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDocumentProvider<Impl: IDebugApplicationNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetDocumentProvider(::core::mem::transmute(&pddp)).into()
        }
        unsafe extern "system" fn Close<Impl: IDebugApplicationNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Close().into()
        }
        unsafe extern "system" fn Attach<Impl: IDebugApplicationNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdanparent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Attach(::core::mem::transmute(&pdanparent)).into()
        }
        unsafe extern "system" fn Detach<Impl: IDebugApplicationNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Detach().into()
        }
        Self {
            base: IDebugDocumentProviderVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            EnumChildren: EnumChildren::<Impl, IMPL_OFFSET>,
            GetParent: GetParent::<Impl, IMPL_OFFSET>,
            SetDocumentProvider: SetDocumentProvider::<Impl, IMPL_OFFSET>,
            Close: Close::<Impl, IMPL_OFFSET>,
            Attach: Attach::<Impl, IMPL_OFFSET>,
            Detach: Detach::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationNode as ::windows::core::Interface>::IID
    }
}
pub trait IDebugApplicationNode100Impl: Sized {
    fn SetFilterForEventSink(&mut self, dwcookie: u32, filter: APPLICATION_NODE_EVENT_FILTER) -> ::windows::core::Result<()>;
    fn GetExcludedDocuments(&mut self, filter: APPLICATION_NODE_EVENT_FILTER) -> ::windows::core::Result<TEXT_DOCUMENT_ARRAY>;
    fn QueryIsChildNode(&mut self, psearchkey: ::core::option::Option<IDebugDocument>) -> ::windows::core::Result<()>;
}
impl IDebugApplicationNode100Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationNode100Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationNode100Vtbl {
        unsafe extern "system" fn SetFilterForEventSink<Impl: IDebugApplicationNode100Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32, filter: APPLICATION_NODE_EVENT_FILTER) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetFilterForEventSink(::core::mem::transmute_copy(&dwcookie), ::core::mem::transmute_copy(&filter)).into()
        }
        unsafe extern "system" fn GetExcludedDocuments<Impl: IDebugApplicationNode100Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filter: APPLICATION_NODE_EVENT_FILTER, pdocuments: *mut TEXT_DOCUMENT_ARRAY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExcludedDocuments(::core::mem::transmute_copy(&filter)) {
                ::core::result::Result::Ok(ok__) => {
                    *pdocuments = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryIsChildNode<Impl: IDebugApplicationNode100Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psearchkey: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).QueryIsChildNode(::core::mem::transmute(&psearchkey)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            SetFilterForEventSink: SetFilterForEventSink::<Impl, IMPL_OFFSET>,
            GetExcludedDocuments: GetExcludedDocuments::<Impl, IMPL_OFFSET>,
            QueryIsChildNode: QueryIsChildNode::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationNode100 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugApplicationNodeEventsImpl: Sized {
    fn onAddChild(&mut self, prddpchild: ::core::option::Option<IDebugApplicationNode>) -> ::windows::core::Result<()>;
    fn onRemoveChild(&mut self, prddpchild: ::core::option::Option<IDebugApplicationNode>) -> ::windows::core::Result<()>;
    fn onDetach(&mut self) -> ::windows::core::Result<()>;
    fn onAttach(&mut self, prddpparent: ::core::option::Option<IDebugApplicationNode>) -> ::windows::core::Result<()>;
}
impl IDebugApplicationNodeEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationNodeEventsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationNodeEventsVtbl {
        unsafe extern "system" fn onAddChild<Impl: IDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prddpchild: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onAddChild(::core::mem::transmute(&prddpchild)).into()
        }
        unsafe extern "system" fn onRemoveChild<Impl: IDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prddpchild: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onRemoveChild(::core::mem::transmute(&prddpchild)).into()
        }
        unsafe extern "system" fn onDetach<Impl: IDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onDetach().into()
        }
        unsafe extern "system" fn onAttach<Impl: IDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prddpparent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onAttach(::core::mem::transmute(&prddpparent)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            onAddChild: onAddChild::<Impl, IMPL_OFFSET>,
            onRemoveChild: onRemoveChild::<Impl, IMPL_OFFSET>,
            onDetach: onDetach::<Impl, IMPL_OFFSET>,
            onAttach: onAttach::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationNodeEvents as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplicationThreadImpl: Sized + IRemoteDebugApplicationThreadImpl {
    fn SynchronousCallIntoThread32(&mut self, pstcb: ::core::option::Option<IDebugThreadCall32>, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::core::Result<()>;
    fn QueryIsCurrentThread(&mut self) -> ::windows::core::Result<()>;
    fn QueryIsDebuggerThread(&mut self) -> ::windows::core::Result<()>;
    fn SetDescription(&mut self, pstrdescription: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn SetStateString(&mut self, pstrstate: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplicationThreadVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationThreadImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationThreadVtbl {
        unsafe extern "system" fn SynchronousCallIntoThread32<Impl: IDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstcb: ::windows::core::RawPtr, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SynchronousCallIntoThread32(::core::mem::transmute(&pstcb), ::core::mem::transmute_copy(&dwparam1), ::core::mem::transmute_copy(&dwparam2), ::core::mem::transmute_copy(&dwparam3)).into()
        }
        unsafe extern "system" fn QueryIsCurrentThread<Impl: IDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).QueryIsCurrentThread().into()
        }
        unsafe extern "system" fn QueryIsDebuggerThread<Impl: IDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).QueryIsDebuggerThread().into()
        }
        unsafe extern "system" fn SetDescription<Impl: IDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrdescription: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetDescription(::core::mem::transmute_copy(&pstrdescription)).into()
        }
        unsafe extern "system" fn SetStateString<Impl: IDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrstate: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetStateString(::core::mem::transmute_copy(&pstrstate)).into()
        }
        Self {
            base: IRemoteDebugApplicationThreadVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            SynchronousCallIntoThread32: SynchronousCallIntoThread32::<Impl, IMPL_OFFSET>,
            QueryIsCurrentThread: QueryIsCurrentThread::<Impl, IMPL_OFFSET>,
            QueryIsDebuggerThread: QueryIsDebuggerThread::<Impl, IMPL_OFFSET>,
            SetDescription: SetDescription::<Impl, IMPL_OFFSET>,
            SetStateString: SetStateString::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationThread as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplicationThread11032Impl: Sized {
    fn GetActiveThreadRequestCount(&mut self) -> ::windows::core::Result<u32>;
    fn IsSuspendedForBreakPoint(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BOOL>;
    fn IsThreadCallable(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BOOL>;
    fn AsynchronousCallIntoThread(&mut self, pptc: ::core::option::Option<IDebugThreadCall32>, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplicationThread11032Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationThread11032Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationThread11032Vtbl {
        unsafe extern "system" fn GetActiveThreadRequestCount<Impl: IDebugApplicationThread11032Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, puithreadrequests: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetActiveThreadRequestCount() {
                ::core::result::Result::Ok(ok__) => {
                    *puithreadrequests = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsSuspendedForBreakPoint<Impl: IDebugApplicationThread11032Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfissuspended: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsSuspendedForBreakPoint() {
                ::core::result::Result::Ok(ok__) => {
                    *pfissuspended = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsThreadCallable<Impl: IDebugApplicationThread11032Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfiscallable: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsThreadCallable() {
                ::core::result::Result::Ok(ok__) => {
                    *pfiscallable = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AsynchronousCallIntoThread<Impl: IDebugApplicationThread11032Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AsynchronousCallIntoThread(::core::mem::transmute(&pptc), ::core::mem::transmute_copy(&dwparam1), ::core::mem::transmute_copy(&dwparam2), ::core::mem::transmute_copy(&dwparam3)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetActiveThreadRequestCount: GetActiveThreadRequestCount::<Impl, IMPL_OFFSET>,
            IsSuspendedForBreakPoint: IsSuspendedForBreakPoint::<Impl, IMPL_OFFSET>,
            IsThreadCallable: IsThreadCallable::<Impl, IMPL_OFFSET>,
            AsynchronousCallIntoThread: AsynchronousCallIntoThread::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationThread11032 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplicationThread11064Impl: Sized {
    fn GetActiveThreadRequestCount(&mut self) -> ::windows::core::Result<u32>;
    fn IsSuspendedForBreakPoint(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BOOL>;
    fn IsThreadCallable(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BOOL>;
    fn AsynchronousCallIntoThread(&mut self, pptc: ::core::option::Option<IDebugThreadCall64>, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplicationThread11064Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationThread11064Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationThread11064Vtbl {
        unsafe extern "system" fn GetActiveThreadRequestCount<Impl: IDebugApplicationThread11064Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, puithreadrequests: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetActiveThreadRequestCount() {
                ::core::result::Result::Ok(ok__) => {
                    *puithreadrequests = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsSuspendedForBreakPoint<Impl: IDebugApplicationThread11064Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfissuspended: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsSuspendedForBreakPoint() {
                ::core::result::Result::Ok(ok__) => {
                    *pfissuspended = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsThreadCallable<Impl: IDebugApplicationThread11064Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfiscallable: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsThreadCallable() {
                ::core::result::Result::Ok(ok__) => {
                    *pfiscallable = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AsynchronousCallIntoThread<Impl: IDebugApplicationThread11064Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AsynchronousCallIntoThread(::core::mem::transmute(&pptc), ::core::mem::transmute_copy(&dwparam1), ::core::mem::transmute_copy(&dwparam2), ::core::mem::transmute_copy(&dwparam3)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetActiveThreadRequestCount: GetActiveThreadRequestCount::<Impl, IMPL_OFFSET>,
            IsSuspendedForBreakPoint: IsSuspendedForBreakPoint::<Impl, IMPL_OFFSET>,
            IsThreadCallable: IsThreadCallable::<Impl, IMPL_OFFSET>,
            AsynchronousCallIntoThread: AsynchronousCallIntoThread::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationThread11064 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplicationThread64Impl: Sized + IRemoteDebugApplicationThreadImpl + IDebugApplicationThreadImpl {
    fn SynchronousCallIntoThread64(&mut self, pstcb: ::core::option::Option<IDebugThreadCall64>, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplicationThread64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationThread64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationThread64Vtbl {
        unsafe extern "system" fn SynchronousCallIntoThread64<Impl: IDebugApplicationThread64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstcb: ::windows::core::RawPtr, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SynchronousCallIntoThread64(::core::mem::transmute(&pstcb), ::core::mem::transmute_copy(&dwparam1), ::core::mem::transmute_copy(&dwparam2), ::core::mem::transmute_copy(&dwparam3)).into()
        }
        Self {
            base: IDebugApplicationThreadVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            SynchronousCallIntoThread64: SynchronousCallIntoThread64::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationThread64 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugApplicationThreadEvents110Impl: Sized {
    fn OnSuspendForBreakPoint(&mut self) -> ::windows::core::Result<()>;
    fn OnResumeFromBreakPoint(&mut self) -> ::windows::core::Result<()>;
    fn OnThreadRequestComplete(&mut self) -> ::windows::core::Result<()>;
    fn OnBeginThreadRequest(&mut self) -> ::windows::core::Result<()>;
}
impl IDebugApplicationThreadEvents110Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationThreadEvents110Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationThreadEvents110Vtbl {
        unsafe extern "system" fn OnSuspendForBreakPoint<Impl: IDebugApplicationThreadEvents110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnSuspendForBreakPoint().into()
        }
        unsafe extern "system" fn OnResumeFromBreakPoint<Impl: IDebugApplicationThreadEvents110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnResumeFromBreakPoint().into()
        }
        unsafe extern "system" fn OnThreadRequestComplete<Impl: IDebugApplicationThreadEvents110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnThreadRequestComplete().into()
        }
        unsafe extern "system" fn OnBeginThreadRequest<Impl: IDebugApplicationThreadEvents110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnBeginThreadRequest().into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            OnSuspendForBreakPoint: OnSuspendForBreakPoint::<Impl, IMPL_OFFSET>,
            OnResumeFromBreakPoint: OnResumeFromBreakPoint::<Impl, IMPL_OFFSET>,
            OnThreadRequestComplete: OnThreadRequestComplete::<Impl, IMPL_OFFSET>,
            OnBeginThreadRequest: OnBeginThreadRequest::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationThreadEvents110 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugAsyncOperationImpl: Sized {
    fn GetSyncDebugOperation(&mut self) -> ::windows::core::Result<IDebugSyncOperation>;
    fn Start(&mut self, padocb: ::core::option::Option<IDebugAsyncOperationCallBack>) -> ::windows::core::Result<()>;
    fn Abort(&mut self) -> ::windows::core::Result<()>;
    fn QueryIsComplete(&mut self) -> ::windows::core::Result<()>;
    fn GetResult(&mut self, phrresult: *mut ::windows::core::HRESULT, ppunkresult: *mut ::core::option::Option<::windows::core::IUnknown>) -> ::windows::core::Result<()>;
}
impl IDebugAsyncOperationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugAsyncOperationImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugAsyncOperationVtbl {
        unsafe extern "system" fn GetSyncDebugOperation<Impl: IDebugAsyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsdo: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSyncDebugOperation() {
                ::core::result::Result::Ok(ok__) => {
                    *ppsdo = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Start<Impl: IDebugAsyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, padocb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Start(::core::mem::transmute(&padocb)).into()
        }
        unsafe extern "system" fn Abort<Impl: IDebugAsyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Abort().into()
        }
        unsafe extern "system" fn QueryIsComplete<Impl: IDebugAsyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).QueryIsComplete().into()
        }
        unsafe extern "system" fn GetResult<Impl: IDebugAsyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phrresult: *mut ::windows::core::HRESULT, ppunkresult: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetResult(::core::mem::transmute_copy(&phrresult), ::core::mem::transmute_copy(&ppunkresult)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetSyncDebugOperation: GetSyncDebugOperation::<Impl, IMPL_OFFSET>,
            Start: Start::<Impl, IMPL_OFFSET>,
            Abort: Abort::<Impl, IMPL_OFFSET>,
            QueryIsComplete: QueryIsComplete::<Impl, IMPL_OFFSET>,
            GetResult: GetResult::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugAsyncOperation as ::windows::core::Interface>::IID
    }
}
pub trait IDebugAsyncOperationCallBackImpl: Sized {
    fn onComplete(&mut self) -> ::windows::core::Result<()>;
}
impl IDebugAsyncOperationCallBackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugAsyncOperationCallBackImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugAsyncOperationCallBackVtbl {
        unsafe extern "system" fn onComplete<Impl: IDebugAsyncOperationCallBackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onComplete().into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), onComplete: onComplete::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugAsyncOperationCallBack as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugBreakpointImpl: Sized {
    fn GetId(&mut self) -> ::windows::core::Result<u32>;
    fn GetType(&mut self, breaktype: *mut u32, proctype: *mut u32) -> ::windows::core::Result<()>;
    fn GetAdder(&mut self) -> ::windows::core::Result<IDebugClient>;
    fn GetFlags(&mut self) -> ::windows::core::Result<u32>;
    fn AddFlags(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn RemoveFlags(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn SetFlags(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetOffset(&mut self) -> ::windows::core::Result<u64>;
    fn SetOffset(&mut self, offset: u64) -> ::windows::core::Result<()>;
    fn GetDataParameters(&mut self, size: *mut u32, accesstype: *mut u32) -> ::windows::core::Result<()>;
    fn SetDataParameters(&mut self, size: u32, accesstype: u32) -> ::windows::core::Result<()>;
    fn GetPassCount(&mut self) -> ::windows::core::Result<u32>;
    fn SetPassCount(&mut self, count: u32) -> ::windows::core::Result<()>;
    fn GetCurrentPassCount(&mut self) -> ::windows::core::Result<u32>;
    fn GetMatchThreadId(&mut self) -> ::windows::core::Result<u32>;
    fn SetMatchThreadId(&mut self, thread: u32) -> ::windows::core::Result<()>;
    fn GetCommand(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetCommand(&mut self, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetOffsetExpression(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOffsetExpression(&mut self, expression: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetParameters(&mut self) -> ::windows::core::Result<DEBUG_BREAKPOINT_PARAMETERS>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugBreakpointVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugBreakpointImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugBreakpointVtbl {
        unsafe extern "system" fn GetId<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetType<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, breaktype: *mut u32, proctype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetType(::core::mem::transmute_copy(&breaktype), ::core::mem::transmute_copy(&proctype)).into()
        }
        unsafe extern "system" fn GetAdder<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, adder: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAdder() {
                ::core::result::Result::Ok(ok__) => {
                    *adder = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFlags<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFlags() {
                ::core::result::Result::Ok(ok__) => {
                    *flags = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddFlags<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddFlags(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn RemoveFlags<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveFlags(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn SetFlags<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetFlags(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetOffset<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOffset<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOffset(::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn GetDataParameters<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32, accesstype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDataParameters(::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&accesstype)).into()
        }
        unsafe extern "system" fn SetDataParameters<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: u32, accesstype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetDataParameters(::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&accesstype)).into()
        }
        unsafe extern "system" fn GetPassCount<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPassCount() {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPassCount<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetPassCount(::core::mem::transmute_copy(&count)).into()
        }
        unsafe extern "system" fn GetCurrentPassCount<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentPassCount() {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMatchThreadId<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMatchThreadId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetMatchThreadId<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, thread: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetMatchThreadId(::core::mem::transmute_copy(&thread)).into()
        }
        unsafe extern "system" fn GetCommand<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetCommand(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetCommand<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCommand(::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetOffsetExpression<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOffsetExpression(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&expressionsize)).into()
        }
        unsafe extern "system" fn SetOffsetExpression<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOffsetExpression(::core::mem::transmute_copy(&expression)).into()
        }
        unsafe extern "system" fn GetParameters<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetParameters() {
                ::core::result::Result::Ok(ok__) => {
                    *params = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetId: GetId::<Impl, IMPL_OFFSET>,
            GetType: GetType::<Impl, IMPL_OFFSET>,
            GetAdder: GetAdder::<Impl, IMPL_OFFSET>,
            GetFlags: GetFlags::<Impl, IMPL_OFFSET>,
            AddFlags: AddFlags::<Impl, IMPL_OFFSET>,
            RemoveFlags: RemoveFlags::<Impl, IMPL_OFFSET>,
            SetFlags: SetFlags::<Impl, IMPL_OFFSET>,
            GetOffset: GetOffset::<Impl, IMPL_OFFSET>,
            SetOffset: SetOffset::<Impl, IMPL_OFFSET>,
            GetDataParameters: GetDataParameters::<Impl, IMPL_OFFSET>,
            SetDataParameters: SetDataParameters::<Impl, IMPL_OFFSET>,
            GetPassCount: GetPassCount::<Impl, IMPL_OFFSET>,
            SetPassCount: SetPassCount::<Impl, IMPL_OFFSET>,
            GetCurrentPassCount: GetCurrentPassCount::<Impl, IMPL_OFFSET>,
            GetMatchThreadId: GetMatchThreadId::<Impl, IMPL_OFFSET>,
            SetMatchThreadId: SetMatchThreadId::<Impl, IMPL_OFFSET>,
            GetCommand: GetCommand::<Impl, IMPL_OFFSET>,
            SetCommand: SetCommand::<Impl, IMPL_OFFSET>,
            GetOffsetExpression: GetOffsetExpression::<Impl, IMPL_OFFSET>,
            SetOffsetExpression: SetOffsetExpression::<Impl, IMPL_OFFSET>,
            GetParameters: GetParameters::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugBreakpoint as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugBreakpoint2Impl: Sized {
    fn GetId(&mut self) -> ::windows::core::Result<u32>;
    fn GetType(&mut self, breaktype: *mut u32, proctype: *mut u32) -> ::windows::core::Result<()>;
    fn GetAdder(&mut self) -> ::windows::core::Result<IDebugClient>;
    fn GetFlags(&mut self) -> ::windows::core::Result<u32>;
    fn AddFlags(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn RemoveFlags(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn SetFlags(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetOffset(&mut self) -> ::windows::core::Result<u64>;
    fn SetOffset(&mut self, offset: u64) -> ::windows::core::Result<()>;
    fn GetDataParameters(&mut self, size: *mut u32, accesstype: *mut u32) -> ::windows::core::Result<()>;
    fn SetDataParameters(&mut self, size: u32, accesstype: u32) -> ::windows::core::Result<()>;
    fn GetPassCount(&mut self) -> ::windows::core::Result<u32>;
    fn SetPassCount(&mut self, count: u32) -> ::windows::core::Result<()>;
    fn GetCurrentPassCount(&mut self) -> ::windows::core::Result<u32>;
    fn GetMatchThreadId(&mut self) -> ::windows::core::Result<u32>;
    fn SetMatchThreadId(&mut self, thread: u32) -> ::windows::core::Result<()>;
    fn GetCommand(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetCommand(&mut self, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetOffsetExpression(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOffsetExpression(&mut self, expression: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetParameters(&mut self) -> ::windows::core::Result<DEBUG_BREAKPOINT_PARAMETERS>;
    fn GetCommandWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetCommandWide(&mut self, command: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetOffsetExpressionWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOffsetExpressionWide(&mut self, expression: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugBreakpoint2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugBreakpoint2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugBreakpoint2Vtbl {
        unsafe extern "system" fn GetId<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetType<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, breaktype: *mut u32, proctype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetType(::core::mem::transmute_copy(&breaktype), ::core::mem::transmute_copy(&proctype)).into()
        }
        unsafe extern "system" fn GetAdder<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, adder: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAdder() {
                ::core::result::Result::Ok(ok__) => {
                    *adder = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFlags<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFlags() {
                ::core::result::Result::Ok(ok__) => {
                    *flags = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddFlags<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddFlags(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn RemoveFlags<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveFlags(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn SetFlags<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetFlags(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetOffset<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOffset<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOffset(::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn GetDataParameters<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32, accesstype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDataParameters(::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&accesstype)).into()
        }
        unsafe extern "system" fn SetDataParameters<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: u32, accesstype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetDataParameters(::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&accesstype)).into()
        }
        unsafe extern "system" fn GetPassCount<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPassCount() {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPassCount<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetPassCount(::core::mem::transmute_copy(&count)).into()
        }
        unsafe extern "system" fn GetCurrentPassCount<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentPassCount() {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMatchThreadId<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMatchThreadId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetMatchThreadId<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, thread: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetMatchThreadId(::core::mem::transmute_copy(&thread)).into()
        }
        unsafe extern "system" fn GetCommand<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetCommand(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetCommand<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCommand(::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetOffsetExpression<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOffsetExpression(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&expressionsize)).into()
        }
        unsafe extern "system" fn SetOffsetExpression<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOffsetExpression(::core::mem::transmute_copy(&expression)).into()
        }
        unsafe extern "system" fn GetParameters<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetParameters() {
                ::core::result::Result::Ok(ok__) => {
                    *params = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCommandWide<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetCommandWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetCommandWide<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCommandWide(::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetOffsetExpressionWide<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOffsetExpressionWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&expressionsize)).into()
        }
        unsafe extern "system" fn SetOffsetExpressionWide<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOffsetExpressionWide(::core::mem::transmute_copy(&expression)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetId: GetId::<Impl, IMPL_OFFSET>,
            GetType: GetType::<Impl, IMPL_OFFSET>,
            GetAdder: GetAdder::<Impl, IMPL_OFFSET>,
            GetFlags: GetFlags::<Impl, IMPL_OFFSET>,
            AddFlags: AddFlags::<Impl, IMPL_OFFSET>,
            RemoveFlags: RemoveFlags::<Impl, IMPL_OFFSET>,
            SetFlags: SetFlags::<Impl, IMPL_OFFSET>,
            GetOffset: GetOffset::<Impl, IMPL_OFFSET>,
            SetOffset: SetOffset::<Impl, IMPL_OFFSET>,
            GetDataParameters: GetDataParameters::<Impl, IMPL_OFFSET>,
            SetDataParameters: SetDataParameters::<Impl, IMPL_OFFSET>,
            GetPassCount: GetPassCount::<Impl, IMPL_OFFSET>,
            SetPassCount: SetPassCount::<Impl, IMPL_OFFSET>,
            GetCurrentPassCount: GetCurrentPassCount::<Impl, IMPL_OFFSET>,
            GetMatchThreadId: GetMatchThreadId::<Impl, IMPL_OFFSET>,
            SetMatchThreadId: SetMatchThreadId::<Impl, IMPL_OFFSET>,
            GetCommand: GetCommand::<Impl, IMPL_OFFSET>,
            SetCommand: SetCommand::<Impl, IMPL_OFFSET>,
            GetOffsetExpression: GetOffsetExpression::<Impl, IMPL_OFFSET>,
            SetOffsetExpression: SetOffsetExpression::<Impl, IMPL_OFFSET>,
            GetParameters: GetParameters::<Impl, IMPL_OFFSET>,
            GetCommandWide: GetCommandWide::<Impl, IMPL_OFFSET>,
            SetCommandWide: SetCommandWide::<Impl, IMPL_OFFSET>,
            GetOffsetExpressionWide: GetOffsetExpressionWide::<Impl, IMPL_OFFSET>,
            SetOffsetExpressionWide: SetOffsetExpressionWide::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugBreakpoint2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugBreakpoint3Impl: Sized {
    fn GetId(&mut self) -> ::windows::core::Result<u32>;
    fn GetType(&mut self, breaktype: *mut u32, proctype: *mut u32) -> ::windows::core::Result<()>;
    fn GetAdder(&mut self) -> ::windows::core::Result<IDebugClient>;
    fn GetFlags(&mut self) -> ::windows::core::Result<u32>;
    fn AddFlags(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn RemoveFlags(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn SetFlags(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetOffset(&mut self) -> ::windows::core::Result<u64>;
    fn SetOffset(&mut self, offset: u64) -> ::windows::core::Result<()>;
    fn GetDataParameters(&mut self, size: *mut u32, accesstype: *mut u32) -> ::windows::core::Result<()>;
    fn SetDataParameters(&mut self, size: u32, accesstype: u32) -> ::windows::core::Result<()>;
    fn GetPassCount(&mut self) -> ::windows::core::Result<u32>;
    fn SetPassCount(&mut self, count: u32) -> ::windows::core::Result<()>;
    fn GetCurrentPassCount(&mut self) -> ::windows::core::Result<u32>;
    fn GetMatchThreadId(&mut self) -> ::windows::core::Result<u32>;
    fn SetMatchThreadId(&mut self, thread: u32) -> ::windows::core::Result<()>;
    fn GetCommand(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetCommand(&mut self, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetOffsetExpression(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOffsetExpression(&mut self, expression: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetParameters(&mut self) -> ::windows::core::Result<DEBUG_BREAKPOINT_PARAMETERS>;
    fn GetCommandWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetCommandWide(&mut self, command: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetOffsetExpressionWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOffsetExpressionWide(&mut self, expression: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetGuid(&mut self) -> ::windows::core::Result<::windows::core::GUID>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugBreakpoint3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugBreakpoint3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugBreakpoint3Vtbl {
        unsafe extern "system" fn GetId<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetType<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, breaktype: *mut u32, proctype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetType(::core::mem::transmute_copy(&breaktype), ::core::mem::transmute_copy(&proctype)).into()
        }
        unsafe extern "system" fn GetAdder<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, adder: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAdder() {
                ::core::result::Result::Ok(ok__) => {
                    *adder = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFlags<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFlags() {
                ::core::result::Result::Ok(ok__) => {
                    *flags = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddFlags<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddFlags(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn RemoveFlags<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveFlags(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn SetFlags<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetFlags(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetOffset<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOffset<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOffset(::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn GetDataParameters<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32, accesstype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDataParameters(::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&accesstype)).into()
        }
        unsafe extern "system" fn SetDataParameters<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: u32, accesstype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetDataParameters(::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&accesstype)).into()
        }
        unsafe extern "system" fn GetPassCount<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPassCount() {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPassCount<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetPassCount(::core::mem::transmute_copy(&count)).into()
        }
        unsafe extern "system" fn GetCurrentPassCount<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentPassCount() {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMatchThreadId<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMatchThreadId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetMatchThreadId<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, thread: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetMatchThreadId(::core::mem::transmute_copy(&thread)).into()
        }
        unsafe extern "system" fn GetCommand<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetCommand(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetCommand<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCommand(::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetOffsetExpression<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOffsetExpression(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&expressionsize)).into()
        }
        unsafe extern "system" fn SetOffsetExpression<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOffsetExpression(::core::mem::transmute_copy(&expression)).into()
        }
        unsafe extern "system" fn GetParameters<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetParameters() {
                ::core::result::Result::Ok(ok__) => {
                    *params = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCommandWide<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetCommandWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetCommandWide<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCommandWide(::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetOffsetExpressionWide<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOffsetExpressionWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&expressionsize)).into()
        }
        unsafe extern "system" fn SetOffsetExpressionWide<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOffsetExpressionWide(::core::mem::transmute_copy(&expression)).into()
        }
        unsafe extern "system" fn GetGuid<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetGuid() {
                ::core::result::Result::Ok(ok__) => {
                    *guid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetId: GetId::<Impl, IMPL_OFFSET>,
            GetType: GetType::<Impl, IMPL_OFFSET>,
            GetAdder: GetAdder::<Impl, IMPL_OFFSET>,
            GetFlags: GetFlags::<Impl, IMPL_OFFSET>,
            AddFlags: AddFlags::<Impl, IMPL_OFFSET>,
            RemoveFlags: RemoveFlags::<Impl, IMPL_OFFSET>,
            SetFlags: SetFlags::<Impl, IMPL_OFFSET>,
            GetOffset: GetOffset::<Impl, IMPL_OFFSET>,
            SetOffset: SetOffset::<Impl, IMPL_OFFSET>,
            GetDataParameters: GetDataParameters::<Impl, IMPL_OFFSET>,
            SetDataParameters: SetDataParameters::<Impl, IMPL_OFFSET>,
            GetPassCount: GetPassCount::<Impl, IMPL_OFFSET>,
            SetPassCount: SetPassCount::<Impl, IMPL_OFFSET>,
            GetCurrentPassCount: GetCurrentPassCount::<Impl, IMPL_OFFSET>,
            GetMatchThreadId: GetMatchThreadId::<Impl, IMPL_OFFSET>,
            SetMatchThreadId: SetMatchThreadId::<Impl, IMPL_OFFSET>,
            GetCommand: GetCommand::<Impl, IMPL_OFFSET>,
            SetCommand: SetCommand::<Impl, IMPL_OFFSET>,
            GetOffsetExpression: GetOffsetExpression::<Impl, IMPL_OFFSET>,
            SetOffsetExpression: SetOffsetExpression::<Impl, IMPL_OFFSET>,
            GetParameters: GetParameters::<Impl, IMPL_OFFSET>,
            GetCommandWide: GetCommandWide::<Impl, IMPL_OFFSET>,
            SetCommandWide: SetCommandWide::<Impl, IMPL_OFFSET>,
            GetOffsetExpressionWide: GetOffsetExpressionWide::<Impl, IMPL_OFFSET>,
            SetOffsetExpressionWide: SetOffsetExpressionWide::<Impl, IMPL_OFFSET>,
            GetGuid: GetGuid::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugBreakpoint3 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClientImpl: Sized {
    fn AttachKernel(&mut self, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetKernelConnectionOptions(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::Result<()>;
    fn SetKernelConnectionOptions(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn StartProcessServer(&mut self, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::Result<()>;
    fn ConnectProcessServer(&mut self, remoteoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn DisconnectProcessServer(&mut self, server: u64) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIds(&mut self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(&mut self, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<u32>;
    fn GetRunningProcessDescription(&mut self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::Result<()>;
    fn AttachProcess(&mut self, server: u64, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessA(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn GetProcessOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn OpenDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn WriteDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::Result<()>;
    fn ConnectSession(&mut self, flags: u32, historylimit: u32) -> ::windows::core::Result<()>;
    fn StartServer(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputServers(&mut self, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn TerminateProcesses(&mut self) -> ::windows::core::Result<()>;
    fn DetachProcesses(&mut self) -> ::windows::core::Result<()>;
    fn EndSession(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetExitCode(&mut self) -> ::windows::core::Result<u32>;
    fn DispatchCallbacks(&mut self, timeout: u32) -> ::windows::core::Result<()>;
    fn ExitDispatch(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<()>;
    fn CreateClient(&mut self) -> ::windows::core::Result<IDebugClient>;
    fn GetInputCallbacks(&mut self) -> ::windows::core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugInputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputCallbacks(&mut self) -> ::windows::core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugOutputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputMask(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputMask(&mut self, mask: u32) -> ::windows::core::Result<()>;
    fn GetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<u32>;
    fn SetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>, mask: u32) -> ::windows::core::Result<()>;
    fn GetOutputWidth(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputWidth(&mut self, columns: u32) -> ::windows::core::Result<()>;
    fn GetOutputLinePrefix(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOutputLinePrefix(&mut self, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetIdentity(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputIdentity(&mut self, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetEventCallbacks(&mut self) -> ::windows::core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(&mut self, callbacks: ::core::option::Option<IDebugEventCallbacks>) -> ::windows::core::Result<()>;
    fn FlushCallbacks(&mut self) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClientVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClientImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClientVtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachKernel(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&connectoptions)).into()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKernelConnectionOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartProcessServer(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&reserved)).into()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(::core::mem::transmute_copy(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *server = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DisconnectProcessServer(::core::mem::transmute_copy(&server)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessSystemIds(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessDescription(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachProcess(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessA(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenDumpFile(::core::mem::transmute_copy(&dumpfile)).into()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFile(::core::mem::transmute_copy(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ConnectSession(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartServer(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputServers(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&machine), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminateProcesses().into()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DetachProcesses().into()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndSession(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExitCode() {
                ::core::result::Result::Ok(ok__) => {
                    *code = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DispatchCallbacks(::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExitDispatch(::core::mem::transmute(&client)).into()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateClient() {
                ::core::result::Result::Ok(ok__) => {
                    *client = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputMask(::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(::core::mem::transmute(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOtherOutputMask(::core::mem::transmute(&client), ::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth() {
                ::core::result::Result::Ok(ok__) => {
                    *columns = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputWidth(::core::mem::transmute_copy(&columns)).into()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputLinePrefix(::core::mem::transmute_copy(&prefix)).into()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetIdentity(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputIdentity(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FlushCallbacks().into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            AttachKernel: AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer: StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess: AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA: CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions: GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions: AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions: SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile: OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile: WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession: ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer: StartServer::<Impl, IMPL_OFFSET>,
            OutputServers: OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses: TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses: DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession: EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode: GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch: ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient: CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask: GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask: SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth: GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth: SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity: GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity: OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks: FlushCallbacks::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClient2Impl: Sized {
    fn AttachKernel(&mut self, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetKernelConnectionOptions(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::Result<()>;
    fn SetKernelConnectionOptions(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn StartProcessServer(&mut self, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::Result<()>;
    fn ConnectProcessServer(&mut self, remoteoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn DisconnectProcessServer(&mut self, server: u64) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIds(&mut self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(&mut self, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<u32>;
    fn GetRunningProcessDescription(&mut self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::Result<()>;
    fn AttachProcess(&mut self, server: u64, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessA(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn GetProcessOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn OpenDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn WriteDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::Result<()>;
    fn ConnectSession(&mut self, flags: u32, historylimit: u32) -> ::windows::core::Result<()>;
    fn StartServer(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputServers(&mut self, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn TerminateProcesses(&mut self) -> ::windows::core::Result<()>;
    fn DetachProcesses(&mut self) -> ::windows::core::Result<()>;
    fn EndSession(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetExitCode(&mut self) -> ::windows::core::Result<u32>;
    fn DispatchCallbacks(&mut self, timeout: u32) -> ::windows::core::Result<()>;
    fn ExitDispatch(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<()>;
    fn CreateClient(&mut self) -> ::windows::core::Result<IDebugClient>;
    fn GetInputCallbacks(&mut self) -> ::windows::core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugInputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputCallbacks(&mut self) -> ::windows::core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugOutputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputMask(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputMask(&mut self, mask: u32) -> ::windows::core::Result<()>;
    fn GetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<u32>;
    fn SetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>, mask: u32) -> ::windows::core::Result<()>;
    fn GetOutputWidth(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputWidth(&mut self, columns: u32) -> ::windows::core::Result<()>;
    fn GetOutputLinePrefix(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOutputLinePrefix(&mut self, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetIdentity(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputIdentity(&mut self, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetEventCallbacks(&mut self) -> ::windows::core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(&mut self, callbacks: ::core::option::Option<IDebugEventCallbacks>) -> ::windows::core::Result<()>;
    fn FlushCallbacks(&mut self) -> ::windows::core::Result<()>;
    fn WriteDumpFile2(&mut self, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AddDumpInformationFile(&mut self, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::Result<()>;
    fn EndProcessServer(&mut self, server: u64) -> ::windows::core::Result<()>;
    fn WaitForProcessServerEnd(&mut self, timeout: u32) -> ::windows::core::Result<()>;
    fn IsKernelDebuggerEnabled(&mut self) -> ::windows::core::Result<()>;
    fn TerminateCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn DetachCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn AbandonCurrentProcess(&mut self) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClient2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClient2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClient2Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachKernel(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&connectoptions)).into()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKernelConnectionOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartProcessServer(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&reserved)).into()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(::core::mem::transmute_copy(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *server = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DisconnectProcessServer(::core::mem::transmute_copy(&server)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessSystemIds(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessDescription(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachProcess(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessA(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenDumpFile(::core::mem::transmute_copy(&dumpfile)).into()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFile(::core::mem::transmute_copy(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ConnectSession(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartServer(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputServers(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&machine), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminateProcesses().into()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DetachProcesses().into()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndSession(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExitCode() {
                ::core::result::Result::Ok(ok__) => {
                    *code = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DispatchCallbacks(::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExitDispatch(::core::mem::transmute(&client)).into()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateClient() {
                ::core::result::Result::Ok(ok__) => {
                    *client = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputMask(::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(::core::mem::transmute(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOtherOutputMask(::core::mem::transmute(&client), ::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth() {
                ::core::result::Result::Ok(ok__) => {
                    *columns = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputWidth(::core::mem::transmute_copy(&columns)).into()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputLinePrefix(::core::mem::transmute_copy(&prefix)).into()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetIdentity(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputIdentity(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FlushCallbacks().into()
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFile2(::core::mem::transmute_copy(&dumpfile), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute_copy(&comment)).into()
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDumpInformationFile(::core::mem::transmute_copy(&infofile), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndProcessServer(::core::mem::transmute_copy(&server)).into()
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WaitForProcessServerEnd(::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsKernelDebuggerEnabled().into()
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminateCurrentProcess().into()
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DetachCurrentProcess().into()
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AbandonCurrentProcess().into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            AttachKernel: AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer: StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess: AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA: CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions: GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions: AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions: SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile: OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile: WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession: ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer: StartServer::<Impl, IMPL_OFFSET>,
            OutputServers: OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses: TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses: DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession: EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode: GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch: ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient: CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask: GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask: SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth: GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth: SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity: GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity: OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks: FlushCallbacks::<Impl, IMPL_OFFSET>,
            WriteDumpFile2: WriteDumpFile2::<Impl, IMPL_OFFSET>,
            AddDumpInformationFile: AddDumpInformationFile::<Impl, IMPL_OFFSET>,
            EndProcessServer: EndProcessServer::<Impl, IMPL_OFFSET>,
            WaitForProcessServerEnd: WaitForProcessServerEnd::<Impl, IMPL_OFFSET>,
            IsKernelDebuggerEnabled: IsKernelDebuggerEnabled::<Impl, IMPL_OFFSET>,
            TerminateCurrentProcess: TerminateCurrentProcess::<Impl, IMPL_OFFSET>,
            DetachCurrentProcess: DetachCurrentProcess::<Impl, IMPL_OFFSET>,
            AbandonCurrentProcess: AbandonCurrentProcess::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClient3Impl: Sized {
    fn AttachKernel(&mut self, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetKernelConnectionOptions(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::Result<()>;
    fn SetKernelConnectionOptions(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn StartProcessServer(&mut self, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::Result<()>;
    fn ConnectProcessServer(&mut self, remoteoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn DisconnectProcessServer(&mut self, server: u64) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIds(&mut self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(&mut self, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<u32>;
    fn GetRunningProcessDescription(&mut self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::Result<()>;
    fn AttachProcess(&mut self, server: u64, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessA(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn GetProcessOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn OpenDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn WriteDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::Result<()>;
    fn ConnectSession(&mut self, flags: u32, historylimit: u32) -> ::windows::core::Result<()>;
    fn StartServer(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputServers(&mut self, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn TerminateProcesses(&mut self) -> ::windows::core::Result<()>;
    fn DetachProcesses(&mut self) -> ::windows::core::Result<()>;
    fn EndSession(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetExitCode(&mut self) -> ::windows::core::Result<u32>;
    fn DispatchCallbacks(&mut self, timeout: u32) -> ::windows::core::Result<()>;
    fn ExitDispatch(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<()>;
    fn CreateClient(&mut self) -> ::windows::core::Result<IDebugClient>;
    fn GetInputCallbacks(&mut self) -> ::windows::core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugInputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputCallbacks(&mut self) -> ::windows::core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugOutputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputMask(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputMask(&mut self, mask: u32) -> ::windows::core::Result<()>;
    fn GetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<u32>;
    fn SetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>, mask: u32) -> ::windows::core::Result<()>;
    fn GetOutputWidth(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputWidth(&mut self, columns: u32) -> ::windows::core::Result<()>;
    fn GetOutputLinePrefix(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOutputLinePrefix(&mut self, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetIdentity(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputIdentity(&mut self, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetEventCallbacks(&mut self) -> ::windows::core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(&mut self, callbacks: ::core::option::Option<IDebugEventCallbacks>) -> ::windows::core::Result<()>;
    fn FlushCallbacks(&mut self) -> ::windows::core::Result<()>;
    fn WriteDumpFile2(&mut self, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AddDumpInformationFile(&mut self, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::Result<()>;
    fn EndProcessServer(&mut self, server: u64) -> ::windows::core::Result<()>;
    fn WaitForProcessServerEnd(&mut self, timeout: u32) -> ::windows::core::Result<()>;
    fn IsKernelDebuggerEnabled(&mut self) -> ::windows::core::Result<()>;
    fn TerminateCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn DetachCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn AbandonCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableNameWide(&mut self, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<u32>;
    fn GetRunningProcessDescriptionWide(&mut self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::Result<()>;
    fn CreateProcessWide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttachWide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClient3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClient3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClient3Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachKernel(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&connectoptions)).into()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKernelConnectionOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartProcessServer(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&reserved)).into()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(::core::mem::transmute_copy(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *server = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DisconnectProcessServer(::core::mem::transmute_copy(&server)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessSystemIds(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessDescription(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachProcess(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessA(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenDumpFile(::core::mem::transmute_copy(&dumpfile)).into()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFile(::core::mem::transmute_copy(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ConnectSession(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartServer(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputServers(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&machine), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminateProcesses().into()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DetachProcesses().into()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndSession(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExitCode() {
                ::core::result::Result::Ok(ok__) => {
                    *code = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DispatchCallbacks(::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExitDispatch(::core::mem::transmute(&client)).into()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateClient() {
                ::core::result::Result::Ok(ok__) => {
                    *client = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputMask(::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(::core::mem::transmute(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOtherOutputMask(::core::mem::transmute(&client), ::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth() {
                ::core::result::Result::Ok(ok__) => {
                    *columns = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputWidth(::core::mem::transmute_copy(&columns)).into()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputLinePrefix(::core::mem::transmute_copy(&prefix)).into()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetIdentity(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputIdentity(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FlushCallbacks().into()
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFile2(::core::mem::transmute_copy(&dumpfile), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute_copy(&comment)).into()
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDumpInformationFile(::core::mem::transmute_copy(&infofile), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndProcessServer(::core::mem::transmute_copy(&server)).into()
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WaitForProcessServerEnd(::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsKernelDebuggerEnabled().into()
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminateCurrentProcess().into()
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DetachCurrentProcess().into()
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AbandonCurrentProcess().into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableNameWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessDescriptionWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into()
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttachWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            AttachKernel: AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer: StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess: AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA: CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions: GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions: AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions: SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile: OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile: WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession: ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer: StartServer::<Impl, IMPL_OFFSET>,
            OutputServers: OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses: TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses: DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession: EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode: GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch: ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient: CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask: GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask: SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth: GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth: SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity: GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity: OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks: FlushCallbacks::<Impl, IMPL_OFFSET>,
            WriteDumpFile2: WriteDumpFile2::<Impl, IMPL_OFFSET>,
            AddDumpInformationFile: AddDumpInformationFile::<Impl, IMPL_OFFSET>,
            EndProcessServer: EndProcessServer::<Impl, IMPL_OFFSET>,
            WaitForProcessServerEnd: WaitForProcessServerEnd::<Impl, IMPL_OFFSET>,
            IsKernelDebuggerEnabled: IsKernelDebuggerEnabled::<Impl, IMPL_OFFSET>,
            TerminateCurrentProcess: TerminateCurrentProcess::<Impl, IMPL_OFFSET>,
            DetachCurrentProcess: DetachCurrentProcess::<Impl, IMPL_OFFSET>,
            AbandonCurrentProcess: AbandonCurrentProcess::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide: GetRunningProcessSystemIdByExecutableNameWide::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescriptionWide: GetRunningProcessDescriptionWide::<Impl, IMPL_OFFSET>,
            CreateProcessWide: CreateProcessWide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttachWide: CreateProcessAndAttachWide::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient3 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClient4Impl: Sized {
    fn AttachKernel(&mut self, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetKernelConnectionOptions(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::Result<()>;
    fn SetKernelConnectionOptions(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn StartProcessServer(&mut self, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::Result<()>;
    fn ConnectProcessServer(&mut self, remoteoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn DisconnectProcessServer(&mut self, server: u64) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIds(&mut self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(&mut self, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<u32>;
    fn GetRunningProcessDescription(&mut self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::Result<()>;
    fn AttachProcess(&mut self, server: u64, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessA(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn GetProcessOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn OpenDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn WriteDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::Result<()>;
    fn ConnectSession(&mut self, flags: u32, historylimit: u32) -> ::windows::core::Result<()>;
    fn StartServer(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputServers(&mut self, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn TerminateProcesses(&mut self) -> ::windows::core::Result<()>;
    fn DetachProcesses(&mut self) -> ::windows::core::Result<()>;
    fn EndSession(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetExitCode(&mut self) -> ::windows::core::Result<u32>;
    fn DispatchCallbacks(&mut self, timeout: u32) -> ::windows::core::Result<()>;
    fn ExitDispatch(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<()>;
    fn CreateClient(&mut self) -> ::windows::core::Result<IDebugClient>;
    fn GetInputCallbacks(&mut self) -> ::windows::core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugInputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputCallbacks(&mut self) -> ::windows::core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugOutputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputMask(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputMask(&mut self, mask: u32) -> ::windows::core::Result<()>;
    fn GetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<u32>;
    fn SetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>, mask: u32) -> ::windows::core::Result<()>;
    fn GetOutputWidth(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputWidth(&mut self, columns: u32) -> ::windows::core::Result<()>;
    fn GetOutputLinePrefix(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOutputLinePrefix(&mut self, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetIdentity(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputIdentity(&mut self, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetEventCallbacks(&mut self) -> ::windows::core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(&mut self, callbacks: ::core::option::Option<IDebugEventCallbacks>) -> ::windows::core::Result<()>;
    fn FlushCallbacks(&mut self) -> ::windows::core::Result<()>;
    fn WriteDumpFile2(&mut self, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AddDumpInformationFile(&mut self, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::Result<()>;
    fn EndProcessServer(&mut self, server: u64) -> ::windows::core::Result<()>;
    fn WaitForProcessServerEnd(&mut self, timeout: u32) -> ::windows::core::Result<()>;
    fn IsKernelDebuggerEnabled(&mut self) -> ::windows::core::Result<()>;
    fn TerminateCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn DetachCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn AbandonCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableNameWide(&mut self, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<u32>;
    fn GetRunningProcessDescriptionWide(&mut self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::Result<()>;
    fn CreateProcessWide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttachWide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn OpenDumpFileWide(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::Result<()>;
    fn WriteDumpFileWide(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AddDumpInformationFileWide(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::Result<()>;
    fn GetNumberDumpFiles(&mut self) -> ::windows::core::Result<u32>;
    fn GetDumpFile(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::Result<()>;
    fn GetDumpFileWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClient4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClient4Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClient4Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachKernel(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&connectoptions)).into()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKernelConnectionOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartProcessServer(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&reserved)).into()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(::core::mem::transmute_copy(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *server = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DisconnectProcessServer(::core::mem::transmute_copy(&server)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessSystemIds(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessDescription(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachProcess(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessA(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenDumpFile(::core::mem::transmute_copy(&dumpfile)).into()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFile(::core::mem::transmute_copy(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ConnectSession(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartServer(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputServers(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&machine), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminateProcesses().into()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DetachProcesses().into()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndSession(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExitCode() {
                ::core::result::Result::Ok(ok__) => {
                    *code = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DispatchCallbacks(::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExitDispatch(::core::mem::transmute(&client)).into()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateClient() {
                ::core::result::Result::Ok(ok__) => {
                    *client = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputMask(::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(::core::mem::transmute(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOtherOutputMask(::core::mem::transmute(&client), ::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth() {
                ::core::result::Result::Ok(ok__) => {
                    *columns = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputWidth(::core::mem::transmute_copy(&columns)).into()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputLinePrefix(::core::mem::transmute_copy(&prefix)).into()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetIdentity(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputIdentity(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FlushCallbacks().into()
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFile2(::core::mem::transmute_copy(&dumpfile), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute_copy(&comment)).into()
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDumpInformationFile(::core::mem::transmute_copy(&infofile), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndProcessServer(::core::mem::transmute_copy(&server)).into()
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WaitForProcessServerEnd(::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsKernelDebuggerEnabled().into()
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminateCurrentProcess().into()
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DetachCurrentProcess().into()
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AbandonCurrentProcess().into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableNameWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessDescriptionWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into()
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttachWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn OpenDumpFileWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenDumpFileWide(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle)).into()
        }
        unsafe extern "system" fn WriteDumpFileWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFileWide(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute_copy(&comment)).into()
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDumpInformationFileWide(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetNumberDumpFiles<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberDumpFiles() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFile<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDumpFile(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetDumpFileWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDumpFileWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            AttachKernel: AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer: StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess: AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA: CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions: GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions: AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions: SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile: OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile: WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession: ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer: StartServer::<Impl, IMPL_OFFSET>,
            OutputServers: OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses: TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses: DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession: EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode: GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch: ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient: CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask: GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask: SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth: GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth: SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity: GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity: OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks: FlushCallbacks::<Impl, IMPL_OFFSET>,
            WriteDumpFile2: WriteDumpFile2::<Impl, IMPL_OFFSET>,
            AddDumpInformationFile: AddDumpInformationFile::<Impl, IMPL_OFFSET>,
            EndProcessServer: EndProcessServer::<Impl, IMPL_OFFSET>,
            WaitForProcessServerEnd: WaitForProcessServerEnd::<Impl, IMPL_OFFSET>,
            IsKernelDebuggerEnabled: IsKernelDebuggerEnabled::<Impl, IMPL_OFFSET>,
            TerminateCurrentProcess: TerminateCurrentProcess::<Impl, IMPL_OFFSET>,
            DetachCurrentProcess: DetachCurrentProcess::<Impl, IMPL_OFFSET>,
            AbandonCurrentProcess: AbandonCurrentProcess::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide: GetRunningProcessSystemIdByExecutableNameWide::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescriptionWide: GetRunningProcessDescriptionWide::<Impl, IMPL_OFFSET>,
            CreateProcessWide: CreateProcessWide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttachWide: CreateProcessAndAttachWide::<Impl, IMPL_OFFSET>,
            OpenDumpFileWide: OpenDumpFileWide::<Impl, IMPL_OFFSET>,
            WriteDumpFileWide: WriteDumpFileWide::<Impl, IMPL_OFFSET>,
            AddDumpInformationFileWide: AddDumpInformationFileWide::<Impl, IMPL_OFFSET>,
            GetNumberDumpFiles: GetNumberDumpFiles::<Impl, IMPL_OFFSET>,
            GetDumpFile: GetDumpFile::<Impl, IMPL_OFFSET>,
            GetDumpFileWide: GetDumpFileWide::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient4 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClient5Impl: Sized {
    fn AttachKernel(&mut self, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetKernelConnectionOptions(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::Result<()>;
    fn SetKernelConnectionOptions(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn StartProcessServer(&mut self, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::Result<()>;
    fn ConnectProcessServer(&mut self, remoteoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn DisconnectProcessServer(&mut self, server: u64) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIds(&mut self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(&mut self, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<u32>;
    fn GetRunningProcessDescription(&mut self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::Result<()>;
    fn AttachProcess(&mut self, server: u64, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessA(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn GetProcessOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn OpenDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn WriteDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::Result<()>;
    fn ConnectSession(&mut self, flags: u32, historylimit: u32) -> ::windows::core::Result<()>;
    fn StartServer(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputServers(&mut self, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn TerminateProcesses(&mut self) -> ::windows::core::Result<()>;
    fn DetachProcesses(&mut self) -> ::windows::core::Result<()>;
    fn EndSession(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetExitCode(&mut self) -> ::windows::core::Result<u32>;
    fn DispatchCallbacks(&mut self, timeout: u32) -> ::windows::core::Result<()>;
    fn ExitDispatch(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<()>;
    fn CreateClient(&mut self) -> ::windows::core::Result<IDebugClient>;
    fn GetInputCallbacks(&mut self) -> ::windows::core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugInputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputCallbacks(&mut self) -> ::windows::core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugOutputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputMask(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputMask(&mut self, mask: u32) -> ::windows::core::Result<()>;
    fn GetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<u32>;
    fn SetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>, mask: u32) -> ::windows::core::Result<()>;
    fn GetOutputWidth(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputWidth(&mut self, columns: u32) -> ::windows::core::Result<()>;
    fn GetOutputLinePrefix(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOutputLinePrefix(&mut self, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetIdentity(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputIdentity(&mut self, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetEventCallbacks(&mut self) -> ::windows::core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(&mut self, callbacks: ::core::option::Option<IDebugEventCallbacks>) -> ::windows::core::Result<()>;
    fn FlushCallbacks(&mut self) -> ::windows::core::Result<()>;
    fn WriteDumpFile2(&mut self, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AddDumpInformationFile(&mut self, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::Result<()>;
    fn EndProcessServer(&mut self, server: u64) -> ::windows::core::Result<()>;
    fn WaitForProcessServerEnd(&mut self, timeout: u32) -> ::windows::core::Result<()>;
    fn IsKernelDebuggerEnabled(&mut self) -> ::windows::core::Result<()>;
    fn TerminateCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn DetachCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn AbandonCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableNameWide(&mut self, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<u32>;
    fn GetRunningProcessDescriptionWide(&mut self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::Result<()>;
    fn CreateProcessWide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttachWide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn OpenDumpFileWide(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::Result<()>;
    fn WriteDumpFileWide(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AddDumpInformationFileWide(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::Result<()>;
    fn GetNumberDumpFiles(&mut self) -> ::windows::core::Result<u32>;
    fn GetDumpFile(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::Result<()>;
    fn GetDumpFileWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::Result<()>;
    fn AttachKernelWide(&mut self, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetKernelConnectionOptionsWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::Result<()>;
    fn SetKernelConnectionOptionsWide(&mut self, options: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn StartProcessServerWide(&mut self, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::Result<()>;
    fn ConnectProcessServerWide(&mut self, remoteoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn StartServerWide(&mut self, options: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputServersWide(&mut self, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetOutputCallbacksWide(&mut self) -> ::windows::core::Result<IDebugOutputCallbacksWide>;
    fn SetOutputCallbacksWide(&mut self, callbacks: ::core::option::Option<IDebugOutputCallbacksWide>) -> ::windows::core::Result<()>;
    fn GetOutputLinePrefixWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOutputLinePrefixWide(&mut self, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetIdentityWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputIdentityWide(&mut self, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetEventCallbacksWide(&mut self) -> ::windows::core::Result<IDebugEventCallbacksWide>;
    fn SetEventCallbacksWide(&mut self, callbacks: ::core::option::Option<IDebugEventCallbacksWide>) -> ::windows::core::Result<()>;
    fn CreateProcess2(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn CreateProcess2Wide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach2(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach2Wide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn PushOutputLinePrefix(&mut self, newprefix: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn PushOutputLinePrefixWide(&mut self, newprefix: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn PopOutputLinePrefix(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn GetNumberInputCallbacks(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberOutputCallbacks(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberEventCallbacks(&mut self, eventflags: u32) -> ::windows::core::Result<u32>;
    fn GetQuitLockString(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetQuitLockString(&mut self, string: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetQuitLockStringWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetQuitLockStringWide(&mut self, string: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClient5Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClient5Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClient5Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachKernel(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&connectoptions)).into()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKernelConnectionOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartProcessServer(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&reserved)).into()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(::core::mem::transmute_copy(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *server = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DisconnectProcessServer(::core::mem::transmute_copy(&server)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessSystemIds(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessDescription(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachProcess(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessA(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenDumpFile(::core::mem::transmute_copy(&dumpfile)).into()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFile(::core::mem::transmute_copy(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ConnectSession(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartServer(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputServers(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&machine), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminateProcesses().into()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DetachProcesses().into()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndSession(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExitCode() {
                ::core::result::Result::Ok(ok__) => {
                    *code = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DispatchCallbacks(::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExitDispatch(::core::mem::transmute(&client)).into()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateClient() {
                ::core::result::Result::Ok(ok__) => {
                    *client = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputMask(::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(::core::mem::transmute(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOtherOutputMask(::core::mem::transmute(&client), ::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth() {
                ::core::result::Result::Ok(ok__) => {
                    *columns = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputWidth(::core::mem::transmute_copy(&columns)).into()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputLinePrefix(::core::mem::transmute_copy(&prefix)).into()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetIdentity(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputIdentity(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FlushCallbacks().into()
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFile2(::core::mem::transmute_copy(&dumpfile), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute_copy(&comment)).into()
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDumpInformationFile(::core::mem::transmute_copy(&infofile), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndProcessServer(::core::mem::transmute_copy(&server)).into()
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WaitForProcessServerEnd(::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsKernelDebuggerEnabled().into()
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminateCurrentProcess().into()
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DetachCurrentProcess().into()
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AbandonCurrentProcess().into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableNameWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessDescriptionWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into()
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttachWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn OpenDumpFileWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenDumpFileWide(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle)).into()
        }
        unsafe extern "system" fn WriteDumpFileWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFileWide(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute_copy(&comment)).into()
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDumpInformationFileWide(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetNumberDumpFiles<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberDumpFiles() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFile<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDumpFile(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetDumpFileWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDumpFileWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn AttachKernelWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachKernelWide(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&connectoptions)).into()
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKernelConnectionOptionsWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into()
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKernelConnectionOptionsWide(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn StartProcessServerWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartProcessServerWide(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&reserved)).into()
        }
        unsafe extern "system" fn ConnectProcessServerWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServerWide(::core::mem::transmute_copy(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *server = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServerWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartServerWide(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OutputServersWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputServersWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&machine), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacksWide() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputCallbacksWide(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOutputLinePrefixWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into()
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputLinePrefixWide(::core::mem::transmute_copy(&prefix)).into()
        }
        unsafe extern "system" fn GetIdentityWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetIdentityWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into()
        }
        unsafe extern "system" fn OutputIdentityWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputIdentityWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn GetEventCallbacksWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacksWide() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacksWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventCallbacksWide(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn CreateProcess2<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcess2(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment)).into()
        }
        unsafe extern "system" fn CreateProcess2Wide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcess2Wide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach2(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach2Wide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn PushOutputLinePrefix<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefix(::core::mem::transmute_copy(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefixWide(::core::mem::transmute_copy(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PopOutputLinePrefix<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).PopOutputLinePrefix(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberInputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberOutputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberEventCallbacks(::core::mem::transmute_copy(&eventflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetQuitLockString<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetQuitLockString(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn SetQuitLockString<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetQuitLockString(::core::mem::transmute_copy(&string)).into()
        }
        unsafe extern "system" fn GetQuitLockStringWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetQuitLockStringWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn SetQuitLockStringWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetQuitLockStringWide(::core::mem::transmute_copy(&string)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            AttachKernel: AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer: StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess: AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA: CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions: GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions: AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions: SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile: OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile: WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession: ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer: StartServer::<Impl, IMPL_OFFSET>,
            OutputServers: OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses: TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses: DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession: EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode: GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch: ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient: CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask: GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask: SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth: GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth: SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity: GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity: OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks: FlushCallbacks::<Impl, IMPL_OFFSET>,
            WriteDumpFile2: WriteDumpFile2::<Impl, IMPL_OFFSET>,
            AddDumpInformationFile: AddDumpInformationFile::<Impl, IMPL_OFFSET>,
            EndProcessServer: EndProcessServer::<Impl, IMPL_OFFSET>,
            WaitForProcessServerEnd: WaitForProcessServerEnd::<Impl, IMPL_OFFSET>,
            IsKernelDebuggerEnabled: IsKernelDebuggerEnabled::<Impl, IMPL_OFFSET>,
            TerminateCurrentProcess: TerminateCurrentProcess::<Impl, IMPL_OFFSET>,
            DetachCurrentProcess: DetachCurrentProcess::<Impl, IMPL_OFFSET>,
            AbandonCurrentProcess: AbandonCurrentProcess::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide: GetRunningProcessSystemIdByExecutableNameWide::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescriptionWide: GetRunningProcessDescriptionWide::<Impl, IMPL_OFFSET>,
            CreateProcessWide: CreateProcessWide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttachWide: CreateProcessAndAttachWide::<Impl, IMPL_OFFSET>,
            OpenDumpFileWide: OpenDumpFileWide::<Impl, IMPL_OFFSET>,
            WriteDumpFileWide: WriteDumpFileWide::<Impl, IMPL_OFFSET>,
            AddDumpInformationFileWide: AddDumpInformationFileWide::<Impl, IMPL_OFFSET>,
            GetNumberDumpFiles: GetNumberDumpFiles::<Impl, IMPL_OFFSET>,
            GetDumpFile: GetDumpFile::<Impl, IMPL_OFFSET>,
            GetDumpFileWide: GetDumpFileWide::<Impl, IMPL_OFFSET>,
            AttachKernelWide: AttachKernelWide::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptionsWide: GetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptionsWide: SetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            StartProcessServerWide: StartProcessServerWide::<Impl, IMPL_OFFSET>,
            ConnectProcessServerWide: ConnectProcessServerWide::<Impl, IMPL_OFFSET>,
            StartServerWide: StartServerWide::<Impl, IMPL_OFFSET>,
            OutputServersWide: OutputServersWide::<Impl, IMPL_OFFSET>,
            GetOutputCallbacksWide: GetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            SetOutputCallbacksWide: SetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefixWide: GetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefixWide: SetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            GetIdentityWide: GetIdentityWide::<Impl, IMPL_OFFSET>,
            OutputIdentityWide: OutputIdentityWide::<Impl, IMPL_OFFSET>,
            GetEventCallbacksWide: GetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            SetEventCallbacksWide: SetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            CreateProcess2: CreateProcess2::<Impl, IMPL_OFFSET>,
            CreateProcess2Wide: CreateProcess2Wide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2: CreateProcessAndAttach2::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2Wide: CreateProcessAndAttach2Wide::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefix: PushOutputLinePrefix::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefixWide: PushOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            PopOutputLinePrefix: PopOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetNumberInputCallbacks: GetNumberInputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberOutputCallbacks: GetNumberOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberEventCallbacks: GetNumberEventCallbacks::<Impl, IMPL_OFFSET>,
            GetQuitLockString: GetQuitLockString::<Impl, IMPL_OFFSET>,
            SetQuitLockString: SetQuitLockString::<Impl, IMPL_OFFSET>,
            GetQuitLockStringWide: GetQuitLockStringWide::<Impl, IMPL_OFFSET>,
            SetQuitLockStringWide: SetQuitLockStringWide::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient5 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClient6Impl: Sized {
    fn AttachKernel(&mut self, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetKernelConnectionOptions(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::Result<()>;
    fn SetKernelConnectionOptions(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn StartProcessServer(&mut self, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::Result<()>;
    fn ConnectProcessServer(&mut self, remoteoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn DisconnectProcessServer(&mut self, server: u64) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIds(&mut self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(&mut self, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<u32>;
    fn GetRunningProcessDescription(&mut self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::Result<()>;
    fn AttachProcess(&mut self, server: u64, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessA(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn GetProcessOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn OpenDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn WriteDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::Result<()>;
    fn ConnectSession(&mut self, flags: u32, historylimit: u32) -> ::windows::core::Result<()>;
    fn StartServer(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputServers(&mut self, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn TerminateProcesses(&mut self) -> ::windows::core::Result<()>;
    fn DetachProcesses(&mut self) -> ::windows::core::Result<()>;
    fn EndSession(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetExitCode(&mut self) -> ::windows::core::Result<u32>;
    fn DispatchCallbacks(&mut self, timeout: u32) -> ::windows::core::Result<()>;
    fn ExitDispatch(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<()>;
    fn CreateClient(&mut self) -> ::windows::core::Result<IDebugClient>;
    fn GetInputCallbacks(&mut self) -> ::windows::core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugInputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputCallbacks(&mut self) -> ::windows::core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugOutputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputMask(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputMask(&mut self, mask: u32) -> ::windows::core::Result<()>;
    fn GetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<u32>;
    fn SetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>, mask: u32) -> ::windows::core::Result<()>;
    fn GetOutputWidth(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputWidth(&mut self, columns: u32) -> ::windows::core::Result<()>;
    fn GetOutputLinePrefix(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOutputLinePrefix(&mut self, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetIdentity(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputIdentity(&mut self, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetEventCallbacks(&mut self) -> ::windows::core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(&mut self, callbacks: ::core::option::Option<IDebugEventCallbacks>) -> ::windows::core::Result<()>;
    fn FlushCallbacks(&mut self) -> ::windows::core::Result<()>;
    fn WriteDumpFile2(&mut self, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AddDumpInformationFile(&mut self, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::Result<()>;
    fn EndProcessServer(&mut self, server: u64) -> ::windows::core::Result<()>;
    fn WaitForProcessServerEnd(&mut self, timeout: u32) -> ::windows::core::Result<()>;
    fn IsKernelDebuggerEnabled(&mut self) -> ::windows::core::Result<()>;
    fn TerminateCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn DetachCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn AbandonCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableNameWide(&mut self, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<u32>;
    fn GetRunningProcessDescriptionWide(&mut self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::Result<()>;
    fn CreateProcessWide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttachWide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn OpenDumpFileWide(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::Result<()>;
    fn WriteDumpFileWide(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AddDumpInformationFileWide(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::Result<()>;
    fn GetNumberDumpFiles(&mut self) -> ::windows::core::Result<u32>;
    fn GetDumpFile(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::Result<()>;
    fn GetDumpFileWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::Result<()>;
    fn AttachKernelWide(&mut self, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetKernelConnectionOptionsWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::Result<()>;
    fn SetKernelConnectionOptionsWide(&mut self, options: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn StartProcessServerWide(&mut self, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::Result<()>;
    fn ConnectProcessServerWide(&mut self, remoteoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn StartServerWide(&mut self, options: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputServersWide(&mut self, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetOutputCallbacksWide(&mut self) -> ::windows::core::Result<IDebugOutputCallbacksWide>;
    fn SetOutputCallbacksWide(&mut self, callbacks: ::core::option::Option<IDebugOutputCallbacksWide>) -> ::windows::core::Result<()>;
    fn GetOutputLinePrefixWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOutputLinePrefixWide(&mut self, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetIdentityWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputIdentityWide(&mut self, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetEventCallbacksWide(&mut self) -> ::windows::core::Result<IDebugEventCallbacksWide>;
    fn SetEventCallbacksWide(&mut self, callbacks: ::core::option::Option<IDebugEventCallbacksWide>) -> ::windows::core::Result<()>;
    fn CreateProcess2(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn CreateProcess2Wide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach2(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach2Wide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn PushOutputLinePrefix(&mut self, newprefix: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn PushOutputLinePrefixWide(&mut self, newprefix: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn PopOutputLinePrefix(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn GetNumberInputCallbacks(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberOutputCallbacks(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberEventCallbacks(&mut self, eventflags: u32) -> ::windows::core::Result<u32>;
    fn GetQuitLockString(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetQuitLockString(&mut self, string: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetQuitLockStringWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetQuitLockStringWide(&mut self, string: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn SetEventContextCallbacks(&mut self, callbacks: ::core::option::Option<IDebugEventContextCallbacks>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClient6Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClient6Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClient6Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachKernel(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&connectoptions)).into()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKernelConnectionOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartProcessServer(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&reserved)).into()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(::core::mem::transmute_copy(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *server = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DisconnectProcessServer(::core::mem::transmute_copy(&server)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessSystemIds(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessDescription(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachProcess(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessA(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenDumpFile(::core::mem::transmute_copy(&dumpfile)).into()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFile(::core::mem::transmute_copy(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ConnectSession(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartServer(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputServers(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&machine), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminateProcesses().into()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DetachProcesses().into()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndSession(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExitCode() {
                ::core::result::Result::Ok(ok__) => {
                    *code = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DispatchCallbacks(::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExitDispatch(::core::mem::transmute(&client)).into()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateClient() {
                ::core::result::Result::Ok(ok__) => {
                    *client = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputMask(::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(::core::mem::transmute(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOtherOutputMask(::core::mem::transmute(&client), ::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth() {
                ::core::result::Result::Ok(ok__) => {
                    *columns = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputWidth(::core::mem::transmute_copy(&columns)).into()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputLinePrefix(::core::mem::transmute_copy(&prefix)).into()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetIdentity(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputIdentity(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FlushCallbacks().into()
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFile2(::core::mem::transmute_copy(&dumpfile), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute_copy(&comment)).into()
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDumpInformationFile(::core::mem::transmute_copy(&infofile), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndProcessServer(::core::mem::transmute_copy(&server)).into()
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WaitForProcessServerEnd(::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsKernelDebuggerEnabled().into()
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminateCurrentProcess().into()
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DetachCurrentProcess().into()
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AbandonCurrentProcess().into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableNameWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessDescriptionWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into()
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttachWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn OpenDumpFileWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenDumpFileWide(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle)).into()
        }
        unsafe extern "system" fn WriteDumpFileWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFileWide(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute_copy(&comment)).into()
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDumpInformationFileWide(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetNumberDumpFiles<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberDumpFiles() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFile<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDumpFile(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetDumpFileWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDumpFileWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn AttachKernelWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachKernelWide(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&connectoptions)).into()
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKernelConnectionOptionsWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into()
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKernelConnectionOptionsWide(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn StartProcessServerWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartProcessServerWide(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&reserved)).into()
        }
        unsafe extern "system" fn ConnectProcessServerWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServerWide(::core::mem::transmute_copy(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *server = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServerWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartServerWide(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OutputServersWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputServersWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&machine), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacksWide() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputCallbacksWide(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOutputLinePrefixWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into()
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputLinePrefixWide(::core::mem::transmute_copy(&prefix)).into()
        }
        unsafe extern "system" fn GetIdentityWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetIdentityWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into()
        }
        unsafe extern "system" fn OutputIdentityWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputIdentityWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn GetEventCallbacksWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacksWide() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacksWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventCallbacksWide(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn CreateProcess2<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcess2(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment)).into()
        }
        unsafe extern "system" fn CreateProcess2Wide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcess2Wide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach2(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach2Wide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn PushOutputLinePrefix<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefix(::core::mem::transmute_copy(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefixWide(::core::mem::transmute_copy(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PopOutputLinePrefix<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).PopOutputLinePrefix(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberInputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberOutputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberEventCallbacks(::core::mem::transmute_copy(&eventflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetQuitLockString<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetQuitLockString(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn SetQuitLockString<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetQuitLockString(::core::mem::transmute_copy(&string)).into()
        }
        unsafe extern "system" fn GetQuitLockStringWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetQuitLockStringWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn SetQuitLockStringWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetQuitLockStringWide(::core::mem::transmute_copy(&string)).into()
        }
        unsafe extern "system" fn SetEventContextCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventContextCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            AttachKernel: AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer: StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess: AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA: CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions: GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions: AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions: SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile: OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile: WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession: ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer: StartServer::<Impl, IMPL_OFFSET>,
            OutputServers: OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses: TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses: DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession: EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode: GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch: ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient: CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask: GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask: SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth: GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth: SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity: GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity: OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks: FlushCallbacks::<Impl, IMPL_OFFSET>,
            WriteDumpFile2: WriteDumpFile2::<Impl, IMPL_OFFSET>,
            AddDumpInformationFile: AddDumpInformationFile::<Impl, IMPL_OFFSET>,
            EndProcessServer: EndProcessServer::<Impl, IMPL_OFFSET>,
            WaitForProcessServerEnd: WaitForProcessServerEnd::<Impl, IMPL_OFFSET>,
            IsKernelDebuggerEnabled: IsKernelDebuggerEnabled::<Impl, IMPL_OFFSET>,
            TerminateCurrentProcess: TerminateCurrentProcess::<Impl, IMPL_OFFSET>,
            DetachCurrentProcess: DetachCurrentProcess::<Impl, IMPL_OFFSET>,
            AbandonCurrentProcess: AbandonCurrentProcess::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide: GetRunningProcessSystemIdByExecutableNameWide::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescriptionWide: GetRunningProcessDescriptionWide::<Impl, IMPL_OFFSET>,
            CreateProcessWide: CreateProcessWide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttachWide: CreateProcessAndAttachWide::<Impl, IMPL_OFFSET>,
            OpenDumpFileWide: OpenDumpFileWide::<Impl, IMPL_OFFSET>,
            WriteDumpFileWide: WriteDumpFileWide::<Impl, IMPL_OFFSET>,
            AddDumpInformationFileWide: AddDumpInformationFileWide::<Impl, IMPL_OFFSET>,
            GetNumberDumpFiles: GetNumberDumpFiles::<Impl, IMPL_OFFSET>,
            GetDumpFile: GetDumpFile::<Impl, IMPL_OFFSET>,
            GetDumpFileWide: GetDumpFileWide::<Impl, IMPL_OFFSET>,
            AttachKernelWide: AttachKernelWide::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptionsWide: GetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptionsWide: SetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            StartProcessServerWide: StartProcessServerWide::<Impl, IMPL_OFFSET>,
            ConnectProcessServerWide: ConnectProcessServerWide::<Impl, IMPL_OFFSET>,
            StartServerWide: StartServerWide::<Impl, IMPL_OFFSET>,
            OutputServersWide: OutputServersWide::<Impl, IMPL_OFFSET>,
            GetOutputCallbacksWide: GetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            SetOutputCallbacksWide: SetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefixWide: GetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefixWide: SetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            GetIdentityWide: GetIdentityWide::<Impl, IMPL_OFFSET>,
            OutputIdentityWide: OutputIdentityWide::<Impl, IMPL_OFFSET>,
            GetEventCallbacksWide: GetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            SetEventCallbacksWide: SetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            CreateProcess2: CreateProcess2::<Impl, IMPL_OFFSET>,
            CreateProcess2Wide: CreateProcess2Wide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2: CreateProcessAndAttach2::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2Wide: CreateProcessAndAttach2Wide::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefix: PushOutputLinePrefix::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefixWide: PushOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            PopOutputLinePrefix: PopOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetNumberInputCallbacks: GetNumberInputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberOutputCallbacks: GetNumberOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberEventCallbacks: GetNumberEventCallbacks::<Impl, IMPL_OFFSET>,
            GetQuitLockString: GetQuitLockString::<Impl, IMPL_OFFSET>,
            SetQuitLockString: SetQuitLockString::<Impl, IMPL_OFFSET>,
            GetQuitLockStringWide: GetQuitLockStringWide::<Impl, IMPL_OFFSET>,
            SetQuitLockStringWide: SetQuitLockStringWide::<Impl, IMPL_OFFSET>,
            SetEventContextCallbacks: SetEventContextCallbacks::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient6 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClient7Impl: Sized {
    fn AttachKernel(&mut self, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetKernelConnectionOptions(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::Result<()>;
    fn SetKernelConnectionOptions(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn StartProcessServer(&mut self, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::Result<()>;
    fn ConnectProcessServer(&mut self, remoteoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn DisconnectProcessServer(&mut self, server: u64) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIds(&mut self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(&mut self, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<u32>;
    fn GetRunningProcessDescription(&mut self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::Result<()>;
    fn AttachProcess(&mut self, server: u64, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessA(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn GetProcessOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn OpenDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn WriteDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::Result<()>;
    fn ConnectSession(&mut self, flags: u32, historylimit: u32) -> ::windows::core::Result<()>;
    fn StartServer(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputServers(&mut self, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn TerminateProcesses(&mut self) -> ::windows::core::Result<()>;
    fn DetachProcesses(&mut self) -> ::windows::core::Result<()>;
    fn EndSession(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetExitCode(&mut self) -> ::windows::core::Result<u32>;
    fn DispatchCallbacks(&mut self, timeout: u32) -> ::windows::core::Result<()>;
    fn ExitDispatch(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<()>;
    fn CreateClient(&mut self) -> ::windows::core::Result<IDebugClient>;
    fn GetInputCallbacks(&mut self) -> ::windows::core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugInputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputCallbacks(&mut self) -> ::windows::core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugOutputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputMask(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputMask(&mut self, mask: u32) -> ::windows::core::Result<()>;
    fn GetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<u32>;
    fn SetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>, mask: u32) -> ::windows::core::Result<()>;
    fn GetOutputWidth(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputWidth(&mut self, columns: u32) -> ::windows::core::Result<()>;
    fn GetOutputLinePrefix(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOutputLinePrefix(&mut self, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetIdentity(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputIdentity(&mut self, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetEventCallbacks(&mut self) -> ::windows::core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(&mut self, callbacks: ::core::option::Option<IDebugEventCallbacks>) -> ::windows::core::Result<()>;
    fn FlushCallbacks(&mut self) -> ::windows::core::Result<()>;
    fn WriteDumpFile2(&mut self, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AddDumpInformationFile(&mut self, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::Result<()>;
    fn EndProcessServer(&mut self, server: u64) -> ::windows::core::Result<()>;
    fn WaitForProcessServerEnd(&mut self, timeout: u32) -> ::windows::core::Result<()>;
    fn IsKernelDebuggerEnabled(&mut self) -> ::windows::core::Result<()>;
    fn TerminateCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn DetachCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn AbandonCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableNameWide(&mut self, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<u32>;
    fn GetRunningProcessDescriptionWide(&mut self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::Result<()>;
    fn CreateProcessWide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttachWide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn OpenDumpFileWide(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::Result<()>;
    fn WriteDumpFileWide(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AddDumpInformationFileWide(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::Result<()>;
    fn GetNumberDumpFiles(&mut self) -> ::windows::core::Result<u32>;
    fn GetDumpFile(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::Result<()>;
    fn GetDumpFileWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::Result<()>;
    fn AttachKernelWide(&mut self, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetKernelConnectionOptionsWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::Result<()>;
    fn SetKernelConnectionOptionsWide(&mut self, options: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn StartProcessServerWide(&mut self, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::Result<()>;
    fn ConnectProcessServerWide(&mut self, remoteoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn StartServerWide(&mut self, options: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputServersWide(&mut self, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetOutputCallbacksWide(&mut self) -> ::windows::core::Result<IDebugOutputCallbacksWide>;
    fn SetOutputCallbacksWide(&mut self, callbacks: ::core::option::Option<IDebugOutputCallbacksWide>) -> ::windows::core::Result<()>;
    fn GetOutputLinePrefixWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOutputLinePrefixWide(&mut self, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetIdentityWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputIdentityWide(&mut self, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetEventCallbacksWide(&mut self) -> ::windows::core::Result<IDebugEventCallbacksWide>;
    fn SetEventCallbacksWide(&mut self, callbacks: ::core::option::Option<IDebugEventCallbacksWide>) -> ::windows::core::Result<()>;
    fn CreateProcess2(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn CreateProcess2Wide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach2(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach2Wide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn PushOutputLinePrefix(&mut self, newprefix: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn PushOutputLinePrefixWide(&mut self, newprefix: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn PopOutputLinePrefix(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn GetNumberInputCallbacks(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberOutputCallbacks(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberEventCallbacks(&mut self, eventflags: u32) -> ::windows::core::Result<u32>;
    fn GetQuitLockString(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetQuitLockString(&mut self, string: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetQuitLockStringWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetQuitLockStringWide(&mut self, string: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn SetEventContextCallbacks(&mut self, callbacks: ::core::option::Option<IDebugEventContextCallbacks>) -> ::windows::core::Result<()>;
    fn SetClientContext(&mut self, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClient7Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClient7Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClient7Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachKernel(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&connectoptions)).into()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKernelConnectionOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartProcessServer(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&reserved)).into()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(::core::mem::transmute_copy(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *server = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DisconnectProcessServer(::core::mem::transmute_copy(&server)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessSystemIds(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessDescription(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachProcess(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessA(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenDumpFile(::core::mem::transmute_copy(&dumpfile)).into()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFile(::core::mem::transmute_copy(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ConnectSession(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartServer(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputServers(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&machine), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminateProcesses().into()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DetachProcesses().into()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndSession(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExitCode() {
                ::core::result::Result::Ok(ok__) => {
                    *code = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DispatchCallbacks(::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExitDispatch(::core::mem::transmute(&client)).into()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateClient() {
                ::core::result::Result::Ok(ok__) => {
                    *client = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputMask(::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(::core::mem::transmute(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOtherOutputMask(::core::mem::transmute(&client), ::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth() {
                ::core::result::Result::Ok(ok__) => {
                    *columns = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputWidth(::core::mem::transmute_copy(&columns)).into()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputLinePrefix(::core::mem::transmute_copy(&prefix)).into()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetIdentity(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputIdentity(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FlushCallbacks().into()
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFile2(::core::mem::transmute_copy(&dumpfile), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute_copy(&comment)).into()
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDumpInformationFile(::core::mem::transmute_copy(&infofile), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndProcessServer(::core::mem::transmute_copy(&server)).into()
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WaitForProcessServerEnd(::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsKernelDebuggerEnabled().into()
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminateCurrentProcess().into()
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DetachCurrentProcess().into()
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AbandonCurrentProcess().into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableNameWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessDescriptionWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into()
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttachWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn OpenDumpFileWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenDumpFileWide(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle)).into()
        }
        unsafe extern "system" fn WriteDumpFileWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFileWide(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute_copy(&comment)).into()
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDumpInformationFileWide(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetNumberDumpFiles<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberDumpFiles() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFile<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDumpFile(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetDumpFileWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDumpFileWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn AttachKernelWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachKernelWide(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&connectoptions)).into()
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKernelConnectionOptionsWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into()
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKernelConnectionOptionsWide(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn StartProcessServerWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartProcessServerWide(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&reserved)).into()
        }
        unsafe extern "system" fn ConnectProcessServerWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServerWide(::core::mem::transmute_copy(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *server = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServerWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartServerWide(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OutputServersWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputServersWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&machine), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacksWide() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputCallbacksWide(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOutputLinePrefixWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into()
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputLinePrefixWide(::core::mem::transmute_copy(&prefix)).into()
        }
        unsafe extern "system" fn GetIdentityWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetIdentityWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into()
        }
        unsafe extern "system" fn OutputIdentityWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputIdentityWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn GetEventCallbacksWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacksWide() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacksWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventCallbacksWide(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn CreateProcess2<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcess2(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment)).into()
        }
        unsafe extern "system" fn CreateProcess2Wide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcess2Wide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach2(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach2Wide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn PushOutputLinePrefix<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefix(::core::mem::transmute_copy(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefixWide(::core::mem::transmute_copy(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PopOutputLinePrefix<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).PopOutputLinePrefix(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberInputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberOutputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberEventCallbacks(::core::mem::transmute_copy(&eventflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetQuitLockString<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetQuitLockString(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn SetQuitLockString<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetQuitLockString(::core::mem::transmute_copy(&string)).into()
        }
        unsafe extern "system" fn GetQuitLockStringWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetQuitLockStringWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn SetQuitLockStringWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetQuitLockStringWide(::core::mem::transmute_copy(&string)).into()
        }
        unsafe extern "system" fn SetEventContextCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventContextCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn SetClientContext<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetClientContext(::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            AttachKernel: AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer: StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess: AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA: CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions: GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions: AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions: SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile: OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile: WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession: ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer: StartServer::<Impl, IMPL_OFFSET>,
            OutputServers: OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses: TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses: DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession: EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode: GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch: ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient: CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask: GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask: SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth: GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth: SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity: GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity: OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks: FlushCallbacks::<Impl, IMPL_OFFSET>,
            WriteDumpFile2: WriteDumpFile2::<Impl, IMPL_OFFSET>,
            AddDumpInformationFile: AddDumpInformationFile::<Impl, IMPL_OFFSET>,
            EndProcessServer: EndProcessServer::<Impl, IMPL_OFFSET>,
            WaitForProcessServerEnd: WaitForProcessServerEnd::<Impl, IMPL_OFFSET>,
            IsKernelDebuggerEnabled: IsKernelDebuggerEnabled::<Impl, IMPL_OFFSET>,
            TerminateCurrentProcess: TerminateCurrentProcess::<Impl, IMPL_OFFSET>,
            DetachCurrentProcess: DetachCurrentProcess::<Impl, IMPL_OFFSET>,
            AbandonCurrentProcess: AbandonCurrentProcess::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide: GetRunningProcessSystemIdByExecutableNameWide::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescriptionWide: GetRunningProcessDescriptionWide::<Impl, IMPL_OFFSET>,
            CreateProcessWide: CreateProcessWide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttachWide: CreateProcessAndAttachWide::<Impl, IMPL_OFFSET>,
            OpenDumpFileWide: OpenDumpFileWide::<Impl, IMPL_OFFSET>,
            WriteDumpFileWide: WriteDumpFileWide::<Impl, IMPL_OFFSET>,
            AddDumpInformationFileWide: AddDumpInformationFileWide::<Impl, IMPL_OFFSET>,
            GetNumberDumpFiles: GetNumberDumpFiles::<Impl, IMPL_OFFSET>,
            GetDumpFile: GetDumpFile::<Impl, IMPL_OFFSET>,
            GetDumpFileWide: GetDumpFileWide::<Impl, IMPL_OFFSET>,
            AttachKernelWide: AttachKernelWide::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptionsWide: GetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptionsWide: SetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            StartProcessServerWide: StartProcessServerWide::<Impl, IMPL_OFFSET>,
            ConnectProcessServerWide: ConnectProcessServerWide::<Impl, IMPL_OFFSET>,
            StartServerWide: StartServerWide::<Impl, IMPL_OFFSET>,
            OutputServersWide: OutputServersWide::<Impl, IMPL_OFFSET>,
            GetOutputCallbacksWide: GetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            SetOutputCallbacksWide: SetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefixWide: GetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefixWide: SetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            GetIdentityWide: GetIdentityWide::<Impl, IMPL_OFFSET>,
            OutputIdentityWide: OutputIdentityWide::<Impl, IMPL_OFFSET>,
            GetEventCallbacksWide: GetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            SetEventCallbacksWide: SetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            CreateProcess2: CreateProcess2::<Impl, IMPL_OFFSET>,
            CreateProcess2Wide: CreateProcess2Wide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2: CreateProcessAndAttach2::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2Wide: CreateProcessAndAttach2Wide::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefix: PushOutputLinePrefix::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefixWide: PushOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            PopOutputLinePrefix: PopOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetNumberInputCallbacks: GetNumberInputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberOutputCallbacks: GetNumberOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberEventCallbacks: GetNumberEventCallbacks::<Impl, IMPL_OFFSET>,
            GetQuitLockString: GetQuitLockString::<Impl, IMPL_OFFSET>,
            SetQuitLockString: SetQuitLockString::<Impl, IMPL_OFFSET>,
            GetQuitLockStringWide: GetQuitLockStringWide::<Impl, IMPL_OFFSET>,
            SetQuitLockStringWide: SetQuitLockStringWide::<Impl, IMPL_OFFSET>,
            SetEventContextCallbacks: SetEventContextCallbacks::<Impl, IMPL_OFFSET>,
            SetClientContext: SetClientContext::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient7 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClient8Impl: Sized {
    fn AttachKernel(&mut self, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetKernelConnectionOptions(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::Result<()>;
    fn SetKernelConnectionOptions(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn StartProcessServer(&mut self, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::Result<()>;
    fn ConnectProcessServer(&mut self, remoteoptions: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn DisconnectProcessServer(&mut self, server: u64) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIds(&mut self, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(&mut self, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<u32>;
    fn GetRunningProcessDescription(&mut self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::Result<()>;
    fn AttachProcess(&mut self, server: u64, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessA(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn GetProcessOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetProcessOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn OpenDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn WriteDumpFile(&mut self, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::Result<()>;
    fn ConnectSession(&mut self, flags: u32, historylimit: u32) -> ::windows::core::Result<()>;
    fn StartServer(&mut self, options: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputServers(&mut self, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn TerminateProcesses(&mut self) -> ::windows::core::Result<()>;
    fn DetachProcesses(&mut self) -> ::windows::core::Result<()>;
    fn EndSession(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetExitCode(&mut self) -> ::windows::core::Result<u32>;
    fn DispatchCallbacks(&mut self, timeout: u32) -> ::windows::core::Result<()>;
    fn ExitDispatch(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<()>;
    fn CreateClient(&mut self) -> ::windows::core::Result<IDebugClient>;
    fn GetInputCallbacks(&mut self) -> ::windows::core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugInputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputCallbacks(&mut self) -> ::windows::core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(&mut self, callbacks: ::core::option::Option<IDebugOutputCallbacks>) -> ::windows::core::Result<()>;
    fn GetOutputMask(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputMask(&mut self, mask: u32) -> ::windows::core::Result<()>;
    fn GetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>) -> ::windows::core::Result<u32>;
    fn SetOtherOutputMask(&mut self, client: ::core::option::Option<IDebugClient>, mask: u32) -> ::windows::core::Result<()>;
    fn GetOutputWidth(&mut self) -> ::windows::core::Result<u32>;
    fn SetOutputWidth(&mut self, columns: u32) -> ::windows::core::Result<()>;
    fn GetOutputLinePrefix(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOutputLinePrefix(&mut self, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetIdentity(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputIdentity(&mut self, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetEventCallbacks(&mut self) -> ::windows::core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(&mut self, callbacks: ::core::option::Option<IDebugEventCallbacks>) -> ::windows::core::Result<()>;
    fn FlushCallbacks(&mut self) -> ::windows::core::Result<()>;
    fn WriteDumpFile2(&mut self, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AddDumpInformationFile(&mut self, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::Result<()>;
    fn EndProcessServer(&mut self, server: u64) -> ::windows::core::Result<()>;
    fn WaitForProcessServerEnd(&mut self, timeout: u32) -> ::windows::core::Result<()>;
    fn IsKernelDebuggerEnabled(&mut self) -> ::windows::core::Result<()>;
    fn TerminateCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn DetachCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn AbandonCurrentProcess(&mut self) -> ::windows::core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableNameWide(&mut self, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<u32>;
    fn GetRunningProcessDescriptionWide(&mut self, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::Result<()>;
    fn CreateProcessWide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttachWide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn OpenDumpFileWide(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::Result<()>;
    fn WriteDumpFileWide(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AddDumpInformationFileWide(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::Result<()>;
    fn GetNumberDumpFiles(&mut self) -> ::windows::core::Result<u32>;
    fn GetDumpFile(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::Result<()>;
    fn GetDumpFileWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::Result<()>;
    fn AttachKernelWide(&mut self, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetKernelConnectionOptionsWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::Result<()>;
    fn SetKernelConnectionOptionsWide(&mut self, options: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn StartProcessServerWide(&mut self, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::Result<()>;
    fn ConnectProcessServerWide(&mut self, remoteoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn StartServerWide(&mut self, options: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputServersWide(&mut self, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetOutputCallbacksWide(&mut self) -> ::windows::core::Result<IDebugOutputCallbacksWide>;
    fn SetOutputCallbacksWide(&mut self, callbacks: ::core::option::Option<IDebugOutputCallbacksWide>) -> ::windows::core::Result<()>;
    fn GetOutputLinePrefixWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetOutputLinePrefixWide(&mut self, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetIdentityWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputIdentityWide(&mut self, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetEventCallbacksWide(&mut self) -> ::windows::core::Result<IDebugEventCallbacksWide>;
    fn SetEventCallbacksWide(&mut self, callbacks: ::core::option::Option<IDebugEventCallbacksWide>) -> ::windows::core::Result<()>;
    fn CreateProcess2(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn CreateProcess2Wide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach2(&mut self, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn CreateProcessAndAttach2Wide(&mut self, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::Result<()>;
    fn PushOutputLinePrefix(&mut self, newprefix: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn PushOutputLinePrefixWide(&mut self, newprefix: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn PopOutputLinePrefix(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn GetNumberInputCallbacks(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberOutputCallbacks(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberEventCallbacks(&mut self, eventflags: u32) -> ::windows::core::Result<u32>;
    fn GetQuitLockString(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetQuitLockString(&mut self, string: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetQuitLockStringWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetQuitLockStringWide(&mut self, string: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn SetEventContextCallbacks(&mut self, callbacks: ::core::option::Option<IDebugEventContextCallbacks>) -> ::windows::core::Result<()>;
    fn SetClientContext(&mut self, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn OpenDumpFileWide2(&mut self, filename: super::super::super::Foundation::PWSTR, filehandle: u64, alternatearch: u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClient8Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClient8Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClient8Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachKernel(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&connectoptions)).into()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKernelConnectionOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartProcessServer(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&reserved)).into()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(::core::mem::transmute_copy(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *server = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DisconnectProcessServer(::core::mem::transmute_copy(&server)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessSystemIds(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessDescription(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachProcess(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessA(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetProcessOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenDumpFile(::core::mem::transmute_copy(&dumpfile)).into()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFile(::core::mem::transmute_copy(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ConnectSession(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartServer(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputServers(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&machine), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminateProcesses().into()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DetachProcesses().into()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndSession(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExitCode() {
                ::core::result::Result::Ok(ok__) => {
                    *code = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DispatchCallbacks(::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExitDispatch(::core::mem::transmute(&client)).into()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateClient() {
                ::core::result::Result::Ok(ok__) => {
                    *client = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputMask(::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(::core::mem::transmute(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOtherOutputMask(::core::mem::transmute(&client), ::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth() {
                ::core::result::Result::Ok(ok__) => {
                    *columns = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputWidth(::core::mem::transmute_copy(&columns)).into()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputLinePrefix(::core::mem::transmute_copy(&prefix)).into()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetIdentity(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputIdentity(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FlushCallbacks().into()
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFile2(::core::mem::transmute_copy(&dumpfile), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute_copy(&comment)).into()
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDumpInformationFile(::core::mem::transmute_copy(&infofile), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndProcessServer(::core::mem::transmute_copy(&server)).into()
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WaitForProcessServerEnd(::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsKernelDebuggerEnabled().into()
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminateCurrentProcess().into()
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DetachCurrentProcess().into()
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AbandonCurrentProcess().into()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableNameWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRunningProcessDescriptionWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into()
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttachWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn OpenDumpFileWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenDumpFileWide(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle)).into()
        }
        unsafe extern "system" fn WriteDumpFileWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteDumpFileWide(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute_copy(&comment)).into()
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDumpInformationFileWide(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetNumberDumpFiles<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberDumpFiles() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFile<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDumpFile(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetDumpFileWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDumpFileWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn AttachKernelWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AttachKernelWide(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&connectoptions)).into()
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKernelConnectionOptionsWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into()
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKernelConnectionOptionsWide(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn StartProcessServerWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartProcessServerWide(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&reserved)).into()
        }
        unsafe extern "system" fn ConnectProcessServerWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServerWide(::core::mem::transmute_copy(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *server = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServerWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartServerWide(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn OutputServersWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputServersWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&machine), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacksWide() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputCallbacksWide(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOutputLinePrefixWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into()
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetOutputLinePrefixWide(::core::mem::transmute_copy(&prefix)).into()
        }
        unsafe extern "system" fn GetIdentityWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetIdentityWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into()
        }
        unsafe extern "system" fn OutputIdentityWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputIdentityWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn GetEventCallbacksWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacksWide() {
                ::core::result::Result::Ok(ok__) => {
                    *callbacks = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacksWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventCallbacksWide(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn CreateProcess2<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcess2(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment)).into()
        }
        unsafe extern "system" fn CreateProcess2Wide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcess2Wide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach2(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateProcessAndAttach2Wide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute_copy(&initialdirectory), ::core::mem::transmute_copy(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into()
        }
        unsafe extern "system" fn PushOutputLinePrefix<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefix(::core::mem::transmute_copy(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefixWide(::core::mem::transmute_copy(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PopOutputLinePrefix<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).PopOutputLinePrefix(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberInputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberOutputCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberEventCallbacks(::core::mem::transmute_copy(&eventflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetQuitLockString<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetQuitLockString(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn SetQuitLockString<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetQuitLockString(::core::mem::transmute_copy(&string)).into()
        }
        unsafe extern "system" fn GetQuitLockStringWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetQuitLockStringWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn SetQuitLockStringWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetQuitLockStringWide(::core::mem::transmute_copy(&string)).into()
        }
        unsafe extern "system" fn SetEventContextCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventContextCallbacks(::core::mem::transmute(&callbacks)).into()
        }
        unsafe extern "system" fn SetClientContext<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetClientContext(::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn OpenDumpFileWide2<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, alternatearch: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenDumpFileWide2(::core::mem::transmute_copy(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&alternatearch)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            AttachKernel: AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer: StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess: AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA: CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions: GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions: AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions: SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile: OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile: WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession: ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer: StartServer::<Impl, IMPL_OFFSET>,
            OutputServers: OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses: TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses: DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession: EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode: GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch: ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient: CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask: GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask: SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth: GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth: SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity: GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity: OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks: FlushCallbacks::<Impl, IMPL_OFFSET>,
            WriteDumpFile2: WriteDumpFile2::<Impl, IMPL_OFFSET>,
            AddDumpInformationFile: AddDumpInformationFile::<Impl, IMPL_OFFSET>,
            EndProcessServer: EndProcessServer::<Impl, IMPL_OFFSET>,
            WaitForProcessServerEnd: WaitForProcessServerEnd::<Impl, IMPL_OFFSET>,
            IsKernelDebuggerEnabled: IsKernelDebuggerEnabled::<Impl, IMPL_OFFSET>,
            TerminateCurrentProcess: TerminateCurrentProcess::<Impl, IMPL_OFFSET>,
            DetachCurrentProcess: DetachCurrentProcess::<Impl, IMPL_OFFSET>,
            AbandonCurrentProcess: AbandonCurrentProcess::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide: GetRunningProcessSystemIdByExecutableNameWide::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescriptionWide: GetRunningProcessDescriptionWide::<Impl, IMPL_OFFSET>,
            CreateProcessWide: CreateProcessWide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttachWide: CreateProcessAndAttachWide::<Impl, IMPL_OFFSET>,
            OpenDumpFileWide: OpenDumpFileWide::<Impl, IMPL_OFFSET>,
            WriteDumpFileWide: WriteDumpFileWide::<Impl, IMPL_OFFSET>,
            AddDumpInformationFileWide: AddDumpInformationFileWide::<Impl, IMPL_OFFSET>,
            GetNumberDumpFiles: GetNumberDumpFiles::<Impl, IMPL_OFFSET>,
            GetDumpFile: GetDumpFile::<Impl, IMPL_OFFSET>,
            GetDumpFileWide: GetDumpFileWide::<Impl, IMPL_OFFSET>,
            AttachKernelWide: AttachKernelWide::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptionsWide: GetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptionsWide: SetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            StartProcessServerWide: StartProcessServerWide::<Impl, IMPL_OFFSET>,
            ConnectProcessServerWide: ConnectProcessServerWide::<Impl, IMPL_OFFSET>,
            StartServerWide: StartServerWide::<Impl, IMPL_OFFSET>,
            OutputServersWide: OutputServersWide::<Impl, IMPL_OFFSET>,
            GetOutputCallbacksWide: GetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            SetOutputCallbacksWide: SetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefixWide: GetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefixWide: SetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            GetIdentityWide: GetIdentityWide::<Impl, IMPL_OFFSET>,
            OutputIdentityWide: OutputIdentityWide::<Impl, IMPL_OFFSET>,
            GetEventCallbacksWide: GetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            SetEventCallbacksWide: SetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            CreateProcess2: CreateProcess2::<Impl, IMPL_OFFSET>,
            CreateProcess2Wide: CreateProcess2Wide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2: CreateProcessAndAttach2::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2Wide: CreateProcessAndAttach2Wide::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefix: PushOutputLinePrefix::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefixWide: PushOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            PopOutputLinePrefix: PopOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetNumberInputCallbacks: GetNumberInputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberOutputCallbacks: GetNumberOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberEventCallbacks: GetNumberEventCallbacks::<Impl, IMPL_OFFSET>,
            GetQuitLockString: GetQuitLockString::<Impl, IMPL_OFFSET>,
            SetQuitLockString: SetQuitLockString::<Impl, IMPL_OFFSET>,
            GetQuitLockStringWide: GetQuitLockStringWide::<Impl, IMPL_OFFSET>,
            SetQuitLockStringWide: SetQuitLockStringWide::<Impl, IMPL_OFFSET>,
            SetEventContextCallbacks: SetEventContextCallbacks::<Impl, IMPL_OFFSET>,
            SetClientContext: SetClientContext::<Impl, IMPL_OFFSET>,
            OpenDumpFileWide2: OpenDumpFileWide2::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient8 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugCodeContextImpl: Sized {
    fn GetDocumentContext(&mut self) -> ::windows::core::Result<IDebugDocumentContext>;
    fn SetBreakPoint(&mut self, bps: BREAKPOINT_STATE) -> ::windows::core::Result<()>;
}
impl IDebugCodeContextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugCodeContextImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugCodeContextVtbl {
        unsafe extern "system" fn GetDocumentContext<Impl: IDebugCodeContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDocumentContext() {
                ::core::result::Result::Ok(ok__) => {
                    *ppsc = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBreakPoint<Impl: IDebugCodeContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bps: BREAKPOINT_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetBreakPoint(::core::mem::transmute_copy(&bps)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetDocumentContext: GetDocumentContext::<Impl, IMPL_OFFSET>,
            SetBreakPoint: SetBreakPoint::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugCodeContext as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControlImpl: Sized {
    fn GetInterrupt(&mut self) -> ::windows::core::Result<()>;
    fn SetInterrupt(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetInterruptTimeout(&mut self) -> ::windows::core::Result<u32>;
    fn SetInterruptTimeout(&mut self, seconds: u32) -> ::windows::core::Result<()>;
    fn GetLogFile(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn OpenLogFile(&mut self, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn CloseLogFile(&mut self) -> ::windows::core::Result<()>;
    fn GetLogMask(&mut self) -> ::windows::core::Result<u32>;
    fn SetLogMask(&mut self, mask: u32) -> ::windows::core::Result<()>;
    fn Input(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::Result<()>;
    fn ReturnInput(&mut self, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn Output(&mut self, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputVaList(&mut self, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn ControlledOutput(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn ControlledOutputVaList(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn OutputPrompt(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputPromptVaList(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn GetPromptText(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputCurrentState(&mut self, outputcontrol: u32, flags: u32) -> ::windows::core::Result<()>;
    fn OutputVersionInformation(&mut self, outputcontrol: u32) -> ::windows::core::Result<()>;
    fn GetNotifyEventHandle(&mut self) -> ::windows::core::Result<u64>;
    fn SetNotifyEventHandle(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn Assemble(&mut self, offset: u64, instr: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn Disassemble(&mut self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::Result<()>;
    fn GetDisassembleEffectiveOffset(&mut self) -> ::windows::core::Result<u64>;
    fn OutputDisassembly(&mut self, outputcontrol: u32, offset: u64, flags: u32) -> ::windows::core::Result<u64>;
    fn OutputDisassemblyLines(&mut self, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::Result<()>;
    fn GetNearInstruction(&mut self, offset: u64, delta: i32) -> ::windows::core::Result<u64>;
    fn GetStackTrace(&mut self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn GetReturnOffset(&mut self) -> ::windows::core::Result<u64>;
    fn OutputStackTrace(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetDebuggeeType(&mut self, class: *mut u32, qualifier: *mut u32) -> ::windows::core::Result<()>;
    fn GetActualProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn GetExecutingProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberPossibleExecutingProcessorTypes(&mut self) -> ::windows::core::Result<u32>;
    fn GetPossibleExecutingProcessorTypes(&mut self, start: u32, count: u32, types: *mut u32) -> ::windows::core::Result<()>;
    fn GetNumberProcessors(&mut self) -> ::windows::core::Result<u32>;
    fn GetSystemVersion(&mut self, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::Result<()>;
    fn GetPageSize(&mut self) -> ::windows::core::Result<u32>;
    fn IsPointer64Bit(&mut self) -> ::windows::core::Result<()>;
    fn ReadBugCheckData(&mut self, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::Result<()>;
    fn GetNumberSupportedProcessorTypes(&mut self) -> ::windows::core::Result<u32>;
    fn GetSupportedProcessorTypes(&mut self, start: u32, count: u32, types: *mut u32) -> ::windows::core::Result<()>;
    fn GetProcessorTypeNames(&mut self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEffectiveProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn SetEffectiveProcessorType(&mut self, r#type: u32) -> ::windows::core::Result<()>;
    fn GetExecutionStatus(&mut self) -> ::windows::core::Result<u32>;
    fn SetExecutionStatus(&mut self, status: u32) -> ::windows::core::Result<()>;
    fn GetCodeLevel(&mut self) -> ::windows::core::Result<u32>;
    fn SetCodeLevel(&mut self, level: u32) -> ::windows::core::Result<()>;
    fn GetEngineOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetSystemErrorControl(&mut self, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::Result<()>;
    fn SetSystemErrorControl(&mut self, outputlevel: u32, breaklevel: u32) -> ::windows::core::Result<()>;
    fn GetTextMacro(&mut self, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextMacro(&mut self, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetRadix(&mut self) -> ::windows::core::Result<u32>;
    fn SetRadix(&mut self, radix: u32) -> ::windows::core::Result<()>;
    fn Evaluate(&mut self, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::Result<()>;
    fn CoerceValue(&mut self, r#in: *const DEBUG_VALUE, outtype: u32) -> ::windows::core::Result<DEBUG_VALUE>;
    fn CoerceValues(&mut self, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn Execute(&mut self, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn ExecuteCommandFile(&mut self, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetNumberBreakpoints(&mut self) -> ::windows::core::Result<u32>;
    fn GetBreakpointByIndex(&mut self, index: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn GetBreakpointById(&mut self, id: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn GetBreakpointParameters(&mut self, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::Result<()>;
    fn AddBreakpoint(&mut self, r#type: u32, desiredid: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn RemoveBreakpoint(&mut self, bp: ::core::option::Option<IDebugBreakpoint>) -> ::windows::core::Result<()>;
    fn AddExtension(&mut self, path: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<u64>;
    fn RemoveExtension(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn GetExtensionByPath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn CallExtension(&mut self, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetExtensionFunction(&mut self, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut super::super::super::Foundation::FARPROC) -> ::windows::core::Result<()>;
    fn GetWindbgExtensionApis32(&mut self, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::Result<()>;
    fn GetWindbgExtensionApis64(&mut self, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::Result<()>;
    fn GetNumberEventFilters(&mut self, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterText(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterCommand(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetEventFilterCommand(&mut self, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSpecificFilterParameters(&mut self, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn SetSpecificFilterParameters(&mut self, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetSpecificFilterArgument(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSpecificFilterArgument(&mut self, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetExceptionFilterParameters(&mut self, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn SetExceptionFilterParameters(&mut self, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetExceptionFilterSecondCommand(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetExceptionFilterSecondCommand(&mut self, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn WaitForEvent(&mut self, flags: u32, timeout: u32) -> ::windows::core::Result<()>;
    fn GetLastEventInformation(&mut self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl IDebugControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugControlVtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetInterrupt().into()
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInterrupt(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInterruptTimeout() {
                ::core::result::Result::Ok(ok__) => {
                    *seconds = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInterruptTimeout(::core::mem::transmute_copy(&seconds)).into()
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFile(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFile(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CloseLogFile().into()
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLogMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetLogMask(::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn Input<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Input(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into()
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReturnInput(::core::mem::transmute_copy(&buffer)).into()
        }
        unsafe extern "system" fn Output<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Output(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVaList(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutput(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutputVaList(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPrompt(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPromptVaList(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPromptText(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputCurrentState(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVersionInformation(::core::mem::transmute_copy(&outputcontrol)).into()
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNotifyEventHandle() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetNotifyEventHandle(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Assemble(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Disassemble(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into()
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDisassembleEffectiveOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OutputDisassembly(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputDisassemblyLines(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&previouslines), ::core::mem::transmute_copy(&totallines), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)).into()
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNearInstruction(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta)) {
                ::core::result::Result::Ok(ok__) => {
                    *nearoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStackTrace(::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetReturnOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputStackTrace(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDebuggeeType(::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into()
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetActualProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutingProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberPossibleExecutingProcessorTypes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPossibleExecutingProcessorTypes(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into()
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberProcessors() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .GetSystemVersion(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), ::core::mem::transmute_copy(&servicepackstringsize), ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), ::core::mem::transmute_copy(&buildstringsize), ::core::mem::transmute_copy(&buildstringused))
                .into()
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPageSize() {
                ::core::result::Result::Ok(ok__) => {
                    *size = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsPointer64Bit().into()
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadBugCheckData(::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)).into()
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberSupportedProcessorTypes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSupportedProcessorTypes(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into()
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetProcessorTypeNames(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEffectiveProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEffectiveProcessorType(::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatus() {
                ::core::result::Result::Ok(ok__) => {
                    *status = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExecutionStatus(::core::mem::transmute_copy(&status)).into()
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCodeLevel() {
                ::core::result::Result::Ok(ok__) => {
                    *level = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCodeLevel(::core::mem::transmute_copy(&level)).into()
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEngineOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into()
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into()
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextMacro(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into()
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextMacro(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&r#macro)).into()
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRadix() {
                ::core::result::Result::Ok(ok__) => {
                    *radix = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetRadix(::core::mem::transmute_copy(&radix)).into()
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Evaluate(::core::mem::transmute_copy(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into()
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CoerceValue(::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtype)) {
                ::core::result::Result::Ok(ok__) => {
                    *out = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CoerceValues(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtypes), ::core::mem::transmute_copy(&out)).into()
        }
        unsafe extern "system" fn Execute<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Execute(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&command), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExecuteCommandFile(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&commandfile), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberBreakpoints() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetBreakpointParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveBreakpoint(::core::mem::transmute(&bp)).into()
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddExtension(::core::mem::transmute_copy(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveExtension(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPath(::core::mem::transmute_copy(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CallExtension(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&function), ::core::mem::transmute_copy(&arguments)).into()
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExtensionFunction(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&funcname), ::core::mem::transmute_copy(&function)).into()
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetWindbgExtensionApis32(::core::mem::transmute_copy(&api)).into()
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetWindbgExtensionApis64(::core::mem::transmute_copy(&api)).into()
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNumberEventFilters(::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)).into()
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterText(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventFilterCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterArgument(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into()
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterArgument(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&argument)).into()
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&codes), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterSecondCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterSecondCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WaitForEvent(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLastEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetInterrupt: GetInterrupt::<Impl, IMPL_OFFSET>,
            SetInterrupt: SetInterrupt::<Impl, IMPL_OFFSET>,
            GetInterruptTimeout: GetInterruptTimeout::<Impl, IMPL_OFFSET>,
            SetInterruptTimeout: SetInterruptTimeout::<Impl, IMPL_OFFSET>,
            GetLogFile: GetLogFile::<Impl, IMPL_OFFSET>,
            OpenLogFile: OpenLogFile::<Impl, IMPL_OFFSET>,
            CloseLogFile: CloseLogFile::<Impl, IMPL_OFFSET>,
            GetLogMask: GetLogMask::<Impl, IMPL_OFFSET>,
            SetLogMask: SetLogMask::<Impl, IMPL_OFFSET>,
            Input: Input::<Impl, IMPL_OFFSET>,
            ReturnInput: ReturnInput::<Impl, IMPL_OFFSET>,
            Output: Output::<Impl, IMPL_OFFSET>,
            OutputVaList: OutputVaList::<Impl, IMPL_OFFSET>,
            ControlledOutput: ControlledOutput::<Impl, IMPL_OFFSET>,
            ControlledOutputVaList: ControlledOutputVaList::<Impl, IMPL_OFFSET>,
            OutputPrompt: OutputPrompt::<Impl, IMPL_OFFSET>,
            OutputPromptVaList: OutputPromptVaList::<Impl, IMPL_OFFSET>,
            GetPromptText: GetPromptText::<Impl, IMPL_OFFSET>,
            OutputCurrentState: OutputCurrentState::<Impl, IMPL_OFFSET>,
            OutputVersionInformation: OutputVersionInformation::<Impl, IMPL_OFFSET>,
            GetNotifyEventHandle: GetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            SetNotifyEventHandle: SetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            Assemble: Assemble::<Impl, IMPL_OFFSET>,
            Disassemble: Disassemble::<Impl, IMPL_OFFSET>,
            GetDisassembleEffectiveOffset: GetDisassembleEffectiveOffset::<Impl, IMPL_OFFSET>,
            OutputDisassembly: OutputDisassembly::<Impl, IMPL_OFFSET>,
            OutputDisassemblyLines: OutputDisassemblyLines::<Impl, IMPL_OFFSET>,
            GetNearInstruction: GetNearInstruction::<Impl, IMPL_OFFSET>,
            GetStackTrace: GetStackTrace::<Impl, IMPL_OFFSET>,
            GetReturnOffset: GetReturnOffset::<Impl, IMPL_OFFSET>,
            OutputStackTrace: OutputStackTrace::<Impl, IMPL_OFFSET>,
            GetDebuggeeType: GetDebuggeeType::<Impl, IMPL_OFFSET>,
            GetActualProcessorType: GetActualProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutingProcessorType: GetExecutingProcessorType::<Impl, IMPL_OFFSET>,
            GetNumberPossibleExecutingProcessorTypes: GetNumberPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetPossibleExecutingProcessorTypes: GetPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetNumberProcessors: GetNumberProcessors::<Impl, IMPL_OFFSET>,
            GetSystemVersion: GetSystemVersion::<Impl, IMPL_OFFSET>,
            GetPageSize: GetPageSize::<Impl, IMPL_OFFSET>,
            IsPointer64Bit: IsPointer64Bit::<Impl, IMPL_OFFSET>,
            ReadBugCheckData: ReadBugCheckData::<Impl, IMPL_OFFSET>,
            GetNumberSupportedProcessorTypes: GetNumberSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetSupportedProcessorTypes: GetSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNames: GetProcessorTypeNames::<Impl, IMPL_OFFSET>,
            GetEffectiveProcessorType: GetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            SetEffectiveProcessorType: SetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutionStatus: GetExecutionStatus::<Impl, IMPL_OFFSET>,
            SetExecutionStatus: SetExecutionStatus::<Impl, IMPL_OFFSET>,
            GetCodeLevel: GetCodeLevel::<Impl, IMPL_OFFSET>,
            SetCodeLevel: SetCodeLevel::<Impl, IMPL_OFFSET>,
            GetEngineOptions: GetEngineOptions::<Impl, IMPL_OFFSET>,
            AddEngineOptions: AddEngineOptions::<Impl, IMPL_OFFSET>,
            RemoveEngineOptions: RemoveEngineOptions::<Impl, IMPL_OFFSET>,
            SetEngineOptions: SetEngineOptions::<Impl, IMPL_OFFSET>,
            GetSystemErrorControl: GetSystemErrorControl::<Impl, IMPL_OFFSET>,
            SetSystemErrorControl: SetSystemErrorControl::<Impl, IMPL_OFFSET>,
            GetTextMacro: GetTextMacro::<Impl, IMPL_OFFSET>,
            SetTextMacro: SetTextMacro::<Impl, IMPL_OFFSET>,
            GetRadix: GetRadix::<Impl, IMPL_OFFSET>,
            SetRadix: SetRadix::<Impl, IMPL_OFFSET>,
            Evaluate: Evaluate::<Impl, IMPL_OFFSET>,
            CoerceValue: CoerceValue::<Impl, IMPL_OFFSET>,
            CoerceValues: CoerceValues::<Impl, IMPL_OFFSET>,
            Execute: Execute::<Impl, IMPL_OFFSET>,
            ExecuteCommandFile: ExecuteCommandFile::<Impl, IMPL_OFFSET>,
            GetNumberBreakpoints: GetNumberBreakpoints::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex: GetBreakpointByIndex::<Impl, IMPL_OFFSET>,
            GetBreakpointById: GetBreakpointById::<Impl, IMPL_OFFSET>,
            GetBreakpointParameters: GetBreakpointParameters::<Impl, IMPL_OFFSET>,
            AddBreakpoint: AddBreakpoint::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint: RemoveBreakpoint::<Impl, IMPL_OFFSET>,
            AddExtension: AddExtension::<Impl, IMPL_OFFSET>,
            RemoveExtension: RemoveExtension::<Impl, IMPL_OFFSET>,
            GetExtensionByPath: GetExtensionByPath::<Impl, IMPL_OFFSET>,
            CallExtension: CallExtension::<Impl, IMPL_OFFSET>,
            GetExtensionFunction: GetExtensionFunction::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis32: GetWindbgExtensionApis32::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis64: GetWindbgExtensionApis64::<Impl, IMPL_OFFSET>,
            GetNumberEventFilters: GetNumberEventFilters::<Impl, IMPL_OFFSET>,
            GetEventFilterText: GetEventFilterText::<Impl, IMPL_OFFSET>,
            GetEventFilterCommand: GetEventFilterCommand::<Impl, IMPL_OFFSET>,
            SetEventFilterCommand: SetEventFilterCommand::<Impl, IMPL_OFFSET>,
            GetSpecificFilterParameters: GetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            SetSpecificFilterParameters: SetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgument: GetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgument: SetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            GetExceptionFilterParameters: GetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            SetExceptionFilterParameters: SetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommand: GetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommand: SetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            WaitForEvent: WaitForEvent::<Impl, IMPL_OFFSET>,
            GetLastEventInformation: GetLastEventInformation::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugControl as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl2Impl: Sized {
    fn GetInterrupt(&mut self) -> ::windows::core::Result<()>;
    fn SetInterrupt(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetInterruptTimeout(&mut self) -> ::windows::core::Result<u32>;
    fn SetInterruptTimeout(&mut self, seconds: u32) -> ::windows::core::Result<()>;
    fn GetLogFile(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn OpenLogFile(&mut self, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn CloseLogFile(&mut self) -> ::windows::core::Result<()>;
    fn GetLogMask(&mut self) -> ::windows::core::Result<u32>;
    fn SetLogMask(&mut self, mask: u32) -> ::windows::core::Result<()>;
    fn Input(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::Result<()>;
    fn ReturnInput(&mut self, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn Output(&mut self, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputVaList(&mut self, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn ControlledOutput(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn ControlledOutputVaList(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn OutputPrompt(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputPromptVaList(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn GetPromptText(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputCurrentState(&mut self, outputcontrol: u32, flags: u32) -> ::windows::core::Result<()>;
    fn OutputVersionInformation(&mut self, outputcontrol: u32) -> ::windows::core::Result<()>;
    fn GetNotifyEventHandle(&mut self) -> ::windows::core::Result<u64>;
    fn SetNotifyEventHandle(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn Assemble(&mut self, offset: u64, instr: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn Disassemble(&mut self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::Result<()>;
    fn GetDisassembleEffectiveOffset(&mut self) -> ::windows::core::Result<u64>;
    fn OutputDisassembly(&mut self, outputcontrol: u32, offset: u64, flags: u32) -> ::windows::core::Result<u64>;
    fn OutputDisassemblyLines(&mut self, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::Result<()>;
    fn GetNearInstruction(&mut self, offset: u64, delta: i32) -> ::windows::core::Result<u64>;
    fn GetStackTrace(&mut self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn GetReturnOffset(&mut self) -> ::windows::core::Result<u64>;
    fn OutputStackTrace(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetDebuggeeType(&mut self, class: *mut u32, qualifier: *mut u32) -> ::windows::core::Result<()>;
    fn GetActualProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn GetExecutingProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberPossibleExecutingProcessorTypes(&mut self) -> ::windows::core::Result<u32>;
    fn GetPossibleExecutingProcessorTypes(&mut self, start: u32, count: u32, types: *mut u32) -> ::windows::core::Result<()>;
    fn GetNumberProcessors(&mut self) -> ::windows::core::Result<u32>;
    fn GetSystemVersion(&mut self, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::Result<()>;
    fn GetPageSize(&mut self) -> ::windows::core::Result<u32>;
    fn IsPointer64Bit(&mut self) -> ::windows::core::Result<()>;
    fn ReadBugCheckData(&mut self, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::Result<()>;
    fn GetNumberSupportedProcessorTypes(&mut self) -> ::windows::core::Result<u32>;
    fn GetSupportedProcessorTypes(&mut self, start: u32, count: u32, types: *mut u32) -> ::windows::core::Result<()>;
    fn GetProcessorTypeNames(&mut self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEffectiveProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn SetEffectiveProcessorType(&mut self, r#type: u32) -> ::windows::core::Result<()>;
    fn GetExecutionStatus(&mut self) -> ::windows::core::Result<u32>;
    fn SetExecutionStatus(&mut self, status: u32) -> ::windows::core::Result<()>;
    fn GetCodeLevel(&mut self) -> ::windows::core::Result<u32>;
    fn SetCodeLevel(&mut self, level: u32) -> ::windows::core::Result<()>;
    fn GetEngineOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetSystemErrorControl(&mut self, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::Result<()>;
    fn SetSystemErrorControl(&mut self, outputlevel: u32, breaklevel: u32) -> ::windows::core::Result<()>;
    fn GetTextMacro(&mut self, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextMacro(&mut self, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetRadix(&mut self) -> ::windows::core::Result<u32>;
    fn SetRadix(&mut self, radix: u32) -> ::windows::core::Result<()>;
    fn Evaluate(&mut self, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::Result<()>;
    fn CoerceValue(&mut self, r#in: *const DEBUG_VALUE, outtype: u32) -> ::windows::core::Result<DEBUG_VALUE>;
    fn CoerceValues(&mut self, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn Execute(&mut self, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn ExecuteCommandFile(&mut self, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetNumberBreakpoints(&mut self) -> ::windows::core::Result<u32>;
    fn GetBreakpointByIndex(&mut self, index: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn GetBreakpointById(&mut self, id: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn GetBreakpointParameters(&mut self, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::Result<()>;
    fn AddBreakpoint(&mut self, r#type: u32, desiredid: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn RemoveBreakpoint(&mut self, bp: ::core::option::Option<IDebugBreakpoint>) -> ::windows::core::Result<()>;
    fn AddExtension(&mut self, path: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<u64>;
    fn RemoveExtension(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn GetExtensionByPath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn CallExtension(&mut self, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetExtensionFunction(&mut self, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut super::super::super::Foundation::FARPROC) -> ::windows::core::Result<()>;
    fn GetWindbgExtensionApis32(&mut self, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::Result<()>;
    fn GetWindbgExtensionApis64(&mut self, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::Result<()>;
    fn GetNumberEventFilters(&mut self, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterText(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterCommand(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetEventFilterCommand(&mut self, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSpecificFilterParameters(&mut self, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn SetSpecificFilterParameters(&mut self, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetSpecificFilterArgument(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSpecificFilterArgument(&mut self, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetExceptionFilterParameters(&mut self, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn SetExceptionFilterParameters(&mut self, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetExceptionFilterSecondCommand(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetExceptionFilterSecondCommand(&mut self, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn WaitForEvent(&mut self, flags: u32, timeout: u32) -> ::windows::core::Result<()>;
    fn GetLastEventInformation(&mut self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentTimeDate(&mut self) -> ::windows::core::Result<u32>;
    fn GetCurrentSystemUpTime(&mut self) -> ::windows::core::Result<u32>;
    fn GetDumpFormatFlags(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberTextReplacements(&mut self) -> ::windows::core::Result<u32>;
    fn GetTextReplacement(&mut self, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextReplacement(&mut self, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn RemoveTextReplacements(&mut self) -> ::windows::core::Result<()>;
    fn OutputTextReplacements(&mut self, outputcontrol: u32, flags: u32) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl IDebugControl2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugControl2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugControl2Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetInterrupt().into()
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInterrupt(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInterruptTimeout() {
                ::core::result::Result::Ok(ok__) => {
                    *seconds = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInterruptTimeout(::core::mem::transmute_copy(&seconds)).into()
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFile(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFile(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CloseLogFile().into()
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLogMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetLogMask(::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn Input<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Input(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into()
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReturnInput(::core::mem::transmute_copy(&buffer)).into()
        }
        unsafe extern "system" fn Output<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Output(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVaList(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutput(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutputVaList(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPrompt(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPromptVaList(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPromptText(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputCurrentState(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVersionInformation(::core::mem::transmute_copy(&outputcontrol)).into()
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNotifyEventHandle() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetNotifyEventHandle(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Assemble(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Disassemble(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into()
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDisassembleEffectiveOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OutputDisassembly(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputDisassemblyLines(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&previouslines), ::core::mem::transmute_copy(&totallines), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)).into()
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNearInstruction(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta)) {
                ::core::result::Result::Ok(ok__) => {
                    *nearoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStackTrace(::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetReturnOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputStackTrace(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDebuggeeType(::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into()
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetActualProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutingProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberPossibleExecutingProcessorTypes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPossibleExecutingProcessorTypes(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into()
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberProcessors() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .GetSystemVersion(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), ::core::mem::transmute_copy(&servicepackstringsize), ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), ::core::mem::transmute_copy(&buildstringsize), ::core::mem::transmute_copy(&buildstringused))
                .into()
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPageSize() {
                ::core::result::Result::Ok(ok__) => {
                    *size = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsPointer64Bit().into()
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadBugCheckData(::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)).into()
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberSupportedProcessorTypes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSupportedProcessorTypes(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into()
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetProcessorTypeNames(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEffectiveProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEffectiveProcessorType(::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatus() {
                ::core::result::Result::Ok(ok__) => {
                    *status = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExecutionStatus(::core::mem::transmute_copy(&status)).into()
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCodeLevel() {
                ::core::result::Result::Ok(ok__) => {
                    *level = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCodeLevel(::core::mem::transmute_copy(&level)).into()
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEngineOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into()
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into()
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextMacro(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into()
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextMacro(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&r#macro)).into()
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRadix() {
                ::core::result::Result::Ok(ok__) => {
                    *radix = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetRadix(::core::mem::transmute_copy(&radix)).into()
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Evaluate(::core::mem::transmute_copy(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into()
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CoerceValue(::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtype)) {
                ::core::result::Result::Ok(ok__) => {
                    *out = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CoerceValues(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtypes), ::core::mem::transmute_copy(&out)).into()
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Execute(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&command), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExecuteCommandFile(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&commandfile), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberBreakpoints() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetBreakpointParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveBreakpoint(::core::mem::transmute(&bp)).into()
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddExtension(::core::mem::transmute_copy(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveExtension(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPath(::core::mem::transmute_copy(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CallExtension(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&function), ::core::mem::transmute_copy(&arguments)).into()
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExtensionFunction(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&funcname), ::core::mem::transmute_copy(&function)).into()
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetWindbgExtensionApis32(::core::mem::transmute_copy(&api)).into()
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetWindbgExtensionApis64(::core::mem::transmute_copy(&api)).into()
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNumberEventFilters(::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)).into()
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterText(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventFilterCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterArgument(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into()
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterArgument(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&argument)).into()
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&codes), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterSecondCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterSecondCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WaitForEvent(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLastEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into()
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentTimeDate() {
                ::core::result::Result::Ok(ok__) => {
                    *timedate = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemUpTime() {
                ::core::result::Result::Ok(ok__) => {
                    *uptime = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDumpFormatFlags() {
                ::core::result::Result::Ok(ok__) => {
                    *formatflags = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberTextReplacements() {
                ::core::result::Result::Ok(ok__) => {
                    *numrepl = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextReplacement(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into()
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextReplacement(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&dsttext)).into()
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveTextReplacements().into()
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTextReplacements(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetInterrupt: GetInterrupt::<Impl, IMPL_OFFSET>,
            SetInterrupt: SetInterrupt::<Impl, IMPL_OFFSET>,
            GetInterruptTimeout: GetInterruptTimeout::<Impl, IMPL_OFFSET>,
            SetInterruptTimeout: SetInterruptTimeout::<Impl, IMPL_OFFSET>,
            GetLogFile: GetLogFile::<Impl, IMPL_OFFSET>,
            OpenLogFile: OpenLogFile::<Impl, IMPL_OFFSET>,
            CloseLogFile: CloseLogFile::<Impl, IMPL_OFFSET>,
            GetLogMask: GetLogMask::<Impl, IMPL_OFFSET>,
            SetLogMask: SetLogMask::<Impl, IMPL_OFFSET>,
            Input: Input::<Impl, IMPL_OFFSET>,
            ReturnInput: ReturnInput::<Impl, IMPL_OFFSET>,
            Output: Output::<Impl, IMPL_OFFSET>,
            OutputVaList: OutputVaList::<Impl, IMPL_OFFSET>,
            ControlledOutput: ControlledOutput::<Impl, IMPL_OFFSET>,
            ControlledOutputVaList: ControlledOutputVaList::<Impl, IMPL_OFFSET>,
            OutputPrompt: OutputPrompt::<Impl, IMPL_OFFSET>,
            OutputPromptVaList: OutputPromptVaList::<Impl, IMPL_OFFSET>,
            GetPromptText: GetPromptText::<Impl, IMPL_OFFSET>,
            OutputCurrentState: OutputCurrentState::<Impl, IMPL_OFFSET>,
            OutputVersionInformation: OutputVersionInformation::<Impl, IMPL_OFFSET>,
            GetNotifyEventHandle: GetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            SetNotifyEventHandle: SetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            Assemble: Assemble::<Impl, IMPL_OFFSET>,
            Disassemble: Disassemble::<Impl, IMPL_OFFSET>,
            GetDisassembleEffectiveOffset: GetDisassembleEffectiveOffset::<Impl, IMPL_OFFSET>,
            OutputDisassembly: OutputDisassembly::<Impl, IMPL_OFFSET>,
            OutputDisassemblyLines: OutputDisassemblyLines::<Impl, IMPL_OFFSET>,
            GetNearInstruction: GetNearInstruction::<Impl, IMPL_OFFSET>,
            GetStackTrace: GetStackTrace::<Impl, IMPL_OFFSET>,
            GetReturnOffset: GetReturnOffset::<Impl, IMPL_OFFSET>,
            OutputStackTrace: OutputStackTrace::<Impl, IMPL_OFFSET>,
            GetDebuggeeType: GetDebuggeeType::<Impl, IMPL_OFFSET>,
            GetActualProcessorType: GetActualProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutingProcessorType: GetExecutingProcessorType::<Impl, IMPL_OFFSET>,
            GetNumberPossibleExecutingProcessorTypes: GetNumberPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetPossibleExecutingProcessorTypes: GetPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetNumberProcessors: GetNumberProcessors::<Impl, IMPL_OFFSET>,
            GetSystemVersion: GetSystemVersion::<Impl, IMPL_OFFSET>,
            GetPageSize: GetPageSize::<Impl, IMPL_OFFSET>,
            IsPointer64Bit: IsPointer64Bit::<Impl, IMPL_OFFSET>,
            ReadBugCheckData: ReadBugCheckData::<Impl, IMPL_OFFSET>,
            GetNumberSupportedProcessorTypes: GetNumberSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetSupportedProcessorTypes: GetSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNames: GetProcessorTypeNames::<Impl, IMPL_OFFSET>,
            GetEffectiveProcessorType: GetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            SetEffectiveProcessorType: SetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutionStatus: GetExecutionStatus::<Impl, IMPL_OFFSET>,
            SetExecutionStatus: SetExecutionStatus::<Impl, IMPL_OFFSET>,
            GetCodeLevel: GetCodeLevel::<Impl, IMPL_OFFSET>,
            SetCodeLevel: SetCodeLevel::<Impl, IMPL_OFFSET>,
            GetEngineOptions: GetEngineOptions::<Impl, IMPL_OFFSET>,
            AddEngineOptions: AddEngineOptions::<Impl, IMPL_OFFSET>,
            RemoveEngineOptions: RemoveEngineOptions::<Impl, IMPL_OFFSET>,
            SetEngineOptions: SetEngineOptions::<Impl, IMPL_OFFSET>,
            GetSystemErrorControl: GetSystemErrorControl::<Impl, IMPL_OFFSET>,
            SetSystemErrorControl: SetSystemErrorControl::<Impl, IMPL_OFFSET>,
            GetTextMacro: GetTextMacro::<Impl, IMPL_OFFSET>,
            SetTextMacro: SetTextMacro::<Impl, IMPL_OFFSET>,
            GetRadix: GetRadix::<Impl, IMPL_OFFSET>,
            SetRadix: SetRadix::<Impl, IMPL_OFFSET>,
            Evaluate: Evaluate::<Impl, IMPL_OFFSET>,
            CoerceValue: CoerceValue::<Impl, IMPL_OFFSET>,
            CoerceValues: CoerceValues::<Impl, IMPL_OFFSET>,
            Execute: Execute::<Impl, IMPL_OFFSET>,
            ExecuteCommandFile: ExecuteCommandFile::<Impl, IMPL_OFFSET>,
            GetNumberBreakpoints: GetNumberBreakpoints::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex: GetBreakpointByIndex::<Impl, IMPL_OFFSET>,
            GetBreakpointById: GetBreakpointById::<Impl, IMPL_OFFSET>,
            GetBreakpointParameters: GetBreakpointParameters::<Impl, IMPL_OFFSET>,
            AddBreakpoint: AddBreakpoint::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint: RemoveBreakpoint::<Impl, IMPL_OFFSET>,
            AddExtension: AddExtension::<Impl, IMPL_OFFSET>,
            RemoveExtension: RemoveExtension::<Impl, IMPL_OFFSET>,
            GetExtensionByPath: GetExtensionByPath::<Impl, IMPL_OFFSET>,
            CallExtension: CallExtension::<Impl, IMPL_OFFSET>,
            GetExtensionFunction: GetExtensionFunction::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis32: GetWindbgExtensionApis32::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis64: GetWindbgExtensionApis64::<Impl, IMPL_OFFSET>,
            GetNumberEventFilters: GetNumberEventFilters::<Impl, IMPL_OFFSET>,
            GetEventFilterText: GetEventFilterText::<Impl, IMPL_OFFSET>,
            GetEventFilterCommand: GetEventFilterCommand::<Impl, IMPL_OFFSET>,
            SetEventFilterCommand: SetEventFilterCommand::<Impl, IMPL_OFFSET>,
            GetSpecificFilterParameters: GetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            SetSpecificFilterParameters: SetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgument: GetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgument: SetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            GetExceptionFilterParameters: GetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            SetExceptionFilterParameters: SetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommand: GetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommand: SetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            WaitForEvent: WaitForEvent::<Impl, IMPL_OFFSET>,
            GetLastEventInformation: GetLastEventInformation::<Impl, IMPL_OFFSET>,
            GetCurrentTimeDate: GetCurrentTimeDate::<Impl, IMPL_OFFSET>,
            GetCurrentSystemUpTime: GetCurrentSystemUpTime::<Impl, IMPL_OFFSET>,
            GetDumpFormatFlags: GetDumpFormatFlags::<Impl, IMPL_OFFSET>,
            GetNumberTextReplacements: GetNumberTextReplacements::<Impl, IMPL_OFFSET>,
            GetTextReplacement: GetTextReplacement::<Impl, IMPL_OFFSET>,
            SetTextReplacement: SetTextReplacement::<Impl, IMPL_OFFSET>,
            RemoveTextReplacements: RemoveTextReplacements::<Impl, IMPL_OFFSET>,
            OutputTextReplacements: OutputTextReplacements::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugControl2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl3Impl: Sized {
    fn GetInterrupt(&mut self) -> ::windows::core::Result<()>;
    fn SetInterrupt(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetInterruptTimeout(&mut self) -> ::windows::core::Result<u32>;
    fn SetInterruptTimeout(&mut self, seconds: u32) -> ::windows::core::Result<()>;
    fn GetLogFile(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn OpenLogFile(&mut self, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn CloseLogFile(&mut self) -> ::windows::core::Result<()>;
    fn GetLogMask(&mut self) -> ::windows::core::Result<u32>;
    fn SetLogMask(&mut self, mask: u32) -> ::windows::core::Result<()>;
    fn Input(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::Result<()>;
    fn ReturnInput(&mut self, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn Output(&mut self, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputVaList(&mut self, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn ControlledOutput(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn ControlledOutputVaList(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn OutputPrompt(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputPromptVaList(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn GetPromptText(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputCurrentState(&mut self, outputcontrol: u32, flags: u32) -> ::windows::core::Result<()>;
    fn OutputVersionInformation(&mut self, outputcontrol: u32) -> ::windows::core::Result<()>;
    fn GetNotifyEventHandle(&mut self) -> ::windows::core::Result<u64>;
    fn SetNotifyEventHandle(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn Assemble(&mut self, offset: u64, instr: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn Disassemble(&mut self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::Result<()>;
    fn GetDisassembleEffectiveOffset(&mut self) -> ::windows::core::Result<u64>;
    fn OutputDisassembly(&mut self, outputcontrol: u32, offset: u64, flags: u32) -> ::windows::core::Result<u64>;
    fn OutputDisassemblyLines(&mut self, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::Result<()>;
    fn GetNearInstruction(&mut self, offset: u64, delta: i32) -> ::windows::core::Result<u64>;
    fn GetStackTrace(&mut self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn GetReturnOffset(&mut self) -> ::windows::core::Result<u64>;
    fn OutputStackTrace(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetDebuggeeType(&mut self, class: *mut u32, qualifier: *mut u32) -> ::windows::core::Result<()>;
    fn GetActualProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn GetExecutingProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberPossibleExecutingProcessorTypes(&mut self) -> ::windows::core::Result<u32>;
    fn GetPossibleExecutingProcessorTypes(&mut self, start: u32, count: u32, types: *mut u32) -> ::windows::core::Result<()>;
    fn GetNumberProcessors(&mut self) -> ::windows::core::Result<u32>;
    fn GetSystemVersion(&mut self, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::Result<()>;
    fn GetPageSize(&mut self) -> ::windows::core::Result<u32>;
    fn IsPointer64Bit(&mut self) -> ::windows::core::Result<()>;
    fn ReadBugCheckData(&mut self, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::Result<()>;
    fn GetNumberSupportedProcessorTypes(&mut self) -> ::windows::core::Result<u32>;
    fn GetSupportedProcessorTypes(&mut self, start: u32, count: u32, types: *mut u32) -> ::windows::core::Result<()>;
    fn GetProcessorTypeNames(&mut self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEffectiveProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn SetEffectiveProcessorType(&mut self, r#type: u32) -> ::windows::core::Result<()>;
    fn GetExecutionStatus(&mut self) -> ::windows::core::Result<u32>;
    fn SetExecutionStatus(&mut self, status: u32) -> ::windows::core::Result<()>;
    fn GetCodeLevel(&mut self) -> ::windows::core::Result<u32>;
    fn SetCodeLevel(&mut self, level: u32) -> ::windows::core::Result<()>;
    fn GetEngineOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetSystemErrorControl(&mut self, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::Result<()>;
    fn SetSystemErrorControl(&mut self, outputlevel: u32, breaklevel: u32) -> ::windows::core::Result<()>;
    fn GetTextMacro(&mut self, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextMacro(&mut self, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetRadix(&mut self) -> ::windows::core::Result<u32>;
    fn SetRadix(&mut self, radix: u32) -> ::windows::core::Result<()>;
    fn Evaluate(&mut self, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::Result<()>;
    fn CoerceValue(&mut self, r#in: *const DEBUG_VALUE, outtype: u32) -> ::windows::core::Result<DEBUG_VALUE>;
    fn CoerceValues(&mut self, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn Execute(&mut self, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn ExecuteCommandFile(&mut self, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetNumberBreakpoints(&mut self) -> ::windows::core::Result<u32>;
    fn GetBreakpointByIndex(&mut self, index: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn GetBreakpointById(&mut self, id: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn GetBreakpointParameters(&mut self, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::Result<()>;
    fn AddBreakpoint(&mut self, r#type: u32, desiredid: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn RemoveBreakpoint(&mut self, bp: ::core::option::Option<IDebugBreakpoint>) -> ::windows::core::Result<()>;
    fn AddExtension(&mut self, path: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<u64>;
    fn RemoveExtension(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn GetExtensionByPath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn CallExtension(&mut self, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetExtensionFunction(&mut self, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut super::super::super::Foundation::FARPROC) -> ::windows::core::Result<()>;
    fn GetWindbgExtensionApis32(&mut self, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::Result<()>;
    fn GetWindbgExtensionApis64(&mut self, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::Result<()>;
    fn GetNumberEventFilters(&mut self, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterText(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterCommand(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetEventFilterCommand(&mut self, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSpecificFilterParameters(&mut self, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn SetSpecificFilterParameters(&mut self, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetSpecificFilterArgument(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSpecificFilterArgument(&mut self, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetExceptionFilterParameters(&mut self, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn SetExceptionFilterParameters(&mut self, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetExceptionFilterSecondCommand(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetExceptionFilterSecondCommand(&mut self, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn WaitForEvent(&mut self, flags: u32, timeout: u32) -> ::windows::core::Result<()>;
    fn GetLastEventInformation(&mut self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentTimeDate(&mut self) -> ::windows::core::Result<u32>;
    fn GetCurrentSystemUpTime(&mut self) -> ::windows::core::Result<u32>;
    fn GetDumpFormatFlags(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberTextReplacements(&mut self) -> ::windows::core::Result<u32>;
    fn GetTextReplacement(&mut self, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextReplacement(&mut self, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn RemoveTextReplacements(&mut self) -> ::windows::core::Result<()>;
    fn OutputTextReplacements(&mut self, outputcontrol: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetAssemblyOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddAssemblyOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveAssemblyOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetAssemblyOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetExpressionSyntax(&mut self) -> ::windows::core::Result<u32>;
    fn SetExpressionSyntax(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn SetExpressionSyntaxByName(&mut self, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetNumberExpressionSyntaxes(&mut self) -> ::windows::core::Result<u32>;
    fn GetExpressionSyntaxNames(&mut self, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetNumberEvents(&mut self) -> ::windows::core::Result<u32>;
    fn GetEventIndexDescription(&mut self, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentEventIndex(&mut self) -> ::windows::core::Result<u32>;
    fn SetNextEventIndex(&mut self, relation: u32, value: u32) -> ::windows::core::Result<u32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl IDebugControl3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugControl3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugControl3Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetInterrupt().into()
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInterrupt(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInterruptTimeout() {
                ::core::result::Result::Ok(ok__) => {
                    *seconds = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInterruptTimeout(::core::mem::transmute_copy(&seconds)).into()
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFile(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFile(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CloseLogFile().into()
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLogMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetLogMask(::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn Input<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Input(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into()
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReturnInput(::core::mem::transmute_copy(&buffer)).into()
        }
        unsafe extern "system" fn Output<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Output(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVaList(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutput(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutputVaList(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPrompt(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPromptVaList(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPromptText(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputCurrentState(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVersionInformation(::core::mem::transmute_copy(&outputcontrol)).into()
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNotifyEventHandle() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetNotifyEventHandle(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Assemble(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Disassemble(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into()
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDisassembleEffectiveOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OutputDisassembly(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputDisassemblyLines(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&previouslines), ::core::mem::transmute_copy(&totallines), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)).into()
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNearInstruction(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta)) {
                ::core::result::Result::Ok(ok__) => {
                    *nearoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStackTrace(::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetReturnOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputStackTrace(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDebuggeeType(::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into()
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetActualProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutingProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberPossibleExecutingProcessorTypes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPossibleExecutingProcessorTypes(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into()
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberProcessors() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .GetSystemVersion(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), ::core::mem::transmute_copy(&servicepackstringsize), ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), ::core::mem::transmute_copy(&buildstringsize), ::core::mem::transmute_copy(&buildstringused))
                .into()
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPageSize() {
                ::core::result::Result::Ok(ok__) => {
                    *size = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsPointer64Bit().into()
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadBugCheckData(::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)).into()
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberSupportedProcessorTypes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSupportedProcessorTypes(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into()
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetProcessorTypeNames(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEffectiveProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEffectiveProcessorType(::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatus() {
                ::core::result::Result::Ok(ok__) => {
                    *status = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExecutionStatus(::core::mem::transmute_copy(&status)).into()
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCodeLevel() {
                ::core::result::Result::Ok(ok__) => {
                    *level = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCodeLevel(::core::mem::transmute_copy(&level)).into()
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEngineOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into()
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into()
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextMacro(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into()
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextMacro(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&r#macro)).into()
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRadix() {
                ::core::result::Result::Ok(ok__) => {
                    *radix = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetRadix(::core::mem::transmute_copy(&radix)).into()
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Evaluate(::core::mem::transmute_copy(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into()
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CoerceValue(::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtype)) {
                ::core::result::Result::Ok(ok__) => {
                    *out = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CoerceValues(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtypes), ::core::mem::transmute_copy(&out)).into()
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Execute(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&command), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExecuteCommandFile(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&commandfile), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberBreakpoints() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetBreakpointParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveBreakpoint(::core::mem::transmute(&bp)).into()
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddExtension(::core::mem::transmute_copy(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveExtension(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPath(::core::mem::transmute_copy(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CallExtension(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&function), ::core::mem::transmute_copy(&arguments)).into()
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExtensionFunction(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&funcname), ::core::mem::transmute_copy(&function)).into()
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetWindbgExtensionApis32(::core::mem::transmute_copy(&api)).into()
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetWindbgExtensionApis64(::core::mem::transmute_copy(&api)).into()
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNumberEventFilters(::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)).into()
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterText(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventFilterCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterArgument(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into()
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterArgument(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&argument)).into()
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&codes), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterSecondCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterSecondCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WaitForEvent(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLastEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into()
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentTimeDate() {
                ::core::result::Result::Ok(ok__) => {
                    *timedate = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemUpTime() {
                ::core::result::Result::Ok(ok__) => {
                    *uptime = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDumpFormatFlags() {
                ::core::result::Result::Ok(ok__) => {
                    *formatflags = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberTextReplacements() {
                ::core::result::Result::Ok(ok__) => {
                    *numrepl = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextReplacement(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into()
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextReplacement(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&dsttext)).into()
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveTextReplacements().into()
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTextReplacements(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetAssemblyOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAssemblyOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddAssemblyOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddAssemblyOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveAssemblyOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetAssemblyOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetAssemblyOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetExpressionSyntax<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntax() {
                ::core::result::Result::Ok(ok__) => {
                    *flags = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntax<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExpressionSyntax(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExpressionSyntaxByName(::core::mem::transmute_copy(&abbrevname)).into()
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberExpressionSyntaxes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExpressionSyntaxNames(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetNumberEvents<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberEvents() {
                ::core::result::Result::Ok(ok__) => {
                    *events = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventIndexDescription<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescription(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *descsize = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentEventIndex<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentEventIndex() {
                ::core::result::Result::Ok(ok__) => {
                    *index = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNextEventIndex<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetNextEventIndex(::core::mem::transmute_copy(&relation), ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *nextindex = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetInterrupt: GetInterrupt::<Impl, IMPL_OFFSET>,
            SetInterrupt: SetInterrupt::<Impl, IMPL_OFFSET>,
            GetInterruptTimeout: GetInterruptTimeout::<Impl, IMPL_OFFSET>,
            SetInterruptTimeout: SetInterruptTimeout::<Impl, IMPL_OFFSET>,
            GetLogFile: GetLogFile::<Impl, IMPL_OFFSET>,
            OpenLogFile: OpenLogFile::<Impl, IMPL_OFFSET>,
            CloseLogFile: CloseLogFile::<Impl, IMPL_OFFSET>,
            GetLogMask: GetLogMask::<Impl, IMPL_OFFSET>,
            SetLogMask: SetLogMask::<Impl, IMPL_OFFSET>,
            Input: Input::<Impl, IMPL_OFFSET>,
            ReturnInput: ReturnInput::<Impl, IMPL_OFFSET>,
            Output: Output::<Impl, IMPL_OFFSET>,
            OutputVaList: OutputVaList::<Impl, IMPL_OFFSET>,
            ControlledOutput: ControlledOutput::<Impl, IMPL_OFFSET>,
            ControlledOutputVaList: ControlledOutputVaList::<Impl, IMPL_OFFSET>,
            OutputPrompt: OutputPrompt::<Impl, IMPL_OFFSET>,
            OutputPromptVaList: OutputPromptVaList::<Impl, IMPL_OFFSET>,
            GetPromptText: GetPromptText::<Impl, IMPL_OFFSET>,
            OutputCurrentState: OutputCurrentState::<Impl, IMPL_OFFSET>,
            OutputVersionInformation: OutputVersionInformation::<Impl, IMPL_OFFSET>,
            GetNotifyEventHandle: GetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            SetNotifyEventHandle: SetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            Assemble: Assemble::<Impl, IMPL_OFFSET>,
            Disassemble: Disassemble::<Impl, IMPL_OFFSET>,
            GetDisassembleEffectiveOffset: GetDisassembleEffectiveOffset::<Impl, IMPL_OFFSET>,
            OutputDisassembly: OutputDisassembly::<Impl, IMPL_OFFSET>,
            OutputDisassemblyLines: OutputDisassemblyLines::<Impl, IMPL_OFFSET>,
            GetNearInstruction: GetNearInstruction::<Impl, IMPL_OFFSET>,
            GetStackTrace: GetStackTrace::<Impl, IMPL_OFFSET>,
            GetReturnOffset: GetReturnOffset::<Impl, IMPL_OFFSET>,
            OutputStackTrace: OutputStackTrace::<Impl, IMPL_OFFSET>,
            GetDebuggeeType: GetDebuggeeType::<Impl, IMPL_OFFSET>,
            GetActualProcessorType: GetActualProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutingProcessorType: GetExecutingProcessorType::<Impl, IMPL_OFFSET>,
            GetNumberPossibleExecutingProcessorTypes: GetNumberPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetPossibleExecutingProcessorTypes: GetPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetNumberProcessors: GetNumberProcessors::<Impl, IMPL_OFFSET>,
            GetSystemVersion: GetSystemVersion::<Impl, IMPL_OFFSET>,
            GetPageSize: GetPageSize::<Impl, IMPL_OFFSET>,
            IsPointer64Bit: IsPointer64Bit::<Impl, IMPL_OFFSET>,
            ReadBugCheckData: ReadBugCheckData::<Impl, IMPL_OFFSET>,
            GetNumberSupportedProcessorTypes: GetNumberSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetSupportedProcessorTypes: GetSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNames: GetProcessorTypeNames::<Impl, IMPL_OFFSET>,
            GetEffectiveProcessorType: GetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            SetEffectiveProcessorType: SetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutionStatus: GetExecutionStatus::<Impl, IMPL_OFFSET>,
            SetExecutionStatus: SetExecutionStatus::<Impl, IMPL_OFFSET>,
            GetCodeLevel: GetCodeLevel::<Impl, IMPL_OFFSET>,
            SetCodeLevel: SetCodeLevel::<Impl, IMPL_OFFSET>,
            GetEngineOptions: GetEngineOptions::<Impl, IMPL_OFFSET>,
            AddEngineOptions: AddEngineOptions::<Impl, IMPL_OFFSET>,
            RemoveEngineOptions: RemoveEngineOptions::<Impl, IMPL_OFFSET>,
            SetEngineOptions: SetEngineOptions::<Impl, IMPL_OFFSET>,
            GetSystemErrorControl: GetSystemErrorControl::<Impl, IMPL_OFFSET>,
            SetSystemErrorControl: SetSystemErrorControl::<Impl, IMPL_OFFSET>,
            GetTextMacro: GetTextMacro::<Impl, IMPL_OFFSET>,
            SetTextMacro: SetTextMacro::<Impl, IMPL_OFFSET>,
            GetRadix: GetRadix::<Impl, IMPL_OFFSET>,
            SetRadix: SetRadix::<Impl, IMPL_OFFSET>,
            Evaluate: Evaluate::<Impl, IMPL_OFFSET>,
            CoerceValue: CoerceValue::<Impl, IMPL_OFFSET>,
            CoerceValues: CoerceValues::<Impl, IMPL_OFFSET>,
            Execute: Execute::<Impl, IMPL_OFFSET>,
            ExecuteCommandFile: ExecuteCommandFile::<Impl, IMPL_OFFSET>,
            GetNumberBreakpoints: GetNumberBreakpoints::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex: GetBreakpointByIndex::<Impl, IMPL_OFFSET>,
            GetBreakpointById: GetBreakpointById::<Impl, IMPL_OFFSET>,
            GetBreakpointParameters: GetBreakpointParameters::<Impl, IMPL_OFFSET>,
            AddBreakpoint: AddBreakpoint::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint: RemoveBreakpoint::<Impl, IMPL_OFFSET>,
            AddExtension: AddExtension::<Impl, IMPL_OFFSET>,
            RemoveExtension: RemoveExtension::<Impl, IMPL_OFFSET>,
            GetExtensionByPath: GetExtensionByPath::<Impl, IMPL_OFFSET>,
            CallExtension: CallExtension::<Impl, IMPL_OFFSET>,
            GetExtensionFunction: GetExtensionFunction::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis32: GetWindbgExtensionApis32::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis64: GetWindbgExtensionApis64::<Impl, IMPL_OFFSET>,
            GetNumberEventFilters: GetNumberEventFilters::<Impl, IMPL_OFFSET>,
            GetEventFilterText: GetEventFilterText::<Impl, IMPL_OFFSET>,
            GetEventFilterCommand: GetEventFilterCommand::<Impl, IMPL_OFFSET>,
            SetEventFilterCommand: SetEventFilterCommand::<Impl, IMPL_OFFSET>,
            GetSpecificFilterParameters: GetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            SetSpecificFilterParameters: SetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgument: GetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgument: SetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            GetExceptionFilterParameters: GetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            SetExceptionFilterParameters: SetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommand: GetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommand: SetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            WaitForEvent: WaitForEvent::<Impl, IMPL_OFFSET>,
            GetLastEventInformation: GetLastEventInformation::<Impl, IMPL_OFFSET>,
            GetCurrentTimeDate: GetCurrentTimeDate::<Impl, IMPL_OFFSET>,
            GetCurrentSystemUpTime: GetCurrentSystemUpTime::<Impl, IMPL_OFFSET>,
            GetDumpFormatFlags: GetDumpFormatFlags::<Impl, IMPL_OFFSET>,
            GetNumberTextReplacements: GetNumberTextReplacements::<Impl, IMPL_OFFSET>,
            GetTextReplacement: GetTextReplacement::<Impl, IMPL_OFFSET>,
            SetTextReplacement: SetTextReplacement::<Impl, IMPL_OFFSET>,
            RemoveTextReplacements: RemoveTextReplacements::<Impl, IMPL_OFFSET>,
            OutputTextReplacements: OutputTextReplacements::<Impl, IMPL_OFFSET>,
            GetAssemblyOptions: GetAssemblyOptions::<Impl, IMPL_OFFSET>,
            AddAssemblyOptions: AddAssemblyOptions::<Impl, IMPL_OFFSET>,
            RemoveAssemblyOptions: RemoveAssemblyOptions::<Impl, IMPL_OFFSET>,
            SetAssemblyOptions: SetAssemblyOptions::<Impl, IMPL_OFFSET>,
            GetExpressionSyntax: GetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntax: SetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByName: SetExpressionSyntaxByName::<Impl, IMPL_OFFSET>,
            GetNumberExpressionSyntaxes: GetNumberExpressionSyntaxes::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNames: GetExpressionSyntaxNames::<Impl, IMPL_OFFSET>,
            GetNumberEvents: GetNumberEvents::<Impl, IMPL_OFFSET>,
            GetEventIndexDescription: GetEventIndexDescription::<Impl, IMPL_OFFSET>,
            GetCurrentEventIndex: GetCurrentEventIndex::<Impl, IMPL_OFFSET>,
            SetNextEventIndex: SetNextEventIndex::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugControl3 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl4Impl: Sized {
    fn GetInterrupt(&mut self) -> ::windows::core::Result<()>;
    fn SetInterrupt(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetInterruptTimeout(&mut self) -> ::windows::core::Result<u32>;
    fn SetInterruptTimeout(&mut self, seconds: u32) -> ::windows::core::Result<()>;
    fn GetLogFile(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn OpenLogFile(&mut self, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn CloseLogFile(&mut self) -> ::windows::core::Result<()>;
    fn GetLogMask(&mut self) -> ::windows::core::Result<u32>;
    fn SetLogMask(&mut self, mask: u32) -> ::windows::core::Result<()>;
    fn Input(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::Result<()>;
    fn ReturnInput(&mut self, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn Output(&mut self, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputVaList(&mut self, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn ControlledOutput(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn ControlledOutputVaList(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn OutputPrompt(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputPromptVaList(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn GetPromptText(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputCurrentState(&mut self, outputcontrol: u32, flags: u32) -> ::windows::core::Result<()>;
    fn OutputVersionInformation(&mut self, outputcontrol: u32) -> ::windows::core::Result<()>;
    fn GetNotifyEventHandle(&mut self) -> ::windows::core::Result<u64>;
    fn SetNotifyEventHandle(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn Assemble(&mut self, offset: u64, instr: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn Disassemble(&mut self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::Result<()>;
    fn GetDisassembleEffectiveOffset(&mut self) -> ::windows::core::Result<u64>;
    fn OutputDisassembly(&mut self, outputcontrol: u32, offset: u64, flags: u32) -> ::windows::core::Result<u64>;
    fn OutputDisassemblyLines(&mut self, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::Result<()>;
    fn GetNearInstruction(&mut self, offset: u64, delta: i32) -> ::windows::core::Result<u64>;
    fn GetStackTrace(&mut self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn GetReturnOffset(&mut self) -> ::windows::core::Result<u64>;
    fn OutputStackTrace(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetDebuggeeType(&mut self, class: *mut u32, qualifier: *mut u32) -> ::windows::core::Result<()>;
    fn GetActualProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn GetExecutingProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberPossibleExecutingProcessorTypes(&mut self) -> ::windows::core::Result<u32>;
    fn GetPossibleExecutingProcessorTypes(&mut self, start: u32, count: u32, types: *mut u32) -> ::windows::core::Result<()>;
    fn GetNumberProcessors(&mut self) -> ::windows::core::Result<u32>;
    fn GetSystemVersion(&mut self, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::Result<()>;
    fn GetPageSize(&mut self) -> ::windows::core::Result<u32>;
    fn IsPointer64Bit(&mut self) -> ::windows::core::Result<()>;
    fn ReadBugCheckData(&mut self, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::Result<()>;
    fn GetNumberSupportedProcessorTypes(&mut self) -> ::windows::core::Result<u32>;
    fn GetSupportedProcessorTypes(&mut self, start: u32, count: u32, types: *mut u32) -> ::windows::core::Result<()>;
    fn GetProcessorTypeNames(&mut self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEffectiveProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn SetEffectiveProcessorType(&mut self, r#type: u32) -> ::windows::core::Result<()>;
    fn GetExecutionStatus(&mut self) -> ::windows::core::Result<u32>;
    fn SetExecutionStatus(&mut self, status: u32) -> ::windows::core::Result<()>;
    fn GetCodeLevel(&mut self) -> ::windows::core::Result<u32>;
    fn SetCodeLevel(&mut self, level: u32) -> ::windows::core::Result<()>;
    fn GetEngineOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetSystemErrorControl(&mut self, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::Result<()>;
    fn SetSystemErrorControl(&mut self, outputlevel: u32, breaklevel: u32) -> ::windows::core::Result<()>;
    fn GetTextMacro(&mut self, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextMacro(&mut self, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetRadix(&mut self) -> ::windows::core::Result<u32>;
    fn SetRadix(&mut self, radix: u32) -> ::windows::core::Result<()>;
    fn Evaluate(&mut self, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::Result<()>;
    fn CoerceValue(&mut self, r#in: *const DEBUG_VALUE, outtype: u32) -> ::windows::core::Result<DEBUG_VALUE>;
    fn CoerceValues(&mut self, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn Execute(&mut self, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn ExecuteCommandFile(&mut self, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetNumberBreakpoints(&mut self) -> ::windows::core::Result<u32>;
    fn GetBreakpointByIndex(&mut self, index: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn GetBreakpointById(&mut self, id: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn GetBreakpointParameters(&mut self, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::Result<()>;
    fn AddBreakpoint(&mut self, r#type: u32, desiredid: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn RemoveBreakpoint(&mut self, bp: ::core::option::Option<IDebugBreakpoint>) -> ::windows::core::Result<()>;
    fn AddExtension(&mut self, path: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<u64>;
    fn RemoveExtension(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn GetExtensionByPath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn CallExtension(&mut self, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetExtensionFunction(&mut self, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut super::super::super::Foundation::FARPROC) -> ::windows::core::Result<()>;
    fn GetWindbgExtensionApis32(&mut self, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::Result<()>;
    fn GetWindbgExtensionApis64(&mut self, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::Result<()>;
    fn GetNumberEventFilters(&mut self, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterText(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterCommand(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetEventFilterCommand(&mut self, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSpecificFilterParameters(&mut self, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn SetSpecificFilterParameters(&mut self, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetSpecificFilterArgument(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSpecificFilterArgument(&mut self, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetExceptionFilterParameters(&mut self, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn SetExceptionFilterParameters(&mut self, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetExceptionFilterSecondCommand(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetExceptionFilterSecondCommand(&mut self, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn WaitForEvent(&mut self, flags: u32, timeout: u32) -> ::windows::core::Result<()>;
    fn GetLastEventInformation(&mut self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentTimeDate(&mut self) -> ::windows::core::Result<u32>;
    fn GetCurrentSystemUpTime(&mut self) -> ::windows::core::Result<u32>;
    fn GetDumpFormatFlags(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberTextReplacements(&mut self) -> ::windows::core::Result<u32>;
    fn GetTextReplacement(&mut self, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextReplacement(&mut self, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn RemoveTextReplacements(&mut self) -> ::windows::core::Result<()>;
    fn OutputTextReplacements(&mut self, outputcontrol: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetAssemblyOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddAssemblyOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveAssemblyOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetAssemblyOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetExpressionSyntax(&mut self) -> ::windows::core::Result<u32>;
    fn SetExpressionSyntax(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn SetExpressionSyntaxByName(&mut self, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetNumberExpressionSyntaxes(&mut self) -> ::windows::core::Result<u32>;
    fn GetExpressionSyntaxNames(&mut self, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetNumberEvents(&mut self) -> ::windows::core::Result<u32>;
    fn GetEventIndexDescription(&mut self, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentEventIndex(&mut self) -> ::windows::core::Result<u32>;
    fn SetNextEventIndex(&mut self, relation: u32, value: u32) -> ::windows::core::Result<u32>;
    fn GetLogFileWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn OpenLogFileWide(&mut self, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn InputWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::Result<()>;
    fn ReturnInputWide(&mut self, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputWide(&mut self, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputVaListWide(&mut self, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn ControlledOutputWide(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn ControlledOutputVaListWide(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn OutputPromptWide(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputPromptVaListWide(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn GetPromptTextWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn AssembleWide(&mut self, offset: u64, instr: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn DisassembleWide(&mut self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::Result<()>;
    fn GetProcessorTypeNamesWide(&mut self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTextMacroWide(&mut self, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextMacroWide(&mut self, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn EvaluateWide(&mut self, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::Result<()>;
    fn ExecuteWide(&mut self, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn ExecuteCommandFileWide(&mut self, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetBreakpointByIndex2(&mut self, index: u32) -> ::windows::core::Result<IDebugBreakpoint2>;
    fn GetBreakpointById2(&mut self, id: u32) -> ::windows::core::Result<IDebugBreakpoint2>;
    fn AddBreakpoint2(&mut self, r#type: u32, desiredid: u32) -> ::windows::core::Result<IDebugBreakpoint2>;
    fn RemoveBreakpoint2(&mut self, bp: ::core::option::Option<IDebugBreakpoint2>) -> ::windows::core::Result<()>;
    fn AddExtensionWide(&mut self, path: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<u64>;
    fn GetExtensionByPathWide(&mut self, path: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn CallExtensionWide(&mut self, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetExtensionFunctionWide(&mut self, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut super::super::super::Foundation::FARPROC) -> ::windows::core::Result<()>;
    fn GetEventFilterTextWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterCommandWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetEventFilterCommandWide(&mut self, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetSpecificFilterArgumentWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSpecificFilterArgumentWide(&mut self, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetExceptionFilterSecondCommandWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetExceptionFilterSecondCommandWide(&mut self, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetLastEventInformationWide(&mut self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::Result<()>;
    fn GetTextReplacementWide(&mut self, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextReplacementWide(&mut self, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn SetExpressionSyntaxByNameWide(&mut self, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetExpressionSyntaxNamesWide(&mut self, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventIndexDescriptionWide(&mut self, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32) -> ::windows::core::Result<u32>;
    fn GetLogFile2(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::Result<()>;
    fn OpenLogFile2(&mut self, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetLogFile2Wide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::Result<()>;
    fn OpenLogFile2Wide(&mut self, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetSystemVersionValues(&mut self, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::Result<()>;
    fn GetSystemVersionString(&mut self, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSystemVersionStringWide(&mut self, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetContextStackTrace(&mut self, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn OutputContextStackTrace(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetStoredEventInformation(&mut self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::Result<()>;
    fn GetManagedStatus(&mut self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::Result<()>;
    fn GetManagedStatusWide(&mut self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::Result<()>;
    fn ResetManagedStatus(&mut self, flags: u32) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl IDebugControl4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugControl4Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugControl4Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetInterrupt().into()
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInterrupt(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInterruptTimeout() {
                ::core::result::Result::Ok(ok__) => {
                    *seconds = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInterruptTimeout(::core::mem::transmute_copy(&seconds)).into()
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFile(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFile(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CloseLogFile().into()
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLogMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetLogMask(::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn Input<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Input(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into()
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReturnInput(::core::mem::transmute_copy(&buffer)).into()
        }
        unsafe extern "system" fn Output<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Output(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVaList(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutput(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutputVaList(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPrompt(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPromptVaList(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPromptText(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputCurrentState(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVersionInformation(::core::mem::transmute_copy(&outputcontrol)).into()
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNotifyEventHandle() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetNotifyEventHandle(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Assemble(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Disassemble(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into()
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDisassembleEffectiveOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OutputDisassembly(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputDisassemblyLines(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&previouslines), ::core::mem::transmute_copy(&totallines), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)).into()
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNearInstruction(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta)) {
                ::core::result::Result::Ok(ok__) => {
                    *nearoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStackTrace(::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetReturnOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputStackTrace(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDebuggeeType(::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into()
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetActualProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutingProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberPossibleExecutingProcessorTypes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPossibleExecutingProcessorTypes(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into()
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberProcessors() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .GetSystemVersion(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), ::core::mem::transmute_copy(&servicepackstringsize), ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), ::core::mem::transmute_copy(&buildstringsize), ::core::mem::transmute_copy(&buildstringused))
                .into()
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPageSize() {
                ::core::result::Result::Ok(ok__) => {
                    *size = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsPointer64Bit().into()
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadBugCheckData(::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)).into()
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberSupportedProcessorTypes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSupportedProcessorTypes(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into()
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetProcessorTypeNames(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEffectiveProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEffectiveProcessorType(::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatus() {
                ::core::result::Result::Ok(ok__) => {
                    *status = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExecutionStatus(::core::mem::transmute_copy(&status)).into()
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCodeLevel() {
                ::core::result::Result::Ok(ok__) => {
                    *level = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCodeLevel(::core::mem::transmute_copy(&level)).into()
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEngineOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into()
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into()
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextMacro(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into()
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextMacro(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&r#macro)).into()
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRadix() {
                ::core::result::Result::Ok(ok__) => {
                    *radix = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetRadix(::core::mem::transmute_copy(&radix)).into()
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Evaluate(::core::mem::transmute_copy(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into()
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CoerceValue(::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtype)) {
                ::core::result::Result::Ok(ok__) => {
                    *out = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CoerceValues(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtypes), ::core::mem::transmute_copy(&out)).into()
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Execute(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&command), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExecuteCommandFile(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&commandfile), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberBreakpoints() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetBreakpointParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveBreakpoint(::core::mem::transmute(&bp)).into()
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddExtension(::core::mem::transmute_copy(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveExtension(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPath(::core::mem::transmute_copy(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CallExtension(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&function), ::core::mem::transmute_copy(&arguments)).into()
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExtensionFunction(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&funcname), ::core::mem::transmute_copy(&function)).into()
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetWindbgExtensionApis32(::core::mem::transmute_copy(&api)).into()
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetWindbgExtensionApis64(::core::mem::transmute_copy(&api)).into()
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNumberEventFilters(::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)).into()
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterText(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventFilterCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterArgument(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into()
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterArgument(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&argument)).into()
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&codes), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterSecondCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterSecondCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WaitForEvent(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLastEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into()
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentTimeDate() {
                ::core::result::Result::Ok(ok__) => {
                    *timedate = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemUpTime() {
                ::core::result::Result::Ok(ok__) => {
                    *uptime = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDumpFormatFlags() {
                ::core::result::Result::Ok(ok__) => {
                    *formatflags = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberTextReplacements() {
                ::core::result::Result::Ok(ok__) => {
                    *numrepl = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextReplacement(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into()
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextReplacement(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&dsttext)).into()
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveTextReplacements().into()
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTextReplacements(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetAssemblyOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAssemblyOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddAssemblyOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddAssemblyOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveAssemblyOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetAssemblyOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetAssemblyOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetExpressionSyntax<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntax() {
                ::core::result::Result::Ok(ok__) => {
                    *flags = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntax<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExpressionSyntax(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExpressionSyntaxByName(::core::mem::transmute_copy(&abbrevname)).into()
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberExpressionSyntaxes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExpressionSyntaxNames(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetNumberEvents<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberEvents() {
                ::core::result::Result::Ok(ok__) => {
                    *events = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventIndexDescription<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescription(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *descsize = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentEventIndex<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentEventIndex() {
                ::core::result::Result::Ok(ok__) => {
                    *index = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNextEventIndex<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetNextEventIndex(::core::mem::transmute_copy(&relation), ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *nextindex = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFileWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFileWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn OpenLogFileWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFileWide(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn InputWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).InputWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into()
        }
        unsafe extern "system" fn ReturnInputWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReturnInputWide(::core::mem::transmute_copy(&buffer)).into()
        }
        unsafe extern "system" fn OutputWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputWide(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputVaListWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVaListWide(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn ControlledOutputWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutputWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutputVaListWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn OutputPromptWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPromptWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputPromptVaListWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPromptVaListWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn GetPromptTextWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPromptTextWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn AssembleWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AssembleWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisassembleWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DisassembleWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into()
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetProcessorTypeNamesWide(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetTextMacroWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextMacroWide(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into()
        }
        unsafe extern "system" fn SetTextMacroWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextMacroWide(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&r#macro)).into()
        }
        unsafe extern "system" fn EvaluateWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EvaluateWide(::core::mem::transmute_copy(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into()
        }
        unsafe extern "system" fn ExecuteWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExecuteWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&command), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExecuteCommandFileWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&commandfile), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex2(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById2<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById2(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddBreakpoint2<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint2(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint2<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveBreakpoint2(::core::mem::transmute(&bp)).into()
        }
        unsafe extern "system" fn AddExtensionWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddExtensionWide(::core::mem::transmute_copy(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionByPathWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPathWide(::core::mem::transmute_copy(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtensionWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CallExtensionWide(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&function), ::core::mem::transmute_copy(&arguments)).into()
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExtensionFunctionWide(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&funcname), ::core::mem::transmute_copy(&function)).into()
        }
        unsafe extern "system" fn GetEventFilterTextWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterTextWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventFilterCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterArgumentWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into()
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterArgumentWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&argument)).into()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterSecondCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterSecondCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetLastEventInformationWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLastEventInformationWide(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into()
        }
        unsafe extern "system" fn GetTextReplacementWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextReplacementWide(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into()
        }
        unsafe extern "system" fn SetTextReplacementWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextReplacementWide(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&dsttext)).into()
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExpressionSyntaxByNameWide(::core::mem::transmute_copy(&abbrevname)).into()
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExpressionSyntaxNamesWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescriptionWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *descsize = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile2<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFile2(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn OpenLogFile2<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFile2(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetLogFile2Wide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFile2Wide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn OpenLogFile2Wide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFile2Wide(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetSystemVersionValues<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemVersionValues(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&win32major), ::core::mem::transmute_copy(&win32minor), ::core::mem::transmute_copy(&kdmajor), ::core::mem::transmute_copy(&kdminor)).into()
        }
        unsafe extern "system" fn GetSystemVersionString<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemVersionString(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemVersionStringWide(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetContextStackTrace<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetContextStackTrace(::core::mem::transmute_copy(&startcontext), ::core::mem::transmute_copy(&startcontextsize), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn OutputContextStackTrace<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputContextStackTrace(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetStoredEventInformation<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStoredEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize), ::core::mem::transmute_copy(&contextused), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused)).into()
        }
        unsafe extern "system" fn GetManagedStatus<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetManagedStatus(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into()
        }
        unsafe extern "system" fn GetManagedStatusWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetManagedStatusWide(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into()
        }
        unsafe extern "system" fn ResetManagedStatus<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ResetManagedStatus(::core::mem::transmute_copy(&flags)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetInterrupt: GetInterrupt::<Impl, IMPL_OFFSET>,
            SetInterrupt: SetInterrupt::<Impl, IMPL_OFFSET>,
            GetInterruptTimeout: GetInterruptTimeout::<Impl, IMPL_OFFSET>,
            SetInterruptTimeout: SetInterruptTimeout::<Impl, IMPL_OFFSET>,
            GetLogFile: GetLogFile::<Impl, IMPL_OFFSET>,
            OpenLogFile: OpenLogFile::<Impl, IMPL_OFFSET>,
            CloseLogFile: CloseLogFile::<Impl, IMPL_OFFSET>,
            GetLogMask: GetLogMask::<Impl, IMPL_OFFSET>,
            SetLogMask: SetLogMask::<Impl, IMPL_OFFSET>,
            Input: Input::<Impl, IMPL_OFFSET>,
            ReturnInput: ReturnInput::<Impl, IMPL_OFFSET>,
            Output: Output::<Impl, IMPL_OFFSET>,
            OutputVaList: OutputVaList::<Impl, IMPL_OFFSET>,
            ControlledOutput: ControlledOutput::<Impl, IMPL_OFFSET>,
            ControlledOutputVaList: ControlledOutputVaList::<Impl, IMPL_OFFSET>,
            OutputPrompt: OutputPrompt::<Impl, IMPL_OFFSET>,
            OutputPromptVaList: OutputPromptVaList::<Impl, IMPL_OFFSET>,
            GetPromptText: GetPromptText::<Impl, IMPL_OFFSET>,
            OutputCurrentState: OutputCurrentState::<Impl, IMPL_OFFSET>,
            OutputVersionInformation: OutputVersionInformation::<Impl, IMPL_OFFSET>,
            GetNotifyEventHandle: GetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            SetNotifyEventHandle: SetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            Assemble: Assemble::<Impl, IMPL_OFFSET>,
            Disassemble: Disassemble::<Impl, IMPL_OFFSET>,
            GetDisassembleEffectiveOffset: GetDisassembleEffectiveOffset::<Impl, IMPL_OFFSET>,
            OutputDisassembly: OutputDisassembly::<Impl, IMPL_OFFSET>,
            OutputDisassemblyLines: OutputDisassemblyLines::<Impl, IMPL_OFFSET>,
            GetNearInstruction: GetNearInstruction::<Impl, IMPL_OFFSET>,
            GetStackTrace: GetStackTrace::<Impl, IMPL_OFFSET>,
            GetReturnOffset: GetReturnOffset::<Impl, IMPL_OFFSET>,
            OutputStackTrace: OutputStackTrace::<Impl, IMPL_OFFSET>,
            GetDebuggeeType: GetDebuggeeType::<Impl, IMPL_OFFSET>,
            GetActualProcessorType: GetActualProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutingProcessorType: GetExecutingProcessorType::<Impl, IMPL_OFFSET>,
            GetNumberPossibleExecutingProcessorTypes: GetNumberPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetPossibleExecutingProcessorTypes: GetPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetNumberProcessors: GetNumberProcessors::<Impl, IMPL_OFFSET>,
            GetSystemVersion: GetSystemVersion::<Impl, IMPL_OFFSET>,
            GetPageSize: GetPageSize::<Impl, IMPL_OFFSET>,
            IsPointer64Bit: IsPointer64Bit::<Impl, IMPL_OFFSET>,
            ReadBugCheckData: ReadBugCheckData::<Impl, IMPL_OFFSET>,
            GetNumberSupportedProcessorTypes: GetNumberSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetSupportedProcessorTypes: GetSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNames: GetProcessorTypeNames::<Impl, IMPL_OFFSET>,
            GetEffectiveProcessorType: GetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            SetEffectiveProcessorType: SetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutionStatus: GetExecutionStatus::<Impl, IMPL_OFFSET>,
            SetExecutionStatus: SetExecutionStatus::<Impl, IMPL_OFFSET>,
            GetCodeLevel: GetCodeLevel::<Impl, IMPL_OFFSET>,
            SetCodeLevel: SetCodeLevel::<Impl, IMPL_OFFSET>,
            GetEngineOptions: GetEngineOptions::<Impl, IMPL_OFFSET>,
            AddEngineOptions: AddEngineOptions::<Impl, IMPL_OFFSET>,
            RemoveEngineOptions: RemoveEngineOptions::<Impl, IMPL_OFFSET>,
            SetEngineOptions: SetEngineOptions::<Impl, IMPL_OFFSET>,
            GetSystemErrorControl: GetSystemErrorControl::<Impl, IMPL_OFFSET>,
            SetSystemErrorControl: SetSystemErrorControl::<Impl, IMPL_OFFSET>,
            GetTextMacro: GetTextMacro::<Impl, IMPL_OFFSET>,
            SetTextMacro: SetTextMacro::<Impl, IMPL_OFFSET>,
            GetRadix: GetRadix::<Impl, IMPL_OFFSET>,
            SetRadix: SetRadix::<Impl, IMPL_OFFSET>,
            Evaluate: Evaluate::<Impl, IMPL_OFFSET>,
            CoerceValue: CoerceValue::<Impl, IMPL_OFFSET>,
            CoerceValues: CoerceValues::<Impl, IMPL_OFFSET>,
            Execute: Execute::<Impl, IMPL_OFFSET>,
            ExecuteCommandFile: ExecuteCommandFile::<Impl, IMPL_OFFSET>,
            GetNumberBreakpoints: GetNumberBreakpoints::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex: GetBreakpointByIndex::<Impl, IMPL_OFFSET>,
            GetBreakpointById: GetBreakpointById::<Impl, IMPL_OFFSET>,
            GetBreakpointParameters: GetBreakpointParameters::<Impl, IMPL_OFFSET>,
            AddBreakpoint: AddBreakpoint::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint: RemoveBreakpoint::<Impl, IMPL_OFFSET>,
            AddExtension: AddExtension::<Impl, IMPL_OFFSET>,
            RemoveExtension: RemoveExtension::<Impl, IMPL_OFFSET>,
            GetExtensionByPath: GetExtensionByPath::<Impl, IMPL_OFFSET>,
            CallExtension: CallExtension::<Impl, IMPL_OFFSET>,
            GetExtensionFunction: GetExtensionFunction::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis32: GetWindbgExtensionApis32::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis64: GetWindbgExtensionApis64::<Impl, IMPL_OFFSET>,
            GetNumberEventFilters: GetNumberEventFilters::<Impl, IMPL_OFFSET>,
            GetEventFilterText: GetEventFilterText::<Impl, IMPL_OFFSET>,
            GetEventFilterCommand: GetEventFilterCommand::<Impl, IMPL_OFFSET>,
            SetEventFilterCommand: SetEventFilterCommand::<Impl, IMPL_OFFSET>,
            GetSpecificFilterParameters: GetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            SetSpecificFilterParameters: SetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgument: GetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgument: SetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            GetExceptionFilterParameters: GetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            SetExceptionFilterParameters: SetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommand: GetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommand: SetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            WaitForEvent: WaitForEvent::<Impl, IMPL_OFFSET>,
            GetLastEventInformation: GetLastEventInformation::<Impl, IMPL_OFFSET>,
            GetCurrentTimeDate: GetCurrentTimeDate::<Impl, IMPL_OFFSET>,
            GetCurrentSystemUpTime: GetCurrentSystemUpTime::<Impl, IMPL_OFFSET>,
            GetDumpFormatFlags: GetDumpFormatFlags::<Impl, IMPL_OFFSET>,
            GetNumberTextReplacements: GetNumberTextReplacements::<Impl, IMPL_OFFSET>,
            GetTextReplacement: GetTextReplacement::<Impl, IMPL_OFFSET>,
            SetTextReplacement: SetTextReplacement::<Impl, IMPL_OFFSET>,
            RemoveTextReplacements: RemoveTextReplacements::<Impl, IMPL_OFFSET>,
            OutputTextReplacements: OutputTextReplacements::<Impl, IMPL_OFFSET>,
            GetAssemblyOptions: GetAssemblyOptions::<Impl, IMPL_OFFSET>,
            AddAssemblyOptions: AddAssemblyOptions::<Impl, IMPL_OFFSET>,
            RemoveAssemblyOptions: RemoveAssemblyOptions::<Impl, IMPL_OFFSET>,
            SetAssemblyOptions: SetAssemblyOptions::<Impl, IMPL_OFFSET>,
            GetExpressionSyntax: GetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntax: SetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByName: SetExpressionSyntaxByName::<Impl, IMPL_OFFSET>,
            GetNumberExpressionSyntaxes: GetNumberExpressionSyntaxes::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNames: GetExpressionSyntaxNames::<Impl, IMPL_OFFSET>,
            GetNumberEvents: GetNumberEvents::<Impl, IMPL_OFFSET>,
            GetEventIndexDescription: GetEventIndexDescription::<Impl, IMPL_OFFSET>,
            GetCurrentEventIndex: GetCurrentEventIndex::<Impl, IMPL_OFFSET>,
            SetNextEventIndex: SetNextEventIndex::<Impl, IMPL_OFFSET>,
            GetLogFileWide: GetLogFileWide::<Impl, IMPL_OFFSET>,
            OpenLogFileWide: OpenLogFileWide::<Impl, IMPL_OFFSET>,
            InputWide: InputWide::<Impl, IMPL_OFFSET>,
            ReturnInputWide: ReturnInputWide::<Impl, IMPL_OFFSET>,
            OutputWide: OutputWide::<Impl, IMPL_OFFSET>,
            OutputVaListWide: OutputVaListWide::<Impl, IMPL_OFFSET>,
            ControlledOutputWide: ControlledOutputWide::<Impl, IMPL_OFFSET>,
            ControlledOutputVaListWide: ControlledOutputVaListWide::<Impl, IMPL_OFFSET>,
            OutputPromptWide: OutputPromptWide::<Impl, IMPL_OFFSET>,
            OutputPromptVaListWide: OutputPromptVaListWide::<Impl, IMPL_OFFSET>,
            GetPromptTextWide: GetPromptTextWide::<Impl, IMPL_OFFSET>,
            AssembleWide: AssembleWide::<Impl, IMPL_OFFSET>,
            DisassembleWide: DisassembleWide::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNamesWide: GetProcessorTypeNamesWide::<Impl, IMPL_OFFSET>,
            GetTextMacroWide: GetTextMacroWide::<Impl, IMPL_OFFSET>,
            SetTextMacroWide: SetTextMacroWide::<Impl, IMPL_OFFSET>,
            EvaluateWide: EvaluateWide::<Impl, IMPL_OFFSET>,
            ExecuteWide: ExecuteWide::<Impl, IMPL_OFFSET>,
            ExecuteCommandFileWide: ExecuteCommandFileWide::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex2: GetBreakpointByIndex2::<Impl, IMPL_OFFSET>,
            GetBreakpointById2: GetBreakpointById2::<Impl, IMPL_OFFSET>,
            AddBreakpoint2: AddBreakpoint2::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint2: RemoveBreakpoint2::<Impl, IMPL_OFFSET>,
            AddExtensionWide: AddExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionByPathWide: GetExtensionByPathWide::<Impl, IMPL_OFFSET>,
            CallExtensionWide: CallExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionFunctionWide: GetExtensionFunctionWide::<Impl, IMPL_OFFSET>,
            GetEventFilterTextWide: GetEventFilterTextWide::<Impl, IMPL_OFFSET>,
            GetEventFilterCommandWide: GetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            SetEventFilterCommandWide: SetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgumentWide: GetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgumentWide: SetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommandWide: GetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommandWide: SetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            GetLastEventInformationWide: GetLastEventInformationWide::<Impl, IMPL_OFFSET>,
            GetTextReplacementWide: GetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetTextReplacementWide: SetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByNameWide: SetExpressionSyntaxByNameWide::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNamesWide: GetExpressionSyntaxNamesWide::<Impl, IMPL_OFFSET>,
            GetEventIndexDescriptionWide: GetEventIndexDescriptionWide::<Impl, IMPL_OFFSET>,
            GetLogFile2: GetLogFile2::<Impl, IMPL_OFFSET>,
            OpenLogFile2: OpenLogFile2::<Impl, IMPL_OFFSET>,
            GetLogFile2Wide: GetLogFile2Wide::<Impl, IMPL_OFFSET>,
            OpenLogFile2Wide: OpenLogFile2Wide::<Impl, IMPL_OFFSET>,
            GetSystemVersionValues: GetSystemVersionValues::<Impl, IMPL_OFFSET>,
            GetSystemVersionString: GetSystemVersionString::<Impl, IMPL_OFFSET>,
            GetSystemVersionStringWide: GetSystemVersionStringWide::<Impl, IMPL_OFFSET>,
            GetContextStackTrace: GetContextStackTrace::<Impl, IMPL_OFFSET>,
            OutputContextStackTrace: OutputContextStackTrace::<Impl, IMPL_OFFSET>,
            GetStoredEventInformation: GetStoredEventInformation::<Impl, IMPL_OFFSET>,
            GetManagedStatus: GetManagedStatus::<Impl, IMPL_OFFSET>,
            GetManagedStatusWide: GetManagedStatusWide::<Impl, IMPL_OFFSET>,
            ResetManagedStatus: ResetManagedStatus::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugControl4 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl5Impl: Sized {
    fn GetInterrupt(&mut self) -> ::windows::core::Result<()>;
    fn SetInterrupt(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetInterruptTimeout(&mut self) -> ::windows::core::Result<u32>;
    fn SetInterruptTimeout(&mut self, seconds: u32) -> ::windows::core::Result<()>;
    fn GetLogFile(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn OpenLogFile(&mut self, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn CloseLogFile(&mut self) -> ::windows::core::Result<()>;
    fn GetLogMask(&mut self) -> ::windows::core::Result<u32>;
    fn SetLogMask(&mut self, mask: u32) -> ::windows::core::Result<()>;
    fn Input(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::Result<()>;
    fn ReturnInput(&mut self, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn Output(&mut self, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputVaList(&mut self, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn ControlledOutput(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn ControlledOutputVaList(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn OutputPrompt(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputPromptVaList(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn GetPromptText(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputCurrentState(&mut self, outputcontrol: u32, flags: u32) -> ::windows::core::Result<()>;
    fn OutputVersionInformation(&mut self, outputcontrol: u32) -> ::windows::core::Result<()>;
    fn GetNotifyEventHandle(&mut self) -> ::windows::core::Result<u64>;
    fn SetNotifyEventHandle(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn Assemble(&mut self, offset: u64, instr: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn Disassemble(&mut self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::Result<()>;
    fn GetDisassembleEffectiveOffset(&mut self) -> ::windows::core::Result<u64>;
    fn OutputDisassembly(&mut self, outputcontrol: u32, offset: u64, flags: u32) -> ::windows::core::Result<u64>;
    fn OutputDisassemblyLines(&mut self, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::Result<()>;
    fn GetNearInstruction(&mut self, offset: u64, delta: i32) -> ::windows::core::Result<u64>;
    fn GetStackTrace(&mut self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn GetReturnOffset(&mut self) -> ::windows::core::Result<u64>;
    fn OutputStackTrace(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetDebuggeeType(&mut self, class: *mut u32, qualifier: *mut u32) -> ::windows::core::Result<()>;
    fn GetActualProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn GetExecutingProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberPossibleExecutingProcessorTypes(&mut self) -> ::windows::core::Result<u32>;
    fn GetPossibleExecutingProcessorTypes(&mut self, start: u32, count: u32, types: *mut u32) -> ::windows::core::Result<()>;
    fn GetNumberProcessors(&mut self) -> ::windows::core::Result<u32>;
    fn GetSystemVersion(&mut self, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::Result<()>;
    fn GetPageSize(&mut self) -> ::windows::core::Result<u32>;
    fn IsPointer64Bit(&mut self) -> ::windows::core::Result<()>;
    fn ReadBugCheckData(&mut self, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::Result<()>;
    fn GetNumberSupportedProcessorTypes(&mut self) -> ::windows::core::Result<u32>;
    fn GetSupportedProcessorTypes(&mut self, start: u32, count: u32, types: *mut u32) -> ::windows::core::Result<()>;
    fn GetProcessorTypeNames(&mut self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEffectiveProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn SetEffectiveProcessorType(&mut self, r#type: u32) -> ::windows::core::Result<()>;
    fn GetExecutionStatus(&mut self) -> ::windows::core::Result<u32>;
    fn SetExecutionStatus(&mut self, status: u32) -> ::windows::core::Result<()>;
    fn GetCodeLevel(&mut self) -> ::windows::core::Result<u32>;
    fn SetCodeLevel(&mut self, level: u32) -> ::windows::core::Result<()>;
    fn GetEngineOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetSystemErrorControl(&mut self, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::Result<()>;
    fn SetSystemErrorControl(&mut self, outputlevel: u32, breaklevel: u32) -> ::windows::core::Result<()>;
    fn GetTextMacro(&mut self, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextMacro(&mut self, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetRadix(&mut self) -> ::windows::core::Result<u32>;
    fn SetRadix(&mut self, radix: u32) -> ::windows::core::Result<()>;
    fn Evaluate(&mut self, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::Result<()>;
    fn CoerceValue(&mut self, r#in: *const DEBUG_VALUE, outtype: u32) -> ::windows::core::Result<DEBUG_VALUE>;
    fn CoerceValues(&mut self, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn Execute(&mut self, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn ExecuteCommandFile(&mut self, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetNumberBreakpoints(&mut self) -> ::windows::core::Result<u32>;
    fn GetBreakpointByIndex(&mut self, index: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn GetBreakpointById(&mut self, id: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn GetBreakpointParameters(&mut self, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::Result<()>;
    fn AddBreakpoint(&mut self, r#type: u32, desiredid: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn RemoveBreakpoint(&mut self, bp: ::core::option::Option<IDebugBreakpoint>) -> ::windows::core::Result<()>;
    fn AddExtension(&mut self, path: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<u64>;
    fn RemoveExtension(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn GetExtensionByPath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn CallExtension(&mut self, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetExtensionFunction(&mut self, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut super::super::super::Foundation::FARPROC) -> ::windows::core::Result<()>;
    fn GetWindbgExtensionApis32(&mut self, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::Result<()>;
    fn GetWindbgExtensionApis64(&mut self, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::Result<()>;
    fn GetNumberEventFilters(&mut self, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterText(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterCommand(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetEventFilterCommand(&mut self, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSpecificFilterParameters(&mut self, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn SetSpecificFilterParameters(&mut self, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetSpecificFilterArgument(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSpecificFilterArgument(&mut self, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetExceptionFilterParameters(&mut self, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn SetExceptionFilterParameters(&mut self, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetExceptionFilterSecondCommand(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetExceptionFilterSecondCommand(&mut self, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn WaitForEvent(&mut self, flags: u32, timeout: u32) -> ::windows::core::Result<()>;
    fn GetLastEventInformation(&mut self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentTimeDate(&mut self) -> ::windows::core::Result<u32>;
    fn GetCurrentSystemUpTime(&mut self) -> ::windows::core::Result<u32>;
    fn GetDumpFormatFlags(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberTextReplacements(&mut self) -> ::windows::core::Result<u32>;
    fn GetTextReplacement(&mut self, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextReplacement(&mut self, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn RemoveTextReplacements(&mut self) -> ::windows::core::Result<()>;
    fn OutputTextReplacements(&mut self, outputcontrol: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetAssemblyOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddAssemblyOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveAssemblyOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetAssemblyOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetExpressionSyntax(&mut self) -> ::windows::core::Result<u32>;
    fn SetExpressionSyntax(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn SetExpressionSyntaxByName(&mut self, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetNumberExpressionSyntaxes(&mut self) -> ::windows::core::Result<u32>;
    fn GetExpressionSyntaxNames(&mut self, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetNumberEvents(&mut self) -> ::windows::core::Result<u32>;
    fn GetEventIndexDescription(&mut self, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentEventIndex(&mut self) -> ::windows::core::Result<u32>;
    fn SetNextEventIndex(&mut self, relation: u32, value: u32) -> ::windows::core::Result<u32>;
    fn GetLogFileWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn OpenLogFileWide(&mut self, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn InputWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::Result<()>;
    fn ReturnInputWide(&mut self, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputWide(&mut self, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputVaListWide(&mut self, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn ControlledOutputWide(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn ControlledOutputVaListWide(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn OutputPromptWide(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputPromptVaListWide(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn GetPromptTextWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn AssembleWide(&mut self, offset: u64, instr: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn DisassembleWide(&mut self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::Result<()>;
    fn GetProcessorTypeNamesWide(&mut self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTextMacroWide(&mut self, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextMacroWide(&mut self, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn EvaluateWide(&mut self, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::Result<()>;
    fn ExecuteWide(&mut self, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn ExecuteCommandFileWide(&mut self, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetBreakpointByIndex2(&mut self, index: u32) -> ::windows::core::Result<IDebugBreakpoint2>;
    fn GetBreakpointById2(&mut self, id: u32) -> ::windows::core::Result<IDebugBreakpoint2>;
    fn AddBreakpoint2(&mut self, r#type: u32, desiredid: u32) -> ::windows::core::Result<IDebugBreakpoint2>;
    fn RemoveBreakpoint2(&mut self, bp: ::core::option::Option<IDebugBreakpoint2>) -> ::windows::core::Result<()>;
    fn AddExtensionWide(&mut self, path: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<u64>;
    fn GetExtensionByPathWide(&mut self, path: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn CallExtensionWide(&mut self, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetExtensionFunctionWide(&mut self, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut super::super::super::Foundation::FARPROC) -> ::windows::core::Result<()>;
    fn GetEventFilterTextWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterCommandWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetEventFilterCommandWide(&mut self, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetSpecificFilterArgumentWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSpecificFilterArgumentWide(&mut self, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetExceptionFilterSecondCommandWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetExceptionFilterSecondCommandWide(&mut self, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetLastEventInformationWide(&mut self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::Result<()>;
    fn GetTextReplacementWide(&mut self, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextReplacementWide(&mut self, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn SetExpressionSyntaxByNameWide(&mut self, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetExpressionSyntaxNamesWide(&mut self, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventIndexDescriptionWide(&mut self, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32) -> ::windows::core::Result<u32>;
    fn GetLogFile2(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::Result<()>;
    fn OpenLogFile2(&mut self, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetLogFile2Wide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::Result<()>;
    fn OpenLogFile2Wide(&mut self, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetSystemVersionValues(&mut self, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::Result<()>;
    fn GetSystemVersionString(&mut self, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSystemVersionStringWide(&mut self, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetContextStackTrace(&mut self, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn OutputContextStackTrace(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetStoredEventInformation(&mut self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::Result<()>;
    fn GetManagedStatus(&mut self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::Result<()>;
    fn GetManagedStatusWide(&mut self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::Result<()>;
    fn ResetManagedStatus(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetStackTraceEx(&mut self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn OutputStackTraceEx(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetContextStackTraceEx(&mut self, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn OutputContextStackTraceEx(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetBreakpointByGuid(&mut self, guid: *const ::windows::core::GUID) -> ::windows::core::Result<IDebugBreakpoint3>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl IDebugControl5Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugControl5Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugControl5Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetInterrupt().into()
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInterrupt(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInterruptTimeout() {
                ::core::result::Result::Ok(ok__) => {
                    *seconds = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInterruptTimeout(::core::mem::transmute_copy(&seconds)).into()
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFile(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFile(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CloseLogFile().into()
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLogMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetLogMask(::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn Input<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Input(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into()
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReturnInput(::core::mem::transmute_copy(&buffer)).into()
        }
        unsafe extern "system" fn Output<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Output(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVaList(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutput(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutputVaList(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPrompt(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPromptVaList(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPromptText(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputCurrentState(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVersionInformation(::core::mem::transmute_copy(&outputcontrol)).into()
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNotifyEventHandle() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetNotifyEventHandle(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Assemble(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Disassemble(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into()
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDisassembleEffectiveOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OutputDisassembly(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputDisassemblyLines(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&previouslines), ::core::mem::transmute_copy(&totallines), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)).into()
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNearInstruction(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta)) {
                ::core::result::Result::Ok(ok__) => {
                    *nearoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStackTrace(::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetReturnOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputStackTrace(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDebuggeeType(::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into()
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetActualProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutingProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberPossibleExecutingProcessorTypes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPossibleExecutingProcessorTypes(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into()
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberProcessors() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .GetSystemVersion(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), ::core::mem::transmute_copy(&servicepackstringsize), ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), ::core::mem::transmute_copy(&buildstringsize), ::core::mem::transmute_copy(&buildstringused))
                .into()
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPageSize() {
                ::core::result::Result::Ok(ok__) => {
                    *size = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsPointer64Bit().into()
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadBugCheckData(::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)).into()
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberSupportedProcessorTypes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSupportedProcessorTypes(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into()
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetProcessorTypeNames(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEffectiveProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEffectiveProcessorType(::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatus() {
                ::core::result::Result::Ok(ok__) => {
                    *status = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExecutionStatus(::core::mem::transmute_copy(&status)).into()
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCodeLevel() {
                ::core::result::Result::Ok(ok__) => {
                    *level = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCodeLevel(::core::mem::transmute_copy(&level)).into()
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEngineOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into()
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into()
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextMacro(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into()
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextMacro(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&r#macro)).into()
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRadix() {
                ::core::result::Result::Ok(ok__) => {
                    *radix = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetRadix(::core::mem::transmute_copy(&radix)).into()
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Evaluate(::core::mem::transmute_copy(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into()
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CoerceValue(::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtype)) {
                ::core::result::Result::Ok(ok__) => {
                    *out = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CoerceValues(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtypes), ::core::mem::transmute_copy(&out)).into()
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Execute(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&command), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExecuteCommandFile(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&commandfile), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberBreakpoints() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetBreakpointParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveBreakpoint(::core::mem::transmute(&bp)).into()
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddExtension(::core::mem::transmute_copy(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveExtension(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPath(::core::mem::transmute_copy(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CallExtension(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&function), ::core::mem::transmute_copy(&arguments)).into()
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExtensionFunction(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&funcname), ::core::mem::transmute_copy(&function)).into()
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetWindbgExtensionApis32(::core::mem::transmute_copy(&api)).into()
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetWindbgExtensionApis64(::core::mem::transmute_copy(&api)).into()
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNumberEventFilters(::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)).into()
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterText(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventFilterCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterArgument(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into()
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterArgument(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&argument)).into()
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&codes), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterSecondCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterSecondCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WaitForEvent(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLastEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into()
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentTimeDate() {
                ::core::result::Result::Ok(ok__) => {
                    *timedate = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemUpTime() {
                ::core::result::Result::Ok(ok__) => {
                    *uptime = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDumpFormatFlags() {
                ::core::result::Result::Ok(ok__) => {
                    *formatflags = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberTextReplacements() {
                ::core::result::Result::Ok(ok__) => {
                    *numrepl = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextReplacement(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into()
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextReplacement(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&dsttext)).into()
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveTextReplacements().into()
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTextReplacements(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetAssemblyOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAssemblyOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddAssemblyOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddAssemblyOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveAssemblyOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetAssemblyOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetAssemblyOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetExpressionSyntax<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntax() {
                ::core::result::Result::Ok(ok__) => {
                    *flags = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntax<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExpressionSyntax(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExpressionSyntaxByName(::core::mem::transmute_copy(&abbrevname)).into()
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberExpressionSyntaxes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExpressionSyntaxNames(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetNumberEvents<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberEvents() {
                ::core::result::Result::Ok(ok__) => {
                    *events = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventIndexDescription<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescription(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *descsize = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentEventIndex<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentEventIndex() {
                ::core::result::Result::Ok(ok__) => {
                    *index = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNextEventIndex<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetNextEventIndex(::core::mem::transmute_copy(&relation), ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *nextindex = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFileWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFileWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn OpenLogFileWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFileWide(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn InputWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).InputWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into()
        }
        unsafe extern "system" fn ReturnInputWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReturnInputWide(::core::mem::transmute_copy(&buffer)).into()
        }
        unsafe extern "system" fn OutputWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputWide(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputVaListWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVaListWide(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn ControlledOutputWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutputWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutputVaListWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn OutputPromptWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPromptWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputPromptVaListWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPromptVaListWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn GetPromptTextWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPromptTextWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn AssembleWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AssembleWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisassembleWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DisassembleWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into()
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetProcessorTypeNamesWide(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetTextMacroWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextMacroWide(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into()
        }
        unsafe extern "system" fn SetTextMacroWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextMacroWide(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&r#macro)).into()
        }
        unsafe extern "system" fn EvaluateWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EvaluateWide(::core::mem::transmute_copy(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into()
        }
        unsafe extern "system" fn ExecuteWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExecuteWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&command), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExecuteCommandFileWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&commandfile), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex2(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById2<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById2(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddBreakpoint2<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint2(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint2<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveBreakpoint2(::core::mem::transmute(&bp)).into()
        }
        unsafe extern "system" fn AddExtensionWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddExtensionWide(::core::mem::transmute_copy(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionByPathWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPathWide(::core::mem::transmute_copy(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtensionWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CallExtensionWide(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&function), ::core::mem::transmute_copy(&arguments)).into()
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExtensionFunctionWide(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&funcname), ::core::mem::transmute_copy(&function)).into()
        }
        unsafe extern "system" fn GetEventFilterTextWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterTextWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventFilterCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterArgumentWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into()
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterArgumentWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&argument)).into()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterSecondCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterSecondCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetLastEventInformationWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLastEventInformationWide(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into()
        }
        unsafe extern "system" fn GetTextReplacementWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextReplacementWide(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into()
        }
        unsafe extern "system" fn SetTextReplacementWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextReplacementWide(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&dsttext)).into()
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExpressionSyntaxByNameWide(::core::mem::transmute_copy(&abbrevname)).into()
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExpressionSyntaxNamesWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescriptionWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *descsize = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile2<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFile2(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn OpenLogFile2<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFile2(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetLogFile2Wide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFile2Wide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn OpenLogFile2Wide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFile2Wide(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetSystemVersionValues<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemVersionValues(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&win32major), ::core::mem::transmute_copy(&win32minor), ::core::mem::transmute_copy(&kdmajor), ::core::mem::transmute_copy(&kdminor)).into()
        }
        unsafe extern "system" fn GetSystemVersionString<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemVersionString(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemVersionStringWide(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetContextStackTrace<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetContextStackTrace(::core::mem::transmute_copy(&startcontext), ::core::mem::transmute_copy(&startcontextsize), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn OutputContextStackTrace<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputContextStackTrace(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetStoredEventInformation<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStoredEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize), ::core::mem::transmute_copy(&contextused), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused)).into()
        }
        unsafe extern "system" fn GetManagedStatus<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetManagedStatus(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into()
        }
        unsafe extern "system" fn GetManagedStatusWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetManagedStatusWide(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into()
        }
        unsafe extern "system" fn ResetManagedStatus<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ResetManagedStatus(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetStackTraceEx<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStackTraceEx(::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn OutputStackTraceEx<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputStackTraceEx(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetContextStackTraceEx<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetContextStackTraceEx(::core::mem::transmute_copy(&startcontext), ::core::mem::transmute_copy(&startcontextsize), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn OutputContextStackTraceEx<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputContextStackTraceEx(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetBreakpointByGuid<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: *const ::windows::core::GUID, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByGuid(::core::mem::transmute_copy(&guid)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetInterrupt: GetInterrupt::<Impl, IMPL_OFFSET>,
            SetInterrupt: SetInterrupt::<Impl, IMPL_OFFSET>,
            GetInterruptTimeout: GetInterruptTimeout::<Impl, IMPL_OFFSET>,
            SetInterruptTimeout: SetInterruptTimeout::<Impl, IMPL_OFFSET>,
            GetLogFile: GetLogFile::<Impl, IMPL_OFFSET>,
            OpenLogFile: OpenLogFile::<Impl, IMPL_OFFSET>,
            CloseLogFile: CloseLogFile::<Impl, IMPL_OFFSET>,
            GetLogMask: GetLogMask::<Impl, IMPL_OFFSET>,
            SetLogMask: SetLogMask::<Impl, IMPL_OFFSET>,
            Input: Input::<Impl, IMPL_OFFSET>,
            ReturnInput: ReturnInput::<Impl, IMPL_OFFSET>,
            Output: Output::<Impl, IMPL_OFFSET>,
            OutputVaList: OutputVaList::<Impl, IMPL_OFFSET>,
            ControlledOutput: ControlledOutput::<Impl, IMPL_OFFSET>,
            ControlledOutputVaList: ControlledOutputVaList::<Impl, IMPL_OFFSET>,
            OutputPrompt: OutputPrompt::<Impl, IMPL_OFFSET>,
            OutputPromptVaList: OutputPromptVaList::<Impl, IMPL_OFFSET>,
            GetPromptText: GetPromptText::<Impl, IMPL_OFFSET>,
            OutputCurrentState: OutputCurrentState::<Impl, IMPL_OFFSET>,
            OutputVersionInformation: OutputVersionInformation::<Impl, IMPL_OFFSET>,
            GetNotifyEventHandle: GetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            SetNotifyEventHandle: SetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            Assemble: Assemble::<Impl, IMPL_OFFSET>,
            Disassemble: Disassemble::<Impl, IMPL_OFFSET>,
            GetDisassembleEffectiveOffset: GetDisassembleEffectiveOffset::<Impl, IMPL_OFFSET>,
            OutputDisassembly: OutputDisassembly::<Impl, IMPL_OFFSET>,
            OutputDisassemblyLines: OutputDisassemblyLines::<Impl, IMPL_OFFSET>,
            GetNearInstruction: GetNearInstruction::<Impl, IMPL_OFFSET>,
            GetStackTrace: GetStackTrace::<Impl, IMPL_OFFSET>,
            GetReturnOffset: GetReturnOffset::<Impl, IMPL_OFFSET>,
            OutputStackTrace: OutputStackTrace::<Impl, IMPL_OFFSET>,
            GetDebuggeeType: GetDebuggeeType::<Impl, IMPL_OFFSET>,
            GetActualProcessorType: GetActualProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutingProcessorType: GetExecutingProcessorType::<Impl, IMPL_OFFSET>,
            GetNumberPossibleExecutingProcessorTypes: GetNumberPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetPossibleExecutingProcessorTypes: GetPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetNumberProcessors: GetNumberProcessors::<Impl, IMPL_OFFSET>,
            GetSystemVersion: GetSystemVersion::<Impl, IMPL_OFFSET>,
            GetPageSize: GetPageSize::<Impl, IMPL_OFFSET>,
            IsPointer64Bit: IsPointer64Bit::<Impl, IMPL_OFFSET>,
            ReadBugCheckData: ReadBugCheckData::<Impl, IMPL_OFFSET>,
            GetNumberSupportedProcessorTypes: GetNumberSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetSupportedProcessorTypes: GetSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNames: GetProcessorTypeNames::<Impl, IMPL_OFFSET>,
            GetEffectiveProcessorType: GetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            SetEffectiveProcessorType: SetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutionStatus: GetExecutionStatus::<Impl, IMPL_OFFSET>,
            SetExecutionStatus: SetExecutionStatus::<Impl, IMPL_OFFSET>,
            GetCodeLevel: GetCodeLevel::<Impl, IMPL_OFFSET>,
            SetCodeLevel: SetCodeLevel::<Impl, IMPL_OFFSET>,
            GetEngineOptions: GetEngineOptions::<Impl, IMPL_OFFSET>,
            AddEngineOptions: AddEngineOptions::<Impl, IMPL_OFFSET>,
            RemoveEngineOptions: RemoveEngineOptions::<Impl, IMPL_OFFSET>,
            SetEngineOptions: SetEngineOptions::<Impl, IMPL_OFFSET>,
            GetSystemErrorControl: GetSystemErrorControl::<Impl, IMPL_OFFSET>,
            SetSystemErrorControl: SetSystemErrorControl::<Impl, IMPL_OFFSET>,
            GetTextMacro: GetTextMacro::<Impl, IMPL_OFFSET>,
            SetTextMacro: SetTextMacro::<Impl, IMPL_OFFSET>,
            GetRadix: GetRadix::<Impl, IMPL_OFFSET>,
            SetRadix: SetRadix::<Impl, IMPL_OFFSET>,
            Evaluate: Evaluate::<Impl, IMPL_OFFSET>,
            CoerceValue: CoerceValue::<Impl, IMPL_OFFSET>,
            CoerceValues: CoerceValues::<Impl, IMPL_OFFSET>,
            Execute: Execute::<Impl, IMPL_OFFSET>,
            ExecuteCommandFile: ExecuteCommandFile::<Impl, IMPL_OFFSET>,
            GetNumberBreakpoints: GetNumberBreakpoints::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex: GetBreakpointByIndex::<Impl, IMPL_OFFSET>,
            GetBreakpointById: GetBreakpointById::<Impl, IMPL_OFFSET>,
            GetBreakpointParameters: GetBreakpointParameters::<Impl, IMPL_OFFSET>,
            AddBreakpoint: AddBreakpoint::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint: RemoveBreakpoint::<Impl, IMPL_OFFSET>,
            AddExtension: AddExtension::<Impl, IMPL_OFFSET>,
            RemoveExtension: RemoveExtension::<Impl, IMPL_OFFSET>,
            GetExtensionByPath: GetExtensionByPath::<Impl, IMPL_OFFSET>,
            CallExtension: CallExtension::<Impl, IMPL_OFFSET>,
            GetExtensionFunction: GetExtensionFunction::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis32: GetWindbgExtensionApis32::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis64: GetWindbgExtensionApis64::<Impl, IMPL_OFFSET>,
            GetNumberEventFilters: GetNumberEventFilters::<Impl, IMPL_OFFSET>,
            GetEventFilterText: GetEventFilterText::<Impl, IMPL_OFFSET>,
            GetEventFilterCommand: GetEventFilterCommand::<Impl, IMPL_OFFSET>,
            SetEventFilterCommand: SetEventFilterCommand::<Impl, IMPL_OFFSET>,
            GetSpecificFilterParameters: GetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            SetSpecificFilterParameters: SetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgument: GetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgument: SetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            GetExceptionFilterParameters: GetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            SetExceptionFilterParameters: SetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommand: GetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommand: SetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            WaitForEvent: WaitForEvent::<Impl, IMPL_OFFSET>,
            GetLastEventInformation: GetLastEventInformation::<Impl, IMPL_OFFSET>,
            GetCurrentTimeDate: GetCurrentTimeDate::<Impl, IMPL_OFFSET>,
            GetCurrentSystemUpTime: GetCurrentSystemUpTime::<Impl, IMPL_OFFSET>,
            GetDumpFormatFlags: GetDumpFormatFlags::<Impl, IMPL_OFFSET>,
            GetNumberTextReplacements: GetNumberTextReplacements::<Impl, IMPL_OFFSET>,
            GetTextReplacement: GetTextReplacement::<Impl, IMPL_OFFSET>,
            SetTextReplacement: SetTextReplacement::<Impl, IMPL_OFFSET>,
            RemoveTextReplacements: RemoveTextReplacements::<Impl, IMPL_OFFSET>,
            OutputTextReplacements: OutputTextReplacements::<Impl, IMPL_OFFSET>,
            GetAssemblyOptions: GetAssemblyOptions::<Impl, IMPL_OFFSET>,
            AddAssemblyOptions: AddAssemblyOptions::<Impl, IMPL_OFFSET>,
            RemoveAssemblyOptions: RemoveAssemblyOptions::<Impl, IMPL_OFFSET>,
            SetAssemblyOptions: SetAssemblyOptions::<Impl, IMPL_OFFSET>,
            GetExpressionSyntax: GetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntax: SetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByName: SetExpressionSyntaxByName::<Impl, IMPL_OFFSET>,
            GetNumberExpressionSyntaxes: GetNumberExpressionSyntaxes::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNames: GetExpressionSyntaxNames::<Impl, IMPL_OFFSET>,
            GetNumberEvents: GetNumberEvents::<Impl, IMPL_OFFSET>,
            GetEventIndexDescription: GetEventIndexDescription::<Impl, IMPL_OFFSET>,
            GetCurrentEventIndex: GetCurrentEventIndex::<Impl, IMPL_OFFSET>,
            SetNextEventIndex: SetNextEventIndex::<Impl, IMPL_OFFSET>,
            GetLogFileWide: GetLogFileWide::<Impl, IMPL_OFFSET>,
            OpenLogFileWide: OpenLogFileWide::<Impl, IMPL_OFFSET>,
            InputWide: InputWide::<Impl, IMPL_OFFSET>,
            ReturnInputWide: ReturnInputWide::<Impl, IMPL_OFFSET>,
            OutputWide: OutputWide::<Impl, IMPL_OFFSET>,
            OutputVaListWide: OutputVaListWide::<Impl, IMPL_OFFSET>,
            ControlledOutputWide: ControlledOutputWide::<Impl, IMPL_OFFSET>,
            ControlledOutputVaListWide: ControlledOutputVaListWide::<Impl, IMPL_OFFSET>,
            OutputPromptWide: OutputPromptWide::<Impl, IMPL_OFFSET>,
            OutputPromptVaListWide: OutputPromptVaListWide::<Impl, IMPL_OFFSET>,
            GetPromptTextWide: GetPromptTextWide::<Impl, IMPL_OFFSET>,
            AssembleWide: AssembleWide::<Impl, IMPL_OFFSET>,
            DisassembleWide: DisassembleWide::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNamesWide: GetProcessorTypeNamesWide::<Impl, IMPL_OFFSET>,
            GetTextMacroWide: GetTextMacroWide::<Impl, IMPL_OFFSET>,
            SetTextMacroWide: SetTextMacroWide::<Impl, IMPL_OFFSET>,
            EvaluateWide: EvaluateWide::<Impl, IMPL_OFFSET>,
            ExecuteWide: ExecuteWide::<Impl, IMPL_OFFSET>,
            ExecuteCommandFileWide: ExecuteCommandFileWide::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex2: GetBreakpointByIndex2::<Impl, IMPL_OFFSET>,
            GetBreakpointById2: GetBreakpointById2::<Impl, IMPL_OFFSET>,
            AddBreakpoint2: AddBreakpoint2::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint2: RemoveBreakpoint2::<Impl, IMPL_OFFSET>,
            AddExtensionWide: AddExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionByPathWide: GetExtensionByPathWide::<Impl, IMPL_OFFSET>,
            CallExtensionWide: CallExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionFunctionWide: GetExtensionFunctionWide::<Impl, IMPL_OFFSET>,
            GetEventFilterTextWide: GetEventFilterTextWide::<Impl, IMPL_OFFSET>,
            GetEventFilterCommandWide: GetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            SetEventFilterCommandWide: SetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgumentWide: GetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgumentWide: SetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommandWide: GetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommandWide: SetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            GetLastEventInformationWide: GetLastEventInformationWide::<Impl, IMPL_OFFSET>,
            GetTextReplacementWide: GetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetTextReplacementWide: SetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByNameWide: SetExpressionSyntaxByNameWide::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNamesWide: GetExpressionSyntaxNamesWide::<Impl, IMPL_OFFSET>,
            GetEventIndexDescriptionWide: GetEventIndexDescriptionWide::<Impl, IMPL_OFFSET>,
            GetLogFile2: GetLogFile2::<Impl, IMPL_OFFSET>,
            OpenLogFile2: OpenLogFile2::<Impl, IMPL_OFFSET>,
            GetLogFile2Wide: GetLogFile2Wide::<Impl, IMPL_OFFSET>,
            OpenLogFile2Wide: OpenLogFile2Wide::<Impl, IMPL_OFFSET>,
            GetSystemVersionValues: GetSystemVersionValues::<Impl, IMPL_OFFSET>,
            GetSystemVersionString: GetSystemVersionString::<Impl, IMPL_OFFSET>,
            GetSystemVersionStringWide: GetSystemVersionStringWide::<Impl, IMPL_OFFSET>,
            GetContextStackTrace: GetContextStackTrace::<Impl, IMPL_OFFSET>,
            OutputContextStackTrace: OutputContextStackTrace::<Impl, IMPL_OFFSET>,
            GetStoredEventInformation: GetStoredEventInformation::<Impl, IMPL_OFFSET>,
            GetManagedStatus: GetManagedStatus::<Impl, IMPL_OFFSET>,
            GetManagedStatusWide: GetManagedStatusWide::<Impl, IMPL_OFFSET>,
            ResetManagedStatus: ResetManagedStatus::<Impl, IMPL_OFFSET>,
            GetStackTraceEx: GetStackTraceEx::<Impl, IMPL_OFFSET>,
            OutputStackTraceEx: OutputStackTraceEx::<Impl, IMPL_OFFSET>,
            GetContextStackTraceEx: GetContextStackTraceEx::<Impl, IMPL_OFFSET>,
            OutputContextStackTraceEx: OutputContextStackTraceEx::<Impl, IMPL_OFFSET>,
            GetBreakpointByGuid: GetBreakpointByGuid::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugControl5 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl6Impl: Sized {
    fn GetInterrupt(&mut self) -> ::windows::core::Result<()>;
    fn SetInterrupt(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetInterruptTimeout(&mut self) -> ::windows::core::Result<u32>;
    fn SetInterruptTimeout(&mut self, seconds: u32) -> ::windows::core::Result<()>;
    fn GetLogFile(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn OpenLogFile(&mut self, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn CloseLogFile(&mut self) -> ::windows::core::Result<()>;
    fn GetLogMask(&mut self) -> ::windows::core::Result<u32>;
    fn SetLogMask(&mut self, mask: u32) -> ::windows::core::Result<()>;
    fn Input(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::Result<()>;
    fn ReturnInput(&mut self, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn Output(&mut self, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputVaList(&mut self, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn ControlledOutput(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn ControlledOutputVaList(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn OutputPrompt(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputPromptVaList(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn GetPromptText(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputCurrentState(&mut self, outputcontrol: u32, flags: u32) -> ::windows::core::Result<()>;
    fn OutputVersionInformation(&mut self, outputcontrol: u32) -> ::windows::core::Result<()>;
    fn GetNotifyEventHandle(&mut self) -> ::windows::core::Result<u64>;
    fn SetNotifyEventHandle(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn Assemble(&mut self, offset: u64, instr: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn Disassemble(&mut self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::Result<()>;
    fn GetDisassembleEffectiveOffset(&mut self) -> ::windows::core::Result<u64>;
    fn OutputDisassembly(&mut self, outputcontrol: u32, offset: u64, flags: u32) -> ::windows::core::Result<u64>;
    fn OutputDisassemblyLines(&mut self, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::Result<()>;
    fn GetNearInstruction(&mut self, offset: u64, delta: i32) -> ::windows::core::Result<u64>;
    fn GetStackTrace(&mut self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn GetReturnOffset(&mut self) -> ::windows::core::Result<u64>;
    fn OutputStackTrace(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetDebuggeeType(&mut self, class: *mut u32, qualifier: *mut u32) -> ::windows::core::Result<()>;
    fn GetActualProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn GetExecutingProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberPossibleExecutingProcessorTypes(&mut self) -> ::windows::core::Result<u32>;
    fn GetPossibleExecutingProcessorTypes(&mut self, start: u32, count: u32, types: *mut u32) -> ::windows::core::Result<()>;
    fn GetNumberProcessors(&mut self) -> ::windows::core::Result<u32>;
    fn GetSystemVersion(&mut self, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::Result<()>;
    fn GetPageSize(&mut self) -> ::windows::core::Result<u32>;
    fn IsPointer64Bit(&mut self) -> ::windows::core::Result<()>;
    fn ReadBugCheckData(&mut self, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::Result<()>;
    fn GetNumberSupportedProcessorTypes(&mut self) -> ::windows::core::Result<u32>;
    fn GetSupportedProcessorTypes(&mut self, start: u32, count: u32, types: *mut u32) -> ::windows::core::Result<()>;
    fn GetProcessorTypeNames(&mut self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEffectiveProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn SetEffectiveProcessorType(&mut self, r#type: u32) -> ::windows::core::Result<()>;
    fn GetExecutionStatus(&mut self) -> ::windows::core::Result<u32>;
    fn SetExecutionStatus(&mut self, status: u32) -> ::windows::core::Result<()>;
    fn GetCodeLevel(&mut self) -> ::windows::core::Result<u32>;
    fn SetCodeLevel(&mut self, level: u32) -> ::windows::core::Result<()>;
    fn GetEngineOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetSystemErrorControl(&mut self, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::Result<()>;
    fn SetSystemErrorControl(&mut self, outputlevel: u32, breaklevel: u32) -> ::windows::core::Result<()>;
    fn GetTextMacro(&mut self, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextMacro(&mut self, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetRadix(&mut self) -> ::windows::core::Result<u32>;
    fn SetRadix(&mut self, radix: u32) -> ::windows::core::Result<()>;
    fn Evaluate(&mut self, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::Result<()>;
    fn CoerceValue(&mut self, r#in: *const DEBUG_VALUE, outtype: u32) -> ::windows::core::Result<DEBUG_VALUE>;
    fn CoerceValues(&mut self, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn Execute(&mut self, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn ExecuteCommandFile(&mut self, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetNumberBreakpoints(&mut self) -> ::windows::core::Result<u32>;
    fn GetBreakpointByIndex(&mut self, index: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn GetBreakpointById(&mut self, id: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn GetBreakpointParameters(&mut self, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::Result<()>;
    fn AddBreakpoint(&mut self, r#type: u32, desiredid: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn RemoveBreakpoint(&mut self, bp: ::core::option::Option<IDebugBreakpoint>) -> ::windows::core::Result<()>;
    fn AddExtension(&mut self, path: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<u64>;
    fn RemoveExtension(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn GetExtensionByPath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn CallExtension(&mut self, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetExtensionFunction(&mut self, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut super::super::super::Foundation::FARPROC) -> ::windows::core::Result<()>;
    fn GetWindbgExtensionApis32(&mut self, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::Result<()>;
    fn GetWindbgExtensionApis64(&mut self, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::Result<()>;
    fn GetNumberEventFilters(&mut self, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterText(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterCommand(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetEventFilterCommand(&mut self, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSpecificFilterParameters(&mut self, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn SetSpecificFilterParameters(&mut self, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetSpecificFilterArgument(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSpecificFilterArgument(&mut self, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetExceptionFilterParameters(&mut self, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn SetExceptionFilterParameters(&mut self, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetExceptionFilterSecondCommand(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetExceptionFilterSecondCommand(&mut self, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn WaitForEvent(&mut self, flags: u32, timeout: u32) -> ::windows::core::Result<()>;
    fn GetLastEventInformation(&mut self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentTimeDate(&mut self) -> ::windows::core::Result<u32>;
    fn GetCurrentSystemUpTime(&mut self) -> ::windows::core::Result<u32>;
    fn GetDumpFormatFlags(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberTextReplacements(&mut self) -> ::windows::core::Result<u32>;
    fn GetTextReplacement(&mut self, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextReplacement(&mut self, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn RemoveTextReplacements(&mut self) -> ::windows::core::Result<()>;
    fn OutputTextReplacements(&mut self, outputcontrol: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetAssemblyOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddAssemblyOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveAssemblyOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetAssemblyOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetExpressionSyntax(&mut self) -> ::windows::core::Result<u32>;
    fn SetExpressionSyntax(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn SetExpressionSyntaxByName(&mut self, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetNumberExpressionSyntaxes(&mut self) -> ::windows::core::Result<u32>;
    fn GetExpressionSyntaxNames(&mut self, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetNumberEvents(&mut self) -> ::windows::core::Result<u32>;
    fn GetEventIndexDescription(&mut self, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentEventIndex(&mut self) -> ::windows::core::Result<u32>;
    fn SetNextEventIndex(&mut self, relation: u32, value: u32) -> ::windows::core::Result<u32>;
    fn GetLogFileWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn OpenLogFileWide(&mut self, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn InputWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::Result<()>;
    fn ReturnInputWide(&mut self, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputWide(&mut self, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputVaListWide(&mut self, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn ControlledOutputWide(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn ControlledOutputVaListWide(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn OutputPromptWide(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputPromptVaListWide(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn GetPromptTextWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn AssembleWide(&mut self, offset: u64, instr: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn DisassembleWide(&mut self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::Result<()>;
    fn GetProcessorTypeNamesWide(&mut self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTextMacroWide(&mut self, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextMacroWide(&mut self, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn EvaluateWide(&mut self, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::Result<()>;
    fn ExecuteWide(&mut self, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn ExecuteCommandFileWide(&mut self, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetBreakpointByIndex2(&mut self, index: u32) -> ::windows::core::Result<IDebugBreakpoint2>;
    fn GetBreakpointById2(&mut self, id: u32) -> ::windows::core::Result<IDebugBreakpoint2>;
    fn AddBreakpoint2(&mut self, r#type: u32, desiredid: u32) -> ::windows::core::Result<IDebugBreakpoint2>;
    fn RemoveBreakpoint2(&mut self, bp: ::core::option::Option<IDebugBreakpoint2>) -> ::windows::core::Result<()>;
    fn AddExtensionWide(&mut self, path: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<u64>;
    fn GetExtensionByPathWide(&mut self, path: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn CallExtensionWide(&mut self, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetExtensionFunctionWide(&mut self, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut super::super::super::Foundation::FARPROC) -> ::windows::core::Result<()>;
    fn GetEventFilterTextWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterCommandWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetEventFilterCommandWide(&mut self, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetSpecificFilterArgumentWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSpecificFilterArgumentWide(&mut self, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetExceptionFilterSecondCommandWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetExceptionFilterSecondCommandWide(&mut self, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetLastEventInformationWide(&mut self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::Result<()>;
    fn GetTextReplacementWide(&mut self, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextReplacementWide(&mut self, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn SetExpressionSyntaxByNameWide(&mut self, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetExpressionSyntaxNamesWide(&mut self, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventIndexDescriptionWide(&mut self, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32) -> ::windows::core::Result<u32>;
    fn GetLogFile2(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::Result<()>;
    fn OpenLogFile2(&mut self, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetLogFile2Wide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::Result<()>;
    fn OpenLogFile2Wide(&mut self, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetSystemVersionValues(&mut self, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::Result<()>;
    fn GetSystemVersionString(&mut self, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSystemVersionStringWide(&mut self, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetContextStackTrace(&mut self, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn OutputContextStackTrace(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetStoredEventInformation(&mut self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::Result<()>;
    fn GetManagedStatus(&mut self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::Result<()>;
    fn GetManagedStatusWide(&mut self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::Result<()>;
    fn ResetManagedStatus(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetStackTraceEx(&mut self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn OutputStackTraceEx(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetContextStackTraceEx(&mut self, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn OutputContextStackTraceEx(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetBreakpointByGuid(&mut self, guid: *const ::windows::core::GUID) -> ::windows::core::Result<IDebugBreakpoint3>;
    fn GetExecutionStatusEx(&mut self) -> ::windows::core::Result<u32>;
    fn GetSynchronizationStatus(&mut self, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl IDebugControl6Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugControl6Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugControl6Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetInterrupt().into()
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInterrupt(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInterruptTimeout() {
                ::core::result::Result::Ok(ok__) => {
                    *seconds = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInterruptTimeout(::core::mem::transmute_copy(&seconds)).into()
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFile(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFile(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CloseLogFile().into()
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLogMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetLogMask(::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn Input<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Input(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into()
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReturnInput(::core::mem::transmute_copy(&buffer)).into()
        }
        unsafe extern "system" fn Output<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Output(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVaList(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutput(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutputVaList(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPrompt(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPromptVaList(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPromptText(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputCurrentState(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVersionInformation(::core::mem::transmute_copy(&outputcontrol)).into()
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNotifyEventHandle() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetNotifyEventHandle(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Assemble(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Disassemble(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into()
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDisassembleEffectiveOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OutputDisassembly(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputDisassemblyLines(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&previouslines), ::core::mem::transmute_copy(&totallines), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)).into()
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNearInstruction(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta)) {
                ::core::result::Result::Ok(ok__) => {
                    *nearoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStackTrace(::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetReturnOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputStackTrace(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDebuggeeType(::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into()
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetActualProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutingProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberPossibleExecutingProcessorTypes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPossibleExecutingProcessorTypes(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into()
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberProcessors() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .GetSystemVersion(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), ::core::mem::transmute_copy(&servicepackstringsize), ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), ::core::mem::transmute_copy(&buildstringsize), ::core::mem::transmute_copy(&buildstringused))
                .into()
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPageSize() {
                ::core::result::Result::Ok(ok__) => {
                    *size = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsPointer64Bit().into()
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadBugCheckData(::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)).into()
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberSupportedProcessorTypes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSupportedProcessorTypes(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into()
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetProcessorTypeNames(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEffectiveProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEffectiveProcessorType(::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatus() {
                ::core::result::Result::Ok(ok__) => {
                    *status = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExecutionStatus(::core::mem::transmute_copy(&status)).into()
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCodeLevel() {
                ::core::result::Result::Ok(ok__) => {
                    *level = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCodeLevel(::core::mem::transmute_copy(&level)).into()
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEngineOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into()
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into()
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextMacro(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into()
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextMacro(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&r#macro)).into()
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRadix() {
                ::core::result::Result::Ok(ok__) => {
                    *radix = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetRadix(::core::mem::transmute_copy(&radix)).into()
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Evaluate(::core::mem::transmute_copy(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into()
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CoerceValue(::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtype)) {
                ::core::result::Result::Ok(ok__) => {
                    *out = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CoerceValues(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtypes), ::core::mem::transmute_copy(&out)).into()
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Execute(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&command), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExecuteCommandFile(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&commandfile), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberBreakpoints() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetBreakpointParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveBreakpoint(::core::mem::transmute(&bp)).into()
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddExtension(::core::mem::transmute_copy(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveExtension(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPath(::core::mem::transmute_copy(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CallExtension(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&function), ::core::mem::transmute_copy(&arguments)).into()
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExtensionFunction(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&funcname), ::core::mem::transmute_copy(&function)).into()
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetWindbgExtensionApis32(::core::mem::transmute_copy(&api)).into()
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetWindbgExtensionApis64(::core::mem::transmute_copy(&api)).into()
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNumberEventFilters(::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)).into()
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterText(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventFilterCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterArgument(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into()
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterArgument(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&argument)).into()
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&codes), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterSecondCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterSecondCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WaitForEvent(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLastEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into()
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentTimeDate() {
                ::core::result::Result::Ok(ok__) => {
                    *timedate = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemUpTime() {
                ::core::result::Result::Ok(ok__) => {
                    *uptime = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDumpFormatFlags() {
                ::core::result::Result::Ok(ok__) => {
                    *formatflags = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberTextReplacements() {
                ::core::result::Result::Ok(ok__) => {
                    *numrepl = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextReplacement(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into()
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextReplacement(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&dsttext)).into()
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveTextReplacements().into()
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTextReplacements(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetAssemblyOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAssemblyOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddAssemblyOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddAssemblyOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveAssemblyOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetAssemblyOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetAssemblyOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetExpressionSyntax<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntax() {
                ::core::result::Result::Ok(ok__) => {
                    *flags = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntax<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExpressionSyntax(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExpressionSyntaxByName(::core::mem::transmute_copy(&abbrevname)).into()
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberExpressionSyntaxes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExpressionSyntaxNames(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetNumberEvents<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberEvents() {
                ::core::result::Result::Ok(ok__) => {
                    *events = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventIndexDescription<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescription(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *descsize = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentEventIndex<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentEventIndex() {
                ::core::result::Result::Ok(ok__) => {
                    *index = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNextEventIndex<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetNextEventIndex(::core::mem::transmute_copy(&relation), ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *nextindex = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFileWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFileWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn OpenLogFileWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFileWide(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn InputWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).InputWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into()
        }
        unsafe extern "system" fn ReturnInputWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReturnInputWide(::core::mem::transmute_copy(&buffer)).into()
        }
        unsafe extern "system" fn OutputWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputWide(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputVaListWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVaListWide(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn ControlledOutputWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutputWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutputVaListWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn OutputPromptWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPromptWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputPromptVaListWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPromptVaListWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn GetPromptTextWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPromptTextWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn AssembleWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AssembleWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisassembleWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DisassembleWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into()
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetProcessorTypeNamesWide(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetTextMacroWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextMacroWide(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into()
        }
        unsafe extern "system" fn SetTextMacroWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextMacroWide(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&r#macro)).into()
        }
        unsafe extern "system" fn EvaluateWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EvaluateWide(::core::mem::transmute_copy(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into()
        }
        unsafe extern "system" fn ExecuteWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExecuteWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&command), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExecuteCommandFileWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&commandfile), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex2(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById2<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById2(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddBreakpoint2<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint2(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint2<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveBreakpoint2(::core::mem::transmute(&bp)).into()
        }
        unsafe extern "system" fn AddExtensionWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddExtensionWide(::core::mem::transmute_copy(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionByPathWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPathWide(::core::mem::transmute_copy(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtensionWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CallExtensionWide(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&function), ::core::mem::transmute_copy(&arguments)).into()
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExtensionFunctionWide(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&funcname), ::core::mem::transmute_copy(&function)).into()
        }
        unsafe extern "system" fn GetEventFilterTextWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterTextWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventFilterCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterArgumentWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into()
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterArgumentWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&argument)).into()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterSecondCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterSecondCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetLastEventInformationWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLastEventInformationWide(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into()
        }
        unsafe extern "system" fn GetTextReplacementWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextReplacementWide(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into()
        }
        unsafe extern "system" fn SetTextReplacementWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextReplacementWide(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&dsttext)).into()
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExpressionSyntaxByNameWide(::core::mem::transmute_copy(&abbrevname)).into()
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExpressionSyntaxNamesWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescriptionWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *descsize = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile2<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFile2(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn OpenLogFile2<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFile2(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetLogFile2Wide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFile2Wide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn OpenLogFile2Wide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFile2Wide(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetSystemVersionValues<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemVersionValues(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&win32major), ::core::mem::transmute_copy(&win32minor), ::core::mem::transmute_copy(&kdmajor), ::core::mem::transmute_copy(&kdminor)).into()
        }
        unsafe extern "system" fn GetSystemVersionString<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemVersionString(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemVersionStringWide(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetContextStackTrace<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetContextStackTrace(::core::mem::transmute_copy(&startcontext), ::core::mem::transmute_copy(&startcontextsize), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn OutputContextStackTrace<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputContextStackTrace(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetStoredEventInformation<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStoredEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize), ::core::mem::transmute_copy(&contextused), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused)).into()
        }
        unsafe extern "system" fn GetManagedStatus<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetManagedStatus(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into()
        }
        unsafe extern "system" fn GetManagedStatusWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetManagedStatusWide(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into()
        }
        unsafe extern "system" fn ResetManagedStatus<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ResetManagedStatus(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetStackTraceEx<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStackTraceEx(::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn OutputStackTraceEx<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputStackTraceEx(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetContextStackTraceEx<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetContextStackTraceEx(::core::mem::transmute_copy(&startcontext), ::core::mem::transmute_copy(&startcontextsize), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn OutputContextStackTraceEx<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputContextStackTraceEx(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetBreakpointByGuid<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: *const ::windows::core::GUID, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByGuid(::core::mem::transmute_copy(&guid)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutionStatusEx<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatusEx() {
                ::core::result::Result::Ok(ok__) => {
                    *status = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSynchronizationStatus<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSynchronizationStatus(::core::mem::transmute_copy(&sendsattempted), ::core::mem::transmute_copy(&secondssincelastresponse)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetInterrupt: GetInterrupt::<Impl, IMPL_OFFSET>,
            SetInterrupt: SetInterrupt::<Impl, IMPL_OFFSET>,
            GetInterruptTimeout: GetInterruptTimeout::<Impl, IMPL_OFFSET>,
            SetInterruptTimeout: SetInterruptTimeout::<Impl, IMPL_OFFSET>,
            GetLogFile: GetLogFile::<Impl, IMPL_OFFSET>,
            OpenLogFile: OpenLogFile::<Impl, IMPL_OFFSET>,
            CloseLogFile: CloseLogFile::<Impl, IMPL_OFFSET>,
            GetLogMask: GetLogMask::<Impl, IMPL_OFFSET>,
            SetLogMask: SetLogMask::<Impl, IMPL_OFFSET>,
            Input: Input::<Impl, IMPL_OFFSET>,
            ReturnInput: ReturnInput::<Impl, IMPL_OFFSET>,
            Output: Output::<Impl, IMPL_OFFSET>,
            OutputVaList: OutputVaList::<Impl, IMPL_OFFSET>,
            ControlledOutput: ControlledOutput::<Impl, IMPL_OFFSET>,
            ControlledOutputVaList: ControlledOutputVaList::<Impl, IMPL_OFFSET>,
            OutputPrompt: OutputPrompt::<Impl, IMPL_OFFSET>,
            OutputPromptVaList: OutputPromptVaList::<Impl, IMPL_OFFSET>,
            GetPromptText: GetPromptText::<Impl, IMPL_OFFSET>,
            OutputCurrentState: OutputCurrentState::<Impl, IMPL_OFFSET>,
            OutputVersionInformation: OutputVersionInformation::<Impl, IMPL_OFFSET>,
            GetNotifyEventHandle: GetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            SetNotifyEventHandle: SetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            Assemble: Assemble::<Impl, IMPL_OFFSET>,
            Disassemble: Disassemble::<Impl, IMPL_OFFSET>,
            GetDisassembleEffectiveOffset: GetDisassembleEffectiveOffset::<Impl, IMPL_OFFSET>,
            OutputDisassembly: OutputDisassembly::<Impl, IMPL_OFFSET>,
            OutputDisassemblyLines: OutputDisassemblyLines::<Impl, IMPL_OFFSET>,
            GetNearInstruction: GetNearInstruction::<Impl, IMPL_OFFSET>,
            GetStackTrace: GetStackTrace::<Impl, IMPL_OFFSET>,
            GetReturnOffset: GetReturnOffset::<Impl, IMPL_OFFSET>,
            OutputStackTrace: OutputStackTrace::<Impl, IMPL_OFFSET>,
            GetDebuggeeType: GetDebuggeeType::<Impl, IMPL_OFFSET>,
            GetActualProcessorType: GetActualProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutingProcessorType: GetExecutingProcessorType::<Impl, IMPL_OFFSET>,
            GetNumberPossibleExecutingProcessorTypes: GetNumberPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetPossibleExecutingProcessorTypes: GetPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetNumberProcessors: GetNumberProcessors::<Impl, IMPL_OFFSET>,
            GetSystemVersion: GetSystemVersion::<Impl, IMPL_OFFSET>,
            GetPageSize: GetPageSize::<Impl, IMPL_OFFSET>,
            IsPointer64Bit: IsPointer64Bit::<Impl, IMPL_OFFSET>,
            ReadBugCheckData: ReadBugCheckData::<Impl, IMPL_OFFSET>,
            GetNumberSupportedProcessorTypes: GetNumberSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetSupportedProcessorTypes: GetSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNames: GetProcessorTypeNames::<Impl, IMPL_OFFSET>,
            GetEffectiveProcessorType: GetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            SetEffectiveProcessorType: SetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutionStatus: GetExecutionStatus::<Impl, IMPL_OFFSET>,
            SetExecutionStatus: SetExecutionStatus::<Impl, IMPL_OFFSET>,
            GetCodeLevel: GetCodeLevel::<Impl, IMPL_OFFSET>,
            SetCodeLevel: SetCodeLevel::<Impl, IMPL_OFFSET>,
            GetEngineOptions: GetEngineOptions::<Impl, IMPL_OFFSET>,
            AddEngineOptions: AddEngineOptions::<Impl, IMPL_OFFSET>,
            RemoveEngineOptions: RemoveEngineOptions::<Impl, IMPL_OFFSET>,
            SetEngineOptions: SetEngineOptions::<Impl, IMPL_OFFSET>,
            GetSystemErrorControl: GetSystemErrorControl::<Impl, IMPL_OFFSET>,
            SetSystemErrorControl: SetSystemErrorControl::<Impl, IMPL_OFFSET>,
            GetTextMacro: GetTextMacro::<Impl, IMPL_OFFSET>,
            SetTextMacro: SetTextMacro::<Impl, IMPL_OFFSET>,
            GetRadix: GetRadix::<Impl, IMPL_OFFSET>,
            SetRadix: SetRadix::<Impl, IMPL_OFFSET>,
            Evaluate: Evaluate::<Impl, IMPL_OFFSET>,
            CoerceValue: CoerceValue::<Impl, IMPL_OFFSET>,
            CoerceValues: CoerceValues::<Impl, IMPL_OFFSET>,
            Execute: Execute::<Impl, IMPL_OFFSET>,
            ExecuteCommandFile: ExecuteCommandFile::<Impl, IMPL_OFFSET>,
            GetNumberBreakpoints: GetNumberBreakpoints::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex: GetBreakpointByIndex::<Impl, IMPL_OFFSET>,
            GetBreakpointById: GetBreakpointById::<Impl, IMPL_OFFSET>,
            GetBreakpointParameters: GetBreakpointParameters::<Impl, IMPL_OFFSET>,
            AddBreakpoint: AddBreakpoint::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint: RemoveBreakpoint::<Impl, IMPL_OFFSET>,
            AddExtension: AddExtension::<Impl, IMPL_OFFSET>,
            RemoveExtension: RemoveExtension::<Impl, IMPL_OFFSET>,
            GetExtensionByPath: GetExtensionByPath::<Impl, IMPL_OFFSET>,
            CallExtension: CallExtension::<Impl, IMPL_OFFSET>,
            GetExtensionFunction: GetExtensionFunction::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis32: GetWindbgExtensionApis32::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis64: GetWindbgExtensionApis64::<Impl, IMPL_OFFSET>,
            GetNumberEventFilters: GetNumberEventFilters::<Impl, IMPL_OFFSET>,
            GetEventFilterText: GetEventFilterText::<Impl, IMPL_OFFSET>,
            GetEventFilterCommand: GetEventFilterCommand::<Impl, IMPL_OFFSET>,
            SetEventFilterCommand: SetEventFilterCommand::<Impl, IMPL_OFFSET>,
            GetSpecificFilterParameters: GetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            SetSpecificFilterParameters: SetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgument: GetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgument: SetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            GetExceptionFilterParameters: GetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            SetExceptionFilterParameters: SetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommand: GetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommand: SetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            WaitForEvent: WaitForEvent::<Impl, IMPL_OFFSET>,
            GetLastEventInformation: GetLastEventInformation::<Impl, IMPL_OFFSET>,
            GetCurrentTimeDate: GetCurrentTimeDate::<Impl, IMPL_OFFSET>,
            GetCurrentSystemUpTime: GetCurrentSystemUpTime::<Impl, IMPL_OFFSET>,
            GetDumpFormatFlags: GetDumpFormatFlags::<Impl, IMPL_OFFSET>,
            GetNumberTextReplacements: GetNumberTextReplacements::<Impl, IMPL_OFFSET>,
            GetTextReplacement: GetTextReplacement::<Impl, IMPL_OFFSET>,
            SetTextReplacement: SetTextReplacement::<Impl, IMPL_OFFSET>,
            RemoveTextReplacements: RemoveTextReplacements::<Impl, IMPL_OFFSET>,
            OutputTextReplacements: OutputTextReplacements::<Impl, IMPL_OFFSET>,
            GetAssemblyOptions: GetAssemblyOptions::<Impl, IMPL_OFFSET>,
            AddAssemblyOptions: AddAssemblyOptions::<Impl, IMPL_OFFSET>,
            RemoveAssemblyOptions: RemoveAssemblyOptions::<Impl, IMPL_OFFSET>,
            SetAssemblyOptions: SetAssemblyOptions::<Impl, IMPL_OFFSET>,
            GetExpressionSyntax: GetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntax: SetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByName: SetExpressionSyntaxByName::<Impl, IMPL_OFFSET>,
            GetNumberExpressionSyntaxes: GetNumberExpressionSyntaxes::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNames: GetExpressionSyntaxNames::<Impl, IMPL_OFFSET>,
            GetNumberEvents: GetNumberEvents::<Impl, IMPL_OFFSET>,
            GetEventIndexDescription: GetEventIndexDescription::<Impl, IMPL_OFFSET>,
            GetCurrentEventIndex: GetCurrentEventIndex::<Impl, IMPL_OFFSET>,
            SetNextEventIndex: SetNextEventIndex::<Impl, IMPL_OFFSET>,
            GetLogFileWide: GetLogFileWide::<Impl, IMPL_OFFSET>,
            OpenLogFileWide: OpenLogFileWide::<Impl, IMPL_OFFSET>,
            InputWide: InputWide::<Impl, IMPL_OFFSET>,
            ReturnInputWide: ReturnInputWide::<Impl, IMPL_OFFSET>,
            OutputWide: OutputWide::<Impl, IMPL_OFFSET>,
            OutputVaListWide: OutputVaListWide::<Impl, IMPL_OFFSET>,
            ControlledOutputWide: ControlledOutputWide::<Impl, IMPL_OFFSET>,
            ControlledOutputVaListWide: ControlledOutputVaListWide::<Impl, IMPL_OFFSET>,
            OutputPromptWide: OutputPromptWide::<Impl, IMPL_OFFSET>,
            OutputPromptVaListWide: OutputPromptVaListWide::<Impl, IMPL_OFFSET>,
            GetPromptTextWide: GetPromptTextWide::<Impl, IMPL_OFFSET>,
            AssembleWide: AssembleWide::<Impl, IMPL_OFFSET>,
            DisassembleWide: DisassembleWide::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNamesWide: GetProcessorTypeNamesWide::<Impl, IMPL_OFFSET>,
            GetTextMacroWide: GetTextMacroWide::<Impl, IMPL_OFFSET>,
            SetTextMacroWide: SetTextMacroWide::<Impl, IMPL_OFFSET>,
            EvaluateWide: EvaluateWide::<Impl, IMPL_OFFSET>,
            ExecuteWide: ExecuteWide::<Impl, IMPL_OFFSET>,
            ExecuteCommandFileWide: ExecuteCommandFileWide::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex2: GetBreakpointByIndex2::<Impl, IMPL_OFFSET>,
            GetBreakpointById2: GetBreakpointById2::<Impl, IMPL_OFFSET>,
            AddBreakpoint2: AddBreakpoint2::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint2: RemoveBreakpoint2::<Impl, IMPL_OFFSET>,
            AddExtensionWide: AddExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionByPathWide: GetExtensionByPathWide::<Impl, IMPL_OFFSET>,
            CallExtensionWide: CallExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionFunctionWide: GetExtensionFunctionWide::<Impl, IMPL_OFFSET>,
            GetEventFilterTextWide: GetEventFilterTextWide::<Impl, IMPL_OFFSET>,
            GetEventFilterCommandWide: GetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            SetEventFilterCommandWide: SetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgumentWide: GetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgumentWide: SetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommandWide: GetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommandWide: SetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            GetLastEventInformationWide: GetLastEventInformationWide::<Impl, IMPL_OFFSET>,
            GetTextReplacementWide: GetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetTextReplacementWide: SetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByNameWide: SetExpressionSyntaxByNameWide::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNamesWide: GetExpressionSyntaxNamesWide::<Impl, IMPL_OFFSET>,
            GetEventIndexDescriptionWide: GetEventIndexDescriptionWide::<Impl, IMPL_OFFSET>,
            GetLogFile2: GetLogFile2::<Impl, IMPL_OFFSET>,
            OpenLogFile2: OpenLogFile2::<Impl, IMPL_OFFSET>,
            GetLogFile2Wide: GetLogFile2Wide::<Impl, IMPL_OFFSET>,
            OpenLogFile2Wide: OpenLogFile2Wide::<Impl, IMPL_OFFSET>,
            GetSystemVersionValues: GetSystemVersionValues::<Impl, IMPL_OFFSET>,
            GetSystemVersionString: GetSystemVersionString::<Impl, IMPL_OFFSET>,
            GetSystemVersionStringWide: GetSystemVersionStringWide::<Impl, IMPL_OFFSET>,
            GetContextStackTrace: GetContextStackTrace::<Impl, IMPL_OFFSET>,
            OutputContextStackTrace: OutputContextStackTrace::<Impl, IMPL_OFFSET>,
            GetStoredEventInformation: GetStoredEventInformation::<Impl, IMPL_OFFSET>,
            GetManagedStatus: GetManagedStatus::<Impl, IMPL_OFFSET>,
            GetManagedStatusWide: GetManagedStatusWide::<Impl, IMPL_OFFSET>,
            ResetManagedStatus: ResetManagedStatus::<Impl, IMPL_OFFSET>,
            GetStackTraceEx: GetStackTraceEx::<Impl, IMPL_OFFSET>,
            OutputStackTraceEx: OutputStackTraceEx::<Impl, IMPL_OFFSET>,
            GetContextStackTraceEx: GetContextStackTraceEx::<Impl, IMPL_OFFSET>,
            OutputContextStackTraceEx: OutputContextStackTraceEx::<Impl, IMPL_OFFSET>,
            GetBreakpointByGuid: GetBreakpointByGuid::<Impl, IMPL_OFFSET>,
            GetExecutionStatusEx: GetExecutionStatusEx::<Impl, IMPL_OFFSET>,
            GetSynchronizationStatus: GetSynchronizationStatus::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugControl6 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl7Impl: Sized {
    fn GetInterrupt(&mut self) -> ::windows::core::Result<()>;
    fn SetInterrupt(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetInterruptTimeout(&mut self) -> ::windows::core::Result<u32>;
    fn SetInterruptTimeout(&mut self, seconds: u32) -> ::windows::core::Result<()>;
    fn GetLogFile(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn OpenLogFile(&mut self, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn CloseLogFile(&mut self) -> ::windows::core::Result<()>;
    fn GetLogMask(&mut self) -> ::windows::core::Result<u32>;
    fn SetLogMask(&mut self, mask: u32) -> ::windows::core::Result<()>;
    fn Input(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::Result<()>;
    fn ReturnInput(&mut self, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn Output(&mut self, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputVaList(&mut self, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn ControlledOutput(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn ControlledOutputVaList(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn OutputPrompt(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputPromptVaList(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn GetPromptText(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn OutputCurrentState(&mut self, outputcontrol: u32, flags: u32) -> ::windows::core::Result<()>;
    fn OutputVersionInformation(&mut self, outputcontrol: u32) -> ::windows::core::Result<()>;
    fn GetNotifyEventHandle(&mut self) -> ::windows::core::Result<u64>;
    fn SetNotifyEventHandle(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn Assemble(&mut self, offset: u64, instr: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn Disassemble(&mut self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::Result<()>;
    fn GetDisassembleEffectiveOffset(&mut self) -> ::windows::core::Result<u64>;
    fn OutputDisassembly(&mut self, outputcontrol: u32, offset: u64, flags: u32) -> ::windows::core::Result<u64>;
    fn OutputDisassemblyLines(&mut self, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::Result<()>;
    fn GetNearInstruction(&mut self, offset: u64, delta: i32) -> ::windows::core::Result<u64>;
    fn GetStackTrace(&mut self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn GetReturnOffset(&mut self) -> ::windows::core::Result<u64>;
    fn OutputStackTrace(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetDebuggeeType(&mut self, class: *mut u32, qualifier: *mut u32) -> ::windows::core::Result<()>;
    fn GetActualProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn GetExecutingProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberPossibleExecutingProcessorTypes(&mut self) -> ::windows::core::Result<u32>;
    fn GetPossibleExecutingProcessorTypes(&mut self, start: u32, count: u32, types: *mut u32) -> ::windows::core::Result<()>;
    fn GetNumberProcessors(&mut self) -> ::windows::core::Result<u32>;
    fn GetSystemVersion(&mut self, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::Result<()>;
    fn GetPageSize(&mut self) -> ::windows::core::Result<u32>;
    fn IsPointer64Bit(&mut self) -> ::windows::core::Result<()>;
    fn ReadBugCheckData(&mut self, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::Result<()>;
    fn GetNumberSupportedProcessorTypes(&mut self) -> ::windows::core::Result<u32>;
    fn GetSupportedProcessorTypes(&mut self, start: u32, count: u32, types: *mut u32) -> ::windows::core::Result<()>;
    fn GetProcessorTypeNames(&mut self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEffectiveProcessorType(&mut self) -> ::windows::core::Result<u32>;
    fn SetEffectiveProcessorType(&mut self, r#type: u32) -> ::windows::core::Result<()>;
    fn GetExecutionStatus(&mut self) -> ::windows::core::Result<u32>;
    fn SetExecutionStatus(&mut self, status: u32) -> ::windows::core::Result<()>;
    fn GetCodeLevel(&mut self) -> ::windows::core::Result<u32>;
    fn SetCodeLevel(&mut self, level: u32) -> ::windows::core::Result<()>;
    fn GetEngineOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetEngineOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetSystemErrorControl(&mut self, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::Result<()>;
    fn SetSystemErrorControl(&mut self, outputlevel: u32, breaklevel: u32) -> ::windows::core::Result<()>;
    fn GetTextMacro(&mut self, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextMacro(&mut self, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetRadix(&mut self) -> ::windows::core::Result<u32>;
    fn SetRadix(&mut self, radix: u32) -> ::windows::core::Result<()>;
    fn Evaluate(&mut self, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::Result<()>;
    fn CoerceValue(&mut self, r#in: *const DEBUG_VALUE, outtype: u32) -> ::windows::core::Result<DEBUG_VALUE>;
    fn CoerceValues(&mut self, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn Execute(&mut self, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn ExecuteCommandFile(&mut self, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetNumberBreakpoints(&mut self) -> ::windows::core::Result<u32>;
    fn GetBreakpointByIndex(&mut self, index: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn GetBreakpointById(&mut self, id: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn GetBreakpointParameters(&mut self, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::Result<()>;
    fn AddBreakpoint(&mut self, r#type: u32, desiredid: u32) -> ::windows::core::Result<IDebugBreakpoint>;
    fn RemoveBreakpoint(&mut self, bp: ::core::option::Option<IDebugBreakpoint>) -> ::windows::core::Result<()>;
    fn AddExtension(&mut self, path: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<u64>;
    fn RemoveExtension(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn GetExtensionByPath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn CallExtension(&mut self, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetExtensionFunction(&mut self, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut super::super::super::Foundation::FARPROC) -> ::windows::core::Result<()>;
    fn GetWindbgExtensionApis32(&mut self, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::Result<()>;
    fn GetWindbgExtensionApis64(&mut self, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::Result<()>;
    fn GetNumberEventFilters(&mut self, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterText(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterCommand(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetEventFilterCommand(&mut self, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSpecificFilterParameters(&mut self, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn SetSpecificFilterParameters(&mut self, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetSpecificFilterArgument(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSpecificFilterArgument(&mut self, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetExceptionFilterParameters(&mut self, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn SetExceptionFilterParameters(&mut self, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetExceptionFilterSecondCommand(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetExceptionFilterSecondCommand(&mut self, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn WaitForEvent(&mut self, flags: u32, timeout: u32) -> ::windows::core::Result<()>;
    fn GetLastEventInformation(&mut self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentTimeDate(&mut self) -> ::windows::core::Result<u32>;
    fn GetCurrentSystemUpTime(&mut self) -> ::windows::core::Result<u32>;
    fn GetDumpFormatFlags(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberTextReplacements(&mut self) -> ::windows::core::Result<u32>;
    fn GetTextReplacement(&mut self, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextReplacement(&mut self, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn RemoveTextReplacements(&mut self) -> ::windows::core::Result<()>;
    fn OutputTextReplacements(&mut self, outputcontrol: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetAssemblyOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddAssemblyOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveAssemblyOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetAssemblyOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetExpressionSyntax(&mut self) -> ::windows::core::Result<u32>;
    fn SetExpressionSyntax(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn SetExpressionSyntaxByName(&mut self, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetNumberExpressionSyntaxes(&mut self) -> ::windows::core::Result<u32>;
    fn GetExpressionSyntaxNames(&mut self, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetNumberEvents(&mut self) -> ::windows::core::Result<u32>;
    fn GetEventIndexDescription(&mut self, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentEventIndex(&mut self) -> ::windows::core::Result<u32>;
    fn SetNextEventIndex(&mut self, relation: u32, value: u32) -> ::windows::core::Result<u32>;
    fn GetLogFileWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn OpenLogFileWide(&mut self, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn InputWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::Result<()>;
    fn ReturnInputWide(&mut self, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputWide(&mut self, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputVaListWide(&mut self, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn ControlledOutputWide(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn ControlledOutputVaListWide(&mut self, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn OutputPromptWide(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputPromptVaListWide(&mut self, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::Result<()>;
    fn GetPromptTextWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn AssembleWide(&mut self, offset: u64, instr: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn DisassembleWide(&mut self, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::Result<()>;
    fn GetProcessorTypeNamesWide(&mut self, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTextMacroWide(&mut self, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextMacroWide(&mut self, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn EvaluateWide(&mut self, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::Result<()>;
    fn ExecuteWide(&mut self, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn ExecuteCommandFileWide(&mut self, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetBreakpointByIndex2(&mut self, index: u32) -> ::windows::core::Result<IDebugBreakpoint2>;
    fn GetBreakpointById2(&mut self, id: u32) -> ::windows::core::Result<IDebugBreakpoint2>;
    fn AddBreakpoint2(&mut self, r#type: u32, desiredid: u32) -> ::windows::core::Result<IDebugBreakpoint2>;
    fn RemoveBreakpoint2(&mut self, bp: ::core::option::Option<IDebugBreakpoint2>) -> ::windows::core::Result<()>;
    fn AddExtensionWide(&mut self, path: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<u64>;
    fn GetExtensionByPathWide(&mut self, path: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn CallExtensionWide(&mut self, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetExtensionFunctionWide(&mut self, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut super::super::super::Foundation::FARPROC) -> ::windows::core::Result<()>;
    fn GetEventFilterTextWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventFilterCommandWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetEventFilterCommandWide(&mut self, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetSpecificFilterArgumentWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSpecificFilterArgumentWide(&mut self, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetExceptionFilterSecondCommandWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetExceptionFilterSecondCommandWide(&mut self, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetLastEventInformationWide(&mut self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::Result<()>;
    fn GetTextReplacementWide(&mut self, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetTextReplacementWide(&mut self, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn SetExpressionSyntaxByNameWide(&mut self, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetExpressionSyntaxNamesWide(&mut self, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetEventIndexDescriptionWide(&mut self, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32) -> ::windows::core::Result<u32>;
    fn GetLogFile2(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::Result<()>;
    fn OpenLogFile2(&mut self, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetLogFile2Wide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::Result<()>;
    fn OpenLogFile2Wide(&mut self, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn GetSystemVersionValues(&mut self, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::Result<()>;
    fn GetSystemVersionString(&mut self, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSystemVersionStringWide(&mut self, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetContextStackTrace(&mut self, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn OutputContextStackTrace(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetStoredEventInformation(&mut self, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::Result<()>;
    fn GetManagedStatus(&mut self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::Result<()>;
    fn GetManagedStatusWide(&mut self, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::Result<()>;
    fn ResetManagedStatus(&mut self, flags: u32) -> ::windows::core::Result<()>;
    fn GetStackTraceEx(&mut self, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn OutputStackTraceEx(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetContextStackTraceEx(&mut self, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::Result<()>;
    fn OutputContextStackTraceEx(&mut self, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetBreakpointByGuid(&mut self, guid: *const ::windows::core::GUID) -> ::windows::core::Result<IDebugBreakpoint3>;
    fn GetExecutionStatusEx(&mut self) -> ::windows::core::Result<u32>;
    fn GetSynchronizationStatus(&mut self, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows::core::Result<()>;
    fn GetDebuggeeType2(&mut self, flags: u32, class: *mut u32, qualifier: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl IDebugControl7Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugControl7Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugControl7Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetInterrupt().into()
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInterrupt(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInterruptTimeout() {
                ::core::result::Result::Ok(ok__) => {
                    *seconds = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInterruptTimeout(::core::mem::transmute_copy(&seconds)).into()
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFile(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFile(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CloseLogFile().into()
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLogMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetLogMask(::core::mem::transmute_copy(&mask)).into()
        }
        unsafe extern "system" fn Input<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Input(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into()
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReturnInput(::core::mem::transmute_copy(&buffer)).into()
        }
        unsafe extern "system" fn Output<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Output(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVaList(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutput(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutputVaList(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPrompt(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPromptVaList(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPromptText(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputCurrentState(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVersionInformation(::core::mem::transmute_copy(&outputcontrol)).into()
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNotifyEventHandle() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetNotifyEventHandle(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Assemble(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Disassemble(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into()
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDisassembleEffectiveOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OutputDisassembly(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputDisassemblyLines(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&previouslines), ::core::mem::transmute_copy(&totallines), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)).into()
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNearInstruction(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta)) {
                ::core::result::Result::Ok(ok__) => {
                    *nearoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStackTrace(::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetReturnOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputStackTrace(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDebuggeeType(::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into()
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetActualProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutingProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberPossibleExecutingProcessorTypes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPossibleExecutingProcessorTypes(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into()
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberProcessors() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .GetSystemVersion(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), ::core::mem::transmute_copy(&servicepackstringsize), ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), ::core::mem::transmute_copy(&buildstringsize), ::core::mem::transmute_copy(&buildstringused))
                .into()
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPageSize() {
                ::core::result::Result::Ok(ok__) => {
                    *size = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsPointer64Bit().into()
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadBugCheckData(::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)).into()
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberSupportedProcessorTypes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSupportedProcessorTypes(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into()
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetProcessorTypeNames(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEffectiveProcessorType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEffectiveProcessorType(::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatus() {
                ::core::result::Result::Ok(ok__) => {
                    *status = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExecutionStatus(::core::mem::transmute_copy(&status)).into()
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCodeLevel() {
                ::core::result::Result::Ok(ok__) => {
                    *level = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCodeLevel(::core::mem::transmute_copy(&level)).into()
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEngineOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEngineOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into()
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into()
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextMacro(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into()
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextMacro(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&r#macro)).into()
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRadix() {
                ::core::result::Result::Ok(ok__) => {
                    *radix = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetRadix(::core::mem::transmute_copy(&radix)).into()
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Evaluate(::core::mem::transmute_copy(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into()
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CoerceValue(::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtype)) {
                ::core::result::Result::Ok(ok__) => {
                    *out = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CoerceValues(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtypes), ::core::mem::transmute_copy(&out)).into()
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Execute(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&command), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExecuteCommandFile(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&commandfile), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberBreakpoints() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetBreakpointParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveBreakpoint(::core::mem::transmute(&bp)).into()
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddExtension(::core::mem::transmute_copy(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveExtension(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPath(::core::mem::transmute_copy(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CallExtension(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&function), ::core::mem::transmute_copy(&arguments)).into()
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExtensionFunction(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&funcname), ::core::mem::transmute_copy(&function)).into()
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetWindbgExtensionApis32(::core::mem::transmute_copy(&api)).into()
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetWindbgExtensionApis64(::core::mem::transmute_copy(&api)).into()
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNumberEventFilters(::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)).into()
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterText(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventFilterCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterArgument(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into()
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterArgument(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&argument)).into()
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&codes), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterSecondCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterSecondCommand(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WaitForEvent(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&timeout)).into()
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLastEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into()
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentTimeDate() {
                ::core::result::Result::Ok(ok__) => {
                    *timedate = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemUpTime() {
                ::core::result::Result::Ok(ok__) => {
                    *uptime = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDumpFormatFlags() {
                ::core::result::Result::Ok(ok__) => {
                    *formatflags = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberTextReplacements() {
                ::core::result::Result::Ok(ok__) => {
                    *numrepl = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextReplacement(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into()
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextReplacement(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&dsttext)).into()
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveTextReplacements().into()
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTextReplacements(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetAssemblyOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAssemblyOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddAssemblyOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddAssemblyOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveAssemblyOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetAssemblyOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetAssemblyOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetExpressionSyntax<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntax() {
                ::core::result::Result::Ok(ok__) => {
                    *flags = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntax<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExpressionSyntax(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExpressionSyntaxByName(::core::mem::transmute_copy(&abbrevname)).into()
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberExpressionSyntaxes() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExpressionSyntaxNames(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetNumberEvents<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberEvents() {
                ::core::result::Result::Ok(ok__) => {
                    *events = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventIndexDescription<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescription(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *descsize = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentEventIndex<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentEventIndex() {
                ::core::result::Result::Ok(ok__) => {
                    *index = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNextEventIndex<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetNextEventIndex(::core::mem::transmute_copy(&relation), ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *nextindex = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFileWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFileWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn OpenLogFileWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFileWide(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&append)).into()
        }
        unsafe extern "system" fn InputWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).InputWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into()
        }
        unsafe extern "system" fn ReturnInputWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReturnInputWide(::core::mem::transmute_copy(&buffer)).into()
        }
        unsafe extern "system" fn OutputWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputWide(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputVaListWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputVaListWide(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn ControlledOutputWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutputWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ControlledOutputVaListWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn OutputPromptWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPromptWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format)).into()
        }
        unsafe extern "system" fn OutputPromptVaListWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputPromptVaListWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&args)).into()
        }
        unsafe extern "system" fn GetPromptTextWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPromptTextWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn AssembleWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AssembleWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    *endoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisassembleWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DisassembleWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into()
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetProcessorTypeNamesWide(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetTextMacroWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextMacroWide(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into()
        }
        unsafe extern "system" fn SetTextMacroWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextMacroWide(::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&r#macro)).into()
        }
        unsafe extern "system" fn EvaluateWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EvaluateWide(::core::mem::transmute_copy(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into()
        }
        unsafe extern "system" fn ExecuteWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExecuteWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&command), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExecuteCommandFileWide(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&commandfile), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex2(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById2<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById2(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddBreakpoint2<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint2(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint2<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveBreakpoint2(::core::mem::transmute(&bp)).into()
        }
        unsafe extern "system" fn AddExtensionWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddExtensionWide(::core::mem::transmute_copy(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionByPathWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPathWide(::core::mem::transmute_copy(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtensionWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CallExtensionWide(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&function), ::core::mem::transmute_copy(&arguments)).into()
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExtensionFunctionWide(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&funcname), ::core::mem::transmute_copy(&function)).into()
        }
        unsafe extern "system" fn GetEventFilterTextWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterTextWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into()
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventFilterCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventFilterCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSpecificFilterArgumentWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into()
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSpecificFilterArgumentWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&argument)).into()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExceptionFilterSecondCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExceptionFilterSecondCommandWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&command)).into()
        }
        unsafe extern "system" fn GetLastEventInformationWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLastEventInformationWide(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into()
        }
        unsafe extern "system" fn GetTextReplacementWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTextReplacementWide(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into()
        }
        unsafe extern "system" fn SetTextReplacementWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextReplacementWide(::core::mem::transmute_copy(&srctext), ::core::mem::transmute_copy(&dsttext)).into()
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetExpressionSyntaxByNameWide(::core::mem::transmute_copy(&abbrevname)).into()
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExpressionSyntaxNamesWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into()
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescriptionWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *descsize = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile2<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFile2(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn OpenLogFile2<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFile2(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetLogFile2Wide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLogFile2Wide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn OpenLogFile2Wide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OpenLogFile2Wide(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetSystemVersionValues<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemVersionValues(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&win32major), ::core::mem::transmute_copy(&win32minor), ::core::mem::transmute_copy(&kdmajor), ::core::mem::transmute_copy(&kdminor)).into()
        }
        unsafe extern "system" fn GetSystemVersionString<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemVersionString(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemVersionStringWide(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetContextStackTrace<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetContextStackTrace(::core::mem::transmute_copy(&startcontext), ::core::mem::transmute_copy(&startcontextsize), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn OutputContextStackTrace<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputContextStackTrace(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetStoredEventInformation<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStoredEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize), ::core::mem::transmute_copy(&contextused), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused)).into()
        }
        unsafe extern "system" fn GetManagedStatus<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetManagedStatus(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into()
        }
        unsafe extern "system" fn GetManagedStatusWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetManagedStatusWide(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into()
        }
        unsafe extern "system" fn ResetManagedStatus<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ResetManagedStatus(::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetStackTraceEx<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStackTraceEx(::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn OutputStackTraceEx<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputStackTraceEx(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetContextStackTraceEx<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetContextStackTraceEx(::core::mem::transmute_copy(&startcontext), ::core::mem::transmute_copy(&startcontextsize), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&framesfilled)).into()
        }
        unsafe extern "system" fn OutputContextStackTraceEx<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputContextStackTraceEx(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetBreakpointByGuid<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: *const ::windows::core::GUID, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByGuid(::core::mem::transmute_copy(&guid)) {
                ::core::result::Result::Ok(ok__) => {
                    *bp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutionStatusEx<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatusEx() {
                ::core::result::Result::Ok(ok__) => {
                    *status = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSynchronizationStatus<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSynchronizationStatus(::core::mem::transmute_copy(&sendsattempted), ::core::mem::transmute_copy(&secondssincelastresponse)).into()
        }
        unsafe extern "system" fn GetDebuggeeType2<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDebuggeeType2(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetInterrupt: GetInterrupt::<Impl, IMPL_OFFSET>,
            SetInterrupt: SetInterrupt::<Impl, IMPL_OFFSET>,
            GetInterruptTimeout: GetInterruptTimeout::<Impl, IMPL_OFFSET>,
            SetInterruptTimeout: SetInterruptTimeout::<Impl, IMPL_OFFSET>,
            GetLogFile: GetLogFile::<Impl, IMPL_OFFSET>,
            OpenLogFile: OpenLogFile::<Impl, IMPL_OFFSET>,
            CloseLogFile: CloseLogFile::<Impl, IMPL_OFFSET>,
            GetLogMask: GetLogMask::<Impl, IMPL_OFFSET>,
            SetLogMask: SetLogMask::<Impl, IMPL_OFFSET>,
            Input: Input::<Impl, IMPL_OFFSET>,
            ReturnInput: ReturnInput::<Impl, IMPL_OFFSET>,
            Output: Output::<Impl, IMPL_OFFSET>,
            OutputVaList: OutputVaList::<Impl, IMPL_OFFSET>,
            ControlledOutput: ControlledOutput::<Impl, IMPL_OFFSET>,
            ControlledOutputVaList: ControlledOutputVaList::<Impl, IMPL_OFFSET>,
            OutputPrompt: OutputPrompt::<Impl, IMPL_OFFSET>,
            OutputPromptVaList: OutputPromptVaList::<Impl, IMPL_OFFSET>,
            GetPromptText: GetPromptText::<Impl, IMPL_OFFSET>,
            OutputCurrentState: OutputCurrentState::<Impl, IMPL_OFFSET>,
            OutputVersionInformation: OutputVersionInformation::<Impl, IMPL_OFFSET>,
            GetNotifyEventHandle: GetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            SetNotifyEventHandle: SetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            Assemble: Assemble::<Impl, IMPL_OFFSET>,
            Disassemble: Disassemble::<Impl, IMPL_OFFSET>,
            GetDisassembleEffectiveOffset: GetDisassembleEffectiveOffset::<Impl, IMPL_OFFSET>,
            OutputDisassembly: OutputDisassembly::<Impl, IMPL_OFFSET>,
            OutputDisassemblyLines: OutputDisassemblyLines::<Impl, IMPL_OFFSET>,
            GetNearInstruction: GetNearInstruction::<Impl, IMPL_OFFSET>,
            GetStackTrace: GetStackTrace::<Impl, IMPL_OFFSET>,
            GetReturnOffset: GetReturnOffset::<Impl, IMPL_OFFSET>,
            OutputStackTrace: OutputStackTrace::<Impl, IMPL_OFFSET>,
            GetDebuggeeType: GetDebuggeeType::<Impl, IMPL_OFFSET>,
            GetActualProcessorType: GetActualProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutingProcessorType: GetExecutingProcessorType::<Impl, IMPL_OFFSET>,
            GetNumberPossibleExecutingProcessorTypes: GetNumberPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetPossibleExecutingProcessorTypes: GetPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetNumberProcessors: GetNumberProcessors::<Impl, IMPL_OFFSET>,
            GetSystemVersion: GetSystemVersion::<Impl, IMPL_OFFSET>,
            GetPageSize: GetPageSize::<Impl, IMPL_OFFSET>,
            IsPointer64Bit: IsPointer64Bit::<Impl, IMPL_OFFSET>,
            ReadBugCheckData: ReadBugCheckData::<Impl, IMPL_OFFSET>,
            GetNumberSupportedProcessorTypes: GetNumberSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetSupportedProcessorTypes: GetSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNames: GetProcessorTypeNames::<Impl, IMPL_OFFSET>,
            GetEffectiveProcessorType: GetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            SetEffectiveProcessorType: SetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutionStatus: GetExecutionStatus::<Impl, IMPL_OFFSET>,
            SetExecutionStatus: SetExecutionStatus::<Impl, IMPL_OFFSET>,
            GetCodeLevel: GetCodeLevel::<Impl, IMPL_OFFSET>,
            SetCodeLevel: SetCodeLevel::<Impl, IMPL_OFFSET>,
            GetEngineOptions: GetEngineOptions::<Impl, IMPL_OFFSET>,
            AddEngineOptions: AddEngineOptions::<Impl, IMPL_OFFSET>,
            RemoveEngineOptions: RemoveEngineOptions::<Impl, IMPL_OFFSET>,
            SetEngineOptions: SetEngineOptions::<Impl, IMPL_OFFSET>,
            GetSystemErrorControl: GetSystemErrorControl::<Impl, IMPL_OFFSET>,
            SetSystemErrorControl: SetSystemErrorControl::<Impl, IMPL_OFFSET>,
            GetTextMacro: GetTextMacro::<Impl, IMPL_OFFSET>,
            SetTextMacro: SetTextMacro::<Impl, IMPL_OFFSET>,
            GetRadix: GetRadix::<Impl, IMPL_OFFSET>,
            SetRadix: SetRadix::<Impl, IMPL_OFFSET>,
            Evaluate: Evaluate::<Impl, IMPL_OFFSET>,
            CoerceValue: CoerceValue::<Impl, IMPL_OFFSET>,
            CoerceValues: CoerceValues::<Impl, IMPL_OFFSET>,
            Execute: Execute::<Impl, IMPL_OFFSET>,
            ExecuteCommandFile: ExecuteCommandFile::<Impl, IMPL_OFFSET>,
            GetNumberBreakpoints: GetNumberBreakpoints::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex: GetBreakpointByIndex::<Impl, IMPL_OFFSET>,
            GetBreakpointById: GetBreakpointById::<Impl, IMPL_OFFSET>,
            GetBreakpointParameters: GetBreakpointParameters::<Impl, IMPL_OFFSET>,
            AddBreakpoint: AddBreakpoint::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint: RemoveBreakpoint::<Impl, IMPL_OFFSET>,
            AddExtension: AddExtension::<Impl, IMPL_OFFSET>,
            RemoveExtension: RemoveExtension::<Impl, IMPL_OFFSET>,
            GetExtensionByPath: GetExtensionByPath::<Impl, IMPL_OFFSET>,
            CallExtension: CallExtension::<Impl, IMPL_OFFSET>,
            GetExtensionFunction: GetExtensionFunction::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis32: GetWindbgExtensionApis32::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis64: GetWindbgExtensionApis64::<Impl, IMPL_OFFSET>,
            GetNumberEventFilters: GetNumberEventFilters::<Impl, IMPL_OFFSET>,
            GetEventFilterText: GetEventFilterText::<Impl, IMPL_OFFSET>,
            GetEventFilterCommand: GetEventFilterCommand::<Impl, IMPL_OFFSET>,
            SetEventFilterCommand: SetEventFilterCommand::<Impl, IMPL_OFFSET>,
            GetSpecificFilterParameters: GetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            SetSpecificFilterParameters: SetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgument: GetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgument: SetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            GetExceptionFilterParameters: GetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            SetExceptionFilterParameters: SetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommand: GetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommand: SetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            WaitForEvent: WaitForEvent::<Impl, IMPL_OFFSET>,
            GetLastEventInformation: GetLastEventInformation::<Impl, IMPL_OFFSET>,
            GetCurrentTimeDate: GetCurrentTimeDate::<Impl, IMPL_OFFSET>,
            GetCurrentSystemUpTime: GetCurrentSystemUpTime::<Impl, IMPL_OFFSET>,
            GetDumpFormatFlags: GetDumpFormatFlags::<Impl, IMPL_OFFSET>,
            GetNumberTextReplacements: GetNumberTextReplacements::<Impl, IMPL_OFFSET>,
            GetTextReplacement: GetTextReplacement::<Impl, IMPL_OFFSET>,
            SetTextReplacement: SetTextReplacement::<Impl, IMPL_OFFSET>,
            RemoveTextReplacements: RemoveTextReplacements::<Impl, IMPL_OFFSET>,
            OutputTextReplacements: OutputTextReplacements::<Impl, IMPL_OFFSET>,
            GetAssemblyOptions: GetAssemblyOptions::<Impl, IMPL_OFFSET>,
            AddAssemblyOptions: AddAssemblyOptions::<Impl, IMPL_OFFSET>,
            RemoveAssemblyOptions: RemoveAssemblyOptions::<Impl, IMPL_OFFSET>,
            SetAssemblyOptions: SetAssemblyOptions::<Impl, IMPL_OFFSET>,
            GetExpressionSyntax: GetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntax: SetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByName: SetExpressionSyntaxByName::<Impl, IMPL_OFFSET>,
            GetNumberExpressionSyntaxes: GetNumberExpressionSyntaxes::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNames: GetExpressionSyntaxNames::<Impl, IMPL_OFFSET>,
            GetNumberEvents: GetNumberEvents::<Impl, IMPL_OFFSET>,
            GetEventIndexDescription: GetEventIndexDescription::<Impl, IMPL_OFFSET>,
            GetCurrentEventIndex: GetCurrentEventIndex::<Impl, IMPL_OFFSET>,
            SetNextEventIndex: SetNextEventIndex::<Impl, IMPL_OFFSET>,
            GetLogFileWide: GetLogFileWide::<Impl, IMPL_OFFSET>,
            OpenLogFileWide: OpenLogFileWide::<Impl, IMPL_OFFSET>,
            InputWide: InputWide::<Impl, IMPL_OFFSET>,
            ReturnInputWide: ReturnInputWide::<Impl, IMPL_OFFSET>,
            OutputWide: OutputWide::<Impl, IMPL_OFFSET>,
            OutputVaListWide: OutputVaListWide::<Impl, IMPL_OFFSET>,
            ControlledOutputWide: ControlledOutputWide::<Impl, IMPL_OFFSET>,
            ControlledOutputVaListWide: ControlledOutputVaListWide::<Impl, IMPL_OFFSET>,
            OutputPromptWide: OutputPromptWide::<Impl, IMPL_OFFSET>,
            OutputPromptVaListWide: OutputPromptVaListWide::<Impl, IMPL_OFFSET>,
            GetPromptTextWide: GetPromptTextWide::<Impl, IMPL_OFFSET>,
            AssembleWide: AssembleWide::<Impl, IMPL_OFFSET>,
            DisassembleWide: DisassembleWide::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNamesWide: GetProcessorTypeNamesWide::<Impl, IMPL_OFFSET>,
            GetTextMacroWide: GetTextMacroWide::<Impl, IMPL_OFFSET>,
            SetTextMacroWide: SetTextMacroWide::<Impl, IMPL_OFFSET>,
            EvaluateWide: EvaluateWide::<Impl, IMPL_OFFSET>,
            ExecuteWide: ExecuteWide::<Impl, IMPL_OFFSET>,
            ExecuteCommandFileWide: ExecuteCommandFileWide::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex2: GetBreakpointByIndex2::<Impl, IMPL_OFFSET>,
            GetBreakpointById2: GetBreakpointById2::<Impl, IMPL_OFFSET>,
            AddBreakpoint2: AddBreakpoint2::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint2: RemoveBreakpoint2::<Impl, IMPL_OFFSET>,
            AddExtensionWide: AddExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionByPathWide: GetExtensionByPathWide::<Impl, IMPL_OFFSET>,
            CallExtensionWide: CallExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionFunctionWide: GetExtensionFunctionWide::<Impl, IMPL_OFFSET>,
            GetEventFilterTextWide: GetEventFilterTextWide::<Impl, IMPL_OFFSET>,
            GetEventFilterCommandWide: GetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            SetEventFilterCommandWide: SetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgumentWide: GetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgumentWide: SetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommandWide: GetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommandWide: SetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            GetLastEventInformationWide: GetLastEventInformationWide::<Impl, IMPL_OFFSET>,
            GetTextReplacementWide: GetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetTextReplacementWide: SetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByNameWide: SetExpressionSyntaxByNameWide::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNamesWide: GetExpressionSyntaxNamesWide::<Impl, IMPL_OFFSET>,
            GetEventIndexDescriptionWide: GetEventIndexDescriptionWide::<Impl, IMPL_OFFSET>,
            GetLogFile2: GetLogFile2::<Impl, IMPL_OFFSET>,
            OpenLogFile2: OpenLogFile2::<Impl, IMPL_OFFSET>,
            GetLogFile2Wide: GetLogFile2Wide::<Impl, IMPL_OFFSET>,
            OpenLogFile2Wide: OpenLogFile2Wide::<Impl, IMPL_OFFSET>,
            GetSystemVersionValues: GetSystemVersionValues::<Impl, IMPL_OFFSET>,
            GetSystemVersionString: GetSystemVersionString::<Impl, IMPL_OFFSET>,
            GetSystemVersionStringWide: GetSystemVersionStringWide::<Impl, IMPL_OFFSET>,
            GetContextStackTrace: GetContextStackTrace::<Impl, IMPL_OFFSET>,
            OutputContextStackTrace: OutputContextStackTrace::<Impl, IMPL_OFFSET>,
            GetStoredEventInformation: GetStoredEventInformation::<Impl, IMPL_OFFSET>,
            GetManagedStatus: GetManagedStatus::<Impl, IMPL_OFFSET>,
            GetManagedStatusWide: GetManagedStatusWide::<Impl, IMPL_OFFSET>,
            ResetManagedStatus: ResetManagedStatus::<Impl, IMPL_OFFSET>,
            GetStackTraceEx: GetStackTraceEx::<Impl, IMPL_OFFSET>,
            OutputStackTraceEx: OutputStackTraceEx::<Impl, IMPL_OFFSET>,
            GetContextStackTraceEx: GetContextStackTraceEx::<Impl, IMPL_OFFSET>,
            OutputContextStackTraceEx: OutputContextStackTraceEx::<Impl, IMPL_OFFSET>,
            GetBreakpointByGuid: GetBreakpointByGuid::<Impl, IMPL_OFFSET>,
            GetExecutionStatusEx: GetExecutionStatusEx::<Impl, IMPL_OFFSET>,
            GetSynchronizationStatus: GetSynchronizationStatus::<Impl, IMPL_OFFSET>,
            GetDebuggeeType2: GetDebuggeeType2::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugControl7 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugCookieImpl: Sized {
    fn SetDebugCookie(&mut self, dwdebugappcookie: u32) -> ::windows::core::Result<()>;
}
impl IDebugCookieVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugCookieImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugCookieVtbl {
        unsafe extern "system" fn SetDebugCookie<Impl: IDebugCookieImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwdebugappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetDebugCookie(::core::mem::transmute_copy(&dwdebugappcookie)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), SetDebugCookie: SetDebugCookie::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugCookie as ::windows::core::Interface>::IID
    }
}
pub trait IDebugDataSpacesImpl: Sized {
    fn ReadVirtual(&mut self, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteVirtual(&mut self, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn SearchVirtual(&mut self, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32) -> ::windows::core::Result<u64>;
    fn ReadVirtualUncached(&mut self, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteVirtualUncached(&mut self, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadPointersVirtual(&mut self, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::Result<()>;
    fn WritePointersVirtual(&mut self, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::Result<()>;
    fn ReadPhysical(&mut self, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WritePhysical(&mut self, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadControl(&mut self, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteControl(&mut self, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadIo(&mut self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteIo(&mut self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadMsr(&mut self, msr: u32) -> ::windows::core::Result<u64>;
    fn WriteMsr(&mut self, msr: u32, value: u64) -> ::windows::core::Result<()>;
    fn ReadBusData(&mut self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteBusData(&mut self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn CheckLowMemory(&mut self) -> ::windows::core::Result<()>;
    fn ReadDebuggerData(&mut self, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::Result<()>;
    fn ReadProcessorSystemData(&mut self, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::Result<()>;
}
impl IDebugDataSpacesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDataSpacesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDataSpacesVtbl {
        unsafe extern "system" fn ReadVirtual<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteVirtual<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SearchVirtual<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SearchVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&length), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&patterngranularity)) {
                ::core::result::Result::Ok(ok__) => {
                    *matchoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadVirtualUncached<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadVirtualUncached(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteVirtualUncached<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteVirtualUncached(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadPointersVirtual<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadPointersVirtual(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into()
        }
        unsafe extern "system" fn WritePointersVirtual<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WritePointersVirtual(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into()
        }
        unsafe extern "system" fn ReadPhysical<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadPhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WritePhysical<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WritePhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadControl<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadControl(::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteControl<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteControl(::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadIo<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadIo(::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteIo<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteIo(::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadMsr<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReadMsr(::core::mem::transmute_copy(&msr)) {
                ::core::result::Result::Ok(ok__) => {
                    *value = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteMsr<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteMsr(::core::mem::transmute_copy(&msr), ::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn ReadBusData<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadBusData(::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteBusData<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteBusData(::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CheckLowMemory<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CheckLowMemory().into()
        }
        unsafe extern "system" fn ReadDebuggerData<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadDebuggerData(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into()
        }
        unsafe extern "system" fn ReadProcessorSystemData<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadProcessorSystemData(::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            ReadVirtual: ReadVirtual::<Impl, IMPL_OFFSET>,
            WriteVirtual: WriteVirtual::<Impl, IMPL_OFFSET>,
            SearchVirtual: SearchVirtual::<Impl, IMPL_OFFSET>,
            ReadVirtualUncached: ReadVirtualUncached::<Impl, IMPL_OFFSET>,
            WriteVirtualUncached: WriteVirtualUncached::<Impl, IMPL_OFFSET>,
            ReadPointersVirtual: ReadPointersVirtual::<Impl, IMPL_OFFSET>,
            WritePointersVirtual: WritePointersVirtual::<Impl, IMPL_OFFSET>,
            ReadPhysical: ReadPhysical::<Impl, IMPL_OFFSET>,
            WritePhysical: WritePhysical::<Impl, IMPL_OFFSET>,
            ReadControl: ReadControl::<Impl, IMPL_OFFSET>,
            WriteControl: WriteControl::<Impl, IMPL_OFFSET>,
            ReadIo: ReadIo::<Impl, IMPL_OFFSET>,
            WriteIo: WriteIo::<Impl, IMPL_OFFSET>,
            ReadMsr: ReadMsr::<Impl, IMPL_OFFSET>,
            WriteMsr: WriteMsr::<Impl, IMPL_OFFSET>,
            ReadBusData: ReadBusData::<Impl, IMPL_OFFSET>,
            WriteBusData: WriteBusData::<Impl, IMPL_OFFSET>,
            CheckLowMemory: CheckLowMemory::<Impl, IMPL_OFFSET>,
            ReadDebuggerData: ReadDebuggerData::<Impl, IMPL_OFFSET>,
            ReadProcessorSystemData: ReadProcessorSystemData::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDataSpaces as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_System_Memory")]
pub trait IDebugDataSpaces2Impl: Sized {
    fn ReadVirtual(&mut self, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteVirtual(&mut self, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn SearchVirtual(&mut self, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32) -> ::windows::core::Result<u64>;
    fn ReadVirtualUncached(&mut self, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteVirtualUncached(&mut self, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadPointersVirtual(&mut self, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::Result<()>;
    fn WritePointersVirtual(&mut self, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::Result<()>;
    fn ReadPhysical(&mut self, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WritePhysical(&mut self, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadControl(&mut self, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteControl(&mut self, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadIo(&mut self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteIo(&mut self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadMsr(&mut self, msr: u32) -> ::windows::core::Result<u64>;
    fn WriteMsr(&mut self, msr: u32, value: u64) -> ::windows::core::Result<()>;
    fn ReadBusData(&mut self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteBusData(&mut self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn CheckLowMemory(&mut self) -> ::windows::core::Result<()>;
    fn ReadDebuggerData(&mut self, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::Result<()>;
    fn ReadProcessorSystemData(&mut self, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::Result<()>;
    fn VirtualToPhysical(&mut self, r#virtual: u64) -> ::windows::core::Result<u64>;
    fn GetVirtualTranslationPhysicalOffsets(&mut self, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::core::Result<()>;
    fn ReadHandleData(&mut self, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::Result<()>;
    fn FillVirtual(&mut self, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32) -> ::windows::core::Result<u32>;
    fn FillPhysical(&mut self, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32) -> ::windows::core::Result<u32>;
    fn QueryVirtual(&mut self, offset: u64) -> ::windows::core::Result<super::super::Memory::MEMORY_BASIC_INFORMATION64>;
}
#[cfg(feature = "Win32_System_Memory")]
impl IDebugDataSpaces2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDataSpaces2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDataSpaces2Vtbl {
        unsafe extern "system" fn ReadVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SearchVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SearchVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&length), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&patterngranularity)) {
                ::core::result::Result::Ok(ok__) => {
                    *matchoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadVirtualUncached<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadVirtualUncached(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteVirtualUncached<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteVirtualUncached(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadPointersVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadPointersVirtual(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into()
        }
        unsafe extern "system" fn WritePointersVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WritePointersVirtual(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into()
        }
        unsafe extern "system" fn ReadPhysical<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadPhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WritePhysical<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WritePhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadControl<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadControl(::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteControl<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteControl(::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadIo<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadIo(::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteIo<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteIo(::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadMsr<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReadMsr(::core::mem::transmute_copy(&msr)) {
                ::core::result::Result::Ok(ok__) => {
                    *value = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteMsr<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteMsr(::core::mem::transmute_copy(&msr), ::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn ReadBusData<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadBusData(::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteBusData<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteBusData(::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CheckLowMemory<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CheckLowMemory().into()
        }
        unsafe extern "system" fn ReadDebuggerData<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadDebuggerData(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into()
        }
        unsafe extern "system" fn ReadProcessorSystemData<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadProcessorSystemData(::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into()
        }
        unsafe extern "system" fn VirtualToPhysical<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#virtual: u64, physical: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).VirtualToPhysical(::core::mem::transmute_copy(&r#virtual)) {
                ::core::result::Result::Ok(ok__) => {
                    *physical = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetVirtualTranslationPhysicalOffsets<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetVirtualTranslationPhysicalOffsets(::core::mem::transmute_copy(&r#virtual), ::core::mem::transmute_copy(&offsets), ::core::mem::transmute_copy(&offsetssize), ::core::mem::transmute_copy(&levels)).into()
        }
        unsafe extern "system" fn ReadHandleData<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadHandleData(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&datatype), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into()
        }
        unsafe extern "system" fn FillVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FillVirtual(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *filled = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FillPhysical<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FillPhysical(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *filled = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, info: *mut super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryVirtual(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *info = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            ReadVirtual: ReadVirtual::<Impl, IMPL_OFFSET>,
            WriteVirtual: WriteVirtual::<Impl, IMPL_OFFSET>,
            SearchVirtual: SearchVirtual::<Impl, IMPL_OFFSET>,
            ReadVirtualUncached: ReadVirtualUncached::<Impl, IMPL_OFFSET>,
            WriteVirtualUncached: WriteVirtualUncached::<Impl, IMPL_OFFSET>,
            ReadPointersVirtual: ReadPointersVirtual::<Impl, IMPL_OFFSET>,
            WritePointersVirtual: WritePointersVirtual::<Impl, IMPL_OFFSET>,
            ReadPhysical: ReadPhysical::<Impl, IMPL_OFFSET>,
            WritePhysical: WritePhysical::<Impl, IMPL_OFFSET>,
            ReadControl: ReadControl::<Impl, IMPL_OFFSET>,
            WriteControl: WriteControl::<Impl, IMPL_OFFSET>,
            ReadIo: ReadIo::<Impl, IMPL_OFFSET>,
            WriteIo: WriteIo::<Impl, IMPL_OFFSET>,
            ReadMsr: ReadMsr::<Impl, IMPL_OFFSET>,
            WriteMsr: WriteMsr::<Impl, IMPL_OFFSET>,
            ReadBusData: ReadBusData::<Impl, IMPL_OFFSET>,
            WriteBusData: WriteBusData::<Impl, IMPL_OFFSET>,
            CheckLowMemory: CheckLowMemory::<Impl, IMPL_OFFSET>,
            ReadDebuggerData: ReadDebuggerData::<Impl, IMPL_OFFSET>,
            ReadProcessorSystemData: ReadProcessorSystemData::<Impl, IMPL_OFFSET>,
            VirtualToPhysical: VirtualToPhysical::<Impl, IMPL_OFFSET>,
            GetVirtualTranslationPhysicalOffsets: GetVirtualTranslationPhysicalOffsets::<Impl, IMPL_OFFSET>,
            ReadHandleData: ReadHandleData::<Impl, IMPL_OFFSET>,
            FillVirtual: FillVirtual::<Impl, IMPL_OFFSET>,
            FillPhysical: FillPhysical::<Impl, IMPL_OFFSET>,
            QueryVirtual: QueryVirtual::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDataSpaces2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_System_Memory")]
pub trait IDebugDataSpaces3Impl: Sized {
    fn ReadVirtual(&mut self, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteVirtual(&mut self, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn SearchVirtual(&mut self, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32) -> ::windows::core::Result<u64>;
    fn ReadVirtualUncached(&mut self, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteVirtualUncached(&mut self, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadPointersVirtual(&mut self, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::Result<()>;
    fn WritePointersVirtual(&mut self, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::Result<()>;
    fn ReadPhysical(&mut self, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WritePhysical(&mut self, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadControl(&mut self, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteControl(&mut self, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadIo(&mut self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteIo(&mut self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadMsr(&mut self, msr: u32) -> ::windows::core::Result<u64>;
    fn WriteMsr(&mut self, msr: u32, value: u64) -> ::windows::core::Result<()>;
    fn ReadBusData(&mut self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteBusData(&mut self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn CheckLowMemory(&mut self) -> ::windows::core::Result<()>;
    fn ReadDebuggerData(&mut self, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::Result<()>;
    fn ReadProcessorSystemData(&mut self, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::Result<()>;
    fn VirtualToPhysical(&mut self, r#virtual: u64) -> ::windows::core::Result<u64>;
    fn GetVirtualTranslationPhysicalOffsets(&mut self, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::core::Result<()>;
    fn ReadHandleData(&mut self, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::Result<()>;
    fn FillVirtual(&mut self, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32) -> ::windows::core::Result<u32>;
    fn FillPhysical(&mut self, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32) -> ::windows::core::Result<u32>;
    fn QueryVirtual(&mut self, offset: u64) -> ::windows::core::Result<super::super::Memory::MEMORY_BASIC_INFORMATION64>;
    fn ReadImageNtHeaders(&mut self, imagebase: u64) -> ::windows::core::Result<IMAGE_NT_HEADERS64>;
    fn ReadTagged(&mut self, tag: *const ::windows::core::GUID, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows::core::Result<()>;
    fn StartEnumTagged(&mut self) -> ::windows::core::Result<u64>;
    fn GetNextTagged(&mut self, handle: u64, tag: *mut ::windows::core::GUID, size: *mut u32) -> ::windows::core::Result<()>;
    fn EndEnumTagged(&mut self, handle: u64) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_System_Memory")]
impl IDebugDataSpaces3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDataSpaces3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDataSpaces3Vtbl {
        unsafe extern "system" fn ReadVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SearchVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SearchVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&length), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&patterngranularity)) {
                ::core::result::Result::Ok(ok__) => {
                    *matchoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadVirtualUncached<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadVirtualUncached(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteVirtualUncached<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteVirtualUncached(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadPointersVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadPointersVirtual(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into()
        }
        unsafe extern "system" fn WritePointersVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WritePointersVirtual(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into()
        }
        unsafe extern "system" fn ReadPhysical<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadPhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WritePhysical<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WritePhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadControl<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadControl(::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteControl<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteControl(::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadIo<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadIo(::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteIo<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteIo(::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadMsr<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReadMsr(::core::mem::transmute_copy(&msr)) {
                ::core::result::Result::Ok(ok__) => {
                    *value = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteMsr<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteMsr(::core::mem::transmute_copy(&msr), ::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn ReadBusData<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadBusData(::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteBusData<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteBusData(::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CheckLowMemory<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CheckLowMemory().into()
        }
        unsafe extern "system" fn ReadDebuggerData<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadDebuggerData(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into()
        }
        unsafe extern "system" fn ReadProcessorSystemData<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadProcessorSystemData(::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into()
        }
        unsafe extern "system" fn VirtualToPhysical<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#virtual: u64, physical: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).VirtualToPhysical(::core::mem::transmute_copy(&r#virtual)) {
                ::core::result::Result::Ok(ok__) => {
                    *physical = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetVirtualTranslationPhysicalOffsets<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetVirtualTranslationPhysicalOffsets(::core::mem::transmute_copy(&r#virtual), ::core::mem::transmute_copy(&offsets), ::core::mem::transmute_copy(&offsetssize), ::core::mem::transmute_copy(&levels)).into()
        }
        unsafe extern "system" fn ReadHandleData<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadHandleData(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&datatype), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into()
        }
        unsafe extern "system" fn FillVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FillVirtual(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *filled = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FillPhysical<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FillPhysical(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *filled = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, info: *mut super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryVirtual(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *info = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadImageNtHeaders<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagebase: u64, headers: *mut IMAGE_NT_HEADERS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReadImageNtHeaders(::core::mem::transmute_copy(&imagebase)) {
                ::core::result::Result::Ok(ok__) => {
                    *headers = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadTagged<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tag: *const ::windows::core::GUID, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadTagged(::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&totalsize)).into()
        }
        unsafe extern "system" fn StartEnumTagged<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartEnumTagged() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextTagged<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, tag: *mut ::windows::core::GUID, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNextTagged(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&size)).into()
        }
        unsafe extern "system" fn EndEnumTagged<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndEnumTagged(::core::mem::transmute_copy(&handle)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            ReadVirtual: ReadVirtual::<Impl, IMPL_OFFSET>,
            WriteVirtual: WriteVirtual::<Impl, IMPL_OFFSET>,
            SearchVirtual: SearchVirtual::<Impl, IMPL_OFFSET>,
            ReadVirtualUncached: ReadVirtualUncached::<Impl, IMPL_OFFSET>,
            WriteVirtualUncached: WriteVirtualUncached::<Impl, IMPL_OFFSET>,
            ReadPointersVirtual: ReadPointersVirtual::<Impl, IMPL_OFFSET>,
            WritePointersVirtual: WritePointersVirtual::<Impl, IMPL_OFFSET>,
            ReadPhysical: ReadPhysical::<Impl, IMPL_OFFSET>,
            WritePhysical: WritePhysical::<Impl, IMPL_OFFSET>,
            ReadControl: ReadControl::<Impl, IMPL_OFFSET>,
            WriteControl: WriteControl::<Impl, IMPL_OFFSET>,
            ReadIo: ReadIo::<Impl, IMPL_OFFSET>,
            WriteIo: WriteIo::<Impl, IMPL_OFFSET>,
            ReadMsr: ReadMsr::<Impl, IMPL_OFFSET>,
            WriteMsr: WriteMsr::<Impl, IMPL_OFFSET>,
            ReadBusData: ReadBusData::<Impl, IMPL_OFFSET>,
            WriteBusData: WriteBusData::<Impl, IMPL_OFFSET>,
            CheckLowMemory: CheckLowMemory::<Impl, IMPL_OFFSET>,
            ReadDebuggerData: ReadDebuggerData::<Impl, IMPL_OFFSET>,
            ReadProcessorSystemData: ReadProcessorSystemData::<Impl, IMPL_OFFSET>,
            VirtualToPhysical: VirtualToPhysical::<Impl, IMPL_OFFSET>,
            GetVirtualTranslationPhysicalOffsets: GetVirtualTranslationPhysicalOffsets::<Impl, IMPL_OFFSET>,
            ReadHandleData: ReadHandleData::<Impl, IMPL_OFFSET>,
            FillVirtual: FillVirtual::<Impl, IMPL_OFFSET>,
            FillPhysical: FillPhysical::<Impl, IMPL_OFFSET>,
            QueryVirtual: QueryVirtual::<Impl, IMPL_OFFSET>,
            ReadImageNtHeaders: ReadImageNtHeaders::<Impl, IMPL_OFFSET>,
            ReadTagged: ReadTagged::<Impl, IMPL_OFFSET>,
            StartEnumTagged: StartEnumTagged::<Impl, IMPL_OFFSET>,
            GetNextTagged: GetNextTagged::<Impl, IMPL_OFFSET>,
            EndEnumTagged: EndEnumTagged::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDataSpaces3 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
pub trait IDebugDataSpaces4Impl: Sized {
    fn ReadVirtual(&mut self, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteVirtual(&mut self, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn SearchVirtual(&mut self, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32) -> ::windows::core::Result<u64>;
    fn ReadVirtualUncached(&mut self, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteVirtualUncached(&mut self, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadPointersVirtual(&mut self, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::Result<()>;
    fn WritePointersVirtual(&mut self, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::Result<()>;
    fn ReadPhysical(&mut self, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WritePhysical(&mut self, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadControl(&mut self, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteControl(&mut self, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadIo(&mut self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteIo(&mut self, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn ReadMsr(&mut self, msr: u32) -> ::windows::core::Result<u64>;
    fn WriteMsr(&mut self, msr: u32, value: u64) -> ::windows::core::Result<()>;
    fn ReadBusData(&mut self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteBusData(&mut self, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn CheckLowMemory(&mut self) -> ::windows::core::Result<()>;
    fn ReadDebuggerData(&mut self, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::Result<()>;
    fn ReadProcessorSystemData(&mut self, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::Result<()>;
    fn VirtualToPhysical(&mut self, r#virtual: u64) -> ::windows::core::Result<u64>;
    fn GetVirtualTranslationPhysicalOffsets(&mut self, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::core::Result<()>;
    fn ReadHandleData(&mut self, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::Result<()>;
    fn FillVirtual(&mut self, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32) -> ::windows::core::Result<u32>;
    fn FillPhysical(&mut self, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32) -> ::windows::core::Result<u32>;
    fn QueryVirtual(&mut self, offset: u64) -> ::windows::core::Result<super::super::Memory::MEMORY_BASIC_INFORMATION64>;
    fn ReadImageNtHeaders(&mut self, imagebase: u64) -> ::windows::core::Result<IMAGE_NT_HEADERS64>;
    fn ReadTagged(&mut self, tag: *const ::windows::core::GUID, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows::core::Result<()>;
    fn StartEnumTagged(&mut self) -> ::windows::core::Result<u64>;
    fn GetNextTagged(&mut self, handle: u64, tag: *mut ::windows::core::GUID, size: *mut u32) -> ::windows::core::Result<()>;
    fn EndEnumTagged(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn GetOffsetInformation(&mut self, space: u32, which: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::Result<()>;
    fn GetNextDifferentlyValidOffsetVirtual(&mut self, offset: u64) -> ::windows::core::Result<u64>;
    fn GetValidRegionVirtual(&mut self, base: u64, size: u32, validbase: *mut u64, validsize: *mut u32) -> ::windows::core::Result<()>;
    fn SearchVirtual2(&mut self, offset: u64, length: u64, flags: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32) -> ::windows::core::Result<u64>;
    fn ReadMultiByteStringVirtual(&mut self, offset: u64, maxbytes: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::Result<()>;
    fn ReadMultiByteStringVirtualWide(&mut self, offset: u64, maxbytes: u32, codepage: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::Result<()>;
    fn ReadUnicodeStringVirtual(&mut self, offset: u64, maxbytes: u32, codepage: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::Result<()>;
    fn ReadUnicodeStringVirtualWide(&mut self, offset: u64, maxbytes: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::Result<()>;
    fn ReadPhysical2(&mut self, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WritePhysical2(&mut self, offset: u64, flags: u32, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
impl IDebugDataSpaces4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDataSpaces4Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDataSpaces4Vtbl {
        unsafe extern "system" fn ReadVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SearchVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SearchVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&length), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&patterngranularity)) {
                ::core::result::Result::Ok(ok__) => {
                    *matchoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadVirtualUncached<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadVirtualUncached(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteVirtualUncached<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteVirtualUncached(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadPointersVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadPointersVirtual(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into()
        }
        unsafe extern "system" fn WritePointersVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WritePointersVirtual(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into()
        }
        unsafe extern "system" fn ReadPhysical<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadPhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WritePhysical<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WritePhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadControl<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadControl(::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteControl<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteControl(::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadIo<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadIo(::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteIo<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteIo(::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadMsr<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReadMsr(::core::mem::transmute_copy(&msr)) {
                ::core::result::Result::Ok(ok__) => {
                    *value = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteMsr<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteMsr(::core::mem::transmute_copy(&msr), ::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn ReadBusData<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadBusData(::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteBusData<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteBusData(::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CheckLowMemory<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CheckLowMemory().into()
        }
        unsafe extern "system" fn ReadDebuggerData<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadDebuggerData(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into()
        }
        unsafe extern "system" fn ReadProcessorSystemData<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadProcessorSystemData(::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into()
        }
        unsafe extern "system" fn VirtualToPhysical<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#virtual: u64, physical: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).VirtualToPhysical(::core::mem::transmute_copy(&r#virtual)) {
                ::core::result::Result::Ok(ok__) => {
                    *physical = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetVirtualTranslationPhysicalOffsets<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetVirtualTranslationPhysicalOffsets(::core::mem::transmute_copy(&r#virtual), ::core::mem::transmute_copy(&offsets), ::core::mem::transmute_copy(&offsetssize), ::core::mem::transmute_copy(&levels)).into()
        }
        unsafe extern "system" fn ReadHandleData<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadHandleData(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&datatype), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into()
        }
        unsafe extern "system" fn FillVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FillVirtual(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *filled = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FillPhysical<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FillPhysical(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *filled = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, info: *mut super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryVirtual(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *info = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadImageNtHeaders<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagebase: u64, headers: *mut IMAGE_NT_HEADERS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReadImageNtHeaders(::core::mem::transmute_copy(&imagebase)) {
                ::core::result::Result::Ok(ok__) => {
                    *headers = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadTagged<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tag: *const ::windows::core::GUID, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadTagged(::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&totalsize)).into()
        }
        unsafe extern "system" fn StartEnumTagged<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartEnumTagged() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextTagged<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, tag: *mut ::windows::core::GUID, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNextTagged(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&size)).into()
        }
        unsafe extern "system" fn EndEnumTagged<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndEnumTagged(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn GetOffsetInformation<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, space: u32, which: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOffsetInformation(::core::mem::transmute_copy(&space), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into()
        }
        unsafe extern "system" fn GetNextDifferentlyValidOffsetVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, nextoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNextDifferentlyValidOffsetVirtual(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *nextoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValidRegionVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, validbase: *mut u64, validsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetValidRegionVirtual(::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&validbase), ::core::mem::transmute_copy(&validsize)).into()
        }
        unsafe extern "system" fn SearchVirtual2<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, flags: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SearchVirtual2(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&length), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&patterngranularity)) {
                ::core::result::Result::Ok(ok__) => {
                    *matchoffset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadMultiByteStringVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadMultiByteStringVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&maxbytes), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringbytes)).into()
        }
        unsafe extern "system" fn ReadMultiByteStringVirtualWide<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, codepage: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadMultiByteStringVirtualWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&maxbytes), ::core::mem::transmute_copy(&codepage), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringbytes)).into()
        }
        unsafe extern "system" fn ReadUnicodeStringVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, codepage: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadUnicodeStringVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&maxbytes), ::core::mem::transmute_copy(&codepage), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringbytes)).into()
        }
        unsafe extern "system" fn ReadUnicodeStringVirtualWide<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadUnicodeStringVirtualWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&maxbytes), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringbytes)).into()
        }
        unsafe extern "system" fn ReadPhysical2<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadPhysical2(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WritePhysical2<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WritePhysical2(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            ReadVirtual: ReadVirtual::<Impl, IMPL_OFFSET>,
            WriteVirtual: WriteVirtual::<Impl, IMPL_OFFSET>,
            SearchVirtual: SearchVirtual::<Impl, IMPL_OFFSET>,
            ReadVirtualUncached: ReadVirtualUncached::<Impl, IMPL_OFFSET>,
            WriteVirtualUncached: WriteVirtualUncached::<Impl, IMPL_OFFSET>,
            ReadPointersVirtual: ReadPointersVirtual::<Impl, IMPL_OFFSET>,
            WritePointersVirtual: WritePointersVirtual::<Impl, IMPL_OFFSET>,
            ReadPhysical: ReadPhysical::<Impl, IMPL_OFFSET>,
            WritePhysical: WritePhysical::<Impl, IMPL_OFFSET>,
            ReadControl: ReadControl::<Impl, IMPL_OFFSET>,
            WriteControl: WriteControl::<Impl, IMPL_OFFSET>,
            ReadIo: ReadIo::<Impl, IMPL_OFFSET>,
            WriteIo: WriteIo::<Impl, IMPL_OFFSET>,
            ReadMsr: ReadMsr::<Impl, IMPL_OFFSET>,
            WriteMsr: WriteMsr::<Impl, IMPL_OFFSET>,
            ReadBusData: ReadBusData::<Impl, IMPL_OFFSET>,
            WriteBusData: WriteBusData::<Impl, IMPL_OFFSET>,
            CheckLowMemory: CheckLowMemory::<Impl, IMPL_OFFSET>,
            ReadDebuggerData: ReadDebuggerData::<Impl, IMPL_OFFSET>,
            ReadProcessorSystemData: ReadProcessorSystemData::<Impl, IMPL_OFFSET>,
            VirtualToPhysical: VirtualToPhysical::<Impl, IMPL_OFFSET>,
            GetVirtualTranslationPhysicalOffsets: GetVirtualTranslationPhysicalOffsets::<Impl, IMPL_OFFSET>,
            ReadHandleData: ReadHandleData::<Impl, IMPL_OFFSET>,
            FillVirtual: FillVirtual::<Impl, IMPL_OFFSET>,
            FillPhysical: FillPhysical::<Impl, IMPL_OFFSET>,
            QueryVirtual: QueryVirtual::<Impl, IMPL_OFFSET>,
            ReadImageNtHeaders: ReadImageNtHeaders::<Impl, IMPL_OFFSET>,
            ReadTagged: ReadTagged::<Impl, IMPL_OFFSET>,
            StartEnumTagged: StartEnumTagged::<Impl, IMPL_OFFSET>,
            GetNextTagged: GetNextTagged::<Impl, IMPL_OFFSET>,
            EndEnumTagged: EndEnumTagged::<Impl, IMPL_OFFSET>,
            GetOffsetInformation: GetOffsetInformation::<Impl, IMPL_OFFSET>,
            GetNextDifferentlyValidOffsetVirtual: GetNextDifferentlyValidOffsetVirtual::<Impl, IMPL_OFFSET>,
            GetValidRegionVirtual: GetValidRegionVirtual::<Impl, IMPL_OFFSET>,
            SearchVirtual2: SearchVirtual2::<Impl, IMPL_OFFSET>,
            ReadMultiByteStringVirtual: ReadMultiByteStringVirtual::<Impl, IMPL_OFFSET>,
            ReadMultiByteStringVirtualWide: ReadMultiByteStringVirtualWide::<Impl, IMPL_OFFSET>,
            ReadUnicodeStringVirtual: ReadUnicodeStringVirtual::<Impl, IMPL_OFFSET>,
            ReadUnicodeStringVirtualWide: ReadUnicodeStringVirtualWide::<Impl, IMPL_OFFSET>,
            ReadPhysical2: ReadPhysical2::<Impl, IMPL_OFFSET>,
            WritePhysical2: WritePhysical2::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDataSpaces4 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentImpl: Sized + IDebugDocumentInfoImpl {}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentVtbl {
        Self { base: IDebugDocumentInfoVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>() }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocument as ::windows::core::Interface>::IID
    }
}
pub trait IDebugDocumentContextImpl: Sized {
    fn GetDocument(&mut self) -> ::windows::core::Result<IDebugDocument>;
    fn EnumCodeContexts(&mut self) -> ::windows::core::Result<IEnumDebugCodeContexts>;
}
impl IDebugDocumentContextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentContextImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentContextVtbl {
        unsafe extern "system" fn GetDocument<Impl: IDebugDocumentContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDocument() {
                ::core::result::Result::Ok(ok__) => {
                    *ppsd = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumCodeContexts<Impl: IDebugDocumentContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppescc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumCodeContexts() {
                ::core::result::Result::Ok(ok__) => {
                    *ppescc = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetDocument: GetDocument::<Impl, IMPL_OFFSET>,
            EnumCodeContexts: EnumCodeContexts::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentContext as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentHelper32Impl: Sized {
    fn Init(&mut self, pda: ::core::option::Option<IDebugApplication32>, pszshortname: super::super::super::Foundation::PWSTR, pszlongname: super::super::super::Foundation::PWSTR, docattr: u32) -> ::windows::core::Result<()>;
    fn Attach(&mut self, pddhparent: ::core::option::Option<IDebugDocumentHelper32>) -> ::windows::core::Result<()>;
    fn Detach(&mut self) -> ::windows::core::Result<()>;
    fn AddUnicodeText(&mut self, psztext: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AddDBCSText(&mut self, psztext: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn SetDebugDocumentHost(&mut self, pddh: ::core::option::Option<IDebugDocumentHost>) -> ::windows::core::Result<()>;
    fn AddDeferredText(&mut self, cchars: u32, dwtextstartcookie: u32) -> ::windows::core::Result<()>;
    fn DefineScriptBlock(&mut self, ulcharoffset: u32, cchars: u32, pas: ::core::option::Option<IActiveScript>, fscriptlet: super::super::super::Foundation::BOOL) -> ::windows::core::Result<u32>;
    fn SetDefaultTextAttr(&mut self, statextattr: u16) -> ::windows::core::Result<()>;
    fn SetTextAttributes(&mut self, ulcharoffset: u32, cchars: u32, pstatextattr: *const u16) -> ::windows::core::Result<()>;
    fn SetLongName(&mut self, pszlongname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn SetShortName(&mut self, pszshortname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn SetDocumentAttr(&mut self, pszattributes: u32) -> ::windows::core::Result<()>;
    fn GetDebugApplicationNode(&mut self) -> ::windows::core::Result<IDebugApplicationNode>;
    fn GetScriptBlockInfo(&mut self, dwsourcecontext: u32, ppasd: *mut ::core::option::Option<IActiveScript>, picharpos: *mut u32, pcchars: *mut u32) -> ::windows::core::Result<()>;
    fn CreateDebugDocumentContext(&mut self, icharpos: u32, cchars: u32) -> ::windows::core::Result<IDebugDocumentContext>;
    fn BringDocumentToTop(&mut self) -> ::windows::core::Result<()>;
    fn BringDocumentContextToTop(&mut self, pddc: ::core::option::Option<IDebugDocumentContext>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentHelper32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentHelper32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentHelper32Vtbl {
        unsafe extern "system" fn Init<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, pszshortname: super::super::super::Foundation::PWSTR, pszlongname: super::super::super::Foundation::PWSTR, docattr: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Init(::core::mem::transmute(&pda), ::core::mem::transmute_copy(&pszshortname), ::core::mem::transmute_copy(&pszlongname), ::core::mem::transmute_copy(&docattr)).into()
        }
        unsafe extern "system" fn Attach<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddhparent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Attach(::core::mem::transmute(&pddhparent)).into()
        }
        unsafe extern "system" fn Detach<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Detach().into()
        }
        unsafe extern "system" fn AddUnicodeText<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddUnicodeText(::core::mem::transmute_copy(&psztext)).into()
        }
        unsafe extern "system" fn AddDBCSText<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDBCSText(::core::mem::transmute_copy(&psztext)).into()
        }
        unsafe extern "system" fn SetDebugDocumentHost<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddh: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetDebugDocumentHost(::core::mem::transmute(&pddh)).into()
        }
        unsafe extern "system" fn AddDeferredText<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cchars: u32, dwtextstartcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDeferredText(::core::mem::transmute_copy(&cchars), ::core::mem::transmute_copy(&dwtextstartcookie)).into()
        }
        unsafe extern "system" fn DefineScriptBlock<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcharoffset: u32, cchars: u32, pas: ::windows::core::RawPtr, fscriptlet: super::super::super::Foundation::BOOL, pdwsourcecontext: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DefineScriptBlock(::core::mem::transmute_copy(&ulcharoffset), ::core::mem::transmute_copy(&cchars), ::core::mem::transmute(&pas), ::core::mem::transmute_copy(&fscriptlet)) {
                ::core::result::Result::Ok(ok__) => {
                    *pdwsourcecontext = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDefaultTextAttr<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, statextattr: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetDefaultTextAttr(::core::mem::transmute_copy(&statextattr)).into()
        }
        unsafe extern "system" fn SetTextAttributes<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcharoffset: u32, cchars: u32, pstatextattr: *const u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextAttributes(::core::mem::transmute_copy(&ulcharoffset), ::core::mem::transmute_copy(&cchars), ::core::mem::transmute_copy(&pstatextattr)).into()
        }
        unsafe extern "system" fn SetLongName<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszlongname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetLongName(::core::mem::transmute_copy(&pszlongname)).into()
        }
        unsafe extern "system" fn SetShortName<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszshortname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetShortName(::core::mem::transmute_copy(&pszshortname)).into()
        }
        unsafe extern "system" fn SetDocumentAttr<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszattributes: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetDocumentAttr(::core::mem::transmute_copy(&pszattributes)).into()
        }
        unsafe extern "system" fn GetDebugApplicationNode<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdan: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDebugApplicationNode() {
                ::core::result::Result::Ok(ok__) => {
                    *ppdan = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptBlockInfo<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u32, ppasd: *mut ::windows::core::RawPtr, picharpos: *mut u32, pcchars: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScriptBlockInfo(::core::mem::transmute_copy(&dwsourcecontext), ::core::mem::transmute_copy(&ppasd), ::core::mem::transmute_copy(&picharpos), ::core::mem::transmute_copy(&pcchars)).into()
        }
        unsafe extern "system" fn CreateDebugDocumentContext<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, icharpos: u32, cchars: u32, ppddc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateDebugDocumentContext(::core::mem::transmute_copy(&icharpos), ::core::mem::transmute_copy(&cchars)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppddc = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BringDocumentToTop<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).BringDocumentToTop().into()
        }
        unsafe extern "system" fn BringDocumentContextToTop<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).BringDocumentContextToTop(::core::mem::transmute(&pddc)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Init: Init::<Impl, IMPL_OFFSET>,
            Attach: Attach::<Impl, IMPL_OFFSET>,
            Detach: Detach::<Impl, IMPL_OFFSET>,
            AddUnicodeText: AddUnicodeText::<Impl, IMPL_OFFSET>,
            AddDBCSText: AddDBCSText::<Impl, IMPL_OFFSET>,
            SetDebugDocumentHost: SetDebugDocumentHost::<Impl, IMPL_OFFSET>,
            AddDeferredText: AddDeferredText::<Impl, IMPL_OFFSET>,
            DefineScriptBlock: DefineScriptBlock::<Impl, IMPL_OFFSET>,
            SetDefaultTextAttr: SetDefaultTextAttr::<Impl, IMPL_OFFSET>,
            SetTextAttributes: SetTextAttributes::<Impl, IMPL_OFFSET>,
            SetLongName: SetLongName::<Impl, IMPL_OFFSET>,
            SetShortName: SetShortName::<Impl, IMPL_OFFSET>,
            SetDocumentAttr: SetDocumentAttr::<Impl, IMPL_OFFSET>,
            GetDebugApplicationNode: GetDebugApplicationNode::<Impl, IMPL_OFFSET>,
            GetScriptBlockInfo: GetScriptBlockInfo::<Impl, IMPL_OFFSET>,
            CreateDebugDocumentContext: CreateDebugDocumentContext::<Impl, IMPL_OFFSET>,
            BringDocumentToTop: BringDocumentToTop::<Impl, IMPL_OFFSET>,
            BringDocumentContextToTop: BringDocumentContextToTop::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentHelper32 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentHelper64Impl: Sized {
    fn Init(&mut self, pda: ::core::option::Option<IDebugApplication64>, pszshortname: super::super::super::Foundation::PWSTR, pszlongname: super::super::super::Foundation::PWSTR, docattr: u32) -> ::windows::core::Result<()>;
    fn Attach(&mut self, pddhparent: ::core::option::Option<IDebugDocumentHelper64>) -> ::windows::core::Result<()>;
    fn Detach(&mut self) -> ::windows::core::Result<()>;
    fn AddUnicodeText(&mut self, psztext: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AddDBCSText(&mut self, psztext: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn SetDebugDocumentHost(&mut self, pddh: ::core::option::Option<IDebugDocumentHost>) -> ::windows::core::Result<()>;
    fn AddDeferredText(&mut self, cchars: u32, dwtextstartcookie: u32) -> ::windows::core::Result<()>;
    fn DefineScriptBlock(&mut self, ulcharoffset: u32, cchars: u32, pas: ::core::option::Option<IActiveScript>, fscriptlet: super::super::super::Foundation::BOOL) -> ::windows::core::Result<u64>;
    fn SetDefaultTextAttr(&mut self, statextattr: u16) -> ::windows::core::Result<()>;
    fn SetTextAttributes(&mut self, ulcharoffset: u32, cchars: u32, pstatextattr: *const u16) -> ::windows::core::Result<()>;
    fn SetLongName(&mut self, pszlongname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn SetShortName(&mut self, pszshortname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn SetDocumentAttr(&mut self, pszattributes: u32) -> ::windows::core::Result<()>;
    fn GetDebugApplicationNode(&mut self) -> ::windows::core::Result<IDebugApplicationNode>;
    fn GetScriptBlockInfo(&mut self, dwsourcecontext: u64, ppasd: *mut ::core::option::Option<IActiveScript>, picharpos: *mut u32, pcchars: *mut u32) -> ::windows::core::Result<()>;
    fn CreateDebugDocumentContext(&mut self, icharpos: u32, cchars: u32) -> ::windows::core::Result<IDebugDocumentContext>;
    fn BringDocumentToTop(&mut self) -> ::windows::core::Result<()>;
    fn BringDocumentContextToTop(&mut self, pddc: ::core::option::Option<IDebugDocumentContext>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentHelper64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentHelper64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentHelper64Vtbl {
        unsafe extern "system" fn Init<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, pszshortname: super::super::super::Foundation::PWSTR, pszlongname: super::super::super::Foundation::PWSTR, docattr: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Init(::core::mem::transmute(&pda), ::core::mem::transmute_copy(&pszshortname), ::core::mem::transmute_copy(&pszlongname), ::core::mem::transmute_copy(&docattr)).into()
        }
        unsafe extern "system" fn Attach<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddhparent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Attach(::core::mem::transmute(&pddhparent)).into()
        }
        unsafe extern "system" fn Detach<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Detach().into()
        }
        unsafe extern "system" fn AddUnicodeText<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddUnicodeText(::core::mem::transmute_copy(&psztext)).into()
        }
        unsafe extern "system" fn AddDBCSText<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDBCSText(::core::mem::transmute_copy(&psztext)).into()
        }
        unsafe extern "system" fn SetDebugDocumentHost<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddh: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetDebugDocumentHost(::core::mem::transmute(&pddh)).into()
        }
        unsafe extern "system" fn AddDeferredText<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cchars: u32, dwtextstartcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddDeferredText(::core::mem::transmute_copy(&cchars), ::core::mem::transmute_copy(&dwtextstartcookie)).into()
        }
        unsafe extern "system" fn DefineScriptBlock<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcharoffset: u32, cchars: u32, pas: ::windows::core::RawPtr, fscriptlet: super::super::super::Foundation::BOOL, pdwsourcecontext: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DefineScriptBlock(::core::mem::transmute_copy(&ulcharoffset), ::core::mem::transmute_copy(&cchars), ::core::mem::transmute(&pas), ::core::mem::transmute_copy(&fscriptlet)) {
                ::core::result::Result::Ok(ok__) => {
                    *pdwsourcecontext = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDefaultTextAttr<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, statextattr: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetDefaultTextAttr(::core::mem::transmute_copy(&statextattr)).into()
        }
        unsafe extern "system" fn SetTextAttributes<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcharoffset: u32, cchars: u32, pstatextattr: *const u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTextAttributes(::core::mem::transmute_copy(&ulcharoffset), ::core::mem::transmute_copy(&cchars), ::core::mem::transmute_copy(&pstatextattr)).into()
        }
        unsafe extern "system" fn SetLongName<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszlongname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetLongName(::core::mem::transmute_copy(&pszlongname)).into()
        }
        unsafe extern "system" fn SetShortName<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszshortname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetShortName(::core::mem::transmute_copy(&pszshortname)).into()
        }
        unsafe extern "system" fn SetDocumentAttr<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszattributes: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetDocumentAttr(::core::mem::transmute_copy(&pszattributes)).into()
        }
        unsafe extern "system" fn GetDebugApplicationNode<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdan: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDebugApplicationNode() {
                ::core::result::Result::Ok(ok__) => {
                    *ppdan = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptBlockInfo<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u64, ppasd: *mut ::windows::core::RawPtr, picharpos: *mut u32, pcchars: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScriptBlockInfo(::core::mem::transmute_copy(&dwsourcecontext), ::core::mem::transmute_copy(&ppasd), ::core::mem::transmute_copy(&picharpos), ::core::mem::transmute_copy(&pcchars)).into()
        }
        unsafe extern "system" fn CreateDebugDocumentContext<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, icharpos: u32, cchars: u32, ppddc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateDebugDocumentContext(::core::mem::transmute_copy(&icharpos), ::core::mem::transmute_copy(&cchars)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppddc = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BringDocumentToTop<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).BringDocumentToTop().into()
        }
        unsafe extern "system" fn BringDocumentContextToTop<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).BringDocumentContextToTop(::core::mem::transmute(&pddc)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Init: Init::<Impl, IMPL_OFFSET>,
            Attach: Attach::<Impl, IMPL_OFFSET>,
            Detach: Detach::<Impl, IMPL_OFFSET>,
            AddUnicodeText: AddUnicodeText::<Impl, IMPL_OFFSET>,
            AddDBCSText: AddDBCSText::<Impl, IMPL_OFFSET>,
            SetDebugDocumentHost: SetDebugDocumentHost::<Impl, IMPL_OFFSET>,
            AddDeferredText: AddDeferredText::<Impl, IMPL_OFFSET>,
            DefineScriptBlock: DefineScriptBlock::<Impl, IMPL_OFFSET>,
            SetDefaultTextAttr: SetDefaultTextAttr::<Impl, IMPL_OFFSET>,
            SetTextAttributes: SetTextAttributes::<Impl, IMPL_OFFSET>,
            SetLongName: SetLongName::<Impl, IMPL_OFFSET>,
            SetShortName: SetShortName::<Impl, IMPL_OFFSET>,
            SetDocumentAttr: SetDocumentAttr::<Impl, IMPL_OFFSET>,
            GetDebugApplicationNode: GetDebugApplicationNode::<Impl, IMPL_OFFSET>,
            GetScriptBlockInfo: GetScriptBlockInfo::<Impl, IMPL_OFFSET>,
            CreateDebugDocumentContext: CreateDebugDocumentContext::<Impl, IMPL_OFFSET>,
            BringDocumentToTop: BringDocumentToTop::<Impl, IMPL_OFFSET>,
            BringDocumentContextToTop: BringDocumentContextToTop::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentHelper64 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentHostImpl: Sized {
    fn GetDeferredText(&mut self, dwtextstartcookie: u32, pchartext: super::super::super::Foundation::PWSTR, pstatextattr: *mut u16, pcnumchars: *mut u32, cmaxchars: u32) -> ::windows::core::Result<()>;
    fn GetScriptTextAttributes(&mut self, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::Result<()>;
    fn OnCreateDocumentContext(&mut self) -> ::windows::core::Result<::windows::core::IUnknown>;
    fn GetPathName(&mut self, pbstrlongname: *mut super::super::super::Foundation::BSTR, pfisoriginalfile: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn GetFileName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn NotifyChanged(&mut self) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentHostVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentHostImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentHostVtbl {
        unsafe extern "system" fn GetDeferredText<Impl: IDebugDocumentHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtextstartcookie: u32, pchartext: super::super::super::Foundation::PWSTR, pstatextattr: *mut u16, pcnumchars: *mut u32, cmaxchars: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDeferredText(::core::mem::transmute_copy(&dwtextstartcookie), ::core::mem::transmute_copy(&pchartext), ::core::mem::transmute_copy(&pstatextattr), ::core::mem::transmute_copy(&pcnumchars), ::core::mem::transmute_copy(&cmaxchars)).into()
        }
        unsafe extern "system" fn GetScriptTextAttributes<Impl: IDebugDocumentHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScriptTextAttributes(::core::mem::transmute_copy(&pstrcode), ::core::mem::transmute_copy(&unumcodechars), ::core::mem::transmute_copy(&pstrdelimiter), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&pattr)).into()
        }
        unsafe extern "system" fn OnCreateDocumentContext<Impl: IDebugDocumentHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunkouter: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnCreateDocumentContext() {
                ::core::result::Result::Ok(ok__) => {
                    *ppunkouter = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPathName<Impl: IDebugDocumentHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrlongname: *mut super::super::super::Foundation::BSTR, pfisoriginalfile: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPathName(::core::mem::transmute_copy(&pbstrlongname), ::core::mem::transmute_copy(&pfisoriginalfile)).into()
        }
        unsafe extern "system" fn GetFileName<Impl: IDebugDocumentHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrshortname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFileName() {
                ::core::result::Result::Ok(ok__) => {
                    *pbstrshortname = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NotifyChanged<Impl: IDebugDocumentHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).NotifyChanged().into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetDeferredText: GetDeferredText::<Impl, IMPL_OFFSET>,
            GetScriptTextAttributes: GetScriptTextAttributes::<Impl, IMPL_OFFSET>,
            OnCreateDocumentContext: OnCreateDocumentContext::<Impl, IMPL_OFFSET>,
            GetPathName: GetPathName::<Impl, IMPL_OFFSET>,
            GetFileName: GetFileName::<Impl, IMPL_OFFSET>,
            NotifyChanged: NotifyChanged::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentHost as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentInfoImpl: Sized {
    fn GetName(&mut self, dnt: DOCUMENTNAMETYPE) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetDocumentClassId(&mut self) -> ::windows::core::Result<::windows::core::GUID>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentInfoVtbl {
        unsafe extern "system" fn GetName<Impl: IDebugDocumentInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dnt: DOCUMENTNAMETYPE, pbstrname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&dnt)) {
                ::core::result::Result::Ok(ok__) => {
                    *pbstrname = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDocumentClassId<Impl: IDebugDocumentInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pclsiddocument: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDocumentClassId() {
                ::core::result::Result::Ok(ok__) => {
                    *pclsiddocument = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetName: GetName::<Impl, IMPL_OFFSET>,
            GetDocumentClassId: GetDocumentClassId::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentInfo as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentProviderImpl: Sized + IDebugDocumentInfoImpl {
    fn GetDocument(&mut self) -> ::windows::core::Result<IDebugDocument>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentProviderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentProviderVtbl {
        unsafe extern "system" fn GetDocument<Impl: IDebugDocumentProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppssd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDocument() {
                ::core::result::Result::Ok(ok__) => {
                    *ppssd = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: IDebugDocumentInfoVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(), GetDocument: GetDocument::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentProvider as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentTextImpl: Sized + IDebugDocumentInfoImpl + IDebugDocumentImpl {
    fn GetDocumentAttributes(&mut self) -> ::windows::core::Result<u32>;
    fn GetSize(&mut self, pcnumlines: *mut u32, pcnumchars: *mut u32) -> ::windows::core::Result<()>;
    fn GetPositionOfLine(&mut self, clinenumber: u32) -> ::windows::core::Result<u32>;
    fn GetLineOfPosition(&mut self, ccharacterposition: u32, pclinenumber: *mut u32, pccharacteroffsetinline: *mut u32) -> ::windows::core::Result<()>;
    fn GetText(&mut self, ccharacterposition: u32, pchartext: super::super::super::Foundation::PWSTR, pstatextattr: *mut u16, pcnumchars: *mut u32, cmaxchars: u32) -> ::windows::core::Result<()>;
    fn GetPositionOfContext(&mut self, psc: ::core::option::Option<IDebugDocumentContext>, pccharacterposition: *mut u32, cnumchars: *mut u32) -> ::windows::core::Result<()>;
    fn GetContextOfPosition(&mut self, ccharacterposition: u32, cnumchars: u32) -> ::windows::core::Result<IDebugDocumentContext>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentTextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentTextImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentTextVtbl {
        unsafe extern "system" fn GetDocumentAttributes<Impl: IDebugDocumentTextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptextdocattr: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDocumentAttributes() {
                ::core::result::Result::Ok(ok__) => {
                    *ptextdocattr = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSize<Impl: IDebugDocumentTextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcnumlines: *mut u32, pcnumchars: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSize(::core::mem::transmute_copy(&pcnumlines), ::core::mem::transmute_copy(&pcnumchars)).into()
        }
        unsafe extern "system" fn GetPositionOfLine<Impl: IDebugDocumentTextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clinenumber: u32, pccharacterposition: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPositionOfLine(::core::mem::transmute_copy(&clinenumber)) {
                ::core::result::Result::Ok(ok__) => {
                    *pccharacterposition = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLineOfPosition<Impl: IDebugDocumentTextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, pclinenumber: *mut u32, pccharacteroffsetinline: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLineOfPosition(::core::mem::transmute_copy(&ccharacterposition), ::core::mem::transmute_copy(&pclinenumber), ::core::mem::transmute_copy(&pccharacteroffsetinline)).into()
        }
        unsafe extern "system" fn GetText<Impl: IDebugDocumentTextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, pchartext: super::super::super::Foundation::PWSTR, pstatextattr: *mut u16, pcnumchars: *mut u32, cmaxchars: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetText(::core::mem::transmute_copy(&ccharacterposition), ::core::mem::transmute_copy(&pchartext), ::core::mem::transmute_copy(&pstatextattr), ::core::mem::transmute_copy(&pcnumchars), ::core::mem::transmute_copy(&cmaxchars)).into()
        }
        unsafe extern "system" fn GetPositionOfContext<Impl: IDebugDocumentTextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psc: ::windows::core::RawPtr, pccharacterposition: *mut u32, cnumchars: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPositionOfContext(::core::mem::transmute(&psc), ::core::mem::transmute_copy(&pccharacterposition), ::core::mem::transmute_copy(&cnumchars)).into()
        }
        unsafe extern "system" fn GetContextOfPosition<Impl: IDebugDocumentTextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumchars: u32, ppsc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetContextOfPosition(::core::mem::transmute_copy(&ccharacterposition), ::core::mem::transmute_copy(&cnumchars)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppsc = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IDebugDocumentVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            GetDocumentAttributes: GetDocumentAttributes::<Impl, IMPL_OFFSET>,
            GetSize: GetSize::<Impl, IMPL_OFFSET>,
            GetPositionOfLine: GetPositionOfLine::<Impl, IMPL_OFFSET>,
            GetLineOfPosition: GetLineOfPosition::<Impl, IMPL_OFFSET>,
            GetText: GetText::<Impl, IMPL_OFFSET>,
            GetPositionOfContext: GetPositionOfContext::<Impl, IMPL_OFFSET>,
            GetContextOfPosition: GetContextOfPosition::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentText as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentTextAuthorImpl: Sized + IDebugDocumentInfoImpl + IDebugDocumentImpl + IDebugDocumentTextImpl {
    fn InsertText(&mut self, ccharacterposition: u32, cnumtoinsert: u32, pchartext: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn RemoveText(&mut self, ccharacterposition: u32, cnumtoremove: u32) -> ::windows::core::Result<()>;
    fn ReplaceText(&mut self, ccharacterposition: u32, cnumtoreplace: u32, pchartext: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentTextAuthorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentTextAuthorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentTextAuthorVtbl {
        unsafe extern "system" fn InsertText<Impl: IDebugDocumentTextAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoinsert: u32, pchartext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).InsertText(::core::mem::transmute_copy(&ccharacterposition), ::core::mem::transmute_copy(&cnumtoinsert), ::core::mem::transmute_copy(&pchartext)).into()
        }
        unsafe extern "system" fn RemoveText<Impl: IDebugDocumentTextAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoremove: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveText(::core::mem::transmute_copy(&ccharacterposition), ::core::mem::transmute_copy(&cnumtoremove)).into()
        }
        unsafe extern "system" fn ReplaceText<Impl: IDebugDocumentTextAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoreplace: u32, pchartext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReplaceText(::core::mem::transmute_copy(&ccharacterposition), ::core::mem::transmute_copy(&cnumtoreplace), ::core::mem::transmute_copy(&pchartext)).into()
        }
        Self {
            base: IDebugDocumentTextVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            InsertText: InsertText::<Impl, IMPL_OFFSET>,
            RemoveText: RemoveText::<Impl, IMPL_OFFSET>,
            ReplaceText: ReplaceText::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentTextAuthor as ::windows::core::Interface>::IID
    }
}
pub trait IDebugDocumentTextEventsImpl: Sized {
    fn onDestroy(&mut self) -> ::windows::core::Result<()>;
    fn onInsertText(&mut self, ccharacterposition: u32, cnumtoinsert: u32) -> ::windows::core::Result<()>;
    fn onRemoveText(&mut self, ccharacterposition: u32, cnumtoremove: u32) -> ::windows::core::Result<()>;
    fn onReplaceText(&mut self, ccharacterposition: u32, cnumtoreplace: u32) -> ::windows::core::Result<()>;
    fn onUpdateTextAttributes(&mut self, ccharacterposition: u32, cnumtoupdate: u32) -> ::windows::core::Result<()>;
    fn onUpdateDocumentAttributes(&mut self, textdocattr: u32) -> ::windows::core::Result<()>;
}
impl IDebugDocumentTextEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentTextEventsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentTextEventsVtbl {
        unsafe extern "system" fn onDestroy<Impl: IDebugDocumentTextEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onDestroy().into()
        }
        unsafe extern "system" fn onInsertText<Impl: IDebugDocumentTextEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoinsert: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onInsertText(::core::mem::transmute_copy(&ccharacterposition), ::core::mem::transmute_copy(&cnumtoinsert)).into()
        }
        unsafe extern "system" fn onRemoveText<Impl: IDebugDocumentTextEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoremove: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onRemoveText(::core::mem::transmute_copy(&ccharacterposition), ::core::mem::transmute_copy(&cnumtoremove)).into()
        }
        unsafe extern "system" fn onReplaceText<Impl: IDebugDocumentTextEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoreplace: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onReplaceText(::core::mem::transmute_copy(&ccharacterposition), ::core::mem::transmute_copy(&cnumtoreplace)).into()
        }
        unsafe extern "system" fn onUpdateTextAttributes<Impl: IDebugDocumentTextEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoupdate: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onUpdateTextAttributes(::core::mem::transmute_copy(&ccharacterposition), ::core::mem::transmute_copy(&cnumtoupdate)).into()
        }
        unsafe extern "system" fn onUpdateDocumentAttributes<Impl: IDebugDocumentTextEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, textdocattr: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onUpdateDocumentAttributes(::core::mem::transmute_copy(&textdocattr)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            onDestroy: onDestroy::<Impl, IMPL_OFFSET>,
            onInsertText: onInsertText::<Impl, IMPL_OFFSET>,
            onRemoveText: onRemoveText::<Impl, IMPL_OFFSET>,
            onReplaceText: onReplaceText::<Impl, IMPL_OFFSET>,
            onUpdateTextAttributes: onUpdateTextAttributes::<Impl, IMPL_OFFSET>,
            onUpdateDocumentAttributes: onUpdateDocumentAttributes::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentTextEvents as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentTextExternalAuthorImpl: Sized {
    fn GetPathName(&mut self, pbstrlongname: *mut super::super::super::Foundation::BSTR, pfisoriginalfile: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn GetFileName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn NotifyChanged(&mut self) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentTextExternalAuthorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentTextExternalAuthorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentTextExternalAuthorVtbl {
        unsafe extern "system" fn GetPathName<Impl: IDebugDocumentTextExternalAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrlongname: *mut super::super::super::Foundation::BSTR, pfisoriginalfile: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPathName(::core::mem::transmute_copy(&pbstrlongname), ::core::mem::transmute_copy(&pfisoriginalfile)).into()
        }
        unsafe extern "system" fn GetFileName<Impl: IDebugDocumentTextExternalAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrshortname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFileName() {
                ::core::result::Result::Ok(ok__) => {
                    *pbstrshortname = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NotifyChanged<Impl: IDebugDocumentTextExternalAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).NotifyChanged().into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetPathName: GetPathName::<Impl, IMPL_OFFSET>,
            GetFileName: GetFileName::<Impl, IMPL_OFFSET>,
            NotifyChanged: NotifyChanged::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentTextExternalAuthor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugEventCallbacksImpl: Sized {
    fn GetInterestMask(&mut self) -> ::windows::core::Result<u32>;
    fn Breakpoint(&mut self, bp: ::core::option::Option<IDebugBreakpoint>) -> ::windows::core::Result<()>;
    fn Exception(&mut self, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::core::Result<()>;
    fn CreateThread(&mut self, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::core::Result<()>;
    fn ExitThread(&mut self, exitcode: u32) -> ::windows::core::Result<()>;
    fn CreateProcessA(&mut self, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PSTR, imagename: super::super::super::Foundation::PSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::core::Result<()>;
    fn ExitProcess(&mut self, exitcode: u32) -> ::windows::core::Result<()>;
    fn LoadModule(&mut self, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PSTR, imagename: super::super::super::Foundation::PSTR, checksum: u32, timedatestamp: u32) -> ::windows::core::Result<()>;
    fn UnloadModule(&mut self, imagebasename: super::super::super::Foundation::PSTR, baseoffset: u64) -> ::windows::core::Result<()>;
    fn SystemError(&mut self, error: u32, level: u32) -> ::windows::core::Result<()>;
    fn SessionStatus(&mut self, status: u32) -> ::windows::core::Result<()>;
    fn ChangeDebuggeeState(&mut self, flags: u32, argument: u64) -> ::windows::core::Result<()>;
    fn ChangeEngineState(&mut self, flags: u32, argument: u64) -> ::windows::core::Result<()>;
    fn ChangeSymbolState(&mut self, flags: u32, argument: u64) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugEventCallbacksVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugEventCallbacksImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugEventCallbacksVtbl {
        unsafe extern "system" fn GetInterestMask<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInterestMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Breakpoint<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Breakpoint(::core::mem::transmute(&bp)).into()
        }
        unsafe extern "system" fn Exception<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Exception(::core::mem::transmute_copy(&exception), ::core::mem::transmute_copy(&firstchance)).into()
        }
        unsafe extern "system" fn CreateThread<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateThread(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&dataoffset), ::core::mem::transmute_copy(&startoffset)).into()
        }
        unsafe extern "system" fn ExitThread<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExitThread(::core::mem::transmute_copy(&exitcode)).into()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PSTR, imagename: super::super::super::Foundation::PSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .CreateProcessA(::core::mem::transmute_copy(&imagefilehandle), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&baseoffset), ::core::mem::transmute_copy(&modulesize), ::core::mem::transmute_copy(&modulename), ::core::mem::transmute_copy(&imagename), ::core::mem::transmute_copy(&checksum), ::core::mem::transmute_copy(&timedatestamp), ::core::mem::transmute_copy(&initialthreadhandle), ::core::mem::transmute_copy(&threaddataoffset), ::core::mem::transmute_copy(&startoffset))
                .into()
        }
        unsafe extern "system" fn ExitProcess<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExitProcess(::core::mem::transmute_copy(&exitcode)).into()
        }
        unsafe extern "system" fn LoadModule<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PSTR, imagename: super::super::super::Foundation::PSTR, checksum: u32, timedatestamp: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).LoadModule(::core::mem::transmute_copy(&imagefilehandle), ::core::mem::transmute_copy(&baseoffset), ::core::mem::transmute_copy(&modulesize), ::core::mem::transmute_copy(&modulename), ::core::mem::transmute_copy(&imagename), ::core::mem::transmute_copy(&checksum), ::core::mem::transmute_copy(&timedatestamp)).into()
        }
        unsafe extern "system" fn UnloadModule<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagebasename: super::super::super::Foundation::PSTR, baseoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).UnloadModule(::core::mem::transmute_copy(&imagebasename), ::core::mem::transmute_copy(&baseoffset)).into()
        }
        unsafe extern "system" fn SystemError<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, error: u32, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SystemError(::core::mem::transmute_copy(&error), ::core::mem::transmute_copy(&level)).into()
        }
        unsafe extern "system" fn SessionStatus<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SessionStatus(::core::mem::transmute_copy(&status)).into()
        }
        unsafe extern "system" fn ChangeDebuggeeState<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ChangeDebuggeeState(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument)).into()
        }
        unsafe extern "system" fn ChangeEngineState<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ChangeEngineState(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument)).into()
        }
        unsafe extern "system" fn ChangeSymbolState<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ChangeSymbolState(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetInterestMask: GetInterestMask::<Impl, IMPL_OFFSET>,
            Breakpoint: Breakpoint::<Impl, IMPL_OFFSET>,
            Exception: Exception::<Impl, IMPL_OFFSET>,
            CreateThread: CreateThread::<Impl, IMPL_OFFSET>,
            ExitThread: ExitThread::<Impl, IMPL_OFFSET>,
            CreateProcessA: CreateProcessA::<Impl, IMPL_OFFSET>,
            ExitProcess: ExitProcess::<Impl, IMPL_OFFSET>,
            LoadModule: LoadModule::<Impl, IMPL_OFFSET>,
            UnloadModule: UnloadModule::<Impl, IMPL_OFFSET>,
            SystemError: SystemError::<Impl, IMPL_OFFSET>,
            SessionStatus: SessionStatus::<Impl, IMPL_OFFSET>,
            ChangeDebuggeeState: ChangeDebuggeeState::<Impl, IMPL_OFFSET>,
            ChangeEngineState: ChangeEngineState::<Impl, IMPL_OFFSET>,
            ChangeSymbolState: ChangeSymbolState::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugEventCallbacks as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugEventCallbacksWideImpl: Sized {
    fn GetInterestMask(&mut self) -> ::windows::core::Result<u32>;
    fn Breakpoint(&mut self, bp: ::core::option::Option<IDebugBreakpoint2>) -> ::windows::core::Result<()>;
    fn Exception(&mut self, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::core::Result<()>;
    fn CreateThread(&mut self, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::core::Result<()>;
    fn ExitThread(&mut self, exitcode: u32) -> ::windows::core::Result<()>;
    fn CreateProcessA(&mut self, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::core::Result<()>;
    fn ExitProcess(&mut self, exitcode: u32) -> ::windows::core::Result<()>;
    fn LoadModule(&mut self, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32) -> ::windows::core::Result<()>;
    fn UnloadModule(&mut self, imagebasename: super::super::super::Foundation::PWSTR, baseoffset: u64) -> ::windows::core::Result<()>;
    fn SystemError(&mut self, error: u32, level: u32) -> ::windows::core::Result<()>;
    fn SessionStatus(&mut self, status: u32) -> ::windows::core::Result<()>;
    fn ChangeDebuggeeState(&mut self, flags: u32, argument: u64) -> ::windows::core::Result<()>;
    fn ChangeEngineState(&mut self, flags: u32, argument: u64) -> ::windows::core::Result<()>;
    fn ChangeSymbolState(&mut self, flags: u32, argument: u64) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugEventCallbacksWideVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugEventCallbacksWideImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugEventCallbacksWideVtbl {
        unsafe extern "system" fn GetInterestMask<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInterestMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Breakpoint<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Breakpoint(::core::mem::transmute(&bp)).into()
        }
        unsafe extern "system" fn Exception<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Exception(::core::mem::transmute_copy(&exception), ::core::mem::transmute_copy(&firstchance)).into()
        }
        unsafe extern "system" fn CreateThread<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateThread(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&dataoffset), ::core::mem::transmute_copy(&startoffset)).into()
        }
        unsafe extern "system" fn ExitThread<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExitThread(::core::mem::transmute_copy(&exitcode)).into()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .CreateProcessA(::core::mem::transmute_copy(&imagefilehandle), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&baseoffset), ::core::mem::transmute_copy(&modulesize), ::core::mem::transmute_copy(&modulename), ::core::mem::transmute_copy(&imagename), ::core::mem::transmute_copy(&checksum), ::core::mem::transmute_copy(&timedatestamp), ::core::mem::transmute_copy(&initialthreadhandle), ::core::mem::transmute_copy(&threaddataoffset), ::core::mem::transmute_copy(&startoffset))
                .into()
        }
        unsafe extern "system" fn ExitProcess<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExitProcess(::core::mem::transmute_copy(&exitcode)).into()
        }
        unsafe extern "system" fn LoadModule<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).LoadModule(::core::mem::transmute_copy(&imagefilehandle), ::core::mem::transmute_copy(&baseoffset), ::core::mem::transmute_copy(&modulesize), ::core::mem::transmute_copy(&modulename), ::core::mem::transmute_copy(&imagename), ::core::mem::transmute_copy(&checksum), ::core::mem::transmute_copy(&timedatestamp)).into()
        }
        unsafe extern "system" fn UnloadModule<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagebasename: super::super::super::Foundation::PWSTR, baseoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).UnloadModule(::core::mem::transmute_copy(&imagebasename), ::core::mem::transmute_copy(&baseoffset)).into()
        }
        unsafe extern "system" fn SystemError<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, error: u32, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SystemError(::core::mem::transmute_copy(&error), ::core::mem::transmute_copy(&level)).into()
        }
        unsafe extern "system" fn SessionStatus<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SessionStatus(::core::mem::transmute_copy(&status)).into()
        }
        unsafe extern "system" fn ChangeDebuggeeState<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ChangeDebuggeeState(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument)).into()
        }
        unsafe extern "system" fn ChangeEngineState<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ChangeEngineState(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument)).into()
        }
        unsafe extern "system" fn ChangeSymbolState<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ChangeSymbolState(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetInterestMask: GetInterestMask::<Impl, IMPL_OFFSET>,
            Breakpoint: Breakpoint::<Impl, IMPL_OFFSET>,
            Exception: Exception::<Impl, IMPL_OFFSET>,
            CreateThread: CreateThread::<Impl, IMPL_OFFSET>,
            ExitThread: ExitThread::<Impl, IMPL_OFFSET>,
            CreateProcessA: CreateProcessA::<Impl, IMPL_OFFSET>,
            ExitProcess: ExitProcess::<Impl, IMPL_OFFSET>,
            LoadModule: LoadModule::<Impl, IMPL_OFFSET>,
            UnloadModule: UnloadModule::<Impl, IMPL_OFFSET>,
            SystemError: SystemError::<Impl, IMPL_OFFSET>,
            SessionStatus: SessionStatus::<Impl, IMPL_OFFSET>,
            ChangeDebuggeeState: ChangeDebuggeeState::<Impl, IMPL_OFFSET>,
            ChangeEngineState: ChangeEngineState::<Impl, IMPL_OFFSET>,
            ChangeSymbolState: ChangeSymbolState::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugEventCallbacksWide as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugEventContextCallbacksImpl: Sized {
    fn GetInterestMask(&mut self) -> ::windows::core::Result<u32>;
    fn Breakpoint(&mut self, bp: ::core::option::Option<IDebugBreakpoint2>, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn Exception(&mut self, exception: *const EXCEPTION_RECORD64, firstchance: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn CreateThread(&mut self, handle: u64, dataoffset: u64, startoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn ExitThread(&mut self, exitcode: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn CreateProcessA(&mut self, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn ExitProcess(&mut self, exitcode: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn LoadModule(&mut self, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn UnloadModule(&mut self, imagebasename: super::super::super::Foundation::PWSTR, baseoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn SystemError(&mut self, error: u32, level: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn SessionStatus(&mut self, status: u32) -> ::windows::core::Result<()>;
    fn ChangeDebuggeeState(&mut self, flags: u32, argument: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn ChangeEngineState(&mut self, flags: u32, argument: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::Result<()>;
    fn ChangeSymbolState(&mut self, flags: u32, argument: u64) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugEventContextCallbacksVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugEventContextCallbacksImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugEventContextCallbacksVtbl {
        unsafe extern "system" fn GetInterestMask<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInterestMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Breakpoint<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Breakpoint(::core::mem::transmute(&bp), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn Exception<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exception: *const EXCEPTION_RECORD64, firstchance: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Exception(::core::mem::transmute_copy(&exception), ::core::mem::transmute_copy(&firstchance), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn CreateThread<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, dataoffset: u64, startoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateThread(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&dataoffset), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn ExitThread<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exitcode: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExitThread(::core::mem::transmute_copy(&exitcode), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .CreateProcessA(
                    ::core::mem::transmute_copy(&imagefilehandle),
                    ::core::mem::transmute_copy(&handle),
                    ::core::mem::transmute_copy(&baseoffset),
                    ::core::mem::transmute_copy(&modulesize),
                    ::core::mem::transmute_copy(&modulename),
                    ::core::mem::transmute_copy(&imagename),
                    ::core::mem::transmute_copy(&checksum),
                    ::core::mem::transmute_copy(&timedatestamp),
                    ::core::mem::transmute_copy(&initialthreadhandle),
                    ::core::mem::transmute_copy(&threaddataoffset),
                    ::core::mem::transmute_copy(&startoffset),
                    ::core::mem::transmute_copy(&context),
                    ::core::mem::transmute_copy(&contextsize),
                )
                .into()
        }
        unsafe extern "system" fn ExitProcess<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exitcode: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExitProcess(::core::mem::transmute_copy(&exitcode), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn LoadModule<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).LoadModule(::core::mem::transmute_copy(&imagefilehandle), ::core::mem::transmute_copy(&baseoffset), ::core::mem::transmute_copy(&modulesize), ::core::mem::transmute_copy(&modulename), ::core::mem::transmute_copy(&imagename), ::core::mem::transmute_copy(&checksum), ::core::mem::transmute_copy(&timedatestamp), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn UnloadModule<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagebasename: super::super::super::Foundation::PWSTR, baseoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).UnloadModule(::core::mem::transmute_copy(&imagebasename), ::core::mem::transmute_copy(&baseoffset), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn SystemError<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, error: u32, level: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SystemError(::core::mem::transmute_copy(&error), ::core::mem::transmute_copy(&level), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn SessionStatus<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SessionStatus(::core::mem::transmute_copy(&status)).into()
        }
        unsafe extern "system" fn ChangeDebuggeeState<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ChangeDebuggeeState(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn ChangeEngineState<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ChangeEngineState(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into()
        }
        unsafe extern "system" fn ChangeSymbolState<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ChangeSymbolState(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetInterestMask: GetInterestMask::<Impl, IMPL_OFFSET>,
            Breakpoint: Breakpoint::<Impl, IMPL_OFFSET>,
            Exception: Exception::<Impl, IMPL_OFFSET>,
            CreateThread: CreateThread::<Impl, IMPL_OFFSET>,
            ExitThread: ExitThread::<Impl, IMPL_OFFSET>,
            CreateProcessA: CreateProcessA::<Impl, IMPL_OFFSET>,
            ExitProcess: ExitProcess::<Impl, IMPL_OFFSET>,
            LoadModule: LoadModule::<Impl, IMPL_OFFSET>,
            UnloadModule: UnloadModule::<Impl, IMPL_OFFSET>,
            SystemError: SystemError::<Impl, IMPL_OFFSET>,
            SessionStatus: SessionStatus::<Impl, IMPL_OFFSET>,
            ChangeDebuggeeState: ChangeDebuggeeState::<Impl, IMPL_OFFSET>,
            ChangeEngineState: ChangeEngineState::<Impl, IMPL_OFFSET>,
            ChangeSymbolState: ChangeSymbolState::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugEventContextCallbacks as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugExpressionImpl: Sized {
    fn Start(&mut self, pdecb: ::core::option::Option<IDebugExpressionCallBack>) -> ::windows::core::Result<()>;
    fn Abort(&mut self) -> ::windows::core::Result<()>;
    fn QueryIsComplete(&mut self) -> ::windows::core::Result<()>;
    fn GetResultAsString(&mut self, phrresult: *mut ::windows::core::HRESULT, pbstrresult: *mut super::super::super::Foundation::BSTR) -> ::windows::core::Result<()>;
    fn GetResultAsDebugProperty(&mut self, phrresult: *mut ::windows::core::HRESULT, ppdp: *mut ::core::option::Option<IDebugProperty>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugExpressionVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugExpressionImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugExpressionVtbl {
        unsafe extern "system" fn Start<Impl: IDebugExpressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdecb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Start(::core::mem::transmute(&pdecb)).into()
        }
        unsafe extern "system" fn Abort<Impl: IDebugExpressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Abort().into()
        }
        unsafe extern "system" fn QueryIsComplete<Impl: IDebugExpressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).QueryIsComplete().into()
        }
        unsafe extern "system" fn GetResultAsString<Impl: IDebugExpressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phrresult: *mut ::windows::core::HRESULT, pbstrresult: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetResultAsString(::core::mem::transmute_copy(&phrresult), ::core::mem::transmute_copy(&pbstrresult)).into()
        }
        unsafe extern "system" fn GetResultAsDebugProperty<Impl: IDebugExpressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phrresult: *mut ::windows::core::HRESULT, ppdp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetResultAsDebugProperty(::core::mem::transmute_copy(&phrresult), ::core::mem::transmute_copy(&ppdp)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Start: Start::<Impl, IMPL_OFFSET>,
            Abort: Abort::<Impl, IMPL_OFFSET>,
            QueryIsComplete: QueryIsComplete::<Impl, IMPL_OFFSET>,
            GetResultAsString: GetResultAsString::<Impl, IMPL_OFFSET>,
            GetResultAsDebugProperty: GetResultAsDebugProperty::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugExpression as ::windows::core::Interface>::IID
    }
}
pub trait IDebugExpressionCallBackImpl: Sized {
    fn onComplete(&mut self) -> ::windows::core::Result<()>;
}
impl IDebugExpressionCallBackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugExpressionCallBackImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugExpressionCallBackVtbl {
        unsafe extern "system" fn onComplete<Impl: IDebugExpressionCallBackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onComplete().into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), onComplete: onComplete::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugExpressionCallBack as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugExpressionContextImpl: Sized {
    fn ParseLanguageText(&mut self, pstrcode: super::super::super::Foundation::PWSTR, nradix: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32) -> ::windows::core::Result<IDebugExpression>;
    fn GetLanguageInfo(&mut self, pbstrlanguagename: *mut super::super::super::Foundation::BSTR, planguageid: *mut ::windows::core::GUID) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugExpressionContextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugExpressionContextImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugExpressionContextVtbl {
        unsafe extern "system" fn ParseLanguageText<Impl: IDebugExpressionContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, nradix: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, ppe: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ParseLanguageText(::core::mem::transmute_copy(&pstrcode), ::core::mem::transmute_copy(&nradix), ::core::mem::transmute_copy(&pstrdelimiter), ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppe = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLanguageInfo<Impl: IDebugExpressionContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrlanguagename: *mut super::super::super::Foundation::BSTR, planguageid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLanguageInfo(::core::mem::transmute_copy(&pbstrlanguagename), ::core::mem::transmute_copy(&planguageid)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            ParseLanguageText: ParseLanguageText::<Impl, IMPL_OFFSET>,
            GetLanguageInfo: GetLanguageInfo::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugExpressionContext as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole"))]
pub trait IDebugExtendedPropertyImpl: Sized + IDebugPropertyImpl {
    fn GetExtendedPropertyInfo(&mut self, dwfieldspec: u32, nradix: u32) -> ::windows::core::Result<ExtendedDebugPropertyInfo>;
    fn EnumExtendedMembers(&mut self, dwfieldspec: u32, nradix: u32) -> ::windows::core::Result<IEnumDebugExtendedPropertyInfo>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole"))]
impl IDebugExtendedPropertyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugExtendedPropertyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugExtendedPropertyVtbl {
        unsafe extern "system" fn GetExtendedPropertyInfo<Impl: IDebugExtendedPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldspec: u32, nradix: u32, pextendedpropertyinfo: *mut ExtendedDebugPropertyInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExtendedPropertyInfo(::core::mem::transmute_copy(&dwfieldspec), ::core::mem::transmute_copy(&nradix)) {
                ::core::result::Result::Ok(ok__) => {
                    *pextendedpropertyinfo = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumExtendedMembers<Impl: IDebugExtendedPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldspec: u32, nradix: u32, ppeepi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumExtendedMembers(::core::mem::transmute_copy(&dwfieldspec), ::core::mem::transmute_copy(&nradix)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppeepi = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IDebugPropertyVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            GetExtendedPropertyInfo: GetExtendedPropertyInfo::<Impl, IMPL_OFFSET>,
            EnumExtendedMembers: EnumExtendedMembers::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugExtendedProperty as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDebugFormatterImpl: Sized {
    fn GetStringForVariant(&mut self, pvar: *const super::super::Com::VARIANT, nradix: u32) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetVariantForString(&mut self, pwstrvalue: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<super::super::Com::VARIANT>;
    fn GetStringForVarType(&mut self, vt: u16, ptdescarraytype: *const super::super::Com::TYPEDESC) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDebugFormatterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugFormatterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugFormatterVtbl {
        unsafe extern "system" fn GetStringForVariant<Impl: IDebugFormatterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvar: *const super::super::Com::VARIANT, nradix: u32, pbstrvalue: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetStringForVariant(::core::mem::transmute_copy(&pvar), ::core::mem::transmute_copy(&nradix)) {
                ::core::result::Result::Ok(ok__) => {
                    *pbstrvalue = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetVariantForString<Impl: IDebugFormatterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwstrvalue: super::super::super::Foundation::PWSTR, pvar: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetVariantForString(::core::mem::transmute_copy(&pwstrvalue)) {
                ::core::result::Result::Ok(ok__) => {
                    *pvar = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStringForVarType<Impl: IDebugFormatterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vt: u16, ptdescarraytype: *const super::super::Com::TYPEDESC, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetStringForVarType(::core::mem::transmute_copy(&vt), ::core::mem::transmute_copy(&ptdescarraytype)) {
                ::core::result::Result::Ok(ok__) => {
                    *pbstr = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetStringForVariant: GetStringForVariant::<Impl, IMPL_OFFSET>,
            GetVariantForString: GetVariantForString::<Impl, IMPL_OFFSET>,
            GetStringForVarType: GetStringForVarType::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugFormatter as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDebugHelperImpl: Sized {
    fn CreatePropertyBrowser(&mut self, pvar: *const super::super::Com::VARIANT, bstrname: super::super::super::Foundation::PWSTR, pdat: ::core::option::Option<IDebugApplicationThread>) -> ::windows::core::Result<IDebugProperty>;
    fn CreatePropertyBrowserEx(&mut self, pvar: *const super::super::Com::VARIANT, bstrname: super::super::super::Foundation::PWSTR, pdat: ::core::option::Option<IDebugApplicationThread>, pdf: ::core::option::Option<IDebugFormatter>) -> ::windows::core::Result<IDebugProperty>;
    fn CreateSimpleConnectionPoint(&mut self, pdisp: ::core::option::Option<super::super::Com::IDispatch>) -> ::windows::core::Result<ISimpleConnectionPoint>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDebugHelperVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHelperImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHelperVtbl {
        unsafe extern "system" fn CreatePropertyBrowser<Impl: IDebugHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvar: *const super::super::Com::VARIANT, bstrname: super::super::super::Foundation::PWSTR, pdat: ::windows::core::RawPtr, ppdob: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreatePropertyBrowser(::core::mem::transmute_copy(&pvar), ::core::mem::transmute_copy(&bstrname), ::core::mem::transmute(&pdat)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppdob = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreatePropertyBrowserEx<Impl: IDebugHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvar: *const super::super::Com::VARIANT, bstrname: super::super::super::Foundation::PWSTR, pdat: ::windows::core::RawPtr, pdf: ::windows::core::RawPtr, ppdob: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreatePropertyBrowserEx(::core::mem::transmute_copy(&pvar), ::core::mem::transmute_copy(&bstrname), ::core::mem::transmute(&pdat), ::core::mem::transmute(&pdf)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppdob = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSimpleConnectionPoint<Impl: IDebugHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdisp: ::windows::core::RawPtr, ppscp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateSimpleConnectionPoint(::core::mem::transmute(&pdisp)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppscp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            CreatePropertyBrowser: CreatePropertyBrowser::<Impl, IMPL_OFFSET>,
            CreatePropertyBrowserEx: CreatePropertyBrowserEx::<Impl, IMPL_OFFSET>,
            CreateSimpleConnectionPoint: CreateSimpleConnectionPoint::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHelper as ::windows::core::Interface>::IID
    }
}
pub trait IDebugHostImpl: Sized {
    fn GetHostDefinedInterface(&mut self) -> ::windows::core::Result<::windows::core::IUnknown>;
    fn GetCurrentContext(&mut self) -> ::windows::core::Result<IDebugHostContext>;
    fn GetDefaultMetadata(&mut self) -> ::windows::core::Result<IKeyStore>;
}
impl IDebugHostVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostVtbl {
        unsafe extern "system" fn GetHostDefinedInterface<Impl: IDebugHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hostunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetHostDefinedInterface() {
                ::core::result::Result::Ok(ok__) => {
                    *hostunk = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentContext<Impl: IDebugHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentContext() {
                ::core::result::Result::Ok(ok__) => {
                    *context = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDefaultMetadata<Impl: IDebugHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, defaultmetadatastore: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDefaultMetadata() {
                ::core::result::Result::Ok(ok__) => {
                    *defaultmetadatastore = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetHostDefinedInterface: GetHostDefinedInterface::<Impl, IMPL_OFFSET>,
            GetCurrentContext: GetCurrentContext::<Impl, IMPL_OFFSET>,
            GetDefaultMetadata: GetDefaultMetadata::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHost as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostBaseClassImpl: Sized + IDebugHostSymbolImpl {
    fn GetOffset(&mut self) -> ::windows::core::Result<u64>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostBaseClassVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostBaseClassImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostBaseClassVtbl {
        unsafe extern "system" fn GetOffset<Impl: IDebugHostBaseClassImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: IDebugHostSymbolVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(), GetOffset: GetOffset::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostBaseClass as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDebugHostConstantImpl: Sized + IDebugHostSymbolImpl {
    fn GetValue(&mut self) -> ::windows::core::Result<super::super::Com::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDebugHostConstantVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostConstantImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostConstantVtbl {
        unsafe extern "system" fn GetValue<Impl: IDebugHostConstantImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetValue() {
                ::core::result::Result::Ok(ok__) => {
                    *value = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: IDebugHostSymbolVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(), GetValue: GetValue::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostConstant as ::windows::core::Interface>::IID
    }
}
pub trait IDebugHostContextImpl: Sized {
    fn IsEqualTo(&mut self, pcontext: ::core::option::Option<IDebugHostContext>) -> ::windows::core::Result<bool>;
}
impl IDebugHostContextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostContextImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostContextVtbl {
        unsafe extern "system" fn IsEqualTo<Impl: IDebugHostContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcontext: ::windows::core::RawPtr, pisequal: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsEqualTo(::core::mem::transmute(&pcontext)) {
                ::core::result::Result::Ok(ok__) => {
                    *pisequal = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), IsEqualTo: IsEqualTo::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostContext as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDebugHostDataImpl: Sized + IDebugHostSymbolImpl {
    fn GetLocationKind(&mut self) -> ::windows::core::Result<LocationKind>;
    fn GetLocation(&mut self) -> ::windows::core::Result<Location>;
    fn GetValue(&mut self) -> ::windows::core::Result<super::super::Com::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDebugHostDataVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostDataImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostDataVtbl {
        unsafe extern "system" fn GetLocationKind<Impl: IDebugHostDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, locationkind: *mut LocationKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLocationKind() {
                ::core::result::Result::Ok(ok__) => {
                    *locationkind = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLocation<Impl: IDebugHostDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLocation() {
                ::core::result::Result::Ok(ok__) => {
                    *location = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValue<Impl: IDebugHostDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetValue() {
                ::core::result::Result::Ok(ok__) => {
                    *value = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IDebugHostSymbolVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            GetLocationKind: GetLocationKind::<Impl, IMPL_OFFSET>,
            GetLocation: GetLocation::<Impl, IMPL_OFFSET>,
            GetValue: GetValue::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostData as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostErrorSinkImpl: Sized {
    fn ReportError(&mut self, errclass: ErrorClass, hrerror: ::windows::core::HRESULT, message: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostErrorSinkVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostErrorSinkImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostErrorSinkVtbl {
        unsafe extern "system" fn ReportError<Impl: IDebugHostErrorSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, errclass: ErrorClass, hrerror: ::windows::core::HRESULT, message: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReportError(::core::mem::transmute_copy(&errclass), ::core::mem::transmute_copy(&hrerror), ::core::mem::transmute_copy(&message)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), ReportError: ReportError::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostErrorSink as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostEvaluatorImpl: Sized {
    fn EvaluateExpression(&mut self, context: ::core::option::Option<IDebugHostContext>, expression: super::super::super::Foundation::PWSTR, bindingcontext: ::core::option::Option<IModelObject>, result: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn EvaluateExtendedExpression(&mut self, context: ::core::option::Option<IDebugHostContext>, expression: super::super::super::Foundation::PWSTR, bindingcontext: ::core::option::Option<IModelObject>, result: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostEvaluatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostEvaluatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostEvaluatorVtbl {
        unsafe extern "system" fn EvaluateExpression<Impl: IDebugHostEvaluatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, expression: super::super::super::Foundation::PWSTR, bindingcontext: ::windows::core::RawPtr, result: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EvaluateExpression(::core::mem::transmute(&context), ::core::mem::transmute_copy(&expression), ::core::mem::transmute(&bindingcontext), ::core::mem::transmute_copy(&result), ::core::mem::transmute_copy(&metadata)).into()
        }
        unsafe extern "system" fn EvaluateExtendedExpression<Impl: IDebugHostEvaluatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, expression: super::super::super::Foundation::PWSTR, bindingcontext: ::windows::core::RawPtr, result: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EvaluateExtendedExpression(::core::mem::transmute(&context), ::core::mem::transmute_copy(&expression), ::core::mem::transmute(&bindingcontext), ::core::mem::transmute_copy(&result), ::core::mem::transmute_copy(&metadata)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            EvaluateExpression: EvaluateExpression::<Impl, IMPL_OFFSET>,
            EvaluateExtendedExpression: EvaluateExtendedExpression::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostEvaluator as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostEvaluator2Impl: Sized + IDebugHostEvaluatorImpl {
    fn AssignTo(&mut self, assignmentreference: ::core::option::Option<IModelObject>, assignmentvalue: ::core::option::Option<IModelObject>, assignmentresult: *mut ::core::option::Option<IModelObject>, assignmentmetadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostEvaluator2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostEvaluator2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostEvaluator2Vtbl {
        unsafe extern "system" fn AssignTo<Impl: IDebugHostEvaluator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, assignmentreference: ::windows::core::RawPtr, assignmentvalue: ::windows::core::RawPtr, assignmentresult: *mut ::windows::core::RawPtr, assignmentmetadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AssignTo(::core::mem::transmute(&assignmentreference), ::core::mem::transmute(&assignmentvalue), ::core::mem::transmute_copy(&assignmentresult), ::core::mem::transmute_copy(&assignmentmetadata)).into()
        }
        Self { base: IDebugHostEvaluatorVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(), AssignTo: AssignTo::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostEvaluator2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostExtensibilityImpl: Sized {
    fn CreateFunctionAlias(&mut self, aliasname: super::super::super::Foundation::PWSTR, functionobject: ::core::option::Option<IModelObject>) -> ::windows::core::Result<()>;
    fn DestroyFunctionAlias(&mut self, aliasname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostExtensibilityVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostExtensibilityImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostExtensibilityVtbl {
        unsafe extern "system" fn CreateFunctionAlias<Impl: IDebugHostExtensibilityImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, aliasname: super::super::super::Foundation::PWSTR, functionobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateFunctionAlias(::core::mem::transmute_copy(&aliasname), ::core::mem::transmute(&functionobject)).into()
        }
        unsafe extern "system" fn DestroyFunctionAlias<Impl: IDebugHostExtensibilityImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, aliasname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DestroyFunctionAlias(::core::mem::transmute_copy(&aliasname)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            CreateFunctionAlias: CreateFunctionAlias::<Impl, IMPL_OFFSET>,
            DestroyFunctionAlias: DestroyFunctionAlias::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostExtensibility as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDebugHostFieldImpl: Sized + IDebugHostSymbolImpl {
    fn GetLocationKind(&mut self) -> ::windows::core::Result<LocationKind>;
    fn GetOffset(&mut self) -> ::windows::core::Result<u64>;
    fn GetLocation(&mut self) -> ::windows::core::Result<Location>;
    fn GetValue(&mut self) -> ::windows::core::Result<super::super::Com::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDebugHostFieldVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostFieldImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostFieldVtbl {
        unsafe extern "system" fn GetLocationKind<Impl: IDebugHostFieldImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, locationkind: *mut LocationKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLocationKind() {
                ::core::result::Result::Ok(ok__) => {
                    *locationkind = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffset<Impl: IDebugHostFieldImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLocation<Impl: IDebugHostFieldImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLocation() {
                ::core::result::Result::Ok(ok__) => {
                    *location = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValue<Impl: IDebugHostFieldImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetValue() {
                ::core::result::Result::Ok(ok__) => {
                    *value = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IDebugHostSymbolVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            GetLocationKind: GetLocationKind::<Impl, IMPL_OFFSET>,
            GetOffset: GetOffset::<Impl, IMPL_OFFSET>,
            GetLocation: GetLocation::<Impl, IMPL_OFFSET>,
            GetValue: GetValue::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostField as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostMemoryImpl: Sized {
    fn ReadBytes(&mut self, context: ::core::option::Option<IDebugHostContext>, location: Location, buffer: *mut ::core::ffi::c_void, buffersize: u64, bytesread: *mut u64) -> ::windows::core::Result<()>;
    fn WriteBytes(&mut self, context: ::core::option::Option<IDebugHostContext>, location: Location, buffer: *const ::core::ffi::c_void, buffersize: u64) -> ::windows::core::Result<u64>;
    fn ReadPointers(&mut self, context: ::core::option::Option<IDebugHostContext>, location: Location, count: u64, pointers: *mut u64) -> ::windows::core::Result<()>;
    fn WritePointers(&mut self, context: ::core::option::Option<IDebugHostContext>, location: Location, count: u64, pointers: *const u64) -> ::windows::core::Result<()>;
    fn GetDisplayStringForLocation(&mut self, context: ::core::option::Option<IDebugHostContext>, location: Location, verbose: u8) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostMemoryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostMemoryImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostMemoryVtbl {
        unsafe extern "system" fn ReadBytes<Impl: IDebugHostMemoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, buffer: *mut ::core::ffi::c_void, buffersize: u64, bytesread: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadBytes(::core::mem::transmute(&context), ::core::mem::transmute_copy(&location), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteBytes<Impl: IDebugHostMemoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, buffer: *const ::core::ffi::c_void, buffersize: u64, byteswritten: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteBytes(::core::mem::transmute(&context), ::core::mem::transmute_copy(&location), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadPointers<Impl: IDebugHostMemoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, count: u64, pointers: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadPointers(::core::mem::transmute(&context), ::core::mem::transmute_copy(&location), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&pointers)).into()
        }
        unsafe extern "system" fn WritePointers<Impl: IDebugHostMemoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, count: u64, pointers: *const u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WritePointers(::core::mem::transmute(&context), ::core::mem::transmute_copy(&location), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&pointers)).into()
        }
        unsafe extern "system" fn GetDisplayStringForLocation<Impl: IDebugHostMemoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, verbose: u8, locationname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDisplayStringForLocation(::core::mem::transmute(&context), ::core::mem::transmute_copy(&location), ::core::mem::transmute_copy(&verbose)) {
                ::core::result::Result::Ok(ok__) => {
                    *locationname = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            ReadBytes: ReadBytes::<Impl, IMPL_OFFSET>,
            WriteBytes: WriteBytes::<Impl, IMPL_OFFSET>,
            ReadPointers: ReadPointers::<Impl, IMPL_OFFSET>,
            WritePointers: WritePointers::<Impl, IMPL_OFFSET>,
            GetDisplayStringForLocation: GetDisplayStringForLocation::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostMemory as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostMemory2Impl: Sized + IDebugHostMemoryImpl {
    fn LinearizeLocation(&mut self, context: ::core::option::Option<IDebugHostContext>, location: Location) -> ::windows::core::Result<Location>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostMemory2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostMemory2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostMemory2Vtbl {
        unsafe extern "system" fn LinearizeLocation<Impl: IDebugHostMemory2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, plinearizedlocation: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).LinearizeLocation(::core::mem::transmute(&context), ::core::mem::transmute_copy(&location)) {
                ::core::result::Result::Ok(ok__) => {
                    *plinearizedlocation = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: IDebugHostMemoryVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(), LinearizeLocation: LinearizeLocation::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostMemory2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostModuleImpl: Sized + IDebugHostSymbolImpl {
    fn GetImageName(&mut self, allowpath: u8) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetBaseLocation(&mut self) -> ::windows::core::Result<Location>;
    fn GetVersion(&mut self, fileversion: *mut u64, productversion: *mut u64) -> ::windows::core::Result<()>;
    fn FindTypeByName(&mut self, typename: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<IDebugHostType>;
    fn FindSymbolByRVA(&mut self, rva: u64) -> ::windows::core::Result<IDebugHostSymbol>;
    fn FindSymbolByName(&mut self, symbolname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<IDebugHostSymbol>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostModuleVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostModuleImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostModuleVtbl {
        unsafe extern "system" fn GetImageName<Impl: IDebugHostModuleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, allowpath: u8, imagename: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetImageName(::core::mem::transmute_copy(&allowpath)) {
                ::core::result::Result::Ok(ok__) => {
                    *imagename = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBaseLocation<Impl: IDebugHostModuleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modulebaselocation: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBaseLocation() {
                ::core::result::Result::Ok(ok__) => {
                    *modulebaselocation = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetVersion<Impl: IDebugHostModuleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fileversion: *mut u64, productversion: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetVersion(::core::mem::transmute_copy(&fileversion), ::core::mem::transmute_copy(&productversion)).into()
        }
        unsafe extern "system" fn FindTypeByName<Impl: IDebugHostModuleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, typename: super::super::super::Foundation::PWSTR, r#type: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindTypeByName(::core::mem::transmute_copy(&typename)) {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSymbolByRVA<Impl: IDebugHostModuleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rva: u64, symbol: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindSymbolByRVA(::core::mem::transmute_copy(&rva)) {
                ::core::result::Result::Ok(ok__) => {
                    *symbol = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSymbolByName<Impl: IDebugHostModuleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbolname: super::super::super::Foundation::PWSTR, symbol: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindSymbolByName(::core::mem::transmute_copy(&symbolname)) {
                ::core::result::Result::Ok(ok__) => {
                    *symbol = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IDebugHostSymbolVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            GetImageName: GetImageName::<Impl, IMPL_OFFSET>,
            GetBaseLocation: GetBaseLocation::<Impl, IMPL_OFFSET>,
            GetVersion: GetVersion::<Impl, IMPL_OFFSET>,
            FindTypeByName: FindTypeByName::<Impl, IMPL_OFFSET>,
            FindSymbolByRVA: FindSymbolByRVA::<Impl, IMPL_OFFSET>,
            FindSymbolByName: FindSymbolByName::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostModule as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostModule2Impl: Sized + IDebugHostSymbolImpl + IDebugHostModuleImpl {
    fn FindContainingSymbolByRVA(&mut self, rva: u64, symbol: *mut ::core::option::Option<IDebugHostSymbol>, offset: *mut u64) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostModule2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostModule2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostModule2Vtbl {
        unsafe extern "system" fn FindContainingSymbolByRVA<Impl: IDebugHostModule2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rva: u64, symbol: *mut ::windows::core::RawPtr, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FindContainingSymbolByRVA(::core::mem::transmute_copy(&rva), ::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&offset)).into()
        }
        Self {
            base: IDebugHostModuleVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            FindContainingSymbolByRVA: FindContainingSymbolByRVA::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostModule2 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugHostModuleSignatureImpl: Sized {
    fn IsMatch(&mut self, pmodule: ::core::option::Option<IDebugHostModule>) -> ::windows::core::Result<bool>;
}
impl IDebugHostModuleSignatureVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostModuleSignatureImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostModuleSignatureVtbl {
        unsafe extern "system" fn IsMatch<Impl: IDebugHostModuleSignatureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmodule: ::windows::core::RawPtr, ismatch: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsMatch(::core::mem::transmute(&pmodule)) {
                ::core::result::Result::Ok(ok__) => {
                    *ismatch = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), IsMatch: IsMatch::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostModuleSignature as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostPublicImpl: Sized + IDebugHostSymbolImpl {
    fn GetLocationKind(&mut self) -> ::windows::core::Result<LocationKind>;
    fn GetLocation(&mut self) -> ::windows::core::Result<Location>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostPublicVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostPublicImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostPublicVtbl {
        unsafe extern "system" fn GetLocationKind<Impl: IDebugHostPublicImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, locationkind: *mut LocationKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLocationKind() {
                ::core::result::Result::Ok(ok__) => {
                    *locationkind = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLocation<Impl: IDebugHostPublicImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLocation() {
                ::core::result::Result::Ok(ok__) => {
                    *location = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IDebugHostSymbolVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            GetLocationKind: GetLocationKind::<Impl, IMPL_OFFSET>,
            GetLocation: GetLocation::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostPublic as ::windows::core::Interface>::IID
    }
}
pub trait IDebugHostScriptHostImpl: Sized {
    fn CreateContext(&mut self, script: ::core::option::Option<IDataModelScript>) -> ::windows::core::Result<IDataModelScriptHostContext>;
}
impl IDebugHostScriptHostVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostScriptHostImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostScriptHostVtbl {
        unsafe extern "system" fn CreateContext<Impl: IDebugHostScriptHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, script: ::windows::core::RawPtr, scriptcontext: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateContext(::core::mem::transmute(&script)) {
                ::core::result::Result::Ok(ok__) => {
                    *scriptcontext = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), CreateContext: CreateContext::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostScriptHost as ::windows::core::Interface>::IID
    }
}
pub trait IDebugHostStatusImpl: Sized {
    fn PollUserInterrupt(&mut self) -> ::windows::core::Result<bool>;
}
impl IDebugHostStatusVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostStatusImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostStatusVtbl {
        unsafe extern "system" fn PollUserInterrupt<Impl: IDebugHostStatusImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interruptrequested: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PollUserInterrupt() {
                ::core::result::Result::Ok(ok__) => {
                    *interruptrequested = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), PollUserInterrupt: PollUserInterrupt::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostStatus as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostSymbolImpl: Sized {
    fn GetContext(&mut self) -> ::windows::core::Result<IDebugHostContext>;
    fn EnumerateChildren(&mut self, kind: SymbolKind, name: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<IDebugHostSymbolEnumerator>;
    fn GetSymbolKind(&mut self) -> ::windows::core::Result<SymbolKind>;
    fn GetName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetType(&mut self) -> ::windows::core::Result<IDebugHostType>;
    fn GetContainingModule(&mut self) -> ::windows::core::Result<IDebugHostModule>;
    fn CompareAgainst(&mut self, pcomparisonsymbol: ::core::option::Option<IDebugHostSymbol>, comparisonflags: u32) -> ::windows::core::Result<bool>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostSymbolVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostSymbolImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostSymbolVtbl {
        unsafe extern "system" fn GetContext<Impl: IDebugHostSymbolImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetContext() {
                ::core::result::Result::Ok(ok__) => {
                    *context = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateChildren<Impl: IDebugHostSymbolImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateChildren(::core::mem::transmute_copy(&kind), ::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppenum = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolKind<Impl: IDebugHostSymbolImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: *mut SymbolKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolKind() {
                ::core::result::Result::Ok(ok__) => {
                    *kind = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetName<Impl: IDebugHostSymbolImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbolname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName() {
                ::core::result::Result::Ok(ok__) => {
                    *symbolname = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetType<Impl: IDebugHostSymbolImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetType() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContainingModule<Impl: IDebugHostSymbolImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, containingmodule: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetContainingModule() {
                ::core::result::Result::Ok(ok__) => {
                    *containingmodule = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CompareAgainst<Impl: IDebugHostSymbolImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcomparisonsymbol: ::windows::core::RawPtr, comparisonflags: u32, pmatches: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CompareAgainst(::core::mem::transmute(&pcomparisonsymbol), ::core::mem::transmute_copy(&comparisonflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *pmatches = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetContext: GetContext::<Impl, IMPL_OFFSET>,
            EnumerateChildren: EnumerateChildren::<Impl, IMPL_OFFSET>,
            GetSymbolKind: GetSymbolKind::<Impl, IMPL_OFFSET>,
            GetName: GetName::<Impl, IMPL_OFFSET>,
            GetType: GetType::<Impl, IMPL_OFFSET>,
            GetContainingModule: GetContainingModule::<Impl, IMPL_OFFSET>,
            CompareAgainst: CompareAgainst::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostSymbol as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostSymbol2Impl: Sized + IDebugHostSymbolImpl {
    fn GetLanguage(&mut self) -> ::windows::core::Result<LanguageKind>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostSymbol2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostSymbol2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostSymbol2Vtbl {
        unsafe extern "system" fn GetLanguage<Impl: IDebugHostSymbol2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pkind: *mut LanguageKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLanguage() {
                ::core::result::Result::Ok(ok__) => {
                    *pkind = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: IDebugHostSymbolVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(), GetLanguage: GetLanguage::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostSymbol2 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugHostSymbolEnumeratorImpl: Sized {
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn GetNext(&mut self) -> ::windows::core::Result<IDebugHostSymbol>;
}
impl IDebugHostSymbolEnumeratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostSymbolEnumeratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostSymbolEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IDebugHostSymbolEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn GetNext<Impl: IDebugHostSymbolEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNext() {
                ::core::result::Result::Ok(ok__) => {
                    *symbol = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), Reset: Reset::<Impl, IMPL_OFFSET>, GetNext: GetNext::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostSymbolEnumerator as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostSymbolsImpl: Sized {
    fn CreateModuleSignature(&mut self, pwszmodulename: super::super::super::Foundation::PWSTR, pwszminversion: super::super::super::Foundation::PWSTR, pwszmaxversion: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<IDebugHostModuleSignature>;
    fn CreateTypeSignature(&mut self, signaturespecification: super::super::super::Foundation::PWSTR, module: ::core::option::Option<IDebugHostModule>) -> ::windows::core::Result<IDebugHostTypeSignature>;
    fn CreateTypeSignatureForModuleRange(&mut self, signaturespecification: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, minversion: super::super::super::Foundation::PWSTR, maxversion: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<IDebugHostTypeSignature>;
    fn EnumerateModules(&mut self, context: ::core::option::Option<IDebugHostContext>) -> ::windows::core::Result<IDebugHostSymbolEnumerator>;
    fn FindModuleByName(&mut self, context: ::core::option::Option<IDebugHostContext>, modulename: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<IDebugHostModule>;
    fn FindModuleByLocation(&mut self, context: ::core::option::Option<IDebugHostContext>, modulelocation: Location) -> ::windows::core::Result<IDebugHostModule>;
    fn GetMostDerivedObject(&mut self, pcontext: ::core::option::Option<IDebugHostContext>, location: Location, objecttype: ::core::option::Option<IDebugHostType>, derivedlocation: *mut Location, derivedtype: *mut ::core::option::Option<IDebugHostType>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostSymbolsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostSymbolsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostSymbolsVtbl {
        unsafe extern "system" fn CreateModuleSignature<Impl: IDebugHostSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszmodulename: super::super::super::Foundation::PWSTR, pwszminversion: super::super::super::Foundation::PWSTR, pwszmaxversion: super::super::super::Foundation::PWSTR, ppmodulesignature: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateModuleSignature(::core::mem::transmute_copy(&pwszmodulename), ::core::mem::transmute_copy(&pwszminversion), ::core::mem::transmute_copy(&pwszmaxversion)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppmodulesignature = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateTypeSignature<Impl: IDebugHostSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, signaturespecification: super::super::super::Foundation::PWSTR, module: ::windows::core::RawPtr, typesignature: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateTypeSignature(::core::mem::transmute_copy(&signaturespecification), ::core::mem::transmute(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *typesignature = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateTypeSignatureForModuleRange<Impl: IDebugHostSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, signaturespecification: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, minversion: super::super::super::Foundation::PWSTR, maxversion: super::super::super::Foundation::PWSTR, typesignature: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateTypeSignatureForModuleRange(::core::mem::transmute_copy(&signaturespecification), ::core::mem::transmute_copy(&modulename), ::core::mem::transmute_copy(&minversion), ::core::mem::transmute_copy(&maxversion)) {
                ::core::result::Result::Ok(ok__) => {
                    *typesignature = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateModules<Impl: IDebugHostSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, moduleenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateModules(::core::mem::transmute(&context)) {
                ::core::result::Result::Ok(ok__) => {
                    *moduleenum = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindModuleByName<Impl: IDebugHostSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, modulename: super::super::super::Foundation::PWSTR, module: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindModuleByName(::core::mem::transmute(&context), ::core::mem::transmute_copy(&modulename)) {
                ::core::result::Result::Ok(ok__) => {
                    *module = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindModuleByLocation<Impl: IDebugHostSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, modulelocation: Location, module: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindModuleByLocation(::core::mem::transmute(&context), ::core::mem::transmute_copy(&modulelocation)) {
                ::core::result::Result::Ok(ok__) => {
                    *module = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMostDerivedObject<Impl: IDebugHostSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcontext: ::windows::core::RawPtr, location: Location, objecttype: ::windows::core::RawPtr, derivedlocation: *mut Location, derivedtype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetMostDerivedObject(::core::mem::transmute(&pcontext), ::core::mem::transmute_copy(&location), ::core::mem::transmute(&objecttype), ::core::mem::transmute_copy(&derivedlocation), ::core::mem::transmute_copy(&derivedtype)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            CreateModuleSignature: CreateModuleSignature::<Impl, IMPL_OFFSET>,
            CreateTypeSignature: CreateTypeSignature::<Impl, IMPL_OFFSET>,
            CreateTypeSignatureForModuleRange: CreateTypeSignatureForModuleRange::<Impl, IMPL_OFFSET>,
            EnumerateModules: EnumerateModules::<Impl, IMPL_OFFSET>,
            FindModuleByName: FindModuleByName::<Impl, IMPL_OFFSET>,
            FindModuleByLocation: FindModuleByLocation::<Impl, IMPL_OFFSET>,
            GetMostDerivedObject: GetMostDerivedObject::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostSymbols as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostTypeImpl: Sized + IDebugHostSymbolImpl {
    fn GetTypeKind(&mut self) -> ::windows::core::Result<TypeKind>;
    fn GetSize(&mut self) -> ::windows::core::Result<u64>;
    fn GetBaseType(&mut self) -> ::windows::core::Result<IDebugHostType>;
    fn GetHashCode(&mut self) -> ::windows::core::Result<u32>;
    fn GetIntrinsicType(&mut self, intrinsickind: *mut IntrinsicKind, carriertype: *mut u16) -> ::windows::core::Result<()>;
    fn GetBitField(&mut self, lsboffield: *mut u32, lengthoffield: *mut u32) -> ::windows::core::Result<()>;
    fn GetPointerKind(&mut self) -> ::windows::core::Result<PointerKind>;
    fn GetMemberType(&mut self) -> ::windows::core::Result<IDebugHostType>;
    fn CreatePointerTo(&mut self, kind: PointerKind) -> ::windows::core::Result<IDebugHostType>;
    fn GetArrayDimensionality(&mut self) -> ::windows::core::Result<u64>;
    fn GetArrayDimensions(&mut self, dimensions: u64, pdimensions: *mut ArrayDimension) -> ::windows::core::Result<()>;
    fn CreateArrayOf(&mut self, dimensions: u64, pdimensions: *const ArrayDimension) -> ::windows::core::Result<IDebugHostType>;
    fn GetFunctionCallingConvention(&mut self) -> ::windows::core::Result<CallingConventionKind>;
    fn GetFunctionReturnType(&mut self) -> ::windows::core::Result<IDebugHostType>;
    fn GetFunctionParameterTypeCount(&mut self) -> ::windows::core::Result<u64>;
    fn GetFunctionParameterTypeAt(&mut self, i: u64) -> ::windows::core::Result<IDebugHostType>;
    fn IsGeneric(&mut self) -> ::windows::core::Result<bool>;
    fn GetGenericArgumentCount(&mut self) -> ::windows::core::Result<u64>;
    fn GetGenericArgumentAt(&mut self, i: u64) -> ::windows::core::Result<IDebugHostSymbol>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostTypeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostTypeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostTypeVtbl {
        unsafe extern "system" fn GetTypeKind<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: *mut TypeKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeKind() {
                ::core::result::Result::Ok(ok__) => {
                    *kind = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSize<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSize() {
                ::core::result::Result::Ok(ok__) => {
                    *size = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBaseType<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, basetype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBaseType() {
                ::core::result::Result::Ok(ok__) => {
                    *basetype = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetHashCode<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hashcode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetHashCode() {
                ::core::result::Result::Ok(ok__) => {
                    *hashcode = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIntrinsicType<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, intrinsickind: *mut IntrinsicKind, carriertype: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetIntrinsicType(::core::mem::transmute_copy(&intrinsickind), ::core::mem::transmute_copy(&carriertype)).into()
        }
        unsafe extern "system" fn GetBitField<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lsboffield: *mut u32, lengthoffield: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetBitField(::core::mem::transmute_copy(&lsboffield), ::core::mem::transmute_copy(&lengthoffield)).into()
        }
        unsafe extern "system" fn GetPointerKind<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pointerkind: *mut PointerKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPointerKind() {
                ::core::result::Result::Ok(ok__) => {
                    *pointerkind = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMemberType<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, membertype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMemberType() {
                ::core::result::Result::Ok(ok__) => {
                    *membertype = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreatePointerTo<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: PointerKind, newtype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreatePointerTo(::core::mem::transmute_copy(&kind)) {
                ::core::result::Result::Ok(ok__) => {
                    *newtype = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetArrayDimensionality<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, arraydimensionality: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetArrayDimensionality() {
                ::core::result::Result::Ok(ok__) => {
                    *arraydimensionality = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetArrayDimensions<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dimensions: u64, pdimensions: *mut ArrayDimension) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetArrayDimensions(::core::mem::transmute_copy(&dimensions), ::core::mem::transmute_copy(&pdimensions)).into()
        }
        unsafe extern "system" fn CreateArrayOf<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dimensions: u64, pdimensions: *const ArrayDimension, newtype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateArrayOf(::core::mem::transmute_copy(&dimensions), ::core::mem::transmute_copy(&pdimensions)) {
                ::core::result::Result::Ok(ok__) => {
                    *newtype = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFunctionCallingConvention<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, conventionkind: *mut CallingConventionKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFunctionCallingConvention() {
                ::core::result::Result::Ok(ok__) => {
                    *conventionkind = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFunctionReturnType<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, returntype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFunctionReturnType() {
                ::core::result::Result::Ok(ok__) => {
                    *returntype = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFunctionParameterTypeCount<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFunctionParameterTypeCount() {
                ::core::result::Result::Ok(ok__) => {
                    *count = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFunctionParameterTypeAt<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, i: u64, parametertype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFunctionParameterTypeAt(::core::mem::transmute_copy(&i)) {
                ::core::result::Result::Ok(ok__) => {
                    *parametertype = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsGeneric<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, isgeneric: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsGeneric() {
                ::core::result::Result::Ok(ok__) => {
                    *isgeneric = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetGenericArgumentCount<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, argcount: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetGenericArgumentCount() {
                ::core::result::Result::Ok(ok__) => {
                    *argcount = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetGenericArgumentAt<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, i: u64, argument: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetGenericArgumentAt(::core::mem::transmute_copy(&i)) {
                ::core::result::Result::Ok(ok__) => {
                    *argument = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IDebugHostSymbolVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            GetTypeKind: GetTypeKind::<Impl, IMPL_OFFSET>,
            GetSize: GetSize::<Impl, IMPL_OFFSET>,
            GetBaseType: GetBaseType::<Impl, IMPL_OFFSET>,
            GetHashCode: GetHashCode::<Impl, IMPL_OFFSET>,
            GetIntrinsicType: GetIntrinsicType::<Impl, IMPL_OFFSET>,
            GetBitField: GetBitField::<Impl, IMPL_OFFSET>,
            GetPointerKind: GetPointerKind::<Impl, IMPL_OFFSET>,
            GetMemberType: GetMemberType::<Impl, IMPL_OFFSET>,
            CreatePointerTo: CreatePointerTo::<Impl, IMPL_OFFSET>,
            GetArrayDimensionality: GetArrayDimensionality::<Impl, IMPL_OFFSET>,
            GetArrayDimensions: GetArrayDimensions::<Impl, IMPL_OFFSET>,
            CreateArrayOf: CreateArrayOf::<Impl, IMPL_OFFSET>,
            GetFunctionCallingConvention: GetFunctionCallingConvention::<Impl, IMPL_OFFSET>,
            GetFunctionReturnType: GetFunctionReturnType::<Impl, IMPL_OFFSET>,
            GetFunctionParameterTypeCount: GetFunctionParameterTypeCount::<Impl, IMPL_OFFSET>,
            GetFunctionParameterTypeAt: GetFunctionParameterTypeAt::<Impl, IMPL_OFFSET>,
            IsGeneric: IsGeneric::<Impl, IMPL_OFFSET>,
            GetGenericArgumentCount: GetGenericArgumentCount::<Impl, IMPL_OFFSET>,
            GetGenericArgumentAt: GetGenericArgumentAt::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostType as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostType2Impl: Sized + IDebugHostSymbolImpl + IDebugHostTypeImpl {
    fn IsTypedef(&mut self) -> ::windows::core::Result<bool>;
    fn GetTypedefBaseType(&mut self) -> ::windows::core::Result<IDebugHostType2>;
    fn GetTypedefFinalBaseType(&mut self) -> ::windows::core::Result<IDebugHostType2>;
    fn GetFunctionVarArgsKind(&mut self) -> ::windows::core::Result<VarArgsKind>;
    fn GetFunctionInstancePointerType(&mut self) -> ::windows::core::Result<IDebugHostType2>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostType2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostType2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostType2Vtbl {
        unsafe extern "system" fn IsTypedef<Impl: IDebugHostType2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, istypedef: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsTypedef() {
                ::core::result::Result::Ok(ok__) => {
                    *istypedef = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypedefBaseType<Impl: IDebugHostType2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, basetype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypedefBaseType() {
                ::core::result::Result::Ok(ok__) => {
                    *basetype = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypedefFinalBaseType<Impl: IDebugHostType2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, finalbasetype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypedefFinalBaseType() {
                ::core::result::Result::Ok(ok__) => {
                    *finalbasetype = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFunctionVarArgsKind<Impl: IDebugHostType2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varargskind: *mut VarArgsKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFunctionVarArgsKind() {
                ::core::result::Result::Ok(ok__) => {
                    *varargskind = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFunctionInstancePointerType<Impl: IDebugHostType2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instancepointertype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFunctionInstancePointerType() {
                ::core::result::Result::Ok(ok__) => {
                    *instancepointertype = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IDebugHostTypeVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            IsTypedef: IsTypedef::<Impl, IMPL_OFFSET>,
            GetTypedefBaseType: GetTypedefBaseType::<Impl, IMPL_OFFSET>,
            GetTypedefFinalBaseType: GetTypedefFinalBaseType::<Impl, IMPL_OFFSET>,
            GetFunctionVarArgsKind: GetFunctionVarArgsKind::<Impl, IMPL_OFFSET>,
            GetFunctionInstancePointerType: GetFunctionInstancePointerType::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostType2 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugHostTypeSignatureImpl: Sized {
    fn GetHashCode(&mut self) -> ::windows::core::Result<u32>;
    fn IsMatch(&mut self, r#type: ::core::option::Option<IDebugHostType>, ismatch: *mut bool, wildcardmatches: *mut ::core::option::Option<IDebugHostSymbolEnumerator>) -> ::windows::core::Result<()>;
    fn CompareAgainst(&mut self, typesignature: ::core::option::Option<IDebugHostTypeSignature>) -> ::windows::core::Result<SignatureComparison>;
}
impl IDebugHostTypeSignatureVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostTypeSignatureImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostTypeSignatureVtbl {
        unsafe extern "system" fn GetHashCode<Impl: IDebugHostTypeSignatureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hashcode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetHashCode() {
                ::core::result::Result::Ok(ok__) => {
                    *hashcode = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsMatch<Impl: IDebugHostTypeSignatureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: ::windows::core::RawPtr, ismatch: *mut bool, wildcardmatches: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsMatch(::core::mem::transmute(&r#type), ::core::mem::transmute_copy(&ismatch), ::core::mem::transmute_copy(&wildcardmatches)).into()
        }
        unsafe extern "system" fn CompareAgainst<Impl: IDebugHostTypeSignatureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, typesignature: ::windows::core::RawPtr, result: *mut SignatureComparison) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CompareAgainst(::core::mem::transmute(&typesignature)) {
                ::core::result::Result::Ok(ok__) => {
                    *result = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetHashCode: GetHashCode::<Impl, IMPL_OFFSET>,
            IsMatch: IsMatch::<Impl, IMPL_OFFSET>,
            CompareAgainst: CompareAgainst::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostTypeSignature as ::windows::core::Interface>::IID
    }
}
pub trait IDebugInputCallbacksImpl: Sized {
    fn StartInput(&mut self, buffersize: u32) -> ::windows::core::Result<()>;
    fn EndInput(&mut self) -> ::windows::core::Result<()>;
}
impl IDebugInputCallbacksVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugInputCallbacksImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugInputCallbacksVtbl {
        unsafe extern "system" fn StartInput<Impl: IDebugInputCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffersize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartInput(::core::mem::transmute_copy(&buffersize)).into()
        }
        unsafe extern "system" fn EndInput<Impl: IDebugInputCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndInput().into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            StartInput: StartInput::<Impl, IMPL_OFFSET>,
            EndInput: EndInput::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugInputCallbacks as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugOutputCallbacksImpl: Sized {
    fn Output(&mut self, mask: u32, text: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugOutputCallbacksVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugOutputCallbacksImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugOutputCallbacksVtbl {
        unsafe extern "system" fn Output<Impl: IDebugOutputCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, text: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Output(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&text)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), Output: Output::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugOutputCallbacks as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugOutputCallbacks2Impl: Sized {
    fn Output(&mut self, mask: u32, text: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetInterestMask(&mut self) -> ::windows::core::Result<u32>;
    fn Output2(&mut self, which: u32, flags: u32, arg: u64, text: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugOutputCallbacks2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugOutputCallbacks2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugOutputCallbacks2Vtbl {
        unsafe extern "system" fn Output<Impl: IDebugOutputCallbacks2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, text: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Output(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&text)).into()
        }
        unsafe extern "system" fn GetInterestMask<Impl: IDebugOutputCallbacks2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInterestMask() {
                ::core::result::Result::Ok(ok__) => {
                    *mask = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Output2<Impl: IDebugOutputCallbacks2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, flags: u32, arg: u64, text: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Output2(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&arg), ::core::mem::transmute_copy(&text)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Output: Output::<Impl, IMPL_OFFSET>,
            GetInterestMask: GetInterestMask::<Impl, IMPL_OFFSET>,
            Output2: Output2::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugOutputCallbacks2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugOutputCallbacksWideImpl: Sized {
    fn Output(&mut self, mask: u32, text: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugOutputCallbacksWideVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugOutputCallbacksWideImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugOutputCallbacksWideVtbl {
        unsafe extern "system" fn Output<Impl: IDebugOutputCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, text: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Output(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&text)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), Output: Output::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugOutputCallbacksWide as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugOutputStreamImpl: Sized {
    fn Write(&mut self, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugOutputStreamVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugOutputStreamImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugOutputStreamVtbl {
        unsafe extern "system" fn Write<Impl: IDebugOutputStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Write(::core::mem::transmute_copy(&psz)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), Write: Write::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugOutputStream as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPlmClientImpl: Sized {
    fn LaunchPlmPackageForDebugWide(&mut self, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPlmClientVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPlmClientImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPlmClientVtbl {
        unsafe extern "system" fn LaunchPlmPackageForDebugWide<Impl: IDebugPlmClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).LaunchPlmPackageForDebugWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&timeout), ::core::mem::transmute_copy(&packagefullname), ::core::mem::transmute_copy(&appname), ::core::mem::transmute_copy(&arguments), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            LaunchPlmPackageForDebugWide: LaunchPlmPackageForDebugWide::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPlmClient as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPlmClient2Impl: Sized {
    fn LaunchPlmPackageForDebugWide(&mut self, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::Result<()>;
    fn LaunchPlmBgTaskForDebugWide(&mut self, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, backgroundtaskid: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPlmClient2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPlmClient2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPlmClient2Vtbl {
        unsafe extern "system" fn LaunchPlmPackageForDebugWide<Impl: IDebugPlmClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).LaunchPlmPackageForDebugWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&timeout), ::core::mem::transmute_copy(&packagefullname), ::core::mem::transmute_copy(&appname), ::core::mem::transmute_copy(&arguments), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid)).into()
        }
        unsafe extern "system" fn LaunchPlmBgTaskForDebugWide<Impl: IDebugPlmClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, backgroundtaskid: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).LaunchPlmBgTaskForDebugWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&timeout), ::core::mem::transmute_copy(&packagefullname), ::core::mem::transmute_copy(&backgroundtaskid), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            LaunchPlmPackageForDebugWide: LaunchPlmPackageForDebugWide::<Impl, IMPL_OFFSET>,
            LaunchPlmBgTaskForDebugWide: LaunchPlmBgTaskForDebugWide::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPlmClient2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPlmClient3Impl: Sized {
    fn LaunchPlmPackageForDebugWide(&mut self, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::Result<()>;
    fn LaunchPlmBgTaskForDebugWide(&mut self, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, backgroundtaskid: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::Result<()>;
    fn QueryPlmPackageWide(&mut self, server: u64, packagefullname: super::super::super::Foundation::PWSTR, stream: ::core::option::Option<IDebugOutputStream>) -> ::windows::core::Result<()>;
    fn QueryPlmPackageList(&mut self, server: u64, stream: ::core::option::Option<IDebugOutputStream>) -> ::windows::core::Result<()>;
    fn EnablePlmPackageDebugWide(&mut self, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn DisablePlmPackageDebugWide(&mut self, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn SuspendPlmPackageWide(&mut self, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn ResumePlmPackageWide(&mut self, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn TerminatePlmPackageWide(&mut self, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn LaunchAndDebugPlmAppWide(&mut self, server: u64, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn ActivateAndDebugPlmBgTaskWide(&mut self, server: u64, packagefullname: super::super::super::Foundation::PWSTR, backgroundtaskid: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPlmClient3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPlmClient3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPlmClient3Vtbl {
        unsafe extern "system" fn LaunchPlmPackageForDebugWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).LaunchPlmPackageForDebugWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&timeout), ::core::mem::transmute_copy(&packagefullname), ::core::mem::transmute_copy(&appname), ::core::mem::transmute_copy(&arguments), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid)).into()
        }
        unsafe extern "system" fn LaunchPlmBgTaskForDebugWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, backgroundtaskid: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).LaunchPlmBgTaskForDebugWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&timeout), ::core::mem::transmute_copy(&packagefullname), ::core::mem::transmute_copy(&backgroundtaskid), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid)).into()
        }
        unsafe extern "system" fn QueryPlmPackageWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR, stream: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).QueryPlmPackageWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&packagefullname), ::core::mem::transmute(&stream)).into()
        }
        unsafe extern "system" fn QueryPlmPackageList<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, stream: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).QueryPlmPackageList(::core::mem::transmute_copy(&server), ::core::mem::transmute(&stream)).into()
        }
        unsafe extern "system" fn EnablePlmPackageDebugWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EnablePlmPackageDebugWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&packagefullname)).into()
        }
        unsafe extern "system" fn DisablePlmPackageDebugWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DisablePlmPackageDebugWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&packagefullname)).into()
        }
        unsafe extern "system" fn SuspendPlmPackageWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SuspendPlmPackageWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&packagefullname)).into()
        }
        unsafe extern "system" fn ResumePlmPackageWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ResumePlmPackageWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&packagefullname)).into()
        }
        unsafe extern "system" fn TerminatePlmPackageWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).TerminatePlmPackageWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&packagefullname)).into()
        }
        unsafe extern "system" fn LaunchAndDebugPlmAppWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).LaunchAndDebugPlmAppWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&packagefullname), ::core::mem::transmute_copy(&appname), ::core::mem::transmute_copy(&arguments)).into()
        }
        unsafe extern "system" fn ActivateAndDebugPlmBgTaskWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR, backgroundtaskid: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ActivateAndDebugPlmBgTaskWide(::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&packagefullname), ::core::mem::transmute_copy(&backgroundtaskid)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            LaunchPlmPackageForDebugWide: LaunchPlmPackageForDebugWide::<Impl, IMPL_OFFSET>,
            LaunchPlmBgTaskForDebugWide: LaunchPlmBgTaskForDebugWide::<Impl, IMPL_OFFSET>,
            QueryPlmPackageWide: QueryPlmPackageWide::<Impl, IMPL_OFFSET>,
            QueryPlmPackageList: QueryPlmPackageList::<Impl, IMPL_OFFSET>,
            EnablePlmPackageDebugWide: EnablePlmPackageDebugWide::<Impl, IMPL_OFFSET>,
            DisablePlmPackageDebugWide: DisablePlmPackageDebugWide::<Impl, IMPL_OFFSET>,
            SuspendPlmPackageWide: SuspendPlmPackageWide::<Impl, IMPL_OFFSET>,
            ResumePlmPackageWide: ResumePlmPackageWide::<Impl, IMPL_OFFSET>,
            TerminatePlmPackageWide: TerminatePlmPackageWide::<Impl, IMPL_OFFSET>,
            LaunchAndDebugPlmAppWide: LaunchAndDebugPlmAppWide::<Impl, IMPL_OFFSET>,
            ActivateAndDebugPlmBgTaskWide: ActivateAndDebugPlmBgTaskWide::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPlmClient3 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDebugPropertyImpl: Sized {
    fn GetPropertyInfo(&mut self, dwfieldspec: u32, nradix: u32) -> ::windows::core::Result<DebugPropertyInfo>;
    fn GetExtendedInfo(&mut self, cinfos: u32, rgguidextendedinfo: *const ::windows::core::GUID, rgvar: *mut super::super::Com::VARIANT) -> ::windows::core::Result<()>;
    fn SetValueAsString(&mut self, pszvalue: super::super::super::Foundation::PWSTR, nradix: u32) -> ::windows::core::Result<()>;
    fn EnumMembers(&mut self, dwfieldspec: u32, nradix: u32, refiid: *const ::windows::core::GUID) -> ::windows::core::Result<IEnumDebugPropertyInfo>;
    fn GetParent(&mut self) -> ::windows::core::Result<IDebugProperty>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDebugPropertyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPropertyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPropertyVtbl {
        unsafe extern "system" fn GetPropertyInfo<Impl: IDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldspec: u32, nradix: u32, ppropertyinfo: *mut DebugPropertyInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPropertyInfo(::core::mem::transmute_copy(&dwfieldspec), ::core::mem::transmute_copy(&nradix)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppropertyinfo = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtendedInfo<Impl: IDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cinfos: u32, rgguidextendedinfo: *const ::windows::core::GUID, rgvar: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetExtendedInfo(::core::mem::transmute_copy(&cinfos), ::core::mem::transmute_copy(&rgguidextendedinfo), ::core::mem::transmute_copy(&rgvar)).into()
        }
        unsafe extern "system" fn SetValueAsString<Impl: IDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszvalue: super::super::super::Foundation::PWSTR, nradix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetValueAsString(::core::mem::transmute_copy(&pszvalue), ::core::mem::transmute_copy(&nradix)).into()
        }
        unsafe extern "system" fn EnumMembers<Impl: IDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldspec: u32, nradix: u32, refiid: *const ::windows::core::GUID, ppepi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumMembers(::core::mem::transmute_copy(&dwfieldspec), ::core::mem::transmute_copy(&nradix), ::core::mem::transmute_copy(&refiid)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppepi = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetParent<Impl: IDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdebugprop: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetParent() {
                ::core::result::Result::Ok(ok__) => {
                    *ppdebugprop = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetPropertyInfo: GetPropertyInfo::<Impl, IMPL_OFFSET>,
            GetExtendedInfo: GetExtendedInfo::<Impl, IMPL_OFFSET>,
            SetValueAsString: SetValueAsString::<Impl, IMPL_OFFSET>,
            EnumMembers: EnumMembers::<Impl, IMPL_OFFSET>,
            GetParent: GetParent::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugProperty as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPropertyEnumType_AllImpl: Sized {
    fn GetName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPropertyEnumType_AllVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPropertyEnumType_AllImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPropertyEnumType_AllVtbl {
        unsafe extern "system" fn GetName<Impl: IDebugPropertyEnumType_AllImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, __midl__idebugpropertyenumtype_all0000: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName() {
                ::core::result::Result::Ok(ok__) => {
                    *__midl__idebugpropertyenumtype_all0000 = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), GetName: GetName::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPropertyEnumType_All as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPropertyEnumType_ArgumentsImpl: Sized + IDebugPropertyEnumType_AllImpl {}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPropertyEnumType_ArgumentsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPropertyEnumType_ArgumentsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPropertyEnumType_ArgumentsVtbl {
        Self { base: IDebugPropertyEnumType_AllVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>() }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPropertyEnumType_Arguments as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPropertyEnumType_LocalsImpl: Sized + IDebugPropertyEnumType_AllImpl {}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPropertyEnumType_LocalsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPropertyEnumType_LocalsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPropertyEnumType_LocalsVtbl {
        Self { base: IDebugPropertyEnumType_AllVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>() }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPropertyEnumType_Locals as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPropertyEnumType_LocalsPlusArgsImpl: Sized + IDebugPropertyEnumType_AllImpl {}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPropertyEnumType_LocalsPlusArgsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPropertyEnumType_LocalsPlusArgsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPropertyEnumType_LocalsPlusArgsVtbl {
        Self { base: IDebugPropertyEnumType_AllVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>() }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPropertyEnumType_LocalsPlusArgs as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPropertyEnumType_RegistersImpl: Sized + IDebugPropertyEnumType_AllImpl {}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPropertyEnumType_RegistersVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPropertyEnumType_RegistersImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPropertyEnumType_RegistersVtbl {
        Self { base: IDebugPropertyEnumType_AllVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>() }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPropertyEnumType_Registers as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugRegistersImpl: Sized {
    fn GetNumberRegisters(&mut self) -> ::windows::core::Result<u32>;
    fn GetDescription(&mut self, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::core::Result<()>;
    fn GetIndexByName(&mut self, name: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u32>;
    fn GetValue(&mut self, register: u32) -> ::windows::core::Result<DEBUG_VALUE>;
    fn SetValue(&mut self, register: u32, value: *const DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn GetValues(&mut self, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn SetValues(&mut self, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn OutputRegisters(&mut self, outputcontrol: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetInstructionOffset(&mut self) -> ::windows::core::Result<u64>;
    fn GetStackOffset(&mut self) -> ::windows::core::Result<u64>;
    fn GetFrameOffset(&mut self) -> ::windows::core::Result<u64>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugRegistersVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugRegistersImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugRegistersVtbl {
        unsafe extern "system" fn GetNumberRegisters<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberRegisters() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDescription<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDescription(::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&desc)).into()
        }
        unsafe extern "system" fn GetIndexByName<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIndexByName(::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *index = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValue<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, value: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetValue(::core::mem::transmute_copy(&register)) {
                ::core::result::Result::Ok(ok__) => {
                    *value = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetValue<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, value: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetValue(::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn GetValues<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetValues(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into()
        }
        unsafe extern "system" fn SetValues<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetValues(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into()
        }
        unsafe extern "system" fn OutputRegisters<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputRegisters(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetInstructionOffset<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInstructionOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackOffset<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetStackOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFrameOffset<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFrameOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetNumberRegisters: GetNumberRegisters::<Impl, IMPL_OFFSET>,
            GetDescription: GetDescription::<Impl, IMPL_OFFSET>,
            GetIndexByName: GetIndexByName::<Impl, IMPL_OFFSET>,
            GetValue: GetValue::<Impl, IMPL_OFFSET>,
            SetValue: SetValue::<Impl, IMPL_OFFSET>,
            GetValues: GetValues::<Impl, IMPL_OFFSET>,
            SetValues: SetValues::<Impl, IMPL_OFFSET>,
            OutputRegisters: OutputRegisters::<Impl, IMPL_OFFSET>,
            GetInstructionOffset: GetInstructionOffset::<Impl, IMPL_OFFSET>,
            GetStackOffset: GetStackOffset::<Impl, IMPL_OFFSET>,
            GetFrameOffset: GetFrameOffset::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugRegisters as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugRegisters2Impl: Sized {
    fn GetNumberRegisters(&mut self) -> ::windows::core::Result<u32>;
    fn GetDescription(&mut self, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::core::Result<()>;
    fn GetIndexByName(&mut self, name: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u32>;
    fn GetValue(&mut self, register: u32) -> ::windows::core::Result<DEBUG_VALUE>;
    fn SetValue(&mut self, register: u32, value: *const DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn GetValues(&mut self, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn SetValues(&mut self, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn OutputRegisters(&mut self, outputcontrol: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetInstructionOffset(&mut self) -> ::windows::core::Result<u64>;
    fn GetStackOffset(&mut self) -> ::windows::core::Result<u64>;
    fn GetFrameOffset(&mut self) -> ::windows::core::Result<u64>;
    fn GetDescriptionWide(&mut self, register: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::core::Result<()>;
    fn GetIndexByNameWide(&mut self, name: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u32>;
    fn GetNumberPseudoRegisters(&mut self) -> ::windows::core::Result<u32>;
    fn GetPseudoDescription(&mut self, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows::core::Result<()>;
    fn GetPseudoDescriptionWide(&mut self, register: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows::core::Result<()>;
    fn GetPseudoIndexByName(&mut self, name: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u32>;
    fn GetPseudoIndexByNameWide(&mut self, name: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u32>;
    fn GetPseudoValues(&mut self, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn SetPseudoValues(&mut self, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn GetValues2(&mut self, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn SetValues2(&mut self, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::Result<()>;
    fn OutputRegisters2(&mut self, outputcontrol: u32, source: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetInstructionOffset2(&mut self, source: u32) -> ::windows::core::Result<u64>;
    fn GetStackOffset2(&mut self, source: u32) -> ::windows::core::Result<u64>;
    fn GetFrameOffset2(&mut self, source: u32) -> ::windows::core::Result<u64>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugRegisters2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugRegisters2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugRegisters2Vtbl {
        unsafe extern "system" fn GetNumberRegisters<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberRegisters() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDescription<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDescription(::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&desc)).into()
        }
        unsafe extern "system" fn GetIndexByName<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIndexByName(::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *index = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValue<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, value: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetValue(::core::mem::transmute_copy(&register)) {
                ::core::result::Result::Ok(ok__) => {
                    *value = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetValue<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, value: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetValue(::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn GetValues<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetValues(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into()
        }
        unsafe extern "system" fn SetValues<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetValues(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into()
        }
        unsafe extern "system" fn OutputRegisters<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputRegisters(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetInstructionOffset<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInstructionOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackOffset<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetStackOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFrameOffset<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFrameOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDescriptionWide<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDescriptionWide(::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&desc)).into()
        }
        unsafe extern "system" fn GetIndexByNameWide<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIndexByNameWide(::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *index = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPseudoRegisters<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberPseudoRegisters() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPseudoDescription<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPseudoDescription(::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&typemodule), ::core::mem::transmute_copy(&typeid)).into()
        }
        unsafe extern "system" fn GetPseudoDescriptionWide<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPseudoDescriptionWide(::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&typemodule), ::core::mem::transmute_copy(&typeid)).into()
        }
        unsafe extern "system" fn GetPseudoIndexByName<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPseudoIndexByName(::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *index = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPseudoIndexByNameWide<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPseudoIndexByNameWide(::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *index = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPseudoValues<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPseudoValues(::core::mem::transmute_copy(&source), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into()
        }
        unsafe extern "system" fn SetPseudoValues<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetPseudoValues(::core::mem::transmute_copy(&source), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into()
        }
        unsafe extern "system" fn GetValues2<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetValues2(::core::mem::transmute_copy(&source), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into()
        }
        unsafe extern "system" fn SetValues2<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetValues2(::core::mem::transmute_copy(&source), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into()
        }
        unsafe extern "system" fn OutputRegisters2<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, source: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputRegisters2(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&source), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetInstructionOffset2<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, source: u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInstructionOffset2(::core::mem::transmute_copy(&source)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackOffset2<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, source: u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetStackOffset2(::core::mem::transmute_copy(&source)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFrameOffset2<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, source: u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFrameOffset2(::core::mem::transmute_copy(&source)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetNumberRegisters: GetNumberRegisters::<Impl, IMPL_OFFSET>,
            GetDescription: GetDescription::<Impl, IMPL_OFFSET>,
            GetIndexByName: GetIndexByName::<Impl, IMPL_OFFSET>,
            GetValue: GetValue::<Impl, IMPL_OFFSET>,
            SetValue: SetValue::<Impl, IMPL_OFFSET>,
            GetValues: GetValues::<Impl, IMPL_OFFSET>,
            SetValues: SetValues::<Impl, IMPL_OFFSET>,
            OutputRegisters: OutputRegisters::<Impl, IMPL_OFFSET>,
            GetInstructionOffset: GetInstructionOffset::<Impl, IMPL_OFFSET>,
            GetStackOffset: GetStackOffset::<Impl, IMPL_OFFSET>,
            GetFrameOffset: GetFrameOffset::<Impl, IMPL_OFFSET>,
            GetDescriptionWide: GetDescriptionWide::<Impl, IMPL_OFFSET>,
            GetIndexByNameWide: GetIndexByNameWide::<Impl, IMPL_OFFSET>,
            GetNumberPseudoRegisters: GetNumberPseudoRegisters::<Impl, IMPL_OFFSET>,
            GetPseudoDescription: GetPseudoDescription::<Impl, IMPL_OFFSET>,
            GetPseudoDescriptionWide: GetPseudoDescriptionWide::<Impl, IMPL_OFFSET>,
            GetPseudoIndexByName: GetPseudoIndexByName::<Impl, IMPL_OFFSET>,
            GetPseudoIndexByNameWide: GetPseudoIndexByNameWide::<Impl, IMPL_OFFSET>,
            GetPseudoValues: GetPseudoValues::<Impl, IMPL_OFFSET>,
            SetPseudoValues: SetPseudoValues::<Impl, IMPL_OFFSET>,
            GetValues2: GetValues2::<Impl, IMPL_OFFSET>,
            SetValues2: SetValues2::<Impl, IMPL_OFFSET>,
            OutputRegisters2: OutputRegisters2::<Impl, IMPL_OFFSET>,
            GetInstructionOffset2: GetInstructionOffset2::<Impl, IMPL_OFFSET>,
            GetStackOffset2: GetStackOffset2::<Impl, IMPL_OFFSET>,
            GetFrameOffset2: GetFrameOffset2::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugRegisters2 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugSessionProviderImpl: Sized {
    fn StartDebugSession(&mut self, pda: ::core::option::Option<IRemoteDebugApplication>) -> ::windows::core::Result<()>;
}
impl IDebugSessionProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSessionProviderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSessionProviderVtbl {
        unsafe extern "system" fn StartDebugSession<Impl: IDebugSessionProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).StartDebugSession(::core::mem::transmute(&pda)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), StartDebugSession: StartDebugSession::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSessionProvider as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugStackFrameImpl: Sized {
    fn GetCodeContext(&mut self) -> ::windows::core::Result<IDebugCodeContext>;
    fn GetDescriptionString(&mut self, flong: super::super::super::Foundation::BOOL) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetLanguageString(&mut self, flong: super::super::super::Foundation::BOOL) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetThread(&mut self) -> ::windows::core::Result<IDebugApplicationThread>;
    fn GetDebugProperty(&mut self) -> ::windows::core::Result<IDebugProperty>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugStackFrameVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugStackFrameImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugStackFrameVtbl {
        unsafe extern "system" fn GetCodeContext<Impl: IDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppcc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCodeContext() {
                ::core::result::Result::Ok(ok__) => {
                    *ppcc = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDescriptionString<Impl: IDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flong: super::super::super::Foundation::BOOL, pbstrdescription: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDescriptionString(::core::mem::transmute_copy(&flong)) {
                ::core::result::Result::Ok(ok__) => {
                    *pbstrdescription = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLanguageString<Impl: IDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flong: super::super::super::Foundation::BOOL, pbstrlanguage: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLanguageString(::core::mem::transmute_copy(&flong)) {
                ::core::result::Result::Ok(ok__) => {
                    *pbstrlanguage = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThread<Impl: IDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThread() {
                ::core::result::Result::Ok(ok__) => {
                    *ppat = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDebugProperty<Impl: IDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdebugprop: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDebugProperty() {
                ::core::result::Result::Ok(ok__) => {
                    *ppdebugprop = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetCodeContext: GetCodeContext::<Impl, IMPL_OFFSET>,
            GetDescriptionString: GetDescriptionString::<Impl, IMPL_OFFSET>,
            GetLanguageString: GetLanguageString::<Impl, IMPL_OFFSET>,
            GetThread: GetThread::<Impl, IMPL_OFFSET>,
            GetDebugProperty: GetDebugProperty::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugStackFrame as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugStackFrame110Impl: Sized + IDebugStackFrameImpl {
    fn GetStackFrameType(&mut self) -> ::windows::core::Result<DEBUG_STACKFRAME_TYPE>;
    fn GetScriptInvocationContext(&mut self) -> ::windows::core::Result<IScriptInvocationContext>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugStackFrame110Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugStackFrame110Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugStackFrame110Vtbl {
        unsafe extern "system" fn GetStackFrameType<Impl: IDebugStackFrame110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstackframekind: *mut DEBUG_STACKFRAME_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetStackFrameType() {
                ::core::result::Result::Ok(ok__) => {
                    *pstackframekind = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptInvocationContext<Impl: IDebugStackFrame110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppinvocationcontext: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetScriptInvocationContext() {
                ::core::result::Result::Ok(ok__) => {
                    *ppinvocationcontext = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IDebugStackFrameVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            GetStackFrameType: GetStackFrameType::<Impl, IMPL_OFFSET>,
            GetScriptInvocationContext: GetScriptInvocationContext::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugStackFrame110 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugStackFrameSnifferImpl: Sized {
    fn EnumStackFrames(&mut self) -> ::windows::core::Result<IEnumDebugStackFrames>;
}
impl IDebugStackFrameSnifferVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugStackFrameSnifferImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugStackFrameSnifferVtbl {
        unsafe extern "system" fn EnumStackFrames<Impl: IDebugStackFrameSnifferImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppedsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumStackFrames() {
                ::core::result::Result::Ok(ok__) => {
                    *ppedsf = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), EnumStackFrames: EnumStackFrames::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugStackFrameSniffer as ::windows::core::Interface>::IID
    }
}
pub trait IDebugStackFrameSnifferEx32Impl: Sized + IDebugStackFrameSnifferImpl {
    fn EnumStackFramesEx32(&mut self, dwspmin: u32) -> ::windows::core::Result<IEnumDebugStackFrames>;
}
impl IDebugStackFrameSnifferEx32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugStackFrameSnifferEx32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugStackFrameSnifferEx32Vtbl {
        unsafe extern "system" fn EnumStackFramesEx32<Impl: IDebugStackFrameSnifferEx32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwspmin: u32, ppedsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumStackFramesEx32(::core::mem::transmute_copy(&dwspmin)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppedsf = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IDebugStackFrameSnifferVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            EnumStackFramesEx32: EnumStackFramesEx32::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugStackFrameSnifferEx32 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugStackFrameSnifferEx64Impl: Sized + IDebugStackFrameSnifferImpl {
    fn EnumStackFramesEx64(&mut self, dwspmin: u64) -> ::windows::core::Result<IEnumDebugStackFrames64>;
}
impl IDebugStackFrameSnifferEx64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugStackFrameSnifferEx64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugStackFrameSnifferEx64Vtbl {
        unsafe extern "system" fn EnumStackFramesEx64<Impl: IDebugStackFrameSnifferEx64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwspmin: u64, ppedsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumStackFramesEx64(::core::mem::transmute_copy(&dwspmin)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppedsf = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: IDebugStackFrameSnifferVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            EnumStackFramesEx64: EnumStackFramesEx64::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugStackFrameSnifferEx64 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbolGroupImpl: Sized {
    fn GetNumberSymbols(&mut self) -> ::windows::core::Result<u32>;
    fn AddSymbol(&mut self, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::Result<()>;
    fn RemoveSymbolByName(&mut self, name: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn RemoveSymbolByIndex(&mut self, index: u32) -> ::windows::core::Result<()>;
    fn GetSymbolName(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolParameters(&mut self, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows::core::Result<()>;
    fn ExpandSymbol(&mut self, index: u32, expand: super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn OutputSymbols(&mut self, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows::core::Result<()>;
    fn WriteSymbol(&mut self, index: u32, value: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputAsType(&mut self, index: u32, r#type: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSymbolGroupVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSymbolGroupImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSymbolGroupVtbl {
        unsafe extern "system" fn GetNumberSymbols<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberSymbols() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSymbol<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddSymbol(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&index)).into()
        }
        unsafe extern "system" fn RemoveSymbolByName<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSymbolByName(::core::mem::transmute_copy(&name)).into()
        }
        unsafe extern "system" fn RemoveSymbolByIndex<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSymbolByIndex(::core::mem::transmute_copy(&index)).into()
        }
        unsafe extern "system" fn GetSymbolName<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolName(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetSymbolParameters<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn ExpandSymbol<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, expand: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExpandSymbol(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&expand)).into()
        }
        unsafe extern "system" fn OutputSymbols<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputSymbols(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count)).into()
        }
        unsafe extern "system" fn WriteSymbol<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, value: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteSymbol(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn OutputAsType<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, r#type: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputAsType(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&r#type)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetNumberSymbols: GetNumberSymbols::<Impl, IMPL_OFFSET>,
            AddSymbol: AddSymbol::<Impl, IMPL_OFFSET>,
            RemoveSymbolByName: RemoveSymbolByName::<Impl, IMPL_OFFSET>,
            RemoveSymbolByIndex: RemoveSymbolByIndex::<Impl, IMPL_OFFSET>,
            GetSymbolName: GetSymbolName::<Impl, IMPL_OFFSET>,
            GetSymbolParameters: GetSymbolParameters::<Impl, IMPL_OFFSET>,
            ExpandSymbol: ExpandSymbol::<Impl, IMPL_OFFSET>,
            OutputSymbols: OutputSymbols::<Impl, IMPL_OFFSET>,
            WriteSymbol: WriteSymbol::<Impl, IMPL_OFFSET>,
            OutputAsType: OutputAsType::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSymbolGroup as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbolGroup2Impl: Sized {
    fn GetNumberSymbols(&mut self) -> ::windows::core::Result<u32>;
    fn AddSymbol(&mut self, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::Result<()>;
    fn RemoveSymbolByName(&mut self, name: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn RemoveSymbolByIndex(&mut self, index: u32) -> ::windows::core::Result<()>;
    fn GetSymbolName(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolParameters(&mut self, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows::core::Result<()>;
    fn ExpandSymbol(&mut self, index: u32, expand: super::super::super::Foundation::BOOL) -> ::windows::core::Result<()>;
    fn OutputSymbols(&mut self, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows::core::Result<()>;
    fn WriteSymbol(&mut self, index: u32, value: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn OutputAsType(&mut self, index: u32, r#type: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AddSymbolWide(&mut self, name: super::super::super::Foundation::PWSTR, index: *mut u32) -> ::windows::core::Result<()>;
    fn RemoveSymbolByNameWide(&mut self, name: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetSymbolNameWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn WriteSymbolWide(&mut self, index: u32, value: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OutputAsTypeWide(&mut self, index: u32, r#type: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetSymbolTypeName(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolTypeNameWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolSize(&mut self, index: u32) -> ::windows::core::Result<u32>;
    fn GetSymbolOffset(&mut self, index: u32) -> ::windows::core::Result<u64>;
    fn GetSymbolRegister(&mut self, index: u32) -> ::windows::core::Result<u32>;
    fn GetSymbolValueText(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolValueTextWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntryInformation(&mut self, index: u32) -> ::windows::core::Result<DEBUG_SYMBOL_ENTRY>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSymbolGroup2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSymbolGroup2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSymbolGroup2Vtbl {
        unsafe extern "system" fn GetNumberSymbols<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberSymbols() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSymbol<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddSymbol(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&index)).into()
        }
        unsafe extern "system" fn RemoveSymbolByName<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSymbolByName(::core::mem::transmute_copy(&name)).into()
        }
        unsafe extern "system" fn RemoveSymbolByIndex<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSymbolByIndex(::core::mem::transmute_copy(&index)).into()
        }
        unsafe extern "system" fn GetSymbolName<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolName(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetSymbolParameters<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolParameters(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn ExpandSymbol<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, expand: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ExpandSymbol(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&expand)).into()
        }
        unsafe extern "system" fn OutputSymbols<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputSymbols(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count)).into()
        }
        unsafe extern "system" fn WriteSymbol<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, value: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteSymbol(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn OutputAsType<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, r#type: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputAsType(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn AddSymbolWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddSymbolWide(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&index)).into()
        }
        unsafe extern "system" fn RemoveSymbolByNameWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSymbolByNameWide(::core::mem::transmute_copy(&name)).into()
        }
        unsafe extern "system" fn GetSymbolNameWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolNameWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn WriteSymbolWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, value: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteSymbolWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn OutputAsTypeWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, r#type: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputAsTypeWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetSymbolTypeName<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolTypeName(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetSymbolTypeNameWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolTypeNameWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetSymbolSize<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolSize(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *size = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolOffset<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolOffset(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolRegister<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, register: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolRegister(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *register = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolValueText<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolValueText(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetSymbolValueTextWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolValueTextWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, entry: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryInformation(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *entry = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetNumberSymbols: GetNumberSymbols::<Impl, IMPL_OFFSET>,
            AddSymbol: AddSymbol::<Impl, IMPL_OFFSET>,
            RemoveSymbolByName: RemoveSymbolByName::<Impl, IMPL_OFFSET>,
            RemoveSymbolByIndex: RemoveSymbolByIndex::<Impl, IMPL_OFFSET>,
            GetSymbolName: GetSymbolName::<Impl, IMPL_OFFSET>,
            GetSymbolParameters: GetSymbolParameters::<Impl, IMPL_OFFSET>,
            ExpandSymbol: ExpandSymbol::<Impl, IMPL_OFFSET>,
            OutputSymbols: OutputSymbols::<Impl, IMPL_OFFSET>,
            WriteSymbol: WriteSymbol::<Impl, IMPL_OFFSET>,
            OutputAsType: OutputAsType::<Impl, IMPL_OFFSET>,
            AddSymbolWide: AddSymbolWide::<Impl, IMPL_OFFSET>,
            RemoveSymbolByNameWide: RemoveSymbolByNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolNameWide: GetSymbolNameWide::<Impl, IMPL_OFFSET>,
            WriteSymbolWide: WriteSymbolWide::<Impl, IMPL_OFFSET>,
            OutputAsTypeWide: OutputAsTypeWide::<Impl, IMPL_OFFSET>,
            GetSymbolTypeName: GetSymbolTypeName::<Impl, IMPL_OFFSET>,
            GetSymbolTypeNameWide: GetSymbolTypeNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolSize: GetSymbolSize::<Impl, IMPL_OFFSET>,
            GetSymbolOffset: GetSymbolOffset::<Impl, IMPL_OFFSET>,
            GetSymbolRegister: GetSymbolRegister::<Impl, IMPL_OFFSET>,
            GetSymbolValueText: GetSymbolValueText::<Impl, IMPL_OFFSET>,
            GetSymbolValueTextWide: GetSymbolValueTextWide::<Impl, IMPL_OFFSET>,
            GetSymbolEntryInformation: GetSymbolEntryInformation::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSymbolGroup2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbolsImpl: Sized {
    fn GetSymbolOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddSymbolOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveSymbolOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetSymbolOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetNameByOffset(&mut self, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByName(&mut self, symbol: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetNearNameByOffset(&mut self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetLineByOffset(&mut self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByLine(&mut self, line: u32, file: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetNumberModules(&mut self, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleByIndex(&mut self, index: u32) -> ::windows::core::Result<u64>;
    fn GetModuleByModuleName(&mut self, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleByOffset(&mut self, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleNames(&mut self, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleParameters(&mut self, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetSymbolModule(&mut self, symbol: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetTypeName(&mut self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTypeId(&mut self, module: u64, name: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u32>;
    fn GetTypeSize(&mut self, module: u64, typeid: u32) -> ::windows::core::Result<u32>;
    fn GetFieldOffset(&mut self, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u32>;
    fn GetSymbolTypeId(&mut self, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetTypeId(&mut self, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::Result<()>;
    fn ReadTypedDataVirtual(&mut self, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteTypedDataVirtual(&mut self, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn OutputTypedDataVirtual(&mut self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::Result<()>;
    fn ReadTypedDataPhysical(&mut self, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteTypedDataPhysical(&mut self, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn OutputTypedDataPhysical(&mut self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetScope(&mut self, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::Result<()>;
    fn SetScope(&mut self, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::Result<()>;
    fn ResetScope(&mut self) -> ::windows::core::Result<()>;
    fn GetScopeSymbolGroup(&mut self, flags: u32, update: ::core::option::Option<IDebugSymbolGroup>) -> ::windows::core::Result<IDebugSymbolGroup>;
    fn CreateSymbolGroup(&mut self) -> ::windows::core::Result<IDebugSymbolGroup>;
    fn StartSymbolMatch(&mut self, pattern: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetNextSymbolMatch(&mut self, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::Result<()>;
    fn EndSymbolMatch(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn Reload(&mut self, module: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSymbolPath(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSymbolPath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AppendSymbolPath(&mut self, addition: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetImagePath(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetImagePath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AppendImagePath(&mut self, addition: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSourcePath(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourcePathElement(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSourcePath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AppendSourcePath(&mut self, addition: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn FindSourceFile(&mut self, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceFileLineOffsets(&mut self, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSymbolsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSymbolsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSymbolsVtbl {
        unsafe extern "system" fn GetSymbolOptions<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSymbolOptions<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddSymbolOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveSymbolOptions<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSymbolOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetSymbolOptions<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSymbolOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetNameByOffset<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNameByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByName<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByName(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffset<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNearNameByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetLineByOffset<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLineByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByLine<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLine(::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberModules<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNumberModules(::core::mem::transmute_copy(&loaded), ::core::mem::transmute_copy(&unloaded)).into()
        }
        unsafe extern "system" fn GetModuleByIndex<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetModuleByIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *base = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByModuleName(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleByOffset<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleNames<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .GetModuleNames(
                    ::core::mem::transmute_copy(&index),
                    ::core::mem::transmute_copy(&base),
                    ::core::mem::transmute_copy(&imagenamebuffer),
                    ::core::mem::transmute_copy(&imagenamebuffersize),
                    ::core::mem::transmute_copy(&imagenamesize),
                    ::core::mem::transmute_copy(&modulenamebuffer),
                    ::core::mem::transmute_copy(&modulenamebuffersize),
                    ::core::mem::transmute_copy(&modulenamesize),
                    ::core::mem::transmute_copy(&loadedimagenamebuffer),
                    ::core::mem::transmute_copy(&loadedimagenamebuffersize),
                    ::core::mem::transmute_copy(&loadedimagenamesize),
                )
                .into()
        }
        unsafe extern "system" fn GetModuleParameters<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&bases), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetSymbolModule<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolModule(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *base = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeName<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTypeName(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetTypeId<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeId(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *typeid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeSize<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeSize(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    *size = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffset<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFieldOffset(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeId<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolTypeId(::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetOffsetTypeId<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOffsetTypeId(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadTypedDataVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTypedDataVirtual(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadTypedDataPhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataPhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTypedDataPhysical(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetScope<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScope(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into()
        }
        unsafe extern "system" fn SetScope<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScope(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into()
        }
        unsafe extern "system" fn ResetScope<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ResetScope().into()
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup(::core::mem::transmute_copy(&flags), ::core::mem::transmute(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    *symbols = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup() {
                ::core::result::Result::Ok(ok__) => {
                    *group = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatch<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatch(::core::mem::transmute_copy(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatch<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNextSymbolMatch(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn EndSymbolMatch<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndSymbolMatch(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn Reload<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reload(::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetSymbolPath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolPath(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetSymbolPath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSymbolPath(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSymbolPath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSymbolPath(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetImagePath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetImagePath(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetImagePath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetImagePath(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendImagePath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendImagePath(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetSourcePath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePath(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn GetSourcePathElement<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePathElement(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into()
        }
        unsafe extern "system" fn SetSourcePath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSourcePath(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSourcePath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSourcePath(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn FindSourceFile<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FindSourceFile(::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into()
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceFileLineOffsets(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetSymbolOptions: GetSymbolOptions::<Impl, IMPL_OFFSET>,
            AddSymbolOptions: AddSymbolOptions::<Impl, IMPL_OFFSET>,
            RemoveSymbolOptions: RemoveSymbolOptions::<Impl, IMPL_OFFSET>,
            SetSymbolOptions: SetSymbolOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffset: GetNameByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByName: GetOffsetByName::<Impl, IMPL_OFFSET>,
            GetNearNameByOffset: GetNearNameByOffset::<Impl, IMPL_OFFSET>,
            GetLineByOffset: GetLineByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByLine: GetOffsetByLine::<Impl, IMPL_OFFSET>,
            GetNumberModules: GetNumberModules::<Impl, IMPL_OFFSET>,
            GetModuleByIndex: GetModuleByIndex::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName: GetModuleByModuleName::<Impl, IMPL_OFFSET>,
            GetModuleByOffset: GetModuleByOffset::<Impl, IMPL_OFFSET>,
            GetModuleNames: GetModuleNames::<Impl, IMPL_OFFSET>,
            GetModuleParameters: GetModuleParameters::<Impl, IMPL_OFFSET>,
            GetSymbolModule: GetSymbolModule::<Impl, IMPL_OFFSET>,
            GetTypeName: GetTypeName::<Impl, IMPL_OFFSET>,
            GetTypeId: GetTypeId::<Impl, IMPL_OFFSET>,
            GetTypeSize: GetTypeSize::<Impl, IMPL_OFFSET>,
            GetFieldOffset: GetFieldOffset::<Impl, IMPL_OFFSET>,
            GetSymbolTypeId: GetSymbolTypeId::<Impl, IMPL_OFFSET>,
            GetOffsetTypeId: GetOffsetTypeId::<Impl, IMPL_OFFSET>,
            ReadTypedDataVirtual: ReadTypedDataVirtual::<Impl, IMPL_OFFSET>,
            WriteTypedDataVirtual: WriteTypedDataVirtual::<Impl, IMPL_OFFSET>,
            OutputTypedDataVirtual: OutputTypedDataVirtual::<Impl, IMPL_OFFSET>,
            ReadTypedDataPhysical: ReadTypedDataPhysical::<Impl, IMPL_OFFSET>,
            WriteTypedDataPhysical: WriteTypedDataPhysical::<Impl, IMPL_OFFSET>,
            OutputTypedDataPhysical: OutputTypedDataPhysical::<Impl, IMPL_OFFSET>,
            GetScope: GetScope::<Impl, IMPL_OFFSET>,
            SetScope: SetScope::<Impl, IMPL_OFFSET>,
            ResetScope: ResetScope::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup: GetScopeSymbolGroup::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup: CreateSymbolGroup::<Impl, IMPL_OFFSET>,
            StartSymbolMatch: StartSymbolMatch::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatch: GetNextSymbolMatch::<Impl, IMPL_OFFSET>,
            EndSymbolMatch: EndSymbolMatch::<Impl, IMPL_OFFSET>,
            Reload: Reload::<Impl, IMPL_OFFSET>,
            GetSymbolPath: GetSymbolPath::<Impl, IMPL_OFFSET>,
            SetSymbolPath: SetSymbolPath::<Impl, IMPL_OFFSET>,
            AppendSymbolPath: AppendSymbolPath::<Impl, IMPL_OFFSET>,
            GetImagePath: GetImagePath::<Impl, IMPL_OFFSET>,
            SetImagePath: SetImagePath::<Impl, IMPL_OFFSET>,
            AppendImagePath: AppendImagePath::<Impl, IMPL_OFFSET>,
            GetSourcePath: GetSourcePath::<Impl, IMPL_OFFSET>,
            GetSourcePathElement: GetSourcePathElement::<Impl, IMPL_OFFSET>,
            SetSourcePath: SetSourcePath::<Impl, IMPL_OFFSET>,
            AppendSourcePath: AppendSourcePath::<Impl, IMPL_OFFSET>,
            FindSourceFile: FindSourceFile::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsets: GetSourceFileLineOffsets::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSymbols as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbols2Impl: Sized {
    fn GetSymbolOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddSymbolOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveSymbolOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetSymbolOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetNameByOffset(&mut self, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByName(&mut self, symbol: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetNearNameByOffset(&mut self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetLineByOffset(&mut self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByLine(&mut self, line: u32, file: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetNumberModules(&mut self, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleByIndex(&mut self, index: u32) -> ::windows::core::Result<u64>;
    fn GetModuleByModuleName(&mut self, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleByOffset(&mut self, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleNames(&mut self, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleParameters(&mut self, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetSymbolModule(&mut self, symbol: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetTypeName(&mut self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTypeId(&mut self, module: u64, name: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u32>;
    fn GetTypeSize(&mut self, module: u64, typeid: u32) -> ::windows::core::Result<u32>;
    fn GetFieldOffset(&mut self, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u32>;
    fn GetSymbolTypeId(&mut self, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetTypeId(&mut self, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::Result<()>;
    fn ReadTypedDataVirtual(&mut self, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteTypedDataVirtual(&mut self, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn OutputTypedDataVirtual(&mut self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::Result<()>;
    fn ReadTypedDataPhysical(&mut self, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteTypedDataPhysical(&mut self, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn OutputTypedDataPhysical(&mut self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetScope(&mut self, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::Result<()>;
    fn SetScope(&mut self, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::Result<()>;
    fn ResetScope(&mut self) -> ::windows::core::Result<()>;
    fn GetScopeSymbolGroup(&mut self, flags: u32, update: ::core::option::Option<IDebugSymbolGroup>) -> ::windows::core::Result<IDebugSymbolGroup>;
    fn CreateSymbolGroup(&mut self) -> ::windows::core::Result<IDebugSymbolGroup>;
    fn StartSymbolMatch(&mut self, pattern: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetNextSymbolMatch(&mut self, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::Result<()>;
    fn EndSymbolMatch(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn Reload(&mut self, module: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSymbolPath(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSymbolPath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AppendSymbolPath(&mut self, addition: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetImagePath(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetImagePath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AppendImagePath(&mut self, addition: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSourcePath(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourcePathElement(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSourcePath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AppendSourcePath(&mut self, addition: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn FindSourceFile(&mut self, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceFileLineOffsets(&mut self, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleVersionInformation(&mut self, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleNameString(&mut self, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetConstantName(&mut self, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetFieldName(&mut self, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTypeOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddTypeOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveTypeOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetTypeOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSymbols2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSymbols2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSymbols2Vtbl {
        unsafe extern "system" fn GetSymbolOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSymbolOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddSymbolOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveSymbolOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSymbolOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetSymbolOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSymbolOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetNameByOffset<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNameByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByName<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByName(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffset<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNearNameByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetLineByOffset<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLineByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByLine<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLine(::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberModules<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNumberModules(::core::mem::transmute_copy(&loaded), ::core::mem::transmute_copy(&unloaded)).into()
        }
        unsafe extern "system" fn GetModuleByIndex<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetModuleByIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *base = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByModuleName(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleByOffset<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleNames<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .GetModuleNames(
                    ::core::mem::transmute_copy(&index),
                    ::core::mem::transmute_copy(&base),
                    ::core::mem::transmute_copy(&imagenamebuffer),
                    ::core::mem::transmute_copy(&imagenamebuffersize),
                    ::core::mem::transmute_copy(&imagenamesize),
                    ::core::mem::transmute_copy(&modulenamebuffer),
                    ::core::mem::transmute_copy(&modulenamebuffersize),
                    ::core::mem::transmute_copy(&modulenamesize),
                    ::core::mem::transmute_copy(&loadedimagenamebuffer),
                    ::core::mem::transmute_copy(&loadedimagenamebuffersize),
                    ::core::mem::transmute_copy(&loadedimagenamesize),
                )
                .into()
        }
        unsafe extern "system" fn GetModuleParameters<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&bases), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetSymbolModule<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolModule(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *base = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeName<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTypeName(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetTypeId<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeId(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *typeid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeSize<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeSize(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    *size = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffset<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFieldOffset(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeId<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolTypeId(::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetOffsetTypeId<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOffsetTypeId(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadTypedDataVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTypedDataVirtual(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadTypedDataPhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataPhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTypedDataPhysical(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetScope<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScope(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into()
        }
        unsafe extern "system" fn SetScope<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScope(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into()
        }
        unsafe extern "system" fn ResetScope<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ResetScope().into()
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup(::core::mem::transmute_copy(&flags), ::core::mem::transmute(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    *symbols = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup() {
                ::core::result::Result::Ok(ok__) => {
                    *group = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatch<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatch(::core::mem::transmute_copy(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatch<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNextSymbolMatch(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn EndSymbolMatch<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndSymbolMatch(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn Reload<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reload(::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetSymbolPath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolPath(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetSymbolPath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSymbolPath(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSymbolPath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSymbolPath(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetImagePath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetImagePath(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetImagePath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetImagePath(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendImagePath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendImagePath(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetSourcePath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePath(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn GetSourcePathElement<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePathElement(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into()
        }
        unsafe extern "system" fn SetSourcePath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSourcePath(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSourcePath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSourcePath(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn FindSourceFile<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FindSourceFile(::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into()
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceFileLineOffsets(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into()
        }
        unsafe extern "system" fn GetModuleVersionInformation<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleVersionInformation(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&item), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&verinfosize)).into()
        }
        unsafe extern "system" fn GetModuleNameString<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleNameString(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetConstantName<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetConstantName(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetFieldName<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFieldName(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&fieldindex), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetTypeOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddTypeOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddTypeOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveTypeOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveTypeOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetTypeOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTypeOptions(::core::mem::transmute_copy(&options)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetSymbolOptions: GetSymbolOptions::<Impl, IMPL_OFFSET>,
            AddSymbolOptions: AddSymbolOptions::<Impl, IMPL_OFFSET>,
            RemoveSymbolOptions: RemoveSymbolOptions::<Impl, IMPL_OFFSET>,
            SetSymbolOptions: SetSymbolOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffset: GetNameByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByName: GetOffsetByName::<Impl, IMPL_OFFSET>,
            GetNearNameByOffset: GetNearNameByOffset::<Impl, IMPL_OFFSET>,
            GetLineByOffset: GetLineByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByLine: GetOffsetByLine::<Impl, IMPL_OFFSET>,
            GetNumberModules: GetNumberModules::<Impl, IMPL_OFFSET>,
            GetModuleByIndex: GetModuleByIndex::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName: GetModuleByModuleName::<Impl, IMPL_OFFSET>,
            GetModuleByOffset: GetModuleByOffset::<Impl, IMPL_OFFSET>,
            GetModuleNames: GetModuleNames::<Impl, IMPL_OFFSET>,
            GetModuleParameters: GetModuleParameters::<Impl, IMPL_OFFSET>,
            GetSymbolModule: GetSymbolModule::<Impl, IMPL_OFFSET>,
            GetTypeName: GetTypeName::<Impl, IMPL_OFFSET>,
            GetTypeId: GetTypeId::<Impl, IMPL_OFFSET>,
            GetTypeSize: GetTypeSize::<Impl, IMPL_OFFSET>,
            GetFieldOffset: GetFieldOffset::<Impl, IMPL_OFFSET>,
            GetSymbolTypeId: GetSymbolTypeId::<Impl, IMPL_OFFSET>,
            GetOffsetTypeId: GetOffsetTypeId::<Impl, IMPL_OFFSET>,
            ReadTypedDataVirtual: ReadTypedDataVirtual::<Impl, IMPL_OFFSET>,
            WriteTypedDataVirtual: WriteTypedDataVirtual::<Impl, IMPL_OFFSET>,
            OutputTypedDataVirtual: OutputTypedDataVirtual::<Impl, IMPL_OFFSET>,
            ReadTypedDataPhysical: ReadTypedDataPhysical::<Impl, IMPL_OFFSET>,
            WriteTypedDataPhysical: WriteTypedDataPhysical::<Impl, IMPL_OFFSET>,
            OutputTypedDataPhysical: OutputTypedDataPhysical::<Impl, IMPL_OFFSET>,
            GetScope: GetScope::<Impl, IMPL_OFFSET>,
            SetScope: SetScope::<Impl, IMPL_OFFSET>,
            ResetScope: ResetScope::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup: GetScopeSymbolGroup::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup: CreateSymbolGroup::<Impl, IMPL_OFFSET>,
            StartSymbolMatch: StartSymbolMatch::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatch: GetNextSymbolMatch::<Impl, IMPL_OFFSET>,
            EndSymbolMatch: EndSymbolMatch::<Impl, IMPL_OFFSET>,
            Reload: Reload::<Impl, IMPL_OFFSET>,
            GetSymbolPath: GetSymbolPath::<Impl, IMPL_OFFSET>,
            SetSymbolPath: SetSymbolPath::<Impl, IMPL_OFFSET>,
            AppendSymbolPath: AppendSymbolPath::<Impl, IMPL_OFFSET>,
            GetImagePath: GetImagePath::<Impl, IMPL_OFFSET>,
            SetImagePath: SetImagePath::<Impl, IMPL_OFFSET>,
            AppendImagePath: AppendImagePath::<Impl, IMPL_OFFSET>,
            GetSourcePath: GetSourcePath::<Impl, IMPL_OFFSET>,
            GetSourcePathElement: GetSourcePathElement::<Impl, IMPL_OFFSET>,
            SetSourcePath: SetSourcePath::<Impl, IMPL_OFFSET>,
            AppendSourcePath: AppendSourcePath::<Impl, IMPL_OFFSET>,
            FindSourceFile: FindSourceFile::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsets: GetSourceFileLineOffsets::<Impl, IMPL_OFFSET>,
            GetModuleVersionInformation: GetModuleVersionInformation::<Impl, IMPL_OFFSET>,
            GetModuleNameString: GetModuleNameString::<Impl, IMPL_OFFSET>,
            GetConstantName: GetConstantName::<Impl, IMPL_OFFSET>,
            GetFieldName: GetFieldName::<Impl, IMPL_OFFSET>,
            GetTypeOptions: GetTypeOptions::<Impl, IMPL_OFFSET>,
            AddTypeOptions: AddTypeOptions::<Impl, IMPL_OFFSET>,
            RemoveTypeOptions: RemoveTypeOptions::<Impl, IMPL_OFFSET>,
            SetTypeOptions: SetTypeOptions::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSymbols2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbols3Impl: Sized {
    fn GetSymbolOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddSymbolOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveSymbolOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetSymbolOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetNameByOffset(&mut self, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByName(&mut self, symbol: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetNearNameByOffset(&mut self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetLineByOffset(&mut self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByLine(&mut self, line: u32, file: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetNumberModules(&mut self, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleByIndex(&mut self, index: u32) -> ::windows::core::Result<u64>;
    fn GetModuleByModuleName(&mut self, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleByOffset(&mut self, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleNames(&mut self, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleParameters(&mut self, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetSymbolModule(&mut self, symbol: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetTypeName(&mut self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTypeId(&mut self, module: u64, name: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u32>;
    fn GetTypeSize(&mut self, module: u64, typeid: u32) -> ::windows::core::Result<u32>;
    fn GetFieldOffset(&mut self, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u32>;
    fn GetSymbolTypeId(&mut self, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetTypeId(&mut self, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::Result<()>;
    fn ReadTypedDataVirtual(&mut self, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteTypedDataVirtual(&mut self, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn OutputTypedDataVirtual(&mut self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::Result<()>;
    fn ReadTypedDataPhysical(&mut self, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteTypedDataPhysical(&mut self, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn OutputTypedDataPhysical(&mut self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetScope(&mut self, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::Result<()>;
    fn SetScope(&mut self, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::Result<()>;
    fn ResetScope(&mut self) -> ::windows::core::Result<()>;
    fn GetScopeSymbolGroup(&mut self, flags: u32, update: ::core::option::Option<IDebugSymbolGroup>) -> ::windows::core::Result<IDebugSymbolGroup>;
    fn CreateSymbolGroup(&mut self) -> ::windows::core::Result<IDebugSymbolGroup>;
    fn StartSymbolMatch(&mut self, pattern: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetNextSymbolMatch(&mut self, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::Result<()>;
    fn EndSymbolMatch(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn Reload(&mut self, module: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSymbolPath(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSymbolPath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AppendSymbolPath(&mut self, addition: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetImagePath(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetImagePath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AppendImagePath(&mut self, addition: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSourcePath(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourcePathElement(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSourcePath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AppendSourcePath(&mut self, addition: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn FindSourceFile(&mut self, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceFileLineOffsets(&mut self, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleVersionInformation(&mut self, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleNameString(&mut self, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetConstantName(&mut self, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetFieldName(&mut self, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTypeOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddTypeOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveTypeOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetTypeOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetNameByOffsetWide(&mut self, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByNameWide(&mut self, symbol: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn GetNearNameByOffsetWide(&mut self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetLineByOffsetWide(&mut self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByLineWide(&mut self, line: u32, file: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn GetModuleByModuleNameWide(&mut self, name: super::super::super::Foundation::PWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetSymbolModuleWide(&mut self, symbol: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn GetTypeNameWide(&mut self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTypeIdWide(&mut self, module: u64, name: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u32>;
    fn GetFieldOffsetWide(&mut self, module: u64, typeid: u32, field: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u32>;
    fn GetSymbolTypeIdWide(&mut self, symbol: super::super::super::Foundation::PWSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::Result<()>;
    fn GetScopeSymbolGroup2(&mut self, flags: u32, update: ::core::option::Option<IDebugSymbolGroup2>) -> ::windows::core::Result<IDebugSymbolGroup2>;
    fn CreateSymbolGroup2(&mut self) -> ::windows::core::Result<IDebugSymbolGroup2>;
    fn StartSymbolMatchWide(&mut self, pattern: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn GetNextSymbolMatchWide(&mut self, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::Result<()>;
    fn ReloadWide(&mut self, module: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetSymbolPathWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSymbolPathWide(&mut self, path: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AppendSymbolPathWide(&mut self, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetImagePathWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetImagePathWide(&mut self, path: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AppendImagePathWide(&mut self, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetSourcePathWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourcePathElementWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSourcePathWide(&mut self, path: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AppendSourcePathWide(&mut self, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn FindSourceFileWide(&mut self, startelement: u32, file: super::super::super::Foundation::PWSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceFileLineOffsetsWide(&mut self, file: super::super::super::Foundation::PWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleVersionInformationWide(&mut self, index: u32, base: u64, item: super::super::super::Foundation::PWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleNameStringWide(&mut self, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetConstantNameWide(&mut self, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetFieldNameWide(&mut self, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn IsManagedModule(&mut self, index: u32, base: u64) -> ::windows::core::Result<()>;
    fn GetModuleByModuleName2(&mut self, name: super::super::super::Foundation::PSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleByModuleName2Wide(&mut self, name: super::super::super::Foundation::PWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleByOffset2(&mut self, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn AddSyntheticModule(&mut self, base: u64, size: u32, imagepath: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn AddSyntheticModuleWide(&mut self, base: u64, size: u32, imagepath: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn RemoveSyntheticModule(&mut self, base: u64) -> ::windows::core::Result<()>;
    fn GetCurrentScopeFrameIndex(&mut self) -> ::windows::core::Result<u32>;
    fn SetScopeFrameByIndex(&mut self, index: u32) -> ::windows::core::Result<()>;
    fn SetScopeFromJitDebugInfo(&mut self, outputcontrol: u32, infooffset: u64) -> ::windows::core::Result<()>;
    fn SetScopeFromStoredEvent(&mut self) -> ::windows::core::Result<()>;
    fn OutputSymbolByOffset(&mut self, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::core::Result<()>;
    fn GetFunctionEntryByOffset(&mut self, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::core::Result<()>;
    fn GetFieldTypeAndOffset(&mut self, module: u64, containertypeid: u32, field: super::super::super::Foundation::PSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::Result<()>;
    fn GetFieldTypeAndOffsetWide(&mut self, module: u64, containertypeid: u32, field: super::super::super::Foundation::PWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::Result<()>;
    fn AddSyntheticSymbol(&mut self, offset: u64, size: u32, name: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<DEBUG_MODULE_AND_ID>;
    fn AddSyntheticSymbolWide(&mut self, offset: u64, size: u32, name: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<DEBUG_MODULE_AND_ID>;
    fn RemoveSyntheticSymbol(&mut self, id: *const DEBUG_MODULE_AND_ID) -> ::windows::core::Result<()>;
    fn GetSymbolEntriesByOffset(&mut self, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntriesByName(&mut self, symbol: super::super::super::Foundation::PSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntriesByNameWide(&mut self, symbol: super::super::super::Foundation::PWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntryByToken(&mut self, modulebase: u64, token: u32) -> ::windows::core::Result<DEBUG_MODULE_AND_ID>;
    fn GetSymbolEntryInformation(&mut self, id: *const DEBUG_MODULE_AND_ID) -> ::windows::core::Result<DEBUG_SYMBOL_ENTRY>;
    fn GetSymbolEntryString(&mut self, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntryStringWide(&mut self, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntryOffsetRegions(&mut self, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntryBySymbolEntry(&mut self, fromid: *const DEBUG_MODULE_AND_ID, flags: u32) -> ::windows::core::Result<DEBUG_MODULE_AND_ID>;
    fn GetSourceEntriesByOffset(&mut self, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntriesByLine(&mut self, line: u32, file: super::super::super::Foundation::PSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntriesByLineWide(&mut self, line: u32, file: super::super::super::Foundation::PWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntryString(&mut self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntryStringWide(&mut self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntryOffsetRegions(&mut self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntryBySourceEntry(&mut self, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32) -> ::windows::core::Result<DEBUG_SYMBOL_SOURCE_ENTRY>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSymbols3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSymbols3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSymbols3Vtbl {
        unsafe extern "system" fn GetSymbolOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSymbolOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddSymbolOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveSymbolOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSymbolOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetSymbolOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSymbolOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetNameByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNameByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByName<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByName(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNearNameByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetLineByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLineByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByLine<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLine(::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberModules<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNumberModules(::core::mem::transmute_copy(&loaded), ::core::mem::transmute_copy(&unloaded)).into()
        }
        unsafe extern "system" fn GetModuleByIndex<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetModuleByIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *base = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByModuleName(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleNames<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .GetModuleNames(
                    ::core::mem::transmute_copy(&index),
                    ::core::mem::transmute_copy(&base),
                    ::core::mem::transmute_copy(&imagenamebuffer),
                    ::core::mem::transmute_copy(&imagenamebuffersize),
                    ::core::mem::transmute_copy(&imagenamesize),
                    ::core::mem::transmute_copy(&modulenamebuffer),
                    ::core::mem::transmute_copy(&modulenamebuffersize),
                    ::core::mem::transmute_copy(&modulenamesize),
                    ::core::mem::transmute_copy(&loadedimagenamebuffer),
                    ::core::mem::transmute_copy(&loadedimagenamebuffersize),
                    ::core::mem::transmute_copy(&loadedimagenamesize),
                )
                .into()
        }
        unsafe extern "system" fn GetModuleParameters<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&bases), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetSymbolModule<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolModule(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *base = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeName<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTypeName(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetTypeId<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeId(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *typeid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeSize<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeSize(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    *size = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFieldOffset(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeId<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolTypeId(::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetOffsetTypeId<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOffsetTypeId(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadTypedDataVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTypedDataVirtual(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadTypedDataPhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataPhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTypedDataPhysical(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetScope<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScope(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into()
        }
        unsafe extern "system" fn SetScope<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScope(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into()
        }
        unsafe extern "system" fn ResetScope<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ResetScope().into()
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup(::core::mem::transmute_copy(&flags), ::core::mem::transmute(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    *symbols = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup() {
                ::core::result::Result::Ok(ok__) => {
                    *group = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatch<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatch(::core::mem::transmute_copy(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatch<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNextSymbolMatch(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn EndSymbolMatch<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndSymbolMatch(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn Reload<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reload(::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetSymbolPath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolPath(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetSymbolPath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSymbolPath(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSymbolPath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSymbolPath(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetImagePath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetImagePath(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetImagePath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetImagePath(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendImagePath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendImagePath(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetSourcePath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePath(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn GetSourcePathElement<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePathElement(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into()
        }
        unsafe extern "system" fn SetSourcePath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSourcePath(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSourcePath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSourcePath(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn FindSourceFile<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FindSourceFile(::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into()
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceFileLineOffsets(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into()
        }
        unsafe extern "system" fn GetModuleVersionInformation<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleVersionInformation(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&item), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&verinfosize)).into()
        }
        unsafe extern "system" fn GetModuleNameString<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleNameString(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetConstantName<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetConstantName(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetFieldName<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFieldName(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&fieldindex), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetTypeOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddTypeOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddTypeOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveTypeOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveTypeOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetTypeOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTypeOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetNameByOffsetWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNameByOffsetWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByNameWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByNameWide(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffsetWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNearNameByOffsetWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetLineByOffsetWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLineByOffsetWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByLineWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLineWide(::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleNameWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByModuleNameWide(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetSymbolModuleWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolModuleWide(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *base = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeNameWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTypeNameWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetTypeIdWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PWSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeIdWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *typeid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffsetWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PWSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFieldOffsetWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeIdWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolTypeIdWide(::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetScopeSymbolGroup2<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup2(::core::mem::transmute_copy(&flags), ::core::mem::transmute(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    *symbols = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup2<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup2() {
                ::core::result::Result::Ok(ok__) => {
                    *group = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatchWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatchWide(::core::mem::transmute_copy(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatchWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNextSymbolMatchWide(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn ReloadWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReloadWide(::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetSymbolPathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolPathWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetSymbolPathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSymbolPathWide(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSymbolPathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSymbolPathWide(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetImagePathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetImagePathWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetImagePathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetImagePathWide(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendImagePathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendImagePathWide(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetSourcePathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePathWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn GetSourcePathElementWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePathElementWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into()
        }
        unsafe extern "system" fn SetSourcePathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSourcePathWide(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSourcePathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSourcePathWide(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn FindSourceFileWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PWSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FindSourceFileWide(::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into()
        }
        unsafe extern "system" fn GetSourceFileLineOffsetsWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceFileLineOffsetsWide(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into()
        }
        unsafe extern "system" fn GetModuleVersionInformationWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleVersionInformationWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&item), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&verinfosize)).into()
        }
        unsafe extern "system" fn GetModuleNameStringWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleNameStringWide(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetConstantNameWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetConstantNameWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetFieldNameWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFieldNameWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&fieldindex), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn IsManagedModule<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsManagedModule(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleByModuleName2<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByModuleName2(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleByModuleName2Wide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByModuleName2Wide(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleByOffset2<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByOffset2(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn AddSyntheticModule<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddSyntheticModule(::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&imagepath), ::core::mem::transmute_copy(&modulename), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn AddSyntheticModuleWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddSyntheticModuleWide(::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&imagepath), ::core::mem::transmute_copy(&modulename), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn RemoveSyntheticModule<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSyntheticModule(::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndex<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentScopeFrameIndex() {
                ::core::result::Result::Ok(ok__) => {
                    *index = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeFrameByIndex<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScopeFrameByIndex(::core::mem::transmute_copy(&index)).into()
        }
        unsafe extern "system" fn SetScopeFromJitDebugInfo<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, infooffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScopeFromJitDebugInfo(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&infooffset)).into()
        }
        unsafe extern "system" fn SetScopeFromStoredEvent<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScopeFromStoredEvent().into()
        }
        unsafe extern "system" fn OutputSymbolByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputSymbolByOffset(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn GetFunctionEntryByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFunctionEntryByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bufferneeded)).into()
        }
        unsafe extern "system" fn GetFieldTypeAndOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFieldTypeAndOffset(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&containertypeid), ::core::mem::transmute_copy(&field), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn GetFieldTypeAndOffsetWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFieldTypeAndOffsetWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&containertypeid), ::core::mem::transmute_copy(&field), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn AddSyntheticSymbol<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddSyntheticSymbol(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSyntheticSymbolWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddSyntheticSymbolWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSyntheticSymbol<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSyntheticSymbol(::core::mem::transmute_copy(&id)).into()
        }
        unsafe extern "system" fn GetSymbolEntriesByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntriesByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&displacements), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into()
        }
        unsafe extern "system" fn GetSymbolEntriesByName<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntriesByName(::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into()
        }
        unsafe extern "system" fn GetSymbolEntriesByNameWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntriesByNameWide(::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into()
        }
        unsafe extern "system" fn GetSymbolEntryByToken<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modulebase: u64, token: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryByToken(::core::mem::transmute_copy(&modulebase), ::core::mem::transmute_copy(&token)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryInformation(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *info = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryString<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntryString(::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSymbolEntryStringWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntryStringWide(::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSymbolEntryOffsetRegions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntryOffsetRegions(::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&regions), ::core::mem::transmute_copy(&regionscount), ::core::mem::transmute_copy(&regionsavail)).into()
        }
        unsafe extern "system" fn GetSymbolEntryBySymbolEntry<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fromid: *const DEBUG_MODULE_AND_ID, flags: u32, toid: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryBySymbolEntry(::core::mem::transmute_copy(&fromid), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *toid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntriesByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntriesByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into()
        }
        unsafe extern "system" fn GetSourceEntriesByLine<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntriesByLine(::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into()
        }
        unsafe extern "system" fn GetSourceEntriesByLineWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntriesByLineWide(::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into()
        }
        unsafe extern "system" fn GetSourceEntryString<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntryString(::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSourceEntryStringWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntryStringWide(::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSourceEntryOffsetRegions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntryOffsetRegions(::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&regions), ::core::mem::transmute_copy(&regionscount), ::core::mem::transmute_copy(&regionsavail)).into()
        }
        unsafe extern "system" fn GetSourceEntryBySourceEntry<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSourceEntryBySourceEntry(::core::mem::transmute_copy(&fromentry), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *toentry = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetSymbolOptions: GetSymbolOptions::<Impl, IMPL_OFFSET>,
            AddSymbolOptions: AddSymbolOptions::<Impl, IMPL_OFFSET>,
            RemoveSymbolOptions: RemoveSymbolOptions::<Impl, IMPL_OFFSET>,
            SetSymbolOptions: SetSymbolOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffset: GetNameByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByName: GetOffsetByName::<Impl, IMPL_OFFSET>,
            GetNearNameByOffset: GetNearNameByOffset::<Impl, IMPL_OFFSET>,
            GetLineByOffset: GetLineByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByLine: GetOffsetByLine::<Impl, IMPL_OFFSET>,
            GetNumberModules: GetNumberModules::<Impl, IMPL_OFFSET>,
            GetModuleByIndex: GetModuleByIndex::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName: GetModuleByModuleName::<Impl, IMPL_OFFSET>,
            GetModuleByOffset: GetModuleByOffset::<Impl, IMPL_OFFSET>,
            GetModuleNames: GetModuleNames::<Impl, IMPL_OFFSET>,
            GetModuleParameters: GetModuleParameters::<Impl, IMPL_OFFSET>,
            GetSymbolModule: GetSymbolModule::<Impl, IMPL_OFFSET>,
            GetTypeName: GetTypeName::<Impl, IMPL_OFFSET>,
            GetTypeId: GetTypeId::<Impl, IMPL_OFFSET>,
            GetTypeSize: GetTypeSize::<Impl, IMPL_OFFSET>,
            GetFieldOffset: GetFieldOffset::<Impl, IMPL_OFFSET>,
            GetSymbolTypeId: GetSymbolTypeId::<Impl, IMPL_OFFSET>,
            GetOffsetTypeId: GetOffsetTypeId::<Impl, IMPL_OFFSET>,
            ReadTypedDataVirtual: ReadTypedDataVirtual::<Impl, IMPL_OFFSET>,
            WriteTypedDataVirtual: WriteTypedDataVirtual::<Impl, IMPL_OFFSET>,
            OutputTypedDataVirtual: OutputTypedDataVirtual::<Impl, IMPL_OFFSET>,
            ReadTypedDataPhysical: ReadTypedDataPhysical::<Impl, IMPL_OFFSET>,
            WriteTypedDataPhysical: WriteTypedDataPhysical::<Impl, IMPL_OFFSET>,
            OutputTypedDataPhysical: OutputTypedDataPhysical::<Impl, IMPL_OFFSET>,
            GetScope: GetScope::<Impl, IMPL_OFFSET>,
            SetScope: SetScope::<Impl, IMPL_OFFSET>,
            ResetScope: ResetScope::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup: GetScopeSymbolGroup::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup: CreateSymbolGroup::<Impl, IMPL_OFFSET>,
            StartSymbolMatch: StartSymbolMatch::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatch: GetNextSymbolMatch::<Impl, IMPL_OFFSET>,
            EndSymbolMatch: EndSymbolMatch::<Impl, IMPL_OFFSET>,
            Reload: Reload::<Impl, IMPL_OFFSET>,
            GetSymbolPath: GetSymbolPath::<Impl, IMPL_OFFSET>,
            SetSymbolPath: SetSymbolPath::<Impl, IMPL_OFFSET>,
            AppendSymbolPath: AppendSymbolPath::<Impl, IMPL_OFFSET>,
            GetImagePath: GetImagePath::<Impl, IMPL_OFFSET>,
            SetImagePath: SetImagePath::<Impl, IMPL_OFFSET>,
            AppendImagePath: AppendImagePath::<Impl, IMPL_OFFSET>,
            GetSourcePath: GetSourcePath::<Impl, IMPL_OFFSET>,
            GetSourcePathElement: GetSourcePathElement::<Impl, IMPL_OFFSET>,
            SetSourcePath: SetSourcePath::<Impl, IMPL_OFFSET>,
            AppendSourcePath: AppendSourcePath::<Impl, IMPL_OFFSET>,
            FindSourceFile: FindSourceFile::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsets: GetSourceFileLineOffsets::<Impl, IMPL_OFFSET>,
            GetModuleVersionInformation: GetModuleVersionInformation::<Impl, IMPL_OFFSET>,
            GetModuleNameString: GetModuleNameString::<Impl, IMPL_OFFSET>,
            GetConstantName: GetConstantName::<Impl, IMPL_OFFSET>,
            GetFieldName: GetFieldName::<Impl, IMPL_OFFSET>,
            GetTypeOptions: GetTypeOptions::<Impl, IMPL_OFFSET>,
            AddTypeOptions: AddTypeOptions::<Impl, IMPL_OFFSET>,
            RemoveTypeOptions: RemoveTypeOptions::<Impl, IMPL_OFFSET>,
            SetTypeOptions: SetTypeOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffsetWide: GetNameByOffsetWide::<Impl, IMPL_OFFSET>,
            GetOffsetByNameWide: GetOffsetByNameWide::<Impl, IMPL_OFFSET>,
            GetNearNameByOffsetWide: GetNearNameByOffsetWide::<Impl, IMPL_OFFSET>,
            GetLineByOffsetWide: GetLineByOffsetWide::<Impl, IMPL_OFFSET>,
            GetOffsetByLineWide: GetOffsetByLineWide::<Impl, IMPL_OFFSET>,
            GetModuleByModuleNameWide: GetModuleByModuleNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolModuleWide: GetSymbolModuleWide::<Impl, IMPL_OFFSET>,
            GetTypeNameWide: GetTypeNameWide::<Impl, IMPL_OFFSET>,
            GetTypeIdWide: GetTypeIdWide::<Impl, IMPL_OFFSET>,
            GetFieldOffsetWide: GetFieldOffsetWide::<Impl, IMPL_OFFSET>,
            GetSymbolTypeIdWide: GetSymbolTypeIdWide::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup2: GetScopeSymbolGroup2::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup2: CreateSymbolGroup2::<Impl, IMPL_OFFSET>,
            StartSymbolMatchWide: StartSymbolMatchWide::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatchWide: GetNextSymbolMatchWide::<Impl, IMPL_OFFSET>,
            ReloadWide: ReloadWide::<Impl, IMPL_OFFSET>,
            GetSymbolPathWide: GetSymbolPathWide::<Impl, IMPL_OFFSET>,
            SetSymbolPathWide: SetSymbolPathWide::<Impl, IMPL_OFFSET>,
            AppendSymbolPathWide: AppendSymbolPathWide::<Impl, IMPL_OFFSET>,
            GetImagePathWide: GetImagePathWide::<Impl, IMPL_OFFSET>,
            SetImagePathWide: SetImagePathWide::<Impl, IMPL_OFFSET>,
            AppendImagePathWide: AppendImagePathWide::<Impl, IMPL_OFFSET>,
            GetSourcePathWide: GetSourcePathWide::<Impl, IMPL_OFFSET>,
            GetSourcePathElementWide: GetSourcePathElementWide::<Impl, IMPL_OFFSET>,
            SetSourcePathWide: SetSourcePathWide::<Impl, IMPL_OFFSET>,
            AppendSourcePathWide: AppendSourcePathWide::<Impl, IMPL_OFFSET>,
            FindSourceFileWide: FindSourceFileWide::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsetsWide: GetSourceFileLineOffsetsWide::<Impl, IMPL_OFFSET>,
            GetModuleVersionInformationWide: GetModuleVersionInformationWide::<Impl, IMPL_OFFSET>,
            GetModuleNameStringWide: GetModuleNameStringWide::<Impl, IMPL_OFFSET>,
            GetConstantNameWide: GetConstantNameWide::<Impl, IMPL_OFFSET>,
            GetFieldNameWide: GetFieldNameWide::<Impl, IMPL_OFFSET>,
            IsManagedModule: IsManagedModule::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName2: GetModuleByModuleName2::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName2Wide: GetModuleByModuleName2Wide::<Impl, IMPL_OFFSET>,
            GetModuleByOffset2: GetModuleByOffset2::<Impl, IMPL_OFFSET>,
            AddSyntheticModule: AddSyntheticModule::<Impl, IMPL_OFFSET>,
            AddSyntheticModuleWide: AddSyntheticModuleWide::<Impl, IMPL_OFFSET>,
            RemoveSyntheticModule: RemoveSyntheticModule::<Impl, IMPL_OFFSET>,
            GetCurrentScopeFrameIndex: GetCurrentScopeFrameIndex::<Impl, IMPL_OFFSET>,
            SetScopeFrameByIndex: SetScopeFrameByIndex::<Impl, IMPL_OFFSET>,
            SetScopeFromJitDebugInfo: SetScopeFromJitDebugInfo::<Impl, IMPL_OFFSET>,
            SetScopeFromStoredEvent: SetScopeFromStoredEvent::<Impl, IMPL_OFFSET>,
            OutputSymbolByOffset: OutputSymbolByOffset::<Impl, IMPL_OFFSET>,
            GetFunctionEntryByOffset: GetFunctionEntryByOffset::<Impl, IMPL_OFFSET>,
            GetFieldTypeAndOffset: GetFieldTypeAndOffset::<Impl, IMPL_OFFSET>,
            GetFieldTypeAndOffsetWide: GetFieldTypeAndOffsetWide::<Impl, IMPL_OFFSET>,
            AddSyntheticSymbol: AddSyntheticSymbol::<Impl, IMPL_OFFSET>,
            AddSyntheticSymbolWide: AddSyntheticSymbolWide::<Impl, IMPL_OFFSET>,
            RemoveSyntheticSymbol: RemoveSyntheticSymbol::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByOffset: GetSymbolEntriesByOffset::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByName: GetSymbolEntriesByName::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByNameWide: GetSymbolEntriesByNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolEntryByToken: GetSymbolEntryByToken::<Impl, IMPL_OFFSET>,
            GetSymbolEntryInformation: GetSymbolEntryInformation::<Impl, IMPL_OFFSET>,
            GetSymbolEntryString: GetSymbolEntryString::<Impl, IMPL_OFFSET>,
            GetSymbolEntryStringWide: GetSymbolEntryStringWide::<Impl, IMPL_OFFSET>,
            GetSymbolEntryOffsetRegions: GetSymbolEntryOffsetRegions::<Impl, IMPL_OFFSET>,
            GetSymbolEntryBySymbolEntry: GetSymbolEntryBySymbolEntry::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByOffset: GetSourceEntriesByOffset::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByLine: GetSourceEntriesByLine::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByLineWide: GetSourceEntriesByLineWide::<Impl, IMPL_OFFSET>,
            GetSourceEntryString: GetSourceEntryString::<Impl, IMPL_OFFSET>,
            GetSourceEntryStringWide: GetSourceEntryStringWide::<Impl, IMPL_OFFSET>,
            GetSourceEntryOffsetRegions: GetSourceEntryOffsetRegions::<Impl, IMPL_OFFSET>,
            GetSourceEntryBySourceEntry: GetSourceEntryBySourceEntry::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSymbols3 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbols4Impl: Sized {
    fn GetSymbolOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddSymbolOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveSymbolOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetSymbolOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetNameByOffset(&mut self, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByName(&mut self, symbol: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetNearNameByOffset(&mut self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetLineByOffset(&mut self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByLine(&mut self, line: u32, file: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetNumberModules(&mut self, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleByIndex(&mut self, index: u32) -> ::windows::core::Result<u64>;
    fn GetModuleByModuleName(&mut self, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleByOffset(&mut self, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleNames(&mut self, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleParameters(&mut self, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetSymbolModule(&mut self, symbol: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetTypeName(&mut self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTypeId(&mut self, module: u64, name: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u32>;
    fn GetTypeSize(&mut self, module: u64, typeid: u32) -> ::windows::core::Result<u32>;
    fn GetFieldOffset(&mut self, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u32>;
    fn GetSymbolTypeId(&mut self, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetTypeId(&mut self, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::Result<()>;
    fn ReadTypedDataVirtual(&mut self, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteTypedDataVirtual(&mut self, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn OutputTypedDataVirtual(&mut self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::Result<()>;
    fn ReadTypedDataPhysical(&mut self, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteTypedDataPhysical(&mut self, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn OutputTypedDataPhysical(&mut self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetScope(&mut self, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::Result<()>;
    fn SetScope(&mut self, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::Result<()>;
    fn ResetScope(&mut self) -> ::windows::core::Result<()>;
    fn GetScopeSymbolGroup(&mut self, flags: u32, update: ::core::option::Option<IDebugSymbolGroup>) -> ::windows::core::Result<IDebugSymbolGroup>;
    fn CreateSymbolGroup(&mut self) -> ::windows::core::Result<IDebugSymbolGroup>;
    fn StartSymbolMatch(&mut self, pattern: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetNextSymbolMatch(&mut self, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::Result<()>;
    fn EndSymbolMatch(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn Reload(&mut self, module: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSymbolPath(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSymbolPath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AppendSymbolPath(&mut self, addition: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetImagePath(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetImagePath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AppendImagePath(&mut self, addition: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSourcePath(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourcePathElement(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSourcePath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AppendSourcePath(&mut self, addition: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn FindSourceFile(&mut self, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceFileLineOffsets(&mut self, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleVersionInformation(&mut self, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleNameString(&mut self, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetConstantName(&mut self, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetFieldName(&mut self, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTypeOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddTypeOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveTypeOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetTypeOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetNameByOffsetWide(&mut self, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByNameWide(&mut self, symbol: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn GetNearNameByOffsetWide(&mut self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetLineByOffsetWide(&mut self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByLineWide(&mut self, line: u32, file: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn GetModuleByModuleNameWide(&mut self, name: super::super::super::Foundation::PWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetSymbolModuleWide(&mut self, symbol: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn GetTypeNameWide(&mut self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTypeIdWide(&mut self, module: u64, name: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u32>;
    fn GetFieldOffsetWide(&mut self, module: u64, typeid: u32, field: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u32>;
    fn GetSymbolTypeIdWide(&mut self, symbol: super::super::super::Foundation::PWSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::Result<()>;
    fn GetScopeSymbolGroup2(&mut self, flags: u32, update: ::core::option::Option<IDebugSymbolGroup2>) -> ::windows::core::Result<IDebugSymbolGroup2>;
    fn CreateSymbolGroup2(&mut self) -> ::windows::core::Result<IDebugSymbolGroup2>;
    fn StartSymbolMatchWide(&mut self, pattern: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn GetNextSymbolMatchWide(&mut self, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::Result<()>;
    fn ReloadWide(&mut self, module: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetSymbolPathWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSymbolPathWide(&mut self, path: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AppendSymbolPathWide(&mut self, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetImagePathWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetImagePathWide(&mut self, path: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AppendImagePathWide(&mut self, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetSourcePathWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourcePathElementWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSourcePathWide(&mut self, path: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AppendSourcePathWide(&mut self, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn FindSourceFileWide(&mut self, startelement: u32, file: super::super::super::Foundation::PWSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceFileLineOffsetsWide(&mut self, file: super::super::super::Foundation::PWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleVersionInformationWide(&mut self, index: u32, base: u64, item: super::super::super::Foundation::PWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleNameStringWide(&mut self, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetConstantNameWide(&mut self, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetFieldNameWide(&mut self, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn IsManagedModule(&mut self, index: u32, base: u64) -> ::windows::core::Result<()>;
    fn GetModuleByModuleName2(&mut self, name: super::super::super::Foundation::PSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleByModuleName2Wide(&mut self, name: super::super::super::Foundation::PWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleByOffset2(&mut self, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn AddSyntheticModule(&mut self, base: u64, size: u32, imagepath: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn AddSyntheticModuleWide(&mut self, base: u64, size: u32, imagepath: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn RemoveSyntheticModule(&mut self, base: u64) -> ::windows::core::Result<()>;
    fn GetCurrentScopeFrameIndex(&mut self) -> ::windows::core::Result<u32>;
    fn SetScopeFrameByIndex(&mut self, index: u32) -> ::windows::core::Result<()>;
    fn SetScopeFromJitDebugInfo(&mut self, outputcontrol: u32, infooffset: u64) -> ::windows::core::Result<()>;
    fn SetScopeFromStoredEvent(&mut self) -> ::windows::core::Result<()>;
    fn OutputSymbolByOffset(&mut self, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::core::Result<()>;
    fn GetFunctionEntryByOffset(&mut self, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::core::Result<()>;
    fn GetFieldTypeAndOffset(&mut self, module: u64, containertypeid: u32, field: super::super::super::Foundation::PSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::Result<()>;
    fn GetFieldTypeAndOffsetWide(&mut self, module: u64, containertypeid: u32, field: super::super::super::Foundation::PWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::Result<()>;
    fn AddSyntheticSymbol(&mut self, offset: u64, size: u32, name: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<DEBUG_MODULE_AND_ID>;
    fn AddSyntheticSymbolWide(&mut self, offset: u64, size: u32, name: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<DEBUG_MODULE_AND_ID>;
    fn RemoveSyntheticSymbol(&mut self, id: *const DEBUG_MODULE_AND_ID) -> ::windows::core::Result<()>;
    fn GetSymbolEntriesByOffset(&mut self, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntriesByName(&mut self, symbol: super::super::super::Foundation::PSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntriesByNameWide(&mut self, symbol: super::super::super::Foundation::PWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntryByToken(&mut self, modulebase: u64, token: u32) -> ::windows::core::Result<DEBUG_MODULE_AND_ID>;
    fn GetSymbolEntryInformation(&mut self, id: *const DEBUG_MODULE_AND_ID) -> ::windows::core::Result<DEBUG_SYMBOL_ENTRY>;
    fn GetSymbolEntryString(&mut self, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntryStringWide(&mut self, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntryOffsetRegions(&mut self, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntryBySymbolEntry(&mut self, fromid: *const DEBUG_MODULE_AND_ID, flags: u32) -> ::windows::core::Result<DEBUG_MODULE_AND_ID>;
    fn GetSourceEntriesByOffset(&mut self, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntriesByLine(&mut self, line: u32, file: super::super::super::Foundation::PSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntriesByLineWide(&mut self, line: u32, file: super::super::super::Foundation::PWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntryString(&mut self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntryStringWide(&mut self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntryOffsetRegions(&mut self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntryBySourceEntry(&mut self, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32) -> ::windows::core::Result<DEBUG_SYMBOL_SOURCE_ENTRY>;
    fn GetScopeEx(&mut self, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::Result<()>;
    fn SetScopeEx(&mut self, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::Result<()>;
    fn GetNameByInlineContext(&mut self, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetNameByInlineContextWide(&mut self, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetLineByInlineContext(&mut self, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetLineByInlineContextWide(&mut self, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn OutputSymbolByInlineContext(&mut self, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSymbols4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSymbols4Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSymbols4Vtbl {
        unsafe extern "system" fn GetSymbolOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSymbolOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddSymbolOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveSymbolOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSymbolOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetSymbolOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSymbolOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetNameByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNameByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByName<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByName(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNearNameByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetLineByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLineByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByLine<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLine(::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberModules<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNumberModules(::core::mem::transmute_copy(&loaded), ::core::mem::transmute_copy(&unloaded)).into()
        }
        unsafe extern "system" fn GetModuleByIndex<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetModuleByIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *base = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByModuleName(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleNames<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .GetModuleNames(
                    ::core::mem::transmute_copy(&index),
                    ::core::mem::transmute_copy(&base),
                    ::core::mem::transmute_copy(&imagenamebuffer),
                    ::core::mem::transmute_copy(&imagenamebuffersize),
                    ::core::mem::transmute_copy(&imagenamesize),
                    ::core::mem::transmute_copy(&modulenamebuffer),
                    ::core::mem::transmute_copy(&modulenamebuffersize),
                    ::core::mem::transmute_copy(&modulenamesize),
                    ::core::mem::transmute_copy(&loadedimagenamebuffer),
                    ::core::mem::transmute_copy(&loadedimagenamebuffersize),
                    ::core::mem::transmute_copy(&loadedimagenamesize),
                )
                .into()
        }
        unsafe extern "system" fn GetModuleParameters<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&bases), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetSymbolModule<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolModule(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *base = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeName<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTypeName(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetTypeId<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeId(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *typeid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeSize<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeSize(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    *size = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFieldOffset(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeId<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolTypeId(::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetOffsetTypeId<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOffsetTypeId(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadTypedDataVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTypedDataVirtual(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadTypedDataPhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataPhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTypedDataPhysical(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetScope<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScope(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into()
        }
        unsafe extern "system" fn SetScope<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScope(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into()
        }
        unsafe extern "system" fn ResetScope<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ResetScope().into()
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup(::core::mem::transmute_copy(&flags), ::core::mem::transmute(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    *symbols = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup() {
                ::core::result::Result::Ok(ok__) => {
                    *group = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatch<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatch(::core::mem::transmute_copy(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatch<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNextSymbolMatch(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn EndSymbolMatch<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndSymbolMatch(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn Reload<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reload(::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetSymbolPath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolPath(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetSymbolPath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSymbolPath(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSymbolPath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSymbolPath(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetImagePath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetImagePath(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetImagePath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetImagePath(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendImagePath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendImagePath(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetSourcePath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePath(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn GetSourcePathElement<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePathElement(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into()
        }
        unsafe extern "system" fn SetSourcePath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSourcePath(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSourcePath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSourcePath(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn FindSourceFile<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FindSourceFile(::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into()
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceFileLineOffsets(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into()
        }
        unsafe extern "system" fn GetModuleVersionInformation<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleVersionInformation(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&item), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&verinfosize)).into()
        }
        unsafe extern "system" fn GetModuleNameString<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleNameString(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetConstantName<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetConstantName(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetFieldName<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFieldName(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&fieldindex), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetTypeOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddTypeOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddTypeOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveTypeOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveTypeOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetTypeOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTypeOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetNameByOffsetWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNameByOffsetWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByNameWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByNameWide(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffsetWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNearNameByOffsetWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetLineByOffsetWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLineByOffsetWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByLineWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLineWide(::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleNameWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByModuleNameWide(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetSymbolModuleWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolModuleWide(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *base = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeNameWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTypeNameWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetTypeIdWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PWSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeIdWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *typeid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffsetWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PWSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFieldOffsetWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeIdWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolTypeIdWide(::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetScopeSymbolGroup2<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup2(::core::mem::transmute_copy(&flags), ::core::mem::transmute(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    *symbols = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup2<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup2() {
                ::core::result::Result::Ok(ok__) => {
                    *group = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatchWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatchWide(::core::mem::transmute_copy(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatchWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNextSymbolMatchWide(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn ReloadWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReloadWide(::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetSymbolPathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolPathWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetSymbolPathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSymbolPathWide(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSymbolPathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSymbolPathWide(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetImagePathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetImagePathWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetImagePathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetImagePathWide(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendImagePathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendImagePathWide(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetSourcePathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePathWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn GetSourcePathElementWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePathElementWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into()
        }
        unsafe extern "system" fn SetSourcePathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSourcePathWide(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSourcePathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSourcePathWide(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn FindSourceFileWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PWSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FindSourceFileWide(::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into()
        }
        unsafe extern "system" fn GetSourceFileLineOffsetsWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceFileLineOffsetsWide(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into()
        }
        unsafe extern "system" fn GetModuleVersionInformationWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleVersionInformationWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&item), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&verinfosize)).into()
        }
        unsafe extern "system" fn GetModuleNameStringWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleNameStringWide(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetConstantNameWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetConstantNameWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetFieldNameWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFieldNameWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&fieldindex), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn IsManagedModule<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsManagedModule(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleByModuleName2<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByModuleName2(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleByModuleName2Wide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByModuleName2Wide(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleByOffset2<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByOffset2(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn AddSyntheticModule<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddSyntheticModule(::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&imagepath), ::core::mem::transmute_copy(&modulename), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn AddSyntheticModuleWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddSyntheticModuleWide(::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&imagepath), ::core::mem::transmute_copy(&modulename), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn RemoveSyntheticModule<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSyntheticModule(::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndex<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentScopeFrameIndex() {
                ::core::result::Result::Ok(ok__) => {
                    *index = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeFrameByIndex<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScopeFrameByIndex(::core::mem::transmute_copy(&index)).into()
        }
        unsafe extern "system" fn SetScopeFromJitDebugInfo<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, infooffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScopeFromJitDebugInfo(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&infooffset)).into()
        }
        unsafe extern "system" fn SetScopeFromStoredEvent<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScopeFromStoredEvent().into()
        }
        unsafe extern "system" fn OutputSymbolByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputSymbolByOffset(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn GetFunctionEntryByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFunctionEntryByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bufferneeded)).into()
        }
        unsafe extern "system" fn GetFieldTypeAndOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFieldTypeAndOffset(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&containertypeid), ::core::mem::transmute_copy(&field), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn GetFieldTypeAndOffsetWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFieldTypeAndOffsetWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&containertypeid), ::core::mem::transmute_copy(&field), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn AddSyntheticSymbol<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddSyntheticSymbol(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSyntheticSymbolWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddSyntheticSymbolWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSyntheticSymbol<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSyntheticSymbol(::core::mem::transmute_copy(&id)).into()
        }
        unsafe extern "system" fn GetSymbolEntriesByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntriesByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&displacements), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into()
        }
        unsafe extern "system" fn GetSymbolEntriesByName<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntriesByName(::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into()
        }
        unsafe extern "system" fn GetSymbolEntriesByNameWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntriesByNameWide(::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into()
        }
        unsafe extern "system" fn GetSymbolEntryByToken<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modulebase: u64, token: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryByToken(::core::mem::transmute_copy(&modulebase), ::core::mem::transmute_copy(&token)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryInformation(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *info = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryString<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntryString(::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSymbolEntryStringWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntryStringWide(::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSymbolEntryOffsetRegions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntryOffsetRegions(::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&regions), ::core::mem::transmute_copy(&regionscount), ::core::mem::transmute_copy(&regionsavail)).into()
        }
        unsafe extern "system" fn GetSymbolEntryBySymbolEntry<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fromid: *const DEBUG_MODULE_AND_ID, flags: u32, toid: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryBySymbolEntry(::core::mem::transmute_copy(&fromid), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *toid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntriesByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntriesByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into()
        }
        unsafe extern "system" fn GetSourceEntriesByLine<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntriesByLine(::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into()
        }
        unsafe extern "system" fn GetSourceEntriesByLineWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntriesByLineWide(::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into()
        }
        unsafe extern "system" fn GetSourceEntryString<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntryString(::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSourceEntryStringWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntryStringWide(::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSourceEntryOffsetRegions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntryOffsetRegions(::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&regions), ::core::mem::transmute_copy(&regionscount), ::core::mem::transmute_copy(&regionsavail)).into()
        }
        unsafe extern "system" fn GetSourceEntryBySourceEntry<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSourceEntryBySourceEntry(::core::mem::transmute_copy(&fromentry), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *toentry = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScopeEx<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScopeEx(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into()
        }
        unsafe extern "system" fn SetScopeEx<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScopeEx(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into()
        }
        unsafe extern "system" fn GetNameByInlineContext<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNameByInlineContext(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetNameByInlineContextWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNameByInlineContextWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetLineByInlineContext<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLineByInlineContext(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetLineByInlineContextWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLineByInlineContextWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn OutputSymbolByInlineContext<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputSymbolByInlineContext(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetSymbolOptions: GetSymbolOptions::<Impl, IMPL_OFFSET>,
            AddSymbolOptions: AddSymbolOptions::<Impl, IMPL_OFFSET>,
            RemoveSymbolOptions: RemoveSymbolOptions::<Impl, IMPL_OFFSET>,
            SetSymbolOptions: SetSymbolOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffset: GetNameByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByName: GetOffsetByName::<Impl, IMPL_OFFSET>,
            GetNearNameByOffset: GetNearNameByOffset::<Impl, IMPL_OFFSET>,
            GetLineByOffset: GetLineByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByLine: GetOffsetByLine::<Impl, IMPL_OFFSET>,
            GetNumberModules: GetNumberModules::<Impl, IMPL_OFFSET>,
            GetModuleByIndex: GetModuleByIndex::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName: GetModuleByModuleName::<Impl, IMPL_OFFSET>,
            GetModuleByOffset: GetModuleByOffset::<Impl, IMPL_OFFSET>,
            GetModuleNames: GetModuleNames::<Impl, IMPL_OFFSET>,
            GetModuleParameters: GetModuleParameters::<Impl, IMPL_OFFSET>,
            GetSymbolModule: GetSymbolModule::<Impl, IMPL_OFFSET>,
            GetTypeName: GetTypeName::<Impl, IMPL_OFFSET>,
            GetTypeId: GetTypeId::<Impl, IMPL_OFFSET>,
            GetTypeSize: GetTypeSize::<Impl, IMPL_OFFSET>,
            GetFieldOffset: GetFieldOffset::<Impl, IMPL_OFFSET>,
            GetSymbolTypeId: GetSymbolTypeId::<Impl, IMPL_OFFSET>,
            GetOffsetTypeId: GetOffsetTypeId::<Impl, IMPL_OFFSET>,
            ReadTypedDataVirtual: ReadTypedDataVirtual::<Impl, IMPL_OFFSET>,
            WriteTypedDataVirtual: WriteTypedDataVirtual::<Impl, IMPL_OFFSET>,
            OutputTypedDataVirtual: OutputTypedDataVirtual::<Impl, IMPL_OFFSET>,
            ReadTypedDataPhysical: ReadTypedDataPhysical::<Impl, IMPL_OFFSET>,
            WriteTypedDataPhysical: WriteTypedDataPhysical::<Impl, IMPL_OFFSET>,
            OutputTypedDataPhysical: OutputTypedDataPhysical::<Impl, IMPL_OFFSET>,
            GetScope: GetScope::<Impl, IMPL_OFFSET>,
            SetScope: SetScope::<Impl, IMPL_OFFSET>,
            ResetScope: ResetScope::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup: GetScopeSymbolGroup::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup: CreateSymbolGroup::<Impl, IMPL_OFFSET>,
            StartSymbolMatch: StartSymbolMatch::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatch: GetNextSymbolMatch::<Impl, IMPL_OFFSET>,
            EndSymbolMatch: EndSymbolMatch::<Impl, IMPL_OFFSET>,
            Reload: Reload::<Impl, IMPL_OFFSET>,
            GetSymbolPath: GetSymbolPath::<Impl, IMPL_OFFSET>,
            SetSymbolPath: SetSymbolPath::<Impl, IMPL_OFFSET>,
            AppendSymbolPath: AppendSymbolPath::<Impl, IMPL_OFFSET>,
            GetImagePath: GetImagePath::<Impl, IMPL_OFFSET>,
            SetImagePath: SetImagePath::<Impl, IMPL_OFFSET>,
            AppendImagePath: AppendImagePath::<Impl, IMPL_OFFSET>,
            GetSourcePath: GetSourcePath::<Impl, IMPL_OFFSET>,
            GetSourcePathElement: GetSourcePathElement::<Impl, IMPL_OFFSET>,
            SetSourcePath: SetSourcePath::<Impl, IMPL_OFFSET>,
            AppendSourcePath: AppendSourcePath::<Impl, IMPL_OFFSET>,
            FindSourceFile: FindSourceFile::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsets: GetSourceFileLineOffsets::<Impl, IMPL_OFFSET>,
            GetModuleVersionInformation: GetModuleVersionInformation::<Impl, IMPL_OFFSET>,
            GetModuleNameString: GetModuleNameString::<Impl, IMPL_OFFSET>,
            GetConstantName: GetConstantName::<Impl, IMPL_OFFSET>,
            GetFieldName: GetFieldName::<Impl, IMPL_OFFSET>,
            GetTypeOptions: GetTypeOptions::<Impl, IMPL_OFFSET>,
            AddTypeOptions: AddTypeOptions::<Impl, IMPL_OFFSET>,
            RemoveTypeOptions: RemoveTypeOptions::<Impl, IMPL_OFFSET>,
            SetTypeOptions: SetTypeOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffsetWide: GetNameByOffsetWide::<Impl, IMPL_OFFSET>,
            GetOffsetByNameWide: GetOffsetByNameWide::<Impl, IMPL_OFFSET>,
            GetNearNameByOffsetWide: GetNearNameByOffsetWide::<Impl, IMPL_OFFSET>,
            GetLineByOffsetWide: GetLineByOffsetWide::<Impl, IMPL_OFFSET>,
            GetOffsetByLineWide: GetOffsetByLineWide::<Impl, IMPL_OFFSET>,
            GetModuleByModuleNameWide: GetModuleByModuleNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolModuleWide: GetSymbolModuleWide::<Impl, IMPL_OFFSET>,
            GetTypeNameWide: GetTypeNameWide::<Impl, IMPL_OFFSET>,
            GetTypeIdWide: GetTypeIdWide::<Impl, IMPL_OFFSET>,
            GetFieldOffsetWide: GetFieldOffsetWide::<Impl, IMPL_OFFSET>,
            GetSymbolTypeIdWide: GetSymbolTypeIdWide::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup2: GetScopeSymbolGroup2::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup2: CreateSymbolGroup2::<Impl, IMPL_OFFSET>,
            StartSymbolMatchWide: StartSymbolMatchWide::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatchWide: GetNextSymbolMatchWide::<Impl, IMPL_OFFSET>,
            ReloadWide: ReloadWide::<Impl, IMPL_OFFSET>,
            GetSymbolPathWide: GetSymbolPathWide::<Impl, IMPL_OFFSET>,
            SetSymbolPathWide: SetSymbolPathWide::<Impl, IMPL_OFFSET>,
            AppendSymbolPathWide: AppendSymbolPathWide::<Impl, IMPL_OFFSET>,
            GetImagePathWide: GetImagePathWide::<Impl, IMPL_OFFSET>,
            SetImagePathWide: SetImagePathWide::<Impl, IMPL_OFFSET>,
            AppendImagePathWide: AppendImagePathWide::<Impl, IMPL_OFFSET>,
            GetSourcePathWide: GetSourcePathWide::<Impl, IMPL_OFFSET>,
            GetSourcePathElementWide: GetSourcePathElementWide::<Impl, IMPL_OFFSET>,
            SetSourcePathWide: SetSourcePathWide::<Impl, IMPL_OFFSET>,
            AppendSourcePathWide: AppendSourcePathWide::<Impl, IMPL_OFFSET>,
            FindSourceFileWide: FindSourceFileWide::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsetsWide: GetSourceFileLineOffsetsWide::<Impl, IMPL_OFFSET>,
            GetModuleVersionInformationWide: GetModuleVersionInformationWide::<Impl, IMPL_OFFSET>,
            GetModuleNameStringWide: GetModuleNameStringWide::<Impl, IMPL_OFFSET>,
            GetConstantNameWide: GetConstantNameWide::<Impl, IMPL_OFFSET>,
            GetFieldNameWide: GetFieldNameWide::<Impl, IMPL_OFFSET>,
            IsManagedModule: IsManagedModule::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName2: GetModuleByModuleName2::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName2Wide: GetModuleByModuleName2Wide::<Impl, IMPL_OFFSET>,
            GetModuleByOffset2: GetModuleByOffset2::<Impl, IMPL_OFFSET>,
            AddSyntheticModule: AddSyntheticModule::<Impl, IMPL_OFFSET>,
            AddSyntheticModuleWide: AddSyntheticModuleWide::<Impl, IMPL_OFFSET>,
            RemoveSyntheticModule: RemoveSyntheticModule::<Impl, IMPL_OFFSET>,
            GetCurrentScopeFrameIndex: GetCurrentScopeFrameIndex::<Impl, IMPL_OFFSET>,
            SetScopeFrameByIndex: SetScopeFrameByIndex::<Impl, IMPL_OFFSET>,
            SetScopeFromJitDebugInfo: SetScopeFromJitDebugInfo::<Impl, IMPL_OFFSET>,
            SetScopeFromStoredEvent: SetScopeFromStoredEvent::<Impl, IMPL_OFFSET>,
            OutputSymbolByOffset: OutputSymbolByOffset::<Impl, IMPL_OFFSET>,
            GetFunctionEntryByOffset: GetFunctionEntryByOffset::<Impl, IMPL_OFFSET>,
            GetFieldTypeAndOffset: GetFieldTypeAndOffset::<Impl, IMPL_OFFSET>,
            GetFieldTypeAndOffsetWide: GetFieldTypeAndOffsetWide::<Impl, IMPL_OFFSET>,
            AddSyntheticSymbol: AddSyntheticSymbol::<Impl, IMPL_OFFSET>,
            AddSyntheticSymbolWide: AddSyntheticSymbolWide::<Impl, IMPL_OFFSET>,
            RemoveSyntheticSymbol: RemoveSyntheticSymbol::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByOffset: GetSymbolEntriesByOffset::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByName: GetSymbolEntriesByName::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByNameWide: GetSymbolEntriesByNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolEntryByToken: GetSymbolEntryByToken::<Impl, IMPL_OFFSET>,
            GetSymbolEntryInformation: GetSymbolEntryInformation::<Impl, IMPL_OFFSET>,
            GetSymbolEntryString: GetSymbolEntryString::<Impl, IMPL_OFFSET>,
            GetSymbolEntryStringWide: GetSymbolEntryStringWide::<Impl, IMPL_OFFSET>,
            GetSymbolEntryOffsetRegions: GetSymbolEntryOffsetRegions::<Impl, IMPL_OFFSET>,
            GetSymbolEntryBySymbolEntry: GetSymbolEntryBySymbolEntry::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByOffset: GetSourceEntriesByOffset::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByLine: GetSourceEntriesByLine::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByLineWide: GetSourceEntriesByLineWide::<Impl, IMPL_OFFSET>,
            GetSourceEntryString: GetSourceEntryString::<Impl, IMPL_OFFSET>,
            GetSourceEntryStringWide: GetSourceEntryStringWide::<Impl, IMPL_OFFSET>,
            GetSourceEntryOffsetRegions: GetSourceEntryOffsetRegions::<Impl, IMPL_OFFSET>,
            GetSourceEntryBySourceEntry: GetSourceEntryBySourceEntry::<Impl, IMPL_OFFSET>,
            GetScopeEx: GetScopeEx::<Impl, IMPL_OFFSET>,
            SetScopeEx: SetScopeEx::<Impl, IMPL_OFFSET>,
            GetNameByInlineContext: GetNameByInlineContext::<Impl, IMPL_OFFSET>,
            GetNameByInlineContextWide: GetNameByInlineContextWide::<Impl, IMPL_OFFSET>,
            GetLineByInlineContext: GetLineByInlineContext::<Impl, IMPL_OFFSET>,
            GetLineByInlineContextWide: GetLineByInlineContextWide::<Impl, IMPL_OFFSET>,
            OutputSymbolByInlineContext: OutputSymbolByInlineContext::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSymbols4 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbols5Impl: Sized {
    fn GetSymbolOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddSymbolOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveSymbolOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetSymbolOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetNameByOffset(&mut self, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByName(&mut self, symbol: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetNearNameByOffset(&mut self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetLineByOffset(&mut self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByLine(&mut self, line: u32, file: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetNumberModules(&mut self, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleByIndex(&mut self, index: u32) -> ::windows::core::Result<u64>;
    fn GetModuleByModuleName(&mut self, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleByOffset(&mut self, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleNames(&mut self, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleParameters(&mut self, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::Result<()>;
    fn GetSymbolModule(&mut self, symbol: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetTypeName(&mut self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTypeId(&mut self, module: u64, name: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u32>;
    fn GetTypeSize(&mut self, module: u64, typeid: u32) -> ::windows::core::Result<u32>;
    fn GetFieldOffset(&mut self, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u32>;
    fn GetSymbolTypeId(&mut self, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetTypeId(&mut self, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::Result<()>;
    fn ReadTypedDataVirtual(&mut self, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteTypedDataVirtual(&mut self, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn OutputTypedDataVirtual(&mut self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::Result<()>;
    fn ReadTypedDataPhysical(&mut self, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteTypedDataPhysical(&mut self, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32) -> ::windows::core::Result<u32>;
    fn OutputTypedDataPhysical(&mut self, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::Result<()>;
    fn GetScope(&mut self, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::Result<()>;
    fn SetScope(&mut self, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::Result<()>;
    fn ResetScope(&mut self) -> ::windows::core::Result<()>;
    fn GetScopeSymbolGroup(&mut self, flags: u32, update: ::core::option::Option<IDebugSymbolGroup>) -> ::windows::core::Result<IDebugSymbolGroup>;
    fn CreateSymbolGroup(&mut self) -> ::windows::core::Result<IDebugSymbolGroup>;
    fn StartSymbolMatch(&mut self, pattern: super::super::super::Foundation::PSTR) -> ::windows::core::Result<u64>;
    fn GetNextSymbolMatch(&mut self, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::Result<()>;
    fn EndSymbolMatch(&mut self, handle: u64) -> ::windows::core::Result<()>;
    fn Reload(&mut self, module: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSymbolPath(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSymbolPath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AppendSymbolPath(&mut self, addition: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetImagePath(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetImagePath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AppendImagePath(&mut self, addition: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn GetSourcePath(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourcePathElement(&mut self, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSourcePath(&mut self, path: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn AppendSourcePath(&mut self, addition: super::super::super::Foundation::PSTR) -> ::windows::core::Result<()>;
    fn FindSourceFile(&mut self, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceFileLineOffsets(&mut self, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleVersionInformation(&mut self, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleNameString(&mut self, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetConstantName(&mut self, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetFieldName(&mut self, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTypeOptions(&mut self) -> ::windows::core::Result<u32>;
    fn AddTypeOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn RemoveTypeOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn SetTypeOptions(&mut self, options: u32) -> ::windows::core::Result<()>;
    fn GetNameByOffsetWide(&mut self, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByNameWide(&mut self, symbol: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn GetNearNameByOffsetWide(&mut self, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetLineByOffsetWide(&mut self, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetOffsetByLineWide(&mut self, line: u32, file: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn GetModuleByModuleNameWide(&mut self, name: super::super::super::Foundation::PWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetSymbolModuleWide(&mut self, symbol: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn GetTypeNameWide(&mut self, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetTypeIdWide(&mut self, module: u64, name: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u32>;
    fn GetFieldOffsetWide(&mut self, module: u64, typeid: u32, field: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u32>;
    fn GetSymbolTypeIdWide(&mut self, symbol: super::super::super::Foundation::PWSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::Result<()>;
    fn GetScopeSymbolGroup2(&mut self, flags: u32, update: ::core::option::Option<IDebugSymbolGroup2>) -> ::windows::core::Result<IDebugSymbolGroup2>;
    fn CreateSymbolGroup2(&mut self) -> ::windows::core::Result<IDebugSymbolGroup2>;
    fn StartSymbolMatchWide(&mut self, pattern: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<u64>;
    fn GetNextSymbolMatchWide(&mut self, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::Result<()>;
    fn ReloadWide(&mut self, module: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetSymbolPathWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSymbolPathWide(&mut self, path: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AppendSymbolPathWide(&mut self, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetImagePathWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetImagePathWide(&mut self, path: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AppendImagePathWide(&mut self, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetSourcePathWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourcePathElementWide(&mut self, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::Result<()>;
    fn SetSourcePathWide(&mut self, path: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn AppendSourcePathWide(&mut self, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn FindSourceFileWide(&mut self, startelement: u32, file: super::super::super::Foundation::PWSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceFileLineOffsetsWide(&mut self, file: super::super::super::Foundation::PWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleVersionInformationWide(&mut self, index: u32, base: u64, item: super::super::super::Foundation::PWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::Result<()>;
    fn GetModuleNameStringWide(&mut self, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetConstantNameWide(&mut self, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetFieldNameWide(&mut self, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn IsManagedModule(&mut self, index: u32, base: u64) -> ::windows::core::Result<()>;
    fn GetModuleByModuleName2(&mut self, name: super::super::super::Foundation::PSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleByModuleName2Wide(&mut self, name: super::super::super::Foundation::PWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn GetModuleByOffset2(&mut self, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::Result<()>;
    fn AddSyntheticModule(&mut self, base: u64, size: u32, imagepath: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<()>;
    fn AddSyntheticModuleWide(&mut self, base: u64, size: u32, imagepath: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<()>;
    fn RemoveSyntheticModule(&mut self, base: u64) -> ::windows::core::Result<()>;
    fn GetCurrentScopeFrameIndex(&mut self) -> ::windows::core::Result<u32>;
    fn SetScopeFrameByIndex(&mut self, index: u32) -> ::windows::core::Result<()>;
    fn SetScopeFromJitDebugInfo(&mut self, outputcontrol: u32, infooffset: u64) -> ::windows::core::Result<()>;
    fn SetScopeFromStoredEvent(&mut self) -> ::windows::core::Result<()>;
    fn OutputSymbolByOffset(&mut self, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::core::Result<()>;
    fn GetFunctionEntryByOffset(&mut self, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::core::Result<()>;
    fn GetFieldTypeAndOffset(&mut self, module: u64, containertypeid: u32, field: super::super::super::Foundation::PSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::Result<()>;
    fn GetFieldTypeAndOffsetWide(&mut self, module: u64, containertypeid: u32, field: super::super::super::Foundation::PWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::Result<()>;
    fn AddSyntheticSymbol(&mut self, offset: u64, size: u32, name: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::Result<DEBUG_MODULE_AND_ID>;
    fn AddSyntheticSymbolWide(&mut self, offset: u64, size: u32, name: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::Result<DEBUG_MODULE_AND_ID>;
    fn RemoveSyntheticSymbol(&mut self, id: *const DEBUG_MODULE_AND_ID) -> ::windows::core::Result<()>;
    fn GetSymbolEntriesByOffset(&mut self, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntriesByName(&mut self, symbol: super::super::super::Foundation::PSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntriesByNameWide(&mut self, symbol: super::super::super::Foundation::PWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntryByToken(&mut self, modulebase: u64, token: u32) -> ::windows::core::Result<DEBUG_MODULE_AND_ID>;
    fn GetSymbolEntryInformation(&mut self, id: *const DEBUG_MODULE_AND_ID) -> ::windows::core::Result<DEBUG_SYMBOL_ENTRY>;
    fn GetSymbolEntryString(&mut self, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntryStringWide(&mut self, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntryOffsetRegions(&mut self, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::Result<()>;
    fn GetSymbolEntryBySymbolEntry(&mut self, fromid: *const DEBUG_MODULE_AND_ID, flags: u32) -> ::windows::core::Result<DEBUG_MODULE_AND_ID>;
    fn GetSourceEntriesByOffset(&mut self, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntriesByLine(&mut self, line: u32, file: super::super::super::Foundation::PSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntriesByLineWide(&mut self, line: u32, file: super::super::super::Foundation::PWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntryString(&mut self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntryStringWide(&mut self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntryOffsetRegions(&mut self, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::Result<()>;
    fn GetSourceEntryBySourceEntry(&mut self, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32) -> ::windows::core::Result<DEBUG_SYMBOL_SOURCE_ENTRY>;
    fn GetScopeEx(&mut self, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::Result<()>;
    fn SetScopeEx(&mut self, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::Result<()>;
    fn GetNameByInlineContext(&mut self, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetNameByInlineContextWide(&mut self, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetLineByInlineContext(&mut self, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn GetLineByInlineContextWide(&mut self, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::Result<()>;
    fn OutputSymbolByInlineContext(&mut self, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows::core::Result<()>;
    fn GetCurrentScopeFrameIndexEx(&mut self, flags: u32) -> ::windows::core::Result<u32>;
    fn SetScopeFrameByIndexEx(&mut self, flags: u32, index: u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSymbols5Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSymbols5Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSymbols5Vtbl {
        unsafe extern "system" fn GetSymbolOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSymbolOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddSymbolOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveSymbolOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSymbolOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetSymbolOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSymbolOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetNameByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNameByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByName<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByName(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNearNameByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetLineByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLineByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByLine<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLine(::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberModules<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNumberModules(::core::mem::transmute_copy(&loaded), ::core::mem::transmute_copy(&unloaded)).into()
        }
        unsafe extern "system" fn GetModuleByIndex<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetModuleByIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *base = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByModuleName(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleNames<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this)
                .GetModuleNames(
                    ::core::mem::transmute_copy(&index),
                    ::core::mem::transmute_copy(&base),
                    ::core::mem::transmute_copy(&imagenamebuffer),
                    ::core::mem::transmute_copy(&imagenamebuffersize),
                    ::core::mem::transmute_copy(&imagenamesize),
                    ::core::mem::transmute_copy(&modulenamebuffer),
                    ::core::mem::transmute_copy(&modulenamebuffersize),
                    ::core::mem::transmute_copy(&modulenamesize),
                    ::core::mem::transmute_copy(&loadedimagenamebuffer),
                    ::core::mem::transmute_copy(&loadedimagenamebuffersize),
                    ::core::mem::transmute_copy(&loadedimagenamesize),
                )
                .into()
        }
        unsafe extern "system" fn GetModuleParameters<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleParameters(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&bases), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into()
        }
        unsafe extern "system" fn GetSymbolModule<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolModule(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *base = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeName<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTypeName(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetTypeId<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeId(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *typeid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeSize<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeSize(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    *size = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFieldOffset(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeId<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolTypeId(::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetOffsetTypeId<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetOffsetTypeId(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadTypedDataVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataVirtual(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTypedDataVirtual(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadTypedDataPhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into()
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataPhysical(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize)) {
                ::core::result::Result::Ok(ok__) => {
                    *byteswritten = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputTypedDataPhysical(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetScope<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScope(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into()
        }
        unsafe extern "system" fn SetScope<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScope(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into()
        }
        unsafe extern "system" fn ResetScope<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ResetScope().into()
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup(::core::mem::transmute_copy(&flags), ::core::mem::transmute(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    *symbols = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup() {
                ::core::result::Result::Ok(ok__) => {
                    *group = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatch<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatch(::core::mem::transmute_copy(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatch<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNextSymbolMatch(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn EndSymbolMatch<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).EndSymbolMatch(::core::mem::transmute_copy(&handle)).into()
        }
        unsafe extern "system" fn Reload<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reload(::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetSymbolPath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolPath(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetSymbolPath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSymbolPath(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSymbolPath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSymbolPath(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetImagePath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetImagePath(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetImagePath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetImagePath(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendImagePath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendImagePath(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetSourcePath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePath(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn GetSourcePathElement<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePathElement(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into()
        }
        unsafe extern "system" fn SetSourcePath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSourcePath(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSourcePath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSourcePath(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn FindSourceFile<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FindSourceFile(::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into()
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceFileLineOffsets(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into()
        }
        unsafe extern "system" fn GetModuleVersionInformation<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleVersionInformation(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&item), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&verinfosize)).into()
        }
        unsafe extern "system" fn GetModuleNameString<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleNameString(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetConstantName<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetConstantName(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetFieldName<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFieldName(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&fieldindex), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetTypeOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *options = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddTypeOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddTypeOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn RemoveTypeOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveTypeOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn SetTypeOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetTypeOptions(::core::mem::transmute_copy(&options)).into()
        }
        unsafe extern "system" fn GetNameByOffsetWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNameByOffsetWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByNameWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByNameWide(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffsetWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNearNameByOffsetWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetLineByOffsetWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLineByOffsetWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetOffsetByLineWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLineWide(::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleNameWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByModuleNameWide(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetSymbolModuleWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolModuleWide(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *base = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeNameWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTypeNameWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetTypeIdWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PWSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeIdWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *typeid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffsetWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PWSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFieldOffsetWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeIdWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolTypeIdWide(::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetScopeSymbolGroup2<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup2(::core::mem::transmute_copy(&flags), ::core::mem::transmute(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    *symbols = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup2<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup2() {
                ::core::result::Result::Ok(ok__) => {
                    *group = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatchWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatchWide(::core::mem::transmute_copy(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatchWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNextSymbolMatchWide(::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn ReloadWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReloadWide(::core::mem::transmute_copy(&module)).into()
        }
        unsafe extern "system" fn GetSymbolPathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolPathWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetSymbolPathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSymbolPathWide(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSymbolPathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSymbolPathWide(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetImagePathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetImagePathWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn SetImagePathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetImagePathWide(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendImagePathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendImagePathWide(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn GetSourcePathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePathWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into()
        }
        unsafe extern "system" fn GetSourcePathElementWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourcePathElementWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into()
        }
        unsafe extern "system" fn SetSourcePathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSourcePathWide(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn AppendSourcePathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AppendSourcePathWide(::core::mem::transmute_copy(&addition)).into()
        }
        unsafe extern "system" fn FindSourceFileWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PWSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FindSourceFileWide(::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into()
        }
        unsafe extern "system" fn GetSourceFileLineOffsetsWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceFileLineOffsetsWide(::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into()
        }
        unsafe extern "system" fn GetModuleVersionInformationWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleVersionInformationWide(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&item), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&verinfosize)).into()
        }
        unsafe extern "system" fn GetModuleNameStringWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleNameStringWide(::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetConstantNameWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetConstantNameWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetFieldNameWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFieldNameWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&fieldindex), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn IsManagedModule<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).IsManagedModule(::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleByModuleName2<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByModuleName2(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleByModuleName2Wide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByModuleName2Wide(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetModuleByOffset2<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetModuleByOffset2(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn AddSyntheticModule<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddSyntheticModule(::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&imagepath), ::core::mem::transmute_copy(&modulename), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn AddSyntheticModuleWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddSyntheticModuleWide(::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&imagepath), ::core::mem::transmute_copy(&modulename), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn RemoveSyntheticModule<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSyntheticModule(::core::mem::transmute_copy(&base)).into()
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndex<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentScopeFrameIndex() {
                ::core::result::Result::Ok(ok__) => {
                    *index = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeFrameByIndex<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScopeFrameByIndex(::core::mem::transmute_copy(&index)).into()
        }
        unsafe extern "system" fn SetScopeFromJitDebugInfo<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, infooffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScopeFromJitDebugInfo(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&infooffset)).into()
        }
        unsafe extern "system" fn SetScopeFromStoredEvent<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScopeFromStoredEvent().into()
        }
        unsafe extern "system" fn OutputSymbolByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputSymbolByOffset(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn GetFunctionEntryByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFunctionEntryByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bufferneeded)).into()
        }
        unsafe extern "system" fn GetFieldTypeAndOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFieldTypeAndOffset(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&containertypeid), ::core::mem::transmute_copy(&field), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn GetFieldTypeAndOffsetWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetFieldTypeAndOffsetWide(::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&containertypeid), ::core::mem::transmute_copy(&field), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn AddSyntheticSymbol<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddSyntheticSymbol(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSyntheticSymbolWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddSyntheticSymbolWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSyntheticSymbol<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveSyntheticSymbol(::core::mem::transmute_copy(&id)).into()
        }
        unsafe extern "system" fn GetSymbolEntriesByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntriesByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&displacements), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into()
        }
        unsafe extern "system" fn GetSymbolEntriesByName<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntriesByName(::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into()
        }
        unsafe extern "system" fn GetSymbolEntriesByNameWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntriesByNameWide(::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into()
        }
        unsafe extern "system" fn GetSymbolEntryByToken<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modulebase: u64, token: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryByToken(::core::mem::transmute_copy(&modulebase), ::core::mem::transmute_copy(&token)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryInformation(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *info = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryString<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntryString(::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSymbolEntryStringWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntryStringWide(::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSymbolEntryOffsetRegions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSymbolEntryOffsetRegions(::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&regions), ::core::mem::transmute_copy(&regionscount), ::core::mem::transmute_copy(&regionsavail)).into()
        }
        unsafe extern "system" fn GetSymbolEntryBySymbolEntry<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fromid: *const DEBUG_MODULE_AND_ID, flags: u32, toid: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryBySymbolEntry(::core::mem::transmute_copy(&fromid), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *toid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntriesByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntriesByOffset(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into()
        }
        unsafe extern "system" fn GetSourceEntriesByLine<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntriesByLine(::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into()
        }
        unsafe extern "system" fn GetSourceEntriesByLineWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntriesByLineWide(::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into()
        }
        unsafe extern "system" fn GetSourceEntryString<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntryString(::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSourceEntryStringWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntryStringWide(::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into()
        }
        unsafe extern "system" fn GetSourceEntryOffsetRegions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSourceEntryOffsetRegions(::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&regions), ::core::mem::transmute_copy(&regionscount), ::core::mem::transmute_copy(&regionsavail)).into()
        }
        unsafe extern "system" fn GetSourceEntryBySourceEntry<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSourceEntryBySourceEntry(::core::mem::transmute_copy(&fromentry), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *toentry = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScopeEx<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetScopeEx(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into()
        }
        unsafe extern "system" fn SetScopeEx<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScopeEx(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into()
        }
        unsafe extern "system" fn GetNameByInlineContext<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNameByInlineContext(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetNameByInlineContextWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNameByInlineContextWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetLineByInlineContext<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLineByInlineContext(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn GetLineByInlineContextWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetLineByInlineContextWide(::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into()
        }
        unsafe extern "system" fn OutputSymbolByInlineContext<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OutputSymbolByInlineContext(::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext)).into()
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndexEx<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentScopeFrameIndexEx(::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *index = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeFrameByIndexEx<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetScopeFrameByIndexEx(::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetSymbolOptions: GetSymbolOptions::<Impl, IMPL_OFFSET>,
            AddSymbolOptions: AddSymbolOptions::<Impl, IMPL_OFFSET>,
            RemoveSymbolOptions: RemoveSymbolOptions::<Impl, IMPL_OFFSET>,
            SetSymbolOptions: SetSymbolOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffset: GetNameByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByName: GetOffsetByName::<Impl, IMPL_OFFSET>,
            GetNearNameByOffset: GetNearNameByOffset::<Impl, IMPL_OFFSET>,
            GetLineByOffset: GetLineByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByLine: GetOffsetByLine::<Impl, IMPL_OFFSET>,
            GetNumberModules: GetNumberModules::<Impl, IMPL_OFFSET>,
            GetModuleByIndex: GetModuleByIndex::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName: GetModuleByModuleName::<Impl, IMPL_OFFSET>,
            GetModuleByOffset: GetModuleByOffset::<Impl, IMPL_OFFSET>,
            GetModuleNames: GetModuleNames::<Impl, IMPL_OFFSET>,
            GetModuleParameters: GetModuleParameters::<Impl, IMPL_OFFSET>,
            GetSymbolModule: GetSymbolModule::<Impl, IMPL_OFFSET>,
            GetTypeName: GetTypeName::<Impl, IMPL_OFFSET>,
            GetTypeId: GetTypeId::<Impl, IMPL_OFFSET>,
            GetTypeSize: GetTypeSize::<Impl, IMPL_OFFSET>,
            GetFieldOffset: GetFieldOffset::<Impl, IMPL_OFFSET>,
            GetSymbolTypeId: GetSymbolTypeId::<Impl, IMPL_OFFSET>,
            GetOffsetTypeId: GetOffsetTypeId::<Impl, IMPL_OFFSET>,
            ReadTypedDataVirtual: ReadTypedDataVirtual::<Impl, IMPL_OFFSET>,
            WriteTypedDataVirtual: WriteTypedDataVirtual::<Impl, IMPL_OFFSET>,
            OutputTypedDataVirtual: OutputTypedDataVirtual::<Impl, IMPL_OFFSET>,
            ReadTypedDataPhysical: ReadTypedDataPhysical::<Impl, IMPL_OFFSET>,
            WriteTypedDataPhysical: WriteTypedDataPhysical::<Impl, IMPL_OFFSET>,
            OutputTypedDataPhysical: OutputTypedDataPhysical::<Impl, IMPL_OFFSET>,
            GetScope: GetScope::<Impl, IMPL_OFFSET>,
            SetScope: SetScope::<Impl, IMPL_OFFSET>,
            ResetScope: ResetScope::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup: GetScopeSymbolGroup::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup: CreateSymbolGroup::<Impl, IMPL_OFFSET>,
            StartSymbolMatch: StartSymbolMatch::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatch: GetNextSymbolMatch::<Impl, IMPL_OFFSET>,
            EndSymbolMatch: EndSymbolMatch::<Impl, IMPL_OFFSET>,
            Reload: Reload::<Impl, IMPL_OFFSET>,
            GetSymbolPath: GetSymbolPath::<Impl, IMPL_OFFSET>,
            SetSymbolPath: SetSymbolPath::<Impl, IMPL_OFFSET>,
            AppendSymbolPath: AppendSymbolPath::<Impl, IMPL_OFFSET>,
            GetImagePath: GetImagePath::<Impl, IMPL_OFFSET>,
            SetImagePath: SetImagePath::<Impl, IMPL_OFFSET>,
            AppendImagePath: AppendImagePath::<Impl, IMPL_OFFSET>,
            GetSourcePath: GetSourcePath::<Impl, IMPL_OFFSET>,
            GetSourcePathElement: GetSourcePathElement::<Impl, IMPL_OFFSET>,
            SetSourcePath: SetSourcePath::<Impl, IMPL_OFFSET>,
            AppendSourcePath: AppendSourcePath::<Impl, IMPL_OFFSET>,
            FindSourceFile: FindSourceFile::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsets: GetSourceFileLineOffsets::<Impl, IMPL_OFFSET>,
            GetModuleVersionInformation: GetModuleVersionInformation::<Impl, IMPL_OFFSET>,
            GetModuleNameString: GetModuleNameString::<Impl, IMPL_OFFSET>,
            GetConstantName: GetConstantName::<Impl, IMPL_OFFSET>,
            GetFieldName: GetFieldName::<Impl, IMPL_OFFSET>,
            GetTypeOptions: GetTypeOptions::<Impl, IMPL_OFFSET>,
            AddTypeOptions: AddTypeOptions::<Impl, IMPL_OFFSET>,
            RemoveTypeOptions: RemoveTypeOptions::<Impl, IMPL_OFFSET>,
            SetTypeOptions: SetTypeOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffsetWide: GetNameByOffsetWide::<Impl, IMPL_OFFSET>,
            GetOffsetByNameWide: GetOffsetByNameWide::<Impl, IMPL_OFFSET>,
            GetNearNameByOffsetWide: GetNearNameByOffsetWide::<Impl, IMPL_OFFSET>,
            GetLineByOffsetWide: GetLineByOffsetWide::<Impl, IMPL_OFFSET>,
            GetOffsetByLineWide: GetOffsetByLineWide::<Impl, IMPL_OFFSET>,
            GetModuleByModuleNameWide: GetModuleByModuleNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolModuleWide: GetSymbolModuleWide::<Impl, IMPL_OFFSET>,
            GetTypeNameWide: GetTypeNameWide::<Impl, IMPL_OFFSET>,
            GetTypeIdWide: GetTypeIdWide::<Impl, IMPL_OFFSET>,
            GetFieldOffsetWide: GetFieldOffsetWide::<Impl, IMPL_OFFSET>,
            GetSymbolTypeIdWide: GetSymbolTypeIdWide::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup2: GetScopeSymbolGroup2::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup2: CreateSymbolGroup2::<Impl, IMPL_OFFSET>,
            StartSymbolMatchWide: StartSymbolMatchWide::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatchWide: GetNextSymbolMatchWide::<Impl, IMPL_OFFSET>,
            ReloadWide: ReloadWide::<Impl, IMPL_OFFSET>,
            GetSymbolPathWide: GetSymbolPathWide::<Impl, IMPL_OFFSET>,
            SetSymbolPathWide: SetSymbolPathWide::<Impl, IMPL_OFFSET>,
            AppendSymbolPathWide: AppendSymbolPathWide::<Impl, IMPL_OFFSET>,
            GetImagePathWide: GetImagePathWide::<Impl, IMPL_OFFSET>,
            SetImagePathWide: SetImagePathWide::<Impl, IMPL_OFFSET>,
            AppendImagePathWide: AppendImagePathWide::<Impl, IMPL_OFFSET>,
            GetSourcePathWide: GetSourcePathWide::<Impl, IMPL_OFFSET>,
            GetSourcePathElementWide: GetSourcePathElementWide::<Impl, IMPL_OFFSET>,
            SetSourcePathWide: SetSourcePathWide::<Impl, IMPL_OFFSET>,
            AppendSourcePathWide: AppendSourcePathWide::<Impl, IMPL_OFFSET>,
            FindSourceFileWide: FindSourceFileWide::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsetsWide: GetSourceFileLineOffsetsWide::<Impl, IMPL_OFFSET>,
            GetModuleVersionInformationWide: GetModuleVersionInformationWide::<Impl, IMPL_OFFSET>,
            GetModuleNameStringWide: GetModuleNameStringWide::<Impl, IMPL_OFFSET>,
            GetConstantNameWide: GetConstantNameWide::<Impl, IMPL_OFFSET>,
            GetFieldNameWide: GetFieldNameWide::<Impl, IMPL_OFFSET>,
            IsManagedModule: IsManagedModule::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName2: GetModuleByModuleName2::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName2Wide: GetModuleByModuleName2Wide::<Impl, IMPL_OFFSET>,
            GetModuleByOffset2: GetModuleByOffset2::<Impl, IMPL_OFFSET>,
            AddSyntheticModule: AddSyntheticModule::<Impl, IMPL_OFFSET>,
            AddSyntheticModuleWide: AddSyntheticModuleWide::<Impl, IMPL_OFFSET>,
            RemoveSyntheticModule: RemoveSyntheticModule::<Impl, IMPL_OFFSET>,
            GetCurrentScopeFrameIndex: GetCurrentScopeFrameIndex::<Impl, IMPL_OFFSET>,
            SetScopeFrameByIndex: SetScopeFrameByIndex::<Impl, IMPL_OFFSET>,
            SetScopeFromJitDebugInfo: SetScopeFromJitDebugInfo::<Impl, IMPL_OFFSET>,
            SetScopeFromStoredEvent: SetScopeFromStoredEvent::<Impl, IMPL_OFFSET>,
            OutputSymbolByOffset: OutputSymbolByOffset::<Impl, IMPL_OFFSET>,
            GetFunctionEntryByOffset: GetFunctionEntryByOffset::<Impl, IMPL_OFFSET>,
            GetFieldTypeAndOffset: GetFieldTypeAndOffset::<Impl, IMPL_OFFSET>,
            GetFieldTypeAndOffsetWide: GetFieldTypeAndOffsetWide::<Impl, IMPL_OFFSET>,
            AddSyntheticSymbol: AddSyntheticSymbol::<Impl, IMPL_OFFSET>,
            AddSyntheticSymbolWide: AddSyntheticSymbolWide::<Impl, IMPL_OFFSET>,
            RemoveSyntheticSymbol: RemoveSyntheticSymbol::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByOffset: GetSymbolEntriesByOffset::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByName: GetSymbolEntriesByName::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByNameWide: GetSymbolEntriesByNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolEntryByToken: GetSymbolEntryByToken::<Impl, IMPL_OFFSET>,
            GetSymbolEntryInformation: GetSymbolEntryInformation::<Impl, IMPL_OFFSET>,
            GetSymbolEntryString: GetSymbolEntryString::<Impl, IMPL_OFFSET>,
            GetSymbolEntryStringWide: GetSymbolEntryStringWide::<Impl, IMPL_OFFSET>,
            GetSymbolEntryOffsetRegions: GetSymbolEntryOffsetRegions::<Impl, IMPL_OFFSET>,
            GetSymbolEntryBySymbolEntry: GetSymbolEntryBySymbolEntry::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByOffset: GetSourceEntriesByOffset::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByLine: GetSourceEntriesByLine::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByLineWide: GetSourceEntriesByLineWide::<Impl, IMPL_OFFSET>,
            GetSourceEntryString: GetSourceEntryString::<Impl, IMPL_OFFSET>,
            GetSourceEntryStringWide: GetSourceEntryStringWide::<Impl, IMPL_OFFSET>,
            GetSourceEntryOffsetRegions: GetSourceEntryOffsetRegions::<Impl, IMPL_OFFSET>,
            GetSourceEntryBySourceEntry: GetSourceEntryBySourceEntry::<Impl, IMPL_OFFSET>,
            GetScopeEx: GetScopeEx::<Impl, IMPL_OFFSET>,
            SetScopeEx: SetScopeEx::<Impl, IMPL_OFFSET>,
            GetNameByInlineContext: GetNameByInlineContext::<Impl, IMPL_OFFSET>,
            GetNameByInlineContextWide: GetNameByInlineContextWide::<Impl, IMPL_OFFSET>,
            GetLineByInlineContext: GetLineByInlineContext::<Impl, IMPL_OFFSET>,
            GetLineByInlineContextWide: GetLineByInlineContextWide::<Impl, IMPL_OFFSET>,
            OutputSymbolByInlineContext: OutputSymbolByInlineContext::<Impl, IMPL_OFFSET>,
            GetCurrentScopeFrameIndexEx: GetCurrentScopeFrameIndexEx::<Impl, IMPL_OFFSET>,
            SetScopeFrameByIndexEx: SetScopeFrameByIndexEx::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSymbols5 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugSyncOperationImpl: Sized {
    fn GetTargetThread(&mut self) -> ::windows::core::Result<IDebugApplicationThread>;
    fn Execute(&mut self) -> ::windows::core::Result<::windows::core::IUnknown>;
    fn InProgressAbort(&mut self) -> ::windows::core::Result<()>;
}
impl IDebugSyncOperationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSyncOperationImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSyncOperationVtbl {
        unsafe extern "system" fn GetTargetThread<Impl: IDebugSyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppattarget: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTargetThread() {
                ::core::result::Result::Ok(ok__) => {
                    *ppattarget = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Execute<Impl: IDebugSyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunkresult: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Execute() {
                ::core::result::Result::Ok(ok__) => {
                    *ppunkresult = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InProgressAbort<Impl: IDebugSyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).InProgressAbort().into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetTargetThread: GetTargetThread::<Impl, IMPL_OFFSET>,
            Execute: Execute::<Impl, IMPL_OFFSET>,
            InProgressAbort: InProgressAbort::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSyncOperation as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSystemObjectsImpl: Sized {
    fn GetEventThread(&mut self) -> ::windows::core::Result<u32>;
    fn GetEventProcess(&mut self) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadId(&mut self) -> ::windows::core::Result<u32>;
    fn SetCurrentThreadId(&mut self, id: u32) -> ::windows::core::Result<()>;
    fn GetCurrentProcessId(&mut self) -> ::windows::core::Result<u32>;
    fn SetCurrentProcessId(&mut self, id: u32) -> ::windows::core::Result<()>;
    fn GetNumberThreads(&mut self) -> ::windows::core::Result<u32>;
    fn GetTotalNumberThreads(&mut self, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::Result<()>;
    fn GetThreadIdsByIndex(&mut self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::Result<()>;
    fn GetThreadIdByProcessor(&mut self, processor: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadDataOffset(&mut self) -> ::windows::core::Result<u64>;
    fn GetThreadIdByDataOffset(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadTeb(&mut self) -> ::windows::core::Result<u64>;
    fn GetThreadIdByTeb(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadSystemId(&mut self) -> ::windows::core::Result<u32>;
    fn GetThreadIdBySystemId(&mut self, sysid: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadHandle(&mut self) -> ::windows::core::Result<u64>;
    fn GetThreadIdByHandle(&mut self, handle: u64) -> ::windows::core::Result<u32>;
    fn GetNumberProcesses(&mut self) -> ::windows::core::Result<u32>;
    fn GetProcessIdsByIndex(&mut self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentProcessDataOffset(&mut self) -> ::windows::core::Result<u64>;
    fn GetProcessIdByDataOffset(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessPeb(&mut self) -> ::windows::core::Result<u64>;
    fn GetProcessIdByPeb(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessSystemId(&mut self) -> ::windows::core::Result<u32>;
    fn GetProcessIdBySystemId(&mut self, sysid: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessHandle(&mut self) -> ::windows::core::Result<u64>;
    fn GetProcessIdByHandle(&mut self, handle: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessExecutableName(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSystemObjectsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSystemObjectsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSystemObjectsVtbl {
        unsafe extern "system" fn GetEventThread<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventThread() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventProcess<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentThreadId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCurrentThreadId(::core::mem::transmute_copy(&id)).into()
        }
        unsafe extern "system" fn GetCurrentProcessId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentProcessId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCurrentProcessId(::core::mem::transmute_copy(&id)).into()
        }
        unsafe extern "system" fn GetNumberThreads<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberThreads() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTotalNumberThreads<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTotalNumberThreads(::core::mem::transmute_copy(&total), ::core::mem::transmute_copy(&largestprocess)).into()
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetThreadIdsByIndex(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into()
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByProcessor(::core::mem::transmute_copy(&processor)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadDataOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadTeb() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByTeb<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByTeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadSystemId() {
                ::core::result::Result::Ok(ok__) => {
                    *sysid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdBySystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadHandle() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByHandle<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberProcesses<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetProcessIdsByIndex(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into()
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessDataOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessPeb() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByPeb<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByPeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessSystemId() {
                ::core::result::Result::Ok(ok__) => {
                    *sysid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdBySystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessHandle() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByHandle<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetCurrentProcessExecutableName(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&exesize)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetEventThread: GetEventThread::<Impl, IMPL_OFFSET>,
            GetEventProcess: GetEventProcess::<Impl, IMPL_OFFSET>,
            GetCurrentThreadId: GetCurrentThreadId::<Impl, IMPL_OFFSET>,
            SetCurrentThreadId: SetCurrentThreadId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessId: GetCurrentProcessId::<Impl, IMPL_OFFSET>,
            SetCurrentProcessId: SetCurrentProcessId::<Impl, IMPL_OFFSET>,
            GetNumberThreads: GetNumberThreads::<Impl, IMPL_OFFSET>,
            GetTotalNumberThreads: GetTotalNumberThreads::<Impl, IMPL_OFFSET>,
            GetThreadIdsByIndex: GetThreadIdsByIndex::<Impl, IMPL_OFFSET>,
            GetThreadIdByProcessor: GetThreadIdByProcessor::<Impl, IMPL_OFFSET>,
            GetCurrentThreadDataOffset: GetCurrentThreadDataOffset::<Impl, IMPL_OFFSET>,
            GetThreadIdByDataOffset: GetThreadIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentThreadTeb: GetCurrentThreadTeb::<Impl, IMPL_OFFSET>,
            GetThreadIdByTeb: GetThreadIdByTeb::<Impl, IMPL_OFFSET>,
            GetCurrentThreadSystemId: GetCurrentThreadSystemId::<Impl, IMPL_OFFSET>,
            GetThreadIdBySystemId: GetThreadIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentThreadHandle: GetCurrentThreadHandle::<Impl, IMPL_OFFSET>,
            GetThreadIdByHandle: GetThreadIdByHandle::<Impl, IMPL_OFFSET>,
            GetNumberProcesses: GetNumberProcesses::<Impl, IMPL_OFFSET>,
            GetProcessIdsByIndex: GetProcessIdsByIndex::<Impl, IMPL_OFFSET>,
            GetCurrentProcessDataOffset: GetCurrentProcessDataOffset::<Impl, IMPL_OFFSET>,
            GetProcessIdByDataOffset: GetProcessIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentProcessPeb: GetCurrentProcessPeb::<Impl, IMPL_OFFSET>,
            GetProcessIdByPeb: GetProcessIdByPeb::<Impl, IMPL_OFFSET>,
            GetCurrentProcessSystemId: GetCurrentProcessSystemId::<Impl, IMPL_OFFSET>,
            GetProcessIdBySystemId: GetProcessIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessHandle: GetCurrentProcessHandle::<Impl, IMPL_OFFSET>,
            GetProcessIdByHandle: GetProcessIdByHandle::<Impl, IMPL_OFFSET>,
            GetCurrentProcessExecutableName: GetCurrentProcessExecutableName::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSystemObjects as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSystemObjects2Impl: Sized {
    fn GetEventThread(&mut self) -> ::windows::core::Result<u32>;
    fn GetEventProcess(&mut self) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadId(&mut self) -> ::windows::core::Result<u32>;
    fn SetCurrentThreadId(&mut self, id: u32) -> ::windows::core::Result<()>;
    fn GetCurrentProcessId(&mut self) -> ::windows::core::Result<u32>;
    fn SetCurrentProcessId(&mut self, id: u32) -> ::windows::core::Result<()>;
    fn GetNumberThreads(&mut self) -> ::windows::core::Result<u32>;
    fn GetTotalNumberThreads(&mut self, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::Result<()>;
    fn GetThreadIdsByIndex(&mut self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::Result<()>;
    fn GetThreadIdByProcessor(&mut self, processor: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadDataOffset(&mut self) -> ::windows::core::Result<u64>;
    fn GetThreadIdByDataOffset(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadTeb(&mut self) -> ::windows::core::Result<u64>;
    fn GetThreadIdByTeb(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadSystemId(&mut self) -> ::windows::core::Result<u32>;
    fn GetThreadIdBySystemId(&mut self, sysid: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadHandle(&mut self) -> ::windows::core::Result<u64>;
    fn GetThreadIdByHandle(&mut self, handle: u64) -> ::windows::core::Result<u32>;
    fn GetNumberProcesses(&mut self) -> ::windows::core::Result<u32>;
    fn GetProcessIdsByIndex(&mut self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentProcessDataOffset(&mut self) -> ::windows::core::Result<u64>;
    fn GetProcessIdByDataOffset(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessPeb(&mut self) -> ::windows::core::Result<u64>;
    fn GetProcessIdByPeb(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessSystemId(&mut self) -> ::windows::core::Result<u32>;
    fn GetProcessIdBySystemId(&mut self, sysid: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessHandle(&mut self) -> ::windows::core::Result<u64>;
    fn GetProcessIdByHandle(&mut self, handle: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessExecutableName(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentProcessUpTime(&mut self) -> ::windows::core::Result<u32>;
    fn GetImplicitThreadDataOffset(&mut self) -> ::windows::core::Result<u64>;
    fn SetImplicitThreadDataOffset(&mut self, offset: u64) -> ::windows::core::Result<()>;
    fn GetImplicitProcessDataOffset(&mut self) -> ::windows::core::Result<u64>;
    fn SetImplicitProcessDataOffset(&mut self, offset: u64) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSystemObjects2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSystemObjects2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSystemObjects2Vtbl {
        unsafe extern "system" fn GetEventThread<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventThread() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventProcess<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentThreadId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCurrentThreadId(::core::mem::transmute_copy(&id)).into()
        }
        unsafe extern "system" fn GetCurrentProcessId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentProcessId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCurrentProcessId(::core::mem::transmute_copy(&id)).into()
        }
        unsafe extern "system" fn GetNumberThreads<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberThreads() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTotalNumberThreads<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTotalNumberThreads(::core::mem::transmute_copy(&total), ::core::mem::transmute_copy(&largestprocess)).into()
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetThreadIdsByIndex(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into()
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByProcessor(::core::mem::transmute_copy(&processor)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadDataOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadTeb() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByTeb<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByTeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadSystemId() {
                ::core::result::Result::Ok(ok__) => {
                    *sysid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdBySystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadHandle() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByHandle<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberProcesses<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetProcessIdsByIndex(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into()
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessDataOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessPeb() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByPeb<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByPeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessSystemId() {
                ::core::result::Result::Ok(ok__) => {
                    *sysid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdBySystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessHandle() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByHandle<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetCurrentProcessExecutableName(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&exesize)).into()
        }
        unsafe extern "system" fn GetCurrentProcessUpTime<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessUpTime() {
                ::core::result::Result::Ok(ok__) => {
                    *uptime = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImplicitThreadDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetImplicitThreadDataOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImplicitThreadDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetImplicitThreadDataOffset(::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn GetImplicitProcessDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetImplicitProcessDataOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImplicitProcessDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetImplicitProcessDataOffset(::core::mem::transmute_copy(&offset)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetEventThread: GetEventThread::<Impl, IMPL_OFFSET>,
            GetEventProcess: GetEventProcess::<Impl, IMPL_OFFSET>,
            GetCurrentThreadId: GetCurrentThreadId::<Impl, IMPL_OFFSET>,
            SetCurrentThreadId: SetCurrentThreadId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessId: GetCurrentProcessId::<Impl, IMPL_OFFSET>,
            SetCurrentProcessId: SetCurrentProcessId::<Impl, IMPL_OFFSET>,
            GetNumberThreads: GetNumberThreads::<Impl, IMPL_OFFSET>,
            GetTotalNumberThreads: GetTotalNumberThreads::<Impl, IMPL_OFFSET>,
            GetThreadIdsByIndex: GetThreadIdsByIndex::<Impl, IMPL_OFFSET>,
            GetThreadIdByProcessor: GetThreadIdByProcessor::<Impl, IMPL_OFFSET>,
            GetCurrentThreadDataOffset: GetCurrentThreadDataOffset::<Impl, IMPL_OFFSET>,
            GetThreadIdByDataOffset: GetThreadIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentThreadTeb: GetCurrentThreadTeb::<Impl, IMPL_OFFSET>,
            GetThreadIdByTeb: GetThreadIdByTeb::<Impl, IMPL_OFFSET>,
            GetCurrentThreadSystemId: GetCurrentThreadSystemId::<Impl, IMPL_OFFSET>,
            GetThreadIdBySystemId: GetThreadIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentThreadHandle: GetCurrentThreadHandle::<Impl, IMPL_OFFSET>,
            GetThreadIdByHandle: GetThreadIdByHandle::<Impl, IMPL_OFFSET>,
            GetNumberProcesses: GetNumberProcesses::<Impl, IMPL_OFFSET>,
            GetProcessIdsByIndex: GetProcessIdsByIndex::<Impl, IMPL_OFFSET>,
            GetCurrentProcessDataOffset: GetCurrentProcessDataOffset::<Impl, IMPL_OFFSET>,
            GetProcessIdByDataOffset: GetProcessIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentProcessPeb: GetCurrentProcessPeb::<Impl, IMPL_OFFSET>,
            GetProcessIdByPeb: GetProcessIdByPeb::<Impl, IMPL_OFFSET>,
            GetCurrentProcessSystemId: GetCurrentProcessSystemId::<Impl, IMPL_OFFSET>,
            GetProcessIdBySystemId: GetProcessIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessHandle: GetCurrentProcessHandle::<Impl, IMPL_OFFSET>,
            GetProcessIdByHandle: GetProcessIdByHandle::<Impl, IMPL_OFFSET>,
            GetCurrentProcessExecutableName: GetCurrentProcessExecutableName::<Impl, IMPL_OFFSET>,
            GetCurrentProcessUpTime: GetCurrentProcessUpTime::<Impl, IMPL_OFFSET>,
            GetImplicitThreadDataOffset: GetImplicitThreadDataOffset::<Impl, IMPL_OFFSET>,
            SetImplicitThreadDataOffset: SetImplicitThreadDataOffset::<Impl, IMPL_OFFSET>,
            GetImplicitProcessDataOffset: GetImplicitProcessDataOffset::<Impl, IMPL_OFFSET>,
            SetImplicitProcessDataOffset: SetImplicitProcessDataOffset::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSystemObjects2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSystemObjects3Impl: Sized {
    fn GetEventThread(&mut self) -> ::windows::core::Result<u32>;
    fn GetEventProcess(&mut self) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadId(&mut self) -> ::windows::core::Result<u32>;
    fn SetCurrentThreadId(&mut self, id: u32) -> ::windows::core::Result<()>;
    fn GetCurrentProcessId(&mut self) -> ::windows::core::Result<u32>;
    fn SetCurrentProcessId(&mut self, id: u32) -> ::windows::core::Result<()>;
    fn GetNumberThreads(&mut self) -> ::windows::core::Result<u32>;
    fn GetTotalNumberThreads(&mut self, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::Result<()>;
    fn GetThreadIdsByIndex(&mut self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::Result<()>;
    fn GetThreadIdByProcessor(&mut self, processor: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadDataOffset(&mut self) -> ::windows::core::Result<u64>;
    fn GetThreadIdByDataOffset(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadTeb(&mut self) -> ::windows::core::Result<u64>;
    fn GetThreadIdByTeb(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadSystemId(&mut self) -> ::windows::core::Result<u32>;
    fn GetThreadIdBySystemId(&mut self, sysid: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadHandle(&mut self) -> ::windows::core::Result<u64>;
    fn GetThreadIdByHandle(&mut self, handle: u64) -> ::windows::core::Result<u32>;
    fn GetNumberProcesses(&mut self) -> ::windows::core::Result<u32>;
    fn GetProcessIdsByIndex(&mut self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentProcessDataOffset(&mut self) -> ::windows::core::Result<u64>;
    fn GetProcessIdByDataOffset(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessPeb(&mut self) -> ::windows::core::Result<u64>;
    fn GetProcessIdByPeb(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessSystemId(&mut self) -> ::windows::core::Result<u32>;
    fn GetProcessIdBySystemId(&mut self, sysid: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessHandle(&mut self) -> ::windows::core::Result<u64>;
    fn GetProcessIdByHandle(&mut self, handle: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessExecutableName(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentProcessUpTime(&mut self) -> ::windows::core::Result<u32>;
    fn GetImplicitThreadDataOffset(&mut self) -> ::windows::core::Result<u64>;
    fn SetImplicitThreadDataOffset(&mut self, offset: u64) -> ::windows::core::Result<()>;
    fn GetImplicitProcessDataOffset(&mut self) -> ::windows::core::Result<u64>;
    fn SetImplicitProcessDataOffset(&mut self, offset: u64) -> ::windows::core::Result<()>;
    fn GetEventSystem(&mut self) -> ::windows::core::Result<u32>;
    fn GetCurrentSystemId(&mut self) -> ::windows::core::Result<u32>;
    fn SetCurrentSystemId(&mut self, id: u32) -> ::windows::core::Result<()>;
    fn GetNumberSystems(&mut self) -> ::windows::core::Result<u32>;
    fn GetSystemIdsByIndex(&mut self, start: u32, count: u32, ids: *mut u32) -> ::windows::core::Result<()>;
    fn GetTotalNumberThreadsAndProcesses(&mut self, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentSystemServer(&mut self) -> ::windows::core::Result<u64>;
    fn GetSystemByServer(&mut self, server: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentSystemServerName(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSystemObjects3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSystemObjects3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSystemObjects3Vtbl {
        unsafe extern "system" fn GetEventThread<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventThread() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventProcess<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentThreadId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCurrentThreadId(::core::mem::transmute_copy(&id)).into()
        }
        unsafe extern "system" fn GetCurrentProcessId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentProcessId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCurrentProcessId(::core::mem::transmute_copy(&id)).into()
        }
        unsafe extern "system" fn GetNumberThreads<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberThreads() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTotalNumberThreads<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTotalNumberThreads(::core::mem::transmute_copy(&total), ::core::mem::transmute_copy(&largestprocess)).into()
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetThreadIdsByIndex(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into()
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByProcessor(::core::mem::transmute_copy(&processor)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadDataOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadTeb() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByTeb<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByTeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadSystemId() {
                ::core::result::Result::Ok(ok__) => {
                    *sysid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdBySystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadHandle() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByHandle<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberProcesses<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetProcessIdsByIndex(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into()
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessDataOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessPeb() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByPeb<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByPeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessSystemId() {
                ::core::result::Result::Ok(ok__) => {
                    *sysid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdBySystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessHandle() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByHandle<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetCurrentProcessExecutableName(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&exesize)).into()
        }
        unsafe extern "system" fn GetCurrentProcessUpTime<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessUpTime() {
                ::core::result::Result::Ok(ok__) => {
                    *uptime = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImplicitThreadDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetImplicitThreadDataOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImplicitThreadDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetImplicitThreadDataOffset(::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn GetImplicitProcessDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetImplicitProcessDataOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImplicitProcessDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetImplicitProcessDataOffset(::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn GetEventSystem<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventSystem() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentSystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCurrentSystemId(::core::mem::transmute_copy(&id)).into()
        }
        unsafe extern "system" fn GetNumberSystems<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberSystems() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemIdsByIndex<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemIdsByIndex(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids)).into()
        }
        unsafe extern "system" fn GetTotalNumberThreadsAndProcesses<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTotalNumberThreadsAndProcesses(::core::mem::transmute_copy(&totalthreads), ::core::mem::transmute_copy(&totalprocesses), ::core::mem::transmute_copy(&largestprocessthreads), ::core::mem::transmute_copy(&largestsystemthreads), ::core::mem::transmute_copy(&largestsystemprocesses)).into()
        }
        unsafe extern "system" fn GetCurrentSystemServer<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemServer() {
                ::core::result::Result::Ok(ok__) => {
                    *server = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemByServer<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSystemByServer(::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemServerName<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetCurrentSystemServerName(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetEventThread: GetEventThread::<Impl, IMPL_OFFSET>,
            GetEventProcess: GetEventProcess::<Impl, IMPL_OFFSET>,
            GetCurrentThreadId: GetCurrentThreadId::<Impl, IMPL_OFFSET>,
            SetCurrentThreadId: SetCurrentThreadId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessId: GetCurrentProcessId::<Impl, IMPL_OFFSET>,
            SetCurrentProcessId: SetCurrentProcessId::<Impl, IMPL_OFFSET>,
            GetNumberThreads: GetNumberThreads::<Impl, IMPL_OFFSET>,
            GetTotalNumberThreads: GetTotalNumberThreads::<Impl, IMPL_OFFSET>,
            GetThreadIdsByIndex: GetThreadIdsByIndex::<Impl, IMPL_OFFSET>,
            GetThreadIdByProcessor: GetThreadIdByProcessor::<Impl, IMPL_OFFSET>,
            GetCurrentThreadDataOffset: GetCurrentThreadDataOffset::<Impl, IMPL_OFFSET>,
            GetThreadIdByDataOffset: GetThreadIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentThreadTeb: GetCurrentThreadTeb::<Impl, IMPL_OFFSET>,
            GetThreadIdByTeb: GetThreadIdByTeb::<Impl, IMPL_OFFSET>,
            GetCurrentThreadSystemId: GetCurrentThreadSystemId::<Impl, IMPL_OFFSET>,
            GetThreadIdBySystemId: GetThreadIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentThreadHandle: GetCurrentThreadHandle::<Impl, IMPL_OFFSET>,
            GetThreadIdByHandle: GetThreadIdByHandle::<Impl, IMPL_OFFSET>,
            GetNumberProcesses: GetNumberProcesses::<Impl, IMPL_OFFSET>,
            GetProcessIdsByIndex: GetProcessIdsByIndex::<Impl, IMPL_OFFSET>,
            GetCurrentProcessDataOffset: GetCurrentProcessDataOffset::<Impl, IMPL_OFFSET>,
            GetProcessIdByDataOffset: GetProcessIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentProcessPeb: GetCurrentProcessPeb::<Impl, IMPL_OFFSET>,
            GetProcessIdByPeb: GetProcessIdByPeb::<Impl, IMPL_OFFSET>,
            GetCurrentProcessSystemId: GetCurrentProcessSystemId::<Impl, IMPL_OFFSET>,
            GetProcessIdBySystemId: GetProcessIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessHandle: GetCurrentProcessHandle::<Impl, IMPL_OFFSET>,
            GetProcessIdByHandle: GetProcessIdByHandle::<Impl, IMPL_OFFSET>,
            GetCurrentProcessExecutableName: GetCurrentProcessExecutableName::<Impl, IMPL_OFFSET>,
            GetCurrentProcessUpTime: GetCurrentProcessUpTime::<Impl, IMPL_OFFSET>,
            GetImplicitThreadDataOffset: GetImplicitThreadDataOffset::<Impl, IMPL_OFFSET>,
            SetImplicitThreadDataOffset: SetImplicitThreadDataOffset::<Impl, IMPL_OFFSET>,
            GetImplicitProcessDataOffset: GetImplicitProcessDataOffset::<Impl, IMPL_OFFSET>,
            SetImplicitProcessDataOffset: SetImplicitProcessDataOffset::<Impl, IMPL_OFFSET>,
            GetEventSystem: GetEventSystem::<Impl, IMPL_OFFSET>,
            GetCurrentSystemId: GetCurrentSystemId::<Impl, IMPL_OFFSET>,
            SetCurrentSystemId: SetCurrentSystemId::<Impl, IMPL_OFFSET>,
            GetNumberSystems: GetNumberSystems::<Impl, IMPL_OFFSET>,
            GetSystemIdsByIndex: GetSystemIdsByIndex::<Impl, IMPL_OFFSET>,
            GetTotalNumberThreadsAndProcesses: GetTotalNumberThreadsAndProcesses::<Impl, IMPL_OFFSET>,
            GetCurrentSystemServer: GetCurrentSystemServer::<Impl, IMPL_OFFSET>,
            GetSystemByServer: GetSystemByServer::<Impl, IMPL_OFFSET>,
            GetCurrentSystemServerName: GetCurrentSystemServerName::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSystemObjects3 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSystemObjects4Impl: Sized {
    fn GetEventThread(&mut self) -> ::windows::core::Result<u32>;
    fn GetEventProcess(&mut self) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadId(&mut self) -> ::windows::core::Result<u32>;
    fn SetCurrentThreadId(&mut self, id: u32) -> ::windows::core::Result<()>;
    fn GetCurrentProcessId(&mut self) -> ::windows::core::Result<u32>;
    fn SetCurrentProcessId(&mut self, id: u32) -> ::windows::core::Result<()>;
    fn GetNumberThreads(&mut self) -> ::windows::core::Result<u32>;
    fn GetTotalNumberThreads(&mut self, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::Result<()>;
    fn GetThreadIdsByIndex(&mut self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::Result<()>;
    fn GetThreadIdByProcessor(&mut self, processor: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadDataOffset(&mut self) -> ::windows::core::Result<u64>;
    fn GetThreadIdByDataOffset(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadTeb(&mut self) -> ::windows::core::Result<u64>;
    fn GetThreadIdByTeb(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadSystemId(&mut self) -> ::windows::core::Result<u32>;
    fn GetThreadIdBySystemId(&mut self, sysid: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentThreadHandle(&mut self) -> ::windows::core::Result<u64>;
    fn GetThreadIdByHandle(&mut self, handle: u64) -> ::windows::core::Result<u32>;
    fn GetNumberProcesses(&mut self) -> ::windows::core::Result<u32>;
    fn GetProcessIdsByIndex(&mut self, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentProcessDataOffset(&mut self) -> ::windows::core::Result<u64>;
    fn GetProcessIdByDataOffset(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessPeb(&mut self) -> ::windows::core::Result<u64>;
    fn GetProcessIdByPeb(&mut self, offset: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessSystemId(&mut self) -> ::windows::core::Result<u32>;
    fn GetProcessIdBySystemId(&mut self, sysid: u32) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessHandle(&mut self) -> ::windows::core::Result<u64>;
    fn GetProcessIdByHandle(&mut self, handle: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentProcessExecutableName(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentProcessUpTime(&mut self) -> ::windows::core::Result<u32>;
    fn GetImplicitThreadDataOffset(&mut self) -> ::windows::core::Result<u64>;
    fn SetImplicitThreadDataOffset(&mut self, offset: u64) -> ::windows::core::Result<()>;
    fn GetImplicitProcessDataOffset(&mut self) -> ::windows::core::Result<u64>;
    fn SetImplicitProcessDataOffset(&mut self, offset: u64) -> ::windows::core::Result<()>;
    fn GetEventSystem(&mut self) -> ::windows::core::Result<u32>;
    fn GetCurrentSystemId(&mut self) -> ::windows::core::Result<u32>;
    fn SetCurrentSystemId(&mut self, id: u32) -> ::windows::core::Result<()>;
    fn GetNumberSystems(&mut self) -> ::windows::core::Result<u32>;
    fn GetSystemIdsByIndex(&mut self, start: u32, count: u32, ids: *mut u32) -> ::windows::core::Result<()>;
    fn GetTotalNumberThreadsAndProcesses(&mut self, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentSystemServer(&mut self) -> ::windows::core::Result<u64>;
    fn GetSystemByServer(&mut self, server: u64) -> ::windows::core::Result<u32>;
    fn GetCurrentSystemServerName(&mut self, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentProcessExecutableNameWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::Result<()>;
    fn GetCurrentSystemServerNameWide(&mut self, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSystemObjects4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSystemObjects4Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSystemObjects4Vtbl {
        unsafe extern "system" fn GetEventThread<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventThread() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventProcess<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentThreadId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCurrentThreadId(::core::mem::transmute_copy(&id)).into()
        }
        unsafe extern "system" fn GetCurrentProcessId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentProcessId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCurrentProcessId(::core::mem::transmute_copy(&id)).into()
        }
        unsafe extern "system" fn GetNumberThreads<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberThreads() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTotalNumberThreads<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTotalNumberThreads(::core::mem::transmute_copy(&total), ::core::mem::transmute_copy(&largestprocess)).into()
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetThreadIdsByIndex(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into()
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByProcessor(::core::mem::transmute_copy(&processor)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadDataOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadTeb() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByTeb<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByTeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadSystemId() {
                ::core::result::Result::Ok(ok__) => {
                    *sysid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdBySystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadHandle() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByHandle<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberProcesses<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetProcessIdsByIndex(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into()
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessDataOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessPeb() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByPeb<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByPeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessSystemId() {
                ::core::result::Result::Ok(ok__) => {
                    *sysid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdBySystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessHandle() {
                ::core::result::Result::Ok(ok__) => {
                    *handle = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByHandle<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetCurrentProcessExecutableName(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&exesize)).into()
        }
        unsafe extern "system" fn GetCurrentProcessUpTime<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessUpTime() {
                ::core::result::Result::Ok(ok__) => {
                    *uptime = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImplicitThreadDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetImplicitThreadDataOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImplicitThreadDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetImplicitThreadDataOffset(::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn GetImplicitProcessDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetImplicitProcessDataOffset() {
                ::core::result::Result::Ok(ok__) => {
                    *offset = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImplicitProcessDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetImplicitProcessDataOffset(::core::mem::transmute_copy(&offset)).into()
        }
        unsafe extern "system" fn GetEventSystem<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventSystem() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemId() {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentSystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetCurrentSystemId(::core::mem::transmute_copy(&id)).into()
        }
        unsafe extern "system" fn GetNumberSystems<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberSystems() {
                ::core::result::Result::Ok(ok__) => {
                    *number = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemIdsByIndex<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSystemIdsByIndex(::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids)).into()
        }
        unsafe extern "system" fn GetTotalNumberThreadsAndProcesses<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTotalNumberThreadsAndProcesses(::core::mem::transmute_copy(&totalthreads), ::core::mem::transmute_copy(&totalprocesses), ::core::mem::transmute_copy(&largestprocessthreads), ::core::mem::transmute_copy(&largestsystemthreads), ::core::mem::transmute_copy(&largestsystemprocesses)).into()
        }
        unsafe extern "system" fn GetCurrentSystemServer<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemServer() {
                ::core::result::Result::Ok(ok__) => {
                    *server = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemByServer<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSystemByServer(::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *id = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemServerName<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetCurrentSystemServerName(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        unsafe extern "system" fn GetCurrentProcessExecutableNameWide<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetCurrentProcessExecutableNameWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&exesize)).into()
        }
        unsafe extern "system" fn GetCurrentSystemServerNameWide<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetCurrentSystemServerNameWide(::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetEventThread: GetEventThread::<Impl, IMPL_OFFSET>,
            GetEventProcess: GetEventProcess::<Impl, IMPL_OFFSET>,
            GetCurrentThreadId: GetCurrentThreadId::<Impl, IMPL_OFFSET>,
            SetCurrentThreadId: SetCurrentThreadId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessId: GetCurrentProcessId::<Impl, IMPL_OFFSET>,
            SetCurrentProcessId: SetCurrentProcessId::<Impl, IMPL_OFFSET>,
            GetNumberThreads: GetNumberThreads::<Impl, IMPL_OFFSET>,
            GetTotalNumberThreads: GetTotalNumberThreads::<Impl, IMPL_OFFSET>,
            GetThreadIdsByIndex: GetThreadIdsByIndex::<Impl, IMPL_OFFSET>,
            GetThreadIdByProcessor: GetThreadIdByProcessor::<Impl, IMPL_OFFSET>,
            GetCurrentThreadDataOffset: GetCurrentThreadDataOffset::<Impl, IMPL_OFFSET>,
            GetThreadIdByDataOffset: GetThreadIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentThreadTeb: GetCurrentThreadTeb::<Impl, IMPL_OFFSET>,
            GetThreadIdByTeb: GetThreadIdByTeb::<Impl, IMPL_OFFSET>,
            GetCurrentThreadSystemId: GetCurrentThreadSystemId::<Impl, IMPL_OFFSET>,
            GetThreadIdBySystemId: GetThreadIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentThreadHandle: GetCurrentThreadHandle::<Impl, IMPL_OFFSET>,
            GetThreadIdByHandle: GetThreadIdByHandle::<Impl, IMPL_OFFSET>,
            GetNumberProcesses: GetNumberProcesses::<Impl, IMPL_OFFSET>,
            GetProcessIdsByIndex: GetProcessIdsByIndex::<Impl, IMPL_OFFSET>,
            GetCurrentProcessDataOffset: GetCurrentProcessDataOffset::<Impl, IMPL_OFFSET>,
            GetProcessIdByDataOffset: GetProcessIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentProcessPeb: GetCurrentProcessPeb::<Impl, IMPL_OFFSET>,
            GetProcessIdByPeb: GetProcessIdByPeb::<Impl, IMPL_OFFSET>,
            GetCurrentProcessSystemId: GetCurrentProcessSystemId::<Impl, IMPL_OFFSET>,
            GetProcessIdBySystemId: GetProcessIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessHandle: GetCurrentProcessHandle::<Impl, IMPL_OFFSET>,
            GetProcessIdByHandle: GetProcessIdByHandle::<Impl, IMPL_OFFSET>,
            GetCurrentProcessExecutableName: GetCurrentProcessExecutableName::<Impl, IMPL_OFFSET>,
            GetCurrentProcessUpTime: GetCurrentProcessUpTime::<Impl, IMPL_OFFSET>,
            GetImplicitThreadDataOffset: GetImplicitThreadDataOffset::<Impl, IMPL_OFFSET>,
            SetImplicitThreadDataOffset: SetImplicitThreadDataOffset::<Impl, IMPL_OFFSET>,
            GetImplicitProcessDataOffset: GetImplicitProcessDataOffset::<Impl, IMPL_OFFSET>,
            SetImplicitProcessDataOffset: SetImplicitProcessDataOffset::<Impl, IMPL_OFFSET>,
            GetEventSystem: GetEventSystem::<Impl, IMPL_OFFSET>,
            GetCurrentSystemId: GetCurrentSystemId::<Impl, IMPL_OFFSET>,
            SetCurrentSystemId: SetCurrentSystemId::<Impl, IMPL_OFFSET>,
            GetNumberSystems: GetNumberSystems::<Impl, IMPL_OFFSET>,
            GetSystemIdsByIndex: GetSystemIdsByIndex::<Impl, IMPL_OFFSET>,
            GetTotalNumberThreadsAndProcesses: GetTotalNumberThreadsAndProcesses::<Impl, IMPL_OFFSET>,
            GetCurrentSystemServer: GetCurrentSystemServer::<Impl, IMPL_OFFSET>,
            GetSystemByServer: GetSystemByServer::<Impl, IMPL_OFFSET>,
            GetCurrentSystemServerName: GetCurrentSystemServerName::<Impl, IMPL_OFFSET>,
            GetCurrentProcessExecutableNameWide: GetCurrentProcessExecutableNameWide::<Impl, IMPL_OFFSET>,
            GetCurrentSystemServerNameWide: GetCurrentSystemServerNameWide::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSystemObjects4 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugThreadCall32Impl: Sized {
    fn ThreadCallHandler(&mut self, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::core::Result<()>;
}
impl IDebugThreadCall32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugThreadCall32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugThreadCall32Vtbl {
        unsafe extern "system" fn ThreadCallHandler<Impl: IDebugThreadCall32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ThreadCallHandler(::core::mem::transmute_copy(&dwparam1), ::core::mem::transmute_copy(&dwparam2), ::core::mem::transmute_copy(&dwparam3)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), ThreadCallHandler: ThreadCallHandler::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugThreadCall32 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugThreadCall64Impl: Sized {
    fn ThreadCallHandler(&mut self, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::core::Result<()>;
}
impl IDebugThreadCall64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugThreadCall64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugThreadCall64Vtbl {
        unsafe extern "system" fn ThreadCallHandler<Impl: IDebugThreadCall64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ThreadCallHandler(::core::mem::transmute_copy(&dwparam1), ::core::mem::transmute_copy(&dwparam2), ::core::mem::transmute_copy(&dwparam3)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), ThreadCallHandler: ThreadCallHandler::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugThreadCall64 as ::windows::core::Interface>::IID
    }
}
pub trait IDynamicConceptProviderConceptImpl: Sized {
    fn GetConcept(&mut self, contextobject: ::core::option::Option<IModelObject>, conceptid: *const ::windows::core::GUID, conceptinterface: *mut ::core::option::Option<::windows::core::IUnknown>, conceptmetadata: *mut ::core::option::Option<IKeyStore>, hasconcept: *mut bool) -> ::windows::core::Result<()>;
    fn SetConcept(&mut self, contextobject: ::core::option::Option<IModelObject>, conceptid: *const ::windows::core::GUID, conceptinterface: ::core::option::Option<::windows::core::IUnknown>, conceptmetadata: ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn NotifyParent(&mut self, parentmodel: ::core::option::Option<IModelObject>) -> ::windows::core::Result<()>;
    fn NotifyParentChange(&mut self, parentmodel: ::core::option::Option<IModelObject>) -> ::windows::core::Result<()>;
    fn NotifyDestruct(&mut self) -> ::windows::core::Result<()>;
}
impl IDynamicConceptProviderConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDynamicConceptProviderConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDynamicConceptProviderConceptVtbl {
        unsafe extern "system" fn GetConcept<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, conceptid: *const ::windows::core::GUID, conceptinterface: *mut *mut ::core::ffi::c_void, conceptmetadata: *mut ::windows::core::RawPtr, hasconcept: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetConcept(::core::mem::transmute(&contextobject), ::core::mem::transmute_copy(&conceptid), ::core::mem::transmute_copy(&conceptinterface), ::core::mem::transmute_copy(&conceptmetadata), ::core::mem::transmute_copy(&hasconcept)).into()
        }
        unsafe extern "system" fn SetConcept<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, conceptid: *const ::windows::core::GUID, conceptinterface: *mut ::core::ffi::c_void, conceptmetadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetConcept(::core::mem::transmute(&contextobject), ::core::mem::transmute_copy(&conceptid), ::core::mem::transmute(&conceptinterface), ::core::mem::transmute(&conceptmetadata)).into()
        }
        unsafe extern "system" fn NotifyParent<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, parentmodel: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).NotifyParent(::core::mem::transmute(&parentmodel)).into()
        }
        unsafe extern "system" fn NotifyParentChange<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, parentmodel: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).NotifyParentChange(::core::mem::transmute(&parentmodel)).into()
        }
        unsafe extern "system" fn NotifyDestruct<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).NotifyDestruct().into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetConcept: GetConcept::<Impl, IMPL_OFFSET>,
            SetConcept: SetConcept::<Impl, IMPL_OFFSET>,
            NotifyParent: NotifyParent::<Impl, IMPL_OFFSET>,
            NotifyParentChange: NotifyParentChange::<Impl, IMPL_OFFSET>,
            NotifyDestruct: NotifyDestruct::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDynamicConceptProviderConcept as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDynamicKeyProviderConceptImpl: Sized {
    fn GetKey(&mut self, contextobject: ::core::option::Option<IModelObject>, key: super::super::super::Foundation::PWSTR, keyvalue: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>, haskey: *mut bool) -> ::windows::core::Result<()>;
    fn SetKey(&mut self, contextobject: ::core::option::Option<IModelObject>, key: super::super::super::Foundation::PWSTR, keyvalue: ::core::option::Option<IModelObject>, metadata: ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn EnumerateKeys(&mut self, contextobject: ::core::option::Option<IModelObject>) -> ::windows::core::Result<IKeyEnumerator>;
}
#[cfg(feature = "Win32_Foundation")]
impl IDynamicKeyProviderConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDynamicKeyProviderConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDynamicKeyProviderConceptVtbl {
        unsafe extern "system" fn GetKey<Impl: IDynamicKeyProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, key: super::super::super::Foundation::PWSTR, keyvalue: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr, haskey: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKey(::core::mem::transmute(&contextobject), ::core::mem::transmute_copy(&key), ::core::mem::transmute_copy(&keyvalue), ::core::mem::transmute_copy(&metadata), ::core::mem::transmute_copy(&haskey)).into()
        }
        unsafe extern "system" fn SetKey<Impl: IDynamicKeyProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, key: super::super::super::Foundation::PWSTR, keyvalue: ::windows::core::RawPtr, metadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKey(::core::mem::transmute(&contextobject), ::core::mem::transmute_copy(&key), ::core::mem::transmute(&keyvalue), ::core::mem::transmute(&metadata)).into()
        }
        unsafe extern "system" fn EnumerateKeys<Impl: IDynamicKeyProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, ppenumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateKeys(::core::mem::transmute(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppenumerator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetKey: GetKey::<Impl, IMPL_OFFSET>,
            SetKey: SetKey::<Impl, IMPL_OFFSET>,
            EnumerateKeys: EnumerateKeys::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDynamicKeyProviderConcept as ::windows::core::Interface>::IID
    }
}
pub trait IEnumDebugApplicationNodesImpl: Sized {
    fn Next(&mut self, celt: u32, pprddp: *mut ::core::option::Option<IDebugApplicationNode>, pceltfetched: *mut u32) -> ::windows::core::Result<()>;
    fn Skip(&mut self, celt: u32) -> ::windows::core::Result<()>;
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn Clone(&mut self) -> ::windows::core::Result<IEnumDebugApplicationNodes>;
}
impl IEnumDebugApplicationNodesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumDebugApplicationNodesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumDebugApplicationNodesVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugApplicationNodesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, pprddp: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Next(::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&pprddp), ::core::mem::transmute_copy(&pceltfetched)).into()
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugApplicationNodesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Skip(::core::mem::transmute_copy(&celt)).into()
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugApplicationNodesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugApplicationNodesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pperddp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone() {
                ::core::result::Result::Ok(ok__) => {
                    *pperddp = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Next: Next::<Impl, IMPL_OFFSET>,
            Skip: Skip::<Impl, IMPL_OFFSET>,
            Reset: Reset::<Impl, IMPL_OFFSET>,
            Clone: Clone::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumDebugApplicationNodes as ::windows::core::Interface>::IID
    }
}
pub trait IEnumDebugCodeContextsImpl: Sized {
    fn Next(&mut self, celt: u32, pscc: *mut ::core::option::Option<IDebugCodeContext>, pceltfetched: *mut u32) -> ::windows::core::Result<()>;
    fn Skip(&mut self, celt: u32) -> ::windows::core::Result<()>;
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn Clone(&mut self) -> ::windows::core::Result<IEnumDebugCodeContexts>;
}
impl IEnumDebugCodeContextsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumDebugCodeContextsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumDebugCodeContextsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugCodeContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, pscc: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Next(::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&pscc), ::core::mem::transmute_copy(&pceltfetched)).into()
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugCodeContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Skip(::core::mem::transmute_copy(&celt)).into()
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugCodeContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugCodeContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppescc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone() {
                ::core::result::Result::Ok(ok__) => {
                    *ppescc = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Next: Next::<Impl, IMPL_OFFSET>,
            Skip: Skip::<Impl, IMPL_OFFSET>,
            Reset: Reset::<Impl, IMPL_OFFSET>,
            Clone: Clone::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumDebugCodeContexts as ::windows::core::Interface>::IID
    }
}
pub trait IEnumDebugExpressionContextsImpl: Sized {
    fn Next(&mut self, celt: u32, ppdec: *mut ::core::option::Option<IDebugExpressionContext>, pceltfetched: *mut u32) -> ::windows::core::Result<()>;
    fn Skip(&mut self, celt: u32) -> ::windows::core::Result<()>;
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn Clone(&mut self) -> ::windows::core::Result<IEnumDebugExpressionContexts>;
}
impl IEnumDebugExpressionContextsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumDebugExpressionContextsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumDebugExpressionContextsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugExpressionContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, ppdec: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Next(::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&ppdec), ::core::mem::transmute_copy(&pceltfetched)).into()
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugExpressionContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Skip(::core::mem::transmute_copy(&celt)).into()
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugExpressionContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugExpressionContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppedec: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone() {
                ::core::result::Result::Ok(ok__) => {
                    *ppedec = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Next: Next::<Impl, IMPL_OFFSET>,
            Skip: Skip::<Impl, IMPL_OFFSET>,
            Reset: Reset::<Impl, IMPL_OFFSET>,
            Clone: Clone::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumDebugExpressionContexts as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole"))]
pub trait IEnumDebugExtendedPropertyInfoImpl: Sized {
    fn Next(&mut self, celt: u32, rgextendedpropertyinfo: *mut ExtendedDebugPropertyInfo, pceltfetched: *mut u32) -> ::windows::core::Result<()>;
    fn Skip(&mut self, celt: u32) -> ::windows::core::Result<()>;
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn Clone(&mut self) -> ::windows::core::Result<IEnumDebugExtendedPropertyInfo>;
    fn GetCount(&mut self) -> ::windows::core::Result<u32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole"))]
impl IEnumDebugExtendedPropertyInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumDebugExtendedPropertyInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumDebugExtendedPropertyInfoVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgextendedpropertyinfo: *mut ExtendedDebugPropertyInfo, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Next(::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgextendedpropertyinfo), ::core::mem::transmute_copy(&pceltfetched)).into()
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Skip(::core::mem::transmute_copy(&celt)).into()
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pedpe: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone() {
                ::core::result::Result::Ok(ok__) => {
                    *pedpe = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCount<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcelt: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCount() {
                ::core::result::Result::Ok(ok__) => {
                    *pcelt = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Next: Next::<Impl, IMPL_OFFSET>,
            Skip: Skip::<Impl, IMPL_OFFSET>,
            Reset: Reset::<Impl, IMPL_OFFSET>,
            Clone: Clone::<Impl, IMPL_OFFSET>,
            GetCount: GetCount::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumDebugExtendedPropertyInfo as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IEnumDebugPropertyInfoImpl: Sized {
    fn Next(&mut self, celt: u32, pi: *mut DebugPropertyInfo, pceltsfetched: *mut u32) -> ::windows::core::Result<()>;
    fn Skip(&mut self, celt: u32) -> ::windows::core::Result<()>;
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn Clone(&mut self) -> ::windows::core::Result<IEnumDebugPropertyInfo>;
    fn GetCount(&mut self) -> ::windows::core::Result<u32>;
}
#[cfg(feature = "Win32_Foundation")]
impl IEnumDebugPropertyInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumDebugPropertyInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumDebugPropertyInfoVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, pi: *mut DebugPropertyInfo, pceltsfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Next(::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&pi), ::core::mem::transmute_copy(&pceltsfetched)).into()
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Skip(::core::mem::transmute_copy(&celt)).into()
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppepi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone() {
                ::core::result::Result::Ok(ok__) => {
                    *ppepi = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCount<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcelt: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCount() {
                ::core::result::Result::Ok(ok__) => {
                    *pcelt = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Next: Next::<Impl, IMPL_OFFSET>,
            Skip: Skip::<Impl, IMPL_OFFSET>,
            Reset: Reset::<Impl, IMPL_OFFSET>,
            Clone: Clone::<Impl, IMPL_OFFSET>,
            GetCount: GetCount::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumDebugPropertyInfo as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IEnumDebugStackFramesImpl: Sized {
    fn Next(&mut self, celt: u32, prgdsfd: *mut DebugStackFrameDescriptor, pceltfetched: *mut u32) -> ::windows::core::Result<()>;
    fn Skip(&mut self, celt: u32) -> ::windows::core::Result<()>;
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn Clone(&mut self) -> ::windows::core::Result<IEnumDebugStackFrames>;
}
#[cfg(feature = "Win32_Foundation")]
impl IEnumDebugStackFramesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumDebugStackFramesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumDebugStackFramesVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugStackFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, prgdsfd: *mut DebugStackFrameDescriptor, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Next(::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&prgdsfd), ::core::mem::transmute_copy(&pceltfetched)).into()
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugStackFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Skip(::core::mem::transmute_copy(&celt)).into()
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugStackFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugStackFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppedsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone() {
                ::core::result::Result::Ok(ok__) => {
                    *ppedsf = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Next: Next::<Impl, IMPL_OFFSET>,
            Skip: Skip::<Impl, IMPL_OFFSET>,
            Reset: Reset::<Impl, IMPL_OFFSET>,
            Clone: Clone::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumDebugStackFrames as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IEnumDebugStackFrames64Impl: Sized + IEnumDebugStackFramesImpl {
    fn Next64(&mut self, celt: u32, prgdsfd: *mut DebugStackFrameDescriptor64, pceltfetched: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IEnumDebugStackFrames64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumDebugStackFrames64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumDebugStackFrames64Vtbl {
        unsafe extern "system" fn Next64<Impl: IEnumDebugStackFrames64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, prgdsfd: *mut DebugStackFrameDescriptor64, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Next64(::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&prgdsfd), ::core::mem::transmute_copy(&pceltfetched)).into()
        }
        Self { base: IEnumDebugStackFramesVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(), Next64: Next64::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumDebugStackFrames64 as ::windows::core::Interface>::IID
    }
}
pub trait IEnumJsStackFramesImpl: Sized {
    fn Next(&mut self, cframecount: u32, pframes: *mut __MIDL___MIDL_itf_jscript9diag_0000_0007_0001, pcfetched: *mut u32) -> ::windows::core::Result<()>;
    fn Reset(&mut self) -> ::windows::core::Result<()>;
}
impl IEnumJsStackFramesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumJsStackFramesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumJsStackFramesVtbl {
        unsafe extern "system" fn Next<Impl: IEnumJsStackFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cframecount: u32, pframes: *mut __MIDL___MIDL_itf_jscript9diag_0000_0007_0001, pcfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Next(::core::mem::transmute_copy(&cframecount), ::core::mem::transmute_copy(&pframes), ::core::mem::transmute_copy(&pcfetched)).into()
        }
        unsafe extern "system" fn Reset<Impl: IEnumJsStackFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), Next: Next::<Impl, IMPL_OFFSET>, Reset: Reset::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumJsStackFrames as ::windows::core::Interface>::IID
    }
}
pub trait IEnumRemoteDebugApplicationThreadsImpl: Sized {
    fn Next(&mut self, celt: u32, pprdat: *mut ::core::option::Option<IRemoteDebugApplicationThread>, pceltfetched: *mut u32) -> ::windows::core::Result<()>;
    fn Skip(&mut self, celt: u32) -> ::windows::core::Result<()>;
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn Clone(&mut self) -> ::windows::core::Result<IEnumRemoteDebugApplicationThreads>;
}
impl IEnumRemoteDebugApplicationThreadsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumRemoteDebugApplicationThreadsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumRemoteDebugApplicationThreadsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumRemoteDebugApplicationThreadsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, pprdat: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Next(::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&pprdat), ::core::mem::transmute_copy(&pceltfetched)).into()
        }
        unsafe extern "system" fn Skip<Impl: IEnumRemoteDebugApplicationThreadsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Skip(::core::mem::transmute_copy(&celt)).into()
        }
        unsafe extern "system" fn Reset<Impl: IEnumRemoteDebugApplicationThreadsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn Clone<Impl: IEnumRemoteDebugApplicationThreadsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pperdat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone() {
                ::core::result::Result::Ok(ok__) => {
                    *pperdat = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Next: Next::<Impl, IMPL_OFFSET>,
            Skip: Skip::<Impl, IMPL_OFFSET>,
            Reset: Reset::<Impl, IMPL_OFFSET>,
            Clone: Clone::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumRemoteDebugApplicationThreads as ::windows::core::Interface>::IID
    }
}
pub trait IEnumRemoteDebugApplicationsImpl: Sized {
    fn Next(&mut self, celt: u32, ppda: *mut ::core::option::Option<IRemoteDebugApplication>, pceltfetched: *mut u32) -> ::windows::core::Result<()>;
    fn Skip(&mut self, celt: u32) -> ::windows::core::Result<()>;
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn Clone(&mut self) -> ::windows::core::Result<IEnumRemoteDebugApplications>;
}
impl IEnumRemoteDebugApplicationsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumRemoteDebugApplicationsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumRemoteDebugApplicationsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumRemoteDebugApplicationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, ppda: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Next(::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&ppda), ::core::mem::transmute_copy(&pceltfetched)).into()
        }
        unsafe extern "system" fn Skip<Impl: IEnumRemoteDebugApplicationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Skip(::core::mem::transmute_copy(&celt)).into()
        }
        unsafe extern "system" fn Reset<Impl: IEnumRemoteDebugApplicationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn Clone<Impl: IEnumRemoteDebugApplicationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppessd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone() {
                ::core::result::Result::Ok(ok__) => {
                    *ppessd = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Next: Next::<Impl, IMPL_OFFSET>,
            Skip: Skip::<Impl, IMPL_OFFSET>,
            Reset: Reset::<Impl, IMPL_OFFSET>,
            Clone: Clone::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumRemoteDebugApplications as ::windows::core::Interface>::IID
    }
}
pub trait IEquatableConceptImpl: Sized {
    fn AreObjectsEqual(&mut self, contextobject: ::core::option::Option<IModelObject>, otherobject: ::core::option::Option<IModelObject>) -> ::windows::core::Result<bool>;
}
impl IEquatableConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEquatableConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEquatableConceptVtbl {
        unsafe extern "system" fn AreObjectsEqual<Impl: IEquatableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, otherobject: ::windows::core::RawPtr, isequal: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AreObjectsEqual(::core::mem::transmute(&contextobject), ::core::mem::transmute(&otherobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *isequal = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), AreObjectsEqual: AreObjectsEqual::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEquatableConcept as ::windows::core::Interface>::IID
    }
}
pub trait IHostDataModelAccessImpl: Sized {
    fn GetDataModel(&mut self, manager: *mut ::core::option::Option<IDataModelManager>, host: *mut ::core::option::Option<IDebugHost>) -> ::windows::core::Result<()>;
}
impl IHostDataModelAccessVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IHostDataModelAccessImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IHostDataModelAccessVtbl {
        unsafe extern "system" fn GetDataModel<Impl: IHostDataModelAccessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, manager: *mut ::windows::core::RawPtr, host: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDataModel(::core::mem::transmute_copy(&manager), ::core::mem::transmute_copy(&host)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), GetDataModel: GetDataModel::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IHostDataModelAccess as ::windows::core::Interface>::IID
    }
}
pub trait IIndexableConceptImpl: Sized {
    fn GetDimensionality(&mut self, contextobject: ::core::option::Option<IModelObject>) -> ::windows::core::Result<u64>;
    fn GetAt(&mut self, contextobject: ::core::option::Option<IModelObject>, indexercount: u64, indexers: *const ::core::option::Option<IModelObject>, object: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn SetAt(&mut self, contextobject: ::core::option::Option<IModelObject>, indexercount: u64, indexers: *const ::core::option::Option<IModelObject>, value: ::core::option::Option<IModelObject>) -> ::windows::core::Result<()>;
}
impl IIndexableConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIndexableConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIndexableConceptVtbl {
        unsafe extern "system" fn GetDimensionality<Impl: IIndexableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, dimensionality: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDimensionality(::core::mem::transmute(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *dimensionality = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAt<Impl: IIndexableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, indexercount: u64, indexers: *const ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetAt(::core::mem::transmute(&contextobject), ::core::mem::transmute_copy(&indexercount), ::core::mem::transmute_copy(&indexers), ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)).into()
        }
        unsafe extern "system" fn SetAt<Impl: IIndexableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, indexercount: u64, indexers: *const ::windows::core::RawPtr, value: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetAt(::core::mem::transmute(&contextobject), ::core::mem::transmute_copy(&indexercount), ::core::mem::transmute_copy(&indexers), ::core::mem::transmute(&value)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetDimensionality: GetDimensionality::<Impl, IMPL_OFFSET>,
            GetAt: GetAt::<Impl, IMPL_OFFSET>,
            SetAt: SetAt::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIndexableConcept as ::windows::core::Interface>::IID
    }
}
pub trait IIterableConceptImpl: Sized {
    fn GetDefaultIndexDimensionality(&mut self, contextobject: ::core::option::Option<IModelObject>) -> ::windows::core::Result<u64>;
    fn GetIterator(&mut self, contextobject: ::core::option::Option<IModelObject>) -> ::windows::core::Result<IModelIterator>;
}
impl IIterableConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIterableConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIterableConceptVtbl {
        unsafe extern "system" fn GetDefaultIndexDimensionality<Impl: IIterableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, dimensionality: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDefaultIndexDimensionality(::core::mem::transmute(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *dimensionality = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIterator<Impl: IIterableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, iterator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIterator(::core::mem::transmute(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *iterator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetDefaultIndexDimensionality: GetDefaultIndexDimensionality::<Impl, IMPL_OFFSET>,
            GetIterator: GetIterator::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIterableConcept as ::windows::core::Interface>::IID
    }
}
pub trait IJsDebugImpl: Sized {
    fn OpenVirtualProcess(&mut self, processid: u32, runtimejsbaseaddress: u64, pdatatarget: ::core::option::Option<IJsDebugDataTarget>) -> ::windows::core::Result<IJsDebugProcess>;
}
impl IJsDebugVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsDebugImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsDebugVtbl {
        unsafe extern "system" fn OpenVirtualProcess<Impl: IJsDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processid: u32, runtimejsbaseaddress: u64, pdatatarget: ::windows::core::RawPtr, ppprocess: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OpenVirtualProcess(::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&runtimejsbaseaddress), ::core::mem::transmute(&pdatatarget)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppprocess = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), OpenVirtualProcess: OpenVirtualProcess::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsDebug as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IJsDebugBreakPointImpl: Sized {
    fn IsEnabled(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BOOL>;
    fn Enable(&mut self) -> ::windows::core::Result<()>;
    fn Disable(&mut self) -> ::windows::core::Result<()>;
    fn Delete(&mut self) -> ::windows::core::Result<()>;
    fn GetDocumentPosition(&mut self, pdocumentid: *mut u64, pcharacteroffset: *mut u32, pstatementcharcount: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IJsDebugBreakPointVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsDebugBreakPointImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsDebugBreakPointVtbl {
        unsafe extern "system" fn IsEnabled<Impl: IJsDebugBreakPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pisenabled: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsEnabled() {
                ::core::result::Result::Ok(ok__) => {
                    *pisenabled = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Enable<Impl: IJsDebugBreakPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Enable().into()
        }
        unsafe extern "system" fn Disable<Impl: IJsDebugBreakPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Disable().into()
        }
        unsafe extern "system" fn Delete<Impl: IJsDebugBreakPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Delete().into()
        }
        unsafe extern "system" fn GetDocumentPosition<Impl: IJsDebugBreakPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdocumentid: *mut u64, pcharacteroffset: *mut u32, pstatementcharcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDocumentPosition(::core::mem::transmute_copy(&pdocumentid), ::core::mem::transmute_copy(&pcharacteroffset), ::core::mem::transmute_copy(&pstatementcharcount)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            IsEnabled: IsEnabled::<Impl, IMPL_OFFSET>,
            Enable: Enable::<Impl, IMPL_OFFSET>,
            Disable: Disable::<Impl, IMPL_OFFSET>,
            Delete: Delete::<Impl, IMPL_OFFSET>,
            GetDocumentPosition: GetDocumentPosition::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsDebugBreakPoint as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IJsDebugDataTargetImpl: Sized {
    fn ReadMemory(&mut self, address: u64, flags: JsDebugReadMemoryFlags, pbuffer: *mut u8, size: u32, pbytesread: *mut u32) -> ::windows::core::Result<()>;
    fn WriteMemory(&mut self, address: u64, pmemory: *const u8, size: u32) -> ::windows::core::Result<()>;
    fn AllocateVirtualMemory(&mut self, address: u64, size: u32, allocationtype: u32, pageprotection: u32) -> ::windows::core::Result<u64>;
    fn FreeVirtualMemory(&mut self, address: u64, size: u32, freetype: u32) -> ::windows::core::Result<()>;
    fn GetTlsValue(&mut self, threadid: u32, tlsindex: u32) -> ::windows::core::Result<u64>;
    fn ReadBSTR(&mut self, address: u64) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn ReadNullTerminatedString(&mut self, address: u64, charactersize: u16, maxcharacters: u32) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn CreateStackFrameEnumerator(&mut self, threadid: u32) -> ::windows::core::Result<IEnumJsStackFrames>;
    fn GetThreadContext(&mut self, threadid: u32, contextflags: u32, contextsize: u32, pcontext: *mut ::core::ffi::c_void) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IJsDebugDataTargetVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsDebugDataTargetImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsDebugDataTargetVtbl {
        unsafe extern "system" fn ReadMemory<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, address: u64, flags: JsDebugReadMemoryFlags, pbuffer: *mut u8, size: u32, pbytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ReadMemory(::core::mem::transmute_copy(&address), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&pbuffer), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&pbytesread)).into()
        }
        unsafe extern "system" fn WriteMemory<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, address: u64, pmemory: *const u8, size: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).WriteMemory(::core::mem::transmute_copy(&address), ::core::mem::transmute_copy(&pmemory), ::core::mem::transmute_copy(&size)).into()
        }
        unsafe extern "system" fn AllocateVirtualMemory<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, address: u64, size: u32, allocationtype: u32, pageprotection: u32, pallocatedaddress: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AllocateVirtualMemory(::core::mem::transmute_copy(&address), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&allocationtype), ::core::mem::transmute_copy(&pageprotection)) {
                ::core::result::Result::Ok(ok__) => {
                    *pallocatedaddress = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FreeVirtualMemory<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, address: u64, size: u32, freetype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FreeVirtualMemory(::core::mem::transmute_copy(&address), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&freetype)).into()
        }
        unsafe extern "system" fn GetTlsValue<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, threadid: u32, tlsindex: u32, pvalue: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTlsValue(::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&tlsindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *pvalue = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadBSTR<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, address: u64, pstring: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReadBSTR(::core::mem::transmute_copy(&address)) {
                ::core::result::Result::Ok(ok__) => {
                    *pstring = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadNullTerminatedString<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, address: u64, charactersize: u16, maxcharacters: u32, pstring: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReadNullTerminatedString(::core::mem::transmute_copy(&address), ::core::mem::transmute_copy(&charactersize), ::core::mem::transmute_copy(&maxcharacters)) {
                ::core::result::Result::Ok(ok__) => {
                    *pstring = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateStackFrameEnumerator<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, threadid: u32, ppenumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateStackFrameEnumerator(::core::mem::transmute_copy(&threadid)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppenumerator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadContext<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, threadid: u32, contextflags: u32, contextsize: u32, pcontext: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetThreadContext(::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&contextflags), ::core::mem::transmute_copy(&contextsize), ::core::mem::transmute_copy(&pcontext)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            ReadMemory: ReadMemory::<Impl, IMPL_OFFSET>,
            WriteMemory: WriteMemory::<Impl, IMPL_OFFSET>,
            AllocateVirtualMemory: AllocateVirtualMemory::<Impl, IMPL_OFFSET>,
            FreeVirtualMemory: FreeVirtualMemory::<Impl, IMPL_OFFSET>,
            GetTlsValue: GetTlsValue::<Impl, IMPL_OFFSET>,
            ReadBSTR: ReadBSTR::<Impl, IMPL_OFFSET>,
            ReadNullTerminatedString: ReadNullTerminatedString::<Impl, IMPL_OFFSET>,
            CreateStackFrameEnumerator: CreateStackFrameEnumerator::<Impl, IMPL_OFFSET>,
            GetThreadContext: GetThreadContext::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsDebugDataTarget as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IJsDebugFrameImpl: Sized {
    fn GetStackRange(&mut self, pstart: *mut u64, pend: *mut u64) -> ::windows::core::Result<()>;
    fn GetName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetDocumentPositionWithId(&mut self, pdocumentid: *mut u64, pcharacteroffset: *mut u32, pstatementcharcount: *mut u32) -> ::windows::core::Result<()>;
    fn GetDocumentPositionWithName(&mut self, pdocumentname: *mut super::super::super::Foundation::BSTR, pline: *mut u32, pcolumn: *mut u32) -> ::windows::core::Result<()>;
    fn GetDebugProperty(&mut self) -> ::windows::core::Result<IJsDebugProperty>;
    fn GetReturnAddress(&mut self) -> ::windows::core::Result<u64>;
    fn Evaluate(&mut self, pexpressiontext: super::super::super::Foundation::PWSTR, ppdebugproperty: *mut ::core::option::Option<IJsDebugProperty>, perror: *mut super::super::super::Foundation::BSTR) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IJsDebugFrameVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsDebugFrameImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsDebugFrameVtbl {
        unsafe extern "system" fn GetStackRange<Impl: IJsDebugFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstart: *mut u64, pend: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetStackRange(::core::mem::transmute_copy(&pstart), ::core::mem::transmute_copy(&pend)).into()
        }
        unsafe extern "system" fn GetName<Impl: IJsDebugFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName() {
                ::core::result::Result::Ok(ok__) => {
                    *pname = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDocumentPositionWithId<Impl: IJsDebugFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdocumentid: *mut u64, pcharacteroffset: *mut u32, pstatementcharcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDocumentPositionWithId(::core::mem::transmute_copy(&pdocumentid), ::core::mem::transmute_copy(&pcharacteroffset), ::core::mem::transmute_copy(&pstatementcharcount)).into()
        }
        unsafe extern "system" fn GetDocumentPositionWithName<Impl: IJsDebugFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdocumentname: *mut super::super::super::Foundation::BSTR, pline: *mut u32, pcolumn: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDocumentPositionWithName(::core::mem::transmute_copy(&pdocumentname), ::core::mem::transmute_copy(&pline), ::core::mem::transmute_copy(&pcolumn)).into()
        }
        unsafe extern "system" fn GetDebugProperty<Impl: IJsDebugFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdebugproperty: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDebugProperty() {
                ::core::result::Result::Ok(ok__) => {
                    *ppdebugproperty = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetReturnAddress<Impl: IJsDebugFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, preturnaddress: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetReturnAddress() {
                ::core::result::Result::Ok(ok__) => {
                    *preturnaddress = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Evaluate<Impl: IJsDebugFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pexpressiontext: super::super::super::Foundation::PWSTR, ppdebugproperty: *mut ::windows::core::RawPtr, perror: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Evaluate(::core::mem::transmute_copy(&pexpressiontext), ::core::mem::transmute_copy(&ppdebugproperty), ::core::mem::transmute_copy(&perror)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetStackRange: GetStackRange::<Impl, IMPL_OFFSET>,
            GetName: GetName::<Impl, IMPL_OFFSET>,
            GetDocumentPositionWithId: GetDocumentPositionWithId::<Impl, IMPL_OFFSET>,
            GetDocumentPositionWithName: GetDocumentPositionWithName::<Impl, IMPL_OFFSET>,
            GetDebugProperty: GetDebugProperty::<Impl, IMPL_OFFSET>,
            GetReturnAddress: GetReturnAddress::<Impl, IMPL_OFFSET>,
            Evaluate: Evaluate::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsDebugFrame as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IJsDebugProcessImpl: Sized {
    fn CreateStackWalker(&mut self, threadid: u32) -> ::windows::core::Result<IJsDebugStackWalker>;
    fn CreateBreakPoint(&mut self, documentid: u64, characteroffset: u32, charactercount: u32, isenabled: super::super::super::Foundation::BOOL) -> ::windows::core::Result<IJsDebugBreakPoint>;
    fn PerformAsyncBreak(&mut self, threadid: u32) -> ::windows::core::Result<()>;
    fn GetExternalStepAddress(&mut self) -> ::windows::core::Result<u64>;
}
#[cfg(feature = "Win32_Foundation")]
impl IJsDebugProcessVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsDebugProcessImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsDebugProcessVtbl {
        unsafe extern "system" fn CreateStackWalker<Impl: IJsDebugProcessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, threadid: u32, ppstackwalker: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateStackWalker(::core::mem::transmute_copy(&threadid)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppstackwalker = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateBreakPoint<Impl: IJsDebugProcessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, documentid: u64, characteroffset: u32, charactercount: u32, isenabled: super::super::super::Foundation::BOOL, ppdebugbreakpoint: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateBreakPoint(::core::mem::transmute_copy(&documentid), ::core::mem::transmute_copy(&characteroffset), ::core::mem::transmute_copy(&charactercount), ::core::mem::transmute_copy(&isenabled)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppdebugbreakpoint = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PerformAsyncBreak<Impl: IJsDebugProcessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, threadid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).PerformAsyncBreak(::core::mem::transmute_copy(&threadid)).into()
        }
        unsafe extern "system" fn GetExternalStepAddress<Impl: IJsDebugProcessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcodeaddress: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExternalStepAddress() {
                ::core::result::Result::Ok(ok__) => {
                    *pcodeaddress = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            CreateStackWalker: CreateStackWalker::<Impl, IMPL_OFFSET>,
            CreateBreakPoint: CreateBreakPoint::<Impl, IMPL_OFFSET>,
            PerformAsyncBreak: PerformAsyncBreak::<Impl, IMPL_OFFSET>,
            GetExternalStepAddress: GetExternalStepAddress::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsDebugProcess as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IJsDebugPropertyImpl: Sized {
    fn GetPropertyInfo(&mut self, nradix: u32) -> ::windows::core::Result<JsDebugPropertyInfo>;
    fn GetMembers(&mut self, members: JS_PROPERTY_MEMBERS) -> ::windows::core::Result<IJsEnumDebugProperty>;
}
#[cfg(feature = "Win32_Foundation")]
impl IJsDebugPropertyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsDebugPropertyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsDebugPropertyVtbl {
        unsafe extern "system" fn GetPropertyInfo<Impl: IJsDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, nradix: u32, ppropertyinfo: *mut JsDebugPropertyInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPropertyInfo(::core::mem::transmute_copy(&nradix)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppropertyinfo = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMembers<Impl: IJsDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, members: JS_PROPERTY_MEMBERS, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMembers(::core::mem::transmute_copy(&members)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppenum = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetPropertyInfo: GetPropertyInfo::<Impl, IMPL_OFFSET>,
            GetMembers: GetMembers::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsDebugProperty as ::windows::core::Interface>::IID
    }
}
pub trait IJsDebugStackWalkerImpl: Sized {
    fn GetNext(&mut self) -> ::windows::core::Result<IJsDebugFrame>;
}
impl IJsDebugStackWalkerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsDebugStackWalkerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsDebugStackWalkerVtbl {
        unsafe extern "system" fn GetNext<Impl: IJsDebugStackWalkerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppframe: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNext() {
                ::core::result::Result::Ok(ok__) => {
                    *ppframe = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), GetNext: GetNext::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsDebugStackWalker as ::windows::core::Interface>::IID
    }
}
pub trait IJsEnumDebugPropertyImpl: Sized {
    fn Next(&mut self, count: u32, ppdebugproperty: *mut ::core::option::Option<IJsDebugProperty>, pactualcount: *mut u32) -> ::windows::core::Result<()>;
    fn GetCount(&mut self) -> ::windows::core::Result<u32>;
}
impl IJsEnumDebugPropertyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsEnumDebugPropertyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsEnumDebugPropertyVtbl {
        unsafe extern "system" fn Next<Impl: IJsEnumDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ppdebugproperty: *mut ::windows::core::RawPtr, pactualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Next(::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ppdebugproperty), ::core::mem::transmute_copy(&pactualcount)).into()
        }
        unsafe extern "system" fn GetCount<Impl: IJsEnumDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCount() {
                ::core::result::Result::Ok(ok__) => {
                    *pcount = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), Next: Next::<Impl, IMPL_OFFSET>, GetCount: GetCount::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsEnumDebugProperty as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IKeyEnumeratorImpl: Sized {
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn GetNext(&mut self, key: *mut super::super::super::Foundation::BSTR, value: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IKeyEnumeratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IKeyEnumeratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IKeyEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IKeyEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn GetNext<Impl: IKeyEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *mut super::super::super::Foundation::BSTR, value: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNext(::core::mem::transmute_copy(&key), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&metadata)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), Reset: Reset::<Impl, IMPL_OFFSET>, GetNext: GetNext::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IKeyEnumerator as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IKeyStoreImpl: Sized {
    fn GetKey(&mut self, key: super::super::super::Foundation::PWSTR, object: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn SetKey(&mut self, key: super::super::super::Foundation::PWSTR, object: ::core::option::Option<IModelObject>, metadata: ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn GetKeyValue(&mut self, key: super::super::super::Foundation::PWSTR, object: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn SetKeyValue(&mut self, key: super::super::super::Foundation::PWSTR, object: ::core::option::Option<IModelObject>) -> ::windows::core::Result<()>;
    fn ClearKeys(&mut self) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IKeyStoreVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IKeyStoreImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IKeyStoreVtbl {
        unsafe extern "system" fn GetKey<Impl: IKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKey(::core::mem::transmute_copy(&key), ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)).into()
        }
        unsafe extern "system" fn SetKey<Impl: IKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: ::windows::core::RawPtr, metadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKey(::core::mem::transmute_copy(&key), ::core::mem::transmute(&object), ::core::mem::transmute(&metadata)).into()
        }
        unsafe extern "system" fn GetKeyValue<Impl: IKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKeyValue(::core::mem::transmute_copy(&key), ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)).into()
        }
        unsafe extern "system" fn SetKeyValue<Impl: IKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKeyValue(::core::mem::transmute_copy(&key), ::core::mem::transmute(&object)).into()
        }
        unsafe extern "system" fn ClearKeys<Impl: IKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ClearKeys().into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetKey: GetKey::<Impl, IMPL_OFFSET>,
            SetKey: SetKey::<Impl, IMPL_OFFSET>,
            GetKeyValue: GetKeyValue::<Impl, IMPL_OFFSET>,
            SetKeyValue: SetKeyValue::<Impl, IMPL_OFFSET>,
            ClearKeys: ClearKeys::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IKeyStore as ::windows::core::Interface>::IID
    }
}
pub trait IMachineDebugManagerImpl: Sized {
    fn AddApplication(&mut self, pda: ::core::option::Option<IRemoteDebugApplication>) -> ::windows::core::Result<u32>;
    fn RemoveApplication(&mut self, dwappcookie: u32) -> ::windows::core::Result<()>;
    fn EnumApplications(&mut self) -> ::windows::core::Result<IEnumRemoteDebugApplications>;
}
impl IMachineDebugManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMachineDebugManagerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMachineDebugManagerVtbl {
        unsafe extern "system" fn AddApplication<Impl: IMachineDebugManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, pdwappcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddApplication(::core::mem::transmute(&pda)) {
                ::core::result::Result::Ok(ok__) => {
                    *pdwappcookie = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveApplication<Impl: IMachineDebugManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveApplication(::core::mem::transmute_copy(&dwappcookie)).into()
        }
        unsafe extern "system" fn EnumApplications<Impl: IMachineDebugManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppeda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumApplications() {
                ::core::result::Result::Ok(ok__) => {
                    *ppeda = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            AddApplication: AddApplication::<Impl, IMPL_OFFSET>,
            RemoveApplication: RemoveApplication::<Impl, IMPL_OFFSET>,
            EnumApplications: EnumApplications::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMachineDebugManager as ::windows::core::Interface>::IID
    }
}
pub trait IMachineDebugManagerCookieImpl: Sized {
    fn AddApplication(&mut self, pda: ::core::option::Option<IRemoteDebugApplication>, dwdebugappcookie: u32) -> ::windows::core::Result<u32>;
    fn RemoveApplication(&mut self, dwdebugappcookie: u32, dwappcookie: u32) -> ::windows::core::Result<()>;
    fn EnumApplications(&mut self) -> ::windows::core::Result<IEnumRemoteDebugApplications>;
}
impl IMachineDebugManagerCookieVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMachineDebugManagerCookieImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMachineDebugManagerCookieVtbl {
        unsafe extern "system" fn AddApplication<Impl: IMachineDebugManagerCookieImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, dwdebugappcookie: u32, pdwappcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddApplication(::core::mem::transmute(&pda), ::core::mem::transmute_copy(&dwdebugappcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *pdwappcookie = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveApplication<Impl: IMachineDebugManagerCookieImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwdebugappcookie: u32, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveApplication(::core::mem::transmute_copy(&dwdebugappcookie), ::core::mem::transmute_copy(&dwappcookie)).into()
        }
        unsafe extern "system" fn EnumApplications<Impl: IMachineDebugManagerCookieImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppeda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumApplications() {
                ::core::result::Result::Ok(ok__) => {
                    *ppeda = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            AddApplication: AddApplication::<Impl, IMPL_OFFSET>,
            RemoveApplication: RemoveApplication::<Impl, IMPL_OFFSET>,
            EnumApplications: EnumApplications::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMachineDebugManagerCookie as ::windows::core::Interface>::IID
    }
}
pub trait IMachineDebugManagerEventsImpl: Sized {
    fn onAddApplication(&mut self, pda: ::core::option::Option<IRemoteDebugApplication>, dwappcookie: u32) -> ::windows::core::Result<()>;
    fn onRemoveApplication(&mut self, pda: ::core::option::Option<IRemoteDebugApplication>, dwappcookie: u32) -> ::windows::core::Result<()>;
}
impl IMachineDebugManagerEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMachineDebugManagerEventsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMachineDebugManagerEventsVtbl {
        unsafe extern "system" fn onAddApplication<Impl: IMachineDebugManagerEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onAddApplication(::core::mem::transmute(&pda), ::core::mem::transmute_copy(&dwappcookie)).into()
        }
        unsafe extern "system" fn onRemoveApplication<Impl: IMachineDebugManagerEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).onRemoveApplication(::core::mem::transmute(&pda), ::core::mem::transmute_copy(&dwappcookie)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            onAddApplication: onAddApplication::<Impl, IMPL_OFFSET>,
            onRemoveApplication: onRemoveApplication::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMachineDebugManagerEvents as ::windows::core::Interface>::IID
    }
}
pub trait IModelIteratorImpl: Sized {
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn GetNext(&mut self, object: *mut ::core::option::Option<IModelObject>, dimensions: u64, indexers: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
}
impl IModelIteratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IModelIteratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IModelIteratorVtbl {
        unsafe extern "system" fn Reset<Impl: IModelIteratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn GetNext<Impl: IModelIteratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, object: *mut ::windows::core::RawPtr, dimensions: u64, indexers: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNext(::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&dimensions), ::core::mem::transmute_copy(&indexers), ::core::mem::transmute_copy(&metadata)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), Reset: Reset::<Impl, IMPL_OFFSET>, GetNext: GetNext::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IModelIterator as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IModelKeyReferenceImpl: Sized {
    fn GetKeyName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetOriginalObject(&mut self) -> ::windows::core::Result<IModelObject>;
    fn GetContextObject(&mut self) -> ::windows::core::Result<IModelObject>;
    fn GetKey(&mut self, object: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn GetKeyValue(&mut self, object: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn SetKey(&mut self, object: ::core::option::Option<IModelObject>, metadata: ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn SetKeyValue(&mut self, object: ::core::option::Option<IModelObject>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IModelKeyReferenceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IModelKeyReferenceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IModelKeyReferenceVtbl {
        unsafe extern "system" fn GetKeyName<Impl: IModelKeyReferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, keyname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetKeyName() {
                ::core::result::Result::Ok(ok__) => {
                    *keyname = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOriginalObject<Impl: IModelKeyReferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, originalobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOriginalObject() {
                ::core::result::Result::Ok(ok__) => {
                    *originalobject = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContextObject<Impl: IModelKeyReferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, containingobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetContextObject() {
                ::core::result::Result::Ok(ok__) => {
                    *containingobject = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKey<Impl: IModelKeyReferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKey(::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)).into()
        }
        unsafe extern "system" fn GetKeyValue<Impl: IModelKeyReferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKeyValue(::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)).into()
        }
        unsafe extern "system" fn SetKey<Impl: IModelKeyReferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, object: ::windows::core::RawPtr, metadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKey(::core::mem::transmute(&object), ::core::mem::transmute(&metadata)).into()
        }
        unsafe extern "system" fn SetKeyValue<Impl: IModelKeyReferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, object: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKeyValue(::core::mem::transmute(&object)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetKeyName: GetKeyName::<Impl, IMPL_OFFSET>,
            GetOriginalObject: GetOriginalObject::<Impl, IMPL_OFFSET>,
            GetContextObject: GetContextObject::<Impl, IMPL_OFFSET>,
            GetKey: GetKey::<Impl, IMPL_OFFSET>,
            GetKeyValue: GetKeyValue::<Impl, IMPL_OFFSET>,
            SetKey: SetKey::<Impl, IMPL_OFFSET>,
            SetKeyValue: SetKeyValue::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IModelKeyReference as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IModelKeyReference2Impl: Sized + IModelKeyReferenceImpl {
    fn OverrideContextObject(&mut self, newcontextobject: ::core::option::Option<IModelObject>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IModelKeyReference2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IModelKeyReference2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IModelKeyReference2Vtbl {
        unsafe extern "system" fn OverrideContextObject<Impl: IModelKeyReference2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newcontextobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OverrideContextObject(::core::mem::transmute(&newcontextobject)).into()
        }
        Self {
            base: IModelKeyReferenceVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            OverrideContextObject: OverrideContextObject::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IModelKeyReference2 as ::windows::core::Interface>::IID
    }
}
pub trait IModelMethodImpl: Sized {
    fn Call(&mut self, pcontextobject: ::core::option::Option<IModelObject>, argcount: u64, pparguments: *const ::core::option::Option<IModelObject>, ppresult: *mut ::core::option::Option<IModelObject>, ppmetadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
}
impl IModelMethodVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IModelMethodImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IModelMethodVtbl {
        unsafe extern "system" fn Call<Impl: IModelMethodImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcontextobject: ::windows::core::RawPtr, argcount: u64, pparguments: *const ::windows::core::RawPtr, ppresult: *mut ::windows::core::RawPtr, ppmetadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Call(::core::mem::transmute(&pcontextobject), ::core::mem::transmute_copy(&argcount), ::core::mem::transmute_copy(&pparguments), ::core::mem::transmute_copy(&ppresult), ::core::mem::transmute_copy(&ppmetadata)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), Call: Call::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IModelMethod as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IModelObjectImpl: Sized {
    fn GetContext(&mut self) -> ::windows::core::Result<IDebugHostContext>;
    fn GetKind(&mut self) -> ::windows::core::Result<ModelObjectKind>;
    fn GetIntrinsicValue(&mut self) -> ::windows::core::Result<super::super::Com::VARIANT>;
    fn GetIntrinsicValueAs(&mut self, vt: u16) -> ::windows::core::Result<super::super::Com::VARIANT>;
    fn GetKeyValue(&mut self, key: super::super::super::Foundation::PWSTR, object: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn SetKeyValue(&mut self, key: super::super::super::Foundation::PWSTR, object: ::core::option::Option<IModelObject>) -> ::windows::core::Result<()>;
    fn EnumerateKeyValues(&mut self) -> ::windows::core::Result<IKeyEnumerator>;
    fn GetRawValue(&mut self, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, searchflags: u32) -> ::windows::core::Result<IModelObject>;
    fn EnumerateRawValues(&mut self, kind: SymbolKind, searchflags: u32) -> ::windows::core::Result<IRawEnumerator>;
    fn Dereference(&mut self) -> ::windows::core::Result<IModelObject>;
    fn TryCastToRuntimeType(&mut self) -> ::windows::core::Result<IModelObject>;
    fn GetConcept(&mut self, conceptid: *const ::windows::core::GUID, conceptinterface: *mut ::core::option::Option<::windows::core::IUnknown>, conceptmetadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn GetLocation(&mut self) -> ::windows::core::Result<Location>;
    fn GetTypeInfo(&mut self) -> ::windows::core::Result<IDebugHostType>;
    fn GetTargetInfo(&mut self, location: *mut Location, r#type: *mut ::core::option::Option<IDebugHostType>) -> ::windows::core::Result<()>;
    fn GetNumberOfParentModels(&mut self) -> ::windows::core::Result<u64>;
    fn GetParentModel(&mut self, i: u64, model: *mut ::core::option::Option<IModelObject>, contextobject: *mut ::core::option::Option<IModelObject>) -> ::windows::core::Result<()>;
    fn AddParentModel(&mut self, model: ::core::option::Option<IModelObject>, contextobject: ::core::option::Option<IModelObject>, r#override: u8) -> ::windows::core::Result<()>;
    fn RemoveParentModel(&mut self, model: ::core::option::Option<IModelObject>) -> ::windows::core::Result<()>;
    fn GetKey(&mut self, key: super::super::super::Foundation::PWSTR, object: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn GetKeyReference(&mut self, key: super::super::super::Foundation::PWSTR, objectreference: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn SetKey(&mut self, key: super::super::super::Foundation::PWSTR, object: ::core::option::Option<IModelObject>, metadata: ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn ClearKeys(&mut self) -> ::windows::core::Result<()>;
    fn EnumerateKeys(&mut self) -> ::windows::core::Result<IKeyEnumerator>;
    fn EnumerateKeyReferences(&mut self) -> ::windows::core::Result<IKeyEnumerator>;
    fn SetConcept(&mut self, conceptid: *const ::windows::core::GUID, conceptinterface: ::core::option::Option<::windows::core::IUnknown>, conceptmetadata: ::core::option::Option<IKeyStore>) -> ::windows::core::Result<()>;
    fn ClearConcepts(&mut self) -> ::windows::core::Result<()>;
    fn GetRawReference(&mut self, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, searchflags: u32) -> ::windows::core::Result<IModelObject>;
    fn EnumerateRawReferences(&mut self, kind: SymbolKind, searchflags: u32) -> ::windows::core::Result<IRawEnumerator>;
    fn SetContextForDataModel(&mut self, datamodelobject: ::core::option::Option<IModelObject>, context: ::core::option::Option<::windows::core::IUnknown>) -> ::windows::core::Result<()>;
    fn GetContextForDataModel(&mut self, datamodelobject: ::core::option::Option<IModelObject>) -> ::windows::core::Result<::windows::core::IUnknown>;
    fn Compare(&mut self, other: ::core::option::Option<IModelObject>) -> ::windows::core::Result<IModelObject>;
    fn IsEqualTo(&mut self, other: ::core::option::Option<IModelObject>) -> ::windows::core::Result<bool>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IModelObjectVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IModelObjectImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IModelObjectVtbl {
        unsafe extern "system" fn GetContext<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetContext() {
                ::core::result::Result::Ok(ok__) => {
                    *context = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKind<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: *mut ModelObjectKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetKind() {
                ::core::result::Result::Ok(ok__) => {
                    *kind = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIntrinsicValue<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, intrinsicdata: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIntrinsicValue() {
                ::core::result::Result::Ok(ok__) => {
                    *intrinsicdata = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIntrinsicValueAs<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vt: u16, intrinsicdata: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIntrinsicValueAs(::core::mem::transmute_copy(&vt)) {
                ::core::result::Result::Ok(ok__) => {
                    *intrinsicdata = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKeyValue<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKeyValue(::core::mem::transmute_copy(&key), ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)).into()
        }
        unsafe extern "system" fn SetKeyValue<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKeyValue(::core::mem::transmute_copy(&key), ::core::mem::transmute(&object)).into()
        }
        unsafe extern "system" fn EnumerateKeyValues<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateKeyValues() {
                ::core::result::Result::Ok(ok__) => {
                    *enumerator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRawValue<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, searchflags: u32, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRawValue(::core::mem::transmute_copy(&kind), ::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&searchflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *object = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateRawValues<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, searchflags: u32, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateRawValues(::core::mem::transmute_copy(&kind), ::core::mem::transmute_copy(&searchflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *enumerator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Dereference<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Dereference() {
                ::core::result::Result::Ok(ok__) => {
                    *object = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TryCastToRuntimeType<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, runtimetypedobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TryCastToRuntimeType() {
                ::core::result::Result::Ok(ok__) => {
                    *runtimetypedobject = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetConcept<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, conceptid: *const ::windows::core::GUID, conceptinterface: *mut *mut ::core::ffi::c_void, conceptmetadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetConcept(::core::mem::transmute_copy(&conceptid), ::core::mem::transmute_copy(&conceptinterface), ::core::mem::transmute_copy(&conceptmetadata)).into()
        }
        unsafe extern "system" fn GetLocation<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLocation() {
                ::core::result::Result::Ok(ok__) => {
                    *location = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeInfo<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeInfo() {
                ::core::result::Result::Ok(ok__) => {
                    *r#type = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTargetInfo<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, location: *mut Location, r#type: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetTargetInfo(::core::mem::transmute_copy(&location), ::core::mem::transmute_copy(&r#type)).into()
        }
        unsafe extern "system" fn GetNumberOfParentModels<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, nummodels: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberOfParentModels() {
                ::core::result::Result::Ok(ok__) => {
                    *nummodels = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetParentModel<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, i: u64, model: *mut ::windows::core::RawPtr, contextobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetParentModel(::core::mem::transmute_copy(&i), ::core::mem::transmute_copy(&model), ::core::mem::transmute_copy(&contextobject)).into()
        }
        unsafe extern "system" fn AddParentModel<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, model: ::windows::core::RawPtr, contextobject: ::windows::core::RawPtr, r#override: u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).AddParentModel(::core::mem::transmute(&model), ::core::mem::transmute(&contextobject), ::core::mem::transmute_copy(&r#override)).into()
        }
        unsafe extern "system" fn RemoveParentModel<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, model: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveParentModel(::core::mem::transmute(&model)).into()
        }
        unsafe extern "system" fn GetKey<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKey(::core::mem::transmute_copy(&key), ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)).into()
        }
        unsafe extern "system" fn GetKeyReference<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, objectreference: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetKeyReference(::core::mem::transmute_copy(&key), ::core::mem::transmute_copy(&objectreference), ::core::mem::transmute_copy(&metadata)).into()
        }
        unsafe extern "system" fn SetKey<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: ::windows::core::RawPtr, metadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetKey(::core::mem::transmute_copy(&key), ::core::mem::transmute(&object), ::core::mem::transmute(&metadata)).into()
        }
        unsafe extern "system" fn ClearKeys<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ClearKeys().into()
        }
        unsafe extern "system" fn EnumerateKeys<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateKeys() {
                ::core::result::Result::Ok(ok__) => {
                    *enumerator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateKeyReferences<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateKeyReferences() {
                ::core::result::Result::Ok(ok__) => {
                    *enumerator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetConcept<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, conceptid: *const ::windows::core::GUID, conceptinterface: *mut ::core::ffi::c_void, conceptmetadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetConcept(::core::mem::transmute_copy(&conceptid), ::core::mem::transmute(&conceptinterface), ::core::mem::transmute(&conceptmetadata)).into()
        }
        unsafe extern "system" fn ClearConcepts<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ClearConcepts().into()
        }
        unsafe extern "system" fn GetRawReference<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, searchflags: u32, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRawReference(::core::mem::transmute_copy(&kind), ::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&searchflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *object = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateRawReferences<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, searchflags: u32, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateRawReferences(::core::mem::transmute_copy(&kind), ::core::mem::transmute_copy(&searchflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *enumerator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetContextForDataModel<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, datamodelobject: ::windows::core::RawPtr, context: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetContextForDataModel(::core::mem::transmute(&datamodelobject), ::core::mem::transmute(&context)).into()
        }
        unsafe extern "system" fn GetContextForDataModel<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, datamodelobject: ::windows::core::RawPtr, context: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetContextForDataModel(::core::mem::transmute(&datamodelobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *context = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Compare<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, other: ::windows::core::RawPtr, ppresult: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Compare(::core::mem::transmute(&other)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppresult = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsEqualTo<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, other: ::windows::core::RawPtr, equal: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsEqualTo(::core::mem::transmute(&other)) {
                ::core::result::Result::Ok(ok__) => {
                    *equal = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetContext: GetContext::<Impl, IMPL_OFFSET>,
            GetKind: GetKind::<Impl, IMPL_OFFSET>,
            GetIntrinsicValue: GetIntrinsicValue::<Impl, IMPL_OFFSET>,
            GetIntrinsicValueAs: GetIntrinsicValueAs::<Impl, IMPL_OFFSET>,
            GetKeyValue: GetKeyValue::<Impl, IMPL_OFFSET>,
            SetKeyValue: SetKeyValue::<Impl, IMPL_OFFSET>,
            EnumerateKeyValues: EnumerateKeyValues::<Impl, IMPL_OFFSET>,
            GetRawValue: GetRawValue::<Impl, IMPL_OFFSET>,
            EnumerateRawValues: EnumerateRawValues::<Impl, IMPL_OFFSET>,
            Dereference: Dereference::<Impl, IMPL_OFFSET>,
            TryCastToRuntimeType: TryCastToRuntimeType::<Impl, IMPL_OFFSET>,
            GetConcept: GetConcept::<Impl, IMPL_OFFSET>,
            GetLocation: GetLocation::<Impl, IMPL_OFFSET>,
            GetTypeInfo: GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetTargetInfo: GetTargetInfo::<Impl, IMPL_OFFSET>,
            GetNumberOfParentModels: GetNumberOfParentModels::<Impl, IMPL_OFFSET>,
            GetParentModel: GetParentModel::<Impl, IMPL_OFFSET>,
            AddParentModel: AddParentModel::<Impl, IMPL_OFFSET>,
            RemoveParentModel: RemoveParentModel::<Impl, IMPL_OFFSET>,
            GetKey: GetKey::<Impl, IMPL_OFFSET>,
            GetKeyReference: GetKeyReference::<Impl, IMPL_OFFSET>,
            SetKey: SetKey::<Impl, IMPL_OFFSET>,
            ClearKeys: ClearKeys::<Impl, IMPL_OFFSET>,
            EnumerateKeys: EnumerateKeys::<Impl, IMPL_OFFSET>,
            EnumerateKeyReferences: EnumerateKeyReferences::<Impl, IMPL_OFFSET>,
            SetConcept: SetConcept::<Impl, IMPL_OFFSET>,
            ClearConcepts: ClearConcepts::<Impl, IMPL_OFFSET>,
            GetRawReference: GetRawReference::<Impl, IMPL_OFFSET>,
            EnumerateRawReferences: EnumerateRawReferences::<Impl, IMPL_OFFSET>,
            SetContextForDataModel: SetContextForDataModel::<Impl, IMPL_OFFSET>,
            GetContextForDataModel: GetContextForDataModel::<Impl, IMPL_OFFSET>,
            Compare: Compare::<Impl, IMPL_OFFSET>,
            IsEqualTo: IsEqualTo::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IModelObject as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IModelPropertyAccessorImpl: Sized {
    fn GetValue(&mut self, key: super::super::super::Foundation::PWSTR, contextobject: ::core::option::Option<IModelObject>) -> ::windows::core::Result<IModelObject>;
    fn SetValue(&mut self, key: super::super::super::Foundation::PWSTR, contextobject: ::core::option::Option<IModelObject>, value: ::core::option::Option<IModelObject>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IModelPropertyAccessorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IModelPropertyAccessorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IModelPropertyAccessorVtbl {
        unsafe extern "system" fn GetValue<Impl: IModelPropertyAccessorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, contextobject: ::windows::core::RawPtr, value: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetValue(::core::mem::transmute_copy(&key), ::core::mem::transmute(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *value = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetValue<Impl: IModelPropertyAccessorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, contextobject: ::windows::core::RawPtr, value: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetValue(::core::mem::transmute_copy(&key), ::core::mem::transmute(&contextobject), ::core::mem::transmute(&value)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetValue: GetValue::<Impl, IMPL_OFFSET>,
            SetValue: SetValue::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IModelPropertyAccessor as ::windows::core::Interface>::IID
    }
}
pub trait IObjectSafetyImpl: Sized {
    fn GetInterfaceSafetyOptions(&mut self, riid: *const ::windows::core::GUID, pdwsupportedoptions: *mut u32, pdwenabledoptions: *mut u32) -> ::windows::core::Result<()>;
    fn SetInterfaceSafetyOptions(&mut self, riid: *const ::windows::core::GUID, dwoptionsetmask: u32, dwenabledoptions: u32) -> ::windows::core::Result<()>;
}
impl IObjectSafetyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IObjectSafetyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IObjectSafetyVtbl {
        unsafe extern "system" fn GetInterfaceSafetyOptions<Impl: IObjectSafetyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, pdwsupportedoptions: *mut u32, pdwenabledoptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetInterfaceSafetyOptions(::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&pdwsupportedoptions), ::core::mem::transmute_copy(&pdwenabledoptions)).into()
        }
        unsafe extern "system" fn SetInterfaceSafetyOptions<Impl: IObjectSafetyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, dwoptionsetmask: u32, dwenabledoptions: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetInterfaceSafetyOptions(::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&dwoptionsetmask), ::core::mem::transmute_copy(&dwenabledoptions)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetInterfaceSafetyOptions: GetInterfaceSafetyOptions::<Impl, IMPL_OFFSET>,
            SetInterfaceSafetyOptions: SetInterfaceSafetyOptions::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IObjectSafety as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
pub trait IPerPropertyBrowsing2Impl: Sized {
    fn GetDisplayString(&mut self, dispid: i32) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn MapPropertyToPage(&mut self, dispid: i32) -> ::windows::core::Result<::windows::core::GUID>;
    fn GetPredefinedStrings(&mut self, dispid: i32, pcastrings: *mut super::super::Ole::CALPOLESTR, pcacookies: *mut super::super::Ole::CADWORD) -> ::windows::core::Result<()>;
    fn SetPredefinedValue(&mut self, dispid: i32, dwcookie: u32) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl IPerPropertyBrowsing2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPerPropertyBrowsing2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPerPropertyBrowsing2Vtbl {
        unsafe extern "system" fn GetDisplayString<Impl: IPerPropertyBrowsing2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dispid: i32, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDisplayString(::core::mem::transmute_copy(&dispid)) {
                ::core::result::Result::Ok(ok__) => {
                    *pbstr = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MapPropertyToPage<Impl: IPerPropertyBrowsing2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dispid: i32, pclsidproppage: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MapPropertyToPage(::core::mem::transmute_copy(&dispid)) {
                ::core::result::Result::Ok(ok__) => {
                    *pclsidproppage = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPredefinedStrings<Impl: IPerPropertyBrowsing2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dispid: i32, pcastrings: *mut super::super::Ole::CALPOLESTR, pcacookies: *mut super::super::Ole::CADWORD) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetPredefinedStrings(::core::mem::transmute_copy(&dispid), ::core::mem::transmute_copy(&pcastrings), ::core::mem::transmute_copy(&pcacookies)).into()
        }
        unsafe extern "system" fn SetPredefinedValue<Impl: IPerPropertyBrowsing2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dispid: i32, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetPredefinedValue(::core::mem::transmute_copy(&dispid), ::core::mem::transmute_copy(&dwcookie)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetDisplayString: GetDisplayString::<Impl, IMPL_OFFSET>,
            MapPropertyToPage: MapPropertyToPage::<Impl, IMPL_OFFSET>,
            GetPredefinedStrings: GetPredefinedStrings::<Impl, IMPL_OFFSET>,
            SetPredefinedValue: SetPredefinedValue::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPerPropertyBrowsing2 as ::windows::core::Interface>::IID
    }
}
pub trait IPreferredRuntimeTypeConceptImpl: Sized {
    fn CastToPreferredRuntimeType(&mut self, contextobject: ::core::option::Option<IModelObject>) -> ::windows::core::Result<IModelObject>;
}
impl IPreferredRuntimeTypeConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPreferredRuntimeTypeConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPreferredRuntimeTypeConceptVtbl {
        unsafe extern "system" fn CastToPreferredRuntimeType<Impl: IPreferredRuntimeTypeConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CastToPreferredRuntimeType(::core::mem::transmute(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *object = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), CastToPreferredRuntimeType: CastToPreferredRuntimeType::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPreferredRuntimeTypeConcept as ::windows::core::Interface>::IID
    }
}
pub trait IProcessDebugManager32Impl: Sized {
    fn CreateApplication(&mut self) -> ::windows::core::Result<IDebugApplication32>;
    fn GetDefaultApplication(&mut self) -> ::windows::core::Result<IDebugApplication32>;
    fn AddApplication(&mut self, pda: ::core::option::Option<IDebugApplication32>) -> ::windows::core::Result<u32>;
    fn RemoveApplication(&mut self, dwappcookie: u32) -> ::windows::core::Result<()>;
    fn CreateDebugDocumentHelper(&mut self, punkouter: ::core::option::Option<::windows::core::IUnknown>) -> ::windows::core::Result<IDebugDocumentHelper32>;
}
impl IProcessDebugManager32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IProcessDebugManager32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IProcessDebugManager32Vtbl {
        unsafe extern "system" fn CreateApplication<Impl: IProcessDebugManager32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateApplication() {
                ::core::result::Result::Ok(ok__) => {
                    *ppda = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDefaultApplication<Impl: IProcessDebugManager32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDefaultApplication() {
                ::core::result::Result::Ok(ok__) => {
                    *ppda = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddApplication<Impl: IProcessDebugManager32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, pdwappcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddApplication(::core::mem::transmute(&pda)) {
                ::core::result::Result::Ok(ok__) => {
                    *pdwappcookie = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveApplication<Impl: IProcessDebugManager32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveApplication(::core::mem::transmute_copy(&dwappcookie)).into()
        }
        unsafe extern "system" fn CreateDebugDocumentHelper<Impl: IProcessDebugManager32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkouter: *mut ::core::ffi::c_void, pddh: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateDebugDocumentHelper(::core::mem::transmute(&punkouter)) {
                ::core::result::Result::Ok(ok__) => {
                    *pddh = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            CreateApplication: CreateApplication::<Impl, IMPL_OFFSET>,
            GetDefaultApplication: GetDefaultApplication::<Impl, IMPL_OFFSET>,
            AddApplication: AddApplication::<Impl, IMPL_OFFSET>,
            RemoveApplication: RemoveApplication::<Impl, IMPL_OFFSET>,
            CreateDebugDocumentHelper: CreateDebugDocumentHelper::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IProcessDebugManager32 as ::windows::core::Interface>::IID
    }
}
pub trait IProcessDebugManager64Impl: Sized {
    fn CreateApplication(&mut self) -> ::windows::core::Result<IDebugApplication64>;
    fn GetDefaultApplication(&mut self) -> ::windows::core::Result<IDebugApplication64>;
    fn AddApplication(&mut self, pda: ::core::option::Option<IDebugApplication64>) -> ::windows::core::Result<u32>;
    fn RemoveApplication(&mut self, dwappcookie: u32) -> ::windows::core::Result<()>;
    fn CreateDebugDocumentHelper(&mut self, punkouter: ::core::option::Option<::windows::core::IUnknown>) -> ::windows::core::Result<IDebugDocumentHelper64>;
}
impl IProcessDebugManager64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IProcessDebugManager64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IProcessDebugManager64Vtbl {
        unsafe extern "system" fn CreateApplication<Impl: IProcessDebugManager64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateApplication() {
                ::core::result::Result::Ok(ok__) => {
                    *ppda = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDefaultApplication<Impl: IProcessDebugManager64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDefaultApplication() {
                ::core::result::Result::Ok(ok__) => {
                    *ppda = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddApplication<Impl: IProcessDebugManager64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, pdwappcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddApplication(::core::mem::transmute(&pda)) {
                ::core::result::Result::Ok(ok__) => {
                    *pdwappcookie = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveApplication<Impl: IProcessDebugManager64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).RemoveApplication(::core::mem::transmute_copy(&dwappcookie)).into()
        }
        unsafe extern "system" fn CreateDebugDocumentHelper<Impl: IProcessDebugManager64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkouter: *mut ::core::ffi::c_void, pddh: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateDebugDocumentHelper(::core::mem::transmute(&punkouter)) {
                ::core::result::Result::Ok(ok__) => {
                    *pddh = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            CreateApplication: CreateApplication::<Impl, IMPL_OFFSET>,
            GetDefaultApplication: GetDefaultApplication::<Impl, IMPL_OFFSET>,
            AddApplication: AddApplication::<Impl, IMPL_OFFSET>,
            RemoveApplication: RemoveApplication::<Impl, IMPL_OFFSET>,
            CreateDebugDocumentHelper: CreateDebugDocumentHelper::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IProcessDebugManager64 as ::windows::core::Interface>::IID
    }
}
pub trait IProvideExpressionContextsImpl: Sized {
    fn EnumExpressionContexts(&mut self) -> ::windows::core::Result<IEnumDebugExpressionContexts>;
}
impl IProvideExpressionContextsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IProvideExpressionContextsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IProvideExpressionContextsVtbl {
        unsafe extern "system" fn EnumExpressionContexts<Impl: IProvideExpressionContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppedec: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumExpressionContexts() {
                ::core::result::Result::Ok(ok__) => {
                    *ppedec = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), EnumExpressionContexts: EnumExpressionContexts::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IProvideExpressionContexts as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IRawEnumeratorImpl: Sized {
    fn Reset(&mut self) -> ::windows::core::Result<()>;
    fn GetNext(&mut self, name: *mut super::super::super::Foundation::BSTR, kind: *mut SymbolKind, value: *mut ::core::option::Option<IModelObject>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IRawEnumeratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRawEnumeratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRawEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IRawEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Reset().into()
        }
        unsafe extern "system" fn GetNext<Impl: IRawEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: *mut super::super::super::Foundation::BSTR, kind: *mut SymbolKind, value: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetNext(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&kind), ::core::mem::transmute_copy(&value)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), Reset: Reset::<Impl, IMPL_OFFSET>, GetNext: GetNext::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRawEnumerator as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IRemoteDebugApplicationImpl: Sized {
    fn ResumeFromBreakPoint(&mut self, prptfocus: ::core::option::Option<IRemoteDebugApplicationThread>, bra: BREAKRESUME_ACTION, era: ERRORRESUMEACTION) -> ::windows::core::Result<()>;
    fn CauseBreak(&mut self) -> ::windows::core::Result<()>;
    fn ConnectDebugger(&mut self, pad: ::core::option::Option<IApplicationDebugger>) -> ::windows::core::Result<()>;
    fn DisconnectDebugger(&mut self) -> ::windows::core::Result<()>;
    fn GetDebugger(&mut self) -> ::windows::core::Result<IApplicationDebugger>;
    fn CreateInstanceAtApplication(&mut self, rclsid: *const ::windows::core::GUID, punkouter: ::core::option::Option<::windows::core::IUnknown>, dwclscontext: u32, riid: *const ::windows::core::GUID) -> ::windows::core::Result<::windows::core::IUnknown>;
    fn QueryAlive(&mut self) -> ::windows::core::Result<()>;
    fn EnumThreads(&mut self) -> ::windows::core::Result<IEnumRemoteDebugApplicationThreads>;
    fn GetName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetRootNode(&mut self) -> ::windows::core::Result<IDebugApplicationNode>;
    fn EnumGlobalExpressionContexts(&mut self) -> ::windows::core::Result<IEnumDebugExpressionContexts>;
}
#[cfg(feature = "Win32_Foundation")]
impl IRemoteDebugApplicationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRemoteDebugApplicationImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRemoteDebugApplicationVtbl {
        unsafe extern "system" fn ResumeFromBreakPoint<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prptfocus: ::windows::core::RawPtr, bra: BREAKRESUME_ACTION, era: ERRORRESUMEACTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ResumeFromBreakPoint(::core::mem::transmute(&prptfocus), ::core::mem::transmute_copy(&bra), ::core::mem::transmute_copy(&era)).into()
        }
        unsafe extern "system" fn CauseBreak<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CauseBreak().into()
        }
        unsafe extern "system" fn ConnectDebugger<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pad: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).ConnectDebugger(::core::mem::transmute(&pad)).into()
        }
        unsafe extern "system" fn DisconnectDebugger<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DisconnectDebugger().into()
        }
        unsafe extern "system" fn GetDebugger<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pad: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDebugger() {
                ::core::result::Result::Ok(ok__) => {
                    *pad = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateInstanceAtApplication<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rclsid: *const ::windows::core::GUID, punkouter: *mut ::core::ffi::c_void, dwclscontext: u32, riid: *const ::windows::core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateInstanceAtApplication(::core::mem::transmute_copy(&rclsid), ::core::mem::transmute(&punkouter), ::core::mem::transmute_copy(&dwclscontext), ::core::mem::transmute_copy(&riid)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppvobject = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryAlive<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).QueryAlive().into()
        }
        unsafe extern "system" fn EnumThreads<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pperdat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumThreads() {
                ::core::result::Result::Ok(ok__) => {
                    *pperdat = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetName<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName() {
                ::core::result::Result::Ok(ok__) => {
                    *pbstrname = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRootNode<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdanroot: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRootNode() {
                ::core::result::Result::Ok(ok__) => {
                    *ppdanroot = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumGlobalExpressionContexts<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppedec: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumGlobalExpressionContexts() {
                ::core::result::Result::Ok(ok__) => {
                    *ppedec = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            ResumeFromBreakPoint: ResumeFromBreakPoint::<Impl, IMPL_OFFSET>,
            CauseBreak: CauseBreak::<Impl, IMPL_OFFSET>,
            ConnectDebugger: ConnectDebugger::<Impl, IMPL_OFFSET>,
            DisconnectDebugger: DisconnectDebugger::<Impl, IMPL_OFFSET>,
            GetDebugger: GetDebugger::<Impl, IMPL_OFFSET>,
            CreateInstanceAtApplication: CreateInstanceAtApplication::<Impl, IMPL_OFFSET>,
            QueryAlive: QueryAlive::<Impl, IMPL_OFFSET>,
            EnumThreads: EnumThreads::<Impl, IMPL_OFFSET>,
            GetName: GetName::<Impl, IMPL_OFFSET>,
            GetRootNode: GetRootNode::<Impl, IMPL_OFFSET>,
            EnumGlobalExpressionContexts: EnumGlobalExpressionContexts::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRemoteDebugApplication as ::windows::core::Interface>::IID
    }
}
pub trait IRemoteDebugApplication110Impl: Sized {
    fn SetDebuggerOptions(&mut self, mask: SCRIPT_DEBUGGER_OPTIONS, value: SCRIPT_DEBUGGER_OPTIONS) -> ::windows::core::Result<()>;
    fn GetCurrentDebuggerOptions(&mut self) -> ::windows::core::Result<SCRIPT_DEBUGGER_OPTIONS>;
    fn GetMainThread(&mut self) -> ::windows::core::Result<IRemoteDebugApplicationThread>;
}
impl IRemoteDebugApplication110Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRemoteDebugApplication110Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRemoteDebugApplication110Vtbl {
        unsafe extern "system" fn SetDebuggerOptions<Impl: IRemoteDebugApplication110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: SCRIPT_DEBUGGER_OPTIONS, value: SCRIPT_DEBUGGER_OPTIONS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetDebuggerOptions(::core::mem::transmute_copy(&mask), ::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn GetCurrentDebuggerOptions<Impl: IRemoteDebugApplication110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcurrentoptions: *mut SCRIPT_DEBUGGER_OPTIONS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentDebuggerOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *pcurrentoptions = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMainThread<Impl: IRemoteDebugApplication110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppthread: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMainThread() {
                ::core::result::Result::Ok(ok__) => {
                    *ppthread = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            SetDebuggerOptions: SetDebuggerOptions::<Impl, IMPL_OFFSET>,
            GetCurrentDebuggerOptions: GetCurrentDebuggerOptions::<Impl, IMPL_OFFSET>,
            GetMainThread: GetMainThread::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRemoteDebugApplication110 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IRemoteDebugApplicationEventsImpl: Sized {
    fn OnConnectDebugger(&mut self, pad: ::core::option::Option<IApplicationDebugger>) -> ::windows::core::Result<()>;
    fn OnDisconnectDebugger(&mut self) -> ::windows::core::Result<()>;
    fn OnSetName(&mut self, pstrname: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OnDebugOutput(&mut self, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn OnClose(&mut self) -> ::windows::core::Result<()>;
    fn OnEnterBreakPoint(&mut self, prdat: ::core::option::Option<IRemoteDebugApplicationThread>) -> ::windows::core::Result<()>;
    fn OnLeaveBreakPoint(&mut self, prdat: ::core::option::Option<IRemoteDebugApplicationThread>) -> ::windows::core::Result<()>;
    fn OnCreateThread(&mut self, prdat: ::core::option::Option<IRemoteDebugApplicationThread>) -> ::windows::core::Result<()>;
    fn OnDestroyThread(&mut self, prdat: ::core::option::Option<IRemoteDebugApplicationThread>) -> ::windows::core::Result<()>;
    fn OnBreakFlagChange(&mut self, abf: u32, prdatsteppingthread: ::core::option::Option<IRemoteDebugApplicationThread>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IRemoteDebugApplicationEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRemoteDebugApplicationEventsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRemoteDebugApplicationEventsVtbl {
        unsafe extern "system" fn OnConnectDebugger<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pad: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnConnectDebugger(::core::mem::transmute(&pad)).into()
        }
        unsafe extern "system" fn OnDisconnectDebugger<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnDisconnectDebugger().into()
        }
        unsafe extern "system" fn OnSetName<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnSetName(::core::mem::transmute_copy(&pstrname)).into()
        }
        unsafe extern "system" fn OnDebugOutput<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnDebugOutput(::core::mem::transmute_copy(&pstr)).into()
        }
        unsafe extern "system" fn OnClose<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnClose().into()
        }
        unsafe extern "system" fn OnEnterBreakPoint<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prdat: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnEnterBreakPoint(::core::mem::transmute(&prdat)).into()
        }
        unsafe extern "system" fn OnLeaveBreakPoint<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prdat: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnLeaveBreakPoint(::core::mem::transmute(&prdat)).into()
        }
        unsafe extern "system" fn OnCreateThread<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prdat: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnCreateThread(::core::mem::transmute(&prdat)).into()
        }
        unsafe extern "system" fn OnDestroyThread<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prdat: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnDestroyThread(::core::mem::transmute(&prdat)).into()
        }
        unsafe extern "system" fn OnBreakFlagChange<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abf: u32, prdatsteppingthread: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).OnBreakFlagChange(::core::mem::transmute_copy(&abf), ::core::mem::transmute(&prdatsteppingthread)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            OnConnectDebugger: OnConnectDebugger::<Impl, IMPL_OFFSET>,
            OnDisconnectDebugger: OnDisconnectDebugger::<Impl, IMPL_OFFSET>,
            OnSetName: OnSetName::<Impl, IMPL_OFFSET>,
            OnDebugOutput: OnDebugOutput::<Impl, IMPL_OFFSET>,
            OnClose: OnClose::<Impl, IMPL_OFFSET>,
            OnEnterBreakPoint: OnEnterBreakPoint::<Impl, IMPL_OFFSET>,
            OnLeaveBreakPoint: OnLeaveBreakPoint::<Impl, IMPL_OFFSET>,
            OnCreateThread: OnCreateThread::<Impl, IMPL_OFFSET>,
            OnDestroyThread: OnDestroyThread::<Impl, IMPL_OFFSET>,
            OnBreakFlagChange: OnBreakFlagChange::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRemoteDebugApplicationEvents as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IRemoteDebugApplicationThreadImpl: Sized {
    fn GetSystemThreadId(&mut self) -> ::windows::core::Result<u32>;
    fn GetApplication(&mut self) -> ::windows::core::Result<IRemoteDebugApplication>;
    fn EnumStackFrames(&mut self) -> ::windows::core::Result<IEnumDebugStackFrames>;
    fn GetDescription(&mut self, pbstrdescription: *mut super::super::super::Foundation::BSTR, pbstrstate: *mut super::super::super::Foundation::BSTR) -> ::windows::core::Result<()>;
    fn SetNextStatement(&mut self, pstackframe: ::core::option::Option<IDebugStackFrame>, pcodecontext: ::core::option::Option<IDebugCodeContext>) -> ::windows::core::Result<()>;
    fn GetState(&mut self) -> ::windows::core::Result<u32>;
    fn Suspend(&mut self) -> ::windows::core::Result<u32>;
    fn Resume(&mut self) -> ::windows::core::Result<u32>;
    fn GetSuspendCount(&mut self) -> ::windows::core::Result<u32>;
}
#[cfg(feature = "Win32_Foundation")]
impl IRemoteDebugApplicationThreadVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRemoteDebugApplicationThreadImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRemoteDebugApplicationThreadVtbl {
        unsafe extern "system" fn GetSystemThreadId<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwthreadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSystemThreadId() {
                ::core::result::Result::Ok(ok__) => {
                    *dwthreadid = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetApplication<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pprda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetApplication() {
                ::core::result::Result::Ok(ok__) => {
                    *pprda = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumStackFrames<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppedsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumStackFrames() {
                ::core::result::Result::Ok(ok__) => {
                    *ppedsf = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDescription<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrdescription: *mut super::super::super::Foundation::BSTR, pbstrstate: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetDescription(::core::mem::transmute_copy(&pbstrdescription), ::core::mem::transmute_copy(&pbstrstate)).into()
        }
        unsafe extern "system" fn SetNextStatement<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstackframe: ::windows::core::RawPtr, pcodecontext: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetNextStatement(::core::mem::transmute(&pstackframe), ::core::mem::transmute(&pcodecontext)).into()
        }
        unsafe extern "system" fn GetState<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetState() {
                ::core::result::Result::Ok(ok__) => {
                    *pstate = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Suspend<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Suspend() {
                ::core::result::Result::Ok(ok__) => {
                    *pdwcount = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Resume<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Resume() {
                ::core::result::Result::Ok(ok__) => {
                    *pdwcount = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSuspendCount<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSuspendCount() {
                ::core::result::Result::Ok(ok__) => {
                    *pdwcount = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetSystemThreadId: GetSystemThreadId::<Impl, IMPL_OFFSET>,
            GetApplication: GetApplication::<Impl, IMPL_OFFSET>,
            EnumStackFrames: EnumStackFrames::<Impl, IMPL_OFFSET>,
            GetDescription: GetDescription::<Impl, IMPL_OFFSET>,
            SetNextStatement: SetNextStatement::<Impl, IMPL_OFFSET>,
            GetState: GetState::<Impl, IMPL_OFFSET>,
            Suspend: Suspend::<Impl, IMPL_OFFSET>,
            Resume: Resume::<Impl, IMPL_OFFSET>,
            GetSuspendCount: GetSuspendCount::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRemoteDebugApplicationThread as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IRemoteDebugCriticalErrorEvent110Impl: Sized {
    fn GetErrorInfo(&mut self, pbstrsource: *mut super::super::super::Foundation::BSTR, pmessageid: *mut i32, pbstrmessage: *mut super::super::super::Foundation::BSTR, pplocation: *mut ::core::option::Option<IDebugDocumentContext>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IRemoteDebugCriticalErrorEvent110Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRemoteDebugCriticalErrorEvent110Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRemoteDebugCriticalErrorEvent110Vtbl {
        unsafe extern "system" fn GetErrorInfo<Impl: IRemoteDebugCriticalErrorEvent110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrsource: *mut super::super::super::Foundation::BSTR, pmessageid: *mut i32, pbstrmessage: *mut super::super::super::Foundation::BSTR, pplocation: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetErrorInfo(::core::mem::transmute_copy(&pbstrsource), ::core::mem::transmute_copy(&pmessageid), ::core::mem::transmute_copy(&pbstrmessage), ::core::mem::transmute_copy(&pplocation)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), GetErrorInfo: GetErrorInfo::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRemoteDebugCriticalErrorEvent110 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IRemoteDebugInfoEvent110Impl: Sized {
    fn GetEventInfo(&mut self, pmessagetype: *mut DEBUG_EVENT_INFO_TYPE, pbstrmessage: *mut super::super::super::Foundation::BSTR, pbstrurl: *mut super::super::super::Foundation::BSTR, pplocation: *mut ::core::option::Option<IDebugDocumentContext>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IRemoteDebugInfoEvent110Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRemoteDebugInfoEvent110Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRemoteDebugInfoEvent110Vtbl {
        unsafe extern "system" fn GetEventInfo<Impl: IRemoteDebugInfoEvent110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmessagetype: *mut DEBUG_EVENT_INFO_TYPE, pbstrmessage: *mut super::super::super::Foundation::BSTR, pbstrurl: *mut super::super::super::Foundation::BSTR, pplocation: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetEventInfo(::core::mem::transmute_copy(&pmessagetype), ::core::mem::transmute_copy(&pbstrmessage), ::core::mem::transmute_copy(&pbstrurl), ::core::mem::transmute_copy(&pplocation)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), GetEventInfo: GetEventInfo::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRemoteDebugInfoEvent110 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IScriptEntryImpl: Sized + IScriptNodeImpl {
    fn GetText(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn SetText(&mut self, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetBody(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn SetBody(&mut self, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn SetName(&mut self, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetItemName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn SetItemName(&mut self, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetSignature(&mut self, ppti: *mut ::core::option::Option<super::super::Com::ITypeInfo>, pimethod: *mut u32) -> ::windows::core::Result<()>;
    fn SetSignature(&mut self, pti: ::core::option::Option<super::super::Com::ITypeInfo>, imethod: u32) -> ::windows::core::Result<()>;
    fn GetRange(&mut self, pichmin: *mut u32, pcch: *mut u32) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IScriptEntryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IScriptEntryImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IScriptEntryVtbl {
        unsafe extern "system" fn GetText<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetText() {
                ::core::result::Result::Ok(ok__) => {
                    *pbstr = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetText<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetText(::core::mem::transmute_copy(&psz)).into()
        }
        unsafe extern "system" fn GetBody<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBody() {
                ::core::result::Result::Ok(ok__) => {
                    *pbstr = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBody<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetBody(::core::mem::transmute_copy(&psz)).into()
        }
        unsafe extern "system" fn GetName<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName() {
                ::core::result::Result::Ok(ok__) => {
                    *pbstr = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetName<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetName(::core::mem::transmute_copy(&psz)).into()
        }
        unsafe extern "system" fn GetItemName<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemName() {
                ::core::result::Result::Ok(ok__) => {
                    *pbstr = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetItemName<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetItemName(::core::mem::transmute_copy(&psz)).into()
        }
        unsafe extern "system" fn GetSignature<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppti: *mut ::windows::core::RawPtr, pimethod: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetSignature(::core::mem::transmute_copy(&ppti), ::core::mem::transmute_copy(&pimethod)).into()
        }
        unsafe extern "system" fn SetSignature<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pti: ::windows::core::RawPtr, imethod: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSignature(::core::mem::transmute(&pti), ::core::mem::transmute_copy(&imethod)).into()
        }
        unsafe extern "system" fn GetRange<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pichmin: *mut u32, pcch: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).GetRange(::core::mem::transmute_copy(&pichmin), ::core::mem::transmute_copy(&pcch)).into()
        }
        Self {
            base: IScriptNodeVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            GetText: GetText::<Impl, IMPL_OFFSET>,
            SetText: SetText::<Impl, IMPL_OFFSET>,
            GetBody: GetBody::<Impl, IMPL_OFFSET>,
            SetBody: SetBody::<Impl, IMPL_OFFSET>,
            GetName: GetName::<Impl, IMPL_OFFSET>,
            SetName: SetName::<Impl, IMPL_OFFSET>,
            GetItemName: GetItemName::<Impl, IMPL_OFFSET>,
            SetItemName: SetItemName::<Impl, IMPL_OFFSET>,
            GetSignature: GetSignature::<Impl, IMPL_OFFSET>,
            SetSignature: SetSignature::<Impl, IMPL_OFFSET>,
            GetRange: GetRange::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IScriptEntry as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IScriptInvocationContextImpl: Sized {
    fn GetContextType(&mut self) -> ::windows::core::Result<SCRIPT_INVOCATION_CONTEXT_TYPE>;
    fn GetContextDescription(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn GetContextObject(&mut self) -> ::windows::core::Result<::windows::core::IUnknown>;
}
#[cfg(feature = "Win32_Foundation")]
impl IScriptInvocationContextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IScriptInvocationContextImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IScriptInvocationContextVtbl {
        unsafe extern "system" fn GetContextType<Impl: IScriptInvocationContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pinvocationcontexttype: *mut SCRIPT_INVOCATION_CONTEXT_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetContextType() {
                ::core::result::Result::Ok(ok__) => {
                    *pinvocationcontexttype = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContextDescription<Impl: IScriptInvocationContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdescription: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetContextDescription() {
                ::core::result::Result::Ok(ok__) => {
                    *pdescription = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContextObject<Impl: IScriptInvocationContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppcontextobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetContextObject() {
                ::core::result::Result::Ok(ok__) => {
                    *ppcontextobject = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetContextType: GetContextType::<Impl, IMPL_OFFSET>,
            GetContextDescription: GetContextDescription::<Impl, IMPL_OFFSET>,
            GetContextObject: GetContextObject::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IScriptInvocationContext as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IScriptNodeImpl: Sized {
    fn Alive(&mut self) -> ::windows::core::Result<()>;
    fn Delete(&mut self) -> ::windows::core::Result<()>;
    fn GetParent(&mut self) -> ::windows::core::Result<IScriptNode>;
    fn GetIndexInParent(&mut self) -> ::windows::core::Result<u32>;
    fn GetCookie(&mut self) -> ::windows::core::Result<u32>;
    fn GetNumberOfChildren(&mut self) -> ::windows::core::Result<u32>;
    fn GetChild(&mut self, isn: u32) -> ::windows::core::Result<IScriptNode>;
    fn GetLanguage(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn CreateChildEntry(&mut self, isn: u32, dwcookie: u32, pszdelimiter: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<IScriptEntry>;
    fn CreateChildHandler(&mut self, pszdefaultname: super::super::super::Foundation::PWSTR, prgpsznames: *const super::super::super::Foundation::PWSTR, cpsznames: u32, pszevent: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, ptisignature: ::core::option::Option<super::super::Com::ITypeInfo>, imethodsignature: u32, isn: u32, dwcookie: u32) -> ::windows::core::Result<IScriptEntry>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IScriptNodeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IScriptNodeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IScriptNodeVtbl {
        unsafe extern "system" fn Alive<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Alive().into()
        }
        unsafe extern "system" fn Delete<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Delete().into()
        }
        unsafe extern "system" fn GetParent<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsnparent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetParent() {
                ::core::result::Result::Ok(ok__) => {
                    *ppsnparent = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIndexInParent<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pisn: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIndexInParent() {
                ::core::result::Result::Ok(ok__) => {
                    *pisn = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCookie<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCookie() {
                ::core::result::Result::Ok(ok__) => {
                    *pdwcookie = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberOfChildren<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcsn: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberOfChildren() {
                ::core::result::Result::Ok(ok__) => {
                    *pcsn = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetChild<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, isn: u32, ppsn: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetChild(::core::mem::transmute_copy(&isn)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppsn = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLanguage<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLanguage() {
                ::core::result::Result::Ok(ok__) => {
                    *pbstr = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateChildEntry<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, isn: u32, dwcookie: u32, pszdelimiter: super::super::super::Foundation::PWSTR, ppse: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateChildEntry(::core::mem::transmute_copy(&isn), ::core::mem::transmute_copy(&dwcookie), ::core::mem::transmute_copy(&pszdelimiter)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppse = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateChildHandler<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdefaultname: super::super::super::Foundation::PWSTR, prgpsznames: *const super::super::super::Foundation::PWSTR, cpsznames: u32, pszevent: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, ptisignature: ::windows::core::RawPtr, imethodsignature: u32, isn: u32, dwcookie: u32, ppse: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateChildHandler(::core::mem::transmute_copy(&pszdefaultname), ::core::mem::transmute_copy(&prgpsznames), ::core::mem::transmute_copy(&cpsznames), ::core::mem::transmute_copy(&pszevent), ::core::mem::transmute_copy(&pszdelimiter), ::core::mem::transmute(&ptisignature), ::core::mem::transmute_copy(&imethodsignature), ::core::mem::transmute_copy(&isn), ::core::mem::transmute_copy(&dwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *ppse = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            Alive: Alive::<Impl, IMPL_OFFSET>,
            Delete: Delete::<Impl, IMPL_OFFSET>,
            GetParent: GetParent::<Impl, IMPL_OFFSET>,
            GetIndexInParent: GetIndexInParent::<Impl, IMPL_OFFSET>,
            GetCookie: GetCookie::<Impl, IMPL_OFFSET>,
            GetNumberOfChildren: GetNumberOfChildren::<Impl, IMPL_OFFSET>,
            GetChild: GetChild::<Impl, IMPL_OFFSET>,
            GetLanguage: GetLanguage::<Impl, IMPL_OFFSET>,
            CreateChildEntry: CreateChildEntry::<Impl, IMPL_OFFSET>,
            CreateChildHandler: CreateChildHandler::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IScriptNode as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IScriptScriptletImpl: Sized + IScriptNodeImpl + IScriptEntryImpl {
    fn GetSubItemName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn SetSubItemName(&mut self, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetEventName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn SetEventName(&mut self, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
    fn GetSimpleEventName(&mut self) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
    fn SetSimpleEventName(&mut self, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IScriptScriptletVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IScriptScriptletImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IScriptScriptletVtbl {
        unsafe extern "system" fn GetSubItemName<Impl: IScriptScriptletImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSubItemName() {
                ::core::result::Result::Ok(ok__) => {
                    *pbstr = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSubItemName<Impl: IScriptScriptletImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSubItemName(::core::mem::transmute_copy(&psz)).into()
        }
        unsafe extern "system" fn GetEventName<Impl: IScriptScriptletImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventName() {
                ::core::result::Result::Ok(ok__) => {
                    *pbstr = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventName<Impl: IScriptScriptletImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetEventName(::core::mem::transmute_copy(&psz)).into()
        }
        unsafe extern "system" fn GetSimpleEventName<Impl: IScriptScriptletImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSimpleEventName() {
                ::core::result::Result::Ok(ok__) => {
                    *pbstr = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSimpleEventName<Impl: IScriptScriptletImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).SetSimpleEventName(::core::mem::transmute_copy(&psz)).into()
        }
        Self {
            base: IScriptEntryVtbl::new::<Identity, Impl, BASE_OFFSET, IMPL_OFFSET>(),
            GetSubItemName: GetSubItemName::<Impl, IMPL_OFFSET>,
            SetSubItemName: SetSubItemName::<Impl, IMPL_OFFSET>,
            GetEventName: GetEventName::<Impl, IMPL_OFFSET>,
            SetEventName: SetEventName::<Impl, IMPL_OFFSET>,
            GetSimpleEventName: GetSimpleEventName::<Impl, IMPL_OFFSET>,
            SetSimpleEventName: SetSimpleEventName::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IScriptScriptlet as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait ISimpleConnectionPointImpl: Sized {
    fn GetEventCount(&mut self) -> ::windows::core::Result<u32>;
    fn DescribeEvents(&mut self, ievent: u32, cevents: u32, prgid: *mut i32, prgbstr: *mut super::super::super::Foundation::BSTR, pceventsfetched: *mut u32) -> ::windows::core::Result<()>;
    fn Advise(&mut self, pdisp: ::core::option::Option<super::super::Com::IDispatch>) -> ::windows::core::Result<u32>;
    fn Unadvise(&mut self, dwcookie: u32) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl ISimpleConnectionPointVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISimpleConnectionPointImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISimpleConnectionPointVtbl {
        unsafe extern "system" fn GetEventCount<Impl: ISimpleConnectionPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventCount() {
                ::core::result::Result::Ok(ok__) => {
                    *pulcount = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DescribeEvents<Impl: ISimpleConnectionPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ievent: u32, cevents: u32, prgid: *mut i32, prgbstr: *mut super::super::super::Foundation::BSTR, pceventsfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).DescribeEvents(::core::mem::transmute_copy(&ievent), ::core::mem::transmute_copy(&cevents), ::core::mem::transmute_copy(&prgid), ::core::mem::transmute_copy(&prgbstr), ::core::mem::transmute_copy(&pceventsfetched)).into()
        }
        unsafe extern "system" fn Advise<Impl: ISimpleConnectionPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdisp: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Advise(::core::mem::transmute(&pdisp)) {
                ::core::result::Result::Ok(ok__) => {
                    *pdwcookie = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Unadvise<Impl: ISimpleConnectionPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Unadvise(::core::mem::transmute_copy(&dwcookie)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            GetEventCount: GetEventCount::<Impl, IMPL_OFFSET>,
            DescribeEvents: DescribeEvents::<Impl, IMPL_OFFSET>,
            Advise: Advise::<Impl, IMPL_OFFSET>,
            Unadvise: Unadvise::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISimpleConnectionPoint as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IStringDisplayableConceptImpl: Sized {
    fn ToDisplayString(&mut self, contextobject: ::core::option::Option<IModelObject>, metadata: ::core::option::Option<IKeyStore>) -> ::windows::core::Result<super::super::super::Foundation::BSTR>;
}
#[cfg(feature = "Win32_Foundation")]
impl IStringDisplayableConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStringDisplayableConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStringDisplayableConceptVtbl {
        unsafe extern "system" fn ToDisplayString<Impl: IStringDisplayableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, metadata: ::windows::core::RawPtr, displaystring: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ToDisplayString(::core::mem::transmute(&contextobject), ::core::mem::transmute(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *displaystring = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), ToDisplayString: ToDisplayString::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStringDisplayableConcept as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait ITridentEventSinkImpl: Sized {
    fn FireEvent(&mut self, pstrevent: super::super::super::Foundation::PWSTR, pdp: *const super::super::Com::DISPPARAMS, pvarres: *mut super::super::Com::VARIANT, pei: *mut super::super::Com::EXCEPINFO) -> ::windows::core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl ITridentEventSinkVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITridentEventSinkImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ITridentEventSinkVtbl {
        unsafe extern "system" fn FireEvent<Impl: ITridentEventSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrevent: super::super::super::Foundation::PWSTR, pdp: *const super::super::Com::DISPPARAMS, pvarres: *mut super::super::Com::VARIANT, pei: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).FireEvent(::core::mem::transmute_copy(&pstrevent), ::core::mem::transmute_copy(&pdp), ::core::mem::transmute_copy(&pvarres), ::core::mem::transmute_copy(&pei)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), FireEvent: FireEvent::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ITridentEventSink as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IWebAppDiagnosticsObjectInitializationImpl: Sized {
    fn Initialize(&mut self, hpassedhandle: super::super::super::Foundation::HANDLE_PTR, pdebugapplication: ::core::option::Option<::windows::core::IUnknown>) -> ::windows::core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl IWebAppDiagnosticsObjectInitializationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IWebAppDiagnosticsObjectInitializationImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IWebAppDiagnosticsObjectInitializationVtbl {
        unsafe extern "system" fn Initialize<Impl: IWebAppDiagnosticsObjectInitializationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hpassedhandle: super::super::super::Foundation::HANDLE_PTR, pdebugapplication: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).Initialize(::core::mem::transmute_copy(&hpassedhandle), ::core::mem::transmute(&pdebugapplication)).into()
        }
        Self { base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(), Initialize: Initialize::<Impl, IMPL_OFFSET> }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IWebAppDiagnosticsObjectInitialization as ::windows::core::Interface>::IID
    }
}
pub trait IWebAppDiagnosticsSetupImpl: Sized {
    fn DiagnosticsSupported(&mut self) -> ::windows::core::Result<i16>;
    fn CreateObjectWithSiteAtWebApp(&mut self, rclsid: *const ::windows::core::GUID, dwclscontext: u32, riid: *const ::windows::core::GUID, hpasstoobject: usize) -> ::windows::core::Result<()>;
}
impl IWebAppDiagnosticsSetupVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IWebAppDiagnosticsSetupImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IWebAppDiagnosticsSetupVtbl {
        unsafe extern "system" fn DiagnosticsSupported<Impl: IWebAppDiagnosticsSetupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pretval: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DiagnosticsSupported() {
                ::core::result::Result::Ok(ok__) => {
                    *pretval = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateObjectWithSiteAtWebApp<Impl: IWebAppDiagnosticsSetupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rclsid: *const ::windows::core::GUID, dwclscontext: u32, riid: *const ::windows::core::GUID, hpasstoobject: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            (*this).CreateObjectWithSiteAtWebApp(::core::mem::transmute_copy(&rclsid), ::core::mem::transmute_copy(&dwclscontext), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&hpasstoobject)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, BASE_OFFSET>(),
            DiagnosticsSupported: DiagnosticsSupported::<Impl, IMPL_OFFSET>,
            CreateObjectWithSiteAtWebApp: CreateObjectWithSiteAtWebApp::<Impl, IMPL_OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IWebAppDiagnosticsSetup as ::windows::core::Interface>::IID
    }
}
