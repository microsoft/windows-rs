# [ cfg ( feature ="Win32_Graphics_Dxgi_Common" ) ] pub trait IBitmapDataImpl < > : Sized where { fn CopyBytesTo ( ) ; fn GetStride ( ) ; fn GetBitmapDescription ( ) ; fn GetSourceBitmapDescription ( ) ; } # [ cfg ( feature ="Win32_Graphics_Dxgi_Common" ) ] impl < > IBitmapDataVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IBitmapDataImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IBitmapDataVtbl < > { unsafe extern "system" fn CopyBytesTo < Impl : IBitmapDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , sourceoffsetinbytes : u32 , maxbytestocopy : u32 , pvbytes : * mut u8 , numberofbytescopied : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetStride < Impl : IBitmapDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstride : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBitmapDescription < Impl : IBitmapDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbitmapdescription : * mut BitmapDescription , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSourceBitmapDescription < Impl : IBitmapDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbitmapdescription : * mut BitmapDescription , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CopyBytesTo : CopyBytesTo :: < Impl , IMPL_OFFSET > , GetStride : GetStride :: < Impl , IMPL_OFFSET > , GetBitmapDescription : GetBitmapDescription :: < Impl , IMPL_OFFSET > , GetSourceBitmapDescription : GetSourceBitmapDescription :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IBitmapData < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IVisualTreeServiceImpl < > : Sized where { fn AdviseVisualTreeChange ( ) ; fn UnadviseVisualTreeChange ( ) ; fn GetEnums ( ) ; fn CreateInstance ( ) ; fn GetPropertyValuesChain ( ) ; fn SetProperty ( ) ; fn ClearProperty ( ) ; fn GetCollectionCount ( ) ; fn GetCollectionElements ( ) ; fn AddChild ( ) ; fn RemoveChild ( ) ; fn ClearChildren ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IVisualTreeServiceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IVisualTreeServiceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IVisualTreeServiceVtbl < > { unsafe extern "system" fn AdviseVisualTreeChange < Impl : IVisualTreeServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcallback : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnadviseVisualTreeChange < Impl : IVisualTreeServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcallback : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEnums < Impl : IVisualTreeServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcount : * mut u32 , ppenums : * mut * mut EnumType , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateInstance < Impl : IVisualTreeServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , typename : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , value : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , pinstancehandle : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPropertyValuesChain < Impl : IVisualTreeServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , instancehandle : u64 , psourcecount : * mut u32 , pppropertysources : * mut * mut PropertyChainSource , ppropertycount : * mut u32 , pppropertyvalues : * mut * mut PropertyChainValue , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProperty < Impl : IVisualTreeServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , instancehandle : u64 , value : u64 , propertyindex : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ClearProperty < Impl : IVisualTreeServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , instancehandle : u64 , propertyindex : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCollectionCount < Impl : IVisualTreeServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , instancehandle : u64 , pcollectionsize : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCollectionElements < Impl : IVisualTreeServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , instancehandle : u64 , startindex : u32 , pelementcount : * mut u32 , ppelementvalues : * mut * mut CollectionElementValue , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddChild < Impl : IVisualTreeServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , parent : u64 , child : u64 , index : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveChild < Impl : IVisualTreeServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , parent : u64 , index : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ClearChildren < Impl : IVisualTreeServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , parent : u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AdviseVisualTreeChange : AdviseVisualTreeChange :: < Impl , IMPL_OFFSET > , UnadviseVisualTreeChange : UnadviseVisualTreeChange :: < Impl , IMPL_OFFSET > , GetEnums : GetEnums :: < Impl , IMPL_OFFSET > , CreateInstance : CreateInstance :: < Impl , IMPL_OFFSET > , GetPropertyValuesChain : GetPropertyValuesChain :: < Impl , IMPL_OFFSET > , SetProperty : SetProperty :: < Impl , IMPL_OFFSET > , ClearProperty : ClearProperty :: < Impl , IMPL_OFFSET > , GetCollectionCount : GetCollectionCount :: < Impl , IMPL_OFFSET > , GetCollectionElements : GetCollectionElements :: < Impl , IMPL_OFFSET > , AddChild : AddChild :: < Impl , IMPL_OFFSET > , RemoveChild : RemoveChild :: < Impl , IMPL_OFFSET > , ClearChildren : ClearChildren :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IVisualTreeService < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IVisualTreeService2Impl < > : Sized + IVisualTreeServiceImpl where { fn GetPropertyIndex ( ) ; fn GetProperty ( ) ; fn ReplaceResource ( ) ; fn RenderTargetBitmap ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IVisualTreeService2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IVisualTreeService2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IVisualTreeService2Vtbl < > { unsafe extern "system" fn GetPropertyIndex < Impl : IVisualTreeService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , object : u64 , propertyname : super::super::super::Foundation:: PWSTR , ppropertyindex : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProperty < Impl : IVisualTreeService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , object : u64 , propertyindex : u32 , pvalue : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReplaceResource < Impl : IVisualTreeService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , resourcedictionary : u64 , key : u64 , newvalue : u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RenderTargetBitmap < Impl : IVisualTreeService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , handle : u64 , options : RenderTargetBitmapOptions , maxpixelwidth : u32 , maxpixelheight : u32 , ppbitmapdata : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IVisualTreeServiceVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetPropertyIndex : GetPropertyIndex :: < Impl , IMPL_OFFSET > , GetProperty : GetProperty :: < Impl , IMPL_OFFSET > , ReplaceResource : ReplaceResource :: < Impl , IMPL_OFFSET > , RenderTargetBitmap : RenderTargetBitmap :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IVisualTreeService2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IVisualTreeService3Impl < > : Sized + IVisualTreeServiceImpl + IVisualTreeService2Impl where { fn ResolveResource ( ) ; fn GetDictionaryItem ( ) ; fn AddDictionaryItem ( ) ; fn RemoveDictionaryItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IVisualTreeService3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IVisualTreeService3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IVisualTreeService3Vtbl < > { unsafe extern "system" fn ResolveResource < Impl : IVisualTreeService3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , resourcecontext : u64 , resourcename : super::super::super::Foundation:: PWSTR , resourcetype : ResourceType , propertyindex : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDictionaryItem < Impl : IVisualTreeService3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dictionaryhandle : u64 , resourcename : super::super::super::Foundation:: PWSTR , resourceisimplicitstyle : super::super::super::Foundation:: BOOL , resourcehandle : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddDictionaryItem < Impl : IVisualTreeService3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dictionaryhandle : u64 , resourcekey : u64 , resourcehandle : u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveDictionaryItem < Impl : IVisualTreeService3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dictionaryhandle : u64 , resourcekey : u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IVisualTreeService2Vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , ResolveResource : ResolveResource :: < Impl , IMPL_OFFSET > , GetDictionaryItem : GetDictionaryItem :: < Impl , IMPL_OFFSET > , AddDictionaryItem : AddDictionaryItem :: < Impl , IMPL_OFFSET > , RemoveDictionaryItem : RemoveDictionaryItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IVisualTreeService3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IVisualTreeServiceCallbackImpl < > : Sized where { fn OnVisualTreeChange ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IVisualTreeServiceCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IVisualTreeServiceCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IVisualTreeServiceCallbackVtbl < > { unsafe extern "system" fn OnVisualTreeChange < Impl : IVisualTreeServiceCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , relation : ParentChildRelation , element : :: core :: mem :: ManuallyDrop < VisualElement > , mutationtype : VisualMutationType , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnVisualTreeChange : OnVisualTreeChange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IVisualTreeServiceCallback < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IVisualTreeServiceCallback2Impl < > : Sized + IVisualTreeServiceCallbackImpl where { fn OnElementStateChanged ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IVisualTreeServiceCallback2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IVisualTreeServiceCallback2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IVisualTreeServiceCallback2Vtbl < > { unsafe extern "system" fn OnElementStateChanged < Impl : IVisualTreeServiceCallback2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , element : u64 , elementstate : VisualElementState , context : super::super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IVisualTreeServiceCallbackVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , OnElementStateChanged : OnElementStateChanged :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IVisualTreeServiceCallback2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IXamlDiagnosticsImpl < > : Sized where { fn GetDispatcher ( ) ; fn GetUiLayer ( ) ; fn GetApplication ( ) ; fn GetIInspectableFromHandle ( ) ; fn GetHandleFromIInspectable ( ) ; fn HitTest ( ) ; fn RegisterInstance ( ) ; fn GetInitializationData ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IXamlDiagnosticsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IXamlDiagnosticsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IXamlDiagnosticsVtbl < > { unsafe extern "system" fn GetDispatcher < Impl : IXamlDiagnosticsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdispatcher : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetUiLayer < Impl : IXamlDiagnosticsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pplayer : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetApplication < Impl : IXamlDiagnosticsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppapplication : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIInspectableFromHandle < Impl : IXamlDiagnosticsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , instancehandle : u64 , ppinstance : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetHandleFromIInspectable < Impl : IXamlDiagnosticsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinstance : * mut :: core :: ffi :: c_void , phandle : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HitTest < Impl : IXamlDiagnosticsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rect : super::super::super::Foundation:: RECT , pcount : * mut u32 , ppinstancehandles : * mut * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterInstance < Impl : IXamlDiagnosticsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinstance : * mut :: core :: ffi :: c_void , pinstancehandle : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetInitializationData < Impl : IXamlDiagnosticsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinitializationdata : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetDispatcher : GetDispatcher :: < Impl , IMPL_OFFSET > , GetUiLayer : GetUiLayer :: < Impl , IMPL_OFFSET > , GetApplication : GetApplication :: < Impl , IMPL_OFFSET > , GetIInspectableFromHandle : GetIInspectableFromHandle :: < Impl , IMPL_OFFSET > , GetHandleFromIInspectable : GetHandleFromIInspectable :: < Impl , IMPL_OFFSET > , HitTest : HitTest :: < Impl , IMPL_OFFSET > , RegisterInstance : RegisterInstance :: < Impl , IMPL_OFFSET > , GetInitializationData : GetInitializationData :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IXamlDiagnostics < > as :: windows :: core :: Interface > :: IID } } 