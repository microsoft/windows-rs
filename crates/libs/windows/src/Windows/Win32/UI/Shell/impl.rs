#[cfg(feature = "Win32_System_Com")]
pub trait CIE4ConnectionPointImpl: Sized + IConnectionPointImpl {
    fn DoInvokeIE4();
    fn DoInvokePIDLIE4();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for CIE4ConnectionPoint {
    const NAME: &'static str = "Windows.Win32.UI.Shell.CIE4ConnectionPoint";
}
#[cfg(feature = "Win32_System_Com")]
impl CIE4ConnectionPointVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: CIE4ConnectionPointImpl, const OFFSET: isize>() -> CIE4ConnectionPointVtbl {
        unsafe extern "system" fn DoInvokeIE4<Impl: CIE4ConnectionPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pf: *mut super::super::Foundation::BOOL, ppv: *mut *mut ::core::ffi::c_void, dispid: i32, pdispparams: *mut super::super::System::Com::DISPPARAMS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DoInvokeIE4(
                &*(&pf as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType),
                &*(&ppv as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                dispid,
                &*(&pdispparams as *const <super::super::System::Com::DISPPARAMS as ::windows::core::Abi>::Abi as *const <super::super::System::Com::DISPPARAMS as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DoInvokePIDLIE4<Impl: CIE4ConnectionPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dispid: i32, pidl: *mut Common::ITEMIDLIST, fcancancel: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DoInvokePIDLIE4(dispid, &*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), &*(&fcancancel as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<CIE4ConnectionPoint>, ::windows::core::GetTrustLevel, DoInvokeIE4::<Impl, OFFSET>, DoInvokePIDLIE4::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait DFConstraintImpl: Sized + IDispatchImpl {
    fn Name();
    fn Value();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for DFConstraint {
    const NAME: &'static str = "Windows.Win32.UI.Shell.DFConstraint";
}
#[cfg(feature = "Win32_System_Com")]
impl DFConstraintVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: DFConstraintImpl, const OFFSET: isize>() -> DFConstraintVtbl {
        unsafe extern "system" fn Name<Impl: DFConstraintImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbs: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Name(::core::mem::transmute_copy(&pbs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Value<Impl: DFConstraintImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pv: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Value(::core::mem::transmute_copy(&pv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<DFConstraint>, ::windows::core::GetTrustLevel, Name::<Impl, OFFSET>, Value::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait DShellFolderViewEventsImpl: Sized + IDispatchImpl {}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for DShellFolderViewEvents {
    const NAME: &'static str = "Windows.Win32.UI.Shell.DShellFolderViewEvents";
}
#[cfg(feature = "Win32_System_Com")]
impl DShellFolderViewEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: DShellFolderViewEventsImpl, const OFFSET: isize>() -> DShellFolderViewEventsVtbl {
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<DShellFolderViewEvents>, ::windows::core::GetTrustLevel)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait DShellNameSpaceEventsImpl: Sized + IDispatchImpl {}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for DShellNameSpaceEvents {
    const NAME: &'static str = "Windows.Win32.UI.Shell.DShellNameSpaceEvents";
}
#[cfg(feature = "Win32_System_Com")]
impl DShellNameSpaceEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: DShellNameSpaceEventsImpl, const OFFSET: isize>() -> DShellNameSpaceEventsVtbl {
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<DShellNameSpaceEvents>, ::windows::core::GetTrustLevel)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait DShellWindowsEventsImpl: Sized + IDispatchImpl {}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for DShellWindowsEvents {
    const NAME: &'static str = "Windows.Win32.UI.Shell.DShellWindowsEvents";
}
#[cfg(feature = "Win32_System_Com")]
impl DShellWindowsEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: DShellWindowsEventsImpl, const OFFSET: isize>() -> DShellWindowsEventsVtbl {
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<DShellWindowsEvents>, ::windows::core::GetTrustLevel)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait DWebBrowserEventsImpl: Sized + IDispatchImpl {}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for DWebBrowserEvents {
    const NAME: &'static str = "Windows.Win32.UI.Shell.DWebBrowserEvents";
}
#[cfg(feature = "Win32_System_Com")]
impl DWebBrowserEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: DWebBrowserEventsImpl, const OFFSET: isize>() -> DWebBrowserEventsVtbl {
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<DWebBrowserEvents>, ::windows::core::GetTrustLevel)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait DWebBrowserEvents2Impl: Sized + IDispatchImpl {}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for DWebBrowserEvents2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.DWebBrowserEvents2";
}
#[cfg(feature = "Win32_System_Com")]
impl DWebBrowserEvents2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: DWebBrowserEvents2Impl, const OFFSET: isize>() -> DWebBrowserEvents2Vtbl {
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<DWebBrowserEvents2>, ::windows::core::GetTrustLevel)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait FolderImpl: Sized + IDispatchImpl {
    fn Title();
    fn Application();
    fn Parent();
    fn ParentFolder();
    fn Items();
    fn ParseName();
    fn NewFolder();
    fn MoveHere();
    fn CopyHere();
    fn GetDetailsOf();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for Folder {
    const NAME: &'static str = "Windows.Win32.UI.Shell.Folder";
}
#[cfg(feature = "Win32_System_Com")]
impl FolderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: FolderImpl, const OFFSET: isize>() -> FolderVtbl {
        unsafe extern "system" fn Title<Impl: FolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbs: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Title(::core::mem::transmute_copy(&pbs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Application<Impl: FolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Application(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Parent<Impl: FolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Parent(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ParentFolder<Impl: FolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ParentFolder(::core::mem::transmute_copy(&ppsf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Items<Impl: FolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Items(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ParseName<Impl: FolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ParseName(&*(&bname as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NewFolder<Impl: FolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, voptions: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).NewFolder(&*(&bname as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), &*(&voptions as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MoveHere<Impl: FolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vitem: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, voptions: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MoveHere(&*(&vitem as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), &*(&voptions as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CopyHere<Impl: FolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vitem: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, voptions: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CopyHere(&*(&vitem as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), &*(&voptions as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDetailsOf<Impl: FolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vitem: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, icolumn: i32, pbs: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDetailsOf(&*(&vitem as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), icolumn, ::core::mem::transmute_copy(&pbs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<Folder>,
            ::windows::core::GetTrustLevel,
            Title::<Impl, OFFSET>,
            Application::<Impl, OFFSET>,
            Parent::<Impl, OFFSET>,
            ParentFolder::<Impl, OFFSET>,
            Items::<Impl, OFFSET>,
            ParseName::<Impl, OFFSET>,
            NewFolder::<Impl, OFFSET>,
            MoveHere::<Impl, OFFSET>,
            CopyHere::<Impl, OFFSET>,
            GetDetailsOf::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait Folder2Impl: Sized + FolderImpl + IDispatchImpl {
    fn Self_();
    fn OfflineStatus();
    fn Synchronize();
    fn HaveToShowWebViewBarricade();
    fn DismissedWebViewBarricade();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for Folder2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.Folder2";
}
#[cfg(feature = "Win32_System_Com")]
impl Folder2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: Folder2Impl, const OFFSET: isize>() -> Folder2Vtbl {
        unsafe extern "system" fn Self_<Impl: Folder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppfi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Self_(::core::mem::transmute_copy(&ppfi)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OfflineStatus<Impl: Folder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pul: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OfflineStatus(::core::mem::transmute_copy(&pul)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Synchronize<Impl: Folder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Synchronize() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HaveToShowWebViewBarricade<Impl: Folder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbhavetoshowwebviewbarricade: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HaveToShowWebViewBarricade(::core::mem::transmute_copy(&pbhavetoshowwebviewbarricade)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DismissedWebViewBarricade<Impl: Folder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DismissedWebViewBarricade() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<Folder2>, ::windows::core::GetTrustLevel, Self_::<Impl, OFFSET>, OfflineStatus::<Impl, OFFSET>, Synchronize::<Impl, OFFSET>, HaveToShowWebViewBarricade::<Impl, OFFSET>, DismissedWebViewBarricade::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait Folder3Impl: Sized + Folder2Impl + FolderImpl + IDispatchImpl {
    fn ShowWebViewBarricade();
    fn SetShowWebViewBarricade();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for Folder3 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.Folder3";
}
#[cfg(feature = "Win32_System_Com")]
impl Folder3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: Folder3Impl, const OFFSET: isize>() -> Folder3Vtbl {
        unsafe extern "system" fn ShowWebViewBarricade<Impl: Folder3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbshowwebviewbarricade: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowWebViewBarricade(::core::mem::transmute_copy(&pbshowwebviewbarricade)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetShowWebViewBarricade<Impl: Folder3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bshowwebviewbarricade: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetShowWebViewBarricade(bshowwebviewbarricade) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<Folder3>, ::windows::core::GetTrustLevel, ShowWebViewBarricade::<Impl, OFFSET>, SetShowWebViewBarricade::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait FolderItemImpl: Sized + IDispatchImpl {
    fn Application();
    fn Parent();
    fn Name();
    fn SetName();
    fn Path();
    fn GetLink();
    fn GetFolder();
    fn IsLink();
    fn IsFolder();
    fn IsFileSystem();
    fn IsBrowsable();
    fn ModifyDate();
    fn SetModifyDate();
    fn Size();
    fn Type();
    fn Verbs();
    fn InvokeVerb();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for FolderItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.FolderItem";
}
#[cfg(feature = "Win32_System_Com")]
impl FolderItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: FolderItemImpl, const OFFSET: isize>() -> FolderItemVtbl {
        unsafe extern "system" fn Application<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Application(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Parent<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Parent(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Name<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbs: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Name(::core::mem::transmute_copy(&pbs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetName<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bs: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetName(&*(&bs as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Path<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbs: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Path(::core::mem::transmute_copy(&pbs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLink<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLink(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolder<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolder(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsLink<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pb: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsLink(::core::mem::transmute_copy(&pb)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsFolder<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pb: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsFolder(::core::mem::transmute_copy(&pb)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsFileSystem<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pb: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsFileSystem(::core::mem::transmute_copy(&pb)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsBrowsable<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pb: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsBrowsable(::core::mem::transmute_copy(&pb)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ModifyDate<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdt: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ModifyDate(::core::mem::transmute_copy(&pdt)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetModifyDate<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dt: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetModifyDate(dt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Size<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pul: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Size(::core::mem::transmute_copy(&pul)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Type<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbs: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Type(::core::mem::transmute_copy(&pbs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Verbs<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppfic: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Verbs(::core::mem::transmute_copy(&ppfic)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InvokeVerb<Impl: FolderItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vverb: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InvokeVerb(&*(&vverb as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<FolderItem>,
            ::windows::core::GetTrustLevel,
            Application::<Impl, OFFSET>,
            Parent::<Impl, OFFSET>,
            Name::<Impl, OFFSET>,
            SetName::<Impl, OFFSET>,
            Path::<Impl, OFFSET>,
            GetLink::<Impl, OFFSET>,
            GetFolder::<Impl, OFFSET>,
            IsLink::<Impl, OFFSET>,
            IsFolder::<Impl, OFFSET>,
            IsFileSystem::<Impl, OFFSET>,
            IsBrowsable::<Impl, OFFSET>,
            ModifyDate::<Impl, OFFSET>,
            SetModifyDate::<Impl, OFFSET>,
            Size::<Impl, OFFSET>,
            Type::<Impl, OFFSET>,
            Verbs::<Impl, OFFSET>,
            InvokeVerb::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait FolderItem2Impl: Sized + FolderItemImpl + IDispatchImpl {
    fn InvokeVerbEx();
    fn ExtendedProperty();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for FolderItem2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.FolderItem2";
}
#[cfg(feature = "Win32_System_Com")]
impl FolderItem2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: FolderItem2Impl, const OFFSET: isize>() -> FolderItem2Vtbl {
        unsafe extern "system" fn InvokeVerbEx<Impl: FolderItem2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vverb: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, vargs: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InvokeVerbEx(&*(&vverb as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), &*(&vargs as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExtendedProperty<Impl: FolderItem2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrpropname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pvret: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ExtendedProperty(&*(&bstrpropname as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pvret)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<FolderItem2>, ::windows::core::GetTrustLevel, InvokeVerbEx::<Impl, OFFSET>, ExtendedProperty::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait FolderItemVerbImpl: Sized + IDispatchImpl {
    fn Application();
    fn Parent();
    fn Name();
    fn DoIt();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for FolderItemVerb {
    const NAME: &'static str = "Windows.Win32.UI.Shell.FolderItemVerb";
}
#[cfg(feature = "Win32_System_Com")]
impl FolderItemVerbVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: FolderItemVerbImpl, const OFFSET: isize>() -> FolderItemVerbVtbl {
        unsafe extern "system" fn Application<Impl: FolderItemVerbImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Application(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Parent<Impl: FolderItemVerbImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Parent(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Name<Impl: FolderItemVerbImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbs: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Name(::core::mem::transmute_copy(&pbs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DoIt<Impl: FolderItemVerbImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DoIt() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<FolderItemVerb>, ::windows::core::GetTrustLevel, Application::<Impl, OFFSET>, Parent::<Impl, OFFSET>, Name::<Impl, OFFSET>, DoIt::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait FolderItemVerbsImpl: Sized + IDispatchImpl {
    fn Count();
    fn Application();
    fn Parent();
    fn Item();
    fn _NewEnum();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for FolderItemVerbs {
    const NAME: &'static str = "Windows.Win32.UI.Shell.FolderItemVerbs";
}
#[cfg(feature = "Win32_System_Com")]
impl FolderItemVerbsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: FolderItemVerbsImpl, const OFFSET: isize>() -> FolderItemVerbsVtbl {
        unsafe extern "system" fn Count<Impl: FolderItemVerbsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plcount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Count(::core::mem::transmute_copy(&plcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Application<Impl: FolderItemVerbsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Application(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Parent<Impl: FolderItemVerbsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Parent(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Item<Impl: FolderItemVerbsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Item(&*(&index as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _NewEnum<Impl: FolderItemVerbsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._NewEnum(::core::mem::transmute_copy(&ppunk)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<FolderItemVerbs>, ::windows::core::GetTrustLevel, Count::<Impl, OFFSET>, Application::<Impl, OFFSET>, Parent::<Impl, OFFSET>, Item::<Impl, OFFSET>, _NewEnum::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait FolderItemsImpl: Sized + IDispatchImpl {
    fn Count();
    fn Application();
    fn Parent();
    fn Item();
    fn _NewEnum();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for FolderItems {
    const NAME: &'static str = "Windows.Win32.UI.Shell.FolderItems";
}
#[cfg(feature = "Win32_System_Com")]
impl FolderItemsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: FolderItemsImpl, const OFFSET: isize>() -> FolderItemsVtbl {
        unsafe extern "system" fn Count<Impl: FolderItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plcount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Count(::core::mem::transmute_copy(&plcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Application<Impl: FolderItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Application(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Parent<Impl: FolderItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Parent(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Item<Impl: FolderItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Item(&*(&index as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _NewEnum<Impl: FolderItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._NewEnum(::core::mem::transmute_copy(&ppunk)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<FolderItems>, ::windows::core::GetTrustLevel, Count::<Impl, OFFSET>, Application::<Impl, OFFSET>, Parent::<Impl, OFFSET>, Item::<Impl, OFFSET>, _NewEnum::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait FolderItems2Impl: Sized + FolderItemsImpl + IDispatchImpl {
    fn InvokeVerbEx();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for FolderItems2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.FolderItems2";
}
#[cfg(feature = "Win32_System_Com")]
impl FolderItems2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: FolderItems2Impl, const OFFSET: isize>() -> FolderItems2Vtbl {
        unsafe extern "system" fn InvokeVerbEx<Impl: FolderItems2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vverb: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, vargs: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InvokeVerbEx(&*(&vverb as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), &*(&vargs as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<FolderItems2>, ::windows::core::GetTrustLevel, InvokeVerbEx::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait FolderItems3Impl: Sized + FolderItems2Impl + FolderItemsImpl + IDispatchImpl {
    fn Filter();
    fn Verbs();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for FolderItems3 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.FolderItems3";
}
#[cfg(feature = "Win32_System_Com")]
impl FolderItems3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: FolderItems3Impl, const OFFSET: isize>() -> FolderItems3Vtbl {
        unsafe extern "system" fn Filter<Impl: FolderItems3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, grfflags: i32, bstrfilespec: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Filter(grfflags, &*(&bstrfilespec as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Verbs<Impl: FolderItems3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppfic: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Verbs(::core::mem::transmute_copy(&ppfic)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<FolderItems3>, ::windows::core::GetTrustLevel, Filter::<Impl, OFFSET>, Verbs::<Impl, OFFSET>)
    }
}
pub trait IACListImpl: Sized {
    fn Expand();
}
impl ::windows::core::RuntimeName for IACList {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IACList";
}
impl IACListVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IACListImpl, const OFFSET: isize>() -> IACListVtbl {
        unsafe extern "system" fn Expand<Impl: IACListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszexpand: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Expand(&*(&pszexpand as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IACList>, ::windows::core::GetTrustLevel, Expand::<Impl, OFFSET>)
    }
}
pub trait IACList2Impl: Sized + IACListImpl {
    fn SetOptions();
    fn GetOptions();
}
impl ::windows::core::RuntimeName for IACList2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IACList2";
}
impl IACList2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IACList2Impl, const OFFSET: isize>() -> IACList2Vtbl {
        unsafe extern "system" fn SetOptions<Impl: IACList2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflag: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetOptions(dwflag) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOptions<Impl: IACList2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflag: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOptions(::core::mem::transmute_copy(&pdwflag)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IACList2>, ::windows::core::GetTrustLevel, SetOptions::<Impl, OFFSET>, GetOptions::<Impl, OFFSET>)
    }
}
pub trait IAccessibilityDockingServiceImpl: Sized {
    fn GetAvailableSize();
    fn DockWindow();
    fn UndockWindow();
}
impl ::windows::core::RuntimeName for IAccessibilityDockingService {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IAccessibilityDockingService";
}
impl IAccessibilityDockingServiceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAccessibilityDockingServiceImpl, const OFFSET: isize>() -> IAccessibilityDockingServiceVtbl {
        unsafe extern "system" fn GetAvailableSize<Impl: IAccessibilityDockingServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hmonitor: super::super::Graphics::Gdi::HMONITOR, pcxfixed: *mut u32, pcymax: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAvailableSize(&*(&hmonitor as *const <super::super::Graphics::Gdi::HMONITOR as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::HMONITOR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pcxfixed), ::core::mem::transmute_copy(&pcymax)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DockWindow<Impl: IAccessibilityDockingServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, hmonitor: super::super::Graphics::Gdi::HMONITOR, cyrequested: u32, pcallback: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DockWindow(
                &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&hmonitor as *const <super::super::Graphics::Gdi::HMONITOR as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::HMONITOR as ::windows::core::DefaultType>::DefaultType),
                cyrequested,
                &*(&pcallback as *const <IAccessibilityDockingServiceCallback as ::windows::core::Abi>::Abi as *const <IAccessibilityDockingServiceCallback as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UndockWindow<Impl: IAccessibilityDockingServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UndockWindow(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IAccessibilityDockingService>, ::windows::core::GetTrustLevel, GetAvailableSize::<Impl, OFFSET>, DockWindow::<Impl, OFFSET>, UndockWindow::<Impl, OFFSET>)
    }
}
pub trait IAccessibilityDockingServiceCallbackImpl: Sized {
    fn Undocked();
}
impl ::windows::core::RuntimeName for IAccessibilityDockingServiceCallback {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IAccessibilityDockingServiceCallback";
}
impl IAccessibilityDockingServiceCallbackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAccessibilityDockingServiceCallbackImpl, const OFFSET: isize>() -> IAccessibilityDockingServiceCallbackVtbl {
        unsafe extern "system" fn Undocked<Impl: IAccessibilityDockingServiceCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, undockreason: UNDOCK_REASON) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Undocked(undockreason) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IAccessibilityDockingServiceCallback>, ::windows::core::GetTrustLevel, Undocked::<Impl, OFFSET>)
    }
}
pub trait IAccessibleObjectImpl: Sized {
    fn SetAccessibleName();
}
impl ::windows::core::RuntimeName for IAccessibleObject {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IAccessibleObject";
}
impl IAccessibleObjectVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAccessibleObjectImpl, const OFFSET: isize>() -> IAccessibleObjectVtbl {
        unsafe extern "system" fn SetAccessibleName<Impl: IAccessibleObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAccessibleName(&*(&pszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IAccessibleObject>, ::windows::core::GetTrustLevel, SetAccessibleName::<Impl, OFFSET>)
    }
}
pub trait IActionProgressImpl: Sized {
    fn Begin();
    fn UpdateProgress();
    fn UpdateText();
    fn QueryCancel();
    fn ResetCancel();
    fn End();
}
impl ::windows::core::RuntimeName for IActionProgress {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IActionProgress";
}
impl IActionProgressVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActionProgressImpl, const OFFSET: isize>() -> IActionProgressVtbl {
        unsafe extern "system" fn Begin<Impl: IActionProgressImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, action: SPACTION, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Begin(action, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateProgress<Impl: IActionProgressImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcompleted: u64, ultotal: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateProgress(ulcompleted, ultotal) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateText<Impl: IActionProgressImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sptext: SPTEXT, psztext: super::super::Foundation::PWSTR, fmaycompact: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateText(sptext, &*(&psztext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&fmaycompact as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryCancel<Impl: IActionProgressImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfcancelled: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryCancel(::core::mem::transmute_copy(&pfcancelled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetCancel<Impl: IActionProgressImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ResetCancel() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn End<Impl: IActionProgressImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).End() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IActionProgress>, ::windows::core::GetTrustLevel, Begin::<Impl, OFFSET>, UpdateProgress::<Impl, OFFSET>, UpdateText::<Impl, OFFSET>, QueryCancel::<Impl, OFFSET>, ResetCancel::<Impl, OFFSET>, End::<Impl, OFFSET>)
    }
}
pub trait IActionProgressDialogImpl: Sized {
    fn Initialize();
    fn Stop();
}
impl ::windows::core::RuntimeName for IActionProgressDialog {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IActionProgressDialog";
}
impl IActionProgressDialogVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActionProgressDialogImpl, const OFFSET: isize>() -> IActionProgressDialogVtbl {
        unsafe extern "system" fn Initialize<Impl: IActionProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, psztitle: super::super::Foundation::PWSTR, pszcancel: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(flags, &*(&psztitle as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pszcancel as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Stop<Impl: IActionProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Stop() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IActionProgressDialog>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>, Stop::<Impl, OFFSET>)
    }
}
pub trait IAppActivationUIInfoImpl: Sized {
    fn GetMonitor();
    fn GetInvokePoint();
    fn GetShowCommand();
    fn GetShowUI();
    fn GetKeyState();
}
impl ::windows::core::RuntimeName for IAppActivationUIInfo {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IAppActivationUIInfo";
}
impl IAppActivationUIInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAppActivationUIInfoImpl, const OFFSET: isize>() -> IAppActivationUIInfoVtbl {
        unsafe extern "system" fn GetMonitor<Impl: IAppActivationUIInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Graphics::Gdi::HMONITOR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMonitor(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInvokePoint<Impl: IAppActivationUIInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInvokePoint(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetShowCommand<Impl: IAppActivationUIInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetShowCommand(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetShowUI<Impl: IAppActivationUIInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetShowUI(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKeyState<Impl: IAppActivationUIInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetKeyState(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IAppActivationUIInfo>, ::windows::core::GetTrustLevel, GetMonitor::<Impl, OFFSET>, GetInvokePoint::<Impl, OFFSET>, GetShowCommand::<Impl, OFFSET>, GetShowUI::<Impl, OFFSET>, GetKeyState::<Impl, OFFSET>)
    }
}
pub trait IAppPublisherImpl: Sized {
    fn GetNumberOfCategories();
    fn GetCategories();
    fn GetNumberOfApps();
    fn EnumApps();
}
impl ::windows::core::RuntimeName for IAppPublisher {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IAppPublisher";
}
impl IAppPublisherVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAppPublisherImpl, const OFFSET: isize>() -> IAppPublisherVtbl {
        unsafe extern "system" fn GetNumberOfCategories<Impl: IAppPublisherImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcat: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberOfCategories(::core::mem::transmute_copy(&pdwcat)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCategories<Impl: IAppPublisherImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pappcategorylist: *mut APPCATEGORYINFOLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCategories(::core::mem::transmute_copy(&pappcategorylist)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberOfApps<Impl: IAppPublisherImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwapps: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNumberOfApps(::core::mem::transmute_copy(&pdwapps)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumApps<Impl: IAppPublisherImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pappcategoryid: *const ::windows::core::GUID, ppepa: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumApps(&*(&pappcategoryid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppepa)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IAppPublisher>, ::windows::core::GetTrustLevel, GetNumberOfCategories::<Impl, OFFSET>, GetCategories::<Impl, OFFSET>, GetNumberOfApps::<Impl, OFFSET>, EnumApps::<Impl, OFFSET>)
    }
}
pub trait IAppVisibilityImpl: Sized {
    fn GetAppVisibilityOnMonitor();
    fn IsLauncherVisible();
    fn Advise();
    fn Unadvise();
}
impl ::windows::core::RuntimeName for IAppVisibility {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IAppVisibility";
}
impl IAppVisibilityVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAppVisibilityImpl, const OFFSET: isize>() -> IAppVisibilityVtbl {
        unsafe extern "system" fn GetAppVisibilityOnMonitor<Impl: IAppVisibilityImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hmonitor: super::super::Graphics::Gdi::HMONITOR, pmode: *mut MONITOR_APP_VISIBILITY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAppVisibilityOnMonitor(&*(&hmonitor as *const <super::super::Graphics::Gdi::HMONITOR as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::HMONITOR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pmode)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsLauncherVisible<Impl: IAppVisibilityImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfvisible: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsLauncherVisible(::core::mem::transmute_copy(&pfvisible)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Advise<Impl: IAppVisibilityImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcallback: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Advise(&*(&pcallback as *const <IAppVisibilityEvents as ::windows::core::Abi>::Abi as *const <IAppVisibilityEvents as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Unadvise<Impl: IAppVisibilityImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Unadvise(dwcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IAppVisibility>, ::windows::core::GetTrustLevel, GetAppVisibilityOnMonitor::<Impl, OFFSET>, IsLauncherVisible::<Impl, OFFSET>, Advise::<Impl, OFFSET>, Unadvise::<Impl, OFFSET>)
    }
}
pub trait IAppVisibilityEventsImpl: Sized {
    fn AppVisibilityOnMonitorChanged();
    fn LauncherVisibilityChange();
}
impl ::windows::core::RuntimeName for IAppVisibilityEvents {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IAppVisibilityEvents";
}
impl IAppVisibilityEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAppVisibilityEventsImpl, const OFFSET: isize>() -> IAppVisibilityEventsVtbl {
        unsafe extern "system" fn AppVisibilityOnMonitorChanged<Impl: IAppVisibilityEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hmonitor: super::super::Graphics::Gdi::HMONITOR, previousmode: MONITOR_APP_VISIBILITY, currentmode: MONITOR_APP_VISIBILITY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AppVisibilityOnMonitorChanged(&*(&hmonitor as *const <super::super::Graphics::Gdi::HMONITOR as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::HMONITOR as ::windows::core::DefaultType>::DefaultType), previousmode, currentmode) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LauncherVisibilityChange<Impl: IAppVisibilityEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentvisiblestate: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).LauncherVisibilityChange(&*(&currentvisiblestate as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IAppVisibilityEvents>, ::windows::core::GetTrustLevel, AppVisibilityOnMonitorChanged::<Impl, OFFSET>, LauncherVisibilityChange::<Impl, OFFSET>)
    }
}
pub trait IApplicationActivationManagerImpl: Sized {
    fn ActivateApplication();
    fn ActivateForFile();
    fn ActivateForProtocol();
}
impl ::windows::core::RuntimeName for IApplicationActivationManager {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IApplicationActivationManager";
}
impl IApplicationActivationManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IApplicationActivationManagerImpl, const OFFSET: isize>() -> IApplicationActivationManagerVtbl {
        unsafe extern "system" fn ActivateApplication<Impl: IApplicationActivationManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, appusermodelid: super::super::Foundation::PWSTR, arguments: super::super::Foundation::PWSTR, options: ACTIVATEOPTIONS, processid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ActivateApplication(&*(&appusermodelid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&arguments as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), options, ::core::mem::transmute_copy(&processid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ActivateForFile<Impl: IApplicationActivationManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, appusermodelid: super::super::Foundation::PWSTR, itemarray: ::windows::core::RawPtr, verb: super::super::Foundation::PWSTR, processid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ActivateForFile(
                &*(&appusermodelid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&itemarray as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType),
                &*(&verb as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&processid),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ActivateForProtocol<Impl: IApplicationActivationManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, appusermodelid: super::super::Foundation::PWSTR, itemarray: ::windows::core::RawPtr, processid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ActivateForProtocol(&*(&appusermodelid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&itemarray as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&processid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IApplicationActivationManager>, ::windows::core::GetTrustLevel, ActivateApplication::<Impl, OFFSET>, ActivateForFile::<Impl, OFFSET>, ActivateForProtocol::<Impl, OFFSET>)
    }
}
pub trait IApplicationAssociationRegistrationImpl: Sized {
    fn QueryCurrentDefault();
    fn QueryAppIsDefault();
    fn QueryAppIsDefaultAll();
    fn SetAppAsDefault();
    fn SetAppAsDefaultAll();
    fn ClearUserAssociations();
}
impl ::windows::core::RuntimeName for IApplicationAssociationRegistration {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IApplicationAssociationRegistration";
}
impl IApplicationAssociationRegistrationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IApplicationAssociationRegistrationImpl, const OFFSET: isize>() -> IApplicationAssociationRegistrationVtbl {
        unsafe extern "system" fn QueryCurrentDefault<Impl: IApplicationAssociationRegistrationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszquery: super::super::Foundation::PWSTR, atquerytype: ASSOCIATIONTYPE, alquerylevel: ASSOCIATIONLEVEL, ppszassociation: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryCurrentDefault(&*(&pszquery as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), atquerytype, alquerylevel, ::core::mem::transmute_copy(&ppszassociation)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryAppIsDefault<Impl: IApplicationAssociationRegistrationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszquery: super::super::Foundation::PWSTR, atquerytype: ASSOCIATIONTYPE, alquerylevel: ASSOCIATIONLEVEL, pszappregistryname: super::super::Foundation::PWSTR, pfdefault: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryAppIsDefault(&*(&pszquery as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), atquerytype, alquerylevel, &*(&pszappregistryname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pfdefault)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryAppIsDefaultAll<Impl: IApplicationAssociationRegistrationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, alquerylevel: ASSOCIATIONLEVEL, pszappregistryname: super::super::Foundation::PWSTR, pfdefault: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryAppIsDefaultAll(alquerylevel, &*(&pszappregistryname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pfdefault)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAppAsDefault<Impl: IApplicationAssociationRegistrationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszappregistryname: super::super::Foundation::PWSTR, pszset: super::super::Foundation::PWSTR, atsettype: ASSOCIATIONTYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAppAsDefault(&*(&pszappregistryname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pszset as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), atsettype) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAppAsDefaultAll<Impl: IApplicationAssociationRegistrationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszappregistryname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAppAsDefaultAll(&*(&pszappregistryname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ClearUserAssociations<Impl: IApplicationAssociationRegistrationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ClearUserAssociations() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IApplicationAssociationRegistration>,
            ::windows::core::GetTrustLevel,
            QueryCurrentDefault::<Impl, OFFSET>,
            QueryAppIsDefault::<Impl, OFFSET>,
            QueryAppIsDefaultAll::<Impl, OFFSET>,
            SetAppAsDefault::<Impl, OFFSET>,
            SetAppAsDefaultAll::<Impl, OFFSET>,
            ClearUserAssociations::<Impl, OFFSET>,
        )
    }
}
pub trait IApplicationAssociationRegistrationUIImpl: Sized {
    fn LaunchAdvancedAssociationUI();
}
impl ::windows::core::RuntimeName for IApplicationAssociationRegistrationUI {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IApplicationAssociationRegistrationUI";
}
impl IApplicationAssociationRegistrationUIVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IApplicationAssociationRegistrationUIImpl, const OFFSET: isize>() -> IApplicationAssociationRegistrationUIVtbl {
        unsafe extern "system" fn LaunchAdvancedAssociationUI<Impl: IApplicationAssociationRegistrationUIImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszappregistryname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).LaunchAdvancedAssociationUI(&*(&pszappregistryname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IApplicationAssociationRegistrationUI>, ::windows::core::GetTrustLevel, LaunchAdvancedAssociationUI::<Impl, OFFSET>)
    }
}
pub trait IApplicationDesignModeSettingsImpl: Sized {
    fn SetNativeDisplaySize();
    fn SetScaleFactor();
    fn SetApplicationViewState();
    fn ComputeApplicationSize();
    fn IsApplicationViewStateSupported();
    fn TriggerEdgeGesture();
}
impl ::windows::core::RuntimeName for IApplicationDesignModeSettings {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IApplicationDesignModeSettings";
}
impl IApplicationDesignModeSettingsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IApplicationDesignModeSettingsImpl, const OFFSET: isize>() -> IApplicationDesignModeSettingsVtbl {
        unsafe extern "system" fn SetNativeDisplaySize<Impl: IApplicationDesignModeSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, nativedisplaysizepixels: super::super::Foundation::SIZE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetNativeDisplaySize(&*(&nativedisplaysizepixels as *const <super::super::Foundation::SIZE as ::windows::core::Abi>::Abi as *const <super::super::Foundation::SIZE as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScaleFactor<Impl: IApplicationDesignModeSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scalefactor: Common::DEVICE_SCALE_FACTOR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetScaleFactor(scalefactor) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetApplicationViewState<Impl: IApplicationDesignModeSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, viewstate: APPLICATION_VIEW_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetApplicationViewState(viewstate) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ComputeApplicationSize<Impl: IApplicationDesignModeSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, applicationsizepixels: *mut super::super::Foundation::SIZE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ComputeApplicationSize(::core::mem::transmute_copy(&applicationsizepixels)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsApplicationViewStateSupported<Impl: IApplicationDesignModeSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, viewstate: APPLICATION_VIEW_STATE, nativedisplaysizepixels: super::super::Foundation::SIZE, scalefactor: Common::DEVICE_SCALE_FACTOR, supported: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsApplicationViewStateSupported(viewstate, &*(&nativedisplaysizepixels as *const <super::super::Foundation::SIZE as ::windows::core::Abi>::Abi as *const <super::super::Foundation::SIZE as ::windows::core::DefaultType>::DefaultType), scalefactor, ::core::mem::transmute_copy(&supported)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TriggerEdgeGesture<Impl: IApplicationDesignModeSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, edgegesturekind: EDGE_GESTURE_KIND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TriggerEdgeGesture(edgegesturekind) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IApplicationDesignModeSettings>,
            ::windows::core::GetTrustLevel,
            SetNativeDisplaySize::<Impl, OFFSET>,
            SetScaleFactor::<Impl, OFFSET>,
            SetApplicationViewState::<Impl, OFFSET>,
            ComputeApplicationSize::<Impl, OFFSET>,
            IsApplicationViewStateSupported::<Impl, OFFSET>,
            TriggerEdgeGesture::<Impl, OFFSET>,
        )
    }
}
pub trait IApplicationDesignModeSettings2Impl: Sized + IApplicationDesignModeSettingsImpl {
    fn SetNativeDisplayOrientation();
    fn SetApplicationViewOrientation();
    fn SetAdjacentDisplayEdges();
    fn SetIsOnLockScreen();
    fn SetApplicationViewMinWidth();
    fn GetApplicationSizeBounds();
    fn GetApplicationViewOrientation();
}
impl ::windows::core::RuntimeName for IApplicationDesignModeSettings2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IApplicationDesignModeSettings2";
}
impl IApplicationDesignModeSettings2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IApplicationDesignModeSettings2Impl, const OFFSET: isize>() -> IApplicationDesignModeSettings2Vtbl {
        unsafe extern "system" fn SetNativeDisplayOrientation<Impl: IApplicationDesignModeSettings2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, nativedisplayorientation: NATIVE_DISPLAY_ORIENTATION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetNativeDisplayOrientation(nativedisplayorientation) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetApplicationViewOrientation<Impl: IApplicationDesignModeSettings2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vieworientation: APPLICATION_VIEW_ORIENTATION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetApplicationViewOrientation(vieworientation) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAdjacentDisplayEdges<Impl: IApplicationDesignModeSettings2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, adjacentdisplayedges: ADJACENT_DISPLAY_EDGES) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAdjacentDisplayEdges(adjacentdisplayedges) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetIsOnLockScreen<Impl: IApplicationDesignModeSettings2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, isonlockscreen: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetIsOnLockScreen(&*(&isonlockscreen as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetApplicationViewMinWidth<Impl: IApplicationDesignModeSettings2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, viewminwidth: APPLICATION_VIEW_MIN_WIDTH) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetApplicationViewMinWidth(viewminwidth) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetApplicationSizeBounds<Impl: IApplicationDesignModeSettings2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, minapplicationsizepixels: *mut super::super::Foundation::SIZE, maxapplicationsizepixels: *mut super::super::Foundation::SIZE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetApplicationSizeBounds(::core::mem::transmute_copy(&minapplicationsizepixels), ::core::mem::transmute_copy(&maxapplicationsizepixels)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetApplicationViewOrientation<Impl: IApplicationDesignModeSettings2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, applicationsizepixels: super::super::Foundation::SIZE, vieworientation: *mut APPLICATION_VIEW_ORIENTATION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetApplicationViewOrientation(&*(&applicationsizepixels as *const <super::super::Foundation::SIZE as ::windows::core::Abi>::Abi as *const <super::super::Foundation::SIZE as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&vieworientation)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IApplicationDesignModeSettings2>,
            ::windows::core::GetTrustLevel,
            SetNativeDisplayOrientation::<Impl, OFFSET>,
            SetApplicationViewOrientation::<Impl, OFFSET>,
            SetAdjacentDisplayEdges::<Impl, OFFSET>,
            SetIsOnLockScreen::<Impl, OFFSET>,
            SetApplicationViewMinWidth::<Impl, OFFSET>,
            GetApplicationSizeBounds::<Impl, OFFSET>,
            GetApplicationViewOrientation::<Impl, OFFSET>,
        )
    }
}
pub trait IApplicationDestinationsImpl: Sized {
    fn SetAppID();
    fn RemoveDestination();
    fn RemoveAllDestinations();
}
impl ::windows::core::RuntimeName for IApplicationDestinations {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IApplicationDestinations";
}
impl IApplicationDestinationsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IApplicationDestinationsImpl, const OFFSET: isize>() -> IApplicationDestinationsVtbl {
        unsafe extern "system" fn SetAppID<Impl: IApplicationDestinationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszappid: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAppID(&*(&pszappid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveDestination<Impl: IApplicationDestinationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveDestination(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveAllDestinations<Impl: IApplicationDestinationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveAllDestinations() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IApplicationDestinations>, ::windows::core::GetTrustLevel, SetAppID::<Impl, OFFSET>, RemoveDestination::<Impl, OFFSET>, RemoveAllDestinations::<Impl, OFFSET>)
    }
}
pub trait IApplicationDocumentListsImpl: Sized {
    fn SetAppID();
    fn GetList();
}
impl ::windows::core::RuntimeName for IApplicationDocumentLists {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IApplicationDocumentLists";
}
impl IApplicationDocumentListsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IApplicationDocumentListsImpl, const OFFSET: isize>() -> IApplicationDocumentListsVtbl {
        unsafe extern "system" fn SetAppID<Impl: IApplicationDocumentListsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszappid: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAppID(&*(&pszappid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetList<Impl: IApplicationDocumentListsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, listtype: APPDOCLISTTYPE, citemsdesired: u32, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetList(listtype, citemsdesired, &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IApplicationDocumentLists>, ::windows::core::GetTrustLevel, SetAppID::<Impl, OFFSET>, GetList::<Impl, OFFSET>)
    }
}
pub trait IAssocHandlerImpl: Sized {
    fn GetName();
    fn GetUIName();
    fn GetIconLocation();
    fn IsRecommended();
    fn MakeDefault();
    fn Invoke();
    fn CreateInvoker();
}
impl ::windows::core::RuntimeName for IAssocHandler {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IAssocHandler";
}
impl IAssocHandlerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAssocHandlerImpl, const OFFSET: isize>() -> IAssocHandlerVtbl {
        unsafe extern "system" fn GetName<Impl: IAssocHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsz: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&ppsz)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetUIName<Impl: IAssocHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsz: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetUIName(::core::mem::transmute_copy(&ppsz)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIconLocation<Impl: IAssocHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszpath: *mut super::super::Foundation::PWSTR, pindex: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIconLocation(::core::mem::transmute_copy(&ppszpath), ::core::mem::transmute_copy(&pindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsRecommended<Impl: IAssocHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsRecommended() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MakeDefault<Impl: IAssocHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdescription: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MakeDefault(&*(&pszdescription as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Invoke<Impl: IAssocHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdo: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Invoke(&*(&pdo as *const <super::super::System::Com::IDataObject as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDataObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateInvoker<Impl: IAssocHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdo: ::windows::core::RawPtr, ppinvoker: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateInvoker(&*(&pdo as *const <super::super::System::Com::IDataObject as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDataObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppinvoker)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IAssocHandler>, ::windows::core::GetTrustLevel, GetName::<Impl, OFFSET>, GetUIName::<Impl, OFFSET>, GetIconLocation::<Impl, OFFSET>, IsRecommended::<Impl, OFFSET>, MakeDefault::<Impl, OFFSET>, Invoke::<Impl, OFFSET>, CreateInvoker::<Impl, OFFSET>)
    }
}
pub trait IAssocHandlerInvokerImpl: Sized {
    fn SupportsSelection();
    fn Invoke();
}
impl ::windows::core::RuntimeName for IAssocHandlerInvoker {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IAssocHandlerInvoker";
}
impl IAssocHandlerInvokerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAssocHandlerInvokerImpl, const OFFSET: isize>() -> IAssocHandlerInvokerVtbl {
        unsafe extern "system" fn SupportsSelection<Impl: IAssocHandlerInvokerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SupportsSelection() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Invoke<Impl: IAssocHandlerInvokerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Invoke() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IAssocHandlerInvoker>, ::windows::core::GetTrustLevel, SupportsSelection::<Impl, OFFSET>, Invoke::<Impl, OFFSET>)
    }
}
pub trait IAttachmentExecuteImpl: Sized {
    fn SetClientTitle();
    fn SetClientGuid();
    fn SetLocalPath();
    fn SetFileName();
    fn SetSource();
    fn SetReferrer();
    fn CheckPolicy();
    fn Prompt();
    fn Save();
    fn Execute();
    fn SaveWithUI();
    fn ClearClientState();
}
impl ::windows::core::RuntimeName for IAttachmentExecute {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IAttachmentExecute";
}
impl IAttachmentExecuteVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAttachmentExecuteImpl, const OFFSET: isize>() -> IAttachmentExecuteVtbl {
        unsafe extern "system" fn SetClientTitle<Impl: IAttachmentExecuteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztitle: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetClientTitle(&*(&psztitle as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetClientGuid<Impl: IAttachmentExecuteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetClientGuid(&*(&guid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLocalPath<Impl: IAttachmentExecuteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszlocalpath: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetLocalPath(&*(&pszlocalpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFileName<Impl: IAttachmentExecuteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfilename: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFileName(&*(&pszfilename as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSource<Impl: IAttachmentExecuteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszsource: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetSource(&*(&pszsource as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetReferrer<Impl: IAttachmentExecuteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszreferrer: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetReferrer(&*(&pszreferrer as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CheckPolicy<Impl: IAttachmentExecuteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CheckPolicy() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Prompt<Impl: IAttachmentExecuteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, prompt: ATTACHMENT_PROMPT, paction: *mut ATTACHMENT_ACTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Prompt(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), prompt, ::core::mem::transmute_copy(&paction)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Save<Impl: IAttachmentExecuteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Save() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Execute<Impl: IAttachmentExecuteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pszverb: super::super::Foundation::PWSTR, phprocess: *mut super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Execute(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&pszverb as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&phprocess)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SaveWithUI<Impl: IAttachmentExecuteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SaveWithUI(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ClearClientState<Impl: IAttachmentExecuteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ClearClientState() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IAttachmentExecute>,
            ::windows::core::GetTrustLevel,
            SetClientTitle::<Impl, OFFSET>,
            SetClientGuid::<Impl, OFFSET>,
            SetLocalPath::<Impl, OFFSET>,
            SetFileName::<Impl, OFFSET>,
            SetSource::<Impl, OFFSET>,
            SetReferrer::<Impl, OFFSET>,
            CheckPolicy::<Impl, OFFSET>,
            Prompt::<Impl, OFFSET>,
            Save::<Impl, OFFSET>,
            Execute::<Impl, OFFSET>,
            SaveWithUI::<Impl, OFFSET>,
            ClearClientState::<Impl, OFFSET>,
        )
    }
}
pub trait IAutoCompleteImpl: Sized {
    fn Init();
    fn Enable();
}
impl ::windows::core::RuntimeName for IAutoComplete {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IAutoComplete";
}
impl IAutoCompleteVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAutoCompleteImpl, const OFFSET: isize>() -> IAutoCompleteVtbl {
        unsafe extern "system" fn Init<Impl: IAutoCompleteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndedit: super::super::Foundation::HWND, punkacl: *mut ::core::ffi::c_void, pwszregkeypath: super::super::Foundation::PWSTR, pwszquickcomplete: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Init(
                &*(&hwndedit as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&punkacl as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                &*(&pwszregkeypath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pwszquickcomplete as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Enable<Impl: IAutoCompleteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Enable(&*(&fenable as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IAutoComplete>, ::windows::core::GetTrustLevel, Init::<Impl, OFFSET>, Enable::<Impl, OFFSET>)
    }
}
pub trait IAutoComplete2Impl: Sized + IAutoCompleteImpl {
    fn SetOptions();
    fn GetOptions();
}
impl ::windows::core::RuntimeName for IAutoComplete2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IAutoComplete2";
}
impl IAutoComplete2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAutoComplete2Impl, const OFFSET: isize>() -> IAutoComplete2Vtbl {
        unsafe extern "system" fn SetOptions<Impl: IAutoComplete2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflag: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetOptions(dwflag) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOptions<Impl: IAutoComplete2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflag: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOptions(::core::mem::transmute_copy(&pdwflag)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IAutoComplete2>, ::windows::core::GetTrustLevel, SetOptions::<Impl, OFFSET>, GetOptions::<Impl, OFFSET>)
    }
}
pub trait IAutoCompleteDropDownImpl: Sized {
    fn GetDropDownStatus();
    fn ResetEnumerator();
}
impl ::windows::core::RuntimeName for IAutoCompleteDropDown {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IAutoCompleteDropDown";
}
impl IAutoCompleteDropDownVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAutoCompleteDropDownImpl, const OFFSET: isize>() -> IAutoCompleteDropDownVtbl {
        unsafe extern "system" fn GetDropDownStatus<Impl: IAutoCompleteDropDownImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32, ppwszstring: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDropDownStatus(::core::mem::transmute_copy(&pdwflags), ::core::mem::transmute_copy(&ppwszstring)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetEnumerator<Impl: IAutoCompleteDropDownImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ResetEnumerator() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IAutoCompleteDropDown>, ::windows::core::GetTrustLevel, GetDropDownStatus::<Impl, OFFSET>, ResetEnumerator::<Impl, OFFSET>)
    }
}
pub trait IBandHostImpl: Sized {
    fn CreateBand();
    fn SetBandAvailability();
    fn DestroyBand();
}
impl ::windows::core::RuntimeName for IBandHost {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IBandHost";
}
impl IBandHostVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBandHostImpl, const OFFSET: isize>() -> IBandHostVtbl {
        unsafe extern "system" fn CreateBand<Impl: IBandHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rclsidband: *const ::windows::core::GUID, favailable: super::super::Foundation::BOOL, fvisible: super::super::Foundation::BOOL, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateBand(
                &*(&rclsidband as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                &*(&favailable as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType),
                &*(&fvisible as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType),
                &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppv),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBandAvailability<Impl: IBandHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rclsidband: *const ::windows::core::GUID, favailable: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBandAvailability(&*(&rclsidband as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&favailable as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DestroyBand<Impl: IBandHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rclsidband: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DestroyBand(&*(&rclsidband as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IBandHost>, ::windows::core::GetTrustLevel, CreateBand::<Impl, OFFSET>, SetBandAvailability::<Impl, OFFSET>, DestroyBand::<Impl, OFFSET>)
    }
}
pub trait IBandSiteImpl: Sized {
    fn AddBand();
    fn EnumBands();
    fn QueryBand();
    fn SetBandState();
    fn RemoveBand();
    fn GetBandObject();
    fn SetBandSiteInfo();
    fn GetBandSiteInfo();
}
impl ::windows::core::RuntimeName for IBandSite {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IBandSite";
}
impl IBandSiteVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBandSiteImpl, const OFFSET: isize>() -> IBandSiteVtbl {
        unsafe extern "system" fn AddBand<Impl: IBandSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddBand(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumBands<Impl: IBandSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uband: u32, pdwbandid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumBands(uband, ::core::mem::transmute_copy(&pdwbandid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryBand<Impl: IBandSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwbandid: u32, ppstb: *mut ::windows::core::RawPtr, pdwstate: *mut u32, pszname: super::super::Foundation::PWSTR, cchname: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryBand(dwbandid, ::core::mem::transmute_copy(&ppstb), ::core::mem::transmute_copy(&pdwstate), ::core::mem::transmute_copy(&pszname), cchname) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBandState<Impl: IBandSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwbandid: u32, dwmask: u32, dwstate: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBandState(dwbandid, dwmask, dwstate) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBand<Impl: IBandSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwbandid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveBand(dwbandid) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBandObject<Impl: IBandSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwbandid: u32, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBandObject(dwbandid, &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBandSiteInfo<Impl: IBandSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbsinfo: *const BANDSITEINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBandSiteInfo(&*(&pbsinfo as *const <BANDSITEINFO as ::windows::core::Abi>::Abi as *const <BANDSITEINFO as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBandSiteInfo<Impl: IBandSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbsinfo: *mut BANDSITEINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBandSiteInfo(&*(&pbsinfo as *const <BANDSITEINFO as ::windows::core::Abi>::Abi as *const <BANDSITEINFO as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IBandSite>,
            ::windows::core::GetTrustLevel,
            AddBand::<Impl, OFFSET>,
            EnumBands::<Impl, OFFSET>,
            QueryBand::<Impl, OFFSET>,
            SetBandState::<Impl, OFFSET>,
            RemoveBand::<Impl, OFFSET>,
            GetBandObject::<Impl, OFFSET>,
            SetBandSiteInfo::<Impl, OFFSET>,
            GetBandSiteInfo::<Impl, OFFSET>,
        )
    }
}
pub trait IBannerNotificationHandlerImpl: Sized {
    fn OnBannerEvent();
}
impl ::windows::core::RuntimeName for IBannerNotificationHandler {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IBannerNotificationHandler";
}
impl IBannerNotificationHandlerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBannerNotificationHandlerImpl, const OFFSET: isize>() -> IBannerNotificationHandlerVtbl {
        unsafe extern "system" fn OnBannerEvent<Impl: IBannerNotificationHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, notification: *const BANNER_NOTIFICATION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnBannerEvent(&*(&notification as *const <BANNER_NOTIFICATION as ::windows::core::Abi>::Abi as *const <BANNER_NOTIFICATION as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IBannerNotificationHandler>, ::windows::core::GetTrustLevel, OnBannerEvent::<Impl, OFFSET>)
    }
}
pub trait IBanneredBarImpl: Sized {
    fn SetIconSize();
    fn GetIconSize();
    fn SetBitmap();
    fn GetBitmap();
}
impl ::windows::core::RuntimeName for IBanneredBar {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IBanneredBar";
}
impl IBanneredBarVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBanneredBarImpl, const OFFSET: isize>() -> IBanneredBarVtbl {
        unsafe extern "system" fn SetIconSize<Impl: IBanneredBarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, iicon: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetIconSize(iicon) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIconSize<Impl: IBanneredBarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, piicon: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIconSize(::core::mem::transmute_copy(&piicon)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBitmap<Impl: IBanneredBarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hbitmap: super::super::Graphics::Gdi::HBITMAP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBitmap(&*(&hbitmap as *const <super::super::Graphics::Gdi::HBITMAP as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::HBITMAP as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBitmap<Impl: IBanneredBarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phbitmap: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBitmap(::core::mem::transmute_copy(&phbitmap)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IBanneredBar>, ::windows::core::GetTrustLevel, SetIconSize::<Impl, OFFSET>, GetIconSize::<Impl, OFFSET>, SetBitmap::<Impl, OFFSET>, GetBitmap::<Impl, OFFSET>)
    }
}
pub trait IBrowserFrameOptionsImpl: Sized {
    fn GetFrameOptions();
}
impl ::windows::core::RuntimeName for IBrowserFrameOptions {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IBrowserFrameOptions";
}
impl IBrowserFrameOptionsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBrowserFrameOptionsImpl, const OFFSET: isize>() -> IBrowserFrameOptionsVtbl {
        unsafe extern "system" fn GetFrameOptions<Impl: IBrowserFrameOptionsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwmask: u32, pdwoptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFrameOptions(dwmask, ::core::mem::transmute_copy(&pdwoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IBrowserFrameOptions>, ::windows::core::GetTrustLevel, GetFrameOptions::<Impl, OFFSET>)
    }
}
pub trait IBrowserServiceImpl: Sized {
    fn GetParentSite();
    fn SetTitle();
    fn GetTitle();
    fn GetOleObject();
    fn GetTravelLog();
    fn ShowControlWindow();
    fn IsControlWindowShown();
    fn IEGetDisplayName();
    fn IEParseDisplayName();
    fn DisplayParseError();
    fn NavigateToPidl();
    fn SetNavigateState();
    fn GetNavigateState();
    fn NotifyRedirect();
    fn UpdateWindowList();
    fn UpdateBackForwardState();
    fn SetFlags();
    fn GetFlags();
    fn CanNavigateNow();
    fn GetPidl();
    fn SetReferrer();
    fn GetBrowserIndex();
    fn GetBrowserByIndex();
    fn GetHistoryObject();
    fn SetHistoryObject();
    fn CacheOLEServer();
    fn GetSetCodePage();
    fn OnHttpEquiv();
    fn GetPalette();
    fn RegisterWindow();
}
impl ::windows::core::RuntimeName for IBrowserService {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IBrowserService";
}
impl IBrowserServiceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBrowserServiceImpl, const OFFSET: isize>() -> IBrowserServiceVtbl {
        unsafe extern "system" fn GetParentSite<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppipsite: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetParentSite(::core::mem::transmute_copy(&ppipsite)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTitle<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psv: ::windows::core::RawPtr, pszname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTitle(&*(&psv as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType), &*(&pszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTitle<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psv: ::windows::core::RawPtr, pszname: super::super::Foundation::PWSTR, cchname: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTitle(&*(&psv as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pszname), cchname) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOleObject<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppobjv: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOleObject(::core::mem::transmute_copy(&ppobjv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTravelLog<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptl: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTravelLog(::core::mem::transmute_copy(&pptl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShowControlWindow<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, fshow: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowControlWindow(id, &*(&fshow as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsControlWindowShown<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, pfshown: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsControlWindowShown(id, ::core::mem::transmute_copy(&pfshown)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IEGetDisplayName<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pwszname: super::super::Foundation::PWSTR, uflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IEGetDisplayName(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pwszname), uflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IEParseDisplayName<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uicp: u32, pwszpath: super::super::Foundation::PWSTR, ppidlout: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IEParseDisplayName(uicp, &*(&pwszpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppidlout)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisplayParseError<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hres: ::windows::core::HRESULT, pwszpath: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DisplayParseError(hres, &*(&pwszpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NavigateToPidl<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, grfhlnf: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).NavigateToPidl(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), grfhlnf) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNavigateState<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bnstate: BNSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetNavigateState(bnstate) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNavigateState<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbnstate: *mut BNSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNavigateState(::core::mem::transmute_copy(&pbnstate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NotifyRedirect<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psv: ::windows::core::RawPtr, pidl: *const Common::ITEMIDLIST, pfdidbrowse: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).NotifyRedirect(&*(&psv as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType), &*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pfdidbrowse)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateWindowList<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateWindowList() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateBackForwardState<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateBackForwardState() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFlags<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, dwflagmask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFlags(dwflags, dwflagmask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFlags<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFlags(::core::mem::transmute_copy(&pdwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CanNavigateNow<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CanNavigateNow() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPidl<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPidl(::core::mem::transmute_copy(&ppidl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetReferrer<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetReferrer(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBrowserIndex<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> u32 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBrowserIndex() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBrowserByIndex<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwid: u32, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBrowserByIndex(dwid, ::core::mem::transmute_copy(&ppunk)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetHistoryObject<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppole: *mut ::windows::core::RawPtr, pstm: *mut ::windows::core::RawPtr, ppbc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetHistoryObject(::core::mem::transmute_copy(&ppole), ::core::mem::transmute_copy(&pstm), ::core::mem::transmute_copy(&ppbc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetHistoryObject<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pole: ::windows::core::RawPtr, fislocalanchor: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetHistoryObject(&*(&pole as *const <super::super::System::Ole::IOleObject as ::windows::core::Abi>::Abi as *const <super::super::System::Ole::IOleObject as ::windows::core::DefaultType>::DefaultType), &*(&fislocalanchor as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CacheOLEServer<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pole: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CacheOLEServer(&*(&pole as *const <super::super::System::Ole::IOleObject as ::windows::core::Abi>::Abi as *const <super::super::System::Ole::IOleObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSetCodePage<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvarin: *const super::super::System::Com::VARIANT, pvarout: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSetCodePage(&*(&pvarin as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pvarout)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnHttpEquiv<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psv: ::windows::core::RawPtr, fdone: super::super::Foundation::BOOL, pvarargin: *const super::super::System::Com::VARIANT, pvarargout: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnHttpEquiv(
                &*(&psv as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType),
                &*(&fdone as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType),
                &*(&pvarargin as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&pvarargout),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPalette<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hpal: *mut super::super::Graphics::Gdi::HPALETTE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPalette(::core::mem::transmute_copy(&hpal)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterWindow<Impl: IBrowserServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fforceregister: super::super::Foundation::BOOL, swc: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RegisterWindow(&*(&fforceregister as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType), swc) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IBrowserService>,
            ::windows::core::GetTrustLevel,
            GetParentSite::<Impl, OFFSET>,
            SetTitle::<Impl, OFFSET>,
            GetTitle::<Impl, OFFSET>,
            GetOleObject::<Impl, OFFSET>,
            GetTravelLog::<Impl, OFFSET>,
            ShowControlWindow::<Impl, OFFSET>,
            IsControlWindowShown::<Impl, OFFSET>,
            IEGetDisplayName::<Impl, OFFSET>,
            IEParseDisplayName::<Impl, OFFSET>,
            DisplayParseError::<Impl, OFFSET>,
            NavigateToPidl::<Impl, OFFSET>,
            SetNavigateState::<Impl, OFFSET>,
            GetNavigateState::<Impl, OFFSET>,
            NotifyRedirect::<Impl, OFFSET>,
            UpdateWindowList::<Impl, OFFSET>,
            UpdateBackForwardState::<Impl, OFFSET>,
            SetFlags::<Impl, OFFSET>,
            GetFlags::<Impl, OFFSET>,
            CanNavigateNow::<Impl, OFFSET>,
            GetPidl::<Impl, OFFSET>,
            SetReferrer::<Impl, OFFSET>,
            GetBrowserIndex::<Impl, OFFSET>,
            GetBrowserByIndex::<Impl, OFFSET>,
            GetHistoryObject::<Impl, OFFSET>,
            SetHistoryObject::<Impl, OFFSET>,
            CacheOLEServer::<Impl, OFFSET>,
            GetSetCodePage::<Impl, OFFSET>,
            OnHttpEquiv::<Impl, OFFSET>,
            GetPalette::<Impl, OFFSET>,
            RegisterWindow::<Impl, OFFSET>,
        )
    }
}
pub trait IBrowserService2Impl: Sized + IBrowserServiceImpl {
    fn WndProcBS();
    fn SetAsDefFolderSettings();
    fn GetViewRect();
    fn OnSize();
    fn OnCreate();
    fn OnCommand();
    fn OnDestroy();
    fn OnNotify();
    fn OnSetFocus();
    fn OnFrameWindowActivateBS();
    fn ReleaseShellView();
    fn ActivatePendingView();
    fn CreateViewWindow();
    fn CreateBrowserPropSheetExt();
    fn GetViewWindow();
    fn GetBaseBrowserData();
    fn PutBaseBrowserData();
    fn InitializeTravelLog();
    fn SetTopBrowser();
    fn Offline();
    fn AllowViewResize();
    fn SetActivateState();
    fn UpdateSecureLockIcon();
    fn InitializeDownloadManager();
    fn InitializeTransitionSite();
    fn _Initialize();
    fn _CancelPendingNavigationAsync();
    fn _CancelPendingView();
    fn _MaySaveChanges();
    fn _PauseOrResumeView();
    fn _DisableModeless();
    fn _NavigateToPidl2();
    fn _TryShell2Rename();
    fn _SwitchActivationNow();
    fn _ExecChildren();
    fn _SendChildren();
    fn GetFolderSetData();
    fn _OnFocusChange();
    fn v_ShowHideChildWindows();
    fn _get_itbLastFocus();
    fn _put_itbLastFocus();
    fn _UIActivateView();
    fn _GetViewBorderRect();
    fn _UpdateViewRectSize();
    fn _ResizeNextBorder();
    fn _ResizeView();
    fn _GetEffectiveClientArea();
    fn v_GetViewStream();
    fn ForwardViewMsg();
    fn SetAcceleratorMenu();
    fn _GetToolbarCount();
    fn _GetToolbarItem();
    fn _SaveToolbars();
    fn _LoadToolbars();
    fn _CloseAndReleaseToolbars();
    fn v_MayGetNextToolbarFocus();
    fn _ResizeNextBorderHelper();
    fn _FindTBar();
    fn _SetFocus();
    fn v_MayTranslateAccelerator();
    fn _GetBorderDWHelper();
    fn v_CheckZoneCrossing();
}
impl ::windows::core::RuntimeName for IBrowserService2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IBrowserService2";
}
impl IBrowserService2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBrowserService2Impl, const OFFSET: isize>() -> IBrowserService2Vtbl {
        unsafe extern "system" fn WndProcBS<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> super::super::Foundation::LRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WndProcBS(
                &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                umsg,
                &*(&wparam as *const <super::super::Foundation::WPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::WPARAM as ::windows::core::DefaultType>::DefaultType),
                &*(&lparam as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAsDefFolderSettings<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAsDefFolderSettings() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetViewRect<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prc: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetViewRect(::core::mem::transmute_copy(&prc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnSize<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, wparam: super::super::Foundation::WPARAM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnSize(&*(&wparam as *const <super::super::Foundation::WPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::WPARAM as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnCreate<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcs: *const super::WindowsAndMessaging::CREATESTRUCTW) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnCreate(&*(&pcs as *const <super::WindowsAndMessaging::CREATESTRUCTW as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::CREATESTRUCTW as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnCommand<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> super::super::Foundation::LRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnCommand(&*(&wparam as *const <super::super::Foundation::WPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::WPARAM as ::windows::core::DefaultType>::DefaultType), &*(&lparam as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnDestroy<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnDestroy() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnNotify<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnm: *const super::Controls::NMHDR) -> super::super::Foundation::LRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnNotify(&*(&pnm as *const <super::Controls::NMHDR as ::windows::core::Abi>::Abi as *const <super::Controls::NMHDR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnSetFocus<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnSetFocus() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnFrameWindowActivateBS<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, factive: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnFrameWindowActivateBS(&*(&factive as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReleaseShellView<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReleaseShellView() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ActivatePendingView<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ActivatePendingView() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateViewWindow<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psvnew: ::windows::core::RawPtr, psvold: ::windows::core::RawPtr, prcview: *const super::super::Foundation::RECT, phwnd: *mut super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateViewWindow(&*(&psvnew as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType), &*(&psvold as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType), &*(&prcview as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&phwnd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateBrowserPropSheetExt<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateBrowserPropSheetExt(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetViewWindow<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phwndview: *mut super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetViewWindow(::core::mem::transmute_copy(&phwndview)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBaseBrowserData<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbbd: *mut *mut BASEBROWSERDATALH) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBaseBrowserData(::core::mem::transmute_copy(&pbbd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PutBaseBrowserData<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> *mut BASEBROWSERDATALH {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PutBaseBrowserData() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InitializeTravelLog<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptl: ::windows::core::RawPtr, dw: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InitializeTravelLog(&*(&ptl as *const <ITravelLog as ::windows::core::Abi>::Abi as *const <ITravelLog as ::windows::core::DefaultType>::DefaultType), dw) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTopBrowser<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTopBrowser() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Offline<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, icmd: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Offline(icmd) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AllowViewResize<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, f: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AllowViewResize(&*(&f as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetActivateState<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, u: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetActivateState(u) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateSecureLockIcon<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, esecurelock: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateSecureLockIcon(esecurelock) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InitializeDownloadManager<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InitializeDownloadManager() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InitializeTransitionSite<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InitializeTransitionSite() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _Initialize<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pauto: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._Initialize(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&pauto as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _CancelPendingNavigationAsync<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._CancelPendingNavigationAsync() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _CancelPendingView<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._CancelPendingView() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _MaySaveChanges<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._MaySaveChanges() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _PauseOrResumeView<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fpaused: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._PauseOrResumeView(&*(&fpaused as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _DisableModeless<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._DisableModeless() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _NavigateToPidl2<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, grfhlnf: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._NavigateToPidl2(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), grfhlnf, dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _TryShell2Rename<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psv: ::windows::core::RawPtr, pidlnew: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._TryShell2Rename(&*(&psv as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType), &*(&pidlnew as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _SwitchActivationNow<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._SwitchActivationNow() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _ExecChildren<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkbar: *mut ::core::ffi::c_void, fbroadcast: super::super::Foundation::BOOL, pguidcmdgroup: *const ::windows::core::GUID, ncmdid: u32, ncmdexecopt: u32, pvarargin: *const super::super::System::Com::VARIANT, pvarargout: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._ExecChildren(
                &*(&punkbar as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                &*(&fbroadcast as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType),
                &*(&pguidcmdgroup as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                ncmdid,
                ncmdexecopt,
                &*(&pvarargin as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&pvarargout as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _SendChildren<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndbar: super::super::Foundation::HWND, fbroadcast: super::super::Foundation::BOOL, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._SendChildren(
                &*(&hwndbar as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&fbroadcast as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType),
                umsg,
                &*(&wparam as *const <super::super::Foundation::WPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::WPARAM as ::windows::core::DefaultType>::DefaultType),
                &*(&lparam as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolderSetData<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfsd: *mut FOLDERSETDATA) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolderSetData(&*(&pfsd as *const <FOLDERSETDATA as ::windows::core::Abi>::Abi as *const <FOLDERSETDATA as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _OnFocusChange<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, itb: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._OnFocusChange(itb) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn v_ShowHideChildWindows<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fchildonly: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).v_ShowHideChildWindows(&*(&fchildonly as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _get_itbLastFocus<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> u32 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._get_itbLastFocus() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _put_itbLastFocus<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, itblastfocus: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._put_itbLastFocus(itblastfocus) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _UIActivateView<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ustate: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._UIActivateView(ustate) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _GetViewBorderRect<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prc: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._GetViewBorderRect(&*(&prc as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _UpdateViewRectSize<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._UpdateViewRectSize() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _ResizeNextBorder<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, itb: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._ResizeNextBorder(itb) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _ResizeView<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._ResizeView() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _GetEffectiveClientArea<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lprectborder: *mut super::super::Foundation::RECT, hmon: super::super::Graphics::Gdi::HMONITOR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._GetEffectiveClientArea(::core::mem::transmute_copy(&lprectborder), &*(&hmon as *const <super::super::Graphics::Gdi::HMONITOR as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::HMONITOR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn v_GetViewStream<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *mut Common::ITEMIDLIST, grfmode: u32, pwszname: super::super::Foundation::PWSTR) -> ::core::option::Option<super::super::System::Com::IStream> {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).v_GetViewStream(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), grfmode, &*(&pwszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ForwardViewMsg<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> super::super::Foundation::LRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ForwardViewMsg(umsg, &*(&wparam as *const <super::super::Foundation::WPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::WPARAM as ::windows::core::DefaultType>::DefaultType), &*(&lparam as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAcceleratorMenu<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hacc: super::WindowsAndMessaging::HACCEL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAcceleratorMenu(&*(&hacc as *const <super::WindowsAndMessaging::HACCEL as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::HACCEL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _GetToolbarCount<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> i32 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._GetToolbarCount() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _GetToolbarItem<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, itb: i32) -> *mut TOOLBARITEM {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._GetToolbarItem(itb) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _SaveToolbars<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstm: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._SaveToolbars(&*(&pstm as *const <super::super::System::Com::IStream as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IStream as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _LoadToolbars<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstm: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._LoadToolbars(&*(&pstm as *const <super::super::System::Com::IStream as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IStream as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _CloseAndReleaseToolbars<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fclose: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._CloseAndReleaseToolbars(&*(&fclose as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn v_MayGetNextToolbarFocus<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpmsg: *const super::WindowsAndMessaging::MSG, itbnext: u32, citb: i32, pptbi: *mut *mut TOOLBARITEM, phwnd: *mut super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).v_MayGetNextToolbarFocus(&*(&lpmsg as *const <super::WindowsAndMessaging::MSG as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::MSG as ::windows::core::DefaultType>::DefaultType), itbnext, citb, ::core::mem::transmute_copy(&pptbi), ::core::mem::transmute_copy(&phwnd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _ResizeNextBorderHelper<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, itb: u32, busehmonitor: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._ResizeNextBorderHelper(itb, &*(&busehmonitor as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _FindTBar<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punksrc: *mut ::core::ffi::c_void) -> u32 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._FindTBar(&*(&punksrc as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _SetFocus<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptbi: *const TOOLBARITEM, hwnd: super::super::Foundation::HWND, lpmsg: *const super::WindowsAndMessaging::MSG) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._SetFocus(&*(&ptbi as *const <TOOLBARITEM as ::windows::core::Abi>::Abi as *const <TOOLBARITEM as ::windows::core::DefaultType>::DefaultType), &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&lpmsg as *const <super::WindowsAndMessaging::MSG as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::MSG as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn v_MayTranslateAccelerator<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmsg: *mut super::WindowsAndMessaging::MSG) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).v_MayTranslateAccelerator(&*(&pmsg as *const <super::WindowsAndMessaging::MSG as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::MSG as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _GetBorderDWHelper<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punksrc: *mut ::core::ffi::c_void, lprectborder: *mut super::super::Foundation::RECT, busehmonitor: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._GetBorderDWHelper(&*(&punksrc as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&lprectborder), &*(&busehmonitor as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn v_CheckZoneCrossing<Impl: IBrowserService2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).v_CheckZoneCrossing(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IBrowserService2>,
            ::windows::core::GetTrustLevel,
            WndProcBS::<Impl, OFFSET>,
            SetAsDefFolderSettings::<Impl, OFFSET>,
            GetViewRect::<Impl, OFFSET>,
            OnSize::<Impl, OFFSET>,
            OnCreate::<Impl, OFFSET>,
            OnCommand::<Impl, OFFSET>,
            OnDestroy::<Impl, OFFSET>,
            OnNotify::<Impl, OFFSET>,
            OnSetFocus::<Impl, OFFSET>,
            OnFrameWindowActivateBS::<Impl, OFFSET>,
            ReleaseShellView::<Impl, OFFSET>,
            ActivatePendingView::<Impl, OFFSET>,
            CreateViewWindow::<Impl, OFFSET>,
            CreateBrowserPropSheetExt::<Impl, OFFSET>,
            GetViewWindow::<Impl, OFFSET>,
            GetBaseBrowserData::<Impl, OFFSET>,
            PutBaseBrowserData::<Impl, OFFSET>,
            InitializeTravelLog::<Impl, OFFSET>,
            SetTopBrowser::<Impl, OFFSET>,
            Offline::<Impl, OFFSET>,
            AllowViewResize::<Impl, OFFSET>,
            SetActivateState::<Impl, OFFSET>,
            UpdateSecureLockIcon::<Impl, OFFSET>,
            InitializeDownloadManager::<Impl, OFFSET>,
            InitializeTransitionSite::<Impl, OFFSET>,
            _Initialize::<Impl, OFFSET>,
            _CancelPendingNavigationAsync::<Impl, OFFSET>,
            _CancelPendingView::<Impl, OFFSET>,
            _MaySaveChanges::<Impl, OFFSET>,
            _PauseOrResumeView::<Impl, OFFSET>,
            _DisableModeless::<Impl, OFFSET>,
            _NavigateToPidl2::<Impl, OFFSET>,
            _TryShell2Rename::<Impl, OFFSET>,
            _SwitchActivationNow::<Impl, OFFSET>,
            _ExecChildren::<Impl, OFFSET>,
            _SendChildren::<Impl, OFFSET>,
            GetFolderSetData::<Impl, OFFSET>,
            _OnFocusChange::<Impl, OFFSET>,
            v_ShowHideChildWindows::<Impl, OFFSET>,
            _get_itbLastFocus::<Impl, OFFSET>,
            _put_itbLastFocus::<Impl, OFFSET>,
            _UIActivateView::<Impl, OFFSET>,
            _GetViewBorderRect::<Impl, OFFSET>,
            _UpdateViewRectSize::<Impl, OFFSET>,
            _ResizeNextBorder::<Impl, OFFSET>,
            _ResizeView::<Impl, OFFSET>,
            _GetEffectiveClientArea::<Impl, OFFSET>,
            v_GetViewStream::<Impl, OFFSET>,
            ForwardViewMsg::<Impl, OFFSET>,
            SetAcceleratorMenu::<Impl, OFFSET>,
            _GetToolbarCount::<Impl, OFFSET>,
            _GetToolbarItem::<Impl, OFFSET>,
            _SaveToolbars::<Impl, OFFSET>,
            _LoadToolbars::<Impl, OFFSET>,
            _CloseAndReleaseToolbars::<Impl, OFFSET>,
            v_MayGetNextToolbarFocus::<Impl, OFFSET>,
            _ResizeNextBorderHelper::<Impl, OFFSET>,
            _FindTBar::<Impl, OFFSET>,
            _SetFocus::<Impl, OFFSET>,
            v_MayTranslateAccelerator::<Impl, OFFSET>,
            _GetBorderDWHelper::<Impl, OFFSET>,
            v_CheckZoneCrossing::<Impl, OFFSET>,
        )
    }
}
pub trait IBrowserService3Impl: Sized + IBrowserService2Impl + IBrowserServiceImpl {
    fn _PositionViewWindow();
    fn IEParseDisplayNameEx();
}
impl ::windows::core::RuntimeName for IBrowserService3 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IBrowserService3";
}
impl IBrowserService3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBrowserService3Impl, const OFFSET: isize>() -> IBrowserService3Vtbl {
        unsafe extern "system" fn _PositionViewWindow<Impl: IBrowserService3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._PositionViewWindow(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&prc as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IEParseDisplayNameEx<Impl: IBrowserService3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uicp: u32, pwszpath: super::super::Foundation::PWSTR, dwflags: u32, ppidlout: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IEParseDisplayNameEx(uicp, &*(&pwszpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwflags, ::core::mem::transmute_copy(&ppidlout)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IBrowserService3>, ::windows::core::GetTrustLevel, _PositionViewWindow::<Impl, OFFSET>, IEParseDisplayNameEx::<Impl, OFFSET>)
    }
}
pub trait IBrowserService4Impl: Sized + IBrowserService3Impl + IBrowserService2Impl + IBrowserServiceImpl {
    fn ActivateView();
    fn SaveViewState();
    fn _ResizeAllBorders();
}
impl ::windows::core::RuntimeName for IBrowserService4 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IBrowserService4";
}
impl IBrowserService4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBrowserService4Impl, const OFFSET: isize>() -> IBrowserService4Vtbl {
        unsafe extern "system" fn ActivateView<Impl: IBrowserService4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fpendingview: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ActivateView(&*(&fpendingview as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SaveViewState<Impl: IBrowserService4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SaveViewState() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _ResizeAllBorders<Impl: IBrowserService4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._ResizeAllBorders() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IBrowserService4>, ::windows::core::GetTrustLevel, ActivateView::<Impl, OFFSET>, SaveViewState::<Impl, OFFSET>, _ResizeAllBorders::<Impl, OFFSET>)
    }
}
pub trait ICDBurnImpl: Sized {
    fn GetRecorderDriveLetter();
    fn Burn();
    fn HasRecordableDrive();
}
impl ::windows::core::RuntimeName for ICDBurn {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICDBurn";
}
impl ICDBurnVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICDBurnImpl, const OFFSET: isize>() -> ICDBurnVtbl {
        unsafe extern "system" fn GetRecorderDriveLetter<Impl: ICDBurnImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdrive: super::super::Foundation::PWSTR, cch: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRecorderDriveLetter(::core::mem::transmute_copy(&pszdrive), cch) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Burn<Impl: ICDBurnImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Burn(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HasRecordableDrive<Impl: ICDBurnImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfhasrecorder: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HasRecordableDrive(::core::mem::transmute_copy(&pfhasrecorder)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICDBurn>, ::windows::core::GetTrustLevel, GetRecorderDriveLetter::<Impl, OFFSET>, Burn::<Impl, OFFSET>, HasRecordableDrive::<Impl, OFFSET>)
    }
}
pub trait ICDBurnExtImpl: Sized {
    fn GetSupportedActionTypes();
}
impl ::windows::core::RuntimeName for ICDBurnExt {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICDBurnExt";
}
impl ICDBurnExtVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICDBurnExtImpl, const OFFSET: isize>() -> ICDBurnExtVtbl {
        unsafe extern "system" fn GetSupportedActionTypes<Impl: ICDBurnExtImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwactions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSupportedActionTypes(::core::mem::transmute_copy(&pdwactions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICDBurnExt>, ::windows::core::GetTrustLevel, GetSupportedActionTypes::<Impl, OFFSET>)
    }
}
pub trait ICategorizerImpl: Sized {
    fn GetDescription();
    fn GetCategory();
    fn GetCategoryInfo();
    fn CompareCategory();
}
impl ::windows::core::RuntimeName for ICategorizer {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICategorizer";
}
impl ICategorizerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICategorizerImpl, const OFFSET: isize>() -> ICategorizerVtbl {
        unsafe extern "system" fn GetDescription<Impl: ICategorizerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdesc: super::super::Foundation::PWSTR, cch: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDescription(::core::mem::transmute_copy(&pszdesc), cch) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCategory<Impl: ICategorizerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cidl: u32, apidl: *const *const Common::ITEMIDLIST, rgcategoryids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCategory(cidl, &*(&apidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&rgcategoryids)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCategoryInfo<Impl: ICategorizerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcategoryid: u32, pci: *mut CATEGORY_INFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCategoryInfo(dwcategoryid, ::core::mem::transmute_copy(&pci)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CompareCategory<Impl: ICategorizerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, csfflags: CATSORT_FLAGS, dwcategoryid1: u32, dwcategoryid2: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CompareCategory(csfflags, dwcategoryid1, dwcategoryid2) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICategorizer>, ::windows::core::GetTrustLevel, GetDescription::<Impl, OFFSET>, GetCategory::<Impl, OFFSET>, GetCategoryInfo::<Impl, OFFSET>, CompareCategory::<Impl, OFFSET>)
    }
}
pub trait ICategoryProviderImpl: Sized {
    fn CanCategorizeOnSCID();
    fn GetDefaultCategory();
    fn GetCategoryForSCID();
    fn EnumCategories();
    fn GetCategoryName();
    fn CreateCategory();
}
impl ::windows::core::RuntimeName for ICategoryProvider {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICategoryProvider";
}
impl ICategoryProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICategoryProviderImpl, const OFFSET: isize>() -> ICategoryProviderVtbl {
        unsafe extern "system" fn CanCategorizeOnSCID<Impl: ICategoryProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pscid: *const PropertiesSystem::PROPERTYKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CanCategorizeOnSCID(&*(&pscid as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDefaultCategory<Impl: ICategoryProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *mut ::windows::core::GUID, pscid: *mut PropertiesSystem::PROPERTYKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDefaultCategory(::core::mem::transmute_copy(&pguid), ::core::mem::transmute_copy(&pscid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCategoryForSCID<Impl: ICategoryProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pscid: *const PropertiesSystem::PROPERTYKEY, pguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCategoryForSCID(&*(&pscid as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pguid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumCategories<Impl: ICategoryProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, penum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumCategories(::core::mem::transmute_copy(&penum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCategoryName<Impl: ICategoryProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *const ::windows::core::GUID, pszname: super::super::Foundation::PWSTR, cch: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCategoryName(&*(&pguid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pszname), cch) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateCategory<Impl: ICategoryProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *const ::windows::core::GUID, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateCategory(&*(&pguid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICategoryProvider>, ::windows::core::GetTrustLevel, CanCategorizeOnSCID::<Impl, OFFSET>, GetDefaultCategory::<Impl, OFFSET>, GetCategoryForSCID::<Impl, OFFSET>, EnumCategories::<Impl, OFFSET>, GetCategoryName::<Impl, OFFSET>, CreateCategory::<Impl, OFFSET>)
    }
}
pub trait IColumnManagerImpl: Sized {
    fn SetColumnInfo();
    fn GetColumnInfo();
    fn GetColumnCount();
    fn GetColumns();
    fn SetColumns();
}
impl ::windows::core::RuntimeName for IColumnManager {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IColumnManager";
}
impl IColumnManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IColumnManagerImpl, const OFFSET: isize>() -> IColumnManagerVtbl {
        unsafe extern "system" fn SetColumnInfo<Impl: IColumnManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, propkey: *const PropertiesSystem::PROPERTYKEY, pcmci: *const CM_COLUMNINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetColumnInfo(&*(&propkey as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), &*(&pcmci as *const <CM_COLUMNINFO as ::windows::core::Abi>::Abi as *const <CM_COLUMNINFO as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetColumnInfo<Impl: IColumnManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, propkey: *const PropertiesSystem::PROPERTYKEY, pcmci: *mut CM_COLUMNINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetColumnInfo(&*(&propkey as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), &*(&pcmci as *const <CM_COLUMNINFO as ::windows::core::Abi>::Abi as *const <CM_COLUMNINFO as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetColumnCount<Impl: IColumnManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: CM_ENUM_FLAGS, pucount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetColumnCount(dwflags, ::core::mem::transmute_copy(&pucount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetColumns<Impl: IColumnManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: CM_ENUM_FLAGS, rgkeyorder: *mut PropertiesSystem::PROPERTYKEY, ccolumns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetColumns(dwflags, ::core::mem::transmute_copy(&rgkeyorder), ccolumns) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetColumns<Impl: IColumnManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rgkeyorder: *const PropertiesSystem::PROPERTYKEY, cvisible: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetColumns(&*(&rgkeyorder as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), cvisible) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IColumnManager>, ::windows::core::GetTrustLevel, SetColumnInfo::<Impl, OFFSET>, GetColumnInfo::<Impl, OFFSET>, GetColumnCount::<Impl, OFFSET>, GetColumns::<Impl, OFFSET>, SetColumns::<Impl, OFFSET>)
    }
}
pub trait IColumnProviderImpl: Sized {
    fn Initialize();
    fn GetColumnInfo();
    fn GetItemData();
}
impl ::windows::core::RuntimeName for IColumnProvider {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IColumnProvider";
}
impl IColumnProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IColumnProviderImpl, const OFFSET: isize>() -> IColumnProviderVtbl {
        unsafe extern "system" fn Initialize<Impl: IColumnProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psci: *const SHCOLUMNINIT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(&*(&psci as *const <SHCOLUMNINIT as ::windows::core::Abi>::Abi as *const <SHCOLUMNINIT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetColumnInfo<Impl: IColumnProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, psci: *mut SHCOLUMNINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetColumnInfo(dwindex, ::core::mem::transmute_copy(&psci)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemData<Impl: IColumnProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pscid: *const PropertiesSystem::PROPERTYKEY, pscd: *const SHCOLUMNDATA, pvardata: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemData(&*(&pscid as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), &*(&pscd as *const <SHCOLUMNDATA as ::windows::core::Abi>::Abi as *const <SHCOLUMNDATA as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pvardata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IColumnProvider>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>, GetColumnInfo::<Impl, OFFSET>, GetItemData::<Impl, OFFSET>)
    }
}
pub trait ICommDlgBrowserImpl: Sized {
    fn OnDefaultCommand();
    fn OnStateChange();
    fn IncludeObject();
}
impl ::windows::core::RuntimeName for ICommDlgBrowser {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICommDlgBrowser";
}
impl ICommDlgBrowserVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICommDlgBrowserImpl, const OFFSET: isize>() -> ICommDlgBrowserVtbl {
        unsafe extern "system" fn OnDefaultCommand<Impl: ICommDlgBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppshv: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnDefaultCommand(&*(&ppshv as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnStateChange<Impl: ICommDlgBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppshv: ::windows::core::RawPtr, uchange: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnStateChange(&*(&ppshv as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType), uchange) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IncludeObject<Impl: ICommDlgBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppshv: ::windows::core::RawPtr, pidl: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IncludeObject(&*(&ppshv as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType), &*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICommDlgBrowser>, ::windows::core::GetTrustLevel, OnDefaultCommand::<Impl, OFFSET>, OnStateChange::<Impl, OFFSET>, IncludeObject::<Impl, OFFSET>)
    }
}
pub trait ICommDlgBrowser2Impl: Sized + ICommDlgBrowserImpl {
    fn Notify();
    fn GetDefaultMenuText();
    fn GetViewFlags();
}
impl ::windows::core::RuntimeName for ICommDlgBrowser2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICommDlgBrowser2";
}
impl ICommDlgBrowser2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICommDlgBrowser2Impl, const OFFSET: isize>() -> ICommDlgBrowser2Vtbl {
        unsafe extern "system" fn Notify<Impl: ICommDlgBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppshv: ::windows::core::RawPtr, dwnotifytype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Notify(&*(&ppshv as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType), dwnotifytype) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDefaultMenuText<Impl: ICommDlgBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppshv: ::windows::core::RawPtr, psztext: super::super::Foundation::PWSTR, cchmax: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDefaultMenuText(&*(&ppshv as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&psztext), cchmax) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetViewFlags<Impl: ICommDlgBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetViewFlags(::core::mem::transmute_copy(&pdwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICommDlgBrowser2>, ::windows::core::GetTrustLevel, Notify::<Impl, OFFSET>, GetDefaultMenuText::<Impl, OFFSET>, GetViewFlags::<Impl, OFFSET>)
    }
}
pub trait ICommDlgBrowser3Impl: Sized + ICommDlgBrowser2Impl + ICommDlgBrowserImpl {
    fn OnColumnClicked();
    fn GetCurrentFilter();
    fn OnPreViewCreated();
}
impl ::windows::core::RuntimeName for ICommDlgBrowser3 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICommDlgBrowser3";
}
impl ICommDlgBrowser3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICommDlgBrowser3Impl, const OFFSET: isize>() -> ICommDlgBrowser3Vtbl {
        unsafe extern "system" fn OnColumnClicked<Impl: ICommDlgBrowser3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppshv: ::windows::core::RawPtr, icolumn: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnColumnClicked(&*(&ppshv as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType), icolumn) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentFilter<Impl: ICommDlgBrowser3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfilespec: super::super::Foundation::PWSTR, cchfilespec: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentFilter(::core::mem::transmute_copy(&pszfilespec), cchfilespec) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnPreViewCreated<Impl: ICommDlgBrowser3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppshv: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnPreViewCreated(&*(&ppshv as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICommDlgBrowser3>, ::windows::core::GetTrustLevel, OnColumnClicked::<Impl, OFFSET>, GetCurrentFilter::<Impl, OFFSET>, OnPreViewCreated::<Impl, OFFSET>)
    }
}
pub trait IComputerInfoChangeNotifyImpl: Sized {
    fn ComputerInfoChanged();
}
impl ::windows::core::RuntimeName for IComputerInfoChangeNotify {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IComputerInfoChangeNotify";
}
impl IComputerInfoChangeNotifyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IComputerInfoChangeNotifyImpl, const OFFSET: isize>() -> IComputerInfoChangeNotifyVtbl {
        unsafe extern "system" fn ComputerInfoChanged<Impl: IComputerInfoChangeNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ComputerInfoChanged() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IComputerInfoChangeNotify>, ::windows::core::GetTrustLevel, ComputerInfoChanged::<Impl, OFFSET>)
    }
}
pub trait IConnectableCredentialProviderCredentialImpl: Sized + ICredentialProviderCredentialImpl {
    fn Connect();
    fn Disconnect();
}
impl ::windows::core::RuntimeName for IConnectableCredentialProviderCredential {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IConnectableCredentialProviderCredential";
}
impl IConnectableCredentialProviderCredentialVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IConnectableCredentialProviderCredentialImpl, const OFFSET: isize>() -> IConnectableCredentialProviderCredentialVtbl {
        unsafe extern "system" fn Connect<Impl: IConnectableCredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pqcws: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Connect(&*(&pqcws as *const <IQueryContinueWithStatus as ::windows::core::Abi>::Abi as *const <IQueryContinueWithStatus as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disconnect<Impl: IConnectableCredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Disconnect() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IConnectableCredentialProviderCredential>, ::windows::core::GetTrustLevel, Connect::<Impl, OFFSET>, Disconnect::<Impl, OFFSET>)
    }
}
pub trait IContactManagerInteropImpl: Sized {
    fn ShowContactCardForWindow();
}
impl ::windows::core::RuntimeName for IContactManagerInterop {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IContactManagerInterop";
}
impl IContactManagerInteropVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IContactManagerInteropImpl, const OFFSET: isize>() -> IContactManagerInteropVtbl {
        unsafe extern "system" fn ShowContactCardForWindow<Impl: IContactManagerInteropImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, appwindow: super::super::Foundation::HWND, contact: *mut ::core::ffi::c_void, selection: *const super::super::Foundation::RECT, preferredplacement: FLYOUT_PLACEMENT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowContactCardForWindow(
                &*(&appwindow as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&contact as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                &*(&selection as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType),
                preferredplacement,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IContactManagerInterop>, ::windows::core::GetTrustLevel, ShowContactCardForWindow::<Impl, OFFSET>)
    }
}
pub trait IContextMenuImpl: Sized {
    fn QueryContextMenu();
    fn InvokeCommand();
    fn GetCommandString();
}
impl ::windows::core::RuntimeName for IContextMenu {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IContextMenu";
}
impl IContextMenuVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IContextMenuImpl, const OFFSET: isize>() -> IContextMenuVtbl {
        unsafe extern "system" fn QueryContextMenu<Impl: IContextMenuImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hmenu: super::WindowsAndMessaging::HMENU, indexmenu: u32, idcmdfirst: u32, idcmdlast: u32, uflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryContextMenu(&*(&hmenu as *const <super::WindowsAndMessaging::HMENU as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::HMENU as ::windows::core::DefaultType>::DefaultType), indexmenu, idcmdfirst, idcmdlast, uflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InvokeCommand<Impl: IContextMenuImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pici: *const CMINVOKECOMMANDINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InvokeCommand(&*(&pici as *const <CMINVOKECOMMANDINFO as ::windows::core::Abi>::Abi as *const <CMINVOKECOMMANDINFO as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCommandString<Impl: IContextMenuImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idcmd: usize, utype: u32, preserved: *mut u32, pszname: super::super::Foundation::PSTR, cchmax: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCommandString(idcmd, utype, preserved, ::core::mem::transmute_copy(&pszname), cchmax) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IContextMenu>, ::windows::core::GetTrustLevel, QueryContextMenu::<Impl, OFFSET>, InvokeCommand::<Impl, OFFSET>, GetCommandString::<Impl, OFFSET>)
    }
}
pub trait IContextMenu2Impl: Sized + IContextMenuImpl {
    fn HandleMenuMsg();
}
impl ::windows::core::RuntimeName for IContextMenu2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IContextMenu2";
}
impl IContextMenu2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IContextMenu2Impl, const OFFSET: isize>() -> IContextMenu2Vtbl {
        unsafe extern "system" fn HandleMenuMsg<Impl: IContextMenu2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HandleMenuMsg(umsg, &*(&wparam as *const <super::super::Foundation::WPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::WPARAM as ::windows::core::DefaultType>::DefaultType), &*(&lparam as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IContextMenu2>, ::windows::core::GetTrustLevel, HandleMenuMsg::<Impl, OFFSET>)
    }
}
pub trait IContextMenu3Impl: Sized + IContextMenu2Impl + IContextMenuImpl {
    fn HandleMenuMsg2();
}
impl ::windows::core::RuntimeName for IContextMenu3 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IContextMenu3";
}
impl IContextMenu3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IContextMenu3Impl, const OFFSET: isize>() -> IContextMenu3Vtbl {
        unsafe extern "system" fn HandleMenuMsg2<Impl: IContextMenu3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM, plresult: *mut super::super::Foundation::LRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HandleMenuMsg2(umsg, &*(&wparam as *const <super::super::Foundation::WPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::WPARAM as ::windows::core::DefaultType>::DefaultType), &*(&lparam as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&plresult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IContextMenu3>, ::windows::core::GetTrustLevel, HandleMenuMsg2::<Impl, OFFSET>)
    }
}
pub trait IContextMenuCBImpl: Sized {
    fn CallBack();
}
impl ::windows::core::RuntimeName for IContextMenuCB {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IContextMenuCB";
}
impl IContextMenuCBVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IContextMenuCBImpl, const OFFSET: isize>() -> IContextMenuCBVtbl {
        unsafe extern "system" fn CallBack<Impl: IContextMenuCBImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psf: ::windows::core::RawPtr, hwndowner: super::super::Foundation::HWND, pdtobj: ::windows::core::RawPtr, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CallBack(
                &*(&psf as *const <IShellFolder as ::windows::core::Abi>::Abi as *const <IShellFolder as ::windows::core::DefaultType>::DefaultType),
                &*(&hwndowner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&pdtobj as *const <super::super::System::Com::IDataObject as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDataObject as ::windows::core::DefaultType>::DefaultType),
                umsg,
                &*(&wparam as *const <super::super::Foundation::WPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::WPARAM as ::windows::core::DefaultType>::DefaultType),
                &*(&lparam as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IContextMenuCB>, ::windows::core::GetTrustLevel, CallBack::<Impl, OFFSET>)
    }
}
pub trait IContextMenuSiteImpl: Sized {
    fn DoContextMenuPopup();
}
impl ::windows::core::RuntimeName for IContextMenuSite {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IContextMenuSite";
}
impl IContextMenuSiteVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IContextMenuSiteImpl, const OFFSET: isize>() -> IContextMenuSiteVtbl {
        unsafe extern "system" fn DoContextMenuPopup<Impl: IContextMenuSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkcontextmenu: *mut ::core::ffi::c_void, fflags: u32, pt: super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DoContextMenuPopup(&*(&punkcontextmenu as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), fflags, &*(&pt as *const <super::super::Foundation::POINT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IContextMenuSite>, ::windows::core::GetTrustLevel, DoContextMenuPopup::<Impl, OFFSET>)
    }
}
pub trait ICopyHookAImpl: Sized {
    fn CopyCallback();
}
impl ::windows::core::RuntimeName for ICopyHookA {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICopyHookA";
}
impl ICopyHookAVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICopyHookAImpl, const OFFSET: isize>() -> ICopyHookAVtbl {
        unsafe extern "system" fn CopyCallback<Impl: ICopyHookAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, wfunc: u32, wflags: u32, pszsrcfile: super::super::Foundation::PSTR, dwsrcattribs: u32, pszdestfile: super::super::Foundation::PSTR, dwdestattribs: u32) -> u32 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CopyCallback(
                &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                wfunc,
                wflags,
                &*(&pszsrcfile as *const <super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                dwsrcattribs,
                &*(&pszdestfile as *const <super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                dwdestattribs,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICopyHookA>, ::windows::core::GetTrustLevel, CopyCallback::<Impl, OFFSET>)
    }
}
pub trait ICopyHookWImpl: Sized {
    fn CopyCallback();
}
impl ::windows::core::RuntimeName for ICopyHookW {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICopyHookW";
}
impl ICopyHookWVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICopyHookWImpl, const OFFSET: isize>() -> ICopyHookWVtbl {
        unsafe extern "system" fn CopyCallback<Impl: ICopyHookWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, wfunc: u32, wflags: u32, pszsrcfile: super::super::Foundation::PWSTR, dwsrcattribs: u32, pszdestfile: super::super::Foundation::PWSTR, dwdestattribs: u32) -> u32 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CopyCallback(
                &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                wfunc,
                wflags,
                &*(&pszsrcfile as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwsrcattribs,
                &*(&pszdestfile as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwdestattribs,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICopyHookW>, ::windows::core::GetTrustLevel, CopyCallback::<Impl, OFFSET>)
    }
}
pub trait ICreateProcessInputsImpl: Sized {
    fn GetCreateFlags();
    fn SetCreateFlags();
    fn AddCreateFlags();
    fn SetHotKey();
    fn AddStartupFlags();
    fn SetTitle();
    fn SetEnvironmentVariable();
}
impl ::windows::core::RuntimeName for ICreateProcessInputs {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICreateProcessInputs";
}
impl ICreateProcessInputsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICreateProcessInputsImpl, const OFFSET: isize>() -> ICreateProcessInputsVtbl {
        unsafe extern "system" fn GetCreateFlags<Impl: ICreateProcessInputsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcreationflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCreateFlags(::core::mem::transmute_copy(&pdwcreationflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCreateFlags<Impl: ICreateProcessInputsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcreationflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCreateFlags(dwcreationflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddCreateFlags<Impl: ICreateProcessInputsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcreationflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddCreateFlags(dwcreationflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetHotKey<Impl: ICreateProcessInputsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, whotkey: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetHotKey(whotkey) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddStartupFlags<Impl: ICreateProcessInputsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstartupinfoflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddStartupFlags(dwstartupinfoflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTitle<Impl: ICreateProcessInputsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztitle: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTitle(&*(&psztitle as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEnvironmentVariable<Impl: ICreateProcessInputsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::Foundation::PWSTR, pszvalue: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetEnvironmentVariable(&*(&pszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pszvalue as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ICreateProcessInputs>,
            ::windows::core::GetTrustLevel,
            GetCreateFlags::<Impl, OFFSET>,
            SetCreateFlags::<Impl, OFFSET>,
            AddCreateFlags::<Impl, OFFSET>,
            SetHotKey::<Impl, OFFSET>,
            AddStartupFlags::<Impl, OFFSET>,
            SetTitle::<Impl, OFFSET>,
            SetEnvironmentVariable::<Impl, OFFSET>,
        )
    }
}
pub trait ICreatingProcessImpl: Sized {
    fn OnCreating();
}
impl ::windows::core::RuntimeName for ICreatingProcess {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICreatingProcess";
}
impl ICreatingProcessVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICreatingProcessImpl, const OFFSET: isize>() -> ICreatingProcessVtbl {
        unsafe extern "system" fn OnCreating<Impl: ICreatingProcessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnCreating(&*(&pcpi as *const <ICreateProcessInputs as ::windows::core::Abi>::Abi as *const <ICreateProcessInputs as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICreatingProcess>, ::windows::core::GetTrustLevel, OnCreating::<Impl, OFFSET>)
    }
}
pub trait ICredentialProviderImpl: Sized {
    fn SetUsageScenario();
    fn SetSerialization();
    fn Advise();
    fn UnAdvise();
    fn GetFieldDescriptorCount();
    fn GetFieldDescriptorAt();
    fn GetCredentialCount();
    fn GetCredentialAt();
}
impl ::windows::core::RuntimeName for ICredentialProvider {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICredentialProvider";
}
impl ICredentialProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICredentialProviderImpl, const OFFSET: isize>() -> ICredentialProviderVtbl {
        unsafe extern "system" fn SetUsageScenario<Impl: ICredentialProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetUsageScenario(cpus, dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSerialization<Impl: ICredentialProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpcs: *const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetSerialization(&*(&pcpcs as *const <CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION as ::windows::core::Abi>::Abi as *const <CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Advise<Impl: ICredentialProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpe: ::windows::core::RawPtr, upadvisecontext: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Advise(&*(&pcpe as *const <ICredentialProviderEvents as ::windows::core::Abi>::Abi as *const <ICredentialProviderEvents as ::windows::core::DefaultType>::DefaultType), upadvisecontext) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnAdvise<Impl: ICredentialProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UnAdvise() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldDescriptorCount<Impl: ICredentialProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFieldDescriptorCount(::core::mem::transmute_copy(&pdwcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldDescriptorAt<Impl: ICredentialProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppcpfd: *mut *mut CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFieldDescriptorAt(dwindex, ::core::mem::transmute_copy(&ppcpfd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCredentialCount<Impl: ICredentialProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32, pdwdefault: *mut u32, pbautologonwithdefault: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCredentialCount(::core::mem::transmute_copy(&pdwcount), ::core::mem::transmute_copy(&pdwdefault), ::core::mem::transmute_copy(&pbautologonwithdefault)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCredentialAt<Impl: ICredentialProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppcpc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCredentialAt(dwindex, ::core::mem::transmute_copy(&ppcpc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ICredentialProvider>,
            ::windows::core::GetTrustLevel,
            SetUsageScenario::<Impl, OFFSET>,
            SetSerialization::<Impl, OFFSET>,
            Advise::<Impl, OFFSET>,
            UnAdvise::<Impl, OFFSET>,
            GetFieldDescriptorCount::<Impl, OFFSET>,
            GetFieldDescriptorAt::<Impl, OFFSET>,
            GetCredentialCount::<Impl, OFFSET>,
            GetCredentialAt::<Impl, OFFSET>,
        )
    }
}
pub trait ICredentialProviderCredentialImpl: Sized {
    fn Advise();
    fn UnAdvise();
    fn SetSelected();
    fn SetDeselected();
    fn GetFieldState();
    fn GetStringValue();
    fn GetBitmapValue();
    fn GetCheckboxValue();
    fn GetSubmitButtonValue();
    fn GetComboBoxValueCount();
    fn GetComboBoxValueAt();
    fn SetStringValue();
    fn SetCheckboxValue();
    fn SetComboBoxSelectedValue();
    fn CommandLinkClicked();
    fn GetSerialization();
    fn ReportResult();
}
impl ::windows::core::RuntimeName for ICredentialProviderCredential {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICredentialProviderCredential";
}
impl ICredentialProviderCredentialVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>() -> ICredentialProviderCredentialVtbl {
        unsafe extern "system" fn Advise<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpce: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Advise(&*(&pcpce as *const <ICredentialProviderCredentialEvents as ::windows::core::Abi>::Abi as *const <ICredentialProviderCredentialEvents as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnAdvise<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UnAdvise() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSelected<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbautologon: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetSelected(::core::mem::transmute_copy(&pbautologon)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDeselected<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetDeselected() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldState<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, pcpfs: *mut CREDENTIAL_PROVIDER_FIELD_STATE, pcpfis: *mut CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFieldState(dwfieldid, ::core::mem::transmute_copy(&pcpfs), ::core::mem::transmute_copy(&pcpfis)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStringValue<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, ppsz: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetStringValue(dwfieldid, ::core::mem::transmute_copy(&ppsz)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBitmapValue<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, phbmp: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBitmapValue(dwfieldid, ::core::mem::transmute_copy(&phbmp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCheckboxValue<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, pbchecked: *mut super::super::Foundation::BOOL, ppszlabel: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCheckboxValue(dwfieldid, ::core::mem::transmute_copy(&pbchecked), ::core::mem::transmute_copy(&ppszlabel)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSubmitButtonValue<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, pdwadjacentto: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSubmitButtonValue(dwfieldid, ::core::mem::transmute_copy(&pdwadjacentto)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetComboBoxValueCount<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, pcitems: *mut u32, pdwselecteditem: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetComboBoxValueCount(dwfieldid, ::core::mem::transmute_copy(&pcitems), ::core::mem::transmute_copy(&pdwselecteditem)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetComboBoxValueAt<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, dwitem: u32, ppszitem: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetComboBoxValueAt(dwfieldid, dwitem, ::core::mem::transmute_copy(&ppszitem)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetStringValue<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, psz: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetStringValue(dwfieldid, &*(&psz as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCheckboxValue<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, bchecked: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCheckboxValue(dwfieldid, &*(&bchecked as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetComboBoxSelectedValue<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, dwselecteditem: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetComboBoxSelectedValue(dwfieldid, dwselecteditem) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CommandLinkClicked<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CommandLinkClicked(dwfieldid) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSerialization<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpgsr: *mut CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE, pcpcs: *mut CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, ppszoptionalstatustext: *mut super::super::Foundation::PWSTR, pcpsioptionalstatusicon: *mut CREDENTIAL_PROVIDER_STATUS_ICON) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSerialization(::core::mem::transmute_copy(&pcpgsr), ::core::mem::transmute_copy(&pcpcs), ::core::mem::transmute_copy(&ppszoptionalstatustext), ::core::mem::transmute_copy(&pcpsioptionalstatusicon)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReportResult<Impl: ICredentialProviderCredentialImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ntsstatus: super::super::Foundation::NTSTATUS, ntssubstatus: super::super::Foundation::NTSTATUS, ppszoptionalstatustext: *mut super::super::Foundation::PWSTR, pcpsioptionalstatusicon: *mut CREDENTIAL_PROVIDER_STATUS_ICON) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReportResult(&*(&ntsstatus as *const <super::super::Foundation::NTSTATUS as ::windows::core::Abi>::Abi as *const <super::super::Foundation::NTSTATUS as ::windows::core::DefaultType>::DefaultType), &*(&ntssubstatus as *const <super::super::Foundation::NTSTATUS as ::windows::core::Abi>::Abi as *const <super::super::Foundation::NTSTATUS as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppszoptionalstatustext), ::core::mem::transmute_copy(&pcpsioptionalstatusicon)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ICredentialProviderCredential>,
            ::windows::core::GetTrustLevel,
            Advise::<Impl, OFFSET>,
            UnAdvise::<Impl, OFFSET>,
            SetSelected::<Impl, OFFSET>,
            SetDeselected::<Impl, OFFSET>,
            GetFieldState::<Impl, OFFSET>,
            GetStringValue::<Impl, OFFSET>,
            GetBitmapValue::<Impl, OFFSET>,
            GetCheckboxValue::<Impl, OFFSET>,
            GetSubmitButtonValue::<Impl, OFFSET>,
            GetComboBoxValueCount::<Impl, OFFSET>,
            GetComboBoxValueAt::<Impl, OFFSET>,
            SetStringValue::<Impl, OFFSET>,
            SetCheckboxValue::<Impl, OFFSET>,
            SetComboBoxSelectedValue::<Impl, OFFSET>,
            CommandLinkClicked::<Impl, OFFSET>,
            GetSerialization::<Impl, OFFSET>,
            ReportResult::<Impl, OFFSET>,
        )
    }
}
pub trait ICredentialProviderCredential2Impl: Sized + ICredentialProviderCredentialImpl {
    fn GetUserSid();
}
impl ::windows::core::RuntimeName for ICredentialProviderCredential2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICredentialProviderCredential2";
}
impl ICredentialProviderCredential2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICredentialProviderCredential2Impl, const OFFSET: isize>() -> ICredentialProviderCredential2Vtbl {
        unsafe extern "system" fn GetUserSid<Impl: ICredentialProviderCredential2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sid: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetUserSid(::core::mem::transmute_copy(&sid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICredentialProviderCredential2>, ::windows::core::GetTrustLevel, GetUserSid::<Impl, OFFSET>)
    }
}
pub trait ICredentialProviderCredentialEventsImpl: Sized {
    fn SetFieldState();
    fn SetFieldInteractiveState();
    fn SetFieldString();
    fn SetFieldCheckbox();
    fn SetFieldBitmap();
    fn SetFieldComboBoxSelectedItem();
    fn DeleteFieldComboBoxItem();
    fn AppendFieldComboBoxItem();
    fn SetFieldSubmitButton();
    fn OnCreatingWindow();
}
impl ::windows::core::RuntimeName for ICredentialProviderCredentialEvents {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICredentialProviderCredentialEvents";
}
impl ICredentialProviderCredentialEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICredentialProviderCredentialEventsImpl, const OFFSET: isize>() -> ICredentialProviderCredentialEventsVtbl {
        unsafe extern "system" fn SetFieldState<Impl: ICredentialProviderCredentialEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpc: ::windows::core::RawPtr, dwfieldid: u32, cpfs: CREDENTIAL_PROVIDER_FIELD_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFieldState(&*(&pcpc as *const <ICredentialProviderCredential as ::windows::core::Abi>::Abi as *const <ICredentialProviderCredential as ::windows::core::DefaultType>::DefaultType), dwfieldid, cpfs) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFieldInteractiveState<Impl: ICredentialProviderCredentialEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpc: ::windows::core::RawPtr, dwfieldid: u32, cpfis: CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFieldInteractiveState(&*(&pcpc as *const <ICredentialProviderCredential as ::windows::core::Abi>::Abi as *const <ICredentialProviderCredential as ::windows::core::DefaultType>::DefaultType), dwfieldid, cpfis) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFieldString<Impl: ICredentialProviderCredentialEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpc: ::windows::core::RawPtr, dwfieldid: u32, psz: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFieldString(&*(&pcpc as *const <ICredentialProviderCredential as ::windows::core::Abi>::Abi as *const <ICredentialProviderCredential as ::windows::core::DefaultType>::DefaultType), dwfieldid, &*(&psz as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFieldCheckbox<Impl: ICredentialProviderCredentialEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpc: ::windows::core::RawPtr, dwfieldid: u32, bchecked: super::super::Foundation::BOOL, pszlabel: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFieldCheckbox(
                &*(&pcpc as *const <ICredentialProviderCredential as ::windows::core::Abi>::Abi as *const <ICredentialProviderCredential as ::windows::core::DefaultType>::DefaultType),
                dwfieldid,
                &*(&bchecked as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType),
                &*(&pszlabel as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFieldBitmap<Impl: ICredentialProviderCredentialEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpc: ::windows::core::RawPtr, dwfieldid: u32, hbmp: super::super::Graphics::Gdi::HBITMAP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFieldBitmap(&*(&pcpc as *const <ICredentialProviderCredential as ::windows::core::Abi>::Abi as *const <ICredentialProviderCredential as ::windows::core::DefaultType>::DefaultType), dwfieldid, &*(&hbmp as *const <super::super::Graphics::Gdi::HBITMAP as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::HBITMAP as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFieldComboBoxSelectedItem<Impl: ICredentialProviderCredentialEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpc: ::windows::core::RawPtr, dwfieldid: u32, dwselecteditem: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFieldComboBoxSelectedItem(&*(&pcpc as *const <ICredentialProviderCredential as ::windows::core::Abi>::Abi as *const <ICredentialProviderCredential as ::windows::core::DefaultType>::DefaultType), dwfieldid, dwselecteditem) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DeleteFieldComboBoxItem<Impl: ICredentialProviderCredentialEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpc: ::windows::core::RawPtr, dwfieldid: u32, dwitem: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DeleteFieldComboBoxItem(&*(&pcpc as *const <ICredentialProviderCredential as ::windows::core::Abi>::Abi as *const <ICredentialProviderCredential as ::windows::core::DefaultType>::DefaultType), dwfieldid, dwitem) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendFieldComboBoxItem<Impl: ICredentialProviderCredentialEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpc: ::windows::core::RawPtr, dwfieldid: u32, pszitem: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AppendFieldComboBoxItem(&*(&pcpc as *const <ICredentialProviderCredential as ::windows::core::Abi>::Abi as *const <ICredentialProviderCredential as ::windows::core::DefaultType>::DefaultType), dwfieldid, &*(&pszitem as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFieldSubmitButton<Impl: ICredentialProviderCredentialEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpc: ::windows::core::RawPtr, dwfieldid: u32, dwadjacentto: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFieldSubmitButton(&*(&pcpc as *const <ICredentialProviderCredential as ::windows::core::Abi>::Abi as *const <ICredentialProviderCredential as ::windows::core::DefaultType>::DefaultType), dwfieldid, dwadjacentto) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnCreatingWindow<Impl: ICredentialProviderCredentialEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phwndowner: *mut super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnCreatingWindow(::core::mem::transmute_copy(&phwndowner)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ICredentialProviderCredentialEvents>,
            ::windows::core::GetTrustLevel,
            SetFieldState::<Impl, OFFSET>,
            SetFieldInteractiveState::<Impl, OFFSET>,
            SetFieldString::<Impl, OFFSET>,
            SetFieldCheckbox::<Impl, OFFSET>,
            SetFieldBitmap::<Impl, OFFSET>,
            SetFieldComboBoxSelectedItem::<Impl, OFFSET>,
            DeleteFieldComboBoxItem::<Impl, OFFSET>,
            AppendFieldComboBoxItem::<Impl, OFFSET>,
            SetFieldSubmitButton::<Impl, OFFSET>,
            OnCreatingWindow::<Impl, OFFSET>,
        )
    }
}
pub trait ICredentialProviderCredentialEvents2Impl: Sized + ICredentialProviderCredentialEventsImpl {
    fn BeginFieldUpdates();
    fn EndFieldUpdates();
    fn SetFieldOptions();
}
impl ::windows::core::RuntimeName for ICredentialProviderCredentialEvents2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICredentialProviderCredentialEvents2";
}
impl ICredentialProviderCredentialEvents2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICredentialProviderCredentialEvents2Impl, const OFFSET: isize>() -> ICredentialProviderCredentialEvents2Vtbl {
        unsafe extern "system" fn BeginFieldUpdates<Impl: ICredentialProviderCredentialEvents2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BeginFieldUpdates() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndFieldUpdates<Impl: ICredentialProviderCredentialEvents2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EndFieldUpdates() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFieldOptions<Impl: ICredentialProviderCredentialEvents2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, credential: ::windows::core::RawPtr, fieldid: u32, options: CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFieldOptions(&*(&credential as *const <ICredentialProviderCredential as ::windows::core::Abi>::Abi as *const <ICredentialProviderCredential as ::windows::core::DefaultType>::DefaultType), fieldid, options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICredentialProviderCredentialEvents2>, ::windows::core::GetTrustLevel, BeginFieldUpdates::<Impl, OFFSET>, EndFieldUpdates::<Impl, OFFSET>, SetFieldOptions::<Impl, OFFSET>)
    }
}
pub trait ICredentialProviderCredentialWithFieldOptionsImpl: Sized {
    fn GetFieldOptions();
}
impl ::windows::core::RuntimeName for ICredentialProviderCredentialWithFieldOptions {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICredentialProviderCredentialWithFieldOptions";
}
impl ICredentialProviderCredentialWithFieldOptionsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICredentialProviderCredentialWithFieldOptionsImpl, const OFFSET: isize>() -> ICredentialProviderCredentialWithFieldOptionsVtbl {
        unsafe extern "system" fn GetFieldOptions<Impl: ICredentialProviderCredentialWithFieldOptionsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fieldid: u32, options: *mut CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFieldOptions(fieldid, ::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICredentialProviderCredentialWithFieldOptions>, ::windows::core::GetTrustLevel, GetFieldOptions::<Impl, OFFSET>)
    }
}
pub trait ICredentialProviderEventsImpl: Sized {
    fn CredentialsChanged();
}
impl ::windows::core::RuntimeName for ICredentialProviderEvents {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICredentialProviderEvents";
}
impl ICredentialProviderEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICredentialProviderEventsImpl, const OFFSET: isize>() -> ICredentialProviderEventsVtbl {
        unsafe extern "system" fn CredentialsChanged<Impl: ICredentialProviderEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, upadvisecontext: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CredentialsChanged(upadvisecontext) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICredentialProviderEvents>, ::windows::core::GetTrustLevel, CredentialsChanged::<Impl, OFFSET>)
    }
}
pub trait ICredentialProviderFilterImpl: Sized {
    fn Filter();
    fn UpdateRemoteCredential();
}
impl ::windows::core::RuntimeName for ICredentialProviderFilter {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICredentialProviderFilter";
}
impl ICredentialProviderFilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICredentialProviderFilterImpl, const OFFSET: isize>() -> ICredentialProviderFilterVtbl {
        unsafe extern "system" fn Filter<Impl: ICredentialProviderFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dwflags: u32, rgclsidproviders: *const ::windows::core::GUID, rgballow: *mut super::super::Foundation::BOOL, cproviders: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Filter(cpus, dwflags, &*(&rgclsidproviders as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&rgballow as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType), cproviders) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateRemoteCredential<Impl: ICredentialProviderFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpcsin: *const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, pcpcsout: *mut CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateRemoteCredential(&*(&pcpcsin as *const <CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION as ::windows::core::Abi>::Abi as *const <CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pcpcsout)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICredentialProviderFilter>, ::windows::core::GetTrustLevel, Filter::<Impl, OFFSET>, UpdateRemoteCredential::<Impl, OFFSET>)
    }
}
pub trait ICredentialProviderSetUserArrayImpl: Sized {
    fn SetUserArray();
}
impl ::windows::core::RuntimeName for ICredentialProviderSetUserArray {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICredentialProviderSetUserArray";
}
impl ICredentialProviderSetUserArrayVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICredentialProviderSetUserArrayImpl, const OFFSET: isize>() -> ICredentialProviderSetUserArrayVtbl {
        unsafe extern "system" fn SetUserArray<Impl: ICredentialProviderSetUserArrayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, users: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetUserArray(&*(&users as *const <ICredentialProviderUserArray as ::windows::core::Abi>::Abi as *const <ICredentialProviderUserArray as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICredentialProviderSetUserArray>, ::windows::core::GetTrustLevel, SetUserArray::<Impl, OFFSET>)
    }
}
pub trait ICredentialProviderUserImpl: Sized {
    fn GetSid();
    fn GetProviderID();
    fn GetStringValue();
    fn GetValue();
}
impl ::windows::core::RuntimeName for ICredentialProviderUser {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICredentialProviderUser";
}
impl ICredentialProviderUserVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICredentialProviderUserImpl, const OFFSET: isize>() -> ICredentialProviderUserVtbl {
        unsafe extern "system" fn GetSid<Impl: ICredentialProviderUserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sid: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSid(::core::mem::transmute_copy(&sid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProviderID<Impl: ICredentialProviderUserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, providerid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProviderID(::core::mem::transmute_copy(&providerid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStringValue<Impl: ICredentialProviderUserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, stringvalue: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetStringValue(&*(&key as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&stringvalue)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValue<Impl: ICredentialProviderUserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, value: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetValue(&*(&key as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICredentialProviderUser>, ::windows::core::GetTrustLevel, GetSid::<Impl, OFFSET>, GetProviderID::<Impl, OFFSET>, GetStringValue::<Impl, OFFSET>, GetValue::<Impl, OFFSET>)
    }
}
pub trait ICredentialProviderUserArrayImpl: Sized {
    fn SetProviderFilter();
    fn GetAccountOptions();
    fn GetCount();
    fn GetAt();
}
impl ::windows::core::RuntimeName for ICredentialProviderUserArray {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICredentialProviderUserArray";
}
impl ICredentialProviderUserArrayVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICredentialProviderUserArrayImpl, const OFFSET: isize>() -> ICredentialProviderUserArrayVtbl {
        unsafe extern "system" fn SetProviderFilter<Impl: ICredentialProviderUserArrayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guidprovidertofilterto: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetProviderFilter(&*(&guidprovidertofilterto as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAccountOptions<Impl: ICredentialProviderUserArrayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, credentialprovideraccountoptions: *mut CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAccountOptions(::core::mem::transmute_copy(&credentialprovideraccountoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCount<Impl: ICredentialProviderUserArrayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, usercount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCount(::core::mem::transmute_copy(&usercount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAt<Impl: ICredentialProviderUserArrayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, userindex: u32, user: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAt(userindex, ::core::mem::transmute_copy(&user)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICredentialProviderUserArray>, ::windows::core::GetTrustLevel, SetProviderFilter::<Impl, OFFSET>, GetAccountOptions::<Impl, OFFSET>, GetCount::<Impl, OFFSET>, GetAt::<Impl, OFFSET>)
    }
}
pub trait ICurrentItemImpl: Sized + IRelatedItemImpl {}
impl ::windows::core::RuntimeName for ICurrentItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICurrentItem";
}
impl ICurrentItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICurrentItemImpl, const OFFSET: isize>() -> ICurrentItemVtbl {
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICurrentItem>, ::windows::core::GetTrustLevel)
    }
}
pub trait ICurrentWorkingDirectoryImpl: Sized {
    fn GetDirectory();
    fn SetDirectory();
}
impl ::windows::core::RuntimeName for ICurrentWorkingDirectory {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICurrentWorkingDirectory";
}
impl ICurrentWorkingDirectoryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICurrentWorkingDirectoryImpl, const OFFSET: isize>() -> ICurrentWorkingDirectoryVtbl {
        unsafe extern "system" fn GetDirectory<Impl: ICurrentWorkingDirectoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwzpath: super::super::Foundation::PWSTR, cchsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDirectory(::core::mem::transmute_copy(&pwzpath), cchsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDirectory<Impl: ICurrentWorkingDirectoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwzpath: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetDirectory(&*(&pwzpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ICurrentWorkingDirectory>, ::windows::core::GetTrustLevel, GetDirectory::<Impl, OFFSET>, SetDirectory::<Impl, OFFSET>)
    }
}
pub trait ICustomDestinationListImpl: Sized {
    fn SetAppID();
    fn BeginList();
    fn AppendCategory();
    fn AppendKnownCategory();
    fn AddUserTasks();
    fn CommitList();
    fn GetRemovedDestinations();
    fn DeleteList();
    fn AbortList();
}
impl ::windows::core::RuntimeName for ICustomDestinationList {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ICustomDestinationList";
}
impl ICustomDestinationListVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICustomDestinationListImpl, const OFFSET: isize>() -> ICustomDestinationListVtbl {
        unsafe extern "system" fn SetAppID<Impl: ICustomDestinationListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszappid: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAppID(&*(&pszappid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginList<Impl: ICustomDestinationListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcminslots: *mut u32, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BeginList(::core::mem::transmute_copy(&pcminslots), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendCategory<Impl: ICustomDestinationListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcategory: super::super::Foundation::PWSTR, poa: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AppendCategory(&*(&pszcategory as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&poa as *const <Common::IObjectArray as ::windows::core::Abi>::Abi as *const <Common::IObjectArray as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendKnownCategory<Impl: ICustomDestinationListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, category: KNOWNDESTCATEGORY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AppendKnownCategory(category) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddUserTasks<Impl: ICustomDestinationListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, poa: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddUserTasks(&*(&poa as *const <Common::IObjectArray as ::windows::core::Abi>::Abi as *const <Common::IObjectArray as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CommitList<Impl: ICustomDestinationListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CommitList() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRemovedDestinations<Impl: ICustomDestinationListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRemovedDestinations(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DeleteList<Impl: ICustomDestinationListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszappid: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DeleteList(&*(&pszappid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AbortList<Impl: ICustomDestinationListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AbortList() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ICustomDestinationList>,
            ::windows::core::GetTrustLevel,
            SetAppID::<Impl, OFFSET>,
            BeginList::<Impl, OFFSET>,
            AppendCategory::<Impl, OFFSET>,
            AppendKnownCategory::<Impl, OFFSET>,
            AddUserTasks::<Impl, OFFSET>,
            CommitList::<Impl, OFFSET>,
            GetRemovedDestinations::<Impl, OFFSET>,
            DeleteList::<Impl, OFFSET>,
            AbortList::<Impl, OFFSET>,
        )
    }
}
pub trait IDataObjectAsyncCapabilityImpl: Sized {
    fn SetAsyncMode();
    fn GetAsyncMode();
    fn StartOperation();
    fn InOperation();
    fn EndOperation();
}
impl ::windows::core::RuntimeName for IDataObjectAsyncCapability {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDataObjectAsyncCapability";
}
impl IDataObjectAsyncCapabilityVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataObjectAsyncCapabilityImpl, const OFFSET: isize>() -> IDataObjectAsyncCapabilityVtbl {
        unsafe extern "system" fn SetAsyncMode<Impl: IDataObjectAsyncCapabilityImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fdoopasync: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAsyncMode(&*(&fdoopasync as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAsyncMode<Impl: IDataObjectAsyncCapabilityImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfisopasync: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAsyncMode(::core::mem::transmute_copy(&pfisopasync)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartOperation<Impl: IDataObjectAsyncCapabilityImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbcreserved: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartOperation(&*(&pbcreserved as *const <super::super::System::Com::IBindCtx as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindCtx as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InOperation<Impl: IDataObjectAsyncCapabilityImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfinasyncop: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InOperation(::core::mem::transmute_copy(&pfinasyncop)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndOperation<Impl: IDataObjectAsyncCapabilityImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hresult: ::windows::core::HRESULT, pbcreserved: ::windows::core::RawPtr, dweffects: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EndOperation(hresult, &*(&pbcreserved as *const <super::super::System::Com::IBindCtx as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindCtx as ::windows::core::DefaultType>::DefaultType), dweffects) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDataObjectAsyncCapability>, ::windows::core::GetTrustLevel, SetAsyncMode::<Impl, OFFSET>, GetAsyncMode::<Impl, OFFSET>, StartOperation::<Impl, OFFSET>, InOperation::<Impl, OFFSET>, EndOperation::<Impl, OFFSET>)
    }
}
pub trait IDataObjectProviderImpl: Sized {
    fn GetDataObject();
    fn SetDataObject();
}
impl ::windows::core::RuntimeName for IDataObjectProvider {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDataObjectProvider";
}
impl IDataObjectProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataObjectProviderImpl, const OFFSET: isize>() -> IDataObjectProviderVtbl {
        unsafe extern "system" fn GetDataObject<Impl: IDataObjectProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dataobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDataObject(::core::mem::transmute_copy(&dataobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDataObject<Impl: IDataObjectProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dataobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetDataObject(&*(&dataobject as *const <super::super::System::Com::IDataObject as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDataObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDataObjectProvider>, ::windows::core::GetTrustLevel, GetDataObject::<Impl, OFFSET>, SetDataObject::<Impl, OFFSET>)
    }
}
pub trait IDataTransferManagerInteropImpl: Sized {
    fn GetForWindow();
    fn ShowShareUIForWindow();
}
impl ::windows::core::RuntimeName for IDataTransferManagerInterop {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDataTransferManagerInterop";
}
impl IDataTransferManagerInteropVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataTransferManagerInteropImpl, const OFFSET: isize>() -> IDataTransferManagerInteropVtbl {
        unsafe extern "system" fn GetForWindow<Impl: IDataTransferManagerInteropImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, appwindow: super::super::Foundation::HWND, riid: *const ::windows::core::GUID, datatransfermanager: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetForWindow(&*(&appwindow as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&datatransfermanager)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShowShareUIForWindow<Impl: IDataTransferManagerInteropImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, appwindow: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowShareUIForWindow(&*(&appwindow as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDataTransferManagerInterop>, ::windows::core::GetTrustLevel, GetForWindow::<Impl, OFFSET>, ShowShareUIForWindow::<Impl, OFFSET>)
    }
}
pub trait IDefaultExtractIconInitImpl: Sized {
    fn SetFlags();
    fn SetKey();
    fn SetNormalIcon();
    fn SetOpenIcon();
    fn SetShortcutIcon();
    fn SetDefaultIcon();
}
impl ::windows::core::RuntimeName for IDefaultExtractIconInit {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDefaultExtractIconInit";
}
impl IDefaultExtractIconInitVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDefaultExtractIconInitImpl, const OFFSET: isize>() -> IDefaultExtractIconInitVtbl {
        unsafe extern "system" fn SetFlags<Impl: IDefaultExtractIconInitImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFlags(uflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKey<Impl: IDefaultExtractIconInitImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hkey: super::super::System::Registry::HKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetKey(&*(&hkey as *const <super::super::System::Registry::HKEY as ::windows::core::Abi>::Abi as *const <super::super::System::Registry::HKEY as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNormalIcon<Impl: IDefaultExtractIconInitImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfile: super::super::Foundation::PWSTR, iicon: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetNormalIcon(&*(&pszfile as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), iicon) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOpenIcon<Impl: IDefaultExtractIconInitImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfile: super::super::Foundation::PWSTR, iicon: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetOpenIcon(&*(&pszfile as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), iicon) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetShortcutIcon<Impl: IDefaultExtractIconInitImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfile: super::super::Foundation::PWSTR, iicon: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetShortcutIcon(&*(&pszfile as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), iicon) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDefaultIcon<Impl: IDefaultExtractIconInitImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfile: super::super::Foundation::PWSTR, iicon: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetDefaultIcon(&*(&pszfile as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), iicon) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDefaultExtractIconInit>, ::windows::core::GetTrustLevel, SetFlags::<Impl, OFFSET>, SetKey::<Impl, OFFSET>, SetNormalIcon::<Impl, OFFSET>, SetOpenIcon::<Impl, OFFSET>, SetShortcutIcon::<Impl, OFFSET>, SetDefaultIcon::<Impl, OFFSET>)
    }
}
pub trait IDefaultFolderMenuInitializeImpl: Sized {
    fn Initialize();
    fn SetMenuRestrictions();
    fn GetMenuRestrictions();
    fn SetHandlerClsid();
}
impl ::windows::core::RuntimeName for IDefaultFolderMenuInitialize {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDefaultFolderMenuInitialize";
}
impl IDefaultFolderMenuInitializeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDefaultFolderMenuInitializeImpl, const OFFSET: isize>() -> IDefaultFolderMenuInitializeVtbl {
        unsafe extern "system" fn Initialize<Impl: IDefaultFolderMenuInitializeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pcmcb: ::windows::core::RawPtr, pidlfolder: *const Common::ITEMIDLIST, psf: ::windows::core::RawPtr, cidl: u32, apidl: *const *const Common::ITEMIDLIST, punkassociation: *mut ::core::ffi::c_void, ckeys: u32, akeys: *const super::super::System::Registry::HKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(
                &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&pcmcb as *const <IContextMenuCB as ::windows::core::Abi>::Abi as *const <IContextMenuCB as ::windows::core::DefaultType>::DefaultType),
                &*(&pidlfolder as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType),
                &*(&psf as *const <IShellFolder as ::windows::core::Abi>::Abi as *const <IShellFolder as ::windows::core::DefaultType>::DefaultType),
                cidl,
                &*(&apidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType),
                &*(&punkassociation as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                ckeys,
                &*(&akeys as *const <super::super::System::Registry::HKEY as ::windows::core::Abi>::Abi as *const <super::super::System::Registry::HKEY as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetMenuRestrictions<Impl: IDefaultFolderMenuInitializeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dfmrvalues: DEFAULT_FOLDER_MENU_RESTRICTIONS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetMenuRestrictions(dfmrvalues) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMenuRestrictions<Impl: IDefaultFolderMenuInitializeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dfmrmask: DEFAULT_FOLDER_MENU_RESTRICTIONS, pdfmrvalues: *mut DEFAULT_FOLDER_MENU_RESTRICTIONS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMenuRestrictions(dfmrmask, ::core::mem::transmute_copy(&pdfmrvalues)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetHandlerClsid<Impl: IDefaultFolderMenuInitializeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rclsid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetHandlerClsid(&*(&rclsid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDefaultFolderMenuInitialize>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>, SetMenuRestrictions::<Impl, OFFSET>, GetMenuRestrictions::<Impl, OFFSET>, SetHandlerClsid::<Impl, OFFSET>)
    }
}
pub trait IDelegateFolderImpl: Sized {
    fn SetItemAlloc();
}
impl ::windows::core::RuntimeName for IDelegateFolder {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDelegateFolder";
}
impl IDelegateFolderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDelegateFolderImpl, const OFFSET: isize>() -> IDelegateFolderVtbl {
        unsafe extern "system" fn SetItemAlloc<Impl: IDelegateFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmalloc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetItemAlloc(&*(&pmalloc as *const <super::super::System::Com::IMalloc as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IMalloc as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDelegateFolder>, ::windows::core::GetTrustLevel, SetItemAlloc::<Impl, OFFSET>)
    }
}
pub trait IDelegateItemImpl: Sized + IRelatedItemImpl {}
impl ::windows::core::RuntimeName for IDelegateItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDelegateItem";
}
impl IDelegateItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDelegateItemImpl, const OFFSET: isize>() -> IDelegateItemVtbl {
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDelegateItem>, ::windows::core::GetTrustLevel)
    }
}
#[cfg(feature = "Win32_System_Ole")]
pub trait IDeskBandImpl: Sized + IDockingWindowImpl + IOleWindowImpl {
    fn GetBandInfo();
}
#[cfg(feature = "Win32_System_Ole")]
impl ::windows::core::RuntimeName for IDeskBand {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDeskBand";
}
#[cfg(feature = "Win32_System_Ole")]
impl IDeskBandVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDeskBandImpl, const OFFSET: isize>() -> IDeskBandVtbl {
        unsafe extern "system" fn GetBandInfo<Impl: IDeskBandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwbandid: u32, dwviewmode: u32, pdbi: *mut DESKBANDINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBandInfo(dwbandid, dwviewmode, &*(&pdbi as *const <DESKBANDINFO as ::windows::core::Abi>::Abi as *const <DESKBANDINFO as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDeskBand>, ::windows::core::GetTrustLevel, GetBandInfo::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Ole")]
pub trait IDeskBand2Impl: Sized + IDeskBandImpl + IDockingWindowImpl + IOleWindowImpl {
    fn CanRenderComposited();
    fn SetCompositionState();
    fn GetCompositionState();
}
#[cfg(feature = "Win32_System_Ole")]
impl ::windows::core::RuntimeName for IDeskBand2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDeskBand2";
}
#[cfg(feature = "Win32_System_Ole")]
impl IDeskBand2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDeskBand2Impl, const OFFSET: isize>() -> IDeskBand2Vtbl {
        unsafe extern "system" fn CanRenderComposited<Impl: IDeskBand2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfcanrendercomposited: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CanRenderComposited(::core::mem::transmute_copy(&pfcanrendercomposited)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCompositionState<Impl: IDeskBand2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fcompositionenabled: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCompositionState(&*(&fcompositionenabled as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCompositionState<Impl: IDeskBand2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfcompositionenabled: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCompositionState(::core::mem::transmute_copy(&pfcompositionenabled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDeskBand2>, ::windows::core::GetTrustLevel, CanRenderComposited::<Impl, OFFSET>, SetCompositionState::<Impl, OFFSET>, GetCompositionState::<Impl, OFFSET>)
    }
}
pub trait IDeskBandInfoImpl: Sized {
    fn GetDefaultBandWidth();
}
impl ::windows::core::RuntimeName for IDeskBandInfo {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDeskBandInfo";
}
impl IDeskBandInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDeskBandInfoImpl, const OFFSET: isize>() -> IDeskBandInfoVtbl {
        unsafe extern "system" fn GetDefaultBandWidth<Impl: IDeskBandInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwbandid: u32, dwviewmode: u32, pnwidth: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDefaultBandWidth(dwbandid, dwviewmode, ::core::mem::transmute_copy(&pnwidth)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDeskBandInfo>, ::windows::core::GetTrustLevel, GetDefaultBandWidth::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Ole")]
pub trait IDeskBarImpl: Sized + IOleWindowImpl {
    fn SetClient();
    fn GetClient();
    fn OnPosRectChangeDB();
}
#[cfg(feature = "Win32_System_Ole")]
impl ::windows::core::RuntimeName for IDeskBar {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDeskBar";
}
#[cfg(feature = "Win32_System_Ole")]
impl IDeskBarVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDeskBarImpl, const OFFSET: isize>() -> IDeskBarVtbl {
        unsafe extern "system" fn SetClient<Impl: IDeskBarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkclient: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetClient(&*(&punkclient as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetClient<Impl: IDeskBarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunkclient: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetClient(::core::mem::transmute_copy(&ppunkclient)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnPosRectChangeDB<Impl: IDeskBarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prc: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnPosRectChangeDB(&*(&prc as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDeskBar>, ::windows::core::GetTrustLevel, SetClient::<Impl, OFFSET>, GetClient::<Impl, OFFSET>, OnPosRectChangeDB::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Ole")]
pub trait IDeskBarClientImpl: Sized + IOleWindowImpl {
    fn SetDeskBarSite();
    fn SetModeDBC();
    fn UIActivateDBC();
    fn GetSize();
}
#[cfg(feature = "Win32_System_Ole")]
impl ::windows::core::RuntimeName for IDeskBarClient {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDeskBarClient";
}
#[cfg(feature = "Win32_System_Ole")]
impl IDeskBarClientVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDeskBarClientImpl, const OFFSET: isize>() -> IDeskBarClientVtbl {
        unsafe extern "system" fn SetDeskBarSite<Impl: IDeskBarClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punksite: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetDeskBarSite(&*(&punksite as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetModeDBC<Impl: IDeskBarClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwmode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetModeDBC(dwmode) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UIActivateDBC<Impl: IDeskBarClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstate: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UIActivateDBC(dwstate) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSize<Impl: IDeskBarClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwwhich: u32, prc: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSize(dwwhich, ::core::mem::transmute_copy(&prc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDeskBarClient>, ::windows::core::GetTrustLevel, SetDeskBarSite::<Impl, OFFSET>, SetModeDBC::<Impl, OFFSET>, UIActivateDBC::<Impl, OFFSET>, GetSize::<Impl, OFFSET>)
    }
}
pub trait IDesktopGadgetImpl: Sized {
    fn RunGadget();
}
impl ::windows::core::RuntimeName for IDesktopGadget {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDesktopGadget";
}
impl IDesktopGadgetVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDesktopGadgetImpl, const OFFSET: isize>() -> IDesktopGadgetVtbl {
        unsafe extern "system" fn RunGadget<Impl: IDesktopGadgetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, gadgetpath: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RunGadget(&*(&gadgetpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDesktopGadget>, ::windows::core::GetTrustLevel, RunGadget::<Impl, OFFSET>)
    }
}
pub trait IDesktopWallpaperImpl: Sized {
    fn SetWallpaper();
    fn GetWallpaper();
    fn GetMonitorDevicePathAt();
    fn GetMonitorDevicePathCount();
    fn GetMonitorRECT();
    fn SetBackgroundColor();
    fn GetBackgroundColor();
    fn SetPosition();
    fn GetPosition();
    fn SetSlideshow();
    fn GetSlideshow();
    fn SetSlideshowOptions();
    fn GetSlideshowOptions();
    fn AdvanceSlideshow();
    fn GetStatus();
    fn Enable();
}
impl ::windows::core::RuntimeName for IDesktopWallpaper {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDesktopWallpaper";
}
impl IDesktopWallpaperVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDesktopWallpaperImpl, const OFFSET: isize>() -> IDesktopWallpaperVtbl {
        unsafe extern "system" fn SetWallpaper<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, monitorid: super::super::Foundation::PWSTR, wallpaper: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetWallpaper(&*(&monitorid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&wallpaper as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWallpaper<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, monitorid: super::super::Foundation::PWSTR, wallpaper: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetWallpaper(&*(&monitorid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&wallpaper)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMonitorDevicePathAt<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, monitorindex: u32, monitorid: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMonitorDevicePathAt(monitorindex, ::core::mem::transmute_copy(&monitorid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMonitorDevicePathCount<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMonitorDevicePathCount(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMonitorRECT<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, monitorid: super::super::Foundation::PWSTR, displayrect: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMonitorRECT(&*(&monitorid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&displayrect)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBackgroundColor<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, color: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBackgroundColor(color) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBackgroundColor<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, color: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBackgroundColor(::core::mem::transmute_copy(&color)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPosition<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, position: DESKTOP_WALLPAPER_POSITION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetPosition(position) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPosition<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, position: *mut DESKTOP_WALLPAPER_POSITION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPosition(::core::mem::transmute_copy(&position)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSlideshow<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, items: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetSlideshow(&*(&items as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSlideshow<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, items: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSlideshow(::core::mem::transmute_copy(&items)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSlideshowOptions<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: DESKTOP_SLIDESHOW_OPTIONS, slideshowtick: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetSlideshowOptions(options, slideshowtick) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSlideshowOptions<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut DESKTOP_SLIDESHOW_OPTIONS, slideshowtick: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSlideshowOptions(::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&slideshowtick)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AdvanceSlideshow<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, monitorid: super::super::Foundation::PWSTR, direction: DESKTOP_SLIDESHOW_DIRECTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AdvanceSlideshow(&*(&monitorid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), direction) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStatus<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, state: *mut DESKTOP_SLIDESHOW_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetStatus(::core::mem::transmute_copy(&state)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Enable<Impl: IDesktopWallpaperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enable: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Enable(&*(&enable as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IDesktopWallpaper>,
            ::windows::core::GetTrustLevel,
            SetWallpaper::<Impl, OFFSET>,
            GetWallpaper::<Impl, OFFSET>,
            GetMonitorDevicePathAt::<Impl, OFFSET>,
            GetMonitorDevicePathCount::<Impl, OFFSET>,
            GetMonitorRECT::<Impl, OFFSET>,
            SetBackgroundColor::<Impl, OFFSET>,
            GetBackgroundColor::<Impl, OFFSET>,
            SetPosition::<Impl, OFFSET>,
            GetPosition::<Impl, OFFSET>,
            SetSlideshow::<Impl, OFFSET>,
            GetSlideshow::<Impl, OFFSET>,
            SetSlideshowOptions::<Impl, OFFSET>,
            GetSlideshowOptions::<Impl, OFFSET>,
            AdvanceSlideshow::<Impl, OFFSET>,
            GetStatus::<Impl, OFFSET>,
            Enable::<Impl, OFFSET>,
        )
    }
}
pub trait IDestinationStreamFactoryImpl: Sized {
    fn GetDestinationStream();
}
impl ::windows::core::RuntimeName for IDestinationStreamFactory {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDestinationStreamFactory";
}
impl IDestinationStreamFactoryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDestinationStreamFactoryImpl, const OFFSET: isize>() -> IDestinationStreamFactoryVtbl {
        unsafe extern "system" fn GetDestinationStream<Impl: IDestinationStreamFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppstm: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDestinationStream(::core::mem::transmute_copy(&ppstm)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDestinationStreamFactory>, ::windows::core::GetTrustLevel, GetDestinationStream::<Impl, OFFSET>)
    }
}
pub trait IDisplayItemImpl: Sized + IRelatedItemImpl {}
impl ::windows::core::RuntimeName for IDisplayItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDisplayItem";
}
impl IDisplayItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDisplayItemImpl, const OFFSET: isize>() -> IDisplayItemVtbl {
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDisplayItem>, ::windows::core::GetTrustLevel)
    }
}
pub trait IDocViewSiteImpl: Sized {
    fn OnSetTitle();
}
impl ::windows::core::RuntimeName for IDocViewSite {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDocViewSite";
}
impl IDocViewSiteVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDocViewSiteImpl, const OFFSET: isize>() -> IDocViewSiteVtbl {
        unsafe extern "system" fn OnSetTitle<Impl: IDocViewSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvtitle: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnSetTitle(&*(&pvtitle as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDocViewSite>, ::windows::core::GetTrustLevel, OnSetTitle::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Ole")]
pub trait IDockingWindowImpl: Sized + IOleWindowImpl {
    fn ShowDW();
    fn CloseDW();
    fn ResizeBorderDW();
}
#[cfg(feature = "Win32_System_Ole")]
impl ::windows::core::RuntimeName for IDockingWindow {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDockingWindow";
}
#[cfg(feature = "Win32_System_Ole")]
impl IDockingWindowVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDockingWindowImpl, const OFFSET: isize>() -> IDockingWindowVtbl {
        unsafe extern "system" fn ShowDW<Impl: IDockingWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fshow: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowDW(&*(&fshow as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CloseDW<Impl: IDockingWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwreserved: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CloseDW(dwreserved) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResizeBorderDW<Impl: IDockingWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prcborder: *const super::super::Foundation::RECT, punktoolbarsite: *mut ::core::ffi::c_void, freserved: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ResizeBorderDW(
                &*(&prcborder as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType),
                &*(&punktoolbarsite as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                &*(&freserved as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDockingWindow>, ::windows::core::GetTrustLevel, ShowDW::<Impl, OFFSET>, CloseDW::<Impl, OFFSET>, ResizeBorderDW::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Ole")]
pub trait IDockingWindowFrameImpl: Sized + IOleWindowImpl {
    fn AddToolbar();
    fn RemoveToolbar();
    fn FindToolbar();
}
#[cfg(feature = "Win32_System_Ole")]
impl ::windows::core::RuntimeName for IDockingWindowFrame {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDockingWindowFrame";
}
#[cfg(feature = "Win32_System_Ole")]
impl IDockingWindowFrameVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDockingWindowFrameImpl, const OFFSET: isize>() -> IDockingWindowFrameVtbl {
        unsafe extern "system" fn AddToolbar<Impl: IDockingWindowFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punksrc: *mut ::core::ffi::c_void, pwszitem: super::super::Foundation::PWSTR, dwaddflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddToolbar(&*(&punksrc as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&pwszitem as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwaddflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveToolbar<Impl: IDockingWindowFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punksrc: *mut ::core::ffi::c_void, dwremoveflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveToolbar(&*(&punksrc as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), dwremoveflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindToolbar<Impl: IDockingWindowFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszitem: super::super::Foundation::PWSTR, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindToolbar(&*(&pwszitem as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDockingWindowFrame>, ::windows::core::GetTrustLevel, AddToolbar::<Impl, OFFSET>, RemoveToolbar::<Impl, OFFSET>, FindToolbar::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Ole")]
pub trait IDockingWindowSiteImpl: Sized + IOleWindowImpl {
    fn GetBorderDW();
    fn RequestBorderSpaceDW();
    fn SetBorderSpaceDW();
}
#[cfg(feature = "Win32_System_Ole")]
impl ::windows::core::RuntimeName for IDockingWindowSite {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDockingWindowSite";
}
#[cfg(feature = "Win32_System_Ole")]
impl IDockingWindowSiteVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDockingWindowSiteImpl, const OFFSET: isize>() -> IDockingWindowSiteVtbl {
        unsafe extern "system" fn GetBorderDW<Impl: IDockingWindowSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkobj: *mut ::core::ffi::c_void, prcborder: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBorderDW(&*(&punkobj as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&prcborder)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RequestBorderSpaceDW<Impl: IDockingWindowSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkobj: *mut ::core::ffi::c_void, pbw: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RequestBorderSpaceDW(&*(&punkobj as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&pbw as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBorderSpaceDW<Impl: IDockingWindowSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkobj: *mut ::core::ffi::c_void, pbw: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBorderSpaceDW(&*(&punkobj as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&pbw as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDockingWindowSite>, ::windows::core::GetTrustLevel, GetBorderDW::<Impl, OFFSET>, RequestBorderSpaceDW::<Impl, OFFSET>, SetBorderSpaceDW::<Impl, OFFSET>)
    }
}
pub trait IDragSourceHelperImpl: Sized {
    fn InitializeFromBitmap();
    fn InitializeFromWindow();
}
impl ::windows::core::RuntimeName for IDragSourceHelper {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDragSourceHelper";
}
impl IDragSourceHelperVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDragSourceHelperImpl, const OFFSET: isize>() -> IDragSourceHelperVtbl {
        unsafe extern "system" fn InitializeFromBitmap<Impl: IDragSourceHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pshdi: *const SHDRAGIMAGE, pdataobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InitializeFromBitmap(&*(&pshdi as *const <SHDRAGIMAGE as ::windows::core::Abi>::Abi as *const <SHDRAGIMAGE as ::windows::core::DefaultType>::DefaultType), &*(&pdataobject as *const <super::super::System::Com::IDataObject as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDataObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InitializeFromWindow<Impl: IDragSourceHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, ppt: *const super::super::Foundation::POINT, pdataobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InitializeFromWindow(
                &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&ppt as *const <super::super::Foundation::POINT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINT as ::windows::core::DefaultType>::DefaultType),
                &*(&pdataobject as *const <super::super::System::Com::IDataObject as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDataObject as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDragSourceHelper>, ::windows::core::GetTrustLevel, InitializeFromBitmap::<Impl, OFFSET>, InitializeFromWindow::<Impl, OFFSET>)
    }
}
pub trait IDragSourceHelper2Impl: Sized + IDragSourceHelperImpl {
    fn SetFlags();
}
impl ::windows::core::RuntimeName for IDragSourceHelper2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDragSourceHelper2";
}
impl IDragSourceHelper2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDragSourceHelper2Impl, const OFFSET: isize>() -> IDragSourceHelper2Vtbl {
        unsafe extern "system" fn SetFlags<Impl: IDragSourceHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFlags(dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDragSourceHelper2>, ::windows::core::GetTrustLevel, SetFlags::<Impl, OFFSET>)
    }
}
pub trait IDropTargetHelperImpl: Sized {
    fn DragEnter();
    fn DragLeave();
    fn DragOver();
    fn Drop();
    fn Show();
}
impl ::windows::core::RuntimeName for IDropTargetHelper {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDropTargetHelper";
}
impl IDropTargetHelperVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDropTargetHelperImpl, const OFFSET: isize>() -> IDropTargetHelperVtbl {
        unsafe extern "system" fn DragEnter<Impl: IDropTargetHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndtarget: super::super::Foundation::HWND, pdataobject: ::windows::core::RawPtr, ppt: *const super::super::Foundation::POINT, dweffect: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DragEnter(
                &*(&hwndtarget as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&pdataobject as *const <super::super::System::Com::IDataObject as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDataObject as ::windows::core::DefaultType>::DefaultType),
                &*(&ppt as *const <super::super::Foundation::POINT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINT as ::windows::core::DefaultType>::DefaultType),
                dweffect,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DragLeave<Impl: IDropTargetHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DragLeave() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DragOver<Impl: IDropTargetHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppt: *const super::super::Foundation::POINT, dweffect: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DragOver(&*(&ppt as *const <super::super::Foundation::POINT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINT as ::windows::core::DefaultType>::DefaultType), dweffect) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Drop<Impl: IDropTargetHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdataobject: ::windows::core::RawPtr, ppt: *const super::super::Foundation::POINT, dweffect: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Drop(&*(&pdataobject as *const <super::super::System::Com::IDataObject as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDataObject as ::windows::core::DefaultType>::DefaultType), &*(&ppt as *const <super::super::Foundation::POINT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINT as ::windows::core::DefaultType>::DefaultType), dweffect) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Show<Impl: IDropTargetHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fshow: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Show(&*(&fshow as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDropTargetHelper>, ::windows::core::GetTrustLevel, DragEnter::<Impl, OFFSET>, DragLeave::<Impl, OFFSET>, DragOver::<Impl, OFFSET>, Drop::<Impl, OFFSET>, Show::<Impl, OFFSET>)
    }
}
pub trait IDynamicHWHandlerImpl: Sized {
    fn GetDynamicInfo();
}
impl ::windows::core::RuntimeName for IDynamicHWHandler {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IDynamicHWHandler";
}
impl IDynamicHWHandlerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDynamicHWHandlerImpl, const OFFSET: isize>() -> IDynamicHWHandlerVtbl {
        unsafe extern "system" fn GetDynamicInfo<Impl: IDynamicHWHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdeviceid: super::super::Foundation::PWSTR, dwcontenttype: u32, ppszaction: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDynamicInfo(&*(&pszdeviceid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwcontenttype, ::core::mem::transmute_copy(&ppszaction)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IDynamicHWHandler>, ::windows::core::GetTrustLevel, GetDynamicInfo::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IEnumACStringImpl: Sized + IEnumStringImpl {
    fn NextItem();
    fn SetEnumOptions();
    fn GetEnumOptions();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IEnumACString {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumACString";
}
#[cfg(feature = "Win32_System_Com")]
impl IEnumACStringVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumACStringImpl, const OFFSET: isize>() -> IEnumACStringVtbl {
        unsafe extern "system" fn NextItem<Impl: IEnumACStringImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszurl: super::super::Foundation::PWSTR, cchmax: u32, pulsortindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).NextItem(::core::mem::transmute_copy(&pszurl), cchmax, ::core::mem::transmute_copy(&pulsortindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEnumOptions<Impl: IEnumACStringImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwoptions: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetEnumOptions(dwoptions) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEnumOptions<Impl: IEnumACStringImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwoptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEnumOptions(::core::mem::transmute_copy(&pdwoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumACString>, ::windows::core::GetTrustLevel, NextItem::<Impl, OFFSET>, SetEnumOptions::<Impl, OFFSET>, GetEnumOptions::<Impl, OFFSET>)
    }
}
pub trait IEnumAssocHandlersImpl: Sized {
    fn Next();
}
impl ::windows::core::RuntimeName for IEnumAssocHandlers {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumAssocHandlers";
}
impl IEnumAssocHandlersVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumAssocHandlersImpl, const OFFSET: isize>() -> IEnumAssocHandlersVtbl {
        unsafe extern "system" fn Next<Impl: IEnumAssocHandlersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumAssocHandlers>, ::windows::core::GetTrustLevel, Next::<Impl, OFFSET>)
    }
}
pub trait IEnumExplorerCommandImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumExplorerCommand {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumExplorerCommand";
}
impl IEnumExplorerCommandVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumExplorerCommandImpl, const OFFSET: isize>() -> IEnumExplorerCommandVtbl {
        unsafe extern "system" fn Next<Impl: IEnumExplorerCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, puicommand: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&puicommand), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumExplorerCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumExplorerCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumExplorerCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumExplorerCommand>, ::windows::core::GetTrustLevel, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumExtraSearchImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumExtraSearch {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumExtraSearch";
}
impl IEnumExtraSearchVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumExtraSearchImpl, const OFFSET: isize>() -> IEnumExtraSearchVtbl {
        unsafe extern "system" fn Next<Impl: IEnumExtraSearchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut EXTRASEARCH, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumExtraSearchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumExtraSearchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumExtraSearchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumExtraSearch>, ::windows::core::GetTrustLevel, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumFullIDListImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumFullIDList {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumFullIDList";
}
impl IEnumFullIDListVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumFullIDListImpl, const OFFSET: isize>() -> IEnumFullIDListVtbl {
        unsafe extern "system" fn Next<Impl: IEnumFullIDListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut Common::ITEMIDLIST, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumFullIDListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumFullIDListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumFullIDListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumFullIDList>, ::windows::core::GetTrustLevel, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumHLITEMImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumHLITEM {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumHLITEM";
}
impl IEnumHLITEMVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumHLITEMImpl, const OFFSET: isize>() -> IEnumHLITEMVtbl {
        unsafe extern "system" fn Next<Impl: IEnumHLITEMImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut HLITEM, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumHLITEMImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumHLITEMImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumHLITEMImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppienumhlitem: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppienumhlitem)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumHLITEM>, ::windows::core::GetTrustLevel, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumIDListImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumIDList {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumIDList";
}
impl IEnumIDListVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumIDListImpl, const OFFSET: isize>() -> IEnumIDListVtbl {
        unsafe extern "system" fn Next<Impl: IEnumIDListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut Common::ITEMIDLIST, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumIDListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumIDListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumIDListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumIDList>, ::windows::core::GetTrustLevel, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumObjectsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumObjects {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumObjects";
}
impl IEnumObjectsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumObjectsImpl, const OFFSET: isize>() -> IEnumObjectsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, riid: *const ::windows::core::GUID, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Next(celt, &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumObjects>, ::windows::core::GetTrustLevel, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumPublishedAppsImpl: Sized {
    fn Next();
    fn Reset();
}
impl ::windows::core::RuntimeName for IEnumPublishedApps {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumPublishedApps";
}
impl IEnumPublishedAppsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumPublishedAppsImpl, const OFFSET: isize>() -> IEnumPublishedAppsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumPublishedAppsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pia: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Next(::core::mem::transmute_copy(&pia)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumPublishedAppsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumPublishedApps>, ::windows::core::GetTrustLevel, Next::<Impl, OFFSET>, Reset::<Impl, OFFSET>)
    }
}
pub trait IEnumReadyCallbackImpl: Sized {
    fn EnumReady();
}
impl ::windows::core::RuntimeName for IEnumReadyCallback {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumReadyCallback";
}
impl IEnumReadyCallbackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumReadyCallbackImpl, const OFFSET: isize>() -> IEnumReadyCallbackVtbl {
        unsafe extern "system" fn EnumReady<Impl: IEnumReadyCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumReady() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumReadyCallback>, ::windows::core::GetTrustLevel, EnumReady::<Impl, OFFSET>)
    }
}
pub trait IEnumResourcesImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumResources {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumResources";
}
impl IEnumResourcesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumResourcesImpl, const OFFSET: isize>() -> IEnumResourcesVtbl {
        unsafe extern "system" fn Next<Impl: IEnumResourcesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, psir: *mut SHELL_ITEM_RESOURCE, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&psir), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumResourcesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumResourcesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumResourcesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenumr: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppenumr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumResources>, ::windows::core::GetTrustLevel, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumShellItemsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumShellItems {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumShellItems";
}
impl IEnumShellItemsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumShellItemsImpl, const OFFSET: isize>() -> IEnumShellItemsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumShellItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumShellItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumShellItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumShellItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumShellItems>, ::windows::core::GetTrustLevel, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumSyncMgrConflictImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumSyncMgrConflict {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumSyncMgrConflict";
}
impl IEnumSyncMgrConflictVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumSyncMgrConflictImpl, const OFFSET: isize>() -> IEnumSyncMgrConflictVtbl {
        unsafe extern "system" fn Next<Impl: IEnumSyncMgrConflictImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumSyncMgrConflictImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumSyncMgrConflictImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumSyncMgrConflictImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumSyncMgrConflict>, ::windows::core::GetTrustLevel, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumSyncMgrEventsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumSyncMgrEvents {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumSyncMgrEvents";
}
impl IEnumSyncMgrEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumSyncMgrEventsImpl, const OFFSET: isize>() -> IEnumSyncMgrEventsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumSyncMgrEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumSyncMgrEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumSyncMgrEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumSyncMgrEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumSyncMgrEvents>, ::windows::core::GetTrustLevel, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumSyncMgrSyncItemsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumSyncMgrSyncItems {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumSyncMgrSyncItems";
}
impl IEnumSyncMgrSyncItemsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumSyncMgrSyncItemsImpl, const OFFSET: isize>() -> IEnumSyncMgrSyncItemsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumSyncMgrSyncItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumSyncMgrSyncItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumSyncMgrSyncItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumSyncMgrSyncItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumSyncMgrSyncItems>, ::windows::core::GetTrustLevel, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumTravelLogEntryImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumTravelLogEntry {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumTravelLogEntry";
}
impl IEnumTravelLogEntryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumTravelLogEntryImpl, const OFFSET: isize>() -> IEnumTravelLogEntryVtbl {
        unsafe extern "system" fn Next<Impl: IEnumTravelLogEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumTravelLogEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumTravelLogEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumTravelLogEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumTravelLogEntry>, ::windows::core::GetTrustLevel, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumerableViewImpl: Sized {
    fn SetEnumReadyCallback();
    fn CreateEnumIDListFromContents();
}
impl ::windows::core::RuntimeName for IEnumerableView {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IEnumerableView";
}
impl IEnumerableViewVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumerableViewImpl, const OFFSET: isize>() -> IEnumerableViewVtbl {
        unsafe extern "system" fn SetEnumReadyCallback<Impl: IEnumerableViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, percb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetEnumReadyCallback(&*(&percb as *const <IEnumReadyCallback as ::windows::core::Abi>::Abi as *const <IEnumReadyCallback as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateEnumIDListFromContents<Impl: IEnumerableViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST, dwenumflags: u32, ppenumidlist: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateEnumIDListFromContents(&*(&pidlfolder as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), dwenumflags, ::core::mem::transmute_copy(&ppenumidlist)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IEnumerableView>, ::windows::core::GetTrustLevel, SetEnumReadyCallback::<Impl, OFFSET>, CreateEnumIDListFromContents::<Impl, OFFSET>)
    }
}
pub trait IExecuteCommandImpl: Sized {
    fn SetKeyState();
    fn SetParameters();
    fn SetPosition();
    fn SetShowWindow();
    fn SetNoShowUI();
    fn SetDirectory();
    fn Execute();
}
impl ::windows::core::RuntimeName for IExecuteCommand {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExecuteCommand";
}
impl IExecuteCommandVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExecuteCommandImpl, const OFFSET: isize>() -> IExecuteCommandVtbl {
        unsafe extern "system" fn SetKeyState<Impl: IExecuteCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, grfkeystate: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetKeyState(grfkeystate) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetParameters<Impl: IExecuteCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszparameters: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetParameters(&*(&pszparameters as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPosition<Impl: IExecuteCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pt: super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetPosition(&*(&pt as *const <super::super::Foundation::POINT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetShowWindow<Impl: IExecuteCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, nshow: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetShowWindow(nshow) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNoShowUI<Impl: IExecuteCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fnoshowui: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetNoShowUI(&*(&fnoshowui as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDirectory<Impl: IExecuteCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdirectory: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetDirectory(&*(&pszdirectory as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Execute<Impl: IExecuteCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Execute() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IExecuteCommand>, ::windows::core::GetTrustLevel, SetKeyState::<Impl, OFFSET>, SetParameters::<Impl, OFFSET>, SetPosition::<Impl, OFFSET>, SetShowWindow::<Impl, OFFSET>, SetNoShowUI::<Impl, OFFSET>, SetDirectory::<Impl, OFFSET>, Execute::<Impl, OFFSET>)
    }
}
pub trait IExecuteCommandApplicationHostEnvironmentImpl: Sized {
    fn GetValue();
}
impl ::windows::core::RuntimeName for IExecuteCommandApplicationHostEnvironment {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExecuteCommandApplicationHostEnvironment";
}
impl IExecuteCommandApplicationHostEnvironmentVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExecuteCommandApplicationHostEnvironmentImpl, const OFFSET: isize>() -> IExecuteCommandApplicationHostEnvironmentVtbl {
        unsafe extern "system" fn GetValue<Impl: IExecuteCommandApplicationHostEnvironmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pahe: *mut AHE_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetValue(::core::mem::transmute_copy(&pahe)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IExecuteCommandApplicationHostEnvironment>, ::windows::core::GetTrustLevel, GetValue::<Impl, OFFSET>)
    }
}
pub trait IExecuteCommandHostImpl: Sized {
    fn GetUIMode();
}
impl ::windows::core::RuntimeName for IExecuteCommandHost {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExecuteCommandHost";
}
impl IExecuteCommandHostVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExecuteCommandHostImpl, const OFFSET: isize>() -> IExecuteCommandHostVtbl {
        unsafe extern "system" fn GetUIMode<Impl: IExecuteCommandHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, puimode: *mut EC_HOST_UI_MODE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetUIMode(::core::mem::transmute_copy(&puimode)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IExecuteCommandHost>, ::windows::core::GetTrustLevel, GetUIMode::<Impl, OFFSET>)
    }
}
pub trait IExpDispSupportImpl: Sized {
    fn FindConnectionPoint();
    fn OnTranslateAccelerator();
    fn OnInvoke();
}
impl ::windows::core::RuntimeName for IExpDispSupport {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExpDispSupport";
}
impl IExpDispSupportVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExpDispSupportImpl, const OFFSET: isize>() -> IExpDispSupportVtbl {
        unsafe extern "system" fn FindConnectionPoint<Impl: IExpDispSupportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppccp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindConnectionPoint(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppccp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnTranslateAccelerator<Impl: IExpDispSupportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG, grfmodifiers: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnTranslateAccelerator(&*(&pmsg as *const <super::WindowsAndMessaging::MSG as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::MSG as ::windows::core::DefaultType>::DefaultType), grfmodifiers) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnInvoke<Impl: IExpDispSupportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dispidmember: i32, iid: *const ::windows::core::GUID, lcid: u32, wflags: u16, pdispparams: *const super::super::System::Com::DISPPARAMS, pvarresult: *mut super::super::System::Com::VARIANT, pexcepinfo: *mut super::super::System::Com::EXCEPINFO, puargerr: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnInvoke(
                dispidmember,
                &*(&iid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                lcid,
                wflags,
                &*(&pdispparams as *const <super::super::System::Com::DISPPARAMS as ::windows::core::Abi>::Abi as *const <super::super::System::Com::DISPPARAMS as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&pvarresult),
                ::core::mem::transmute_copy(&pexcepinfo),
                ::core::mem::transmute_copy(&puargerr),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IExpDispSupport>, ::windows::core::GetTrustLevel, FindConnectionPoint::<Impl, OFFSET>, OnTranslateAccelerator::<Impl, OFFSET>, OnInvoke::<Impl, OFFSET>)
    }
}
pub trait IExpDispSupportXPImpl: Sized {
    fn FindCIE4ConnectionPoint();
    fn OnTranslateAccelerator();
    fn OnInvoke();
}
impl ::windows::core::RuntimeName for IExpDispSupportXP {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExpDispSupportXP";
}
impl IExpDispSupportXPVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExpDispSupportXPImpl, const OFFSET: isize>() -> IExpDispSupportXPVtbl {
        unsafe extern "system" fn FindCIE4ConnectionPoint<Impl: IExpDispSupportXPImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppccp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindCIE4ConnectionPoint(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppccp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnTranslateAccelerator<Impl: IExpDispSupportXPImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG, grfmodifiers: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnTranslateAccelerator(&*(&pmsg as *const <super::WindowsAndMessaging::MSG as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::MSG as ::windows::core::DefaultType>::DefaultType), grfmodifiers) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnInvoke<Impl: IExpDispSupportXPImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dispidmember: i32, iid: *const ::windows::core::GUID, lcid: u32, wflags: u16, pdispparams: *const super::super::System::Com::DISPPARAMS, pvarresult: *mut super::super::System::Com::VARIANT, pexcepinfo: *mut super::super::System::Com::EXCEPINFO, puargerr: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnInvoke(
                dispidmember,
                &*(&iid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                lcid,
                wflags,
                &*(&pdispparams as *const <super::super::System::Com::DISPPARAMS as ::windows::core::Abi>::Abi as *const <super::super::System::Com::DISPPARAMS as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&pvarresult),
                ::core::mem::transmute_copy(&pexcepinfo),
                ::core::mem::transmute_copy(&puargerr),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IExpDispSupportXP>, ::windows::core::GetTrustLevel, FindCIE4ConnectionPoint::<Impl, OFFSET>, OnTranslateAccelerator::<Impl, OFFSET>, OnInvoke::<Impl, OFFSET>)
    }
}
pub trait IExplorerBrowserImpl: Sized {
    fn Initialize();
    fn Destroy();
    fn SetRect();
    fn SetPropertyBag();
    fn SetEmptyText();
    fn SetFolderSettings();
    fn Advise();
    fn Unadvise();
    fn SetOptions();
    fn GetOptions();
    fn BrowseToIDList();
    fn BrowseToObject();
    fn FillFromObject();
    fn RemoveAll();
    fn GetCurrentView();
}
impl ::windows::core::RuntimeName for IExplorerBrowser {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExplorerBrowser";
}
impl IExplorerBrowserVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExplorerBrowserImpl, const OFFSET: isize>() -> IExplorerBrowserVtbl {
        unsafe extern "system" fn Initialize<Impl: IExplorerBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT, pfs: *const FOLDERSETTINGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(
                &*(&hwndparent as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&prc as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType),
                &*(&pfs as *const <FOLDERSETTINGS as ::windows::core::Abi>::Abi as *const <FOLDERSETTINGS as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Destroy<Impl: IExplorerBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Destroy() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRect<Impl: IExplorerBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phdwp: *mut isize, rcbrowser: super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetRect(phdwp, &*(&rcbrowser as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPropertyBag<Impl: IExplorerBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszpropertybag: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetPropertyBag(&*(&pszpropertybag as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEmptyText<Impl: IExplorerBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszemptytext: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetEmptyText(&*(&pszemptytext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFolderSettings<Impl: IExplorerBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfs: *const FOLDERSETTINGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFolderSettings(&*(&pfs as *const <FOLDERSETTINGS as ::windows::core::Abi>::Abi as *const <FOLDERSETTINGS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Advise<Impl: IExplorerBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psbe: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Advise(&*(&psbe as *const <IExplorerBrowserEvents as ::windows::core::Abi>::Abi as *const <IExplorerBrowserEvents as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Unadvise<Impl: IExplorerBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Unadvise(dwcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOptions<Impl: IExplorerBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflag: EXPLORER_BROWSER_OPTIONS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetOptions(dwflag) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOptions<Impl: IExplorerBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflag: *mut EXPLORER_BROWSER_OPTIONS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOptions(::core::mem::transmute_copy(&pdwflag)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BrowseToIDList<Impl: IExplorerBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, uflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BrowseToIDList(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), uflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BrowseToObject<Impl: IExplorerBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, uflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BrowseToObject(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), uflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FillFromObject<Impl: IExplorerBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, dwflags: EXPLORER_BROWSER_FILL_FLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FillFromObject(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveAll<Impl: IExplorerBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveAll() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentView<Impl: IExplorerBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentView(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IExplorerBrowser>,
            ::windows::core::GetTrustLevel,
            Initialize::<Impl, OFFSET>,
            Destroy::<Impl, OFFSET>,
            SetRect::<Impl, OFFSET>,
            SetPropertyBag::<Impl, OFFSET>,
            SetEmptyText::<Impl, OFFSET>,
            SetFolderSettings::<Impl, OFFSET>,
            Advise::<Impl, OFFSET>,
            Unadvise::<Impl, OFFSET>,
            SetOptions::<Impl, OFFSET>,
            GetOptions::<Impl, OFFSET>,
            BrowseToIDList::<Impl, OFFSET>,
            BrowseToObject::<Impl, OFFSET>,
            FillFromObject::<Impl, OFFSET>,
            RemoveAll::<Impl, OFFSET>,
            GetCurrentView::<Impl, OFFSET>,
        )
    }
}
pub trait IExplorerBrowserEventsImpl: Sized {
    fn OnNavigationPending();
    fn OnViewCreated();
    fn OnNavigationComplete();
    fn OnNavigationFailed();
}
impl ::windows::core::RuntimeName for IExplorerBrowserEvents {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExplorerBrowserEvents";
}
impl IExplorerBrowserEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExplorerBrowserEventsImpl, const OFFSET: isize>() -> IExplorerBrowserEventsVtbl {
        unsafe extern "system" fn OnNavigationPending<Impl: IExplorerBrowserEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnNavigationPending(&*(&pidlfolder as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnViewCreated<Impl: IExplorerBrowserEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psv: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnViewCreated(&*(&psv as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnNavigationComplete<Impl: IExplorerBrowserEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnNavigationComplete(&*(&pidlfolder as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnNavigationFailed<Impl: IExplorerBrowserEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnNavigationFailed(&*(&pidlfolder as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IExplorerBrowserEvents>, ::windows::core::GetTrustLevel, OnNavigationPending::<Impl, OFFSET>, OnViewCreated::<Impl, OFFSET>, OnNavigationComplete::<Impl, OFFSET>, OnNavigationFailed::<Impl, OFFSET>)
    }
}
pub trait IExplorerCommandImpl: Sized {
    fn GetTitle();
    fn GetIcon();
    fn GetToolTip();
    fn GetCanonicalName();
    fn GetState();
    fn Invoke();
    fn GetFlags();
    fn EnumSubCommands();
}
impl ::windows::core::RuntimeName for IExplorerCommand {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExplorerCommand";
}
impl IExplorerCommandVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExplorerCommandImpl, const OFFSET: isize>() -> IExplorerCommandVtbl {
        unsafe extern "system" fn GetTitle<Impl: IExplorerCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiitemarray: ::windows::core::RawPtr, ppszname: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTitle(&*(&psiitemarray as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppszname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIcon<Impl: IExplorerCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiitemarray: ::windows::core::RawPtr, ppszicon: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIcon(&*(&psiitemarray as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppszicon)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetToolTip<Impl: IExplorerCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiitemarray: ::windows::core::RawPtr, ppszinfotip: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetToolTip(&*(&psiitemarray as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppszinfotip)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCanonicalName<Impl: IExplorerCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguidcommandname: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCanonicalName(::core::mem::transmute_copy(&pguidcommandname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetState<Impl: IExplorerCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiitemarray: ::windows::core::RawPtr, foktobeslow: super::super::Foundation::BOOL, pcmdstate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetState(&*(&psiitemarray as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType), &*(&foktobeslow as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pcmdstate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Invoke<Impl: IExplorerCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiitemarray: ::windows::core::RawPtr, pbc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Invoke(&*(&psiitemarray as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType), &*(&pbc as *const <super::super::System::Com::IBindCtx as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindCtx as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFlags<Impl: IExplorerCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFlags(::core::mem::transmute_copy(&pflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumSubCommands<Impl: IExplorerCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumSubCommands(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IExplorerCommand>, ::windows::core::GetTrustLevel, GetTitle::<Impl, OFFSET>, GetIcon::<Impl, OFFSET>, GetToolTip::<Impl, OFFSET>, GetCanonicalName::<Impl, OFFSET>, GetState::<Impl, OFFSET>, Invoke::<Impl, OFFSET>, GetFlags::<Impl, OFFSET>, EnumSubCommands::<Impl, OFFSET>)
    }
}
pub trait IExplorerCommandProviderImpl: Sized {
    fn GetCommands();
    fn GetCommand();
}
impl ::windows::core::RuntimeName for IExplorerCommandProvider {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExplorerCommandProvider";
}
impl IExplorerCommandProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExplorerCommandProviderImpl, const OFFSET: isize>() -> IExplorerCommandProviderVtbl {
        unsafe extern "system" fn GetCommands<Impl: IExplorerCommandProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punksite: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCommands(&*(&punksite as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCommand<Impl: IExplorerCommandProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rguidcommandid: *const ::windows::core::GUID, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCommand(&*(&rguidcommandid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IExplorerCommandProvider>, ::windows::core::GetTrustLevel, GetCommands::<Impl, OFFSET>, GetCommand::<Impl, OFFSET>)
    }
}
pub trait IExplorerCommandStateImpl: Sized {
    fn GetState();
}
impl ::windows::core::RuntimeName for IExplorerCommandState {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExplorerCommandState";
}
impl IExplorerCommandStateVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExplorerCommandStateImpl, const OFFSET: isize>() -> IExplorerCommandStateVtbl {
        unsafe extern "system" fn GetState<Impl: IExplorerCommandStateImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiitemarray: ::windows::core::RawPtr, foktobeslow: super::super::Foundation::BOOL, pcmdstate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetState(&*(&psiitemarray as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType), &*(&foktobeslow as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pcmdstate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IExplorerCommandState>, ::windows::core::GetTrustLevel, GetState::<Impl, OFFSET>)
    }
}
pub trait IExplorerPaneVisibilityImpl: Sized {
    fn GetPaneState();
}
impl ::windows::core::RuntimeName for IExplorerPaneVisibility {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExplorerPaneVisibility";
}
impl IExplorerPaneVisibilityVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExplorerPaneVisibilityImpl, const OFFSET: isize>() -> IExplorerPaneVisibilityVtbl {
        unsafe extern "system" fn GetPaneState<Impl: IExplorerPaneVisibilityImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ep: *const ::windows::core::GUID, peps: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPaneState(&*(&ep as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&peps)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IExplorerPaneVisibility>, ::windows::core::GetTrustLevel, GetPaneState::<Impl, OFFSET>)
    }
}
pub trait IExtensionServicesImpl: Sized {
    fn SetAdditionalHeaders();
    fn SetAuthenticateData();
}
impl ::windows::core::RuntimeName for IExtensionServices {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExtensionServices";
}
impl IExtensionServicesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExtensionServicesImpl, const OFFSET: isize>() -> IExtensionServicesVtbl {
        unsafe extern "system" fn SetAdditionalHeaders<Impl: IExtensionServicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwzadditionalheaders: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAdditionalHeaders(&*(&pwzadditionalheaders as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAuthenticateData<Impl: IExtensionServicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phwnd: super::super::Foundation::HWND, pwzusername: super::super::Foundation::PWSTR, pwzpassword: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAuthenticateData(
                &*(&phwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&pwzusername as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pwzpassword as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IExtensionServices>, ::windows::core::GetTrustLevel, SetAdditionalHeaders::<Impl, OFFSET>, SetAuthenticateData::<Impl, OFFSET>)
    }
}
pub trait IExtractIconAImpl: Sized {
    fn GetIconLocation();
    fn Extract();
}
impl ::windows::core::RuntimeName for IExtractIconA {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExtractIconA";
}
impl IExtractIconAVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExtractIconAImpl, const OFFSET: isize>() -> IExtractIconAVtbl {
        unsafe extern "system" fn GetIconLocation<Impl: IExtractIconAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uflags: u32, psziconfile: super::super::Foundation::PSTR, cchmax: u32, piindex: *mut i32, pwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIconLocation(uflags, ::core::mem::transmute_copy(&psziconfile), cchmax, ::core::mem::transmute_copy(&piindex), ::core::mem::transmute_copy(&pwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Extract<Impl: IExtractIconAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfile: super::super::Foundation::PSTR, niconindex: u32, phiconlarge: *mut super::WindowsAndMessaging::HICON, phiconsmall: *mut super::WindowsAndMessaging::HICON, niconsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Extract(&*(&pszfile as *const <super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), niconindex, ::core::mem::transmute_copy(&phiconlarge), ::core::mem::transmute_copy(&phiconsmall), niconsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IExtractIconA>, ::windows::core::GetTrustLevel, GetIconLocation::<Impl, OFFSET>, Extract::<Impl, OFFSET>)
    }
}
pub trait IExtractIconWImpl: Sized {
    fn GetIconLocation();
    fn Extract();
}
impl ::windows::core::RuntimeName for IExtractIconW {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExtractIconW";
}
impl IExtractIconWVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExtractIconWImpl, const OFFSET: isize>() -> IExtractIconWVtbl {
        unsafe extern "system" fn GetIconLocation<Impl: IExtractIconWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uflags: u32, psziconfile: super::super::Foundation::PWSTR, cchmax: u32, piindex: *mut i32, pwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIconLocation(uflags, ::core::mem::transmute_copy(&psziconfile), cchmax, ::core::mem::transmute_copy(&piindex), ::core::mem::transmute_copy(&pwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Extract<Impl: IExtractIconWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfile: super::super::Foundation::PWSTR, niconindex: u32, phiconlarge: *mut super::WindowsAndMessaging::HICON, phiconsmall: *mut super::WindowsAndMessaging::HICON, niconsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Extract(&*(&pszfile as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), niconindex, ::core::mem::transmute_copy(&phiconlarge), ::core::mem::transmute_copy(&phiconsmall), niconsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IExtractIconW>, ::windows::core::GetTrustLevel, GetIconLocation::<Impl, OFFSET>, Extract::<Impl, OFFSET>)
    }
}
pub trait IExtractImageImpl: Sized {
    fn GetLocation();
    fn Extract();
}
impl ::windows::core::RuntimeName for IExtractImage {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExtractImage";
}
impl IExtractImageVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExtractImageImpl, const OFFSET: isize>() -> IExtractImageVtbl {
        unsafe extern "system" fn GetLocation<Impl: IExtractImageImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszpathbuffer: super::super::Foundation::PWSTR, cch: u32, pdwpriority: *mut u32, prgsize: *const super::super::Foundation::SIZE, dwrecclrdepth: u32, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLocation(::core::mem::transmute_copy(&pszpathbuffer), cch, pdwpriority, &*(&prgsize as *const <super::super::Foundation::SIZE as ::windows::core::Abi>::Abi as *const <super::super::Foundation::SIZE as ::windows::core::DefaultType>::DefaultType), dwrecclrdepth, pdwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Extract<Impl: IExtractImageImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phbmpthumbnail: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Extract(::core::mem::transmute_copy(&phbmpthumbnail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IExtractImage>, ::windows::core::GetTrustLevel, GetLocation::<Impl, OFFSET>, Extract::<Impl, OFFSET>)
    }
}
pub trait IExtractImage2Impl: Sized + IExtractImageImpl {
    fn GetDateStamp();
}
impl ::windows::core::RuntimeName for IExtractImage2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IExtractImage2";
}
impl IExtractImage2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IExtractImage2Impl, const OFFSET: isize>() -> IExtractImage2Vtbl {
        unsafe extern "system" fn GetDateStamp<Impl: IExtractImage2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdatestamp: *mut super::super::Foundation::FILETIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDateStamp(::core::mem::transmute_copy(&pdatestamp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IExtractImage2>, ::windows::core::GetTrustLevel, GetDateStamp::<Impl, OFFSET>)
    }
}
pub trait IFileDialogImpl: Sized + IModalWindowImpl {
    fn SetFileTypes();
    fn SetFileTypeIndex();
    fn GetFileTypeIndex();
    fn Advise();
    fn Unadvise();
    fn SetOptions();
    fn GetOptions();
    fn SetDefaultFolder();
    fn SetFolder();
    fn GetFolder();
    fn GetCurrentSelection();
    fn SetFileName();
    fn GetFileName();
    fn SetTitle();
    fn SetOkButtonLabel();
    fn SetFileNameLabel();
    fn GetResult();
    fn AddPlace();
    fn SetDefaultExtension();
    fn Close();
    fn SetClientGuid();
    fn ClearClientData();
    fn SetFilter();
}
impl ::windows::core::RuntimeName for IFileDialog {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFileDialog";
}
impl IFileDialogVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileDialogImpl, const OFFSET: isize>() -> IFileDialogVtbl {
        unsafe extern "system" fn SetFileTypes<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cfiletypes: u32, rgfilterspec: *const Common::COMDLG_FILTERSPEC) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFileTypes(cfiletypes, &*(&rgfilterspec as *const <Common::COMDLG_FILTERSPEC as ::windows::core::Abi>::Abi as *const <Common::COMDLG_FILTERSPEC as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFileTypeIndex<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ifiletype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFileTypeIndex(ifiletype) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFileTypeIndex<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pifiletype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFileTypeIndex(::core::mem::transmute_copy(&pifiletype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Advise<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfde: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Advise(&*(&pfde as *const <IFileDialogEvents as ::windows::core::Abi>::Abi as *const <IFileDialogEvents as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Unadvise<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Unadvise(dwcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOptions<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fos: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetOptions(fos) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOptions<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfos: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOptions(::core::mem::transmute_copy(&pfos)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDefaultFolder<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetDefaultFolder(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFolder<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFolder(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolder<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolder(::core::mem::transmute_copy(&ppsi)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSelection<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentSelection(::core::mem::transmute_copy(&ppsi)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFileName<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFileName(&*(&pszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFileName<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFileName(::core::mem::transmute_copy(&pszname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTitle<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztitle: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTitle(&*(&psztitle as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOkButtonLabel<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztext: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetOkButtonLabel(&*(&psztext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFileNameLabel<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszlabel: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFileNameLabel(&*(&pszlabel as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetResult<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetResult(::core::mem::transmute_copy(&ppsi)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddPlace<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, fdap: FDAP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddPlace(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), fdap) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDefaultExtension<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdefaultextension: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetDefaultExtension(&*(&pszdefaultextension as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Close<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hr: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Close(hr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetClientGuid<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetClientGuid(&*(&guid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ClearClientData<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ClearClientData() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFilter<Impl: IFileDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfilter: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFilter(&*(&pfilter as *const <IShellItemFilter as ::windows::core::Abi>::Abi as *const <IShellItemFilter as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IFileDialog>,
            ::windows::core::GetTrustLevel,
            SetFileTypes::<Impl, OFFSET>,
            SetFileTypeIndex::<Impl, OFFSET>,
            GetFileTypeIndex::<Impl, OFFSET>,
            Advise::<Impl, OFFSET>,
            Unadvise::<Impl, OFFSET>,
            SetOptions::<Impl, OFFSET>,
            GetOptions::<Impl, OFFSET>,
            SetDefaultFolder::<Impl, OFFSET>,
            SetFolder::<Impl, OFFSET>,
            GetFolder::<Impl, OFFSET>,
            GetCurrentSelection::<Impl, OFFSET>,
            SetFileName::<Impl, OFFSET>,
            GetFileName::<Impl, OFFSET>,
            SetTitle::<Impl, OFFSET>,
            SetOkButtonLabel::<Impl, OFFSET>,
            SetFileNameLabel::<Impl, OFFSET>,
            GetResult::<Impl, OFFSET>,
            AddPlace::<Impl, OFFSET>,
            SetDefaultExtension::<Impl, OFFSET>,
            Close::<Impl, OFFSET>,
            SetClientGuid::<Impl, OFFSET>,
            ClearClientData::<Impl, OFFSET>,
            SetFilter::<Impl, OFFSET>,
        )
    }
}
pub trait IFileDialog2Impl: Sized + IFileDialogImpl + IModalWindowImpl {
    fn SetCancelButtonLabel();
    fn SetNavigationRoot();
}
impl ::windows::core::RuntimeName for IFileDialog2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFileDialog2";
}
impl IFileDialog2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileDialog2Impl, const OFFSET: isize>() -> IFileDialog2Vtbl {
        unsafe extern "system" fn SetCancelButtonLabel<Impl: IFileDialog2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszlabel: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCancelButtonLabel(&*(&pszlabel as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNavigationRoot<Impl: IFileDialog2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetNavigationRoot(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFileDialog2>, ::windows::core::GetTrustLevel, SetCancelButtonLabel::<Impl, OFFSET>, SetNavigationRoot::<Impl, OFFSET>)
    }
}
pub trait IFileDialogControlEventsImpl: Sized {
    fn OnItemSelected();
    fn OnButtonClicked();
    fn OnCheckButtonToggled();
    fn OnControlActivating();
}
impl ::windows::core::RuntimeName for IFileDialogControlEvents {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFileDialogControlEvents";
}
impl IFileDialogControlEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileDialogControlEventsImpl, const OFFSET: isize>() -> IFileDialogControlEventsVtbl {
        unsafe extern "system" fn OnItemSelected<Impl: IFileDialogControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfdc: ::windows::core::RawPtr, dwidctl: u32, dwiditem: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnItemSelected(&*(&pfdc as *const <IFileDialogCustomize as ::windows::core::Abi>::Abi as *const <IFileDialogCustomize as ::windows::core::DefaultType>::DefaultType), dwidctl, dwiditem) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnButtonClicked<Impl: IFileDialogControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfdc: ::windows::core::RawPtr, dwidctl: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnButtonClicked(&*(&pfdc as *const <IFileDialogCustomize as ::windows::core::Abi>::Abi as *const <IFileDialogCustomize as ::windows::core::DefaultType>::DefaultType), dwidctl) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnCheckButtonToggled<Impl: IFileDialogControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfdc: ::windows::core::RawPtr, dwidctl: u32, bchecked: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnCheckButtonToggled(&*(&pfdc as *const <IFileDialogCustomize as ::windows::core::Abi>::Abi as *const <IFileDialogCustomize as ::windows::core::DefaultType>::DefaultType), dwidctl, &*(&bchecked as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnControlActivating<Impl: IFileDialogControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfdc: ::windows::core::RawPtr, dwidctl: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnControlActivating(&*(&pfdc as *const <IFileDialogCustomize as ::windows::core::Abi>::Abi as *const <IFileDialogCustomize as ::windows::core::DefaultType>::DefaultType), dwidctl) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFileDialogControlEvents>, ::windows::core::GetTrustLevel, OnItemSelected::<Impl, OFFSET>, OnButtonClicked::<Impl, OFFSET>, OnCheckButtonToggled::<Impl, OFFSET>, OnControlActivating::<Impl, OFFSET>)
    }
}
pub trait IFileDialogCustomizeImpl: Sized {
    fn EnableOpenDropDown();
    fn AddMenu();
    fn AddPushButton();
    fn AddComboBox();
    fn AddRadioButtonList();
    fn AddCheckButton();
    fn AddEditBox();
    fn AddSeparator();
    fn AddText();
    fn SetControlLabel();
    fn GetControlState();
    fn SetControlState();
    fn GetEditBoxText();
    fn SetEditBoxText();
    fn GetCheckButtonState();
    fn SetCheckButtonState();
    fn AddControlItem();
    fn RemoveControlItem();
    fn RemoveAllControlItems();
    fn GetControlItemState();
    fn SetControlItemState();
    fn GetSelectedControlItem();
    fn SetSelectedControlItem();
    fn StartVisualGroup();
    fn EndVisualGroup();
    fn MakeProminent();
    fn SetControlItemText();
}
impl ::windows::core::RuntimeName for IFileDialogCustomize {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFileDialogCustomize";
}
impl IFileDialogCustomizeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileDialogCustomizeImpl, const OFFSET: isize>() -> IFileDialogCustomizeVtbl {
        unsafe extern "system" fn EnableOpenDropDown<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnableOpenDropDown(dwidctl) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddMenu<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pszlabel: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddMenu(dwidctl, &*(&pszlabel as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddPushButton<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pszlabel: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddPushButton(dwidctl, &*(&pszlabel as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddComboBox<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddComboBox(dwidctl) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddRadioButtonList<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddRadioButtonList(dwidctl) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddCheckButton<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pszlabel: super::super::Foundation::PWSTR, bchecked: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddCheckButton(dwidctl, &*(&pszlabel as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&bchecked as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddEditBox<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, psztext: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddEditBox(dwidctl, &*(&psztext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSeparator<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddSeparator(dwidctl) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddText<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, psztext: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddText(dwidctl, &*(&psztext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetControlLabel<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pszlabel: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetControlLabel(dwidctl, &*(&pszlabel as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetControlState<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pdwstate: *mut CDCONTROLSTATEF) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetControlState(dwidctl, ::core::mem::transmute_copy(&pdwstate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetControlState<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, dwstate: CDCONTROLSTATEF) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetControlState(dwidctl, dwstate) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEditBoxText<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, ppsztext: *mut *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEditBoxText(dwidctl, ::core::mem::transmute_copy(&ppsztext)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEditBoxText<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, psztext: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetEditBoxText(dwidctl, &*(&psztext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCheckButtonState<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pbchecked: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCheckButtonState(dwidctl, ::core::mem::transmute_copy(&pbchecked)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCheckButtonState<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, bchecked: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCheckButtonState(dwidctl, &*(&bchecked as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddControlItem<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32, pszlabel: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddControlItem(dwidctl, dwiditem, &*(&pszlabel as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveControlItem<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveControlItem(dwidctl, dwiditem) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveAllControlItems<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveAllControlItems(dwidctl) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetControlItemState<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32, pdwstate: *mut CDCONTROLSTATEF) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetControlItemState(dwidctl, dwiditem, ::core::mem::transmute_copy(&pdwstate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetControlItemState<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32, dwstate: CDCONTROLSTATEF) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetControlItemState(dwidctl, dwiditem, dwstate) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSelectedControlItem<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pdwiditem: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSelectedControlItem(dwidctl, ::core::mem::transmute_copy(&pdwiditem)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSelectedControlItem<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetSelectedControlItem(dwidctl, dwiditem) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartVisualGroup<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pszlabel: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartVisualGroup(dwidctl, &*(&pszlabel as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndVisualGroup<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EndVisualGroup() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MakeProminent<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MakeProminent(dwidctl) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetControlItemText<Impl: IFileDialogCustomizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32, pszlabel: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetControlItemText(dwidctl, dwiditem, &*(&pszlabel as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IFileDialogCustomize>,
            ::windows::core::GetTrustLevel,
            EnableOpenDropDown::<Impl, OFFSET>,
            AddMenu::<Impl, OFFSET>,
            AddPushButton::<Impl, OFFSET>,
            AddComboBox::<Impl, OFFSET>,
            AddRadioButtonList::<Impl, OFFSET>,
            AddCheckButton::<Impl, OFFSET>,
            AddEditBox::<Impl, OFFSET>,
            AddSeparator::<Impl, OFFSET>,
            AddText::<Impl, OFFSET>,
            SetControlLabel::<Impl, OFFSET>,
            GetControlState::<Impl, OFFSET>,
            SetControlState::<Impl, OFFSET>,
            GetEditBoxText::<Impl, OFFSET>,
            SetEditBoxText::<Impl, OFFSET>,
            GetCheckButtonState::<Impl, OFFSET>,
            SetCheckButtonState::<Impl, OFFSET>,
            AddControlItem::<Impl, OFFSET>,
            RemoveControlItem::<Impl, OFFSET>,
            RemoveAllControlItems::<Impl, OFFSET>,
            GetControlItemState::<Impl, OFFSET>,
            SetControlItemState::<Impl, OFFSET>,
            GetSelectedControlItem::<Impl, OFFSET>,
            SetSelectedControlItem::<Impl, OFFSET>,
            StartVisualGroup::<Impl, OFFSET>,
            EndVisualGroup::<Impl, OFFSET>,
            MakeProminent::<Impl, OFFSET>,
            SetControlItemText::<Impl, OFFSET>,
        )
    }
}
pub trait IFileDialogEventsImpl: Sized {
    fn OnFileOk();
    fn OnFolderChanging();
    fn OnFolderChange();
    fn OnSelectionChange();
    fn OnShareViolation();
    fn OnTypeChange();
    fn OnOverwrite();
}
impl ::windows::core::RuntimeName for IFileDialogEvents {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFileDialogEvents";
}
impl IFileDialogEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileDialogEventsImpl, const OFFSET: isize>() -> IFileDialogEventsVtbl {
        unsafe extern "system" fn OnFileOk<Impl: IFileDialogEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfd: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnFileOk(&*(&pfd as *const <IFileDialog as ::windows::core::Abi>::Abi as *const <IFileDialog as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnFolderChanging<Impl: IFileDialogEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfd: ::windows::core::RawPtr, psifolder: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnFolderChanging(&*(&pfd as *const <IFileDialog as ::windows::core::Abi>::Abi as *const <IFileDialog as ::windows::core::DefaultType>::DefaultType), &*(&psifolder as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnFolderChange<Impl: IFileDialogEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfd: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnFolderChange(&*(&pfd as *const <IFileDialog as ::windows::core::Abi>::Abi as *const <IFileDialog as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnSelectionChange<Impl: IFileDialogEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfd: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnSelectionChange(&*(&pfd as *const <IFileDialog as ::windows::core::Abi>::Abi as *const <IFileDialog as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnShareViolation<Impl: IFileDialogEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfd: ::windows::core::RawPtr, psi: ::windows::core::RawPtr, presponse: *mut FDE_SHAREVIOLATION_RESPONSE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnShareViolation(&*(&pfd as *const <IFileDialog as ::windows::core::Abi>::Abi as *const <IFileDialog as ::windows::core::DefaultType>::DefaultType), &*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&presponse)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnTypeChange<Impl: IFileDialogEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfd: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnTypeChange(&*(&pfd as *const <IFileDialog as ::windows::core::Abi>::Abi as *const <IFileDialog as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnOverwrite<Impl: IFileDialogEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfd: ::windows::core::RawPtr, psi: ::windows::core::RawPtr, presponse: *mut FDE_OVERWRITE_RESPONSE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnOverwrite(&*(&pfd as *const <IFileDialog as ::windows::core::Abi>::Abi as *const <IFileDialog as ::windows::core::DefaultType>::DefaultType), &*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&presponse)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFileDialogEvents>, ::windows::core::GetTrustLevel, OnFileOk::<Impl, OFFSET>, OnFolderChanging::<Impl, OFFSET>, OnFolderChange::<Impl, OFFSET>, OnSelectionChange::<Impl, OFFSET>, OnShareViolation::<Impl, OFFSET>, OnTypeChange::<Impl, OFFSET>, OnOverwrite::<Impl, OFFSET>)
    }
}
pub trait IFileIsInUseImpl: Sized {
    fn GetAppName();
    fn GetUsage();
    fn GetCapabilities();
    fn GetSwitchToHWND();
    fn CloseFile();
}
impl ::windows::core::RuntimeName for IFileIsInUse {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFileIsInUse";
}
impl IFileIsInUseVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileIsInUseImpl, const OFFSET: isize>() -> IFileIsInUseVtbl {
        unsafe extern "system" fn GetAppName<Impl: IFileIsInUseImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszname: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAppName(::core::mem::transmute_copy(&ppszname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetUsage<Impl: IFileIsInUseImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfut: *mut FILE_USAGE_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetUsage(::core::mem::transmute_copy(&pfut)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCapabilities<Impl: IFileIsInUseImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcapflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCapabilities(::core::mem::transmute_copy(&pdwcapflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSwitchToHWND<Impl: IFileIsInUseImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSwitchToHWND(::core::mem::transmute_copy(&phwnd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CloseFile<Impl: IFileIsInUseImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CloseFile() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFileIsInUse>, ::windows::core::GetTrustLevel, GetAppName::<Impl, OFFSET>, GetUsage::<Impl, OFFSET>, GetCapabilities::<Impl, OFFSET>, GetSwitchToHWND::<Impl, OFFSET>, CloseFile::<Impl, OFFSET>)
    }
}
pub trait IFileOpenDialogImpl: Sized + IFileDialogImpl + IModalWindowImpl {
    fn GetResults();
    fn GetSelectedItems();
}
impl ::windows::core::RuntimeName for IFileOpenDialog {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFileOpenDialog";
}
impl IFileOpenDialogVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileOpenDialogImpl, const OFFSET: isize>() -> IFileOpenDialogVtbl {
        unsafe extern "system" fn GetResults<Impl: IFileOpenDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetResults(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSelectedItems<Impl: IFileOpenDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsai: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSelectedItems(::core::mem::transmute_copy(&ppsai)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFileOpenDialog>, ::windows::core::GetTrustLevel, GetResults::<Impl, OFFSET>, GetSelectedItems::<Impl, OFFSET>)
    }
}
pub trait IFileOperationImpl: Sized {
    fn Advise();
    fn Unadvise();
    fn SetOperationFlags();
    fn SetProgressMessage();
    fn SetProgressDialog();
    fn SetProperties();
    fn SetOwnerWindow();
    fn ApplyPropertiesToItem();
    fn ApplyPropertiesToItems();
    fn RenameItem();
    fn RenameItems();
    fn MoveItem();
    fn MoveItems();
    fn CopyItem();
    fn CopyItems();
    fn DeleteItem();
    fn DeleteItems();
    fn NewItem();
    fn PerformOperations();
    fn GetAnyOperationsAborted();
}
impl ::windows::core::RuntimeName for IFileOperation {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFileOperation";
}
impl IFileOperationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileOperationImpl, const OFFSET: isize>() -> IFileOperationVtbl {
        unsafe extern "system" fn Advise<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfops: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Advise(&*(&pfops as *const <IFileOperationProgressSink as ::windows::core::Abi>::Abi as *const <IFileOperationProgressSink as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Unadvise<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Unadvise(dwcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOperationFlags<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwoperationflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetOperationFlags(dwoperationflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProgressMessage<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszmessage: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetProgressMessage(&*(&pszmessage as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProgressDialog<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, popd: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetProgressDialog(&*(&popd as *const <IOperationsProgressDialog as ::windows::core::Abi>::Abi as *const <IOperationsProgressDialog as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProperties<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pproparray: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetProperties(&*(&pproparray as *const <PropertiesSystem::IPropertyChangeArray as ::windows::core::Abi>::Abi as *const <PropertiesSystem::IPropertyChangeArray as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOwnerWindow<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetOwnerWindow(&*(&hwndowner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ApplyPropertiesToItem<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiitem: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ApplyPropertiesToItem(&*(&psiitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ApplyPropertiesToItems<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkitems: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ApplyPropertiesToItems(&*(&punkitems as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RenameItem<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiitem: ::windows::core::RawPtr, psznewname: super::super::Foundation::PWSTR, pfopsitem: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RenameItem(&*(&psiitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psznewname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pfopsitem as *const <IFileOperationProgressSink as ::windows::core::Abi>::Abi as *const <IFileOperationProgressSink as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RenameItems<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkitems: *mut ::core::ffi::c_void, psznewname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RenameItems(&*(&punkitems as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&psznewname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MoveItem<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiitem: ::windows::core::RawPtr, psidestinationfolder: ::windows::core::RawPtr, psznewname: super::super::Foundation::PWSTR, pfopsitem: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MoveItem(
                &*(&psiitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&psidestinationfolder as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&psznewname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pfopsitem as *const <IFileOperationProgressSink as ::windows::core::Abi>::Abi as *const <IFileOperationProgressSink as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MoveItems<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkitems: *mut ::core::ffi::c_void, psidestinationfolder: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MoveItems(&*(&punkitems as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&psidestinationfolder as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CopyItem<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiitem: ::windows::core::RawPtr, psidestinationfolder: ::windows::core::RawPtr, pszcopyname: super::super::Foundation::PWSTR, pfopsitem: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CopyItem(
                &*(&psiitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&psidestinationfolder as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&pszcopyname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pfopsitem as *const <IFileOperationProgressSink as ::windows::core::Abi>::Abi as *const <IFileOperationProgressSink as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CopyItems<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkitems: *mut ::core::ffi::c_void, psidestinationfolder: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CopyItems(&*(&punkitems as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&psidestinationfolder as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DeleteItem<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiitem: ::windows::core::RawPtr, pfopsitem: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DeleteItem(&*(&psiitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&pfopsitem as *const <IFileOperationProgressSink as ::windows::core::Abi>::Abi as *const <IFileOperationProgressSink as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DeleteItems<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkitems: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DeleteItems(&*(&punkitems as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NewItem<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psidestinationfolder: ::windows::core::RawPtr, dwfileattributes: u32, pszname: super::super::Foundation::PWSTR, psztemplatename: super::super::Foundation::PWSTR, pfopsitem: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).NewItem(
                &*(&psidestinationfolder as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                dwfileattributes,
                &*(&pszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&psztemplatename as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pfopsitem as *const <IFileOperationProgressSink as ::windows::core::Abi>::Abi as *const <IFileOperationProgressSink as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PerformOperations<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PerformOperations() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAnyOperationsAborted<Impl: IFileOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfanyoperationsaborted: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAnyOperationsAborted(::core::mem::transmute_copy(&pfanyoperationsaborted)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IFileOperation>,
            ::windows::core::GetTrustLevel,
            Advise::<Impl, OFFSET>,
            Unadvise::<Impl, OFFSET>,
            SetOperationFlags::<Impl, OFFSET>,
            SetProgressMessage::<Impl, OFFSET>,
            SetProgressDialog::<Impl, OFFSET>,
            SetProperties::<Impl, OFFSET>,
            SetOwnerWindow::<Impl, OFFSET>,
            ApplyPropertiesToItem::<Impl, OFFSET>,
            ApplyPropertiesToItems::<Impl, OFFSET>,
            RenameItem::<Impl, OFFSET>,
            RenameItems::<Impl, OFFSET>,
            MoveItem::<Impl, OFFSET>,
            MoveItems::<Impl, OFFSET>,
            CopyItem::<Impl, OFFSET>,
            CopyItems::<Impl, OFFSET>,
            DeleteItem::<Impl, OFFSET>,
            DeleteItems::<Impl, OFFSET>,
            NewItem::<Impl, OFFSET>,
            PerformOperations::<Impl, OFFSET>,
            GetAnyOperationsAborted::<Impl, OFFSET>,
        )
    }
}
pub trait IFileOperation2Impl: Sized + IFileOperationImpl {
    fn SetOperationFlags2();
}
impl ::windows::core::RuntimeName for IFileOperation2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFileOperation2";
}
impl IFileOperation2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileOperation2Impl, const OFFSET: isize>() -> IFileOperation2Vtbl {
        unsafe extern "system" fn SetOperationFlags2<Impl: IFileOperation2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, operationflags2: FILE_OPERATION_FLAGS2) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetOperationFlags2(operationflags2) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFileOperation2>, ::windows::core::GetTrustLevel, SetOperationFlags2::<Impl, OFFSET>)
    }
}
pub trait IFileOperationProgressSinkImpl: Sized {
    fn StartOperations();
    fn FinishOperations();
    fn PreRenameItem();
    fn PostRenameItem();
    fn PreMoveItem();
    fn PostMoveItem();
    fn PreCopyItem();
    fn PostCopyItem();
    fn PreDeleteItem();
    fn PostDeleteItem();
    fn PreNewItem();
    fn PostNewItem();
    fn UpdateProgress();
    fn ResetTimer();
    fn PauseTimer();
    fn ResumeTimer();
}
impl ::windows::core::RuntimeName for IFileOperationProgressSink {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFileOperationProgressSink";
}
impl IFileOperationProgressSinkVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>() -> IFileOperationProgressSinkVtbl {
        unsafe extern "system" fn StartOperations<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartOperations() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FinishOperations<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hrresult: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FinishOperations(hrresult) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PreRenameItem<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: ::windows::core::RawPtr, psznewname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PreRenameItem(dwflags, &*(&psiitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psznewname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PostRenameItem<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: ::windows::core::RawPtr, psznewname: super::super::Foundation::PWSTR, hrrename: ::windows::core::HRESULT, psinewlycreated: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PostRenameItem(dwflags, &*(&psiitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psznewname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), hrrename, &*(&psinewlycreated as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PreMoveItem<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: ::windows::core::RawPtr, psidestinationfolder: ::windows::core::RawPtr, psznewname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PreMoveItem(dwflags, &*(&psiitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psidestinationfolder as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psznewname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PostMoveItem<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: ::windows::core::RawPtr, psidestinationfolder: ::windows::core::RawPtr, psznewname: super::super::Foundation::PWSTR, hrmove: ::windows::core::HRESULT, psinewlycreated: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PostMoveItem(
                dwflags,
                &*(&psiitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&psidestinationfolder as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&psznewname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                hrmove,
                &*(&psinewlycreated as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PreCopyItem<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: ::windows::core::RawPtr, psidestinationfolder: ::windows::core::RawPtr, psznewname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PreCopyItem(dwflags, &*(&psiitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psidestinationfolder as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psznewname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PostCopyItem<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: ::windows::core::RawPtr, psidestinationfolder: ::windows::core::RawPtr, psznewname: super::super::Foundation::PWSTR, hrcopy: ::windows::core::HRESULT, psinewlycreated: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PostCopyItem(
                dwflags,
                &*(&psiitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&psidestinationfolder as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&psznewname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                hrcopy,
                &*(&psinewlycreated as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PreDeleteItem<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PreDeleteItem(dwflags, &*(&psiitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PostDeleteItem<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: ::windows::core::RawPtr, hrdelete: ::windows::core::HRESULT, psinewlycreated: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PostDeleteItem(dwflags, &*(&psiitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), hrdelete, &*(&psinewlycreated as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PreNewItem<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, psidestinationfolder: ::windows::core::RawPtr, psznewname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PreNewItem(dwflags, &*(&psidestinationfolder as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psznewname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PostNewItem<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, psidestinationfolder: ::windows::core::RawPtr, psznewname: super::super::Foundation::PWSTR, psztemplatename: super::super::Foundation::PWSTR, dwfileattributes: u32, hrnew: ::windows::core::HRESULT, psinewitem: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PostNewItem(
                dwflags,
                &*(&psidestinationfolder as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&psznewname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&psztemplatename as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwfileattributes,
                hrnew,
                &*(&psinewitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateProgress<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, iworktotal: u32, iworksofar: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateProgress(iworktotal, iworksofar) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetTimer<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ResetTimer() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PauseTimer<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PauseTimer() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResumeTimer<Impl: IFileOperationProgressSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ResumeTimer() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IFileOperationProgressSink>,
            ::windows::core::GetTrustLevel,
            StartOperations::<Impl, OFFSET>,
            FinishOperations::<Impl, OFFSET>,
            PreRenameItem::<Impl, OFFSET>,
            PostRenameItem::<Impl, OFFSET>,
            PreMoveItem::<Impl, OFFSET>,
            PostMoveItem::<Impl, OFFSET>,
            PreCopyItem::<Impl, OFFSET>,
            PostCopyItem::<Impl, OFFSET>,
            PreDeleteItem::<Impl, OFFSET>,
            PostDeleteItem::<Impl, OFFSET>,
            PreNewItem::<Impl, OFFSET>,
            PostNewItem::<Impl, OFFSET>,
            UpdateProgress::<Impl, OFFSET>,
            ResetTimer::<Impl, OFFSET>,
            PauseTimer::<Impl, OFFSET>,
            ResumeTimer::<Impl, OFFSET>,
        )
    }
}
pub trait IFileSaveDialogImpl: Sized + IFileDialogImpl + IModalWindowImpl {
    fn SetSaveAsItem();
    fn SetProperties();
    fn SetCollectedProperties();
    fn GetProperties();
    fn ApplyProperties();
}
impl ::windows::core::RuntimeName for IFileSaveDialog {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFileSaveDialog";
}
impl IFileSaveDialogVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileSaveDialogImpl, const OFFSET: isize>() -> IFileSaveDialogVtbl {
        unsafe extern "system" fn SetSaveAsItem<Impl: IFileSaveDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetSaveAsItem(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProperties<Impl: IFileSaveDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstore: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetProperties(&*(&pstore as *const <PropertiesSystem::IPropertyStore as ::windows::core::Abi>::Abi as *const <PropertiesSystem::IPropertyStore as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCollectedProperties<Impl: IFileSaveDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plist: ::windows::core::RawPtr, fappenddefault: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCollectedProperties(&*(&plist as *const <PropertiesSystem::IPropertyDescriptionList as ::windows::core::Abi>::Abi as *const <PropertiesSystem::IPropertyDescriptionList as ::windows::core::DefaultType>::DefaultType), &*(&fappenddefault as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProperties<Impl: IFileSaveDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppstore: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProperties(::core::mem::transmute_copy(&ppstore)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ApplyProperties<Impl: IFileSaveDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, pstore: ::windows::core::RawPtr, hwnd: super::super::Foundation::HWND, psink: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ApplyProperties(
                &*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&pstore as *const <PropertiesSystem::IPropertyStore as ::windows::core::Abi>::Abi as *const <PropertiesSystem::IPropertyStore as ::windows::core::DefaultType>::DefaultType),
                &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&psink as *const <IFileOperationProgressSink as ::windows::core::Abi>::Abi as *const <IFileOperationProgressSink as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFileSaveDialog>, ::windows::core::GetTrustLevel, SetSaveAsItem::<Impl, OFFSET>, SetProperties::<Impl, OFFSET>, SetCollectedProperties::<Impl, OFFSET>, GetProperties::<Impl, OFFSET>, ApplyProperties::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IFileSearchBandImpl: Sized + IDispatchImpl {
    fn SetFocus();
    fn SetSearchParameters();
    fn SearchID();
    fn Scope();
    fn QueryFile();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IFileSearchBand {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFileSearchBand";
}
#[cfg(feature = "Win32_System_Com")]
impl IFileSearchBandVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileSearchBandImpl, const OFFSET: isize>() -> IFileSearchBandVtbl {
        unsafe extern "system" fn SetFocus<Impl: IFileSearchBandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFocus() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSearchParameters<Impl: IFileSearchBandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrsearchid: *const super::super::Foundation::BSTR, bnavtoresults: i16, pvarscope: *const super::super::System::Com::VARIANT, pvarqueryfile: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetSearchParameters(
                &*(&pbstrsearchid as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                bnavtoresults,
                &*(&pvarscope as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&pvarqueryfile as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SearchID<Impl: IFileSearchBandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrsearchid: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SearchID(::core::mem::transmute_copy(&pbstrsearchid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Scope<Impl: IFileSearchBandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvarscope: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Scope(::core::mem::transmute_copy(&pvarscope)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryFile<Impl: IFileSearchBandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvarfile: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryFile(::core::mem::transmute_copy(&pvarfile)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFileSearchBand>, ::windows::core::GetTrustLevel, SetFocus::<Impl, OFFSET>, SetSearchParameters::<Impl, OFFSET>, SearchID::<Impl, OFFSET>, Scope::<Impl, OFFSET>, QueryFile::<Impl, OFFSET>)
    }
}
pub trait IFileSyncMergeHandlerImpl: Sized {
    fn Merge();
    fn ShowResolveConflictUIAsync();
}
impl ::windows::core::RuntimeName for IFileSyncMergeHandler {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFileSyncMergeHandler";
}
impl IFileSyncMergeHandlerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileSyncMergeHandlerImpl, const OFFSET: isize>() -> IFileSyncMergeHandlerVtbl {
        unsafe extern "system" fn Merge<Impl: IFileSyncMergeHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, localfilepath: super::super::Foundation::PWSTR, serverfilepath: super::super::Foundation::PWSTR, updatestatus: *mut MERGE_UPDATE_STATUS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Merge(&*(&localfilepath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&serverfilepath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&updatestatus)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShowResolveConflictUIAsync<Impl: IFileSyncMergeHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, localfilepath: super::super::Foundation::PWSTR, monitortodisplayon: super::super::Graphics::Gdi::HMONITOR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowResolveConflictUIAsync(&*(&localfilepath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&monitortodisplayon as *const <super::super::Graphics::Gdi::HMONITOR as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::HMONITOR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFileSyncMergeHandler>, ::windows::core::GetTrustLevel, Merge::<Impl, OFFSET>, ShowResolveConflictUIAsync::<Impl, OFFSET>)
    }
}
pub trait IFileSystemBindDataImpl: Sized {
    fn SetFindData();
    fn GetFindData();
}
impl ::windows::core::RuntimeName for IFileSystemBindData {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFileSystemBindData";
}
impl IFileSystemBindDataVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileSystemBindDataImpl, const OFFSET: isize>() -> IFileSystemBindDataVtbl {
        unsafe extern "system" fn SetFindData<Impl: IFileSystemBindDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfd: *const super::super::Storage::FileSystem::WIN32_FIND_DATAW) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFindData(&*(&pfd as *const <super::super::Storage::FileSystem::WIN32_FIND_DATAW as ::windows::core::Abi>::Abi as *const <super::super::Storage::FileSystem::WIN32_FIND_DATAW as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFindData<Impl: IFileSystemBindDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAW) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFindData(::core::mem::transmute_copy(&pfd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFileSystemBindData>, ::windows::core::GetTrustLevel, SetFindData::<Impl, OFFSET>, GetFindData::<Impl, OFFSET>)
    }
}
pub trait IFileSystemBindData2Impl: Sized + IFileSystemBindDataImpl {
    fn SetFileID();
    fn GetFileID();
    fn SetJunctionCLSID();
    fn GetJunctionCLSID();
}
impl ::windows::core::RuntimeName for IFileSystemBindData2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFileSystemBindData2";
}
impl IFileSystemBindData2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileSystemBindData2Impl, const OFFSET: isize>() -> IFileSystemBindData2Vtbl {
        unsafe extern "system" fn SetFileID<Impl: IFileSystemBindData2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lifileid: i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFileID(lifileid) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFileID<Impl: IFileSystemBindData2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plifileid: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFileID(::core::mem::transmute_copy(&plifileid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetJunctionCLSID<Impl: IFileSystemBindData2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetJunctionCLSID(&*(&clsid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetJunctionCLSID<Impl: IFileSystemBindData2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pclsid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetJunctionCLSID(::core::mem::transmute_copy(&pclsid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFileSystemBindData2>, ::windows::core::GetTrustLevel, SetFileID::<Impl, OFFSET>, GetFileID::<Impl, OFFSET>, SetJunctionCLSID::<Impl, OFFSET>, GetJunctionCLSID::<Impl, OFFSET>)
    }
}
pub trait IFolderBandPrivImpl: Sized {
    fn SetCascade();
    fn SetAccelerators();
    fn SetNoIcons();
    fn SetNoText();
}
impl ::windows::core::RuntimeName for IFolderBandPriv {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFolderBandPriv";
}
impl IFolderBandPrivVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFolderBandPrivImpl, const OFFSET: isize>() -> IFolderBandPrivVtbl {
        unsafe extern "system" fn SetCascade<Impl: IFolderBandPrivImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fcascade: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCascade(&*(&fcascade as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAccelerators<Impl: IFolderBandPrivImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, faccelerators: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAccelerators(&*(&faccelerators as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNoIcons<Impl: IFolderBandPrivImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fnoicons: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetNoIcons(&*(&fnoicons as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNoText<Impl: IFolderBandPrivImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fnotext: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetNoText(&*(&fnotext as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFolderBandPriv>, ::windows::core::GetTrustLevel, SetCascade::<Impl, OFFSET>, SetAccelerators::<Impl, OFFSET>, SetNoIcons::<Impl, OFFSET>, SetNoText::<Impl, OFFSET>)
    }
}
pub trait IFolderFilterImpl: Sized {
    fn ShouldShow();
    fn GetEnumFlags();
}
impl ::windows::core::RuntimeName for IFolderFilter {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFolderFilter";
}
impl IFolderFilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFolderFilterImpl, const OFFSET: isize>() -> IFolderFilterVtbl {
        unsafe extern "system" fn ShouldShow<Impl: IFolderFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psf: ::windows::core::RawPtr, pidlfolder: *const Common::ITEMIDLIST, pidlitem: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShouldShow(&*(&psf as *const <IShellFolder as ::windows::core::Abi>::Abi as *const <IShellFolder as ::windows::core::DefaultType>::DefaultType), &*(&pidlfolder as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), &*(&pidlitem as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEnumFlags<Impl: IFolderFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psf: ::windows::core::RawPtr, pidlfolder: *const Common::ITEMIDLIST, phwnd: *mut super::super::Foundation::HWND, pgrfflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEnumFlags(&*(&psf as *const <IShellFolder as ::windows::core::Abi>::Abi as *const <IShellFolder as ::windows::core::DefaultType>::DefaultType), &*(&pidlfolder as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&phwnd), pgrfflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFolderFilter>, ::windows::core::GetTrustLevel, ShouldShow::<Impl, OFFSET>, GetEnumFlags::<Impl, OFFSET>)
    }
}
pub trait IFolderFilterSiteImpl: Sized {
    fn SetFilter();
}
impl ::windows::core::RuntimeName for IFolderFilterSite {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFolderFilterSite";
}
impl IFolderFilterSiteVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFolderFilterSiteImpl, const OFFSET: isize>() -> IFolderFilterSiteVtbl {
        unsafe extern "system" fn SetFilter<Impl: IFolderFilterSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFilter(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFolderFilterSite>, ::windows::core::GetTrustLevel, SetFilter::<Impl, OFFSET>)
    }
}
pub trait IFolderViewImpl: Sized {
    fn GetCurrentViewMode();
    fn SetCurrentViewMode();
    fn GetFolder();
    fn Item();
    fn ItemCount();
    fn Items();
    fn GetSelectionMarkedItem();
    fn GetFocusedItem();
    fn GetItemPosition();
    fn GetSpacing();
    fn GetDefaultSpacing();
    fn GetAutoArrange();
    fn SelectItem();
    fn SelectAndPositionItems();
}
impl ::windows::core::RuntimeName for IFolderView {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFolderView";
}
impl IFolderViewVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFolderViewImpl, const OFFSET: isize>() -> IFolderViewVtbl {
        unsafe extern "system" fn GetCurrentViewMode<Impl: IFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pviewmode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentViewMode(::core::mem::transmute_copy(&pviewmode)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentViewMode<Impl: IFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, viewmode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCurrentViewMode(viewmode) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolder<Impl: IFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolder(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Item<Impl: IFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, iitemindex: i32, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Item(iitemindex, ::core::mem::transmute_copy(&ppidl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ItemCount<Impl: IFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uflags: u32, pcitems: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ItemCount(uflags, ::core::mem::transmute_copy(&pcitems)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Items<Impl: IFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uflags: u32, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Items(uflags, &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSelectionMarkedItem<Impl: IFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, piitem: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSelectionMarkedItem(::core::mem::transmute_copy(&piitem)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFocusedItem<Impl: IFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, piitem: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFocusedItem(::core::mem::transmute_copy(&piitem)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemPosition<Impl: IFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, ppt: *mut super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemPosition(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppt)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpacing<Impl: IFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppt: *mut super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSpacing(&*(&ppt as *const <super::super::Foundation::POINT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDefaultSpacing<Impl: IFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppt: *mut super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDefaultSpacing(::core::mem::transmute_copy(&ppt)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAutoArrange<Impl: IFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAutoArrange() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SelectItem<Impl: IFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, iitem: i32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SelectItem(iitem, dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SelectAndPositionItems<Impl: IFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cidl: u32, apidl: *const *const Common::ITEMIDLIST, apt: *const super::super::Foundation::POINT, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SelectAndPositionItems(cidl, &*(&apidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), &*(&apt as *const <super::super::Foundation::POINT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINT as ::windows::core::DefaultType>::DefaultType), dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IFolderView>,
            ::windows::core::GetTrustLevel,
            GetCurrentViewMode::<Impl, OFFSET>,
            SetCurrentViewMode::<Impl, OFFSET>,
            GetFolder::<Impl, OFFSET>,
            Item::<Impl, OFFSET>,
            ItemCount::<Impl, OFFSET>,
            Items::<Impl, OFFSET>,
            GetSelectionMarkedItem::<Impl, OFFSET>,
            GetFocusedItem::<Impl, OFFSET>,
            GetItemPosition::<Impl, OFFSET>,
            GetSpacing::<Impl, OFFSET>,
            GetDefaultSpacing::<Impl, OFFSET>,
            GetAutoArrange::<Impl, OFFSET>,
            SelectItem::<Impl, OFFSET>,
            SelectAndPositionItems::<Impl, OFFSET>,
        )
    }
}
pub trait IFolderView2Impl: Sized + IFolderViewImpl {
    fn SetGroupBy();
    fn GetGroupBy();
    fn SetViewProperty();
    fn GetViewProperty();
    fn SetTileViewProperties();
    fn SetExtendedTileViewProperties();
    fn SetText();
    fn SetCurrentFolderFlags();
    fn GetCurrentFolderFlags();
    fn GetSortColumnCount();
    fn SetSortColumns();
    fn GetSortColumns();
    fn GetItem();
    fn GetVisibleItem();
    fn GetSelectedItem();
    fn GetSelection();
    fn GetSelectionState();
    fn InvokeVerbOnSelection();
    fn SetViewModeAndIconSize();
    fn GetViewModeAndIconSize();
    fn SetGroupSubsetCount();
    fn GetGroupSubsetCount();
    fn SetRedraw();
    fn IsMoveInSameFolder();
    fn DoRename();
}
impl ::windows::core::RuntimeName for IFolderView2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFolderView2";
}
impl IFolderView2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFolderView2Impl, const OFFSET: isize>() -> IFolderView2Vtbl {
        unsafe extern "system" fn SetGroupBy<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, fascending: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetGroupBy(&*(&key as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), &*(&fascending as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetGroupBy<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pkey: *mut PropertiesSystem::PROPERTYKEY, pfascending: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetGroupBy(::core::mem::transmute_copy(&pkey), ::core::mem::transmute_copy(&pfascending)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetViewProperty<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, propkey: *const PropertiesSystem::PROPERTYKEY, propvar: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetViewProperty(
                &*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType),
                &*(&propkey as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType),
                &*(&propvar as *const <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetViewProperty<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, propkey: *const PropertiesSystem::PROPERTYKEY, ppropvar: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetViewProperty(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), &*(&propkey as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppropvar)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTileViewProperties<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pszproplist: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTileViewProperties(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), &*(&pszproplist as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExtendedTileViewProperties<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pszproplist: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetExtendedTileViewProperties(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), &*(&pszproplist as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetText<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, itype: FVTEXTTYPE, pwsztext: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetText(itype, &*(&pwsztext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentFolderFlags<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwmask: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCurrentFolderFlags(dwmask, dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentFolderFlags<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentFolderFlags(::core::mem::transmute_copy(&pdwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSortColumnCount<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pccolumns: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSortColumnCount(::core::mem::transmute_copy(&pccolumns)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSortColumns<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rgsortcolumns: *const SORTCOLUMN, ccolumns: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetSortColumns(&*(&rgsortcolumns as *const <SORTCOLUMN as ::windows::core::Abi>::Abi as *const <SORTCOLUMN as ::windows::core::DefaultType>::DefaultType), ccolumns) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSortColumns<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rgsortcolumns: *mut SORTCOLUMN, ccolumns: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSortColumns(::core::mem::transmute_copy(&rgsortcolumns), ccolumns) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItem<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, iitem: i32, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItem(iitem, &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetVisibleItem<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, istart: i32, fprevious: super::super::Foundation::BOOL, piitem: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetVisibleItem(istart, &*(&fprevious as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&piitem)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSelectedItem<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, istart: i32, piitem: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSelectedItem(istart, ::core::mem::transmute_copy(&piitem)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSelection<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fnoneimpliesfolder: super::super::Foundation::BOOL, ppsia: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSelection(&*(&fnoneimpliesfolder as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppsia)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSelectionState<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSelectionState(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InvokeVerbOnSelection<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszverb: super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InvokeVerbOnSelection(&*(&pszverb as *const <super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetViewModeAndIconSize<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uviewmode: FOLDERVIEWMODE, iimagesize: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetViewModeAndIconSize(uviewmode, iimagesize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetViewModeAndIconSize<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, puviewmode: *mut FOLDERVIEWMODE, piimagesize: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetViewModeAndIconSize(::core::mem::transmute_copy(&puviewmode), ::core::mem::transmute_copy(&piimagesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetGroupSubsetCount<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cvisiblerows: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetGroupSubsetCount(cvisiblerows) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetGroupSubsetCount<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcvisiblerows: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetGroupSubsetCount(::core::mem::transmute_copy(&pcvisiblerows)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRedraw<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fredrawon: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetRedraw(&*(&fredrawon as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsMoveInSameFolder<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsMoveInSameFolder() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DoRename<Impl: IFolderView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DoRename() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IFolderView2>,
            ::windows::core::GetTrustLevel,
            SetGroupBy::<Impl, OFFSET>,
            GetGroupBy::<Impl, OFFSET>,
            SetViewProperty::<Impl, OFFSET>,
            GetViewProperty::<Impl, OFFSET>,
            SetTileViewProperties::<Impl, OFFSET>,
            SetExtendedTileViewProperties::<Impl, OFFSET>,
            SetText::<Impl, OFFSET>,
            SetCurrentFolderFlags::<Impl, OFFSET>,
            GetCurrentFolderFlags::<Impl, OFFSET>,
            GetSortColumnCount::<Impl, OFFSET>,
            SetSortColumns::<Impl, OFFSET>,
            GetSortColumns::<Impl, OFFSET>,
            GetItem::<Impl, OFFSET>,
            GetVisibleItem::<Impl, OFFSET>,
            GetSelectedItem::<Impl, OFFSET>,
            GetSelection::<Impl, OFFSET>,
            GetSelectionState::<Impl, OFFSET>,
            InvokeVerbOnSelection::<Impl, OFFSET>,
            SetViewModeAndIconSize::<Impl, OFFSET>,
            GetViewModeAndIconSize::<Impl, OFFSET>,
            SetGroupSubsetCount::<Impl, OFFSET>,
            GetGroupSubsetCount::<Impl, OFFSET>,
            SetRedraw::<Impl, OFFSET>,
            IsMoveInSameFolder::<Impl, OFFSET>,
            DoRename::<Impl, OFFSET>,
        )
    }
}
pub trait IFolderViewHostImpl: Sized {
    fn Initialize();
}
impl ::windows::core::RuntimeName for IFolderViewHost {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFolderViewHost";
}
impl IFolderViewHostVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFolderViewHostImpl, const OFFSET: isize>() -> IFolderViewHostVtbl {
        unsafe extern "system" fn Initialize<Impl: IFolderViewHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, pdo: ::windows::core::RawPtr, prc: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(
                &*(&hwndparent as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&pdo as *const <super::super::System::Com::IDataObject as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDataObject as ::windows::core::DefaultType>::DefaultType),
                &*(&prc as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFolderViewHost>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IFolderViewOCImpl: Sized + IDispatchImpl {
    fn SetFolderView();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IFolderViewOC {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFolderViewOC";
}
#[cfg(feature = "Win32_System_Com")]
impl IFolderViewOCVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFolderViewOCImpl, const OFFSET: isize>() -> IFolderViewOCVtbl {
        unsafe extern "system" fn SetFolderView<Impl: IFolderViewOCImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdisp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFolderView(&*(&pdisp as *const <super::super::System::Com::IDispatch as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDispatch as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFolderViewOC>, ::windows::core::GetTrustLevel, SetFolderView::<Impl, OFFSET>)
    }
}
pub trait IFolderViewOptionsImpl: Sized {
    fn SetFolderViewOptions();
    fn GetFolderViewOptions();
}
impl ::windows::core::RuntimeName for IFolderViewOptions {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFolderViewOptions";
}
impl IFolderViewOptionsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFolderViewOptionsImpl, const OFFSET: isize>() -> IFolderViewOptionsVtbl {
        unsafe extern "system" fn SetFolderViewOptions<Impl: IFolderViewOptionsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fvomask: FOLDERVIEWOPTIONS, fvoflags: FOLDERVIEWOPTIONS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFolderViewOptions(fvomask, fvoflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolderViewOptions<Impl: IFolderViewOptionsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfvoflags: *mut FOLDERVIEWOPTIONS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolderViewOptions(::core::mem::transmute_copy(&pfvoflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFolderViewOptions>, ::windows::core::GetTrustLevel, SetFolderViewOptions::<Impl, OFFSET>, GetFolderViewOptions::<Impl, OFFSET>)
    }
}
pub trait IFolderViewSettingsImpl: Sized {
    fn GetColumnPropertyList();
    fn GetGroupByProperty();
    fn GetViewMode();
    fn GetIconSize();
    fn GetFolderFlags();
    fn GetSortColumns();
    fn GetGroupSubsetCount();
}
impl ::windows::core::RuntimeName for IFolderViewSettings {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFolderViewSettings";
}
impl IFolderViewSettingsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFolderViewSettingsImpl, const OFFSET: isize>() -> IFolderViewSettingsVtbl {
        unsafe extern "system" fn GetColumnPropertyList<Impl: IFolderViewSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetColumnPropertyList(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetGroupByProperty<Impl: IFolderViewSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pkey: *mut PropertiesSystem::PROPERTYKEY, pfgroupascending: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetGroupByProperty(::core::mem::transmute_copy(&pkey), ::core::mem::transmute_copy(&pfgroupascending)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetViewMode<Impl: IFolderViewSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plvm: *mut FOLDERLOGICALVIEWMODE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetViewMode(::core::mem::transmute_copy(&plvm)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIconSize<Impl: IFolderViewSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, puiconsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIconSize(::core::mem::transmute_copy(&puiconsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolderFlags<Impl: IFolderViewSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfoldermask: *mut FOLDERFLAGS, pfolderflags: *mut FOLDERFLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolderFlags(::core::mem::transmute_copy(&pfoldermask), ::core::mem::transmute_copy(&pfolderflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSortColumns<Impl: IFolderViewSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rgsortcolumns: *mut SORTCOLUMN, ccolumnsin: u32, pccolumnsout: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSortColumns(::core::mem::transmute_copy(&rgsortcolumns), ccolumnsin, ::core::mem::transmute_copy(&pccolumnsout)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetGroupSubsetCount<Impl: IFolderViewSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcvisiblerows: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetGroupSubsetCount(::core::mem::transmute_copy(&pcvisiblerows)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IFolderViewSettings>,
            ::windows::core::GetTrustLevel,
            GetColumnPropertyList::<Impl, OFFSET>,
            GetGroupByProperty::<Impl, OFFSET>,
            GetViewMode::<Impl, OFFSET>,
            GetIconSize::<Impl, OFFSET>,
            GetFolderFlags::<Impl, OFFSET>,
            GetSortColumns::<Impl, OFFSET>,
            GetGroupSubsetCount::<Impl, OFFSET>,
        )
    }
}
pub trait IFrameworkInputPaneImpl: Sized {
    fn Advise();
    fn AdviseWithHWND();
    fn Unadvise();
    fn Location();
}
impl ::windows::core::RuntimeName for IFrameworkInputPane {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFrameworkInputPane";
}
impl IFrameworkInputPaneVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFrameworkInputPaneImpl, const OFFSET: isize>() -> IFrameworkInputPaneVtbl {
        unsafe extern "system" fn Advise<Impl: IFrameworkInputPaneImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwindow: *mut ::core::ffi::c_void, phandler: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Advise(&*(&pwindow as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&phandler as *const <IFrameworkInputPaneHandler as ::windows::core::Abi>::Abi as *const <IFrameworkInputPaneHandler as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AdviseWithHWND<Impl: IFrameworkInputPaneImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, phandler: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AdviseWithHWND(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&phandler as *const <IFrameworkInputPaneHandler as ::windows::core::Abi>::Abi as *const <IFrameworkInputPaneHandler as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Unadvise<Impl: IFrameworkInputPaneImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Unadvise(dwcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Location<Impl: IFrameworkInputPaneImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prcinputpanescreenlocation: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Location(::core::mem::transmute_copy(&prcinputpanescreenlocation)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFrameworkInputPane>, ::windows::core::GetTrustLevel, Advise::<Impl, OFFSET>, AdviseWithHWND::<Impl, OFFSET>, Unadvise::<Impl, OFFSET>, Location::<Impl, OFFSET>)
    }
}
pub trait IFrameworkInputPaneHandlerImpl: Sized {
    fn Showing();
    fn Hiding();
}
impl ::windows::core::RuntimeName for IFrameworkInputPaneHandler {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IFrameworkInputPaneHandler";
}
impl IFrameworkInputPaneHandlerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFrameworkInputPaneHandlerImpl, const OFFSET: isize>() -> IFrameworkInputPaneHandlerVtbl {
        unsafe extern "system" fn Showing<Impl: IFrameworkInputPaneHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prcinputpanescreenlocation: *const super::super::Foundation::RECT, fensurefocusedelementinview: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Showing(&*(&prcinputpanescreenlocation as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType), &*(&fensurefocusedelementinview as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Hiding<Impl: IFrameworkInputPaneHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fensurefocusedelementinview: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Hiding(&*(&fensurefocusedelementinview as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IFrameworkInputPaneHandler>, ::windows::core::GetTrustLevel, Showing::<Impl, OFFSET>, Hiding::<Impl, OFFSET>)
    }
}
pub trait IGetServiceIdsImpl: Sized {
    fn GetServiceIds();
}
impl ::windows::core::RuntimeName for IGetServiceIds {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IGetServiceIds";
}
impl IGetServiceIdsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IGetServiceIdsImpl, const OFFSET: isize>() -> IGetServiceIdsVtbl {
        unsafe extern "system" fn GetServiceIds<Impl: IGetServiceIdsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, serviceidcount: *mut u32, serviceids: *mut *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetServiceIds(::core::mem::transmute_copy(&serviceidcount), ::core::mem::transmute_copy(&serviceids)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IGetServiceIds>, ::windows::core::GetTrustLevel, GetServiceIds::<Impl, OFFSET>)
    }
}
pub trait IHWEventHandlerImpl: Sized {
    fn Initialize();
    fn HandleEvent();
    fn HandleEventWithContent();
}
impl ::windows::core::RuntimeName for IHWEventHandler {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IHWEventHandler";
}
impl IHWEventHandlerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IHWEventHandlerImpl, const OFFSET: isize>() -> IHWEventHandlerVtbl {
        unsafe extern "system" fn Initialize<Impl: IHWEventHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszparams: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(&*(&pszparams as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HandleEvent<Impl: IHWEventHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdeviceid: super::super::Foundation::PWSTR, pszaltdeviceid: super::super::Foundation::PWSTR, pszeventtype: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HandleEvent(
                &*(&pszdeviceid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszaltdeviceid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszeventtype as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HandleEventWithContent<Impl: IHWEventHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdeviceid: super::super::Foundation::PWSTR, pszaltdeviceid: super::super::Foundation::PWSTR, pszeventtype: super::super::Foundation::PWSTR, pszcontenttypehandler: super::super::Foundation::PWSTR, pdataobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HandleEventWithContent(
                &*(&pszdeviceid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszaltdeviceid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszeventtype as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszcontenttypehandler as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pdataobject as *const <super::super::System::Com::IDataObject as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDataObject as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IHWEventHandler>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>, HandleEvent::<Impl, OFFSET>, HandleEventWithContent::<Impl, OFFSET>)
    }
}
pub trait IHWEventHandler2Impl: Sized + IHWEventHandlerImpl {
    fn HandleEventWithHWND();
}
impl ::windows::core::RuntimeName for IHWEventHandler2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IHWEventHandler2";
}
impl IHWEventHandler2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IHWEventHandler2Impl, const OFFSET: isize>() -> IHWEventHandler2Vtbl {
        unsafe extern "system" fn HandleEventWithHWND<Impl: IHWEventHandler2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdeviceid: super::super::Foundation::PWSTR, pszaltdeviceid: super::super::Foundation::PWSTR, pszeventtype: super::super::Foundation::PWSTR, hwndowner: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HandleEventWithHWND(
                &*(&pszdeviceid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszaltdeviceid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszeventtype as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&hwndowner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IHWEventHandler2>, ::windows::core::GetTrustLevel, HandleEventWithHWND::<Impl, OFFSET>)
    }
}
pub trait IHandlerActivationHostImpl: Sized {
    fn BeforeCoCreateInstance();
    fn BeforeCreateProcess();
}
impl ::windows::core::RuntimeName for IHandlerActivationHost {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IHandlerActivationHost";
}
impl IHandlerActivationHostVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IHandlerActivationHostImpl, const OFFSET: isize>() -> IHandlerActivationHostVtbl {
        unsafe extern "system" fn BeforeCoCreateInstance<Impl: IHandlerActivationHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsidhandler: *const ::windows::core::GUID, itemsbeingactivated: ::windows::core::RawPtr, handlerinfo: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BeforeCoCreateInstance(&*(&clsidhandler as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&itemsbeingactivated as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType), &*(&handlerinfo as *const <IHandlerInfo as ::windows::core::Abi>::Abi as *const <IHandlerInfo as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeforeCreateProcess<Impl: IHandlerActivationHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, applicationpath: super::super::Foundation::PWSTR, commandline: super::super::Foundation::PWSTR, handlerinfo: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BeforeCreateProcess(
                &*(&applicationpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&commandline as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&handlerinfo as *const <IHandlerInfo as ::windows::core::Abi>::Abi as *const <IHandlerInfo as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IHandlerActivationHost>, ::windows::core::GetTrustLevel, BeforeCoCreateInstance::<Impl, OFFSET>, BeforeCreateProcess::<Impl, OFFSET>)
    }
}
pub trait IHandlerInfoImpl: Sized {
    fn GetApplicationDisplayName();
    fn GetApplicationPublisher();
    fn GetApplicationIconReference();
}
impl ::windows::core::RuntimeName for IHandlerInfo {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IHandlerInfo";
}
impl IHandlerInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IHandlerInfoImpl, const OFFSET: isize>() -> IHandlerInfoVtbl {
        unsafe extern "system" fn GetApplicationDisplayName<Impl: IHandlerInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetApplicationDisplayName(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetApplicationPublisher<Impl: IHandlerInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetApplicationPublisher(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetApplicationIconReference<Impl: IHandlerInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetApplicationIconReference(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IHandlerInfo>, ::windows::core::GetTrustLevel, GetApplicationDisplayName::<Impl, OFFSET>, GetApplicationPublisher::<Impl, OFFSET>, GetApplicationIconReference::<Impl, OFFSET>)
    }
}
pub trait IHandlerInfo2Impl: Sized + IHandlerInfoImpl {
    fn GetApplicationId();
}
impl ::windows::core::RuntimeName for IHandlerInfo2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IHandlerInfo2";
}
impl IHandlerInfo2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IHandlerInfo2Impl, const OFFSET: isize>() -> IHandlerInfo2Vtbl {
        unsafe extern "system" fn GetApplicationId<Impl: IHandlerInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetApplicationId(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IHandlerInfo2>, ::windows::core::GetTrustLevel, GetApplicationId::<Impl, OFFSET>)
    }
}
pub trait IHlinkImpl: Sized {
    fn SetHlinkSite();
    fn GetHlinkSite();
    fn SetMonikerReference();
    fn GetMonikerReference();
    fn SetStringReference();
    fn GetStringReference();
    fn SetFriendlyName();
    fn GetFriendlyName();
    fn SetTargetFrameName();
    fn GetTargetFrameName();
    fn GetMiscStatus();
    fn Navigate();
    fn SetAdditionalParams();
    fn GetAdditionalParams();
}
impl ::windows::core::RuntimeName for IHlink {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IHlink";
}
impl IHlinkVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IHlinkImpl, const OFFSET: isize>() -> IHlinkVtbl {
        unsafe extern "system" fn SetHlinkSite<Impl: IHlinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pihlsite: ::windows::core::RawPtr, dwsitedata: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetHlinkSite(&*(&pihlsite as *const <IHlinkSite as ::windows::core::Abi>::Abi as *const <IHlinkSite as ::windows::core::DefaultType>::DefaultType), dwsitedata) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetHlinkSite<Impl: IHlinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppihlsite: *mut ::windows::core::RawPtr, pdwsitedata: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetHlinkSite(::core::mem::transmute_copy(&ppihlsite), ::core::mem::transmute_copy(&pdwsitedata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetMonikerReference<Impl: IHlinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, grfhlsetf: u32, pimktarget: ::windows::core::RawPtr, pwzlocation: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetMonikerReference(grfhlsetf, &*(&pimktarget as *const <super::super::System::Com::IMoniker as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IMoniker as ::windows::core::DefaultType>::DefaultType), &*(&pwzlocation as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMonikerReference<Impl: IHlinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwwhichref: u32, ppimktarget: *mut ::windows::core::RawPtr, ppwzlocation: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMonikerReference(dwwhichref, ::core::mem::transmute_copy(&ppimktarget), ::core::mem::transmute_copy(&ppwzlocation)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetStringReference<Impl: IHlinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, grfhlsetf: u32, pwztarget: super::super::Foundation::PWSTR, pwzlocation: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetStringReference(grfhlsetf, &*(&pwztarget as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pwzlocation as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStringReference<Impl: IHlinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwwhichref: u32, ppwztarget: *mut super::super::Foundation::PWSTR, ppwzlocation: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetStringReference(dwwhichref, ::core::mem::transmute_copy(&ppwztarget), ::core::mem::transmute_copy(&ppwzlocation)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFriendlyName<Impl: IHlinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwzfriendlyname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFriendlyName(&*(&pwzfriendlyname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFriendlyName<Impl: IHlinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, grfhlfnamef: u32, ppwzfriendlyname: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFriendlyName(grfhlfnamef, ::core::mem::transmute_copy(&ppwzfriendlyname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTargetFrameName<Impl: IHlinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwztargetframename: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTargetFrameName(&*(&pwztargetframename as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTargetFrameName<Impl: IHlinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppwztargetframename: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTargetFrameName(::core::mem::transmute_copy(&ppwztargetframename)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMiscStatus<Impl: IHlinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwstatus: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMiscStatus(::core::mem::transmute_copy(&pdwstatus)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Navigate<Impl: IHlinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, grfhlnf: u32, pibc: ::windows::core::RawPtr, pibsc: ::windows::core::RawPtr, pihlbc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Navigate(
                grfhlnf,
                &*(&pibc as *const <super::super::System::Com::IBindCtx as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindCtx as ::windows::core::DefaultType>::DefaultType),
                &*(&pibsc as *const <super::super::System::Com::IBindStatusCallback as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindStatusCallback as ::windows::core::DefaultType>::DefaultType),
                &*(&pihlbc as *const <IHlinkBrowseContext as ::windows::core::Abi>::Abi as *const <IHlinkBrowseContext as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAdditionalParams<Impl: IHlinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwzadditionalparams: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAdditionalParams(&*(&pwzadditionalparams as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAdditionalParams<Impl: IHlinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppwzadditionalparams: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAdditionalParams(::core::mem::transmute_copy(&ppwzadditionalparams)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IHlink>,
            ::windows::core::GetTrustLevel,
            SetHlinkSite::<Impl, OFFSET>,
            GetHlinkSite::<Impl, OFFSET>,
            SetMonikerReference::<Impl, OFFSET>,
            GetMonikerReference::<Impl, OFFSET>,
            SetStringReference::<Impl, OFFSET>,
            GetStringReference::<Impl, OFFSET>,
            SetFriendlyName::<Impl, OFFSET>,
            GetFriendlyName::<Impl, OFFSET>,
            SetTargetFrameName::<Impl, OFFSET>,
            GetTargetFrameName::<Impl, OFFSET>,
            GetMiscStatus::<Impl, OFFSET>,
            Navigate::<Impl, OFFSET>,
            SetAdditionalParams::<Impl, OFFSET>,
            GetAdditionalParams::<Impl, OFFSET>,
        )
    }
}
pub trait IHlinkBrowseContextImpl: Sized {
    fn Register();
    fn GetObject();
    fn Revoke();
    fn SetBrowseWindowInfo();
    fn GetBrowseWindowInfo();
    fn SetInitialHlink();
    fn OnNavigateHlink();
    fn UpdateHlink();
    fn EnumNavigationStack();
    fn QueryHlink();
    fn GetHlink();
    fn SetCurrentHlink();
    fn Clone();
    fn Close();
}
impl ::windows::core::RuntimeName for IHlinkBrowseContext {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IHlinkBrowseContext";
}
impl IHlinkBrowseContextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IHlinkBrowseContextImpl, const OFFSET: isize>() -> IHlinkBrowseContextVtbl {
        unsafe extern "system" fn Register<Impl: IHlinkBrowseContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, reserved: u32, piunk: *mut ::core::ffi::c_void, pimk: ::windows::core::RawPtr, pdwregister: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Register(reserved, &*(&piunk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&pimk as *const <super::super::System::Com::IMoniker as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IMoniker as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwregister)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetObject<Impl: IHlinkBrowseContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pimk: ::windows::core::RawPtr, fbindifrootregistered: super::super::Foundation::BOOL, ppiunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetObject(&*(&pimk as *const <super::super::System::Com::IMoniker as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IMoniker as ::windows::core::DefaultType>::DefaultType), &*(&fbindifrootregistered as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppiunk)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Revoke<Impl: IHlinkBrowseContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwregister: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Revoke(dwregister) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBrowseWindowInfo<Impl: IHlinkBrowseContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phlbwi: *const HLBWINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBrowseWindowInfo(&*(&phlbwi as *const <HLBWINFO as ::windows::core::Abi>::Abi as *const <HLBWINFO as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBrowseWindowInfo<Impl: IHlinkBrowseContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phlbwi: *mut HLBWINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBrowseWindowInfo(::core::mem::transmute_copy(&phlbwi)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInitialHlink<Impl: IHlinkBrowseContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pimktarget: ::windows::core::RawPtr, pwzlocation: super::super::Foundation::PWSTR, pwzfriendlyname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetInitialHlink(
                &*(&pimktarget as *const <super::super::System::Com::IMoniker as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IMoniker as ::windows::core::DefaultType>::DefaultType),
                &*(&pwzlocation as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pwzfriendlyname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnNavigateHlink<Impl: IHlinkBrowseContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, grfhlnf: u32, pimktarget: ::windows::core::RawPtr, pwzlocation: super::super::Foundation::PWSTR, pwzfriendlyname: super::super::Foundation::PWSTR, puhlid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnNavigateHlink(
                grfhlnf,
                &*(&pimktarget as *const <super::super::System::Com::IMoniker as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IMoniker as ::windows::core::DefaultType>::DefaultType),
                &*(&pwzlocation as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pwzfriendlyname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&puhlid),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateHlink<Impl: IHlinkBrowseContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uhlid: u32, pimktarget: ::windows::core::RawPtr, pwzlocation: super::super::Foundation::PWSTR, pwzfriendlyname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateHlink(
                uhlid,
                &*(&pimktarget as *const <super::super::System::Com::IMoniker as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IMoniker as ::windows::core::DefaultType>::DefaultType),
                &*(&pwzlocation as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pwzfriendlyname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumNavigationStack<Impl: IHlinkBrowseContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwreserved: u32, grfhlfnamef: u32, ppienumhlitem: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumNavigationStack(dwreserved, grfhlfnamef, ::core::mem::transmute_copy(&ppienumhlitem)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryHlink<Impl: IHlinkBrowseContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, grfhlqf: u32, uhlid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryHlink(grfhlqf, uhlid) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetHlink<Impl: IHlinkBrowseContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uhlid: u32, ppihl: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetHlink(uhlid, ::core::mem::transmute_copy(&ppihl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentHlink<Impl: IHlinkBrowseContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uhlid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCurrentHlink(uhlid) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IHlinkBrowseContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, piunkouter: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppiunkobj: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone(&*(&piunkouter as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppiunkobj)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Close<Impl: IHlinkBrowseContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, reserved: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Close(reserved) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IHlinkBrowseContext>,
            ::windows::core::GetTrustLevel,
            Register::<Impl, OFFSET>,
            GetObject::<Impl, OFFSET>,
            Revoke::<Impl, OFFSET>,
            SetBrowseWindowInfo::<Impl, OFFSET>,
            GetBrowseWindowInfo::<Impl, OFFSET>,
            SetInitialHlink::<Impl, OFFSET>,
            OnNavigateHlink::<Impl, OFFSET>,
            UpdateHlink::<Impl, OFFSET>,
            EnumNavigationStack::<Impl, OFFSET>,
            QueryHlink::<Impl, OFFSET>,
            GetHlink::<Impl, OFFSET>,
            SetCurrentHlink::<Impl, OFFSET>,
            Clone::<Impl, OFFSET>,
            Close::<Impl, OFFSET>,
        )
    }
}
pub trait IHlinkFrameImpl: Sized {
    fn SetBrowseContext();
    fn GetBrowseContext();
    fn Navigate();
    fn OnNavigate();
    fn UpdateHlink();
}
impl ::windows::core::RuntimeName for IHlinkFrame {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IHlinkFrame";
}
impl IHlinkFrameVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IHlinkFrameImpl, const OFFSET: isize>() -> IHlinkFrameVtbl {
        unsafe extern "system" fn SetBrowseContext<Impl: IHlinkFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pihlbc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBrowseContext(&*(&pihlbc as *const <IHlinkBrowseContext as ::windows::core::Abi>::Abi as *const <IHlinkBrowseContext as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBrowseContext<Impl: IHlinkFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppihlbc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBrowseContext(::core::mem::transmute_copy(&ppihlbc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Navigate<Impl: IHlinkFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, grfhlnf: u32, pbc: ::windows::core::RawPtr, pibsc: ::windows::core::RawPtr, pihlnavigate: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Navigate(
                grfhlnf,
                &*(&pbc as *const <super::super::System::Com::IBindCtx as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindCtx as ::windows::core::DefaultType>::DefaultType),
                &*(&pibsc as *const <super::super::System::Com::IBindStatusCallback as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindStatusCallback as ::windows::core::DefaultType>::DefaultType),
                &*(&pihlnavigate as *const <IHlink as ::windows::core::Abi>::Abi as *const <IHlink as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnNavigate<Impl: IHlinkFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, grfhlnf: u32, pimktarget: ::windows::core::RawPtr, pwzlocation: super::super::Foundation::PWSTR, pwzfriendlyname: super::super::Foundation::PWSTR, dwreserved: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnNavigate(
                grfhlnf,
                &*(&pimktarget as *const <super::super::System::Com::IMoniker as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IMoniker as ::windows::core::DefaultType>::DefaultType),
                &*(&pwzlocation as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pwzfriendlyname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwreserved,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateHlink<Impl: IHlinkFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uhlid: u32, pimktarget: ::windows::core::RawPtr, pwzlocation: super::super::Foundation::PWSTR, pwzfriendlyname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateHlink(
                uhlid,
                &*(&pimktarget as *const <super::super::System::Com::IMoniker as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IMoniker as ::windows::core::DefaultType>::DefaultType),
                &*(&pwzlocation as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pwzfriendlyname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IHlinkFrame>, ::windows::core::GetTrustLevel, SetBrowseContext::<Impl, OFFSET>, GetBrowseContext::<Impl, OFFSET>, Navigate::<Impl, OFFSET>, OnNavigate::<Impl, OFFSET>, UpdateHlink::<Impl, OFFSET>)
    }
}
pub trait IHlinkSiteImpl: Sized {
    fn QueryService();
    fn GetMoniker();
    fn ReadyToNavigate();
    fn OnNavigationComplete();
}
impl ::windows::core::RuntimeName for IHlinkSite {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IHlinkSite";
}
impl IHlinkSiteVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IHlinkSiteImpl, const OFFSET: isize>() -> IHlinkSiteVtbl {
        unsafe extern "system" fn QueryService<Impl: IHlinkSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsitedata: u32, guidservice: *const ::windows::core::GUID, riid: *const ::windows::core::GUID, ppiunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryService(dwsitedata, &*(&guidservice as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppiunk)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMoniker<Impl: IHlinkSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsitedata: u32, dwassign: u32, dwwhich: u32, ppimk: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMoniker(dwsitedata, dwassign, dwwhich, ::core::mem::transmute_copy(&ppimk)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadyToNavigate<Impl: IHlinkSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsitedata: u32, dwreserved: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReadyToNavigate(dwsitedata, dwreserved) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnNavigationComplete<Impl: IHlinkSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsitedata: u32, dwreserved: u32, hrerror: ::windows::core::HRESULT, pwzerror: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnNavigationComplete(dwsitedata, dwreserved, hrerror, &*(&pwzerror as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IHlinkSite>, ::windows::core::GetTrustLevel, QueryService::<Impl, OFFSET>, GetMoniker::<Impl, OFFSET>, ReadyToNavigate::<Impl, OFFSET>, OnNavigationComplete::<Impl, OFFSET>)
    }
}
pub trait IHlinkTargetImpl: Sized {
    fn SetBrowseContext();
    fn GetBrowseContext();
    fn Navigate();
    fn GetMoniker();
    fn GetFriendlyName();
}
impl ::windows::core::RuntimeName for IHlinkTarget {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IHlinkTarget";
}
impl IHlinkTargetVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IHlinkTargetImpl, const OFFSET: isize>() -> IHlinkTargetVtbl {
        unsafe extern "system" fn SetBrowseContext<Impl: IHlinkTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pihlbc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBrowseContext(&*(&pihlbc as *const <IHlinkBrowseContext as ::windows::core::Abi>::Abi as *const <IHlinkBrowseContext as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBrowseContext<Impl: IHlinkTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppihlbc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBrowseContext(::core::mem::transmute_copy(&ppihlbc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Navigate<Impl: IHlinkTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, grfhlnf: u32, pwzjumplocation: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Navigate(grfhlnf, &*(&pwzjumplocation as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMoniker<Impl: IHlinkTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwzlocation: super::super::Foundation::PWSTR, dwassign: u32, ppimklocation: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMoniker(&*(&pwzlocation as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwassign, ::core::mem::transmute_copy(&ppimklocation)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFriendlyName<Impl: IHlinkTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwzlocation: super::super::Foundation::PWSTR, ppwzfriendlyname: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFriendlyName(&*(&pwzlocation as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppwzfriendlyname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IHlinkTarget>, ::windows::core::GetTrustLevel, SetBrowseContext::<Impl, OFFSET>, GetBrowseContext::<Impl, OFFSET>, Navigate::<Impl, OFFSET>, GetMoniker::<Impl, OFFSET>, GetFriendlyName::<Impl, OFFSET>)
    }
}
pub trait IHomeGroupImpl: Sized {
    fn IsMember();
    fn ShowSharingWizard();
}
impl ::windows::core::RuntimeName for IHomeGroup {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IHomeGroup";
}
impl IHomeGroupVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IHomeGroupImpl, const OFFSET: isize>() -> IHomeGroupVtbl {
        unsafe extern "system" fn IsMember<Impl: IHomeGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, member: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsMember(::core::mem::transmute_copy(&member)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShowSharingWizard<Impl: IHomeGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, owner: super::super::Foundation::HWND, sharingchoices: *mut HOMEGROUPSHARINGCHOICES) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowSharingWizard(&*(&owner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&sharingchoices)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IHomeGroup>, ::windows::core::GetTrustLevel, IsMember::<Impl, OFFSET>, ShowSharingWizard::<Impl, OFFSET>)
    }
}
pub trait IIOCancelInformationImpl: Sized {
    fn SetCancelInformation();
    fn GetCancelInformation();
}
impl ::windows::core::RuntimeName for IIOCancelInformation {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IIOCancelInformation";
}
impl IIOCancelInformationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIOCancelInformationImpl, const OFFSET: isize>() -> IIOCancelInformationVtbl {
        unsafe extern "system" fn SetCancelInformation<Impl: IIOCancelInformationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwthreadid: u32, umsgcancel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCancelInformation(dwthreadid, umsgcancel) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCancelInformation<Impl: IIOCancelInformationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwthreadid: *mut u32, pumsgcancel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCancelInformation(::core::mem::transmute_copy(&pdwthreadid), ::core::mem::transmute_copy(&pumsgcancel)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IIOCancelInformation>, ::windows::core::GetTrustLevel, SetCancelInformation::<Impl, OFFSET>, GetCancelInformation::<Impl, OFFSET>)
    }
}
pub trait IIdentityNameImpl: Sized + IRelatedItemImpl {}
impl ::windows::core::RuntimeName for IIdentityName {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IIdentityName";
}
impl IIdentityNameVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIdentityNameImpl, const OFFSET: isize>() -> IIdentityNameVtbl {
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IIdentityName>, ::windows::core::GetTrustLevel)
    }
}
pub trait IImageRecompressImpl: Sized {
    fn RecompressImage();
}
impl ::windows::core::RuntimeName for IImageRecompress {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IImageRecompress";
}
impl IImageRecompressVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IImageRecompressImpl, const OFFSET: isize>() -> IImageRecompressVtbl {
        unsafe extern "system" fn RecompressImage<Impl: IImageRecompressImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, cx: i32, cy: i32, iquality: i32, pstg: ::windows::core::RawPtr, ppstrmout: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RecompressImage(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), cx, cy, iquality, &*(&pstg as *const <super::super::System::Com::StructuredStorage::IStorage as ::windows::core::Abi>::Abi as *const <super::super::System::Com::StructuredStorage::IStorage as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppstrmout)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IImageRecompress>, ::windows::core::GetTrustLevel, RecompressImage::<Impl, OFFSET>)
    }
}
pub trait IInitializeCommandImpl: Sized {
    fn Initialize();
}
impl ::windows::core::RuntimeName for IInitializeCommand {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IInitializeCommand";
}
impl IInitializeCommandVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IInitializeCommandImpl, const OFFSET: isize>() -> IInitializeCommandVtbl {
        unsafe extern "system" fn Initialize<Impl: IInitializeCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcommandname: super::super::Foundation::PWSTR, ppb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(&*(&pszcommandname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&ppb as *const <super::super::System::Com::StructuredStorage::IPropertyBag as ::windows::core::Abi>::Abi as *const <super::super::System::Com::StructuredStorage::IPropertyBag as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IInitializeCommand>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>)
    }
}
pub trait IInitializeNetworkFolderImpl: Sized {
    fn Initialize();
}
impl ::windows::core::RuntimeName for IInitializeNetworkFolder {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IInitializeNetworkFolder";
}
impl IInitializeNetworkFolderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IInitializeNetworkFolderImpl, const OFFSET: isize>() -> IInitializeNetworkFolderVtbl {
        unsafe extern "system" fn Initialize<Impl: IInitializeNetworkFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pidltarget: *const Common::ITEMIDLIST, udisplaytype: u32, pszresname: super::super::Foundation::PWSTR, pszprovider: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(
                &*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType),
                &*(&pidltarget as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType),
                udisplaytype,
                &*(&pszresname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszprovider as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IInitializeNetworkFolder>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>)
    }
}
pub trait IInitializeObjectImpl: Sized {
    fn Initialize();
}
impl ::windows::core::RuntimeName for IInitializeObject {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IInitializeObject";
}
impl IInitializeObjectVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IInitializeObjectImpl, const OFFSET: isize>() -> IInitializeObjectVtbl {
        unsafe extern "system" fn Initialize<Impl: IInitializeObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IInitializeObject>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>)
    }
}
pub trait IInitializeWithBindCtxImpl: Sized {
    fn Initialize();
}
impl ::windows::core::RuntimeName for IInitializeWithBindCtx {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IInitializeWithBindCtx";
}
impl IInitializeWithBindCtxVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IInitializeWithBindCtxImpl, const OFFSET: isize>() -> IInitializeWithBindCtxVtbl {
        unsafe extern "system" fn Initialize<Impl: IInitializeWithBindCtxImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(&*(&pbc as *const <super::super::System::Com::IBindCtx as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindCtx as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IInitializeWithBindCtx>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>)
    }
}
pub trait IInitializeWithItemImpl: Sized {
    fn Initialize();
}
impl ::windows::core::RuntimeName for IInitializeWithItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IInitializeWithItem";
}
impl IInitializeWithItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IInitializeWithItemImpl, const OFFSET: isize>() -> IInitializeWithItemVtbl {
        unsafe extern "system" fn Initialize<Impl: IInitializeWithItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, grfmode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), grfmode) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IInitializeWithItem>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>)
    }
}
pub trait IInitializeWithPropertyStoreImpl: Sized {
    fn Initialize();
}
impl ::windows::core::RuntimeName for IInitializeWithPropertyStore {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IInitializeWithPropertyStore";
}
impl IInitializeWithPropertyStoreVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IInitializeWithPropertyStoreImpl, const OFFSET: isize>() -> IInitializeWithPropertyStoreVtbl {
        unsafe extern "system" fn Initialize<Impl: IInitializeWithPropertyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pps: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(&*(&pps as *const <PropertiesSystem::IPropertyStore as ::windows::core::Abi>::Abi as *const <PropertiesSystem::IPropertyStore as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IInitializeWithPropertyStore>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>)
    }
}
pub trait IInitializeWithWindowImpl: Sized {
    fn Initialize();
}
impl ::windows::core::RuntimeName for IInitializeWithWindow {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IInitializeWithWindow";
}
impl IInitializeWithWindowVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IInitializeWithWindowImpl, const OFFSET: isize>() -> IInitializeWithWindowVtbl {
        unsafe extern "system" fn Initialize<Impl: IInitializeWithWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IInitializeWithWindow>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>)
    }
}
pub trait IInputObjectImpl: Sized {
    fn UIActivateIO();
    fn HasFocusIO();
    fn TranslateAcceleratorIO();
}
impl ::windows::core::RuntimeName for IInputObject {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IInputObject";
}
impl IInputObjectVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IInputObjectImpl, const OFFSET: isize>() -> IInputObjectVtbl {
        unsafe extern "system" fn UIActivateIO<Impl: IInputObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, factivate: super::super::Foundation::BOOL, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UIActivateIO(&*(&factivate as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType), &*(&pmsg as *const <super::WindowsAndMessaging::MSG as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::MSG as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HasFocusIO<Impl: IInputObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HasFocusIO() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TranslateAcceleratorIO<Impl: IInputObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TranslateAcceleratorIO(&*(&pmsg as *const <super::WindowsAndMessaging::MSG as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::MSG as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IInputObject>, ::windows::core::GetTrustLevel, UIActivateIO::<Impl, OFFSET>, HasFocusIO::<Impl, OFFSET>, TranslateAcceleratorIO::<Impl, OFFSET>)
    }
}
pub trait IInputObject2Impl: Sized + IInputObjectImpl {
    fn TranslateAcceleratorGlobal();
}
impl ::windows::core::RuntimeName for IInputObject2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IInputObject2";
}
impl IInputObject2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IInputObject2Impl, const OFFSET: isize>() -> IInputObject2Vtbl {
        unsafe extern "system" fn TranslateAcceleratorGlobal<Impl: IInputObject2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TranslateAcceleratorGlobal(&*(&pmsg as *const <super::WindowsAndMessaging::MSG as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::MSG as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IInputObject2>, ::windows::core::GetTrustLevel, TranslateAcceleratorGlobal::<Impl, OFFSET>)
    }
}
pub trait IInputObjectSiteImpl: Sized {
    fn OnFocusChangeIS();
}
impl ::windows::core::RuntimeName for IInputObjectSite {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IInputObjectSite";
}
impl IInputObjectSiteVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IInputObjectSiteImpl, const OFFSET: isize>() -> IInputObjectSiteVtbl {
        unsafe extern "system" fn OnFocusChangeIS<Impl: IInputObjectSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkobj: *mut ::core::ffi::c_void, fsetfocus: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnFocusChangeIS(&*(&punkobj as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&fsetfocus as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IInputObjectSite>, ::windows::core::GetTrustLevel, OnFocusChangeIS::<Impl, OFFSET>)
    }
}
pub trait IInputPaneAnimationCoordinatorImpl: Sized {
    fn AddAnimation();
}
impl ::windows::core::RuntimeName for IInputPaneAnimationCoordinator {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IInputPaneAnimationCoordinator";
}
impl IInputPaneAnimationCoordinatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IInputPaneAnimationCoordinatorImpl, const OFFSET: isize>() -> IInputPaneAnimationCoordinatorVtbl {
        unsafe extern "system" fn AddAnimation<Impl: IInputPaneAnimationCoordinatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, device: *mut ::core::ffi::c_void, animation: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddAnimation(&*(&device as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&animation as *const <super::super::Graphics::DirectComposition::IDCompositionAnimation as ::windows::core::Abi>::Abi as *const <super::super::Graphics::DirectComposition::IDCompositionAnimation as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IInputPaneAnimationCoordinator>, ::windows::core::GetTrustLevel, AddAnimation::<Impl, OFFSET>)
    }
}
pub trait IInputPanelConfigurationImpl: Sized {
    fn EnableFocusTracking();
}
impl ::windows::core::RuntimeName for IInputPanelConfiguration {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IInputPanelConfiguration";
}
impl IInputPanelConfigurationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IInputPanelConfigurationImpl, const OFFSET: isize>() -> IInputPanelConfigurationVtbl {
        unsafe extern "system" fn EnableFocusTracking<Impl: IInputPanelConfigurationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnableFocusTracking() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IInputPanelConfiguration>, ::windows::core::GetTrustLevel, EnableFocusTracking::<Impl, OFFSET>)
    }
}
pub trait IInputPanelInvocationConfigurationImpl: Sized {
    fn RequireTouchInEditControl();
}
impl ::windows::core::RuntimeName for IInputPanelInvocationConfiguration {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IInputPanelInvocationConfiguration";
}
impl IInputPanelInvocationConfigurationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IInputPanelInvocationConfigurationImpl, const OFFSET: isize>() -> IInputPanelInvocationConfigurationVtbl {
        unsafe extern "system" fn RequireTouchInEditControl<Impl: IInputPanelInvocationConfigurationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RequireTouchInEditControl() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IInputPanelInvocationConfiguration>, ::windows::core::GetTrustLevel, RequireTouchInEditControl::<Impl, OFFSET>)
    }
}
pub trait IInsertItemImpl: Sized {
    fn InsertItem();
}
impl ::windows::core::RuntimeName for IInsertItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IInsertItem";
}
impl IInsertItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IInsertItemImpl, const OFFSET: isize>() -> IInsertItemVtbl {
        unsafe extern "system" fn InsertItem<Impl: IInsertItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InsertItem(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IInsertItem>, ::windows::core::GetTrustLevel, InsertItem::<Impl, OFFSET>)
    }
}
pub trait IItemNameLimitsImpl: Sized {
    fn GetValidCharacters();
    fn GetMaxLength();
}
impl ::windows::core::RuntimeName for IItemNameLimits {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IItemNameLimits";
}
impl IItemNameLimitsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IItemNameLimitsImpl, const OFFSET: isize>() -> IItemNameLimitsVtbl {
        unsafe extern "system" fn GetValidCharacters<Impl: IItemNameLimitsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppwszvalidchars: *mut super::super::Foundation::PWSTR, ppwszinvalidchars: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetValidCharacters(::core::mem::transmute_copy(&ppwszvalidchars), ::core::mem::transmute_copy(&ppwszinvalidchars)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMaxLength<Impl: IItemNameLimitsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::Foundation::PWSTR, pimaxnamelen: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMaxLength(&*(&pszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pimaxnamelen)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IItemNameLimits>, ::windows::core::GetTrustLevel, GetValidCharacters::<Impl, OFFSET>, GetMaxLength::<Impl, OFFSET>)
    }
}
pub trait IKnownFolderImpl: Sized {
    fn GetId();
    fn GetCategory();
    fn GetShellItem();
    fn GetPath();
    fn SetPath();
    fn GetIDList();
    fn GetFolderType();
    fn GetRedirectionCapabilities();
    fn GetFolderDefinition();
}
impl ::windows::core::RuntimeName for IKnownFolder {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IKnownFolder";
}
impl IKnownFolderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IKnownFolderImpl, const OFFSET: isize>() -> IKnownFolderVtbl {
        unsafe extern "system" fn GetId<Impl: IKnownFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pkfid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetId(::core::mem::transmute_copy(&pkfid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCategory<Impl: IKnownFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcategory: *mut KF_CATEGORY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCategory(::core::mem::transmute_copy(&pcategory)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetShellItem<Impl: IKnownFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetShellItem(dwflags, &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPath<Impl: IKnownFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, ppszpath: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPath(dwflags, ::core::mem::transmute_copy(&ppszpath)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPath<Impl: IKnownFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, pszpath: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetPath(dwflags, &*(&pszpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIDList<Impl: IKnownFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIDList(dwflags, ::core::mem::transmute_copy(&ppidl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolderType<Impl: IKnownFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pftid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolderType(::core::mem::transmute_copy(&pftid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRedirectionCapabilities<Impl: IKnownFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcapabilities: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRedirectionCapabilities(::core::mem::transmute_copy(&pcapabilities)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolderDefinition<Impl: IKnownFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pkfd: *mut KNOWNFOLDER_DEFINITION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolderDefinition(::core::mem::transmute_copy(&pkfd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IKnownFolder>,
            ::windows::core::GetTrustLevel,
            GetId::<Impl, OFFSET>,
            GetCategory::<Impl, OFFSET>,
            GetShellItem::<Impl, OFFSET>,
            GetPath::<Impl, OFFSET>,
            SetPath::<Impl, OFFSET>,
            GetIDList::<Impl, OFFSET>,
            GetFolderType::<Impl, OFFSET>,
            GetRedirectionCapabilities::<Impl, OFFSET>,
            GetFolderDefinition::<Impl, OFFSET>,
        )
    }
}
pub trait IKnownFolderManagerImpl: Sized {
    fn FolderIdFromCsidl();
    fn FolderIdToCsidl();
    fn GetFolderIds();
    fn GetFolder();
    fn GetFolderByName();
    fn RegisterFolder();
    fn UnregisterFolder();
    fn FindFolderFromPath();
    fn FindFolderFromIDList();
    fn Redirect();
}
impl ::windows::core::RuntimeName for IKnownFolderManager {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IKnownFolderManager";
}
impl IKnownFolderManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IKnownFolderManagerImpl, const OFFSET: isize>() -> IKnownFolderManagerVtbl {
        unsafe extern "system" fn FolderIdFromCsidl<Impl: IKnownFolderManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ncsidl: i32, pfid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FolderIdFromCsidl(ncsidl, ::core::mem::transmute_copy(&pfid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FolderIdToCsidl<Impl: IKnownFolderManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rfid: *const ::windows::core::GUID, pncsidl: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FolderIdToCsidl(&*(&rfid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pncsidl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolderIds<Impl: IKnownFolderManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppkfid: *mut *mut ::windows::core::GUID, pcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolderIds(::core::mem::transmute_copy(&ppkfid), pcount) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolder<Impl: IKnownFolderManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rfid: *const ::windows::core::GUID, ppkf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolder(&*(&rfid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppkf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolderByName<Impl: IKnownFolderManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcanonicalname: super::super::Foundation::PWSTR, ppkf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolderByName(&*(&pszcanonicalname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppkf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterFolder<Impl: IKnownFolderManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rfid: *const ::windows::core::GUID, pkfd: *const KNOWNFOLDER_DEFINITION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RegisterFolder(&*(&rfid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&pkfd as *const <KNOWNFOLDER_DEFINITION as ::windows::core::Abi>::Abi as *const <KNOWNFOLDER_DEFINITION as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnregisterFolder<Impl: IKnownFolderManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rfid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UnregisterFolder(&*(&rfid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindFolderFromPath<Impl: IKnownFolderManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszpath: super::super::Foundation::PWSTR, mode: FFFP_MODE, ppkf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindFolderFromPath(&*(&pszpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), mode, ::core::mem::transmute_copy(&ppkf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindFolderFromIDList<Impl: IKnownFolderManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, ppkf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindFolderFromIDList(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppkf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Redirect<Impl: IKnownFolderManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rfid: *const ::windows::core::GUID, hwnd: super::super::Foundation::HWND, flags: u32, psztargetpath: super::super::Foundation::PWSTR, cfolders: u32, pexclusion: *const ::windows::core::GUID, ppszerror: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Redirect(
                &*(&rfid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                flags,
                &*(&psztargetpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                cfolders,
                &*(&pexclusion as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppszerror),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IKnownFolderManager>,
            ::windows::core::GetTrustLevel,
            FolderIdFromCsidl::<Impl, OFFSET>,
            FolderIdToCsidl::<Impl, OFFSET>,
            GetFolderIds::<Impl, OFFSET>,
            GetFolder::<Impl, OFFSET>,
            GetFolderByName::<Impl, OFFSET>,
            RegisterFolder::<Impl, OFFSET>,
            UnregisterFolder::<Impl, OFFSET>,
            FindFolderFromPath::<Impl, OFFSET>,
            FindFolderFromIDList::<Impl, OFFSET>,
            Redirect::<Impl, OFFSET>,
        )
    }
}
pub trait ILaunchSourceAppUserModelIdImpl: Sized {
    fn GetAppUserModelId();
}
impl ::windows::core::RuntimeName for ILaunchSourceAppUserModelId {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ILaunchSourceAppUserModelId";
}
impl ILaunchSourceAppUserModelIdVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ILaunchSourceAppUserModelIdImpl, const OFFSET: isize>() -> ILaunchSourceAppUserModelIdVtbl {
        unsafe extern "system" fn GetAppUserModelId<Impl: ILaunchSourceAppUserModelIdImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, launchingapp: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAppUserModelId(::core::mem::transmute_copy(&launchingapp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ILaunchSourceAppUserModelId>, ::windows::core::GetTrustLevel, GetAppUserModelId::<Impl, OFFSET>)
    }
}
pub trait ILaunchSourceViewSizePreferenceImpl: Sized {
    fn GetSourceViewToPosition();
    fn GetSourceViewSizePreference();
}
impl ::windows::core::RuntimeName for ILaunchSourceViewSizePreference {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ILaunchSourceViewSizePreference";
}
impl ILaunchSourceViewSizePreferenceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ILaunchSourceViewSizePreferenceImpl, const OFFSET: isize>() -> ILaunchSourceViewSizePreferenceVtbl {
        unsafe extern "system" fn GetSourceViewToPosition<Impl: ILaunchSourceViewSizePreferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: *mut super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSourceViewToPosition(::core::mem::transmute_copy(&hwnd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceViewSizePreference<Impl: ILaunchSourceViewSizePreferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sourcesizeafterlaunch: *mut APPLICATION_VIEW_SIZE_PREFERENCE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSourceViewSizePreference(::core::mem::transmute_copy(&sourcesizeafterlaunch)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ILaunchSourceViewSizePreference>, ::windows::core::GetTrustLevel, GetSourceViewToPosition::<Impl, OFFSET>, GetSourceViewSizePreference::<Impl, OFFSET>)
    }
}
pub trait ILaunchTargetMonitorImpl: Sized {
    fn GetMonitor();
}
impl ::windows::core::RuntimeName for ILaunchTargetMonitor {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ILaunchTargetMonitor";
}
impl ILaunchTargetMonitorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ILaunchTargetMonitorImpl, const OFFSET: isize>() -> ILaunchTargetMonitorVtbl {
        unsafe extern "system" fn GetMonitor<Impl: ILaunchTargetMonitorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, monitor: *mut super::super::Graphics::Gdi::HMONITOR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMonitor(::core::mem::transmute_copy(&monitor)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ILaunchTargetMonitor>, ::windows::core::GetTrustLevel, GetMonitor::<Impl, OFFSET>)
    }
}
pub trait ILaunchTargetViewSizePreferenceImpl: Sized {
    fn GetTargetViewSizePreference();
}
impl ::windows::core::RuntimeName for ILaunchTargetViewSizePreference {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ILaunchTargetViewSizePreference";
}
impl ILaunchTargetViewSizePreferenceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ILaunchTargetViewSizePreferenceImpl, const OFFSET: isize>() -> ILaunchTargetViewSizePreferenceVtbl {
        unsafe extern "system" fn GetTargetViewSizePreference<Impl: ILaunchTargetViewSizePreferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, targetsizeonlaunch: *mut APPLICATION_VIEW_SIZE_PREFERENCE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTargetViewSizePreference(::core::mem::transmute_copy(&targetsizeonlaunch)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ILaunchTargetViewSizePreference>, ::windows::core::GetTrustLevel, GetTargetViewSizePreference::<Impl, OFFSET>)
    }
}
pub trait ILaunchUIContextImpl: Sized {
    fn SetAssociatedWindow();
    fn SetTabGroupingPreference();
}
impl ::windows::core::RuntimeName for ILaunchUIContext {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ILaunchUIContext";
}
impl ILaunchUIContextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ILaunchUIContextImpl, const OFFSET: isize>() -> ILaunchUIContextVtbl {
        unsafe extern "system" fn SetAssociatedWindow<Impl: ILaunchUIContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAssociatedWindow(&*(&value as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTabGroupingPreference<Impl: ILaunchUIContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTabGroupingPreference(value) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ILaunchUIContext>, ::windows::core::GetTrustLevel, SetAssociatedWindow::<Impl, OFFSET>, SetTabGroupingPreference::<Impl, OFFSET>)
    }
}
pub trait ILaunchUIContextProviderImpl: Sized {
    fn UpdateContext();
}
impl ::windows::core::RuntimeName for ILaunchUIContextProvider {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ILaunchUIContextProvider";
}
impl ILaunchUIContextProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ILaunchUIContextProviderImpl, const OFFSET: isize>() -> ILaunchUIContextProviderVtbl {
        unsafe extern "system" fn UpdateContext<Impl: ILaunchUIContextProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateContext(&*(&context as *const <ILaunchUIContext as ::windows::core::Abi>::Abi as *const <ILaunchUIContext as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ILaunchUIContextProvider>, ::windows::core::GetTrustLevel, UpdateContext::<Impl, OFFSET>)
    }
}
pub trait IMenuBandImpl: Sized {
    fn IsMenuMessage();
    fn TranslateMenuMessage();
}
impl ::windows::core::RuntimeName for IMenuBand {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IMenuBand";
}
impl IMenuBandVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMenuBandImpl, const OFFSET: isize>() -> IMenuBandVtbl {
        unsafe extern "system" fn IsMenuMessage<Impl: IMenuBandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsMenuMessage(&*(&pmsg as *const <super::WindowsAndMessaging::MSG as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::MSG as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TranslateMenuMessage<Impl: IMenuBandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmsg: *mut super::WindowsAndMessaging::MSG, plret: *mut super::super::Foundation::LRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TranslateMenuMessage(&*(&pmsg as *const <super::WindowsAndMessaging::MSG as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::MSG as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&plret)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IMenuBand>, ::windows::core::GetTrustLevel, IsMenuMessage::<Impl, OFFSET>, TranslateMenuMessage::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Ole")]
pub trait IMenuPopupImpl: Sized + IDeskBarImpl + IOleWindowImpl {
    fn Popup();
    fn OnSelect();
    fn SetSubMenu();
}
#[cfg(feature = "Win32_System_Ole")]
impl ::windows::core::RuntimeName for IMenuPopup {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IMenuPopup";
}
#[cfg(feature = "Win32_System_Ole")]
impl IMenuPopupVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMenuPopupImpl, const OFFSET: isize>() -> IMenuPopupVtbl {
        unsafe extern "system" fn Popup<Impl: IMenuPopupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppt: *const super::super::Foundation::POINTL, prcexclude: *const super::super::Foundation::RECTL, dwflags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Popup(&*(&ppt as *const <super::super::Foundation::POINTL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINTL as ::windows::core::DefaultType>::DefaultType), &*(&prcexclude as *const <super::super::Foundation::RECTL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECTL as ::windows::core::DefaultType>::DefaultType), dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnSelect<Impl: IMenuPopupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwselecttype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnSelect(dwselecttype) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSubMenu<Impl: IMenuPopupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmp: ::windows::core::RawPtr, fset: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetSubMenu(&*(&pmp as *const <IMenuPopup as ::windows::core::Abi>::Abi as *const <IMenuPopup as ::windows::core::DefaultType>::DefaultType), &*(&fset as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IMenuPopup>, ::windows::core::GetTrustLevel, Popup::<Impl, OFFSET>, OnSelect::<Impl, OFFSET>, SetSubMenu::<Impl, OFFSET>)
    }
}
pub trait IModalWindowImpl: Sized {
    fn Show();
}
impl ::windows::core::RuntimeName for IModalWindow {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IModalWindow";
}
impl IModalWindowVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IModalWindowImpl, const OFFSET: isize>() -> IModalWindowVtbl {
        unsafe extern "system" fn Show<Impl: IModalWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Show(&*(&hwndowner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IModalWindow>, ::windows::core::GetTrustLevel, Show::<Impl, OFFSET>)
    }
}
pub trait INameSpaceTreeAccessibleImpl: Sized {
    fn OnGetDefaultAccessibilityAction();
    fn OnDoDefaultAccessibilityAction();
    fn OnGetAccessibilityRole();
}
impl ::windows::core::RuntimeName for INameSpaceTreeAccessible {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INameSpaceTreeAccessible";
}
impl INameSpaceTreeAccessibleVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INameSpaceTreeAccessibleImpl, const OFFSET: isize>() -> INameSpaceTreeAccessibleVtbl {
        unsafe extern "system" fn OnGetDefaultAccessibilityAction<Impl: INameSpaceTreeAccessibleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, pbstrdefaultaction: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnGetDefaultAccessibilityAction(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pbstrdefaultaction)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnDoDefaultAccessibilityAction<Impl: INameSpaceTreeAccessibleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnDoDefaultAccessibilityAction(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnGetAccessibilityRole<Impl: INameSpaceTreeAccessibleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, pvarrole: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnGetAccessibilityRole(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pvarrole)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INameSpaceTreeAccessible>, ::windows::core::GetTrustLevel, OnGetDefaultAccessibilityAction::<Impl, OFFSET>, OnDoDefaultAccessibilityAction::<Impl, OFFSET>, OnGetAccessibilityRole::<Impl, OFFSET>)
    }
}
pub trait INameSpaceTreeControlImpl: Sized {
    fn Initialize();
    fn TreeAdvise();
    fn TreeUnadvise();
    fn AppendRoot();
    fn InsertRoot();
    fn RemoveRoot();
    fn RemoveAllRoots();
    fn GetRootItems();
    fn SetItemState();
    fn GetItemState();
    fn GetSelectedItems();
    fn GetItemCustomState();
    fn SetItemCustomState();
    fn EnsureItemVisible();
    fn SetTheme();
    fn GetNextItem();
    fn HitTest();
    fn GetItemRect();
    fn CollapseAll();
}
impl ::windows::core::RuntimeName for INameSpaceTreeControl {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INameSpaceTreeControl";
}
impl INameSpaceTreeControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INameSpaceTreeControlImpl, const OFFSET: isize>() -> INameSpaceTreeControlVtbl {
        unsafe extern "system" fn Initialize<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT, nsctsflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(&*(&hwndparent as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&prc as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType), nsctsflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TreeAdvise<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TreeAdvise(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TreeUnadvise<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TreeUnadvise(dwcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendRoot<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiroot: ::windows::core::RawPtr, grfenumflags: u32, grfrootstyle: u32, pif: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AppendRoot(&*(&psiroot as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), grfenumflags, grfrootstyle, &*(&pif as *const <IShellItemFilter as ::windows::core::Abi>::Abi as *const <IShellItemFilter as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InsertRoot<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, iindex: i32, psiroot: ::windows::core::RawPtr, grfenumflags: u32, grfrootstyle: u32, pif: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InsertRoot(iindex, &*(&psiroot as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), grfenumflags, grfrootstyle, &*(&pif as *const <IShellItemFilter as ::windows::core::Abi>::Abi as *const <IShellItemFilter as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveRoot<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiroot: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveRoot(&*(&psiroot as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveAllRoots<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveAllRoots() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRootItems<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsiarootitems: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRootItems(::core::mem::transmute_copy(&ppsiarootitems)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetItemState<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, nstcismask: u32, nstcisflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetItemState(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), nstcismask, nstcisflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemState<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, nstcismask: u32, pnstcisflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemState(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), nstcismask, ::core::mem::transmute_copy(&pnstcisflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSelectedItems<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiaitems: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSelectedItems(::core::mem::transmute_copy(&psiaitems)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemCustomState<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, pistatenumber: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemCustomState(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pistatenumber)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetItemCustomState<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, istatenumber: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetItemCustomState(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), istatenumber) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnsureItemVisible<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnsureItemVisible(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTheme<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztheme: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTheme(&*(&psztheme as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextItem<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, nstcgi: NSTCGNI, ppsinext: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNextItem(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), nstcgi, ::core::mem::transmute_copy(&ppsinext)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HitTest<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppt: *const super::super::Foundation::POINT, ppsiout: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HitTest(&*(&ppt as *const <super::super::Foundation::POINT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppsiout)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemRect<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, prect: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemRect(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&prect)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CollapseAll<Impl: INameSpaceTreeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CollapseAll() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<INameSpaceTreeControl>,
            ::windows::core::GetTrustLevel,
            Initialize::<Impl, OFFSET>,
            TreeAdvise::<Impl, OFFSET>,
            TreeUnadvise::<Impl, OFFSET>,
            AppendRoot::<Impl, OFFSET>,
            InsertRoot::<Impl, OFFSET>,
            RemoveRoot::<Impl, OFFSET>,
            RemoveAllRoots::<Impl, OFFSET>,
            GetRootItems::<Impl, OFFSET>,
            SetItemState::<Impl, OFFSET>,
            GetItemState::<Impl, OFFSET>,
            GetSelectedItems::<Impl, OFFSET>,
            GetItemCustomState::<Impl, OFFSET>,
            SetItemCustomState::<Impl, OFFSET>,
            EnsureItemVisible::<Impl, OFFSET>,
            SetTheme::<Impl, OFFSET>,
            GetNextItem::<Impl, OFFSET>,
            HitTest::<Impl, OFFSET>,
            GetItemRect::<Impl, OFFSET>,
            CollapseAll::<Impl, OFFSET>,
        )
    }
}
pub trait INameSpaceTreeControl2Impl: Sized + INameSpaceTreeControlImpl {
    fn SetControlStyle();
    fn GetControlStyle();
    fn SetControlStyle2();
    fn GetControlStyle2();
}
impl ::windows::core::RuntimeName for INameSpaceTreeControl2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INameSpaceTreeControl2";
}
impl INameSpaceTreeControl2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INameSpaceTreeControl2Impl, const OFFSET: isize>() -> INameSpaceTreeControl2Vtbl {
        unsafe extern "system" fn SetControlStyle<Impl: INameSpaceTreeControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, nstcsmask: u32, nstcsstyle: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetControlStyle(nstcsmask, nstcsstyle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetControlStyle<Impl: INameSpaceTreeControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, nstcsmask: u32, pnstcsstyle: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetControlStyle(nstcsmask, ::core::mem::transmute_copy(&pnstcsstyle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetControlStyle2<Impl: INameSpaceTreeControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, nstcsmask: NSTCSTYLE2, nstcsstyle: NSTCSTYLE2) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetControlStyle2(nstcsmask, nstcsstyle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetControlStyle2<Impl: INameSpaceTreeControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, nstcsmask: NSTCSTYLE2, pnstcsstyle: *mut NSTCSTYLE2) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetControlStyle2(nstcsmask, ::core::mem::transmute_copy(&pnstcsstyle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INameSpaceTreeControl2>, ::windows::core::GetTrustLevel, SetControlStyle::<Impl, OFFSET>, GetControlStyle::<Impl, OFFSET>, SetControlStyle2::<Impl, OFFSET>, GetControlStyle2::<Impl, OFFSET>)
    }
}
pub trait INameSpaceTreeControlCustomDrawImpl: Sized {
    fn PrePaint();
    fn PostPaint();
    fn ItemPrePaint();
    fn ItemPostPaint();
}
impl ::windows::core::RuntimeName for INameSpaceTreeControlCustomDraw {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INameSpaceTreeControlCustomDraw";
}
impl INameSpaceTreeControlCustomDrawVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INameSpaceTreeControlCustomDrawImpl, const OFFSET: isize>() -> INameSpaceTreeControlCustomDrawVtbl {
        unsafe extern "system" fn PrePaint<Impl: INameSpaceTreeControlCustomDrawImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT, plres: *mut super::super::Foundation::LRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PrePaint(&*(&hdc as *const <super::super::Graphics::Gdi::HDC as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::HDC as ::windows::core::DefaultType>::DefaultType), &*(&prc as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&plres)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PostPaint<Impl: INameSpaceTreeControlCustomDrawImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PostPaint(&*(&hdc as *const <super::super::Graphics::Gdi::HDC as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::HDC as ::windows::core::DefaultType>::DefaultType), &*(&prc as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ItemPrePaint<Impl: INameSpaceTreeControlCustomDrawImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT, pnstccditem: *const NSTCCUSTOMDRAW, pclrtext: *mut u32, pclrtextbk: *mut u32, plres: *mut super::super::Foundation::LRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ItemPrePaint(
                &*(&hdc as *const <super::super::Graphics::Gdi::HDC as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::HDC as ::windows::core::DefaultType>::DefaultType),
                &*(&prc as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType),
                &*(&pnstccditem as *const <NSTCCUSTOMDRAW as ::windows::core::Abi>::Abi as *const <NSTCCUSTOMDRAW as ::windows::core::DefaultType>::DefaultType),
                pclrtext,
                pclrtextbk,
                ::core::mem::transmute_copy(&plres),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ItemPostPaint<Impl: INameSpaceTreeControlCustomDrawImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT, pnstccditem: *const NSTCCUSTOMDRAW) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ItemPostPaint(
                &*(&hdc as *const <super::super::Graphics::Gdi::HDC as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::HDC as ::windows::core::DefaultType>::DefaultType),
                &*(&prc as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType),
                &*(&pnstccditem as *const <NSTCCUSTOMDRAW as ::windows::core::Abi>::Abi as *const <NSTCCUSTOMDRAW as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INameSpaceTreeControlCustomDraw>, ::windows::core::GetTrustLevel, PrePaint::<Impl, OFFSET>, PostPaint::<Impl, OFFSET>, ItemPrePaint::<Impl, OFFSET>, ItemPostPaint::<Impl, OFFSET>)
    }
}
pub trait INameSpaceTreeControlDropHandlerImpl: Sized {
    fn OnDragEnter();
    fn OnDragOver();
    fn OnDragPosition();
    fn OnDrop();
    fn OnDropPosition();
    fn OnDragLeave();
}
impl ::windows::core::RuntimeName for INameSpaceTreeControlDropHandler {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INameSpaceTreeControlDropHandler";
}
impl INameSpaceTreeControlDropHandlerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INameSpaceTreeControlDropHandlerImpl, const OFFSET: isize>() -> INameSpaceTreeControlDropHandlerVtbl {
        unsafe extern "system" fn OnDragEnter<Impl: INameSpaceTreeControlDropHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiover: ::windows::core::RawPtr, psiadata: ::windows::core::RawPtr, foutsidesource: super::super::Foundation::BOOL, grfkeystate: u32, pdweffect: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnDragEnter(
                &*(&psiover as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&psiadata as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType),
                &*(&foutsidesource as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType),
                grfkeystate,
                pdweffect,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnDragOver<Impl: INameSpaceTreeControlDropHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiover: ::windows::core::RawPtr, psiadata: ::windows::core::RawPtr, grfkeystate: u32, pdweffect: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnDragOver(&*(&psiover as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psiadata as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType), grfkeystate, pdweffect) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnDragPosition<Impl: INameSpaceTreeControlDropHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiover: ::windows::core::RawPtr, psiadata: ::windows::core::RawPtr, inewposition: i32, ioldposition: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnDragPosition(&*(&psiover as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psiadata as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType), inewposition, ioldposition) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnDrop<Impl: INameSpaceTreeControlDropHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiover: ::windows::core::RawPtr, psiadata: ::windows::core::RawPtr, iposition: i32, grfkeystate: u32, pdweffect: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnDrop(&*(&psiover as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psiadata as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType), iposition, grfkeystate, pdweffect) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnDropPosition<Impl: INameSpaceTreeControlDropHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiover: ::windows::core::RawPtr, psiadata: ::windows::core::RawPtr, inewposition: i32, ioldposition: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnDropPosition(&*(&psiover as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psiadata as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType), inewposition, ioldposition) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnDragLeave<Impl: INameSpaceTreeControlDropHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiover: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnDragLeave(&*(&psiover as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INameSpaceTreeControlDropHandler>, ::windows::core::GetTrustLevel, OnDragEnter::<Impl, OFFSET>, OnDragOver::<Impl, OFFSET>, OnDragPosition::<Impl, OFFSET>, OnDrop::<Impl, OFFSET>, OnDropPosition::<Impl, OFFSET>, OnDragLeave::<Impl, OFFSET>)
    }
}
pub trait INameSpaceTreeControlEventsImpl: Sized {
    fn OnItemClick();
    fn OnPropertyItemCommit();
    fn OnItemStateChanging();
    fn OnItemStateChanged();
    fn OnSelectionChanged();
    fn OnKeyboardInput();
    fn OnBeforeExpand();
    fn OnAfterExpand();
    fn OnBeginLabelEdit();
    fn OnEndLabelEdit();
    fn OnGetToolTip();
    fn OnBeforeItemDelete();
    fn OnItemAdded();
    fn OnItemDeleted();
    fn OnBeforeContextMenu();
    fn OnAfterContextMenu();
    fn OnBeforeStateImageChange();
    fn OnGetDefaultIconIndex();
}
impl ::windows::core::RuntimeName for INameSpaceTreeControlEvents {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INameSpaceTreeControlEvents";
}
impl INameSpaceTreeControlEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>() -> INameSpaceTreeControlEventsVtbl {
        unsafe extern "system" fn OnItemClick<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, nstcehittest: u32, nstceclicktype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnItemClick(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), nstcehittest, nstceclicktype) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnPropertyItemCommit<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnPropertyItemCommit(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnItemStateChanging<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, nstcismask: u32, nstcisstate: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnItemStateChanging(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), nstcismask, nstcisstate) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnItemStateChanged<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, nstcismask: u32, nstcisstate: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnItemStateChanged(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), nstcismask, nstcisstate) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnSelectionChanged<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiaselection: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnSelectionChanged(&*(&psiaselection as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnKeyboardInput<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnKeyboardInput(umsg, &*(&wparam as *const <super::super::Foundation::WPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::WPARAM as ::windows::core::DefaultType>::DefaultType), &*(&lparam as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnBeforeExpand<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnBeforeExpand(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnAfterExpand<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnAfterExpand(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnBeginLabelEdit<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnBeginLabelEdit(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnEndLabelEdit<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnEndLabelEdit(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnGetToolTip<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, psztip: super::super::Foundation::PWSTR, cchtip: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnGetToolTip(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&psztip), cchtip) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnBeforeItemDelete<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnBeforeItemDelete(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnItemAdded<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, fisroot: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnItemAdded(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&fisroot as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnItemDeleted<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, fisroot: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnItemDeleted(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&fisroot as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnBeforeContextMenu<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnBeforeContextMenu(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnAfterContextMenu<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, pcmin: ::windows::core::RawPtr, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnAfterContextMenu(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&pcmin as *const <IContextMenu as ::windows::core::Abi>::Abi as *const <IContextMenu as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnBeforeStateImageChange<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnBeforeStateImageChange(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnGetDefaultIconIndex<Impl: INameSpaceTreeControlEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, pidefaulticon: *mut i32, piopenicon: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnGetDefaultIconIndex(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pidefaulticon), ::core::mem::transmute_copy(&piopenicon)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<INameSpaceTreeControlEvents>,
            ::windows::core::GetTrustLevel,
            OnItemClick::<Impl, OFFSET>,
            OnPropertyItemCommit::<Impl, OFFSET>,
            OnItemStateChanging::<Impl, OFFSET>,
            OnItemStateChanged::<Impl, OFFSET>,
            OnSelectionChanged::<Impl, OFFSET>,
            OnKeyboardInput::<Impl, OFFSET>,
            OnBeforeExpand::<Impl, OFFSET>,
            OnAfterExpand::<Impl, OFFSET>,
            OnBeginLabelEdit::<Impl, OFFSET>,
            OnEndLabelEdit::<Impl, OFFSET>,
            OnGetToolTip::<Impl, OFFSET>,
            OnBeforeItemDelete::<Impl, OFFSET>,
            OnItemAdded::<Impl, OFFSET>,
            OnItemDeleted::<Impl, OFFSET>,
            OnBeforeContextMenu::<Impl, OFFSET>,
            OnAfterContextMenu::<Impl, OFFSET>,
            OnBeforeStateImageChange::<Impl, OFFSET>,
            OnGetDefaultIconIndex::<Impl, OFFSET>,
        )
    }
}
pub trait INameSpaceTreeControlFolderCapabilitiesImpl: Sized {
    fn GetFolderCapabilities();
}
impl ::windows::core::RuntimeName for INameSpaceTreeControlFolderCapabilities {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INameSpaceTreeControlFolderCapabilities";
}
impl INameSpaceTreeControlFolderCapabilitiesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INameSpaceTreeControlFolderCapabilitiesImpl, const OFFSET: isize>() -> INameSpaceTreeControlFolderCapabilitiesVtbl {
        unsafe extern "system" fn GetFolderCapabilities<Impl: INameSpaceTreeControlFolderCapabilitiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, nfcmask: NSTCFOLDERCAPABILITIES, pnfcvalue: *mut NSTCFOLDERCAPABILITIES) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolderCapabilities(nfcmask, ::core::mem::transmute_copy(&pnfcvalue)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INameSpaceTreeControlFolderCapabilities>, ::windows::core::GetTrustLevel, GetFolderCapabilities::<Impl, OFFSET>)
    }
}
pub trait INamedPropertyBagImpl: Sized {
    fn ReadPropertyNPB();
    fn WritePropertyNPB();
    fn RemovePropertyNPB();
}
impl ::windows::core::RuntimeName for INamedPropertyBag {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INamedPropertyBag";
}
impl INamedPropertyBagVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INamedPropertyBagImpl, const OFFSET: isize>() -> INamedPropertyBagVtbl {
        unsafe extern "system" fn ReadPropertyNPB<Impl: INamedPropertyBagImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszbagname: super::super::Foundation::PWSTR, pszpropname: super::super::Foundation::PWSTR, pvar: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReadPropertyNPB(
                &*(&pszbagname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszpropname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pvar as *const <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WritePropertyNPB<Impl: INamedPropertyBagImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszbagname: super::super::Foundation::PWSTR, pszpropname: super::super::Foundation::PWSTR, pvar: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WritePropertyNPB(
                &*(&pszbagname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszpropname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pvar as *const <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::StructuredStorage::PROPVARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemovePropertyNPB<Impl: INamedPropertyBagImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszbagname: super::super::Foundation::PWSTR, pszpropname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemovePropertyNPB(&*(&pszbagname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pszpropname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INamedPropertyBag>, ::windows::core::GetTrustLevel, ReadPropertyNPB::<Impl, OFFSET>, WritePropertyNPB::<Impl, OFFSET>, RemovePropertyNPB::<Impl, OFFSET>)
    }
}
pub trait INamespaceWalkImpl: Sized {
    fn Walk();
    fn GetIDArrayResult();
}
impl ::windows::core::RuntimeName for INamespaceWalk {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INamespaceWalk";
}
impl INamespaceWalkVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INamespaceWalkImpl, const OFFSET: isize>() -> INamespaceWalkVtbl {
        unsafe extern "system" fn Walk<Impl: INamespaceWalkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punktowalk: *mut ::core::ffi::c_void, dwflags: u32, cdepth: i32, pnswcb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Walk(&*(&punktowalk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), dwflags, cdepth, &*(&pnswcb as *const <INamespaceWalkCB as ::windows::core::Abi>::Abi as *const <INamespaceWalkCB as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIDArrayResult<Impl: INamespaceWalkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcitems: *mut u32, prgpidl: *mut *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIDArrayResult(::core::mem::transmute_copy(&pcitems), ::core::mem::transmute_copy(&prgpidl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INamespaceWalk>, ::windows::core::GetTrustLevel, Walk::<Impl, OFFSET>, GetIDArrayResult::<Impl, OFFSET>)
    }
}
pub trait INamespaceWalkCBImpl: Sized {
    fn FoundItem();
    fn EnterFolder();
    fn LeaveFolder();
    fn InitializeProgressDialog();
}
impl ::windows::core::RuntimeName for INamespaceWalkCB {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INamespaceWalkCB";
}
impl INamespaceWalkCBVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INamespaceWalkCBImpl, const OFFSET: isize>() -> INamespaceWalkCBVtbl {
        unsafe extern "system" fn FoundItem<Impl: INamespaceWalkCBImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psf: ::windows::core::RawPtr, pidl: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FoundItem(&*(&psf as *const <IShellFolder as ::windows::core::Abi>::Abi as *const <IShellFolder as ::windows::core::DefaultType>::DefaultType), &*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnterFolder<Impl: INamespaceWalkCBImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psf: ::windows::core::RawPtr, pidl: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnterFolder(&*(&psf as *const <IShellFolder as ::windows::core::Abi>::Abi as *const <IShellFolder as ::windows::core::DefaultType>::DefaultType), &*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LeaveFolder<Impl: INamespaceWalkCBImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psf: ::windows::core::RawPtr, pidl: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).LeaveFolder(&*(&psf as *const <IShellFolder as ::windows::core::Abi>::Abi as *const <IShellFolder as ::windows::core::DefaultType>::DefaultType), &*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InitializeProgressDialog<Impl: INamespaceWalkCBImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsztitle: *mut super::super::Foundation::PWSTR, ppszcancel: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InitializeProgressDialog(::core::mem::transmute_copy(&ppsztitle), ::core::mem::transmute_copy(&ppszcancel)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INamespaceWalkCB>, ::windows::core::GetTrustLevel, FoundItem::<Impl, OFFSET>, EnterFolder::<Impl, OFFSET>, LeaveFolder::<Impl, OFFSET>, InitializeProgressDialog::<Impl, OFFSET>)
    }
}
pub trait INamespaceWalkCB2Impl: Sized + INamespaceWalkCBImpl {
    fn WalkComplete();
}
impl ::windows::core::RuntimeName for INamespaceWalkCB2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INamespaceWalkCB2";
}
impl INamespaceWalkCB2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INamespaceWalkCB2Impl, const OFFSET: isize>() -> INamespaceWalkCB2Vtbl {
        unsafe extern "system" fn WalkComplete<Impl: INamespaceWalkCB2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hr: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WalkComplete(hr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INamespaceWalkCB2>, ::windows::core::GetTrustLevel, WalkComplete::<Impl, OFFSET>)
    }
}
pub trait INetworkFolderInternalImpl: Sized {
    fn GetResourceDisplayType();
    fn GetIDList();
    fn GetProvider();
}
impl ::windows::core::RuntimeName for INetworkFolderInternal {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INetworkFolderInternal";
}
impl INetworkFolderInternalVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INetworkFolderInternalImpl, const OFFSET: isize>() -> INetworkFolderInternalVtbl {
        unsafe extern "system" fn GetResourceDisplayType<Impl: INetworkFolderInternalImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, displaytype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetResourceDisplayType(::core::mem::transmute_copy(&displaytype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIDList<Impl: INetworkFolderInternalImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idlist: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIDList(::core::mem::transmute_copy(&idlist)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProvider<Impl: INetworkFolderInternalImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, itemidcount: u32, itemids: *const *const Common::ITEMIDLIST, providermaxlength: u32, provider: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProvider(itemidcount, &*(&itemids as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), providermaxlength, ::core::mem::transmute_copy(&provider)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INetworkFolderInternal>, ::windows::core::GetTrustLevel, GetResourceDisplayType::<Impl, OFFSET>, GetIDList::<Impl, OFFSET>, GetProvider::<Impl, OFFSET>)
    }
}
pub trait INewMenuClientImpl: Sized {
    fn IncludeItems();
    fn SelectAndEditItem();
}
impl ::windows::core::RuntimeName for INewMenuClient {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INewMenuClient";
}
impl INewMenuClientVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INewMenuClientImpl, const OFFSET: isize>() -> INewMenuClientVtbl {
        unsafe extern "system" fn IncludeItems<Impl: INewMenuClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IncludeItems(::core::mem::transmute_copy(&pflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SelectAndEditItem<Impl: INewMenuClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidlitem: *const Common::ITEMIDLIST, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SelectAndEditItem(&*(&pidlitem as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INewMenuClient>, ::windows::core::GetTrustLevel, IncludeItems::<Impl, OFFSET>, SelectAndEditItem::<Impl, OFFSET>)
    }
}
pub trait INewShortcutHookAImpl: Sized {
    fn SetReferent();
    fn GetReferent();
    fn SetFolder();
    fn GetFolder();
    fn GetName();
    fn GetExtension();
}
impl ::windows::core::RuntimeName for INewShortcutHookA {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INewShortcutHookA";
}
impl INewShortcutHookAVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INewShortcutHookAImpl, const OFFSET: isize>() -> INewShortcutHookAVtbl {
        unsafe extern "system" fn SetReferent<Impl: INewShortcutHookAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcszreferent: super::super::Foundation::PSTR, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetReferent(&*(&pcszreferent as *const <super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetReferent<Impl: INewShortcutHookAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszreferent: super::super::Foundation::PSTR, cchreferent: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetReferent(::core::mem::transmute_copy(&pszreferent), cchreferent) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFolder<Impl: INewShortcutHookAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcszfolder: super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFolder(&*(&pcszfolder as *const <super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolder<Impl: INewShortcutHookAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfolder: super::super::Foundation::PSTR, cchfolder: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolder(::core::mem::transmute_copy(&pszfolder), cchfolder) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetName<Impl: INewShortcutHookAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::Foundation::PSTR, cchname: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&pszname), cchname) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtension<Impl: INewShortcutHookAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszextension: super::super::Foundation::PSTR, cchextension: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExtension(::core::mem::transmute_copy(&pszextension), cchextension) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INewShortcutHookA>, ::windows::core::GetTrustLevel, SetReferent::<Impl, OFFSET>, GetReferent::<Impl, OFFSET>, SetFolder::<Impl, OFFSET>, GetFolder::<Impl, OFFSET>, GetName::<Impl, OFFSET>, GetExtension::<Impl, OFFSET>)
    }
}
pub trait INewShortcutHookWImpl: Sized {
    fn SetReferent();
    fn GetReferent();
    fn SetFolder();
    fn GetFolder();
    fn GetName();
    fn GetExtension();
}
impl ::windows::core::RuntimeName for INewShortcutHookW {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INewShortcutHookW";
}
impl INewShortcutHookWVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INewShortcutHookWImpl, const OFFSET: isize>() -> INewShortcutHookWVtbl {
        unsafe extern "system" fn SetReferent<Impl: INewShortcutHookWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcszreferent: super::super::Foundation::PWSTR, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetReferent(&*(&pcszreferent as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetReferent<Impl: INewShortcutHookWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszreferent: super::super::Foundation::PWSTR, cchreferent: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetReferent(::core::mem::transmute_copy(&pszreferent), cchreferent) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFolder<Impl: INewShortcutHookWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcszfolder: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFolder(&*(&pcszfolder as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolder<Impl: INewShortcutHookWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfolder: super::super::Foundation::PWSTR, cchfolder: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolder(::core::mem::transmute_copy(&pszfolder), cchfolder) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetName<Impl: INewShortcutHookWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::Foundation::PWSTR, cchname: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&pszname), cchname) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtension<Impl: INewShortcutHookWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszextension: super::super::Foundation::PWSTR, cchextension: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExtension(::core::mem::transmute_copy(&pszextension), cchextension) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INewShortcutHookW>, ::windows::core::GetTrustLevel, SetReferent::<Impl, OFFSET>, GetReferent::<Impl, OFFSET>, SetFolder::<Impl, OFFSET>, GetFolder::<Impl, OFFSET>, GetName::<Impl, OFFSET>, GetExtension::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait INewWDEventsImpl: Sized + IWebWizardHostImpl + IDispatchImpl {
    fn PassportAuthenticate();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for INewWDEvents {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INewWDEvents";
}
#[cfg(feature = "Win32_System_Com")]
impl INewWDEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INewWDEventsImpl, const OFFSET: isize>() -> INewWDEventsVtbl {
        unsafe extern "system" fn PassportAuthenticate<Impl: INewWDEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrsigninurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pvfauthenitcated: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PassportAuthenticate(&*(&bstrsigninurl as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pvfauthenitcated)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INewWDEvents>, ::windows::core::GetTrustLevel, PassportAuthenticate::<Impl, OFFSET>)
    }
}
pub trait INewWindowManagerImpl: Sized {
    fn EvaluateNewWindow();
}
impl ::windows::core::RuntimeName for INewWindowManager {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INewWindowManager";
}
impl INewWindowManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INewWindowManagerImpl, const OFFSET: isize>() -> INewWindowManagerVtbl {
        unsafe extern "system" fn EvaluateNewWindow<Impl: INewWindowManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszurl: super::super::Foundation::PWSTR, pszname: super::super::Foundation::PWSTR, pszurlcontext: super::super::Foundation::PWSTR, pszfeatures: super::super::Foundation::PWSTR, freplace: super::super::Foundation::BOOL, dwflags: u32, dwuseractiontime: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EvaluateNewWindow(
                &*(&pszurl as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszurlcontext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszfeatures as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&freplace as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType),
                dwflags,
                dwuseractiontime,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INewWindowManager>, ::windows::core::GetTrustLevel, EvaluateNewWindow::<Impl, OFFSET>)
    }
}
pub trait INotifyReplicaImpl: Sized {
    fn YouAreAReplica();
}
impl ::windows::core::RuntimeName for INotifyReplica {
    const NAME: &'static str = "Windows.Win32.UI.Shell.INotifyReplica";
}
impl INotifyReplicaVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: INotifyReplicaImpl, const OFFSET: isize>() -> INotifyReplicaVtbl {
        unsafe extern "system" fn YouAreAReplica<Impl: INotifyReplicaImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcotherreplicas: u32, rgpmkotherreplicas: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).YouAreAReplica(ulcotherreplicas, &*(&rgpmkotherreplicas as *const <super::super::System::Com::IMoniker as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IMoniker as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<INotifyReplica>, ::windows::core::GetTrustLevel, YouAreAReplica::<Impl, OFFSET>)
    }
}
pub trait IObjMgrImpl: Sized {
    fn Append();
    fn Remove();
}
impl ::windows::core::RuntimeName for IObjMgr {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IObjMgr";
}
impl IObjMgrVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IObjMgrImpl, const OFFSET: isize>() -> IObjMgrVtbl {
        unsafe extern "system" fn Append<Impl: IObjMgrImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Append(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Remove<Impl: IObjMgrImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Remove(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IObjMgr>, ::windows::core::GetTrustLevel, Append::<Impl, OFFSET>, Remove::<Impl, OFFSET>)
    }
}
pub trait IObjectProviderImpl: Sized {
    fn QueryObject();
}
impl ::windows::core::RuntimeName for IObjectProvider {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IObjectProvider";
}
impl IObjectProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IObjectProviderImpl, const OFFSET: isize>() -> IObjectProviderVtbl {
        unsafe extern "system" fn QueryObject<Impl: IObjectProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guidobject: *const ::windows::core::GUID, riid: *const ::windows::core::GUID, ppvout: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryObject(&*(&guidobject as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppvout)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IObjectProvider>, ::windows::core::GetTrustLevel, QueryObject::<Impl, OFFSET>)
    }
}
pub trait IObjectWithAppUserModelIDImpl: Sized {
    fn SetAppID();
    fn GetAppID();
}
impl ::windows::core::RuntimeName for IObjectWithAppUserModelID {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IObjectWithAppUserModelID";
}
impl IObjectWithAppUserModelIDVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IObjectWithAppUserModelIDImpl, const OFFSET: isize>() -> IObjectWithAppUserModelIDVtbl {
        unsafe extern "system" fn SetAppID<Impl: IObjectWithAppUserModelIDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszappid: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAppID(&*(&pszappid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAppID<Impl: IObjectWithAppUserModelIDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszappid: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAppID(::core::mem::transmute_copy(&ppszappid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IObjectWithAppUserModelID>, ::windows::core::GetTrustLevel, SetAppID::<Impl, OFFSET>, GetAppID::<Impl, OFFSET>)
    }
}
pub trait IObjectWithBackReferencesImpl: Sized {
    fn RemoveBackReferences();
}
impl ::windows::core::RuntimeName for IObjectWithBackReferences {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IObjectWithBackReferences";
}
impl IObjectWithBackReferencesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IObjectWithBackReferencesImpl, const OFFSET: isize>() -> IObjectWithBackReferencesVtbl {
        unsafe extern "system" fn RemoveBackReferences<Impl: IObjectWithBackReferencesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveBackReferences() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IObjectWithBackReferences>, ::windows::core::GetTrustLevel, RemoveBackReferences::<Impl, OFFSET>)
    }
}
pub trait IObjectWithCancelEventImpl: Sized {
    fn GetCancelEvent();
}
impl ::windows::core::RuntimeName for IObjectWithCancelEvent {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IObjectWithCancelEvent";
}
impl IObjectWithCancelEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IObjectWithCancelEventImpl, const OFFSET: isize>() -> IObjectWithCancelEventVtbl {
        unsafe extern "system" fn GetCancelEvent<Impl: IObjectWithCancelEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phevent: *mut super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCancelEvent(::core::mem::transmute_copy(&phevent)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IObjectWithCancelEvent>, ::windows::core::GetTrustLevel, GetCancelEvent::<Impl, OFFSET>)
    }
}
pub trait IObjectWithFolderEnumModeImpl: Sized {
    fn SetMode();
    fn GetMode();
}
impl ::windows::core::RuntimeName for IObjectWithFolderEnumMode {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IObjectWithFolderEnumMode";
}
impl IObjectWithFolderEnumModeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IObjectWithFolderEnumModeImpl, const OFFSET: isize>() -> IObjectWithFolderEnumModeVtbl {
        unsafe extern "system" fn SetMode<Impl: IObjectWithFolderEnumModeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, femode: FOLDER_ENUM_MODE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetMode(femode) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMode<Impl: IObjectWithFolderEnumModeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfemode: *mut FOLDER_ENUM_MODE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMode(::core::mem::transmute_copy(&pfemode)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IObjectWithFolderEnumMode>, ::windows::core::GetTrustLevel, SetMode::<Impl, OFFSET>, GetMode::<Impl, OFFSET>)
    }
}
pub trait IObjectWithProgIDImpl: Sized {
    fn SetProgID();
    fn GetProgID();
}
impl ::windows::core::RuntimeName for IObjectWithProgID {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IObjectWithProgID";
}
impl IObjectWithProgIDVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IObjectWithProgIDImpl, const OFFSET: isize>() -> IObjectWithProgIDVtbl {
        unsafe extern "system" fn SetProgID<Impl: IObjectWithProgIDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszprogid: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetProgID(&*(&pszprogid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProgID<Impl: IObjectWithProgIDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszprogid: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProgID(::core::mem::transmute_copy(&ppszprogid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IObjectWithProgID>, ::windows::core::GetTrustLevel, SetProgID::<Impl, OFFSET>, GetProgID::<Impl, OFFSET>)
    }
}
pub trait IObjectWithSelectionImpl: Sized {
    fn SetSelection();
    fn GetSelection();
}
impl ::windows::core::RuntimeName for IObjectWithSelection {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IObjectWithSelection";
}
impl IObjectWithSelectionVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IObjectWithSelectionImpl, const OFFSET: isize>() -> IObjectWithSelectionVtbl {
        unsafe extern "system" fn SetSelection<Impl: IObjectWithSelectionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psia: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetSelection(&*(&psia as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSelection<Impl: IObjectWithSelectionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSelection(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IObjectWithSelection>, ::windows::core::GetTrustLevel, SetSelection::<Impl, OFFSET>, GetSelection::<Impl, OFFSET>)
    }
}
pub trait IOpenControlPanelImpl: Sized {
    fn Open();
    fn GetPath();
    fn GetCurrentView();
}
impl ::windows::core::RuntimeName for IOpenControlPanel {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IOpenControlPanel";
}
impl IOpenControlPanelVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IOpenControlPanelImpl, const OFFSET: isize>() -> IOpenControlPanelVtbl {
        unsafe extern "system" fn Open<Impl: IOpenControlPanelImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::Foundation::PWSTR, pszpage: super::super::Foundation::PWSTR, punksite: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Open(
                &*(&pszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszpage as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&punksite as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPath<Impl: IOpenControlPanelImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::Foundation::PWSTR, pszpath: super::super::Foundation::PWSTR, cchpath: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPath(&*(&pszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pszpath), cchpath) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentView<Impl: IOpenControlPanelImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pview: *mut CPVIEW) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentView(::core::mem::transmute_copy(&pview)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IOpenControlPanel>, ::windows::core::GetTrustLevel, Open::<Impl, OFFSET>, GetPath::<Impl, OFFSET>, GetCurrentView::<Impl, OFFSET>)
    }
}
pub trait IOpenSearchSourceImpl: Sized {
    fn GetResults();
}
impl ::windows::core::RuntimeName for IOpenSearchSource {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IOpenSearchSource";
}
impl IOpenSearchSourceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IOpenSearchSourceImpl, const OFFSET: isize>() -> IOpenSearchSourceVtbl {
        unsafe extern "system" fn GetResults<Impl: IOpenSearchSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pszquery: super::super::Foundation::PWSTR, dwstartindex: u32, dwcount: u32, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetResults(
                &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&pszquery as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwstartindex,
                dwcount,
                &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppv),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IOpenSearchSource>, ::windows::core::GetTrustLevel, GetResults::<Impl, OFFSET>)
    }
}
pub trait IOperationsProgressDialogImpl: Sized {
    fn StartProgressDialog();
    fn StopProgressDialog();
    fn SetOperation();
    fn SetMode();
    fn UpdateProgress();
    fn UpdateLocations();
    fn ResetTimer();
    fn PauseTimer();
    fn ResumeTimer();
    fn GetMilliseconds();
    fn GetOperationStatus();
}
impl ::windows::core::RuntimeName for IOperationsProgressDialog {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IOperationsProgressDialog";
}
impl IOperationsProgressDialogVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IOperationsProgressDialogImpl, const OFFSET: isize>() -> IOperationsProgressDialogVtbl {
        unsafe extern "system" fn StartProgressDialog<Impl: IOperationsProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartProgressDialog(&*(&hwndowner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StopProgressDialog<Impl: IOperationsProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StopProgressDialog() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOperation<Impl: IOperationsProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, action: SPACTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetOperation(action) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetMode<Impl: IOperationsProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetMode(mode) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateProgress<Impl: IOperationsProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ullpointscurrent: u64, ullpointstotal: u64, ullsizecurrent: u64, ullsizetotal: u64, ullitemscurrent: u64, ullitemstotal: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateProgress(ullpointscurrent, ullpointstotal, ullsizecurrent, ullsizetotal, ullitemscurrent, ullitemstotal) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateLocations<Impl: IOperationsProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psisource: ::windows::core::RawPtr, psitarget: ::windows::core::RawPtr, psiitem: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateLocations(&*(&psisource as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psitarget as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psiitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetTimer<Impl: IOperationsProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ResetTimer() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PauseTimer<Impl: IOperationsProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PauseTimer() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResumeTimer<Impl: IOperationsProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ResumeTimer() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMilliseconds<Impl: IOperationsProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pullelapsed: *mut u64, pullremaining: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMilliseconds(::core::mem::transmute_copy(&pullelapsed), ::core::mem::transmute_copy(&pullremaining)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOperationStatus<Impl: IOperationsProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, popstatus: *mut PropertiesSystem::PDOPSTATUS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOperationStatus(::core::mem::transmute_copy(&popstatus)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IOperationsProgressDialog>,
            ::windows::core::GetTrustLevel,
            StartProgressDialog::<Impl, OFFSET>,
            StopProgressDialog::<Impl, OFFSET>,
            SetOperation::<Impl, OFFSET>,
            SetMode::<Impl, OFFSET>,
            UpdateProgress::<Impl, OFFSET>,
            UpdateLocations::<Impl, OFFSET>,
            ResetTimer::<Impl, OFFSET>,
            PauseTimer::<Impl, OFFSET>,
            ResumeTimer::<Impl, OFFSET>,
            GetMilliseconds::<Impl, OFFSET>,
            GetOperationStatus::<Impl, OFFSET>,
        )
    }
}
pub trait IPackageDebugSettingsImpl: Sized {
    fn EnableDebugging();
    fn DisableDebugging();
    fn Suspend();
    fn Resume();
    fn TerminateAllProcesses();
    fn SetTargetSessionId();
    fn EnumerateBackgroundTasks();
    fn ActivateBackgroundTask();
    fn StartServicing();
    fn StopServicing();
    fn StartSessionRedirection();
    fn StopSessionRedirection();
    fn GetPackageExecutionState();
    fn RegisterForPackageStateChanges();
    fn UnregisterForPackageStateChanges();
}
impl ::windows::core::RuntimeName for IPackageDebugSettings {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPackageDebugSettings";
}
impl IPackageDebugSettingsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPackageDebugSettingsImpl, const OFFSET: isize>() -> IPackageDebugSettingsVtbl {
        unsafe extern "system" fn EnableDebugging<Impl: IPackageDebugSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, packagefullname: super::super::Foundation::PWSTR, debuggercommandline: super::super::Foundation::PWSTR, environment: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnableDebugging(
                &*(&packagefullname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&debuggercommandline as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisableDebugging<Impl: IPackageDebugSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, packagefullname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DisableDebugging(&*(&packagefullname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Suspend<Impl: IPackageDebugSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, packagefullname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Suspend(&*(&packagefullname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Resume<Impl: IPackageDebugSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, packagefullname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Resume(&*(&packagefullname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateAllProcesses<Impl: IPackageDebugSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, packagefullname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TerminateAllProcesses(&*(&packagefullname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTargetSessionId<Impl: IPackageDebugSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sessionid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTargetSessionId(sessionid) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateBackgroundTasks<Impl: IPackageDebugSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, packagefullname: super::super::Foundation::PWSTR, taskcount: *mut u32, taskids: *mut *mut ::windows::core::GUID, tasknames: *mut *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateBackgroundTasks(&*(&packagefullname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&taskcount), ::core::mem::transmute_copy(&taskids), ::core::mem::transmute_copy(&tasknames)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ActivateBackgroundTask<Impl: IPackageDebugSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, taskid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ActivateBackgroundTask(&*(&taskid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServicing<Impl: IPackageDebugSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, packagefullname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartServicing(&*(&packagefullname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StopServicing<Impl: IPackageDebugSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, packagefullname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StopServicing(&*(&packagefullname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSessionRedirection<Impl: IPackageDebugSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, packagefullname: super::super::Foundation::PWSTR, sessionid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartSessionRedirection(&*(&packagefullname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), sessionid) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StopSessionRedirection<Impl: IPackageDebugSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, packagefullname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StopSessionRedirection(&*(&packagefullname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPackageExecutionState<Impl: IPackageDebugSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, packagefullname: super::super::Foundation::PWSTR, packageexecutionstate: *mut PACKAGE_EXECUTION_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPackageExecutionState(&*(&packagefullname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&packageexecutionstate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterForPackageStateChanges<Impl: IPackageDebugSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, packagefullname: super::super::Foundation::PWSTR, ppackageexecutionstatechangenotification: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RegisterForPackageStateChanges(&*(&packagefullname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&ppackageexecutionstatechangenotification as *const <IPackageExecutionStateChangeNotification as ::windows::core::Abi>::Abi as *const <IPackageExecutionStateChangeNotification as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnregisterForPackageStateChanges<Impl: IPackageDebugSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UnregisterForPackageStateChanges(dwcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IPackageDebugSettings>,
            ::windows::core::GetTrustLevel,
            EnableDebugging::<Impl, OFFSET>,
            DisableDebugging::<Impl, OFFSET>,
            Suspend::<Impl, OFFSET>,
            Resume::<Impl, OFFSET>,
            TerminateAllProcesses::<Impl, OFFSET>,
            SetTargetSessionId::<Impl, OFFSET>,
            EnumerateBackgroundTasks::<Impl, OFFSET>,
            ActivateBackgroundTask::<Impl, OFFSET>,
            StartServicing::<Impl, OFFSET>,
            StopServicing::<Impl, OFFSET>,
            StartSessionRedirection::<Impl, OFFSET>,
            StopSessionRedirection::<Impl, OFFSET>,
            GetPackageExecutionState::<Impl, OFFSET>,
            RegisterForPackageStateChanges::<Impl, OFFSET>,
            UnregisterForPackageStateChanges::<Impl, OFFSET>,
        )
    }
}
pub trait IPackageDebugSettings2Impl: Sized + IPackageDebugSettingsImpl {
    fn EnumerateApps();
}
impl ::windows::core::RuntimeName for IPackageDebugSettings2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPackageDebugSettings2";
}
impl IPackageDebugSettings2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPackageDebugSettings2Impl, const OFFSET: isize>() -> IPackageDebugSettings2Vtbl {
        unsafe extern "system" fn EnumerateApps<Impl: IPackageDebugSettings2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, packagefullname: super::super::Foundation::PWSTR, appcount: *mut u32, appusermodelids: *mut *mut super::super::Foundation::PWSTR, appdisplaynames: *mut *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumerateApps(&*(&packagefullname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&appcount), ::core::mem::transmute_copy(&appusermodelids), ::core::mem::transmute_copy(&appdisplaynames)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IPackageDebugSettings2>, ::windows::core::GetTrustLevel, EnumerateApps::<Impl, OFFSET>)
    }
}
pub trait IPackageExecutionStateChangeNotificationImpl: Sized {
    fn OnStateChanged();
}
impl ::windows::core::RuntimeName for IPackageExecutionStateChangeNotification {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPackageExecutionStateChangeNotification";
}
impl IPackageExecutionStateChangeNotificationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPackageExecutionStateChangeNotificationImpl, const OFFSET: isize>() -> IPackageExecutionStateChangeNotificationVtbl {
        unsafe extern "system" fn OnStateChanged<Impl: IPackageExecutionStateChangeNotificationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszpackagefullname: super::super::Foundation::PWSTR, pesnewstate: PACKAGE_EXECUTION_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnStateChanged(&*(&pszpackagefullname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), pesnewstate) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IPackageExecutionStateChangeNotification>, ::windows::core::GetTrustLevel, OnStateChanged::<Impl, OFFSET>)
    }
}
pub trait IParentAndItemImpl: Sized {
    fn SetParentAndItem();
    fn GetParentAndItem();
}
impl ::windows::core::RuntimeName for IParentAndItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IParentAndItem";
}
impl IParentAndItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IParentAndItemImpl, const OFFSET: isize>() -> IParentAndItemVtbl {
        unsafe extern "system" fn SetParentAndItem<Impl: IParentAndItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidlparent: *const Common::ITEMIDLIST, psf: ::windows::core::RawPtr, pidlchild: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetParentAndItem(&*(&pidlparent as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), &*(&psf as *const <IShellFolder as ::windows::core::Abi>::Abi as *const <IShellFolder as ::windows::core::DefaultType>::DefaultType), &*(&pidlchild as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetParentAndItem<Impl: IParentAndItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppidlparent: *mut *mut Common::ITEMIDLIST, ppsf: *mut ::windows::core::RawPtr, ppidlchild: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetParentAndItem(::core::mem::transmute_copy(&ppidlparent), ::core::mem::transmute_copy(&ppsf), ::core::mem::transmute_copy(&ppidlchild)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IParentAndItem>, ::windows::core::GetTrustLevel, SetParentAndItem::<Impl, OFFSET>, GetParentAndItem::<Impl, OFFSET>)
    }
}
pub trait IParseAndCreateItemImpl: Sized {
    fn SetItem();
    fn GetItem();
}
impl ::windows::core::RuntimeName for IParseAndCreateItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IParseAndCreateItem";
}
impl IParseAndCreateItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IParseAndCreateItemImpl, const OFFSET: isize>() -> IParseAndCreateItemVtbl {
        unsafe extern "system" fn SetItem<Impl: IParseAndCreateItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetItem(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItem<Impl: IParseAndCreateItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItem(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IParseAndCreateItem>, ::windows::core::GetTrustLevel, SetItem::<Impl, OFFSET>, GetItem::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IPersistFolderImpl: Sized + IPersistImpl {
    fn Initialize();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IPersistFolder {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPersistFolder";
}
#[cfg(feature = "Win32_System_Com")]
impl IPersistFolderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPersistFolderImpl, const OFFSET: isize>() -> IPersistFolderVtbl {
        unsafe extern "system" fn Initialize<Impl: IPersistFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IPersistFolder>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IPersistFolder2Impl: Sized + IPersistFolderImpl + IPersistImpl {
    fn GetCurFolder();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IPersistFolder2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPersistFolder2";
}
#[cfg(feature = "Win32_System_Com")]
impl IPersistFolder2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPersistFolder2Impl, const OFFSET: isize>() -> IPersistFolder2Vtbl {
        unsafe extern "system" fn GetCurFolder<Impl: IPersistFolder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurFolder(::core::mem::transmute_copy(&ppidl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IPersistFolder2>, ::windows::core::GetTrustLevel, GetCurFolder::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IPersistFolder3Impl: Sized + IPersistFolder2Impl + IPersistFolderImpl + IPersistImpl {
    fn InitializeEx();
    fn GetFolderTargetInfo();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IPersistFolder3 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPersistFolder3";
}
#[cfg(feature = "Win32_System_Com")]
impl IPersistFolder3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPersistFolder3Impl, const OFFSET: isize>() -> IPersistFolder3Vtbl {
        unsafe extern "system" fn InitializeEx<Impl: IPersistFolder3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbc: ::windows::core::RawPtr, pidlroot: *const Common::ITEMIDLIST, ppfti: *const PERSIST_FOLDER_TARGET_INFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InitializeEx(
                &*(&pbc as *const <super::super::System::Com::IBindCtx as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindCtx as ::windows::core::DefaultType>::DefaultType),
                &*(&pidlroot as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType),
                &*(&ppfti as *const <PERSIST_FOLDER_TARGET_INFO as ::windows::core::Abi>::Abi as *const <PERSIST_FOLDER_TARGET_INFO as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolderTargetInfo<Impl: IPersistFolder3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppfti: *mut PERSIST_FOLDER_TARGET_INFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolderTargetInfo(::core::mem::transmute_copy(&ppfti)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IPersistFolder3>, ::windows::core::GetTrustLevel, InitializeEx::<Impl, OFFSET>, GetFolderTargetInfo::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IPersistIDListImpl: Sized + IPersistImpl {
    fn SetIDList();
    fn GetIDList();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IPersistIDList {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPersistIDList";
}
#[cfg(feature = "Win32_System_Com")]
impl IPersistIDListVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPersistIDListImpl, const OFFSET: isize>() -> IPersistIDListVtbl {
        unsafe extern "system" fn SetIDList<Impl: IPersistIDListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetIDList(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIDList<Impl: IPersistIDListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIDList(::core::mem::transmute_copy(&ppidl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IPersistIDList>, ::windows::core::GetTrustLevel, SetIDList::<Impl, OFFSET>, GetIDList::<Impl, OFFSET>)
    }
}
pub trait IPreviewHandlerImpl: Sized {
    fn SetWindow();
    fn SetRect();
    fn DoPreview();
    fn Unload();
    fn SetFocus();
    fn QueryFocus();
    fn TranslateAccelerator();
}
impl ::windows::core::RuntimeName for IPreviewHandler {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPreviewHandler";
}
impl IPreviewHandlerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPreviewHandlerImpl, const OFFSET: isize>() -> IPreviewHandlerVtbl {
        unsafe extern "system" fn SetWindow<Impl: IPreviewHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetWindow(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&prc as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRect<Impl: IPreviewHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prc: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetRect(&*(&prc as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DoPreview<Impl: IPreviewHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DoPreview() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Unload<Impl: IPreviewHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Unload() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFocus<Impl: IPreviewHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFocus() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryFocus<Impl: IPreviewHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryFocus(::core::mem::transmute_copy(&phwnd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TranslateAccelerator<Impl: IPreviewHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TranslateAccelerator(&*(&pmsg as *const <super::WindowsAndMessaging::MSG as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::MSG as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IPreviewHandler>, ::windows::core::GetTrustLevel, SetWindow::<Impl, OFFSET>, SetRect::<Impl, OFFSET>, DoPreview::<Impl, OFFSET>, Unload::<Impl, OFFSET>, SetFocus::<Impl, OFFSET>, QueryFocus::<Impl, OFFSET>, TranslateAccelerator::<Impl, OFFSET>)
    }
}
pub trait IPreviewHandlerFrameImpl: Sized {
    fn GetWindowContext();
    fn TranslateAccelerator();
}
impl ::windows::core::RuntimeName for IPreviewHandlerFrame {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPreviewHandlerFrame";
}
impl IPreviewHandlerFrameVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPreviewHandlerFrameImpl, const OFFSET: isize>() -> IPreviewHandlerFrameVtbl {
        unsafe extern "system" fn GetWindowContext<Impl: IPreviewHandlerFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pinfo: *mut PREVIEWHANDLERFRAMEINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetWindowContext(::core::mem::transmute_copy(&pinfo)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TranslateAccelerator<Impl: IPreviewHandlerFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TranslateAccelerator(&*(&pmsg as *const <super::WindowsAndMessaging::MSG as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::MSG as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IPreviewHandlerFrame>, ::windows::core::GetTrustLevel, GetWindowContext::<Impl, OFFSET>, TranslateAccelerator::<Impl, OFFSET>)
    }
}
pub trait IPreviewHandlerVisualsImpl: Sized {
    fn SetBackgroundColor();
    fn SetFont();
    fn SetTextColor();
}
impl ::windows::core::RuntimeName for IPreviewHandlerVisuals {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPreviewHandlerVisuals";
}
impl IPreviewHandlerVisualsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPreviewHandlerVisualsImpl, const OFFSET: isize>() -> IPreviewHandlerVisualsVtbl {
        unsafe extern "system" fn SetBackgroundColor<Impl: IPreviewHandlerVisualsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, color: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBackgroundColor(color) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFont<Impl: IPreviewHandlerVisualsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plf: *const super::super::Graphics::Gdi::LOGFONTW) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFont(&*(&plf as *const <super::super::Graphics::Gdi::LOGFONTW as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::LOGFONTW as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextColor<Impl: IPreviewHandlerVisualsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, color: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTextColor(color) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IPreviewHandlerVisuals>, ::windows::core::GetTrustLevel, SetBackgroundColor::<Impl, OFFSET>, SetFont::<Impl, OFFSET>, SetTextColor::<Impl, OFFSET>)
    }
}
pub trait IPreviewItemImpl: Sized + IRelatedItemImpl {}
impl ::windows::core::RuntimeName for IPreviewItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPreviewItem";
}
impl IPreviewItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPreviewItemImpl, const OFFSET: isize>() -> IPreviewItemVtbl {
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IPreviewItem>, ::windows::core::GetTrustLevel)
    }
}
pub trait IPreviousVersionsInfoImpl: Sized {
    fn AreSnapshotsAvailable();
}
impl ::windows::core::RuntimeName for IPreviousVersionsInfo {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPreviousVersionsInfo";
}
impl IPreviousVersionsInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPreviousVersionsInfoImpl, const OFFSET: isize>() -> IPreviousVersionsInfoVtbl {
        unsafe extern "system" fn AreSnapshotsAvailable<Impl: IPreviousVersionsInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszpath: super::super::Foundation::PWSTR, foktobeslow: super::super::Foundation::BOOL, pfavailable: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AreSnapshotsAvailable(&*(&pszpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&foktobeslow as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pfavailable)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IPreviousVersionsInfo>, ::windows::core::GetTrustLevel, AreSnapshotsAvailable::<Impl, OFFSET>)
    }
}
pub trait IProfferServiceImpl: Sized {
    fn ProfferService();
    fn RevokeService();
}
impl ::windows::core::RuntimeName for IProfferService {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IProfferService";
}
impl IProfferServiceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IProfferServiceImpl, const OFFSET: isize>() -> IProfferServiceVtbl {
        unsafe extern "system" fn ProfferService<Impl: IProfferServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, serviceid: *const ::windows::core::GUID, serviceprovider: ::windows::core::RawPtr, cookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ProfferService(&*(&serviceid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&serviceprovider as *const <super::super::System::Com::IServiceProvider as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IServiceProvider as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&cookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RevokeService<Impl: IProfferServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RevokeService(cookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IProfferService>, ::windows::core::GetTrustLevel, ProfferService::<Impl, OFFSET>, RevokeService::<Impl, OFFSET>)
    }
}
pub trait IProgressDialogImpl: Sized {
    fn StartProgressDialog();
    fn StopProgressDialog();
    fn SetTitle();
    fn SetAnimation();
    fn HasUserCancelled();
    fn SetProgress();
    fn SetProgress64();
    fn SetLine();
    fn SetCancelMsg();
    fn Timer();
}
impl ::windows::core::RuntimeName for IProgressDialog {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IProgressDialog";
}
impl IProgressDialogVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IProgressDialogImpl, const OFFSET: isize>() -> IProgressDialogVtbl {
        unsafe extern "system" fn StartProgressDialog<Impl: IProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, punkenablemodless: *mut ::core::ffi::c_void, dwflags: u32, pvresevered: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartProgressDialog(
                &*(&hwndparent as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&punkenablemodless as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                dwflags,
                &*(&pvresevered as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StopProgressDialog<Impl: IProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StopProgressDialog() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTitle<Impl: IProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwztitle: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTitle(&*(&pwztitle as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAnimation<Impl: IProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hinstanimation: super::super::Foundation::HINSTANCE, idanimation: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAnimation(&*(&hinstanimation as *const <super::super::Foundation::HINSTANCE as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HINSTANCE as ::windows::core::DefaultType>::DefaultType), idanimation) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HasUserCancelled<Impl: IProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HasUserCancelled() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProgress<Impl: IProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcompleted: u32, dwtotal: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetProgress(dwcompleted, dwtotal) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProgress64<Impl: IProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ullcompleted: u64, ulltotal: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetProgress64(ullcompleted, ulltotal) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLine<Impl: IProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwlinenum: u32, pwzstring: super::super::Foundation::PWSTR, fcompactpath: super::super::Foundation::BOOL, pvresevered: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetLine(
                dwlinenum,
                &*(&pwzstring as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&fcompactpath as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType),
                &*(&pvresevered as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCancelMsg<Impl: IProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwzcancelmsg: super::super::Foundation::PWSTR, pvresevered: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCancelMsg(&*(&pwzcancelmsg as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pvresevered as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Timer<Impl: IProgressDialogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtimeraction: u32, pvresevered: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Timer(dwtimeraction, &*(&pvresevered as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IProgressDialog>,
            ::windows::core::GetTrustLevel,
            StartProgressDialog::<Impl, OFFSET>,
            StopProgressDialog::<Impl, OFFSET>,
            SetTitle::<Impl, OFFSET>,
            SetAnimation::<Impl, OFFSET>,
            HasUserCancelled::<Impl, OFFSET>,
            SetProgress::<Impl, OFFSET>,
            SetProgress64::<Impl, OFFSET>,
            SetLine::<Impl, OFFSET>,
            SetCancelMsg::<Impl, OFFSET>,
            Timer::<Impl, OFFSET>,
        )
    }
}
pub trait IPropertyKeyStoreImpl: Sized {
    fn GetKeyCount();
    fn GetKeyAt();
    fn AppendKey();
    fn DeleteKey();
    fn IsKeyInStore();
    fn RemoveKey();
}
impl ::windows::core::RuntimeName for IPropertyKeyStore {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPropertyKeyStore";
}
impl IPropertyKeyStoreVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPropertyKeyStoreImpl, const OFFSET: isize>() -> IPropertyKeyStoreVtbl {
        unsafe extern "system" fn GetKeyCount<Impl: IPropertyKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, keycount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetKeyCount(::core::mem::transmute_copy(&keycount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKeyAt<Impl: IPropertyKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: i32, pkey: *mut PropertiesSystem::PROPERTYKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetKeyAt(index, ::core::mem::transmute_copy(&pkey)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendKey<Impl: IPropertyKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AppendKey(&*(&key as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DeleteKey<Impl: IPropertyKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DeleteKey(index) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsKeyInStore<Impl: IPropertyKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsKeyInStore(&*(&key as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveKey<Impl: IPropertyKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveKey(&*(&key as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IPropertyKeyStore>, ::windows::core::GetTrustLevel, GetKeyCount::<Impl, OFFSET>, GetKeyAt::<Impl, OFFSET>, AppendKey::<Impl, OFFSET>, DeleteKey::<Impl, OFFSET>, IsKeyInStore::<Impl, OFFSET>, RemoveKey::<Impl, OFFSET>)
    }
}
pub trait IPublishedAppImpl: Sized + IShellAppImpl {
    fn Install();
    fn GetPublishedAppInfo();
    fn Unschedule();
}
impl ::windows::core::RuntimeName for IPublishedApp {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPublishedApp";
}
impl IPublishedAppVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPublishedAppImpl, const OFFSET: isize>() -> IPublishedAppVtbl {
        unsafe extern "system" fn Install<Impl: IPublishedAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstinstall: *const super::super::Foundation::SYSTEMTIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Install(&*(&pstinstall as *const <super::super::Foundation::SYSTEMTIME as ::windows::core::Abi>::Abi as *const <super::super::Foundation::SYSTEMTIME as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPublishedAppInfo<Impl: IPublishedAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppai: *mut PUBAPPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPublishedAppInfo(&*(&ppai as *const <PUBAPPINFO as ::windows::core::Abi>::Abi as *const <PUBAPPINFO as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Unschedule<Impl: IPublishedAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Unschedule() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IPublishedApp>, ::windows::core::GetTrustLevel, Install::<Impl, OFFSET>, GetPublishedAppInfo::<Impl, OFFSET>, Unschedule::<Impl, OFFSET>)
    }
}
pub trait IPublishedApp2Impl: Sized + IPublishedAppImpl + IShellAppImpl {
    fn Install2();
}
impl ::windows::core::RuntimeName for IPublishedApp2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPublishedApp2";
}
impl IPublishedApp2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPublishedApp2Impl, const OFFSET: isize>() -> IPublishedApp2Vtbl {
        unsafe extern "system" fn Install2<Impl: IPublishedApp2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstinstall: *const super::super::Foundation::SYSTEMTIME, hwndparent: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Install2(&*(&pstinstall as *const <super::super::Foundation::SYSTEMTIME as ::windows::core::Abi>::Abi as *const <super::super::Foundation::SYSTEMTIME as ::windows::core::DefaultType>::DefaultType), &*(&hwndparent as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IPublishedApp2>, ::windows::core::GetTrustLevel, Install2::<Impl, OFFSET>)
    }
}
pub trait IPublishingWizardImpl: Sized + IWizardExtensionImpl {
    fn Initialize();
    fn GetTransferManifest();
}
impl ::windows::core::RuntimeName for IPublishingWizard {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IPublishingWizard";
}
impl IPublishingWizardVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPublishingWizardImpl, const OFFSET: isize>() -> IPublishingWizardVtbl {
        unsafe extern "system" fn Initialize<Impl: IPublishingWizardImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdo: ::windows::core::RawPtr, dwoptions: u32, pszservicescope: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(&*(&pdo as *const <super::super::System::Com::IDataObject as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDataObject as ::windows::core::DefaultType>::DefaultType), dwoptions, &*(&pszservicescope as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTransferManifest<Impl: IPublishingWizardImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phrfromtransfer: *mut ::windows::core::HRESULT, pdocmanifest: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTransferManifest(::core::mem::transmute_copy(&phrfromtransfer), ::core::mem::transmute_copy(&pdocmanifest)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IPublishingWizard>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>, GetTransferManifest::<Impl, OFFSET>)
    }
}
pub trait IQueryAssociationsImpl: Sized {
    fn Init();
    fn GetString();
    fn GetKey();
    fn GetData();
    fn GetEnum();
}
impl ::windows::core::RuntimeName for IQueryAssociations {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IQueryAssociations";
}
impl IQueryAssociationsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IQueryAssociationsImpl, const OFFSET: isize>() -> IQueryAssociationsVtbl {
        unsafe extern "system" fn Init<Impl: IQueryAssociationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, pszassoc: super::super::Foundation::PWSTR, hkprogid: super::super::System::Registry::HKEY, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Init(
                flags,
                &*(&pszassoc as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&hkprogid as *const <super::super::System::Registry::HKEY as ::windows::core::Abi>::Abi as *const <super::super::System::Registry::HKEY as ::windows::core::DefaultType>::DefaultType),
                &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetString<Impl: IQueryAssociationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, str: ASSOCSTR, pszextra: super::super::Foundation::PWSTR, pszout: super::super::Foundation::PWSTR, pcchout: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetString(flags, str, &*(&pszextra as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pszout), pcchout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKey<Impl: IQueryAssociationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, key: ASSOCKEY, pszextra: super::super::Foundation::PWSTR, phkeyout: *mut super::super::System::Registry::HKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetKey(flags, key, &*(&pszextra as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&phkeyout)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetData<Impl: IQueryAssociationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, data: ASSOCDATA, pszextra: super::super::Foundation::PWSTR, pvout: *mut ::core::ffi::c_void, pcbout: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetData(flags, data, &*(&pszextra as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pvout), pcbout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEnum<Impl: IQueryAssociationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, assocenum: ASSOCENUM, pszextra: super::super::Foundation::PWSTR, riid: *const ::windows::core::GUID, ppvout: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEnum(flags, assocenum, &*(&pszextra as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppvout)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IQueryAssociations>, ::windows::core::GetTrustLevel, Init::<Impl, OFFSET>, GetString::<Impl, OFFSET>, GetKey::<Impl, OFFSET>, GetData::<Impl, OFFSET>, GetEnum::<Impl, OFFSET>)
    }
}
pub trait IQueryCancelAutoPlayImpl: Sized {
    fn AllowAutoPlay();
}
impl ::windows::core::RuntimeName for IQueryCancelAutoPlay {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IQueryCancelAutoPlay";
}
impl IQueryCancelAutoPlayVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IQueryCancelAutoPlayImpl, const OFFSET: isize>() -> IQueryCancelAutoPlayVtbl {
        unsafe extern "system" fn AllowAutoPlay<Impl: IQueryCancelAutoPlayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszpath: super::super::Foundation::PWSTR, dwcontenttype: u32, pszlabel: super::super::Foundation::PWSTR, dwserialnumber: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AllowAutoPlay(&*(&pszpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwcontenttype, &*(&pszlabel as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwserialnumber) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IQueryCancelAutoPlay>, ::windows::core::GetTrustLevel, AllowAutoPlay::<Impl, OFFSET>)
    }
}
pub trait IQueryCodePageImpl: Sized {
    fn GetCodePage();
    fn SetCodePage();
}
impl ::windows::core::RuntimeName for IQueryCodePage {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IQueryCodePage";
}
impl IQueryCodePageVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IQueryCodePageImpl, const OFFSET: isize>() -> IQueryCodePageVtbl {
        unsafe extern "system" fn GetCodePage<Impl: IQueryCodePageImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, puicodepage: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCodePage(::core::mem::transmute_copy(&puicodepage)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCodePage<Impl: IQueryCodePageImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uicodepage: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCodePage(uicodepage) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IQueryCodePage>, ::windows::core::GetTrustLevel, GetCodePage::<Impl, OFFSET>, SetCodePage::<Impl, OFFSET>)
    }
}
pub trait IQueryContinueImpl: Sized {
    fn QueryContinue();
}
impl ::windows::core::RuntimeName for IQueryContinue {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IQueryContinue";
}
impl IQueryContinueVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IQueryContinueImpl, const OFFSET: isize>() -> IQueryContinueVtbl {
        unsafe extern "system" fn QueryContinue<Impl: IQueryContinueImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryContinue() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IQueryContinue>, ::windows::core::GetTrustLevel, QueryContinue::<Impl, OFFSET>)
    }
}
pub trait IQueryContinueWithStatusImpl: Sized + IQueryContinueImpl {
    fn SetStatusMessage();
}
impl ::windows::core::RuntimeName for IQueryContinueWithStatus {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IQueryContinueWithStatus";
}
impl IQueryContinueWithStatusVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IQueryContinueWithStatusImpl, const OFFSET: isize>() -> IQueryContinueWithStatusVtbl {
        unsafe extern "system" fn SetStatusMessage<Impl: IQueryContinueWithStatusImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetStatusMessage(&*(&psz as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IQueryContinueWithStatus>, ::windows::core::GetTrustLevel, SetStatusMessage::<Impl, OFFSET>)
    }
}
pub trait IQueryInfoImpl: Sized {
    fn GetInfoTip();
    fn GetInfoFlags();
}
impl ::windows::core::RuntimeName for IQueryInfo {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IQueryInfo";
}
impl IQueryInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IQueryInfoImpl, const OFFSET: isize>() -> IQueryInfoVtbl {
        unsafe extern "system" fn GetInfoTip<Impl: IQueryInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: QITIPF_FLAGS, ppwsztip: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInfoTip(dwflags, ::core::mem::transmute_copy(&ppwsztip)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInfoFlags<Impl: IQueryInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInfoFlags(::core::mem::transmute_copy(&pdwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IQueryInfo>, ::windows::core::GetTrustLevel, GetInfoTip::<Impl, OFFSET>, GetInfoFlags::<Impl, OFFSET>)
    }
}
pub trait IRegTreeItemImpl: Sized {
    fn GetCheckState();
    fn SetCheckState();
}
impl ::windows::core::RuntimeName for IRegTreeItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IRegTreeItem";
}
impl IRegTreeItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRegTreeItemImpl, const OFFSET: isize>() -> IRegTreeItemVtbl {
        unsafe extern "system" fn GetCheckState<Impl: IRegTreeItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbcheck: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCheckState(::core::mem::transmute_copy(&pbcheck)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCheckState<Impl: IRegTreeItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bcheck: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCheckState(&*(&bcheck as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IRegTreeItem>, ::windows::core::GetTrustLevel, GetCheckState::<Impl, OFFSET>, SetCheckState::<Impl, OFFSET>)
    }
}
pub trait IRelatedItemImpl: Sized {
    fn GetItemIDList();
    fn GetItem();
}
impl ::windows::core::RuntimeName for IRelatedItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IRelatedItem";
}
impl IRelatedItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRelatedItemImpl, const OFFSET: isize>() -> IRelatedItemVtbl {
        unsafe extern "system" fn GetItemIDList<Impl: IRelatedItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemIDList(::core::mem::transmute_copy(&ppidl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItem<Impl: IRelatedItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItem(::core::mem::transmute_copy(&ppsi)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IRelatedItem>, ::windows::core::GetTrustLevel, GetItemIDList::<Impl, OFFSET>, GetItem::<Impl, OFFSET>)
    }
}
pub trait IRemoteComputerImpl: Sized {
    fn Initialize();
}
impl ::windows::core::RuntimeName for IRemoteComputer {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IRemoteComputer";
}
impl IRemoteComputerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRemoteComputerImpl, const OFFSET: isize>() -> IRemoteComputerVtbl {
        unsafe extern "system" fn Initialize<Impl: IRemoteComputerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszmachine: super::super::Foundation::PWSTR, benumerating: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(&*(&pszmachine as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&benumerating as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IRemoteComputer>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>)
    }
}
pub trait IResolveShellLinkImpl: Sized {
    fn ResolveShellLink();
}
impl ::windows::core::RuntimeName for IResolveShellLink {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IResolveShellLink";
}
impl IResolveShellLinkVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IResolveShellLinkImpl, const OFFSET: isize>() -> IResolveShellLinkVtbl {
        unsafe extern "system" fn ResolveShellLink<Impl: IResolveShellLinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punklink: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, fflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ResolveShellLink(&*(&punklink as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), fflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IResolveShellLink>, ::windows::core::GetTrustLevel, ResolveShellLink::<Impl, OFFSET>)
    }
}
pub trait IResultsFolderImpl: Sized {
    fn AddItem();
    fn AddIDList();
    fn RemoveItem();
    fn RemoveIDList();
    fn RemoveAll();
}
impl ::windows::core::RuntimeName for IResultsFolder {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IResultsFolder";
}
impl IResultsFolderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IResultsFolderImpl, const OFFSET: isize>() -> IResultsFolderVtbl {
        unsafe extern "system" fn AddItem<Impl: IResultsFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddItem(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddIDList<Impl: IResultsFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, ppidladded: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddIDList(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppidladded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveItem<Impl: IResultsFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveItem(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveIDList<Impl: IResultsFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveIDList(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveAll<Impl: IResultsFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveAll() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IResultsFolder>, ::windows::core::GetTrustLevel, AddItem::<Impl, OFFSET>, AddIDList::<Impl, OFFSET>, RemoveItem::<Impl, OFFSET>, RemoveIDList::<Impl, OFFSET>, RemoveAll::<Impl, OFFSET>)
    }
}
pub trait IRunnableTaskImpl: Sized {
    fn Run();
    fn Kill();
    fn Suspend();
    fn Resume();
    fn IsRunning();
}
impl ::windows::core::RuntimeName for IRunnableTask {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IRunnableTask";
}
impl IRunnableTaskVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRunnableTaskImpl, const OFFSET: isize>() -> IRunnableTaskVtbl {
        unsafe extern "system" fn Run<Impl: IRunnableTaskImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Run() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Kill<Impl: IRunnableTaskImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bwait: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Kill(&*(&bwait as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Suspend<Impl: IRunnableTaskImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Suspend() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Resume<Impl: IRunnableTaskImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Resume() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsRunning<Impl: IRunnableTaskImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> u32 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsRunning() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IRunnableTask>, ::windows::core::GetTrustLevel, Run::<Impl, OFFSET>, Kill::<Impl, OFFSET>, Suspend::<Impl, OFFSET>, Resume::<Impl, OFFSET>, IsRunning::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IScriptErrorListImpl: Sized + IDispatchImpl {
    fn advanceError();
    fn retreatError();
    fn canAdvanceError();
    fn canRetreatError();
    fn getErrorLine();
    fn getErrorChar();
    fn getErrorCode();
    fn getErrorMsg();
    fn getErrorUrl();
    fn getAlwaysShowLockState();
    fn getDetailsPaneOpen();
    fn setDetailsPaneOpen();
    fn getPerErrorDisplay();
    fn setPerErrorDisplay();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IScriptErrorList {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IScriptErrorList";
}
#[cfg(feature = "Win32_System_Com")]
impl IScriptErrorListVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IScriptErrorListImpl, const OFFSET: isize>() -> IScriptErrorListVtbl {
        unsafe extern "system" fn advanceError<Impl: IScriptErrorListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).advanceError() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn retreatError<Impl: IScriptErrorListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).retreatError() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn canAdvanceError<Impl: IScriptErrorListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfcanadvance: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).canAdvanceError(::core::mem::transmute_copy(&pfcanadvance)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn canRetreatError<Impl: IScriptErrorListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfcanretreat: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).canRetreatError(::core::mem::transmute_copy(&pfcanretreat)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn getErrorLine<Impl: IScriptErrorListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plline: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).getErrorLine(::core::mem::transmute_copy(&plline)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn getErrorChar<Impl: IScriptErrorListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plchar: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).getErrorChar(::core::mem::transmute_copy(&plchar)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn getErrorCode<Impl: IScriptErrorListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plcode: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).getErrorCode(::core::mem::transmute_copy(&plcode)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn getErrorMsg<Impl: IScriptErrorListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstr: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).getErrorMsg(::core::mem::transmute_copy(&pstr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn getErrorUrl<Impl: IScriptErrorListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstr: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).getErrorUrl(::core::mem::transmute_copy(&pstr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn getAlwaysShowLockState<Impl: IScriptErrorListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfalwaysshowlocked: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).getAlwaysShowLockState(::core::mem::transmute_copy(&pfalwaysshowlocked)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn getDetailsPaneOpen<Impl: IScriptErrorListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfdetailspaneopen: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).getDetailsPaneOpen(::core::mem::transmute_copy(&pfdetailspaneopen)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn setDetailsPaneOpen<Impl: IScriptErrorListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fdetailspaneopen: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).setDetailsPaneOpen(&*(&fdetailspaneopen as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn getPerErrorDisplay<Impl: IScriptErrorListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfpererrordisplay: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).getPerErrorDisplay(::core::mem::transmute_copy(&pfpererrordisplay)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn setPerErrorDisplay<Impl: IScriptErrorListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fpererrordisplay: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).setPerErrorDisplay(&*(&fpererrordisplay as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IScriptErrorList>,
            ::windows::core::GetTrustLevel,
            advanceError::<Impl, OFFSET>,
            retreatError::<Impl, OFFSET>,
            canAdvanceError::<Impl, OFFSET>,
            canRetreatError::<Impl, OFFSET>,
            getErrorLine::<Impl, OFFSET>,
            getErrorChar::<Impl, OFFSET>,
            getErrorCode::<Impl, OFFSET>,
            getErrorMsg::<Impl, OFFSET>,
            getErrorUrl::<Impl, OFFSET>,
            getAlwaysShowLockState::<Impl, OFFSET>,
            getDetailsPaneOpen::<Impl, OFFSET>,
            setDetailsPaneOpen::<Impl, OFFSET>,
            getPerErrorDisplay::<Impl, OFFSET>,
            setPerErrorDisplay::<Impl, OFFSET>,
        )
    }
}
pub trait ISearchBoxInfoImpl: Sized {
    fn GetCondition();
    fn GetText();
}
impl ::windows::core::RuntimeName for ISearchBoxInfo {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISearchBoxInfo";
}
impl ISearchBoxInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISearchBoxInfoImpl, const OFFSET: isize>() -> ISearchBoxInfoVtbl {
        unsafe extern "system" fn GetCondition<Impl: ISearchBoxInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCondition(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetText<Impl: ISearchBoxInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsz: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetText(::core::mem::transmute_copy(&ppsz)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISearchBoxInfo>, ::windows::core::GetTrustLevel, GetCondition::<Impl, OFFSET>, GetText::<Impl, OFFSET>)
    }
}
pub trait ISearchContextImpl: Sized {
    fn GetSearchUrl();
    fn GetSearchText();
    fn GetSearchStyle();
}
impl ::windows::core::RuntimeName for ISearchContext {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISearchContext";
}
impl ISearchContextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISearchContextImpl, const OFFSET: isize>() -> ISearchContextVtbl {
        unsafe extern "system" fn GetSearchUrl<Impl: ISearchContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrsearchurl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSearchUrl(::core::mem::transmute_copy(&pbstrsearchurl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSearchText<Impl: ISearchContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrsearchtext: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSearchText(::core::mem::transmute_copy(&pbstrsearchtext)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSearchStyle<Impl: ISearchContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwsearchstyle: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSearchStyle(::core::mem::transmute_copy(&pdwsearchstyle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISearchContext>, ::windows::core::GetTrustLevel, GetSearchUrl::<Impl, OFFSET>, GetSearchText::<Impl, OFFSET>, GetSearchStyle::<Impl, OFFSET>)
    }
}
pub trait ISearchFolderItemFactoryImpl: Sized {
    fn SetDisplayName();
    fn SetFolderTypeID();
    fn SetFolderLogicalViewMode();
    fn SetIconSize();
    fn SetVisibleColumns();
    fn SetSortColumns();
    fn SetGroupColumn();
    fn SetStacks();
    fn SetScope();
    fn SetCondition();
    fn GetShellItem();
    fn GetIDList();
}
impl ::windows::core::RuntimeName for ISearchFolderItemFactory {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISearchFolderItemFactory";
}
impl ISearchFolderItemFactoryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISearchFolderItemFactoryImpl, const OFFSET: isize>() -> ISearchFolderItemFactoryVtbl {
        unsafe extern "system" fn SetDisplayName<Impl: ISearchFolderItemFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdisplayname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetDisplayName(&*(&pszdisplayname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFolderTypeID<Impl: ISearchFolderItemFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ftid: ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFolderTypeID(&*(&ftid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFolderLogicalViewMode<Impl: ISearchFolderItemFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flvm: FOLDERLOGICALVIEWMODE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFolderLogicalViewMode(flvm) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetIconSize<Impl: ISearchFolderItemFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, iiconsize: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetIconSize(iiconsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetVisibleColumns<Impl: ISearchFolderItemFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cvisiblecolumns: u32, rgkey: *const PropertiesSystem::PROPERTYKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetVisibleColumns(cvisiblecolumns, &*(&rgkey as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSortColumns<Impl: ISearchFolderItemFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, csortcolumns: u32, rgsortcolumns: *const SORTCOLUMN) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetSortColumns(csortcolumns, &*(&rgsortcolumns as *const <SORTCOLUMN as ::windows::core::Abi>::Abi as *const <SORTCOLUMN as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetGroupColumn<Impl: ISearchFolderItemFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, keygroup: *const PropertiesSystem::PROPERTYKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetGroupColumn(&*(&keygroup as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetStacks<Impl: ISearchFolderItemFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cstackkeys: u32, rgstackkeys: *const PropertiesSystem::PROPERTYKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetStacks(cstackkeys, &*(&rgstackkeys as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScope<Impl: ISearchFolderItemFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiascope: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetScope(&*(&psiascope as *const <IShellItemArray as ::windows::core::Abi>::Abi as *const <IShellItemArray as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCondition<Impl: ISearchFolderItemFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcondition: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCondition(&*(&pcondition as *const <super::super::System::Search::ICondition as ::windows::core::Abi>::Abi as *const <super::super::System::Search::ICondition as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetShellItem<Impl: ISearchFolderItemFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetShellItem(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIDList<Impl: ISearchFolderItemFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIDList(::core::mem::transmute_copy(&ppidl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ISearchFolderItemFactory>,
            ::windows::core::GetTrustLevel,
            SetDisplayName::<Impl, OFFSET>,
            SetFolderTypeID::<Impl, OFFSET>,
            SetFolderLogicalViewMode::<Impl, OFFSET>,
            SetIconSize::<Impl, OFFSET>,
            SetVisibleColumns::<Impl, OFFSET>,
            SetSortColumns::<Impl, OFFSET>,
            SetGroupColumn::<Impl, OFFSET>,
            SetStacks::<Impl, OFFSET>,
            SetScope::<Impl, OFFSET>,
            SetCondition::<Impl, OFFSET>,
            GetShellItem::<Impl, OFFSET>,
            GetIDList::<Impl, OFFSET>,
        )
    }
}
pub trait ISharedBitmapImpl: Sized {
    fn GetSharedBitmap();
    fn GetSize();
    fn GetFormat();
    fn InitializeBitmap();
    fn Detach();
}
impl ::windows::core::RuntimeName for ISharedBitmap {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISharedBitmap";
}
impl ISharedBitmapVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISharedBitmapImpl, const OFFSET: isize>() -> ISharedBitmapVtbl {
        unsafe extern "system" fn GetSharedBitmap<Impl: ISharedBitmapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phbm: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSharedBitmap(::core::mem::transmute_copy(&phbm)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSize<Impl: ISharedBitmapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psize: *mut super::super::Foundation::SIZE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSize(::core::mem::transmute_copy(&psize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFormat<Impl: ISharedBitmapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pat: *mut WTS_ALPHATYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFormat(::core::mem::transmute_copy(&pat)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InitializeBitmap<Impl: ISharedBitmapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hbm: super::super::Graphics::Gdi::HBITMAP, wtsat: WTS_ALPHATYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InitializeBitmap(&*(&hbm as *const <super::super::Graphics::Gdi::HBITMAP as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::HBITMAP as ::windows::core::DefaultType>::DefaultType), wtsat) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Detach<Impl: ISharedBitmapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phbm: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Detach(::core::mem::transmute_copy(&phbm)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISharedBitmap>, ::windows::core::GetTrustLevel, GetSharedBitmap::<Impl, OFFSET>, GetSize::<Impl, OFFSET>, GetFormat::<Impl, OFFSET>, InitializeBitmap::<Impl, OFFSET>, Detach::<Impl, OFFSET>)
    }
}
pub trait ISharingConfigurationManagerImpl: Sized {
    fn CreateShare();
    fn DeleteShare();
    fn ShareExists();
    fn GetSharePermissions();
    fn SharePrinters();
    fn StopSharingPrinters();
    fn ArePrintersShared();
}
impl ::windows::core::RuntimeName for ISharingConfigurationManager {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISharingConfigurationManager";
}
impl ISharingConfigurationManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISharingConfigurationManagerImpl, const OFFSET: isize>() -> ISharingConfigurationManagerVtbl {
        unsafe extern "system" fn CreateShare<Impl: ISharingConfigurationManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dsid: DEF_SHARE_ID, role: SHARE_ROLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateShare(dsid, role) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DeleteShare<Impl: ISharingConfigurationManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dsid: DEF_SHARE_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DeleteShare(dsid) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShareExists<Impl: ISharingConfigurationManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dsid: DEF_SHARE_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShareExists(dsid) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSharePermissions<Impl: ISharingConfigurationManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dsid: DEF_SHARE_ID, prole: *mut SHARE_ROLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSharePermissions(dsid, ::core::mem::transmute_copy(&prole)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SharePrinters<Impl: ISharingConfigurationManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SharePrinters() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StopSharingPrinters<Impl: ISharingConfigurationManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StopSharingPrinters() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ArePrintersShared<Impl: ISharingConfigurationManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ArePrintersShared() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ISharingConfigurationManager>,
            ::windows::core::GetTrustLevel,
            CreateShare::<Impl, OFFSET>,
            DeleteShare::<Impl, OFFSET>,
            ShareExists::<Impl, OFFSET>,
            GetSharePermissions::<Impl, OFFSET>,
            SharePrinters::<Impl, OFFSET>,
            StopSharingPrinters::<Impl, OFFSET>,
            ArePrintersShared::<Impl, OFFSET>,
        )
    }
}
pub trait IShellAppImpl: Sized {
    fn GetAppInfo();
    fn GetPossibleActions();
    fn GetSlowAppInfo();
    fn GetCachedSlowAppInfo();
    fn IsInstalled();
}
impl ::windows::core::RuntimeName for IShellApp {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellApp";
}
impl IShellAppVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellAppImpl, const OFFSET: isize>() -> IShellAppVtbl {
        unsafe extern "system" fn GetAppInfo<Impl: IShellAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pai: *mut APPINFODATA) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAppInfo(&*(&pai as *const <APPINFODATA as ::windows::core::Abi>::Abi as *const <APPINFODATA as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPossibleActions<Impl: IShellAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwactions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPossibleActions(::core::mem::transmute_copy(&pdwactions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSlowAppInfo<Impl: IShellAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psaid: *mut SLOWAPPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSlowAppInfo(::core::mem::transmute_copy(&psaid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCachedSlowAppInfo<Impl: IShellAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psaid: *mut SLOWAPPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCachedSlowAppInfo(::core::mem::transmute_copy(&psaid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsInstalled<Impl: IShellAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsInstalled() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellApp>, ::windows::core::GetTrustLevel, GetAppInfo::<Impl, OFFSET>, GetPossibleActions::<Impl, OFFSET>, GetSlowAppInfo::<Impl, OFFSET>, GetCachedSlowAppInfo::<Impl, OFFSET>, IsInstalled::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Ole")]
pub trait IShellBrowserImpl: Sized + IOleWindowImpl {
    fn InsertMenusSB();
    fn SetMenuSB();
    fn RemoveMenusSB();
    fn SetStatusTextSB();
    fn EnableModelessSB();
    fn TranslateAcceleratorSB();
    fn BrowseObject();
    fn GetViewStateStream();
    fn GetControlWindow();
    fn SendControlMsg();
    fn QueryActiveShellView();
    fn OnViewWindowActive();
    fn SetToolbarItems();
}
#[cfg(feature = "Win32_System_Ole")]
impl ::windows::core::RuntimeName for IShellBrowser {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellBrowser";
}
#[cfg(feature = "Win32_System_Ole")]
impl IShellBrowserVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellBrowserImpl, const OFFSET: isize>() -> IShellBrowserVtbl {
        unsafe extern "system" fn InsertMenusSB<Impl: IShellBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hmenushared: super::WindowsAndMessaging::HMENU, lpmenuwidths: *mut super::super::System::Ole::OleMenuGroupWidths) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InsertMenusSB(&*(&hmenushared as *const <super::WindowsAndMessaging::HMENU as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::HMENU as ::windows::core::DefaultType>::DefaultType), &*(&lpmenuwidths as *const <super::super::System::Ole::OleMenuGroupWidths as ::windows::core::Abi>::Abi as *const <super::super::System::Ole::OleMenuGroupWidths as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetMenuSB<Impl: IShellBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hmenushared: super::WindowsAndMessaging::HMENU, holemenures: isize, hwndactiveobject: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetMenuSB(&*(&hmenushared as *const <super::WindowsAndMessaging::HMENU as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::HMENU as ::windows::core::DefaultType>::DefaultType), holemenures, &*(&hwndactiveobject as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveMenusSB<Impl: IShellBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hmenushared: super::WindowsAndMessaging::HMENU) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveMenusSB(&*(&hmenushared as *const <super::WindowsAndMessaging::HMENU as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::HMENU as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetStatusTextSB<Impl: IShellBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszstatustext: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetStatusTextSB(&*(&pszstatustext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnableModelessSB<Impl: IShellBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnableModelessSB(&*(&fenable as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TranslateAcceleratorSB<Impl: IShellBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG, wid: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TranslateAcceleratorSB(&*(&pmsg as *const <super::WindowsAndMessaging::MSG as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::MSG as ::windows::core::DefaultType>::DefaultType), wid) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BrowseObject<Impl: IShellBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, wflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BrowseObject(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), wflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetViewStateStream<Impl: IShellBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, grfmode: u32, ppstrm: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetViewStateStream(grfmode, ::core::mem::transmute_copy(&ppstrm)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetControlWindow<Impl: IShellBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, phwnd: *mut super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetControlWindow(id, ::core::mem::transmute_copy(&phwnd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SendControlMsg<Impl: IShellBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM, pret: *mut super::super::Foundation::LRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SendControlMsg(id, umsg, &*(&wparam as *const <super::super::Foundation::WPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::WPARAM as ::windows::core::DefaultType>::DefaultType), &*(&lparam as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pret)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryActiveShellView<Impl: IShellBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppshv: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryActiveShellView(::core::mem::transmute_copy(&ppshv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnViewWindowActive<Impl: IShellBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pshv: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnViewWindowActive(&*(&pshv as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetToolbarItems<Impl: IShellBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpbuttons: *const super::Controls::TBBUTTON, nbuttons: u32, uflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetToolbarItems(&*(&lpbuttons as *const <super::Controls::TBBUTTON as ::windows::core::Abi>::Abi as *const <super::Controls::TBBUTTON as ::windows::core::DefaultType>::DefaultType), nbuttons, uflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellBrowser>,
            ::windows::core::GetTrustLevel,
            InsertMenusSB::<Impl, OFFSET>,
            SetMenuSB::<Impl, OFFSET>,
            RemoveMenusSB::<Impl, OFFSET>,
            SetStatusTextSB::<Impl, OFFSET>,
            EnableModelessSB::<Impl, OFFSET>,
            TranslateAcceleratorSB::<Impl, OFFSET>,
            BrowseObject::<Impl, OFFSET>,
            GetViewStateStream::<Impl, OFFSET>,
            GetControlWindow::<Impl, OFFSET>,
            SendControlMsg::<Impl, OFFSET>,
            QueryActiveShellView::<Impl, OFFSET>,
            OnViewWindowActive::<Impl, OFFSET>,
            SetToolbarItems::<Impl, OFFSET>,
        )
    }
}
pub trait IShellChangeNotifyImpl: Sized {
    fn OnChange();
}
impl ::windows::core::RuntimeName for IShellChangeNotify {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellChangeNotify";
}
impl IShellChangeNotifyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellChangeNotifyImpl, const OFFSET: isize>() -> IShellChangeNotifyVtbl {
        unsafe extern "system" fn OnChange<Impl: IShellChangeNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, levent: i32, pidl1: *const Common::ITEMIDLIST, pidl2: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnChange(levent, &*(&pidl1 as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), &*(&pidl2 as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellChangeNotify>, ::windows::core::GetTrustLevel, OnChange::<Impl, OFFSET>)
    }
}
pub trait IShellDetailsImpl: Sized {
    fn GetDetailsOf();
    fn ColumnClick();
}
impl ::windows::core::RuntimeName for IShellDetails {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellDetails";
}
impl IShellDetailsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellDetailsImpl, const OFFSET: isize>() -> IShellDetailsVtbl {
        unsafe extern "system" fn GetDetailsOf<Impl: IShellDetailsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, icolumn: u32, pdetails: *mut Common::SHELLDETAILS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDetailsOf(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), icolumn, ::core::mem::transmute_copy(&pdetails)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ColumnClick<Impl: IShellDetailsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, icolumn: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ColumnClick(icolumn) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellDetails>, ::windows::core::GetTrustLevel, GetDetailsOf::<Impl, OFFSET>, ColumnClick::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellDispatchImpl: Sized + IDispatchImpl {
    fn Application();
    fn Parent();
    fn NameSpace();
    fn BrowseForFolder();
    fn Windows();
    fn Open();
    fn Explore();
    fn MinimizeAll();
    fn UndoMinimizeALL();
    fn FileRun();
    fn CascadeWindows();
    fn TileVertically();
    fn TileHorizontally();
    fn ShutdownWindows();
    fn Suspend();
    fn EjectPC();
    fn SetTime();
    fn TrayProperties();
    fn Help();
    fn FindFiles();
    fn FindComputer();
    fn RefreshMenu();
    fn ControlPanelItem();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellDispatch {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellDispatch";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellDispatchVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellDispatchImpl, const OFFSET: isize>() -> IShellDispatchVtbl {
        unsafe extern "system" fn Application<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Application(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Parent<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Parent(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NameSpace<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vdir: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, ppsdf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).NameSpace(&*(&vdir as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppsdf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BrowseForFolder<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: i32, title: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, options: i32, rootfolder: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, ppsdf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BrowseForFolder(hwnd, &*(&title as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), options, &*(&rootfolder as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppsdf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Windows<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Windows(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Open<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vdir: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Open(&*(&vdir as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Explore<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vdir: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Explore(&*(&vdir as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MinimizeAll<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MinimizeAll() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UndoMinimizeALL<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UndoMinimizeALL() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FileRun<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FileRun() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CascadeWindows<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CascadeWindows() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TileVertically<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TileVertically() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TileHorizontally<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TileHorizontally() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShutdownWindows<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShutdownWindows() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Suspend<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Suspend() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EjectPC<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EjectPC() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTime<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTime() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TrayProperties<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TrayProperties() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Help<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Help() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindFiles<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindFiles() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindComputer<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindComputer() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RefreshMenu<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RefreshMenu() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlPanelItem<Impl: IShellDispatchImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrdir: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ControlPanelItem(&*(&bstrdir as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellDispatch>,
            ::windows::core::GetTrustLevel,
            Application::<Impl, OFFSET>,
            Parent::<Impl, OFFSET>,
            NameSpace::<Impl, OFFSET>,
            BrowseForFolder::<Impl, OFFSET>,
            Windows::<Impl, OFFSET>,
            Open::<Impl, OFFSET>,
            Explore::<Impl, OFFSET>,
            MinimizeAll::<Impl, OFFSET>,
            UndoMinimizeALL::<Impl, OFFSET>,
            FileRun::<Impl, OFFSET>,
            CascadeWindows::<Impl, OFFSET>,
            TileVertically::<Impl, OFFSET>,
            TileHorizontally::<Impl, OFFSET>,
            ShutdownWindows::<Impl, OFFSET>,
            Suspend::<Impl, OFFSET>,
            EjectPC::<Impl, OFFSET>,
            SetTime::<Impl, OFFSET>,
            TrayProperties::<Impl, OFFSET>,
            Help::<Impl, OFFSET>,
            FindFiles::<Impl, OFFSET>,
            FindComputer::<Impl, OFFSET>,
            RefreshMenu::<Impl, OFFSET>,
            ControlPanelItem::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellDispatch2Impl: Sized + IShellDispatchImpl + IDispatchImpl {
    fn IsRestricted();
    fn ShellExecute();
    fn FindPrinter();
    fn GetSystemInformation();
    fn ServiceStart();
    fn ServiceStop();
    fn IsServiceRunning();
    fn CanStartStopService();
    fn ShowBrowserBar();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellDispatch2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellDispatch2";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellDispatch2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellDispatch2Impl, const OFFSET: isize>() -> IShellDispatch2Vtbl {
        unsafe extern "system" fn IsRestricted<Impl: IShellDispatch2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, restriction: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, plrestrictvalue: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsRestricted(&*(&group as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), &*(&restriction as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&plrestrictvalue)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShellExecute<Impl: IShellDispatch2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, vargs: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, vdir: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, voperation: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, vshow: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShellExecute(
                &*(&file as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&vargs as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&vdir as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&voperation as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&vshow as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindPrinter<Impl: IShellDispatch2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, location: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, model: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindPrinter(
                &*(&name as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&location as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&model as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemInformation<Impl: IShellDispatch2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pv: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSystemInformation(&*(&name as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ServiceStart<Impl: IShellDispatch2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, servicename: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, persistent: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, psuccess: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ServiceStart(&*(&servicename as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), &*(&persistent as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&psuccess)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ServiceStop<Impl: IShellDispatch2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, servicename: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, persistent: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, psuccess: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ServiceStop(&*(&servicename as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), &*(&persistent as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&psuccess)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsServiceRunning<Impl: IShellDispatch2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, servicename: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, prunning: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsServiceRunning(&*(&servicename as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&prunning)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CanStartStopService<Impl: IShellDispatch2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, servicename: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pcanstartstop: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CanStartStopService(&*(&servicename as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pcanstartstop)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShowBrowserBar<Impl: IShellDispatch2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrclsid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, bshow: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, psuccess: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowBrowserBar(&*(&bstrclsid as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), &*(&bshow as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&psuccess)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellDispatch2>,
            ::windows::core::GetTrustLevel,
            IsRestricted::<Impl, OFFSET>,
            ShellExecute::<Impl, OFFSET>,
            FindPrinter::<Impl, OFFSET>,
            GetSystemInformation::<Impl, OFFSET>,
            ServiceStart::<Impl, OFFSET>,
            ServiceStop::<Impl, OFFSET>,
            IsServiceRunning::<Impl, OFFSET>,
            CanStartStopService::<Impl, OFFSET>,
            ShowBrowserBar::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellDispatch3Impl: Sized + IShellDispatch2Impl + IShellDispatchImpl + IDispatchImpl {
    fn AddToRecent();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellDispatch3 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellDispatch3";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellDispatch3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellDispatch3Impl, const OFFSET: isize>() -> IShellDispatch3Vtbl {
        unsafe extern "system" fn AddToRecent<Impl: IShellDispatch3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varfile: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, bstrcategory: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddToRecent(&*(&varfile as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), &*(&bstrcategory as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellDispatch3>, ::windows::core::GetTrustLevel, AddToRecent::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellDispatch4Impl: Sized + IShellDispatch3Impl + IShellDispatch2Impl + IShellDispatchImpl + IDispatchImpl {
    fn WindowsSecurity();
    fn ToggleDesktop();
    fn ExplorerPolicy();
    fn GetSetting();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellDispatch4 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellDispatch4";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellDispatch4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellDispatch4Impl, const OFFSET: isize>() -> IShellDispatch4Vtbl {
        unsafe extern "system" fn WindowsSecurity<Impl: IShellDispatch4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WindowsSecurity() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ToggleDesktop<Impl: IShellDispatch4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ToggleDesktop() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExplorerPolicy<Impl: IShellDispatch4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrpolicyname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pvalue: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ExplorerPolicy(&*(&bstrpolicyname as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pvalue)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSetting<Impl: IShellDispatch4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lsetting: i32, presult: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSetting(lsetting, ::core::mem::transmute_copy(&presult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellDispatch4>, ::windows::core::GetTrustLevel, WindowsSecurity::<Impl, OFFSET>, ToggleDesktop::<Impl, OFFSET>, ExplorerPolicy::<Impl, OFFSET>, GetSetting::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellDispatch5Impl: Sized + IShellDispatch4Impl + IShellDispatch3Impl + IShellDispatch2Impl + IShellDispatchImpl + IDispatchImpl {
    fn WindowSwitcher();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellDispatch5 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellDispatch5";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellDispatch5Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellDispatch5Impl, const OFFSET: isize>() -> IShellDispatch5Vtbl {
        unsafe extern "system" fn WindowSwitcher<Impl: IShellDispatch5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WindowSwitcher() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellDispatch5>, ::windows::core::GetTrustLevel, WindowSwitcher::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellDispatch6Impl: Sized + IShellDispatch5Impl + IShellDispatch4Impl + IShellDispatch3Impl + IShellDispatch2Impl + IShellDispatchImpl + IDispatchImpl {
    fn SearchCommand();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellDispatch6 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellDispatch6";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellDispatch6Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellDispatch6Impl, const OFFSET: isize>() -> IShellDispatch6Vtbl {
        unsafe extern "system" fn SearchCommand<Impl: IShellDispatch6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SearchCommand() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellDispatch6>, ::windows::core::GetTrustLevel, SearchCommand::<Impl, OFFSET>)
    }
}
pub trait IShellExtInitImpl: Sized {
    fn Initialize();
}
impl ::windows::core::RuntimeName for IShellExtInit {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellExtInit";
}
impl IShellExtInitVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellExtInitImpl, const OFFSET: isize>() -> IShellExtInitVtbl {
        unsafe extern "system" fn Initialize<Impl: IShellExtInitImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST, pdtobj: ::windows::core::RawPtr, hkeyprogid: super::super::System::Registry::HKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(
                &*(&pidlfolder as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType),
                &*(&pdtobj as *const <super::super::System::Com::IDataObject as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDataObject as ::windows::core::DefaultType>::DefaultType),
                &*(&hkeyprogid as *const <super::super::System::Registry::HKEY as ::windows::core::Abi>::Abi as *const <super::super::System::Registry::HKEY as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellExtInit>, ::windows::core::GetTrustLevel, Initialize::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellFavoritesNameSpaceImpl: Sized + IDispatchImpl {
    fn MoveSelectionUp();
    fn MoveSelectionDown();
    fn ResetSort();
    fn NewFolder();
    fn Synchronize();
    fn Import();
    fn Export();
    fn InvokeContextMenuCommand();
    fn MoveSelectionTo();
    fn SubscriptionsEnabled();
    fn CreateSubscriptionForSelection();
    fn DeleteSubscriptionForSelection();
    fn SetRoot();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellFavoritesNameSpace {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellFavoritesNameSpace";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellFavoritesNameSpaceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellFavoritesNameSpaceImpl, const OFFSET: isize>() -> IShellFavoritesNameSpaceVtbl {
        unsafe extern "system" fn MoveSelectionUp<Impl: IShellFavoritesNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MoveSelectionUp() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MoveSelectionDown<Impl: IShellFavoritesNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MoveSelectionDown() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetSort<Impl: IShellFavoritesNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ResetSort() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NewFolder<Impl: IShellFavoritesNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).NewFolder() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Synchronize<Impl: IShellFavoritesNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Synchronize() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Import<Impl: IShellFavoritesNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Import() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Export<Impl: IShellFavoritesNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Export() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InvokeContextMenuCommand<Impl: IShellFavoritesNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strcommand: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InvokeContextMenuCommand(&*(&strcommand as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MoveSelectionTo<Impl: IShellFavoritesNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MoveSelectionTo() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SubscriptionsEnabled<Impl: IShellFavoritesNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbool: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SubscriptionsEnabled(::core::mem::transmute_copy(&pbool)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSubscriptionForSelection<Impl: IShellFavoritesNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbool: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateSubscriptionForSelection(::core::mem::transmute_copy(&pbool)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DeleteSubscriptionForSelection<Impl: IShellFavoritesNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbool: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DeleteSubscriptionForSelection(::core::mem::transmute_copy(&pbool)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRoot<Impl: IShellFavoritesNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrfullpath: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetRoot(&*(&bstrfullpath as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellFavoritesNameSpace>,
            ::windows::core::GetTrustLevel,
            MoveSelectionUp::<Impl, OFFSET>,
            MoveSelectionDown::<Impl, OFFSET>,
            ResetSort::<Impl, OFFSET>,
            NewFolder::<Impl, OFFSET>,
            Synchronize::<Impl, OFFSET>,
            Import::<Impl, OFFSET>,
            Export::<Impl, OFFSET>,
            InvokeContextMenuCommand::<Impl, OFFSET>,
            MoveSelectionTo::<Impl, OFFSET>,
            SubscriptionsEnabled::<Impl, OFFSET>,
            CreateSubscriptionForSelection::<Impl, OFFSET>,
            DeleteSubscriptionForSelection::<Impl, OFFSET>,
            SetRoot::<Impl, OFFSET>,
        )
    }
}
pub trait IShellFolderImpl: Sized {
    fn ParseDisplayName();
    fn EnumObjects();
    fn BindToObject();
    fn BindToStorage();
    fn CompareIDs();
    fn CreateViewObject();
    fn GetAttributesOf();
    fn GetUIObjectOf();
    fn GetDisplayNameOf();
    fn SetNameOf();
}
impl ::windows::core::RuntimeName for IShellFolder {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellFolder";
}
impl IShellFolderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellFolderImpl, const OFFSET: isize>() -> IShellFolderVtbl {
        unsafe extern "system" fn ParseDisplayName<Impl: IShellFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pbc: ::windows::core::RawPtr, pszdisplayname: super::super::Foundation::PWSTR, pcheaten: *mut u32, ppidl: *mut *mut Common::ITEMIDLIST, pdwattributes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ParseDisplayName(
                &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&pbc as *const <super::super::System::Com::IBindCtx as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindCtx as ::windows::core::DefaultType>::DefaultType),
                &*(&pszdisplayname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                pcheaten,
                ::core::mem::transmute_copy(&ppidl),
                pdwattributes,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumObjects<Impl: IShellFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, grfflags: u32, ppenumidlist: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumObjects(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), grfflags, ::core::mem::transmute_copy(&ppenumidlist)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BindToObject<Impl: IShellFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pbc: ::windows::core::RawPtr, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BindToObject(
                &*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType),
                &*(&pbc as *const <super::super::System::Com::IBindCtx as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindCtx as ::windows::core::DefaultType>::DefaultType),
                &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppv),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BindToStorage<Impl: IShellFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pbc: ::windows::core::RawPtr, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BindToStorage(
                &*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType),
                &*(&pbc as *const <super::super::System::Com::IBindCtx as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindCtx as ::windows::core::DefaultType>::DefaultType),
                &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppv),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CompareIDs<Impl: IShellFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lparam: super::super::Foundation::LPARAM, pidl1: *const Common::ITEMIDLIST, pidl2: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CompareIDs(&*(&lparam as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType), &*(&pidl1 as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), &*(&pidl2 as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateViewObject<Impl: IShellFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateViewObject(&*(&hwndowner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAttributesOf<Impl: IShellFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cidl: u32, apidl: *const *const Common::ITEMIDLIST, rgfinout: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAttributesOf(cidl, &*(&apidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), rgfinout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetUIObjectOf<Impl: IShellFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND, cidl: u32, apidl: *const *const Common::ITEMIDLIST, riid: *const ::windows::core::GUID, rgfreserved: *mut u32, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetUIObjectOf(
                &*(&hwndowner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                cidl,
                &*(&apidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType),
                &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                rgfreserved,
                ::core::mem::transmute_copy(&ppv),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDisplayNameOf<Impl: IShellFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, uflags: u32, pname: *mut Common::STRRET) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDisplayNameOf(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), uflags, ::core::mem::transmute_copy(&pname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNameOf<Impl: IShellFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pidl: *const Common::ITEMIDLIST, pszname: super::super::Foundation::PWSTR, uflags: u32, ppidlout: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetNameOf(
                &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType),
                &*(&pszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                uflags,
                ::core::mem::transmute_copy(&ppidlout),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellFolder>,
            ::windows::core::GetTrustLevel,
            ParseDisplayName::<Impl, OFFSET>,
            EnumObjects::<Impl, OFFSET>,
            BindToObject::<Impl, OFFSET>,
            BindToStorage::<Impl, OFFSET>,
            CompareIDs::<Impl, OFFSET>,
            CreateViewObject::<Impl, OFFSET>,
            GetAttributesOf::<Impl, OFFSET>,
            GetUIObjectOf::<Impl, OFFSET>,
            GetDisplayNameOf::<Impl, OFFSET>,
            SetNameOf::<Impl, OFFSET>,
        )
    }
}
pub trait IShellFolder2Impl: Sized + IShellFolderImpl {
    fn GetDefaultSearchGUID();
    fn EnumSearches();
    fn GetDefaultColumn();
    fn GetDefaultColumnState();
    fn GetDetailsEx();
    fn GetDetailsOf();
    fn MapColumnToSCID();
}
impl ::windows::core::RuntimeName for IShellFolder2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellFolder2";
}
impl IShellFolder2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellFolder2Impl, const OFFSET: isize>() -> IShellFolder2Vtbl {
        unsafe extern "system" fn GetDefaultSearchGUID<Impl: IShellFolder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDefaultSearchGUID(::core::mem::transmute_copy(&pguid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumSearches<Impl: IShellFolder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumSearches(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDefaultColumn<Impl: IShellFolder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwres: u32, psort: *mut u32, pdisplay: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDefaultColumn(dwres, ::core::mem::transmute_copy(&psort), ::core::mem::transmute_copy(&pdisplay)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDefaultColumnState<Impl: IShellFolder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, icolumn: u32, pcsflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDefaultColumnState(icolumn, ::core::mem::transmute_copy(&pcsflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDetailsEx<Impl: IShellFolder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pscid: *const PropertiesSystem::PROPERTYKEY, pv: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDetailsEx(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), &*(&pscid as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDetailsOf<Impl: IShellFolder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, icolumn: u32, psd: *mut Common::SHELLDETAILS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDetailsOf(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), icolumn, ::core::mem::transmute_copy(&psd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MapColumnToSCID<Impl: IShellFolder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, icolumn: u32, pscid: *mut PropertiesSystem::PROPERTYKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MapColumnToSCID(icolumn, ::core::mem::transmute_copy(&pscid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellFolder2>,
            ::windows::core::GetTrustLevel,
            GetDefaultSearchGUID::<Impl, OFFSET>,
            EnumSearches::<Impl, OFFSET>,
            GetDefaultColumn::<Impl, OFFSET>,
            GetDefaultColumnState::<Impl, OFFSET>,
            GetDetailsEx::<Impl, OFFSET>,
            GetDetailsOf::<Impl, OFFSET>,
            MapColumnToSCID::<Impl, OFFSET>,
        )
    }
}
pub trait IShellFolderBandImpl: Sized {
    fn InitializeSFB();
    fn SetBandInfoSFB();
    fn GetBandInfoSFB();
}
impl ::windows::core::RuntimeName for IShellFolderBand {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellFolderBand";
}
impl IShellFolderBandVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellFolderBandImpl, const OFFSET: isize>() -> IShellFolderBandVtbl {
        unsafe extern "system" fn InitializeSFB<Impl: IShellFolderBandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psf: ::windows::core::RawPtr, pidl: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InitializeSFB(&*(&psf as *const <IShellFolder as ::windows::core::Abi>::Abi as *const <IShellFolder as ::windows::core::DefaultType>::DefaultType), &*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBandInfoSFB<Impl: IShellFolderBandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbi: *const BANDINFOSFB) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBandInfoSFB(&*(&pbi as *const <BANDINFOSFB as ::windows::core::Abi>::Abi as *const <BANDINFOSFB as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBandInfoSFB<Impl: IShellFolderBandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbi: *mut BANDINFOSFB) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBandInfoSFB(&*(&pbi as *const <BANDINFOSFB as ::windows::core::Abi>::Abi as *const <BANDINFOSFB as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellFolderBand>, ::windows::core::GetTrustLevel, InitializeSFB::<Impl, OFFSET>, SetBandInfoSFB::<Impl, OFFSET>, GetBandInfoSFB::<Impl, OFFSET>)
    }
}
pub trait IShellFolderViewImpl: Sized {
    fn Rearrange();
    fn GetArrangeParam();
    fn ArrangeGrid();
    fn AutoArrange();
    fn GetAutoArrange();
    fn AddObject();
    fn GetObject();
    fn RemoveObject();
    fn GetObjectCount();
    fn SetObjectCount();
    fn UpdateObject();
    fn RefreshObject();
    fn SetRedraw();
    fn GetSelectedCount();
    fn GetSelectedObjects();
    fn IsDropOnSource();
    fn GetDragPoint();
    fn GetDropPoint();
    fn MoveIcons();
    fn SetItemPos();
    fn IsBkDropTarget();
    fn SetClipboard();
    fn SetPoints();
    fn GetItemSpacing();
    fn SetCallback();
    fn Select();
    fn QuerySupport();
    fn SetAutomationObject();
}
impl ::windows::core::RuntimeName for IShellFolderView {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellFolderView";
}
impl IShellFolderViewVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellFolderViewImpl, const OFFSET: isize>() -> IShellFolderViewVtbl {
        unsafe extern "system" fn Rearrange<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lparamsort: super::super::Foundation::LPARAM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Rearrange(&*(&lparamsort as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetArrangeParam<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plparamsort: *mut super::super::Foundation::LPARAM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetArrangeParam(::core::mem::transmute_copy(&plparamsort)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ArrangeGrid<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ArrangeGrid() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AutoArrange<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AutoArrange() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAutoArrange<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAutoArrange() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddObject<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, puitem: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddObject(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&puitem)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetObject<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST, uitem: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetObject(::core::mem::transmute_copy(&ppidl), uitem) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveObject<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, puitem: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveObject(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&puitem)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetObjectCount<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pucount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetObjectCount(::core::mem::transmute_copy(&pucount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetObjectCount<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ucount: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetObjectCount(ucount, dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateObject<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidlold: *const Common::ITEMIDLIST, pidlnew: *const Common::ITEMIDLIST, puitem: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateObject(&*(&pidlold as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), &*(&pidlnew as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&puitem)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RefreshObject<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, puitem: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RefreshObject(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&puitem)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRedraw<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bredraw: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetRedraw(&*(&bredraw as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSelectedCount<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, puselected: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSelectedCount(::core::mem::transmute_copy(&puselected)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSelectedObjects<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pppidl: *mut *mut *mut Common::ITEMIDLIST, puitems: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSelectedObjects(::core::mem::transmute_copy(&pppidl), ::core::mem::transmute_copy(&puitems)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsDropOnSource<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdroptarget: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsDropOnSource(&*(&pdroptarget as *const <super::super::System::Ole::IDropTarget as ::windows::core::Abi>::Abi as *const <super::super::System::Ole::IDropTarget as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDragPoint<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppt: *mut super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDragPoint(::core::mem::transmute_copy(&ppt)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDropPoint<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppt: *mut super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDropPoint(::core::mem::transmute_copy(&ppt)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MoveIcons<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdataobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MoveIcons(&*(&pdataobject as *const <super::super::System::Com::IDataObject as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDataObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetItemPos<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, ppt: *const super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetItemPos(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), &*(&ppt as *const <super::super::Foundation::POINT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsBkDropTarget<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdroptarget: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsBkDropTarget(&*(&pdroptarget as *const <super::super::System::Ole::IDropTarget as ::windows::core::Abi>::Abi as *const <super::super::System::Ole::IDropTarget as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetClipboard<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bmove: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetClipboard(&*(&bmove as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPoints<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdataobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetPoints(&*(&pdataobject as *const <super::super::System::Com::IDataObject as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDataObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemSpacing<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pspacing: *mut ITEMSPACING) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemSpacing(::core::mem::transmute_copy(&pspacing)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCallback<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnewcb: ::windows::core::RawPtr, ppoldcb: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCallback(&*(&pnewcb as *const <IShellFolderViewCB as ::windows::core::Abi>::Abi as *const <IShellFolderViewCB as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppoldcb)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Select<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: SFVS_SELECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Select(dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QuerySupport<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwsupport: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QuerySupport(pdwsupport) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAutomationObject<Impl: IShellFolderViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdisp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAutomationObject(&*(&pdisp as *const <super::super::System::Com::IDispatch as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDispatch as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellFolderView>,
            ::windows::core::GetTrustLevel,
            Rearrange::<Impl, OFFSET>,
            GetArrangeParam::<Impl, OFFSET>,
            ArrangeGrid::<Impl, OFFSET>,
            AutoArrange::<Impl, OFFSET>,
            GetAutoArrange::<Impl, OFFSET>,
            AddObject::<Impl, OFFSET>,
            GetObject::<Impl, OFFSET>,
            RemoveObject::<Impl, OFFSET>,
            GetObjectCount::<Impl, OFFSET>,
            SetObjectCount::<Impl, OFFSET>,
            UpdateObject::<Impl, OFFSET>,
            RefreshObject::<Impl, OFFSET>,
            SetRedraw::<Impl, OFFSET>,
            GetSelectedCount::<Impl, OFFSET>,
            GetSelectedObjects::<Impl, OFFSET>,
            IsDropOnSource::<Impl, OFFSET>,
            GetDragPoint::<Impl, OFFSET>,
            GetDropPoint::<Impl, OFFSET>,
            MoveIcons::<Impl, OFFSET>,
            SetItemPos::<Impl, OFFSET>,
            IsBkDropTarget::<Impl, OFFSET>,
            SetClipboard::<Impl, OFFSET>,
            SetPoints::<Impl, OFFSET>,
            GetItemSpacing::<Impl, OFFSET>,
            SetCallback::<Impl, OFFSET>,
            Select::<Impl, OFFSET>,
            QuerySupport::<Impl, OFFSET>,
            SetAutomationObject::<Impl, OFFSET>,
        )
    }
}
pub trait IShellFolderViewCBImpl: Sized {
    fn MessageSFVCB();
}
impl ::windows::core::RuntimeName for IShellFolderViewCB {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellFolderViewCB";
}
impl IShellFolderViewCBVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellFolderViewCBImpl, const OFFSET: isize>() -> IShellFolderViewCBVtbl {
        unsafe extern "system" fn MessageSFVCB<Impl: IShellFolderViewCBImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, umsg: SFVM_MESSAGE_ID, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MessageSFVCB(umsg, &*(&wparam as *const <super::super::Foundation::WPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::WPARAM as ::windows::core::DefaultType>::DefaultType), &*(&lparam as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellFolderViewCB>, ::windows::core::GetTrustLevel, MessageSFVCB::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellFolderViewDualImpl: Sized + IDispatchImpl {
    fn Application();
    fn Parent();
    fn Folder();
    fn SelectedItems();
    fn FocusedItem();
    fn SelectItem();
    fn PopupItemMenu();
    fn Script();
    fn ViewOptions();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellFolderViewDual {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellFolderViewDual";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellFolderViewDualVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellFolderViewDualImpl, const OFFSET: isize>() -> IShellFolderViewDualVtbl {
        unsafe extern "system" fn Application<Impl: IShellFolderViewDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Application(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Parent<Impl: IShellFolderViewDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Parent(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Folder<Impl: IShellFolderViewDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Folder(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SelectedItems<Impl: IShellFolderViewDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SelectedItems(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FocusedItem<Impl: IShellFolderViewDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FocusedItem(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SelectItem<Impl: IShellFolderViewDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvfi: *const super::super::System::Com::VARIANT, dwflags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SelectItem(&*(&pvfi as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PopupItemMenu<Impl: IShellFolderViewDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfi: ::windows::core::RawPtr, vx: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, vy: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, pbs: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PopupItemMenu(
                &*(&pfi as *const <FolderItem as ::windows::core::Abi>::Abi as *const <FolderItem as ::windows::core::DefaultType>::DefaultType),
                &*(&vx as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&vy as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&pbs),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Script<Impl: IShellFolderViewDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Script(::core::mem::transmute_copy(&ppdisp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ViewOptions<Impl: IShellFolderViewDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plviewoptions: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ViewOptions(::core::mem::transmute_copy(&plviewoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellFolderViewDual>,
            ::windows::core::GetTrustLevel,
            Application::<Impl, OFFSET>,
            Parent::<Impl, OFFSET>,
            Folder::<Impl, OFFSET>,
            SelectedItems::<Impl, OFFSET>,
            FocusedItem::<Impl, OFFSET>,
            SelectItem::<Impl, OFFSET>,
            PopupItemMenu::<Impl, OFFSET>,
            Script::<Impl, OFFSET>,
            ViewOptions::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellFolderViewDual2Impl: Sized + IShellFolderViewDualImpl + IDispatchImpl {
    fn CurrentViewMode();
    fn SetCurrentViewMode();
    fn SelectItemRelative();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellFolderViewDual2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellFolderViewDual2";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellFolderViewDual2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellFolderViewDual2Impl, const OFFSET: isize>() -> IShellFolderViewDual2Vtbl {
        unsafe extern "system" fn CurrentViewMode<Impl: IShellFolderViewDual2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pviewmode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CurrentViewMode(::core::mem::transmute_copy(&pviewmode)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentViewMode<Impl: IShellFolderViewDual2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, viewmode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCurrentViewMode(viewmode) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SelectItemRelative<Impl: IShellFolderViewDual2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, irelative: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SelectItemRelative(irelative) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellFolderViewDual2>, ::windows::core::GetTrustLevel, CurrentViewMode::<Impl, OFFSET>, SetCurrentViewMode::<Impl, OFFSET>, SelectItemRelative::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellFolderViewDual3Impl: Sized + IShellFolderViewDual2Impl + IShellFolderViewDualImpl + IDispatchImpl {
    fn GroupBy();
    fn SetGroupBy();
    fn FolderFlags();
    fn SetFolderFlags();
    fn SortColumns();
    fn SetSortColumns();
    fn SetIconSize();
    fn IconSize();
    fn FilterView();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellFolderViewDual3 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellFolderViewDual3";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellFolderViewDual3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellFolderViewDual3Impl, const OFFSET: isize>() -> IShellFolderViewDual3Vtbl {
        unsafe extern "system" fn GroupBy<Impl: IShellFolderViewDual3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrgroupby: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GroupBy(::core::mem::transmute_copy(&pbstrgroupby)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetGroupBy<Impl: IShellFolderViewDual3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrgroupby: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetGroupBy(&*(&bstrgroupby as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FolderFlags<Impl: IShellFolderViewDual3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FolderFlags(::core::mem::transmute_copy(&pdwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFolderFlags<Impl: IShellFolderViewDual3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFolderFlags(dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SortColumns<Impl: IShellFolderViewDual3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrsortcolumns: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SortColumns(::core::mem::transmute_copy(&pbstrsortcolumns)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSortColumns<Impl: IShellFolderViewDual3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrsortcolumns: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetSortColumns(&*(&bstrsortcolumns as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetIconSize<Impl: IShellFolderViewDual3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, iiconsize: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetIconSize(iiconsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IconSize<Impl: IShellFolderViewDual3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, piiconsize: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IconSize(::core::mem::transmute_copy(&piiconsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FilterView<Impl: IShellFolderViewDual3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrfiltertext: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FilterView(&*(&bstrfiltertext as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellFolderViewDual3>,
            ::windows::core::GetTrustLevel,
            GroupBy::<Impl, OFFSET>,
            SetGroupBy::<Impl, OFFSET>,
            FolderFlags::<Impl, OFFSET>,
            SetFolderFlags::<Impl, OFFSET>,
            SortColumns::<Impl, OFFSET>,
            SetSortColumns::<Impl, OFFSET>,
            SetIconSize::<Impl, OFFSET>,
            IconSize::<Impl, OFFSET>,
            FilterView::<Impl, OFFSET>,
        )
    }
}
pub trait IShellIconImpl: Sized {
    fn GetIconOf();
}
impl ::windows::core::RuntimeName for IShellIcon {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellIcon";
}
impl IShellIconVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellIconImpl, const OFFSET: isize>() -> IShellIconVtbl {
        unsafe extern "system" fn GetIconOf<Impl: IShellIconImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, flags: u32, piconindex: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIconOf(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&piconindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellIcon>, ::windows::core::GetTrustLevel, GetIconOf::<Impl, OFFSET>)
    }
}
pub trait IShellIconOverlayImpl: Sized {
    fn GetOverlayIndex();
    fn GetOverlayIconIndex();
}
impl ::windows::core::RuntimeName for IShellIconOverlay {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellIconOverlay";
}
impl IShellIconOverlayVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellIconOverlayImpl, const OFFSET: isize>() -> IShellIconOverlayVtbl {
        unsafe extern "system" fn GetOverlayIndex<Impl: IShellIconOverlayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pindex: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOverlayIndex(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), pindex) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOverlayIconIndex<Impl: IShellIconOverlayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, piconindex: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOverlayIconIndex(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), piconindex) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellIconOverlay>, ::windows::core::GetTrustLevel, GetOverlayIndex::<Impl, OFFSET>, GetOverlayIconIndex::<Impl, OFFSET>)
    }
}
pub trait IShellIconOverlayIdentifierImpl: Sized {
    fn IsMemberOf();
    fn GetOverlayInfo();
    fn GetPriority();
}
impl ::windows::core::RuntimeName for IShellIconOverlayIdentifier {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellIconOverlayIdentifier";
}
impl IShellIconOverlayIdentifierVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellIconOverlayIdentifierImpl, const OFFSET: isize>() -> IShellIconOverlayIdentifierVtbl {
        unsafe extern "system" fn IsMemberOf<Impl: IShellIconOverlayIdentifierImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszpath: super::super::Foundation::PWSTR, dwattrib: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsMemberOf(&*(&pwszpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwattrib) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOverlayInfo<Impl: IShellIconOverlayIdentifierImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwsziconfile: super::super::Foundation::PWSTR, cchmax: i32, pindex: *mut i32, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOverlayInfo(::core::mem::transmute_copy(&pwsziconfile), cchmax, ::core::mem::transmute_copy(&pindex), ::core::mem::transmute_copy(&pdwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPriority<Impl: IShellIconOverlayIdentifierImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppriority: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPriority(::core::mem::transmute_copy(&ppriority)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellIconOverlayIdentifier>, ::windows::core::GetTrustLevel, IsMemberOf::<Impl, OFFSET>, GetOverlayInfo::<Impl, OFFSET>, GetPriority::<Impl, OFFSET>)
    }
}
pub trait IShellIconOverlayManagerImpl: Sized {
    fn GetFileOverlayInfo();
    fn GetReservedOverlayInfo();
    fn RefreshOverlayImages();
    fn LoadNonloadedOverlayIdentifiers();
    fn OverlayIndexFromImageIndex();
}
impl ::windows::core::RuntimeName for IShellIconOverlayManager {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellIconOverlayManager";
}
impl IShellIconOverlayManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellIconOverlayManagerImpl, const OFFSET: isize>() -> IShellIconOverlayManagerVtbl {
        unsafe extern "system" fn GetFileOverlayInfo<Impl: IShellIconOverlayManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszpath: super::super::Foundation::PWSTR, dwattrib: u32, pindex: *mut i32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFileOverlayInfo(&*(&pwszpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwattrib, ::core::mem::transmute_copy(&pindex), dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetReservedOverlayInfo<Impl: IShellIconOverlayManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszpath: super::super::Foundation::PWSTR, dwattrib: u32, pindex: *mut i32, dwflags: u32, ireservedid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetReservedOverlayInfo(&*(&pwszpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwattrib, ::core::mem::transmute_copy(&pindex), dwflags, ireservedid) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RefreshOverlayImages<Impl: IShellIconOverlayManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RefreshOverlayImages(dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LoadNonloadedOverlayIdentifiers<Impl: IShellIconOverlayManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).LoadNonloadedOverlayIdentifiers() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OverlayIndexFromImageIndex<Impl: IShellIconOverlayManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, iimage: i32, piindex: *mut i32, fadd: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OverlayIndexFromImageIndex(iimage, ::core::mem::transmute_copy(&piindex), &*(&fadd as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellIconOverlayManager>, ::windows::core::GetTrustLevel, GetFileOverlayInfo::<Impl, OFFSET>, GetReservedOverlayInfo::<Impl, OFFSET>, RefreshOverlayImages::<Impl, OFFSET>, LoadNonloadedOverlayIdentifiers::<Impl, OFFSET>, OverlayIndexFromImageIndex::<Impl, OFFSET>)
    }
}
pub trait IShellImageDataImpl: Sized {
    fn Decode();
    fn Draw();
    fn NextFrame();
    fn NextPage();
    fn PrevPage();
    fn IsTransparent();
    fn IsAnimated();
    fn IsVector();
    fn IsMultipage();
    fn IsEditable();
    fn IsPrintable();
    fn IsDecoded();
    fn GetCurrentPage();
    fn GetPageCount();
    fn SelectPage();
    fn GetSize();
    fn GetRawDataFormat();
    fn GetPixelFormat();
    fn GetDelay();
    fn GetProperties();
    fn Rotate();
    fn Scale();
    fn DiscardEdit();
    fn SetEncoderParams();
    fn DisplayName();
    fn GetResolution();
    fn GetEncoderParams();
    fn RegisterAbort();
    fn CloneFrame();
    fn ReplaceFrame();
}
impl ::windows::core::RuntimeName for IShellImageData {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellImageData";
}
impl IShellImageDataVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellImageDataImpl, const OFFSET: isize>() -> IShellImageDataVtbl {
        unsafe extern "system" fn Decode<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, cxdesired: u32, cydesired: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Decode(dwflags, cxdesired, cydesired) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Draw<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, prcdest: *mut super::super::Foundation::RECT, prcsrc: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Draw(
                &*(&hdc as *const <super::super::Graphics::Gdi::HDC as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::HDC as ::windows::core::DefaultType>::DefaultType),
                &*(&prcdest as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType),
                &*(&prcsrc as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NextFrame<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).NextFrame() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NextPage<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).NextPage() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PrevPage<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PrevPage() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsTransparent<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsTransparent() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsAnimated<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsAnimated() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsVector<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsVector() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsMultipage<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsMultipage() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsEditable<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsEditable() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsPrintable<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsPrintable() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsDecoded<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsDecoded() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentPage<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnpage: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentPage(pnpage) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPageCount<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcpages: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPageCount(pcpages) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SelectPage<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ipage: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SelectPage(ipage) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSize<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psize: *mut super::super::Foundation::SIZE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSize(&*(&psize as *const <super::super::Foundation::SIZE as ::windows::core::Abi>::Abi as *const <super::super::Foundation::SIZE as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRawDataFormat<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdataformat: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRawDataFormat(&*(&pdataformat as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPixelFormat<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pformat: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPixelFormat(pformat) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDelay<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwdelay: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDelay(pdwdelay) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProperties<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwmode: u32, pppropset: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProperties(dwmode, ::core::mem::transmute_copy(&pppropset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Rotate<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwangle: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Rotate(dwangle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Scale<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cx: u32, cy: u32, hints: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Scale(cx, cy, hints) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DiscardEdit<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DiscardEdit() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEncoderParams<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbagenc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetEncoderParams(&*(&pbagenc as *const <super::super::System::Com::StructuredStorage::IPropertyBag as ::windows::core::Abi>::Abi as *const <super::super::System::Com::StructuredStorage::IPropertyBag as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisplayName<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, wszname: super::super::Foundation::PWSTR, cch: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DisplayName(&*(&wszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), cch) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetResolution<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, puresolutionx: *mut u32, puresolutiony: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetResolution(puresolutionx, puresolutiony) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEncoderParams<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguidfmt: *mut ::windows::core::GUID, ppencparams: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEncoderParams(&*(&pguidfmt as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ppencparams) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterAbort<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pabort: ::windows::core::RawPtr, ppabortprev: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RegisterAbort(&*(&pabort as *const <IShellImageDataAbort as ::windows::core::Abi>::Abi as *const <IShellImageDataAbort as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppabortprev)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CloneFrame<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppimg: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CloneFrame(ppimg) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReplaceFrame<Impl: IShellImageDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pimg: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReplaceFrame(pimg) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellImageData>,
            ::windows::core::GetTrustLevel,
            Decode::<Impl, OFFSET>,
            Draw::<Impl, OFFSET>,
            NextFrame::<Impl, OFFSET>,
            NextPage::<Impl, OFFSET>,
            PrevPage::<Impl, OFFSET>,
            IsTransparent::<Impl, OFFSET>,
            IsAnimated::<Impl, OFFSET>,
            IsVector::<Impl, OFFSET>,
            IsMultipage::<Impl, OFFSET>,
            IsEditable::<Impl, OFFSET>,
            IsPrintable::<Impl, OFFSET>,
            IsDecoded::<Impl, OFFSET>,
            GetCurrentPage::<Impl, OFFSET>,
            GetPageCount::<Impl, OFFSET>,
            SelectPage::<Impl, OFFSET>,
            GetSize::<Impl, OFFSET>,
            GetRawDataFormat::<Impl, OFFSET>,
            GetPixelFormat::<Impl, OFFSET>,
            GetDelay::<Impl, OFFSET>,
            GetProperties::<Impl, OFFSET>,
            Rotate::<Impl, OFFSET>,
            Scale::<Impl, OFFSET>,
            DiscardEdit::<Impl, OFFSET>,
            SetEncoderParams::<Impl, OFFSET>,
            DisplayName::<Impl, OFFSET>,
            GetResolution::<Impl, OFFSET>,
            GetEncoderParams::<Impl, OFFSET>,
            RegisterAbort::<Impl, OFFSET>,
            CloneFrame::<Impl, OFFSET>,
            ReplaceFrame::<Impl, OFFSET>,
        )
    }
}
pub trait IShellImageDataAbortImpl: Sized {
    fn QueryAbort();
}
impl ::windows::core::RuntimeName for IShellImageDataAbort {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellImageDataAbort";
}
impl IShellImageDataAbortVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellImageDataAbortImpl, const OFFSET: isize>() -> IShellImageDataAbortVtbl {
        unsafe extern "system" fn QueryAbort<Impl: IShellImageDataAbortImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryAbort() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellImageDataAbort>, ::windows::core::GetTrustLevel, QueryAbort::<Impl, OFFSET>)
    }
}
pub trait IShellImageDataFactoryImpl: Sized {
    fn CreateIShellImageData();
    fn CreateImageFromFile();
    fn CreateImageFromStream();
    fn GetDataFormatFromPath();
}
impl ::windows::core::RuntimeName for IShellImageDataFactory {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellImageDataFactory";
}
impl IShellImageDataFactoryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellImageDataFactoryImpl, const OFFSET: isize>() -> IShellImageDataFactoryVtbl {
        unsafe extern "system" fn CreateIShellImageData<Impl: IShellImageDataFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppshimg: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateIShellImageData(::core::mem::transmute_copy(&ppshimg)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateImageFromFile<Impl: IShellImageDataFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszpath: super::super::Foundation::PWSTR, ppshimg: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateImageFromFile(&*(&pszpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppshimg)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateImageFromStream<Impl: IShellImageDataFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstream: ::windows::core::RawPtr, ppshimg: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateImageFromStream(&*(&pstream as *const <super::super::System::Com::IStream as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IStream as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppshimg)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDataFormatFromPath<Impl: IShellImageDataFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszpath: super::super::Foundation::PWSTR, pdataformat: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDataFormatFromPath(&*(&pszpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdataformat)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellImageDataFactory>, ::windows::core::GetTrustLevel, CreateIShellImageData::<Impl, OFFSET>, CreateImageFromFile::<Impl, OFFSET>, CreateImageFromStream::<Impl, OFFSET>, GetDataFormatFromPath::<Impl, OFFSET>)
    }
}
pub trait IShellItemImpl: Sized {
    fn BindToHandler();
    fn GetParent();
    fn GetDisplayName();
    fn GetAttributes();
    fn Compare();
}
impl ::windows::core::RuntimeName for IShellItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellItem";
}
impl IShellItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellItemImpl, const OFFSET: isize>() -> IShellItemVtbl {
        unsafe extern "system" fn BindToHandler<Impl: IShellItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbc: ::windows::core::RawPtr, bhid: *const ::windows::core::GUID, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BindToHandler(
                &*(&pbc as *const <super::super::System::Com::IBindCtx as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindCtx as ::windows::core::DefaultType>::DefaultType),
                &*(&bhid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppv),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetParent<Impl: IShellItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetParent(::core::mem::transmute_copy(&ppsi)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDisplayName<Impl: IShellItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sigdnname: SIGDN, ppszname: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDisplayName(sigdnname, ::core::mem::transmute_copy(&ppszname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAttributes<Impl: IShellItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sfgaomask: u32, psfgaoattribs: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAttributes(sfgaomask, ::core::mem::transmute_copy(&psfgaoattribs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Compare<Impl: IShellItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, hint: u32, piorder: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Compare(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), hint, ::core::mem::transmute_copy(&piorder)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellItem>, ::windows::core::GetTrustLevel, BindToHandler::<Impl, OFFSET>, GetParent::<Impl, OFFSET>, GetDisplayName::<Impl, OFFSET>, GetAttributes::<Impl, OFFSET>, Compare::<Impl, OFFSET>)
    }
}
pub trait IShellItem2Impl: Sized + IShellItemImpl {
    fn GetPropertyStore();
    fn GetPropertyStoreWithCreateObject();
    fn GetPropertyStoreForKeys();
    fn GetPropertyDescriptionList();
    fn Update();
    fn GetProperty();
    fn GetCLSID();
    fn GetFileTime();
    fn GetInt32();
    fn GetString();
    fn GetUInt32();
    fn GetUInt64();
    fn GetBool();
}
impl ::windows::core::RuntimeName for IShellItem2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellItem2";
}
impl IShellItem2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellItem2Impl, const OFFSET: isize>() -> IShellItem2Vtbl {
        unsafe extern "system" fn GetPropertyStore<Impl: IShellItem2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPropertyStore(flags, &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPropertyStoreWithCreateObject<Impl: IShellItem2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, punkcreateobject: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPropertyStoreWithCreateObject(flags, &*(&punkcreateobject as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPropertyStoreForKeys<Impl: IShellItem2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rgkeys: *const PropertiesSystem::PROPERTYKEY, ckeys: u32, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPropertyStoreForKeys(&*(&rgkeys as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), ckeys, flags, &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPropertyDescriptionList<Impl: IShellItem2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, keytype: *const PropertiesSystem::PROPERTYKEY, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPropertyDescriptionList(&*(&keytype as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Update<Impl: IShellItem2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Update(&*(&pbc as *const <super::super::System::Com::IBindCtx as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindCtx as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProperty<Impl: IShellItem2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, ppropvar: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProperty(&*(&key as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppropvar)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCLSID<Impl: IShellItem2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pclsid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCLSID(&*(&key as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pclsid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFileTime<Impl: IShellItem2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pft: *mut super::super::Foundation::FILETIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFileTime(&*(&key as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pft)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInt32<Impl: IShellItem2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pi: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetInt32(&*(&key as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pi)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetString<Impl: IShellItem2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, ppsz: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetString(&*(&key as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppsz)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetUInt32<Impl: IShellItem2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pui: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetUInt32(&*(&key as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pui)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetUInt64<Impl: IShellItem2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pull: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetUInt64(&*(&key as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pull)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBool<Impl: IShellItem2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pf: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBool(&*(&key as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellItem2>,
            ::windows::core::GetTrustLevel,
            GetPropertyStore::<Impl, OFFSET>,
            GetPropertyStoreWithCreateObject::<Impl, OFFSET>,
            GetPropertyStoreForKeys::<Impl, OFFSET>,
            GetPropertyDescriptionList::<Impl, OFFSET>,
            Update::<Impl, OFFSET>,
            GetProperty::<Impl, OFFSET>,
            GetCLSID::<Impl, OFFSET>,
            GetFileTime::<Impl, OFFSET>,
            GetInt32::<Impl, OFFSET>,
            GetString::<Impl, OFFSET>,
            GetUInt32::<Impl, OFFSET>,
            GetUInt64::<Impl, OFFSET>,
            GetBool::<Impl, OFFSET>,
        )
    }
}
pub trait IShellItemArrayImpl: Sized {
    fn BindToHandler();
    fn GetPropertyStore();
    fn GetPropertyDescriptionList();
    fn GetAttributes();
    fn GetCount();
    fn GetItemAt();
    fn EnumItems();
}
impl ::windows::core::RuntimeName for IShellItemArray {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellItemArray";
}
impl IShellItemArrayVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellItemArrayImpl, const OFFSET: isize>() -> IShellItemArrayVtbl {
        unsafe extern "system" fn BindToHandler<Impl: IShellItemArrayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbc: ::windows::core::RawPtr, bhid: *const ::windows::core::GUID, riid: *const ::windows::core::GUID, ppvout: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BindToHandler(
                &*(&pbc as *const <super::super::System::Com::IBindCtx as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindCtx as ::windows::core::DefaultType>::DefaultType),
                &*(&bhid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppvout),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPropertyStore<Impl: IShellItemArrayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPropertyStore(flags, &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPropertyDescriptionList<Impl: IShellItemArrayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, keytype: *const PropertiesSystem::PROPERTYKEY, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPropertyDescriptionList(&*(&keytype as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAttributes<Impl: IShellItemArrayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, attribflags: SIATTRIBFLAGS, sfgaomask: u32, psfgaoattribs: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAttributes(attribflags, sfgaomask, ::core::mem::transmute_copy(&psfgaoattribs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCount<Impl: IShellItemArrayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwnumitems: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCount(::core::mem::transmute_copy(&pdwnumitems)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemAt<Impl: IShellItemArrayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppsi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemAt(dwindex, ::core::mem::transmute_copy(&ppsi)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumItems<Impl: IShellItemArrayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenumshellitems: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumItems(::core::mem::transmute_copy(&ppenumshellitems)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellItemArray>, ::windows::core::GetTrustLevel, BindToHandler::<Impl, OFFSET>, GetPropertyStore::<Impl, OFFSET>, GetPropertyDescriptionList::<Impl, OFFSET>, GetAttributes::<Impl, OFFSET>, GetCount::<Impl, OFFSET>, GetItemAt::<Impl, OFFSET>, EnumItems::<Impl, OFFSET>)
    }
}
pub trait IShellItemFilterImpl: Sized {
    fn IncludeItem();
    fn GetEnumFlagsForItem();
}
impl ::windows::core::RuntimeName for IShellItemFilter {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellItemFilter";
}
impl IShellItemFilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellItemFilterImpl, const OFFSET: isize>() -> IShellItemFilterVtbl {
        unsafe extern "system" fn IncludeItem<Impl: IShellItemFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IncludeItem(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEnumFlagsForItem<Impl: IShellItemFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, pgrfflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEnumFlagsForItem(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pgrfflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellItemFilter>, ::windows::core::GetTrustLevel, IncludeItem::<Impl, OFFSET>, GetEnumFlagsForItem::<Impl, OFFSET>)
    }
}
pub trait IShellItemImageFactoryImpl: Sized {
    fn GetImage();
}
impl ::windows::core::RuntimeName for IShellItemImageFactory {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellItemImageFactory";
}
impl IShellItemImageFactoryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellItemImageFactoryImpl, const OFFSET: isize>() -> IShellItemImageFactoryVtbl {
        unsafe extern "system" fn GetImage<Impl: IShellItemImageFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: super::super::Foundation::SIZE, flags: SIIGBF, phbm: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetImage(&*(&size as *const <super::super::Foundation::SIZE as ::windows::core::Abi>::Abi as *const <super::super::Foundation::SIZE as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&phbm)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellItemImageFactory>, ::windows::core::GetTrustLevel, GetImage::<Impl, OFFSET>)
    }
}
pub trait IShellItemResourcesImpl: Sized {
    fn GetAttributes();
    fn GetSize();
    fn GetTimes();
    fn SetTimes();
    fn GetResourceDescription();
    fn EnumResources();
    fn SupportsResource();
    fn OpenResource();
    fn CreateResource();
    fn MarkForDelete();
}
impl ::windows::core::RuntimeName for IShellItemResources {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellItemResources";
}
impl IShellItemResourcesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellItemResourcesImpl, const OFFSET: isize>() -> IShellItemResourcesVtbl {
        unsafe extern "system" fn GetAttributes<Impl: IShellItemResourcesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwattributes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAttributes(::core::mem::transmute_copy(&pdwattributes)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSize<Impl: IShellItemResourcesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pullsize: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSize(::core::mem::transmute_copy(&pullsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTimes<Impl: IShellItemResourcesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pftcreation: *mut super::super::Foundation::FILETIME, pftwrite: *mut super::super::Foundation::FILETIME, pftaccess: *mut super::super::Foundation::FILETIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTimes(::core::mem::transmute_copy(&pftcreation), ::core::mem::transmute_copy(&pftwrite), ::core::mem::transmute_copy(&pftaccess)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTimes<Impl: IShellItemResourcesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pftcreation: *const super::super::Foundation::FILETIME, pftwrite: *const super::super::Foundation::FILETIME, pftaccess: *const super::super::Foundation::FILETIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTimes(
                &*(&pftcreation as *const <super::super::Foundation::FILETIME as ::windows::core::Abi>::Abi as *const <super::super::Foundation::FILETIME as ::windows::core::DefaultType>::DefaultType),
                &*(&pftwrite as *const <super::super::Foundation::FILETIME as ::windows::core::Abi>::Abi as *const <super::super::Foundation::FILETIME as ::windows::core::DefaultType>::DefaultType),
                &*(&pftaccess as *const <super::super::Foundation::FILETIME as ::windows::core::Abi>::Abi as *const <super::super::Foundation::FILETIME as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetResourceDescription<Impl: IShellItemResourcesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcsir: *const SHELL_ITEM_RESOURCE, ppszdescription: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetResourceDescription(&*(&pcsir as *const <SHELL_ITEM_RESOURCE as ::windows::core::Abi>::Abi as *const <SHELL_ITEM_RESOURCE as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppszdescription)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumResources<Impl: IShellItemResourcesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenumr: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumResources(::core::mem::transmute_copy(&ppenumr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SupportsResource<Impl: IShellItemResourcesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcsir: *const SHELL_ITEM_RESOURCE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SupportsResource(&*(&pcsir as *const <SHELL_ITEM_RESOURCE as ::windows::core::Abi>::Abi as *const <SHELL_ITEM_RESOURCE as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenResource<Impl: IShellItemResourcesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcsir: *const SHELL_ITEM_RESOURCE, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OpenResource(&*(&pcsir as *const <SHELL_ITEM_RESOURCE as ::windows::core::Abi>::Abi as *const <SHELL_ITEM_RESOURCE as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateResource<Impl: IShellItemResourcesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcsir: *const SHELL_ITEM_RESOURCE, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateResource(&*(&pcsir as *const <SHELL_ITEM_RESOURCE as ::windows::core::Abi>::Abi as *const <SHELL_ITEM_RESOURCE as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MarkForDelete<Impl: IShellItemResourcesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MarkForDelete() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellItemResources>,
            ::windows::core::GetTrustLevel,
            GetAttributes::<Impl, OFFSET>,
            GetSize::<Impl, OFFSET>,
            GetTimes::<Impl, OFFSET>,
            SetTimes::<Impl, OFFSET>,
            GetResourceDescription::<Impl, OFFSET>,
            EnumResources::<Impl, OFFSET>,
            SupportsResource::<Impl, OFFSET>,
            OpenResource::<Impl, OFFSET>,
            CreateResource::<Impl, OFFSET>,
            MarkForDelete::<Impl, OFFSET>,
        )
    }
}
pub trait IShellLibraryImpl: Sized {
    fn LoadLibraryFromItem();
    fn LoadLibraryFromKnownFolder();
    fn AddFolder();
    fn RemoveFolder();
    fn GetFolders();
    fn ResolveFolder();
    fn GetDefaultSaveFolder();
    fn SetDefaultSaveFolder();
    fn GetOptions();
    fn SetOptions();
    fn GetFolderType();
    fn SetFolderType();
    fn GetIcon();
    fn SetIcon();
    fn Commit();
    fn Save();
    fn SaveInKnownFolder();
}
impl ::windows::core::RuntimeName for IShellLibrary {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellLibrary";
}
impl IShellLibraryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellLibraryImpl, const OFFSET: isize>() -> IShellLibraryVtbl {
        unsafe extern "system" fn LoadLibraryFromItem<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psilibrary: ::windows::core::RawPtr, grfmode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).LoadLibraryFromItem(&*(&psilibrary as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), grfmode) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LoadLibraryFromKnownFolder<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kfidlibrary: *const ::windows::core::GUID, grfmode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).LoadLibraryFromKnownFolder(&*(&kfidlibrary as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), grfmode) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddFolder<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psilocation: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddFolder(&*(&psilocation as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveFolder<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psilocation: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveFolder(&*(&psilocation as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolders<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lff: LIBRARYFOLDERFILTER, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolders(lff, &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResolveFolder<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psifoldertoresolve: ::windows::core::RawPtr, dwtimeout: u32, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ResolveFolder(&*(&psifoldertoresolve as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), dwtimeout, &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDefaultSaveFolder<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dsft: DEFAULTSAVEFOLDERTYPE, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDefaultSaveFolder(dsft, &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDefaultSaveFolder<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dsft: DEFAULTSAVEFOLDERTYPE, psi: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetDefaultSaveFolder(dsft, &*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOptions<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plofoptions: *mut LIBRARYOPTIONFLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOptions(::core::mem::transmute_copy(&plofoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOptions<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lofmask: LIBRARYOPTIONFLAGS, lofoptions: LIBRARYOPTIONFLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetOptions(lofmask, lofoptions) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFolderType<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pftid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFolderType(::core::mem::transmute_copy(&pftid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFolderType<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ftid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFolderType(&*(&ftid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIcon<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszicon: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIcon(::core::mem::transmute_copy(&ppszicon)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetIcon<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszicon: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetIcon(&*(&pszicon as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Commit<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Commit() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Save<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psifoldertosavein: ::windows::core::RawPtr, pszlibraryname: super::super::Foundation::PWSTR, lsf: LIBRARYSAVEFLAGS, ppsisavedto: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Save(&*(&psifoldertosavein as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&pszlibraryname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), lsf, ::core::mem::transmute_copy(&ppsisavedto)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SaveInKnownFolder<Impl: IShellLibraryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kfidtosavein: *const ::windows::core::GUID, pszlibraryname: super::super::Foundation::PWSTR, lsf: LIBRARYSAVEFLAGS, ppsisavedto: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SaveInKnownFolder(&*(&kfidtosavein as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&pszlibraryname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), lsf, ::core::mem::transmute_copy(&ppsisavedto)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellLibrary>,
            ::windows::core::GetTrustLevel,
            LoadLibraryFromItem::<Impl, OFFSET>,
            LoadLibraryFromKnownFolder::<Impl, OFFSET>,
            AddFolder::<Impl, OFFSET>,
            RemoveFolder::<Impl, OFFSET>,
            GetFolders::<Impl, OFFSET>,
            ResolveFolder::<Impl, OFFSET>,
            GetDefaultSaveFolder::<Impl, OFFSET>,
            SetDefaultSaveFolder::<Impl, OFFSET>,
            GetOptions::<Impl, OFFSET>,
            SetOptions::<Impl, OFFSET>,
            GetFolderType::<Impl, OFFSET>,
            SetFolderType::<Impl, OFFSET>,
            GetIcon::<Impl, OFFSET>,
            SetIcon::<Impl, OFFSET>,
            Commit::<Impl, OFFSET>,
            Save::<Impl, OFFSET>,
            SaveInKnownFolder::<Impl, OFFSET>,
        )
    }
}
pub trait IShellLinkAImpl: Sized {
    fn GetPath();
    fn GetIDList();
    fn SetIDList();
    fn GetDescription();
    fn SetDescription();
    fn GetWorkingDirectory();
    fn SetWorkingDirectory();
    fn GetArguments();
    fn SetArguments();
    fn GetHotkey();
    fn SetHotkey();
    fn GetShowCmd();
    fn SetShowCmd();
    fn GetIconLocation();
    fn SetIconLocation();
    fn SetRelativePath();
    fn Resolve();
    fn SetPath();
}
impl ::windows::core::RuntimeName for IShellLinkA {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellLinkA";
}
impl IShellLinkAVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellLinkAImpl, const OFFSET: isize>() -> IShellLinkAVtbl {
        unsafe extern "system" fn GetPath<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfile: super::super::Foundation::PSTR, cch: i32, pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAA, fflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPath(::core::mem::transmute_copy(&pszfile), cch, &*(&pfd as *const <super::super::Storage::FileSystem::WIN32_FIND_DATAA as ::windows::core::Abi>::Abi as *const <super::super::Storage::FileSystem::WIN32_FIND_DATAA as ::windows::core::DefaultType>::DefaultType), fflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIDList<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIDList(::core::mem::transmute_copy(&ppidl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetIDList<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetIDList(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDescription<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::Foundation::PSTR, cch: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDescription(::core::mem::transmute_copy(&pszname), cch) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDescription<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetDescription(&*(&pszname as *const <super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWorkingDirectory<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdir: super::super::Foundation::PSTR, cch: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetWorkingDirectory(::core::mem::transmute_copy(&pszdir), cch) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetWorkingDirectory<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdir: super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetWorkingDirectory(&*(&pszdir as *const <super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetArguments<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszargs: super::super::Foundation::PSTR, cch: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetArguments(::core::mem::transmute_copy(&pszargs), cch) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetArguments<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszargs: super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetArguments(&*(&pszargs as *const <super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetHotkey<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwhotkey: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetHotkey(::core::mem::transmute_copy(&pwhotkey)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetHotkey<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, whotkey: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetHotkey(whotkey) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetShowCmd<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pishowcmd: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetShowCmd(::core::mem::transmute_copy(&pishowcmd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetShowCmd<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ishowcmd: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetShowCmd(ishowcmd) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIconLocation<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psziconpath: super::super::Foundation::PSTR, cch: i32, piicon: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIconLocation(::core::mem::transmute_copy(&psziconpath), cch, ::core::mem::transmute_copy(&piicon)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetIconLocation<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psziconpath: super::super::Foundation::PSTR, iicon: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetIconLocation(&*(&psziconpath as *const <super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), iicon) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRelativePath<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszpathrel: super::super::Foundation::PSTR, dwreserved: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetRelativePath(&*(&pszpathrel as *const <super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), dwreserved) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Resolve<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, fflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Resolve(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), fflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPath<Impl: IShellLinkAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfile: super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetPath(&*(&pszfile as *const <super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellLinkA>,
            ::windows::core::GetTrustLevel,
            GetPath::<Impl, OFFSET>,
            GetIDList::<Impl, OFFSET>,
            SetIDList::<Impl, OFFSET>,
            GetDescription::<Impl, OFFSET>,
            SetDescription::<Impl, OFFSET>,
            GetWorkingDirectory::<Impl, OFFSET>,
            SetWorkingDirectory::<Impl, OFFSET>,
            GetArguments::<Impl, OFFSET>,
            SetArguments::<Impl, OFFSET>,
            GetHotkey::<Impl, OFFSET>,
            SetHotkey::<Impl, OFFSET>,
            GetShowCmd::<Impl, OFFSET>,
            SetShowCmd::<Impl, OFFSET>,
            GetIconLocation::<Impl, OFFSET>,
            SetIconLocation::<Impl, OFFSET>,
            SetRelativePath::<Impl, OFFSET>,
            Resolve::<Impl, OFFSET>,
            SetPath::<Impl, OFFSET>,
        )
    }
}
pub trait IShellLinkDataListImpl: Sized {
    fn AddDataBlock();
    fn CopyDataBlock();
    fn RemoveDataBlock();
    fn GetFlags();
    fn SetFlags();
}
impl ::windows::core::RuntimeName for IShellLinkDataList {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellLinkDataList";
}
impl IShellLinkDataListVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellLinkDataListImpl, const OFFSET: isize>() -> IShellLinkDataListVtbl {
        unsafe extern "system" fn AddDataBlock<Impl: IShellLinkDataListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdatablock: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddDataBlock(&*(&pdatablock as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CopyDataBlock<Impl: IShellLinkDataListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsig: u32, ppdatablock: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CopyDataBlock(dwsig, ::core::mem::transmute_copy(&ppdatablock)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveDataBlock<Impl: IShellLinkDataListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsig: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveDataBlock(dwsig) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFlags<Impl: IShellLinkDataListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFlags(::core::mem::transmute_copy(&pdwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFlags<Impl: IShellLinkDataListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFlags(dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellLinkDataList>, ::windows::core::GetTrustLevel, AddDataBlock::<Impl, OFFSET>, CopyDataBlock::<Impl, OFFSET>, RemoveDataBlock::<Impl, OFFSET>, GetFlags::<Impl, OFFSET>, SetFlags::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellLinkDualImpl: Sized + IDispatchImpl {
    fn Path();
    fn SetPath();
    fn Description();
    fn SetDescription();
    fn WorkingDirectory();
    fn SetWorkingDirectory();
    fn Arguments();
    fn SetArguments();
    fn Hotkey();
    fn SetHotkey();
    fn ShowCommand();
    fn SetShowCommand();
    fn Resolve();
    fn GetIconLocation();
    fn SetIconLocation();
    fn Save();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellLinkDual {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellLinkDual";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellLinkDualVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellLinkDualImpl, const OFFSET: isize>() -> IShellLinkDualVtbl {
        unsafe extern "system" fn Path<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbs: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Path(::core::mem::transmute_copy(&pbs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPath<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bs: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetPath(&*(&bs as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Description<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbs: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Description(::core::mem::transmute_copy(&pbs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDescription<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bs: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetDescription(&*(&bs as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WorkingDirectory<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbs: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WorkingDirectory(::core::mem::transmute_copy(&pbs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetWorkingDirectory<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bs: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetWorkingDirectory(&*(&bs as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Arguments<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbs: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Arguments(::core::mem::transmute_copy(&pbs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetArguments<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bs: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetArguments(&*(&bs as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Hotkey<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pihk: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Hotkey(::core::mem::transmute_copy(&pihk)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetHotkey<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ihk: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetHotkey(ihk) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShowCommand<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pishowcommand: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowCommand(::core::mem::transmute_copy(&pishowcommand)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetShowCommand<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ishowcommand: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetShowCommand(ishowcommand) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Resolve<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fflags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Resolve(fflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIconLocation<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbs: *mut super::super::Foundation::BSTR, piicon: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIconLocation(::core::mem::transmute_copy(&pbs), ::core::mem::transmute_copy(&piicon)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetIconLocation<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bs: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, iicon: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetIconLocation(&*(&bs as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), iicon) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Save<Impl: IShellLinkDualImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vwhere: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Save(&*(&vwhere as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellLinkDual>,
            ::windows::core::GetTrustLevel,
            Path::<Impl, OFFSET>,
            SetPath::<Impl, OFFSET>,
            Description::<Impl, OFFSET>,
            SetDescription::<Impl, OFFSET>,
            WorkingDirectory::<Impl, OFFSET>,
            SetWorkingDirectory::<Impl, OFFSET>,
            Arguments::<Impl, OFFSET>,
            SetArguments::<Impl, OFFSET>,
            Hotkey::<Impl, OFFSET>,
            SetHotkey::<Impl, OFFSET>,
            ShowCommand::<Impl, OFFSET>,
            SetShowCommand::<Impl, OFFSET>,
            Resolve::<Impl, OFFSET>,
            GetIconLocation::<Impl, OFFSET>,
            SetIconLocation::<Impl, OFFSET>,
            Save::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellLinkDual2Impl: Sized + IShellLinkDualImpl + IDispatchImpl {
    fn Target();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellLinkDual2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellLinkDual2";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellLinkDual2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellLinkDual2Impl, const OFFSET: isize>() -> IShellLinkDual2Vtbl {
        unsafe extern "system" fn Target<Impl: IShellLinkDual2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppfi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Target(::core::mem::transmute_copy(&ppfi)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellLinkDual2>, ::windows::core::GetTrustLevel, Target::<Impl, OFFSET>)
    }
}
pub trait IShellLinkWImpl: Sized {
    fn GetPath();
    fn GetIDList();
    fn SetIDList();
    fn GetDescription();
    fn SetDescription();
    fn GetWorkingDirectory();
    fn SetWorkingDirectory();
    fn GetArguments();
    fn SetArguments();
    fn GetHotkey();
    fn SetHotkey();
    fn GetShowCmd();
    fn SetShowCmd();
    fn GetIconLocation();
    fn SetIconLocation();
    fn SetRelativePath();
    fn Resolve();
    fn SetPath();
}
impl ::windows::core::RuntimeName for IShellLinkW {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellLinkW";
}
impl IShellLinkWVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellLinkWImpl, const OFFSET: isize>() -> IShellLinkWVtbl {
        unsafe extern "system" fn GetPath<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfile: super::super::Foundation::PWSTR, cch: i32, pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAW, fflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPath(::core::mem::transmute_copy(&pszfile), cch, &*(&pfd as *const <super::super::Storage::FileSystem::WIN32_FIND_DATAW as ::windows::core::Abi>::Abi as *const <super::super::Storage::FileSystem::WIN32_FIND_DATAW as ::windows::core::DefaultType>::DefaultType), fflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIDList<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIDList(::core::mem::transmute_copy(&ppidl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetIDList<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetIDList(&*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDescription<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::Foundation::PWSTR, cch: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDescription(::core::mem::transmute_copy(&pszname), cch) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDescription<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetDescription(&*(&pszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWorkingDirectory<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdir: super::super::Foundation::PWSTR, cch: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetWorkingDirectory(::core::mem::transmute_copy(&pszdir), cch) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetWorkingDirectory<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdir: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetWorkingDirectory(&*(&pszdir as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetArguments<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszargs: super::super::Foundation::PWSTR, cch: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetArguments(::core::mem::transmute_copy(&pszargs), cch) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetArguments<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszargs: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetArguments(&*(&pszargs as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetHotkey<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwhotkey: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetHotkey(::core::mem::transmute_copy(&pwhotkey)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetHotkey<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, whotkey: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetHotkey(whotkey) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetShowCmd<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pishowcmd: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetShowCmd(::core::mem::transmute_copy(&pishowcmd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetShowCmd<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ishowcmd: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetShowCmd(ishowcmd) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIconLocation<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psziconpath: super::super::Foundation::PWSTR, cch: i32, piicon: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIconLocation(::core::mem::transmute_copy(&psziconpath), cch, ::core::mem::transmute_copy(&piicon)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetIconLocation<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psziconpath: super::super::Foundation::PWSTR, iicon: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetIconLocation(&*(&psziconpath as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), iicon) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRelativePath<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszpathrel: super::super::Foundation::PWSTR, dwreserved: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetRelativePath(&*(&pszpathrel as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwreserved) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Resolve<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, fflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Resolve(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), fflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPath<Impl: IShellLinkWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfile: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetPath(&*(&pszfile as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellLinkW>,
            ::windows::core::GetTrustLevel,
            GetPath::<Impl, OFFSET>,
            GetIDList::<Impl, OFFSET>,
            SetIDList::<Impl, OFFSET>,
            GetDescription::<Impl, OFFSET>,
            SetDescription::<Impl, OFFSET>,
            GetWorkingDirectory::<Impl, OFFSET>,
            SetWorkingDirectory::<Impl, OFFSET>,
            GetArguments::<Impl, OFFSET>,
            SetArguments::<Impl, OFFSET>,
            GetHotkey::<Impl, OFFSET>,
            SetHotkey::<Impl, OFFSET>,
            GetShowCmd::<Impl, OFFSET>,
            SetShowCmd::<Impl, OFFSET>,
            GetIconLocation::<Impl, OFFSET>,
            SetIconLocation::<Impl, OFFSET>,
            SetRelativePath::<Impl, OFFSET>,
            Resolve::<Impl, OFFSET>,
            SetPath::<Impl, OFFSET>,
        )
    }
}
pub trait IShellMenuImpl: Sized {
    fn Initialize();
    fn GetMenuInfo();
    fn SetShellFolder();
    fn GetShellFolder();
    fn SetMenu();
    fn GetMenu();
    fn InvalidateItem();
    fn GetState();
    fn SetMenuToolbar();
}
impl ::windows::core::RuntimeName for IShellMenu {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellMenu";
}
impl IShellMenuVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellMenuImpl, const OFFSET: isize>() -> IShellMenuVtbl {
        unsafe extern "system" fn Initialize<Impl: IShellMenuImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psmc: ::windows::core::RawPtr, uid: u32, uidancestor: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(&*(&psmc as *const <IShellMenuCallback as ::windows::core::Abi>::Abi as *const <IShellMenuCallback as ::windows::core::DefaultType>::DefaultType), uid, uidancestor, dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMenuInfo<Impl: IShellMenuImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsmc: *mut ::windows::core::RawPtr, puid: *mut u32, puidancestor: *mut u32, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMenuInfo(::core::mem::transmute_copy(&ppsmc), ::core::mem::transmute_copy(&puid), ::core::mem::transmute_copy(&puidancestor), ::core::mem::transmute_copy(&pdwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetShellFolder<Impl: IShellMenuImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psf: ::windows::core::RawPtr, pidlfolder: *const Common::ITEMIDLIST, hkey: super::super::System::Registry::HKEY, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetShellFolder(&*(&psf as *const <IShellFolder as ::windows::core::Abi>::Abi as *const <IShellFolder as ::windows::core::DefaultType>::DefaultType), &*(&pidlfolder as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), &*(&hkey as *const <super::super::System::Registry::HKEY as ::windows::core::Abi>::Abi as *const <super::super::System::Registry::HKEY as ::windows::core::DefaultType>::DefaultType), dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetShellFolder<Impl: IShellMenuImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32, ppidl: *mut *mut Common::ITEMIDLIST, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetShellFolder(::core::mem::transmute_copy(&pdwflags), ::core::mem::transmute_copy(&ppidl), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetMenu<Impl: IShellMenuImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hmenu: super::WindowsAndMessaging::HMENU, hwnd: super::super::Foundation::HWND, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetMenu(&*(&hmenu as *const <super::WindowsAndMessaging::HMENU as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::HMENU as ::windows::core::DefaultType>::DefaultType), &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMenu<Impl: IShellMenuImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phmenu: *mut super::WindowsAndMessaging::HMENU, phwnd: *mut super::super::Foundation::HWND, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetMenu(::core::mem::transmute_copy(&phmenu), ::core::mem::transmute_copy(&phwnd), ::core::mem::transmute_copy(&pdwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InvalidateItem<Impl: IShellMenuImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psmd: *const SMDATA, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InvalidateItem(&*(&psmd as *const <SMDATA as ::windows::core::Abi>::Abi as *const <SMDATA as ::windows::core::DefaultType>::DefaultType), dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetState<Impl: IShellMenuImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psmd: *mut SMDATA) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetState(::core::mem::transmute_copy(&psmd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetMenuToolbar<Impl: IShellMenuImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetMenuToolbar(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellMenu>,
            ::windows::core::GetTrustLevel,
            Initialize::<Impl, OFFSET>,
            GetMenuInfo::<Impl, OFFSET>,
            SetShellFolder::<Impl, OFFSET>,
            GetShellFolder::<Impl, OFFSET>,
            SetMenu::<Impl, OFFSET>,
            GetMenu::<Impl, OFFSET>,
            InvalidateItem::<Impl, OFFSET>,
            GetState::<Impl, OFFSET>,
            SetMenuToolbar::<Impl, OFFSET>,
        )
    }
}
pub trait IShellMenuCallbackImpl: Sized {
    fn CallbackSM();
}
impl ::windows::core::RuntimeName for IShellMenuCallback {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellMenuCallback";
}
impl IShellMenuCallbackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellMenuCallbackImpl, const OFFSET: isize>() -> IShellMenuCallbackVtbl {
        unsafe extern "system" fn CallbackSM<Impl: IShellMenuCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psmd: *mut SMDATA, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CallbackSM(
                &*(&psmd as *const <SMDATA as ::windows::core::Abi>::Abi as *const <SMDATA as ::windows::core::DefaultType>::DefaultType),
                umsg,
                &*(&wparam as *const <super::super::Foundation::WPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::WPARAM as ::windows::core::DefaultType>::DefaultType),
                &*(&lparam as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellMenuCallback>, ::windows::core::GetTrustLevel, CallbackSM::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellNameSpaceImpl: Sized + IShellFavoritesNameSpaceImpl + IDispatchImpl {
    fn EnumOptions();
    fn SetEnumOptions();
    fn SelectedItem();
    fn SetSelectedItem();
    fn Root();
    fn SetRoot();
    fn Depth();
    fn SetDepth();
    fn Mode();
    fn SetMode();
    fn Flags();
    fn SetFlags();
    fn SetTVFlags();
    fn TVFlags();
    fn Columns();
    fn SetColumns();
    fn CountViewTypes();
    fn SetViewType();
    fn SelectedItems();
    fn Expand();
    fn UnselectAll();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellNameSpace {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellNameSpace";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellNameSpaceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellNameSpaceImpl, const OFFSET: isize>() -> IShellNameSpaceVtbl {
        unsafe extern "system" fn EnumOptions<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pgrfenumflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumOptions(::core::mem::transmute_copy(&pgrfenumflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEnumOptions<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetEnumOptions(lval) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SelectedItem<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pitem: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SelectedItem(::core::mem::transmute_copy(&pitem)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSelectedItem<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pitem: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetSelectedItem(&*(&pitem as *const <super::super::System::Com::IDispatch as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDispatch as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Root<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvar: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Root(::core::mem::transmute_copy(&pvar)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRoot<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, var: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetRoot(&*(&var as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Depth<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidepth: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Depth(::core::mem::transmute_copy(&pidepth)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDepth<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idepth: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetDepth(idepth) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Mode<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pumode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Mode(::core::mem::transmute_copy(&pumode)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetMode<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, umode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetMode(umode) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Flags<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Flags(::core::mem::transmute_copy(&pdwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFlags<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFlags(dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTVFlags<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTVFlags(dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TVFlags<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TVFlags(::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Columns<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrcolumns: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Columns(::core::mem::transmute_copy(&bstrcolumns)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetColumns<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrcolumns: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetColumns(&*(&bstrcolumns as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CountViewTypes<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pitypes: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CountViewTypes(::core::mem::transmute_copy(&pitypes)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetViewType<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, itype: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetViewType(itype) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SelectedItems<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SelectedItems(::core::mem::transmute_copy(&ppid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Expand<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, var: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, idepth: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Expand(&*(&var as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), idepth) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnselectAll<Impl: IShellNameSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UnselectAll() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellNameSpace>,
            ::windows::core::GetTrustLevel,
            EnumOptions::<Impl, OFFSET>,
            SetEnumOptions::<Impl, OFFSET>,
            SelectedItem::<Impl, OFFSET>,
            SetSelectedItem::<Impl, OFFSET>,
            Root::<Impl, OFFSET>,
            SetRoot::<Impl, OFFSET>,
            Depth::<Impl, OFFSET>,
            SetDepth::<Impl, OFFSET>,
            Mode::<Impl, OFFSET>,
            SetMode::<Impl, OFFSET>,
            Flags::<Impl, OFFSET>,
            SetFlags::<Impl, OFFSET>,
            SetTVFlags::<Impl, OFFSET>,
            TVFlags::<Impl, OFFSET>,
            Columns::<Impl, OFFSET>,
            SetColumns::<Impl, OFFSET>,
            CountViewTypes::<Impl, OFFSET>,
            SetViewType::<Impl, OFFSET>,
            SelectedItems::<Impl, OFFSET>,
            Expand::<Impl, OFFSET>,
            UnselectAll::<Impl, OFFSET>,
        )
    }
}
pub trait IShellPropSheetExtImpl: Sized {
    fn AddPages();
    fn ReplacePage();
}
impl ::windows::core::RuntimeName for IShellPropSheetExt {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellPropSheetExt";
}
impl IShellPropSheetExtVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellPropSheetExtImpl, const OFFSET: isize>() -> IShellPropSheetExtVtbl {
        unsafe extern "system" fn AddPages<Impl: IShellPropSheetExtImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfnaddpage: ::windows::core::RawPtr, lparam: super::super::Foundation::LPARAM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddPages(&*(&pfnaddpage as *const <super::Controls::LPFNSVADDPROPSHEETPAGE as ::windows::core::Abi>::Abi as *const <super::Controls::LPFNSVADDPROPSHEETPAGE as ::windows::core::DefaultType>::DefaultType), &*(&lparam as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReplacePage<Impl: IShellPropSheetExtImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, upageid: u32, pfnreplacewith: ::windows::core::RawPtr, lparam: super::super::Foundation::LPARAM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReplacePage(upageid, &*(&pfnreplacewith as *const <super::Controls::LPFNSVADDPROPSHEETPAGE as ::windows::core::Abi>::Abi as *const <super::Controls::LPFNSVADDPROPSHEETPAGE as ::windows::core::DefaultType>::DefaultType), &*(&lparam as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellPropSheetExt>, ::windows::core::GetTrustLevel, AddPages::<Impl, OFFSET>, ReplacePage::<Impl, OFFSET>)
    }
}
pub trait IShellRunDllImpl: Sized {
    fn Run();
}
impl ::windows::core::RuntimeName for IShellRunDll {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellRunDll";
}
impl IShellRunDllVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellRunDllImpl, const OFFSET: isize>() -> IShellRunDllVtbl {
        unsafe extern "system" fn Run<Impl: IShellRunDllImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszargs: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Run(&*(&pszargs as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellRunDll>, ::windows::core::GetTrustLevel, Run::<Impl, OFFSET>)
    }
}
pub trait IShellServiceImpl: Sized {
    fn SetOwner();
}
impl ::windows::core::RuntimeName for IShellService {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellService";
}
impl IShellServiceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellServiceImpl, const OFFSET: isize>() -> IShellServiceVtbl {
        unsafe extern "system" fn SetOwner<Impl: IShellServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkowner: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetOwner(&*(&punkowner as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellService>, ::windows::core::GetTrustLevel, SetOwner::<Impl, OFFSET>)
    }
}
pub trait IShellTaskSchedulerImpl: Sized {
    fn AddTask();
    fn RemoveTasks();
    fn CountTasks();
    fn Status();
}
impl ::windows::core::RuntimeName for IShellTaskScheduler {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellTaskScheduler";
}
impl IShellTaskSchedulerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellTaskSchedulerImpl, const OFFSET: isize>() -> IShellTaskSchedulerVtbl {
        unsafe extern "system" fn AddTask<Impl: IShellTaskSchedulerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prt: ::windows::core::RawPtr, rtoid: *const ::windows::core::GUID, lparam: usize, dwpriority: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddTask(&*(&prt as *const <IRunnableTask as ::windows::core::Abi>::Abi as *const <IRunnableTask as ::windows::core::DefaultType>::DefaultType), &*(&rtoid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), lparam, dwpriority) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveTasks<Impl: IShellTaskSchedulerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rtoid: *const ::windows::core::GUID, lparam: usize, bwaitifrunning: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveTasks(&*(&rtoid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), lparam, &*(&bwaitifrunning as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CountTasks<Impl: IShellTaskSchedulerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rtoid: *const ::windows::core::GUID) -> u32 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CountTasks(&*(&rtoid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Status<Impl: IShellTaskSchedulerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwreleasestatus: u32, dwthreadtimeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Status(dwreleasestatus, dwthreadtimeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellTaskScheduler>, ::windows::core::GetTrustLevel, AddTask::<Impl, OFFSET>, RemoveTasks::<Impl, OFFSET>, CountTasks::<Impl, OFFSET>, Status::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellUIHelperImpl: Sized + IDispatchImpl {
    fn ResetFirstBootMode();
    fn ResetSafeMode();
    fn RefreshOfflineDesktop();
    fn AddFavorite();
    fn AddChannel();
    fn AddDesktopComponent();
    fn IsSubscribed();
    fn NavigateAndFind();
    fn ImportExportFavorites();
    fn AutoCompleteSaveForm();
    fn AutoScan();
    fn AutoCompleteAttach();
    fn ShowBrowserUI();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellUIHelper {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellUIHelper";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelperVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellUIHelperImpl, const OFFSET: isize>() -> IShellUIHelperVtbl {
        unsafe extern "system" fn ResetFirstBootMode<Impl: IShellUIHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ResetFirstBootMode() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetSafeMode<Impl: IShellUIHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ResetSafeMode() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RefreshOfflineDesktop<Impl: IShellUIHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RefreshOfflineDesktop() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddFavorite<Impl: IShellUIHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, url: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, title: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddFavorite(&*(&url as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), &*(&title as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddChannel<Impl: IShellUIHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, url: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddChannel(&*(&url as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDesktopComponent<Impl: IShellUIHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, url: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, r#type: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, left: *const super::super::System::Com::VARIANT, top: *const super::super::System::Com::VARIANT, width: *const super::super::System::Com::VARIANT, height: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddDesktopComponent(
                &*(&url as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&r#type as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&left as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&top as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&width as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&height as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsSubscribed<Impl: IShellUIHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, url: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pbool: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsSubscribed(&*(&url as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pbool)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NavigateAndFind<Impl: IShellUIHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, url: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, strquery: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, vartargetframe: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).NavigateAndFind(
                &*(&url as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&strquery as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&vartargetframe as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ImportExportFavorites<Impl: IShellUIHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fimport: i16, strimpexppath: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ImportExportFavorites(fimport, &*(&strimpexppath as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AutoCompleteSaveForm<Impl: IShellUIHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, form: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AutoCompleteSaveForm(&*(&form as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AutoScan<Impl: IShellUIHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strsearch: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, strfailureurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pvartargetframe: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AutoScan(
                &*(&strsearch as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&strfailureurl as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pvartargetframe as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AutoCompleteAttach<Impl: IShellUIHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, reserved: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AutoCompleteAttach(&*(&reserved as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShowBrowserUI<Impl: IShellUIHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pvarin: *const super::super::System::Com::VARIANT, pvarout: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowBrowserUI(&*(&bstrname as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), &*(&pvarin as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pvarout)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellUIHelper>,
            ::windows::core::GetTrustLevel,
            ResetFirstBootMode::<Impl, OFFSET>,
            ResetSafeMode::<Impl, OFFSET>,
            RefreshOfflineDesktop::<Impl, OFFSET>,
            AddFavorite::<Impl, OFFSET>,
            AddChannel::<Impl, OFFSET>,
            AddDesktopComponent::<Impl, OFFSET>,
            IsSubscribed::<Impl, OFFSET>,
            NavigateAndFind::<Impl, OFFSET>,
            ImportExportFavorites::<Impl, OFFSET>,
            AutoCompleteSaveForm::<Impl, OFFSET>,
            AutoScan::<Impl, OFFSET>,
            AutoCompleteAttach::<Impl, OFFSET>,
            ShowBrowserUI::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellUIHelper2Impl: Sized + IShellUIHelperImpl + IDispatchImpl {
    fn AddSearchProvider();
    fn RunOnceShown();
    fn SkipRunOnce();
    fn CustomizeSettings();
    fn SqmEnabled();
    fn PhishingEnabled();
    fn BrandImageUri();
    fn SkipTabsWelcome();
    fn DiagnoseConnection();
    fn CustomizeClearType();
    fn IsSearchProviderInstalled();
    fn IsSearchMigrated();
    fn DefaultSearchProvider();
    fn RunOnceRequiredSettingsComplete();
    fn RunOnceHasShown();
    fn SearchGuideUrl();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellUIHelper2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellUIHelper2";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellUIHelper2Impl, const OFFSET: isize>() -> IShellUIHelper2Vtbl {
        unsafe extern "system" fn AddSearchProvider<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, url: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddSearchProvider(&*(&url as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RunOnceShown<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RunOnceShown() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SkipRunOnce<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SkipRunOnce() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CustomizeSettings<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fsqm: i16, fphishing: i16, bstrlocale: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CustomizeSettings(fsqm, fphishing, &*(&bstrlocale as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SqmEnabled<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfenabled: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SqmEnabled(::core::mem::transmute_copy(&pfenabled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PhishingEnabled<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfenabled: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PhishingEnabled(::core::mem::transmute_copy(&pfenabled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BrandImageUri<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstruri: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BrandImageUri(::core::mem::transmute_copy(&pbstruri)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SkipTabsWelcome<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SkipTabsWelcome() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DiagnoseConnection<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DiagnoseConnection() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CustomizeClearType<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fset: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CustomizeClearType(fset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsSearchProviderInstalled<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, url: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pdwresult: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsSearchProviderInstalled(&*(&url as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwresult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsSearchMigrated<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfmigrated: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsSearchMigrated(::core::mem::transmute_copy(&pfmigrated)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DefaultSearchProvider<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DefaultSearchProvider(::core::mem::transmute_copy(&pbstrname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RunOnceRequiredSettingsComplete<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fcomplete: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RunOnceRequiredSettingsComplete(fcomplete) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RunOnceHasShown<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfshown: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RunOnceHasShown(::core::mem::transmute_copy(&pfshown)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SearchGuideUrl<Impl: IShellUIHelper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrurl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SearchGuideUrl(::core::mem::transmute_copy(&pbstrurl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellUIHelper2>,
            ::windows::core::GetTrustLevel,
            AddSearchProvider::<Impl, OFFSET>,
            RunOnceShown::<Impl, OFFSET>,
            SkipRunOnce::<Impl, OFFSET>,
            CustomizeSettings::<Impl, OFFSET>,
            SqmEnabled::<Impl, OFFSET>,
            PhishingEnabled::<Impl, OFFSET>,
            BrandImageUri::<Impl, OFFSET>,
            SkipTabsWelcome::<Impl, OFFSET>,
            DiagnoseConnection::<Impl, OFFSET>,
            CustomizeClearType::<Impl, OFFSET>,
            IsSearchProviderInstalled::<Impl, OFFSET>,
            IsSearchMigrated::<Impl, OFFSET>,
            DefaultSearchProvider::<Impl, OFFSET>,
            RunOnceRequiredSettingsComplete::<Impl, OFFSET>,
            RunOnceHasShown::<Impl, OFFSET>,
            SearchGuideUrl::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellUIHelper3Impl: Sized + IShellUIHelper2Impl + IShellUIHelperImpl + IDispatchImpl {
    fn AddService();
    fn IsServiceInstalled();
    fn InPrivateFilteringEnabled();
    fn AddToFavoritesBar();
    fn BuildNewTabPage();
    fn SetRecentlyClosedVisible();
    fn SetActivitiesVisible();
    fn ContentDiscoveryReset();
    fn IsSuggestedSitesEnabled();
    fn EnableSuggestedSites();
    fn NavigateToSuggestedSites();
    fn ShowTabsHelp();
    fn ShowInPrivateHelp();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellUIHelper3 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellUIHelper3";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellUIHelper3Impl, const OFFSET: isize>() -> IShellUIHelper3Vtbl {
        unsafe extern "system" fn AddService<Impl: IShellUIHelper3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, url: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddService(&*(&url as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsServiceInstalled<Impl: IShellUIHelper3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, url: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, verb: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pdwresult: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsServiceInstalled(&*(&url as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), &*(&verb as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwresult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InPrivateFilteringEnabled<Impl: IShellUIHelper3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfenabled: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InPrivateFilteringEnabled(::core::mem::transmute_copy(&pfenabled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddToFavoritesBar<Impl: IShellUIHelper3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, url: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, title: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, r#type: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddToFavoritesBar(
                &*(&url as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&title as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&r#type as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BuildNewTabPage<Impl: IShellUIHelper3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BuildNewTabPage() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRecentlyClosedVisible<Impl: IShellUIHelper3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fvisible: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetRecentlyClosedVisible(fvisible) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetActivitiesVisible<Impl: IShellUIHelper3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fvisible: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetActivitiesVisible(fvisible) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ContentDiscoveryReset<Impl: IShellUIHelper3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ContentDiscoveryReset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsSuggestedSitesEnabled<Impl: IShellUIHelper3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfenabled: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsSuggestedSitesEnabled(::core::mem::transmute_copy(&pfenabled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnableSuggestedSites<Impl: IShellUIHelper3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fenable: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnableSuggestedSites(fenable) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NavigateToSuggestedSites<Impl: IShellUIHelper3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrrelativeurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).NavigateToSuggestedSites(&*(&bstrrelativeurl as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShowTabsHelp<Impl: IShellUIHelper3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowTabsHelp() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShowInPrivateHelp<Impl: IShellUIHelper3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowInPrivateHelp() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellUIHelper3>,
            ::windows::core::GetTrustLevel,
            AddService::<Impl, OFFSET>,
            IsServiceInstalled::<Impl, OFFSET>,
            InPrivateFilteringEnabled::<Impl, OFFSET>,
            AddToFavoritesBar::<Impl, OFFSET>,
            BuildNewTabPage::<Impl, OFFSET>,
            SetRecentlyClosedVisible::<Impl, OFFSET>,
            SetActivitiesVisible::<Impl, OFFSET>,
            ContentDiscoveryReset::<Impl, OFFSET>,
            IsSuggestedSitesEnabled::<Impl, OFFSET>,
            EnableSuggestedSites::<Impl, OFFSET>,
            NavigateToSuggestedSites::<Impl, OFFSET>,
            ShowTabsHelp::<Impl, OFFSET>,
            ShowInPrivateHelp::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellUIHelper4Impl: Sized + IShellUIHelper3Impl + IShellUIHelper2Impl + IShellUIHelperImpl + IDispatchImpl {
    fn msIsSiteMode();
    fn msSiteModeShowThumbBar();
    fn msSiteModeAddThumbBarButton();
    fn msSiteModeUpdateThumbBarButton();
    fn msSiteModeSetIconOverlay();
    fn msSiteModeClearIconOverlay();
    fn msAddSiteMode();
    fn msSiteModeCreateJumpList();
    fn msSiteModeAddJumpListItem();
    fn msSiteModeClearJumpList();
    fn msSiteModeShowJumpList();
    fn msSiteModeAddButtonStyle();
    fn msSiteModeShowButtonStyle();
    fn msSiteModeActivate();
    fn msIsSiteModeFirstRun();
    fn msAddTrackingProtectionList();
    fn msTrackingProtectionEnabled();
    fn msActiveXFilteringEnabled();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellUIHelper4 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellUIHelper4";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellUIHelper4Impl, const OFFSET: isize>() -> IShellUIHelper4Vtbl {
        unsafe extern "system" fn msIsSiteMode<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfsitemode: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msIsSiteMode(::core::mem::transmute_copy(&pfsitemode)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msSiteModeShowThumbBar<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msSiteModeShowThumbBar() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msSiteModeAddThumbBarButton<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstriconurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, bstrtooltip: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pvarbuttonid: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msSiteModeAddThumbBarButton(&*(&bstriconurl as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), &*(&bstrtooltip as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pvarbuttonid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msSiteModeUpdateThumbBarButton<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buttonid: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, fenabled: i16, fvisible: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msSiteModeUpdateThumbBarButton(&*(&buttonid as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), fenabled, fvisible) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msSiteModeSetIconOverlay<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, iconurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pvardescription: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msSiteModeSetIconOverlay(&*(&iconurl as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), &*(&pvardescription as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msSiteModeClearIconOverlay<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msSiteModeClearIconOverlay() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msAddSiteMode<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msAddSiteMode() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msSiteModeCreateJumpList<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrheader: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msSiteModeCreateJumpList(&*(&bstrheader as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msSiteModeAddJumpListItem<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, bstractionuri: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, bstriconuri: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pvarwindowtype: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msSiteModeAddJumpListItem(
                &*(&bstrname as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&bstractionuri as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&bstriconuri as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pvarwindowtype as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msSiteModeClearJumpList<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msSiteModeClearJumpList() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msSiteModeShowJumpList<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msSiteModeShowJumpList() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msSiteModeAddButtonStyle<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uibuttonid: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, bstriconurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, bstrtooltip: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pvarstyleid: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msSiteModeAddButtonStyle(
                &*(&uibuttonid as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&bstriconurl as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&bstrtooltip as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&pvarstyleid),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msSiteModeShowButtonStyle<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uibuttonid: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, uistyleid: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msSiteModeShowButtonStyle(&*(&uibuttonid as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), &*(&uistyleid as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msSiteModeActivate<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msSiteModeActivate() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msIsSiteModeFirstRun<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fpreservestate: i16, puifirstrun: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msIsSiteModeFirstRun(fpreservestate, ::core::mem::transmute_copy(&puifirstrun)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msAddTrackingProtectionList<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, url: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, bstrfiltername: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msAddTrackingProtectionList(&*(&url as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), &*(&bstrfiltername as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msTrackingProtectionEnabled<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfenabled: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msTrackingProtectionEnabled(::core::mem::transmute_copy(&pfenabled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msActiveXFilteringEnabled<Impl: IShellUIHelper4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfenabled: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msActiveXFilteringEnabled(::core::mem::transmute_copy(&pfenabled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellUIHelper4>,
            ::windows::core::GetTrustLevel,
            msIsSiteMode::<Impl, OFFSET>,
            msSiteModeShowThumbBar::<Impl, OFFSET>,
            msSiteModeAddThumbBarButton::<Impl, OFFSET>,
            msSiteModeUpdateThumbBarButton::<Impl, OFFSET>,
            msSiteModeSetIconOverlay::<Impl, OFFSET>,
            msSiteModeClearIconOverlay::<Impl, OFFSET>,
            msAddSiteMode::<Impl, OFFSET>,
            msSiteModeCreateJumpList::<Impl, OFFSET>,
            msSiteModeAddJumpListItem::<Impl, OFFSET>,
            msSiteModeClearJumpList::<Impl, OFFSET>,
            msSiteModeShowJumpList::<Impl, OFFSET>,
            msSiteModeAddButtonStyle::<Impl, OFFSET>,
            msSiteModeShowButtonStyle::<Impl, OFFSET>,
            msSiteModeActivate::<Impl, OFFSET>,
            msIsSiteModeFirstRun::<Impl, OFFSET>,
            msAddTrackingProtectionList::<Impl, OFFSET>,
            msTrackingProtectionEnabled::<Impl, OFFSET>,
            msActiveXFilteringEnabled::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellUIHelper5Impl: Sized + IShellUIHelper4Impl + IShellUIHelper3Impl + IShellUIHelper2Impl + IShellUIHelperImpl + IDispatchImpl {
    fn msProvisionNetworks();
    fn msReportSafeUrl();
    fn msSiteModeRefreshBadge();
    fn msSiteModeClearBadge();
    fn msDiagnoseConnectionUILess();
    fn msLaunchNetworkClientHelp();
    fn msChangeDefaultBrowser();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellUIHelper5 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellUIHelper5";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper5Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellUIHelper5Impl, const OFFSET: isize>() -> IShellUIHelper5Vtbl {
        unsafe extern "system" fn msProvisionNetworks<Impl: IShellUIHelper5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrprovisioningxml: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, puiresult: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msProvisionNetworks(&*(&bstrprovisioningxml as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&puiresult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msReportSafeUrl<Impl: IShellUIHelper5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msReportSafeUrl() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msSiteModeRefreshBadge<Impl: IShellUIHelper5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msSiteModeRefreshBadge() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msSiteModeClearBadge<Impl: IShellUIHelper5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msSiteModeClearBadge() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msDiagnoseConnectionUILess<Impl: IShellUIHelper5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msDiagnoseConnectionUILess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msLaunchNetworkClientHelp<Impl: IShellUIHelper5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msLaunchNetworkClientHelp() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msChangeDefaultBrowser<Impl: IShellUIHelper5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fchange: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msChangeDefaultBrowser(fchange) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellUIHelper5>,
            ::windows::core::GetTrustLevel,
            msProvisionNetworks::<Impl, OFFSET>,
            msReportSafeUrl::<Impl, OFFSET>,
            msSiteModeRefreshBadge::<Impl, OFFSET>,
            msSiteModeClearBadge::<Impl, OFFSET>,
            msDiagnoseConnectionUILess::<Impl, OFFSET>,
            msLaunchNetworkClientHelp::<Impl, OFFSET>,
            msChangeDefaultBrowser::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellUIHelper6Impl: Sized + IShellUIHelper5Impl + IShellUIHelper4Impl + IShellUIHelper3Impl + IShellUIHelper2Impl + IShellUIHelperImpl + IDispatchImpl {
    fn msStopPeriodicTileUpdate();
    fn msStartPeriodicTileUpdate();
    fn msStartPeriodicTileUpdateBatch();
    fn msClearTile();
    fn msEnableTileNotificationQueue();
    fn msPinnedSiteState();
    fn msEnableTileNotificationQueueForSquare150x150();
    fn msEnableTileNotificationQueueForWide310x150();
    fn msEnableTileNotificationQueueForSquare310x310();
    fn msScheduledTileNotification();
    fn msRemoveScheduledTileNotification();
    fn msStartPeriodicBadgeUpdate();
    fn msStopPeriodicBadgeUpdate();
    fn msLaunchInternetOptions();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellUIHelper6 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellUIHelper6";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper6Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellUIHelper6Impl, const OFFSET: isize>() -> IShellUIHelper6Vtbl {
        unsafe extern "system" fn msStopPeriodicTileUpdate<Impl: IShellUIHelper6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msStopPeriodicTileUpdate() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msStartPeriodicTileUpdate<Impl: IShellUIHelper6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pollinguris: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, starttime: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, uiupdaterecurrence: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msStartPeriodicTileUpdate(
                &*(&pollinguris as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&starttime as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&uiupdaterecurrence as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msStartPeriodicTileUpdateBatch<Impl: IShellUIHelper6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pollinguris: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, starttime: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, uiupdaterecurrence: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msStartPeriodicTileUpdateBatch(
                &*(&pollinguris as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&starttime as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&uiupdaterecurrence as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msClearTile<Impl: IShellUIHelper6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msClearTile() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msEnableTileNotificationQueue<Impl: IShellUIHelper6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fchange: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msEnableTileNotificationQueue(fchange) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msPinnedSiteState<Impl: IShellUIHelper6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvarsitestate: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msPinnedSiteState(::core::mem::transmute_copy(&pvarsitestate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msEnableTileNotificationQueueForSquare150x150<Impl: IShellUIHelper6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fchange: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msEnableTileNotificationQueueForSquare150x150(fchange) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msEnableTileNotificationQueueForWide310x150<Impl: IShellUIHelper6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fchange: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msEnableTileNotificationQueueForWide310x150(fchange) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msEnableTileNotificationQueueForSquare310x310<Impl: IShellUIHelper6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fchange: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msEnableTileNotificationQueueForSquare310x310(fchange) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msScheduledTileNotification<Impl: IShellUIHelper6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrnotificationxml: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, bstrnotificationid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, bstrnotificationtag: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, starttime: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, expirationtime: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msScheduledTileNotification(
                &*(&bstrnotificationxml as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&bstrnotificationid as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&bstrnotificationtag as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&starttime as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&expirationtime as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msRemoveScheduledTileNotification<Impl: IShellUIHelper6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrnotificationid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msRemoveScheduledTileNotification(&*(&bstrnotificationid as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msStartPeriodicBadgeUpdate<Impl: IShellUIHelper6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pollinguri: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, starttime: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, uiupdaterecurrence: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msStartPeriodicBadgeUpdate(
                &*(&pollinguri as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&starttime as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&uiupdaterecurrence as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msStopPeriodicBadgeUpdate<Impl: IShellUIHelper6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msStopPeriodicBadgeUpdate() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn msLaunchInternetOptions<Impl: IShellUIHelper6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).msLaunchInternetOptions() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellUIHelper6>,
            ::windows::core::GetTrustLevel,
            msStopPeriodicTileUpdate::<Impl, OFFSET>,
            msStartPeriodicTileUpdate::<Impl, OFFSET>,
            msStartPeriodicTileUpdateBatch::<Impl, OFFSET>,
            msClearTile::<Impl, OFFSET>,
            msEnableTileNotificationQueue::<Impl, OFFSET>,
            msPinnedSiteState::<Impl, OFFSET>,
            msEnableTileNotificationQueueForSquare150x150::<Impl, OFFSET>,
            msEnableTileNotificationQueueForWide310x150::<Impl, OFFSET>,
            msEnableTileNotificationQueueForSquare310x310::<Impl, OFFSET>,
            msScheduledTileNotification::<Impl, OFFSET>,
            msRemoveScheduledTileNotification::<Impl, OFFSET>,
            msStartPeriodicBadgeUpdate::<Impl, OFFSET>,
            msStopPeriodicBadgeUpdate::<Impl, OFFSET>,
            msLaunchInternetOptions::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellUIHelper7Impl: Sized + IShellUIHelper6Impl + IShellUIHelper5Impl + IShellUIHelper4Impl + IShellUIHelper3Impl + IShellUIHelper2Impl + IShellUIHelperImpl + IDispatchImpl {
    fn SetExperimentalFlag();
    fn GetExperimentalFlag();
    fn SetExperimentalValue();
    fn GetExperimentalValue();
    fn ResetAllExperimentalFlagsAndValues();
    fn GetNeedIEAutoLaunchFlag();
    fn SetNeedIEAutoLaunchFlag();
    fn HasNeedIEAutoLaunchFlag();
    fn LaunchIE();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellUIHelper7 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellUIHelper7";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper7Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellUIHelper7Impl, const OFFSET: isize>() -> IShellUIHelper7Vtbl {
        unsafe extern "system" fn SetExperimentalFlag<Impl: IShellUIHelper7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrflagstring: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, vfflag: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetExperimentalFlag(&*(&bstrflagstring as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), vfflag) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExperimentalFlag<Impl: IShellUIHelper7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrflagstring: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, vfflag: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExperimentalFlag(&*(&bstrflagstring as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&vfflag)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExperimentalValue<Impl: IShellUIHelper7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrvaluestring: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, dwvalue: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetExperimentalValue(&*(&bstrvaluestring as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), dwvalue) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExperimentalValue<Impl: IShellUIHelper7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrvaluestring: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pdwvalue: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetExperimentalValue(&*(&bstrvaluestring as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwvalue)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetAllExperimentalFlagsAndValues<Impl: IShellUIHelper7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ResetAllExperimentalFlagsAndValues() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNeedIEAutoLaunchFlag<Impl: IShellUIHelper7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, flag: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNeedIEAutoLaunchFlag(&*(&bstrurl as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&flag)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNeedIEAutoLaunchFlag<Impl: IShellUIHelper7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, flag: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetNeedIEAutoLaunchFlag(&*(&bstrurl as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), flag) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HasNeedIEAutoLaunchFlag<Impl: IShellUIHelper7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, exists: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HasNeedIEAutoLaunchFlag(&*(&bstrurl as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&exists)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LaunchIE<Impl: IShellUIHelper7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, automated: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).LaunchIE(&*(&bstrurl as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), automated) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellUIHelper7>,
            ::windows::core::GetTrustLevel,
            SetExperimentalFlag::<Impl, OFFSET>,
            GetExperimentalFlag::<Impl, OFFSET>,
            SetExperimentalValue::<Impl, OFFSET>,
            GetExperimentalValue::<Impl, OFFSET>,
            ResetAllExperimentalFlagsAndValues::<Impl, OFFSET>,
            GetNeedIEAutoLaunchFlag::<Impl, OFFSET>,
            SetNeedIEAutoLaunchFlag::<Impl, OFFSET>,
            HasNeedIEAutoLaunchFlag::<Impl, OFFSET>,
            LaunchIE::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellUIHelper8Impl: Sized + IShellUIHelper7Impl + IShellUIHelper6Impl + IShellUIHelper5Impl + IShellUIHelper4Impl + IShellUIHelper3Impl + IShellUIHelper2Impl + IShellUIHelperImpl + IDispatchImpl {
    fn GetCVListData();
    fn GetCVListLocalData();
    fn GetEMIEListData();
    fn GetEMIEListLocalData();
    fn OpenFavoritesPane();
    fn OpenFavoritesSettings();
    fn LaunchInHVSI();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellUIHelper8 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellUIHelper8";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper8Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellUIHelper8Impl, const OFFSET: isize>() -> IShellUIHelper8Vtbl {
        unsafe extern "system" fn GetCVListData<Impl: IShellUIHelper8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrresult: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCVListData(::core::mem::transmute_copy(&pbstrresult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCVListLocalData<Impl: IShellUIHelper8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrresult: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCVListLocalData(::core::mem::transmute_copy(&pbstrresult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEMIEListData<Impl: IShellUIHelper8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrresult: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEMIEListData(::core::mem::transmute_copy(&pbstrresult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEMIEListLocalData<Impl: IShellUIHelper8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrresult: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEMIEListLocalData(::core::mem::transmute_copy(&pbstrresult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenFavoritesPane<Impl: IShellUIHelper8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OpenFavoritesPane() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenFavoritesSettings<Impl: IShellUIHelper8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OpenFavoritesSettings() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LaunchInHVSI<Impl: IShellUIHelper8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).LaunchInHVSI(&*(&bstrurl as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellUIHelper8>,
            ::windows::core::GetTrustLevel,
            GetCVListData::<Impl, OFFSET>,
            GetCVListLocalData::<Impl, OFFSET>,
            GetEMIEListData::<Impl, OFFSET>,
            GetEMIEListLocalData::<Impl, OFFSET>,
            OpenFavoritesPane::<Impl, OFFSET>,
            OpenFavoritesSettings::<Impl, OFFSET>,
            LaunchInHVSI::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellUIHelper9Impl: Sized + IShellUIHelper8Impl + IShellUIHelper7Impl + IShellUIHelper6Impl + IShellUIHelper5Impl + IShellUIHelper4Impl + IShellUIHelper3Impl + IShellUIHelper2Impl + IShellUIHelperImpl + IDispatchImpl {
    fn GetOSSku();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellUIHelper9 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellUIHelper9";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellUIHelper9Impl, const OFFSET: isize>() -> IShellUIHelper9Vtbl {
        unsafe extern "system" fn GetOSSku<Impl: IShellUIHelper9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwresult: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetOSSku(::core::mem::transmute_copy(&pdwresult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellUIHelper9>, ::windows::core::GetTrustLevel, GetOSSku::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Ole")]
pub trait IShellViewImpl: Sized + IOleWindowImpl {
    fn TranslateAccelerator();
    fn EnableModeless();
    fn UIActivate();
    fn Refresh();
    fn CreateViewWindow();
    fn DestroyViewWindow();
    fn GetCurrentInfo();
    fn AddPropertySheetPages();
    fn SaveViewState();
    fn SelectItem();
    fn GetItemObject();
}
#[cfg(feature = "Win32_System_Ole")]
impl ::windows::core::RuntimeName for IShellView {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellView";
}
#[cfg(feature = "Win32_System_Ole")]
impl IShellViewVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellViewImpl, const OFFSET: isize>() -> IShellViewVtbl {
        unsafe extern "system" fn TranslateAccelerator<Impl: IShellViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TranslateAccelerator(&*(&pmsg as *const <super::WindowsAndMessaging::MSG as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::MSG as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnableModeless<Impl: IShellViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnableModeless(&*(&fenable as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UIActivate<Impl: IShellViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ustate: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UIActivate(ustate) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Refresh<Impl: IShellViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Refresh() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateViewWindow<Impl: IShellViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psvprevious: ::windows::core::RawPtr, pfs: *const FOLDERSETTINGS, psb: ::windows::core::RawPtr, prcview: *const super::super::Foundation::RECT, phwnd: *mut super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateViewWindow(
                &*(&psvprevious as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType),
                &*(&pfs as *const <FOLDERSETTINGS as ::windows::core::Abi>::Abi as *const <FOLDERSETTINGS as ::windows::core::DefaultType>::DefaultType),
                &*(&psb as *const <IShellBrowser as ::windows::core::Abi>::Abi as *const <IShellBrowser as ::windows::core::DefaultType>::DefaultType),
                &*(&prcview as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&phwnd),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DestroyViewWindow<Impl: IShellViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DestroyViewWindow() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentInfo<Impl: IShellViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfs: *mut FOLDERSETTINGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCurrentInfo(::core::mem::transmute_copy(&pfs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddPropertySheetPages<Impl: IShellViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwreserved: u32, pfn: ::windows::core::RawPtr, lparam: super::super::Foundation::LPARAM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddPropertySheetPages(dwreserved, &*(&pfn as *const <super::Controls::LPFNSVADDPROPSHEETPAGE as ::windows::core::Abi>::Abi as *const <super::Controls::LPFNSVADDPROPSHEETPAGE as ::windows::core::DefaultType>::DefaultType), &*(&lparam as *const <super::super::Foundation::LPARAM as ::windows::core::Abi>::Abi as *const <super::super::Foundation::LPARAM as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SaveViewState<Impl: IShellViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SaveViewState() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SelectItem<Impl: IShellViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidlitem: *const Common::ITEMIDLIST, uflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SelectItem(&*(&pidlitem as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), uflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemObject<Impl: IShellViewImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uitem: u32, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemObject(uitem, &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellView>,
            ::windows::core::GetTrustLevel,
            TranslateAccelerator::<Impl, OFFSET>,
            EnableModeless::<Impl, OFFSET>,
            UIActivate::<Impl, OFFSET>,
            Refresh::<Impl, OFFSET>,
            CreateViewWindow::<Impl, OFFSET>,
            DestroyViewWindow::<Impl, OFFSET>,
            GetCurrentInfo::<Impl, OFFSET>,
            AddPropertySheetPages::<Impl, OFFSET>,
            SaveViewState::<Impl, OFFSET>,
            SelectItem::<Impl, OFFSET>,
            GetItemObject::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Ole")]
pub trait IShellView2Impl: Sized + IShellViewImpl + IOleWindowImpl {
    fn GetView();
    fn CreateViewWindow2();
    fn HandleRename();
    fn SelectAndPositionItem();
}
#[cfg(feature = "Win32_System_Ole")]
impl ::windows::core::RuntimeName for IShellView2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellView2";
}
#[cfg(feature = "Win32_System_Ole")]
impl IShellView2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellView2Impl, const OFFSET: isize>() -> IShellView2Vtbl {
        unsafe extern "system" fn GetView<Impl: IShellView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvid: *mut ::windows::core::GUID, uview: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetView(&*(&pvid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), uview) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateViewWindow2<Impl: IShellView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpparams: *const SV2CVW2_PARAMS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateViewWindow2(&*(&lpparams as *const <SV2CVW2_PARAMS as ::windows::core::Abi>::Abi as *const <SV2CVW2_PARAMS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HandleRename<Impl: IShellView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidlnew: *const Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HandleRename(&*(&pidlnew as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SelectAndPositionItem<Impl: IShellView2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidlitem: *const Common::ITEMIDLIST, uflags: u32, ppt: *const super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SelectAndPositionItem(&*(&pidlitem as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), uflags, &*(&ppt as *const <super::super::Foundation::POINT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellView2>, ::windows::core::GetTrustLevel, GetView::<Impl, OFFSET>, CreateViewWindow2::<Impl, OFFSET>, HandleRename::<Impl, OFFSET>, SelectAndPositionItem::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Ole")]
pub trait IShellView3Impl: Sized + IShellView2Impl + IShellViewImpl + IOleWindowImpl {
    fn CreateViewWindow3();
}
#[cfg(feature = "Win32_System_Ole")]
impl ::windows::core::RuntimeName for IShellView3 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellView3";
}
#[cfg(feature = "Win32_System_Ole")]
impl IShellView3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellView3Impl, const OFFSET: isize>() -> IShellView3Vtbl {
        unsafe extern "system" fn CreateViewWindow3<Impl: IShellView3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psbowner: ::windows::core::RawPtr, psvprev: ::windows::core::RawPtr, dwviewflags: u32, dwmask: FOLDERFLAGS, dwflags: FOLDERFLAGS, fvmode: FOLDERVIEWMODE, pvid: *const ::windows::core::GUID, prcview: *const super::super::Foundation::RECT, phwndview: *mut super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateViewWindow3(
                &*(&psbowner as *const <IShellBrowser as ::windows::core::Abi>::Abi as *const <IShellBrowser as ::windows::core::DefaultType>::DefaultType),
                &*(&psvprev as *const <IShellView as ::windows::core::Abi>::Abi as *const <IShellView as ::windows::core::DefaultType>::DefaultType),
                dwviewflags,
                dwmask,
                dwflags,
                fvmode,
                &*(&pvid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                &*(&prcview as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&phwndview),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IShellView3>, ::windows::core::GetTrustLevel, CreateViewWindow3::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IShellWindowsImpl: Sized + IDispatchImpl {
    fn Count();
    fn Item();
    fn _NewEnum();
    fn Register();
    fn RegisterPending();
    fn Revoke();
    fn OnNavigate();
    fn OnActivated();
    fn FindWindowSW();
    fn OnCreated();
    fn ProcessAttachDetach();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IShellWindows {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IShellWindows";
}
#[cfg(feature = "Win32_System_Com")]
impl IShellWindowsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IShellWindowsImpl, const OFFSET: isize>() -> IShellWindowsVtbl {
        unsafe extern "system" fn Count<Impl: IShellWindowsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Count(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Item<Impl: IShellWindowsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, folder: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Item(&*(&index as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&folder)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn _NewEnum<Impl: IShellWindowsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this)._NewEnum(::core::mem::transmute_copy(&ppunk)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Register<Impl: IShellWindowsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pid: ::windows::core::RawPtr, hwnd: i32, swclass: i32, plcookie: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Register(&*(&pid as *const <super::super::System::Com::IDispatch as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IDispatch as ::windows::core::DefaultType>::DefaultType), hwnd, swclass, ::core::mem::transmute_copy(&plcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterPending<Impl: IShellWindowsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lthreadid: i32, pvarloc: *const super::super::System::Com::VARIANT, pvarlocroot: *const super::super::System::Com::VARIANT, swclass: i32, plcookie: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RegisterPending(lthreadid, &*(&pvarloc as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), &*(&pvarlocroot as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), swclass, ::core::mem::transmute_copy(&plcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Revoke<Impl: IShellWindowsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcookie: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Revoke(lcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnNavigate<Impl: IShellWindowsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcookie: i32, pvarloc: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnNavigate(lcookie, &*(&pvarloc as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnActivated<Impl: IShellWindowsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcookie: i32, factive: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnActivated(lcookie, factive) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindWindowSW<Impl: IShellWindowsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvarloc: *const super::super::System::Com::VARIANT, pvarlocroot: *const super::super::System::Com::VARIANT, swclass: i32, phwnd: *mut i32, swfwoptions: i32, ppdispout: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindWindowSW(&*(&pvarloc as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), &*(&pvarlocroot as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), swclass, ::core::mem::transmute_copy(&phwnd), swfwoptions, ::core::mem::transmute_copy(&ppdispout)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnCreated<Impl: IShellWindowsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcookie: i32, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnCreated(lcookie, &*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ProcessAttachDetach<Impl: IShellWindowsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fattach: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ProcessAttachDetach(fattach) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IShellWindows>,
            ::windows::core::GetTrustLevel,
            Count::<Impl, OFFSET>,
            Item::<Impl, OFFSET>,
            _NewEnum::<Impl, OFFSET>,
            Register::<Impl, OFFSET>,
            RegisterPending::<Impl, OFFSET>,
            Revoke::<Impl, OFFSET>,
            OnNavigate::<Impl, OFFSET>,
            OnActivated::<Impl, OFFSET>,
            FindWindowSW::<Impl, OFFSET>,
            OnCreated::<Impl, OFFSET>,
            ProcessAttachDetach::<Impl, OFFSET>,
        )
    }
}
pub trait ISortColumnArrayImpl: Sized {
    fn GetCount();
    fn GetAt();
    fn GetSortType();
}
impl ::windows::core::RuntimeName for ISortColumnArray {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISortColumnArray";
}
impl ISortColumnArrayVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISortColumnArrayImpl, const OFFSET: isize>() -> ISortColumnArrayVtbl {
        unsafe extern "system" fn GetCount<Impl: ISortColumnArrayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columncount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCount(::core::mem::transmute_copy(&columncount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAt<Impl: ISortColumnArrayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, sortcolumn: *mut SORTCOLUMN) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetAt(index, ::core::mem::transmute_copy(&sortcolumn)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSortType<Impl: ISortColumnArrayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut SORT_ORDER_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSortType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISortColumnArray>, ::windows::core::GetTrustLevel, GetCount::<Impl, OFFSET>, GetAt::<Impl, OFFSET>, GetSortType::<Impl, OFFSET>)
    }
}
pub trait IStartMenuPinnedListImpl: Sized {
    fn RemoveFromList();
}
impl ::windows::core::RuntimeName for IStartMenuPinnedList {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IStartMenuPinnedList";
}
impl IStartMenuPinnedListVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStartMenuPinnedListImpl, const OFFSET: isize>() -> IStartMenuPinnedListVtbl {
        unsafe extern "system" fn RemoveFromList<Impl: IStartMenuPinnedListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pitem: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveFromList(&*(&pitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IStartMenuPinnedList>, ::windows::core::GetTrustLevel, RemoveFromList::<Impl, OFFSET>)
    }
}
pub trait IStorageProviderBannersImpl: Sized {
    fn SetBanner();
    fn ClearBanner();
    fn ClearAllBanners();
    fn GetBanner();
}
impl ::windows::core::RuntimeName for IStorageProviderBanners {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IStorageProviderBanners";
}
impl IStorageProviderBannersVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStorageProviderBannersImpl, const OFFSET: isize>() -> IStorageProviderBannersVtbl {
        unsafe extern "system" fn SetBanner<Impl: IStorageProviderBannersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, provideridentity: super::super::Foundation::PWSTR, subscriptionid: super::super::Foundation::PWSTR, contentid: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBanner(
                &*(&provideridentity as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&subscriptionid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&contentid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ClearBanner<Impl: IStorageProviderBannersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, provideridentity: super::super::Foundation::PWSTR, subscriptionid: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ClearBanner(&*(&provideridentity as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&subscriptionid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ClearAllBanners<Impl: IStorageProviderBannersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, provideridentity: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ClearAllBanners(&*(&provideridentity as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBanner<Impl: IStorageProviderBannersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, provideridentity: super::super::Foundation::PWSTR, subscriptionid: super::super::Foundation::PWSTR, contentid: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetBanner(&*(&provideridentity as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&subscriptionid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&contentid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IStorageProviderBanners>, ::windows::core::GetTrustLevel, SetBanner::<Impl, OFFSET>, ClearBanner::<Impl, OFFSET>, ClearAllBanners::<Impl, OFFSET>, GetBanner::<Impl, OFFSET>)
    }
}
pub trait IStorageProviderCopyHookImpl: Sized {
    fn CopyCallback();
}
impl ::windows::core::RuntimeName for IStorageProviderCopyHook {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IStorageProviderCopyHook";
}
impl IStorageProviderCopyHookVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStorageProviderCopyHookImpl, const OFFSET: isize>() -> IStorageProviderCopyHookVtbl {
        unsafe extern "system" fn CopyCallback<Impl: IStorageProviderCopyHookImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, operation: u32, flags: u32, srcfile: super::super::Foundation::PWSTR, srcattribs: u32, destfile: super::super::Foundation::PWSTR, destattribs: u32, result: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CopyCallback(
                &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                operation,
                flags,
                &*(&srcfile as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                srcattribs,
                &*(&destfile as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                destattribs,
                ::core::mem::transmute_copy(&result),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IStorageProviderCopyHook>, ::windows::core::GetTrustLevel, CopyCallback::<Impl, OFFSET>)
    }
}
pub trait IStorageProviderHandlerImpl: Sized {
    fn GetPropertyHandlerFromPath();
    fn GetPropertyHandlerFromUri();
    fn GetPropertyHandlerFromFileId();
}
impl ::windows::core::RuntimeName for IStorageProviderHandler {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IStorageProviderHandler";
}
impl IStorageProviderHandlerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStorageProviderHandlerImpl, const OFFSET: isize>() -> IStorageProviderHandlerVtbl {
        unsafe extern "system" fn GetPropertyHandlerFromPath<Impl: IStorageProviderHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::Foundation::PWSTR, propertyhandler: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPropertyHandlerFromPath(&*(&path as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&propertyhandler)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPropertyHandlerFromUri<Impl: IStorageProviderHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uri: super::super::Foundation::PWSTR, propertyhandler: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPropertyHandlerFromUri(&*(&uri as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&propertyhandler)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPropertyHandlerFromFileId<Impl: IStorageProviderHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fileid: super::super::Foundation::PWSTR, propertyhandler: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPropertyHandlerFromFileId(&*(&fileid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&propertyhandler)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IStorageProviderHandler>, ::windows::core::GetTrustLevel, GetPropertyHandlerFromPath::<Impl, OFFSET>, GetPropertyHandlerFromUri::<Impl, OFFSET>, GetPropertyHandlerFromFileId::<Impl, OFFSET>)
    }
}
pub trait IStorageProviderPropertyHandlerImpl: Sized {
    fn RetrieveProperties();
    fn SaveProperties();
}
impl ::windows::core::RuntimeName for IStorageProviderPropertyHandler {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IStorageProviderPropertyHandler";
}
impl IStorageProviderPropertyHandlerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStorageProviderPropertyHandlerImpl, const OFFSET: isize>() -> IStorageProviderPropertyHandlerVtbl {
        unsafe extern "system" fn RetrieveProperties<Impl: IStorageProviderPropertyHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, propertiestoretrieve: *const PropertiesSystem::PROPERTYKEY, propertiestoretrievecount: u32, retrievedproperties: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RetrieveProperties(&*(&propertiestoretrieve as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), propertiestoretrievecount, ::core::mem::transmute_copy(&retrievedproperties)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SaveProperties<Impl: IStorageProviderPropertyHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, propertiestosave: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SaveProperties(&*(&propertiestosave as *const <PropertiesSystem::IPropertyStore as ::windows::core::Abi>::Abi as *const <PropertiesSystem::IPropertyStore as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IStorageProviderPropertyHandler>, ::windows::core::GetTrustLevel, RetrieveProperties::<Impl, OFFSET>, SaveProperties::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IStreamAsyncImpl: Sized + IStreamImpl + ISequentialStreamImpl {
    fn ReadAsync();
    fn WriteAsync();
    fn OverlappedResult();
    fn CancelIo();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IStreamAsync {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IStreamAsync";
}
#[cfg(feature = "Win32_System_Com")]
impl IStreamAsyncVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamAsyncImpl, const OFFSET: isize>() -> IStreamAsyncVtbl {
        unsafe extern "system" fn ReadAsync<Impl: IStreamAsyncImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pv: *mut ::core::ffi::c_void, cb: u32, pcbread: *mut u32, lpoverlapped: *const super::super::System::IO::OVERLAPPED) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReadAsync(::core::mem::transmute_copy(&pv), cb, ::core::mem::transmute_copy(&pcbread), &*(&lpoverlapped as *const <super::super::System::IO::OVERLAPPED as ::windows::core::Abi>::Abi as *const <super::super::System::IO::OVERLAPPED as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteAsync<Impl: IStreamAsyncImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpbuffer: *const ::core::ffi::c_void, cb: u32, pcbwritten: *mut u32, lpoverlapped: *const super::super::System::IO::OVERLAPPED) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).WriteAsync(&*(&lpbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), cb, ::core::mem::transmute_copy(&pcbwritten), &*(&lpoverlapped as *const <super::super::System::IO::OVERLAPPED as ::windows::core::Abi>::Abi as *const <super::super::System::IO::OVERLAPPED as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OverlappedResult<Impl: IStreamAsyncImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpoverlapped: *const super::super::System::IO::OVERLAPPED, lpnumberofbytestransferred: *mut u32, bwait: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OverlappedResult(&*(&lpoverlapped as *const <super::super::System::IO::OVERLAPPED as ::windows::core::Abi>::Abi as *const <super::super::System::IO::OVERLAPPED as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&lpnumberofbytestransferred), &*(&bwait as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CancelIo<Impl: IStreamAsyncImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CancelIo() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IStreamAsync>, ::windows::core::GetTrustLevel, ReadAsync::<Impl, OFFSET>, WriteAsync::<Impl, OFFSET>, OverlappedResult::<Impl, OFFSET>, CancelIo::<Impl, OFFSET>)
    }
}
pub trait IStreamUnbufferedInfoImpl: Sized {
    fn GetSectorSize();
}
impl ::windows::core::RuntimeName for IStreamUnbufferedInfo {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IStreamUnbufferedInfo";
}
impl IStreamUnbufferedInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamUnbufferedInfoImpl, const OFFSET: isize>() -> IStreamUnbufferedInfoVtbl {
        unsafe extern "system" fn GetSectorSize<Impl: IStreamUnbufferedInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcbsectorsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSectorSize(::core::mem::transmute_copy(&pcbsectorsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IStreamUnbufferedInfo>, ::windows::core::GetTrustLevel, GetSectorSize::<Impl, OFFSET>)
    }
}
pub trait ISuspensionDependencyManagerImpl: Sized {
    fn RegisterAsChild();
    fn GroupChildWithParent();
    fn UngroupChildFromParent();
}
impl ::windows::core::RuntimeName for ISuspensionDependencyManager {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISuspensionDependencyManager";
}
impl ISuspensionDependencyManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISuspensionDependencyManagerImpl, const OFFSET: isize>() -> ISuspensionDependencyManagerVtbl {
        unsafe extern "system" fn RegisterAsChild<Impl: ISuspensionDependencyManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processhandle: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RegisterAsChild(&*(&processhandle as *const <super::super::Foundation::HANDLE as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HANDLE as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GroupChildWithParent<Impl: ISuspensionDependencyManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, childprocesshandle: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GroupChildWithParent(&*(&childprocesshandle as *const <super::super::Foundation::HANDLE as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HANDLE as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UngroupChildFromParent<Impl: ISuspensionDependencyManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, childprocesshandle: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UngroupChildFromParent(&*(&childprocesshandle as *const <super::super::Foundation::HANDLE as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HANDLE as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISuspensionDependencyManager>, ::windows::core::GetTrustLevel, RegisterAsChild::<Impl, OFFSET>, GroupChildWithParent::<Impl, OFFSET>, UngroupChildFromParent::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrConflictImpl: Sized {
    fn GetProperty();
    fn GetConflictIdInfo();
    fn GetItemsArray();
    fn Resolve();
    fn GetResolutionHandler();
}
impl ::windows::core::RuntimeName for ISyncMgrConflict {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrConflict";
}
impl ISyncMgrConflictVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrConflictImpl, const OFFSET: isize>() -> ISyncMgrConflictVtbl {
        unsafe extern "system" fn GetProperty<Impl: ISyncMgrConflictImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, propkey: *const PropertiesSystem::PROPERTYKEY, ppropvar: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProperty(&*(&propkey as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppropvar)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetConflictIdInfo<Impl: ISyncMgrConflictImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pconflictidinfo: *mut SYNCMGR_CONFLICT_ID_INFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetConflictIdInfo(::core::mem::transmute_copy(&pconflictidinfo)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemsArray<Impl: ISyncMgrConflictImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pparray: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemsArray(::core::mem::transmute_copy(&pparray)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Resolve<Impl: ISyncMgrConflictImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, presolveinfo: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Resolve(&*(&presolveinfo as *const <ISyncMgrConflictResolveInfo as ::windows::core::Abi>::Abi as *const <ISyncMgrConflictResolveInfo as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetResolutionHandler<Impl: ISyncMgrConflictImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppvresolutionhandler: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetResolutionHandler(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppvresolutionhandler)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrConflict>, ::windows::core::GetTrustLevel, GetProperty::<Impl, OFFSET>, GetConflictIdInfo::<Impl, OFFSET>, GetItemsArray::<Impl, OFFSET>, Resolve::<Impl, OFFSET>, GetResolutionHandler::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrConflictFolderImpl: Sized {
    fn GetConflictIDList();
}
impl ::windows::core::RuntimeName for ISyncMgrConflictFolder {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrConflictFolder";
}
impl ISyncMgrConflictFolderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrConflictFolderImpl, const OFFSET: isize>() -> ISyncMgrConflictFolderVtbl {
        unsafe extern "system" fn GetConflictIDList<Impl: ISyncMgrConflictFolderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pconflict: ::windows::core::RawPtr, ppidlconflict: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetConflictIDList(&*(&pconflict as *const <ISyncMgrConflict as ::windows::core::Abi>::Abi as *const <ISyncMgrConflict as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppidlconflict)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrConflictFolder>, ::windows::core::GetTrustLevel, GetConflictIDList::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrConflictItemsImpl: Sized {
    fn GetCount();
    fn GetItem();
}
impl ::windows::core::RuntimeName for ISyncMgrConflictItems {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrConflictItems";
}
impl ISyncMgrConflictItemsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrConflictItemsImpl, const OFFSET: isize>() -> ISyncMgrConflictItemsVtbl {
        unsafe extern "system" fn GetCount<Impl: ISyncMgrConflictItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCount(::core::mem::transmute_copy(&pcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItem<Impl: ISyncMgrConflictItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, iindex: u32, piteminfo: *mut CONFIRM_CONFLICT_ITEM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItem(iindex, ::core::mem::transmute_copy(&piteminfo)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrConflictItems>, ::windows::core::GetTrustLevel, GetCount::<Impl, OFFSET>, GetItem::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrConflictPresenterImpl: Sized {
    fn PresentConflict();
}
impl ::windows::core::RuntimeName for ISyncMgrConflictPresenter {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrConflictPresenter";
}
impl ISyncMgrConflictPresenterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrConflictPresenterImpl, const OFFSET: isize>() -> ISyncMgrConflictPresenterVtbl {
        unsafe extern "system" fn PresentConflict<Impl: ISyncMgrConflictPresenterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pconflict: ::windows::core::RawPtr, presolveinfo: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PresentConflict(&*(&pconflict as *const <ISyncMgrConflict as ::windows::core::Abi>::Abi as *const <ISyncMgrConflict as ::windows::core::DefaultType>::DefaultType), &*(&presolveinfo as *const <ISyncMgrConflictResolveInfo as ::windows::core::Abi>::Abi as *const <ISyncMgrConflictResolveInfo as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrConflictPresenter>, ::windows::core::GetTrustLevel, PresentConflict::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrConflictResolutionItemsImpl: Sized {
    fn GetCount();
    fn GetItem();
}
impl ::windows::core::RuntimeName for ISyncMgrConflictResolutionItems {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrConflictResolutionItems";
}
impl ISyncMgrConflictResolutionItemsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrConflictResolutionItemsImpl, const OFFSET: isize>() -> ISyncMgrConflictResolutionItemsVtbl {
        unsafe extern "system" fn GetCount<Impl: ISyncMgrConflictResolutionItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCount(::core::mem::transmute_copy(&pcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItem<Impl: ISyncMgrConflictResolutionItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, iindex: u32, piteminfo: *mut CONFIRM_CONFLICT_RESULT_INFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItem(iindex, ::core::mem::transmute_copy(&piteminfo)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrConflictResolutionItems>, ::windows::core::GetTrustLevel, GetCount::<Impl, OFFSET>, GetItem::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrConflictResolveInfoImpl: Sized {
    fn GetIterationInfo();
    fn GetPresenterNextStep();
    fn GetPresenterChoice();
    fn GetItemChoiceCount();
    fn GetItemChoice();
    fn SetPresenterNextStep();
    fn SetPresenterChoice();
    fn SetItemChoices();
}
impl ::windows::core::RuntimeName for ISyncMgrConflictResolveInfo {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrConflictResolveInfo";
}
impl ISyncMgrConflictResolveInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrConflictResolveInfoImpl, const OFFSET: isize>() -> ISyncMgrConflictResolveInfoVtbl {
        unsafe extern "system" fn GetIterationInfo<Impl: ISyncMgrConflictResolveInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pncurrentconflict: *mut u32, pcconflicts: *mut u32, pcremainingforapplytoall: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetIterationInfo(::core::mem::transmute_copy(&pncurrentconflict), ::core::mem::transmute_copy(&pcconflicts), ::core::mem::transmute_copy(&pcremainingforapplytoall)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPresenterNextStep<Impl: ISyncMgrConflictResolveInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnpresenternextstep: *mut SYNCMGR_PRESENTER_NEXT_STEP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPresenterNextStep(::core::mem::transmute_copy(&pnpresenternextstep)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPresenterChoice<Impl: ISyncMgrConflictResolveInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnpresenterchoice: *mut SYNCMGR_PRESENTER_CHOICE, pfapplytoall: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPresenterChoice(::core::mem::transmute_copy(&pnpresenterchoice), ::core::mem::transmute_copy(&pfapplytoall)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemChoiceCount<Impl: ISyncMgrConflictResolveInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcchoices: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemChoiceCount(::core::mem::transmute_copy(&pcchoices)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemChoice<Impl: ISyncMgrConflictResolveInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ichoice: u32, pichoiceindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemChoice(ichoice, ::core::mem::transmute_copy(&pichoiceindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPresenterNextStep<Impl: ISyncMgrConflictResolveInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, npresenternextstep: SYNCMGR_PRESENTER_NEXT_STEP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetPresenterNextStep(npresenternextstep) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPresenterChoice<Impl: ISyncMgrConflictResolveInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, npresenterchoice: SYNCMGR_PRESENTER_CHOICE, fapplytoall: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetPresenterChoice(npresenterchoice, &*(&fapplytoall as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetItemChoices<Impl: ISyncMgrConflictResolveInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prgiconflictitemindexes: *mut u32, cchoices: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetItemChoices(prgiconflictitemindexes, cchoices) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ISyncMgrConflictResolveInfo>,
            ::windows::core::GetTrustLevel,
            GetIterationInfo::<Impl, OFFSET>,
            GetPresenterNextStep::<Impl, OFFSET>,
            GetPresenterChoice::<Impl, OFFSET>,
            GetItemChoiceCount::<Impl, OFFSET>,
            GetItemChoice::<Impl, OFFSET>,
            SetPresenterNextStep::<Impl, OFFSET>,
            SetPresenterChoice::<Impl, OFFSET>,
            SetItemChoices::<Impl, OFFSET>,
        )
    }
}
pub trait ISyncMgrConflictStoreImpl: Sized {
    fn EnumConflicts();
    fn BindToConflict();
    fn RemoveConflicts();
    fn GetCount();
}
impl ::windows::core::RuntimeName for ISyncMgrConflictStore {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrConflictStore";
}
impl ISyncMgrConflictStoreVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrConflictStoreImpl, const OFFSET: isize>() -> ISyncMgrConflictStoreVtbl {
        unsafe extern "system" fn EnumConflicts<Impl: ISyncMgrConflictStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszhandlerid: super::super::Foundation::PWSTR, pszitemid: super::super::Foundation::PWSTR, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumConflicts(&*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pszitemid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BindToConflict<Impl: ISyncMgrConflictStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pconflictidinfo: *const SYNCMGR_CONFLICT_ID_INFO, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BindToConflict(&*(&pconflictidinfo as *const <SYNCMGR_CONFLICT_ID_INFO as ::windows::core::Abi>::Abi as *const <SYNCMGR_CONFLICT_ID_INFO as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveConflicts<Impl: ISyncMgrConflictStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rgconflictidinfo: *const SYNCMGR_CONFLICT_ID_INFO, cconflicts: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveConflicts(&*(&rgconflictidinfo as *const <SYNCMGR_CONFLICT_ID_INFO as ::windows::core::Abi>::Abi as *const <SYNCMGR_CONFLICT_ID_INFO as ::windows::core::DefaultType>::DefaultType), cconflicts) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCount<Impl: ISyncMgrConflictStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszhandlerid: super::super::Foundation::PWSTR, pszitemid: super::super::Foundation::PWSTR, pnconflicts: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCount(&*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pszitemid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pnconflicts)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrConflictStore>, ::windows::core::GetTrustLevel, EnumConflicts::<Impl, OFFSET>, BindToConflict::<Impl, OFFSET>, RemoveConflicts::<Impl, OFFSET>, GetCount::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrControlImpl: Sized {
    fn StartHandlerSync();
    fn StartItemSync();
    fn StartSyncAll();
    fn StopHandlerSync();
    fn StopItemSync();
    fn StopSyncAll();
    fn UpdateHandlerCollection();
    fn UpdateHandler();
    fn UpdateItem();
    fn UpdateEvents();
    fn UpdateConflict();
    fn UpdateConflicts();
    fn ActivateHandler();
    fn EnableHandler();
    fn EnableItem();
}
impl ::windows::core::RuntimeName for ISyncMgrControl {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrControl";
}
impl ISyncMgrControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrControlImpl, const OFFSET: isize>() -> ISyncMgrControlVtbl {
        unsafe extern "system" fn StartHandlerSync<Impl: ISyncMgrControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszhandlerid: super::super::Foundation::PWSTR, hwndowner: super::super::Foundation::HWND, punk: *mut ::core::ffi::c_void, nsynccontrolflags: SYNCMGR_SYNC_CONTROL_FLAGS, presult: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartHandlerSync(
                &*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&hwndowner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                nsynccontrolflags,
                &*(&presult as *const <ISyncMgrSyncResult as ::windows::core::Abi>::Abi as *const <ISyncMgrSyncResult as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartItemSync<Impl: ISyncMgrControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszhandlerid: super::super::Foundation::PWSTR, ppszitemids: *const super::super::Foundation::PWSTR, citems: u32, hwndowner: super::super::Foundation::HWND, punk: *mut ::core::ffi::c_void, nsynccontrolflags: SYNCMGR_SYNC_CONTROL_FLAGS, presult: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartItemSync(
                &*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&ppszitemids as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                citems,
                &*(&hwndowner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                nsynccontrolflags,
                &*(&presult as *const <ISyncMgrSyncResult as ::windows::core::Abi>::Abi as *const <ISyncMgrSyncResult as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSyncAll<Impl: ISyncMgrControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StartSyncAll(&*(&hwndowner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StopHandlerSync<Impl: ISyncMgrControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszhandlerid: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StopHandlerSync(&*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StopItemSync<Impl: ISyncMgrControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszhandlerid: super::super::Foundation::PWSTR, ppszitemids: *const super::super::Foundation::PWSTR, citems: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StopItemSync(&*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&ppszitemids as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), citems) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StopSyncAll<Impl: ISyncMgrControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StopSyncAll() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateHandlerCollection<Impl: ISyncMgrControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rclsidcollectionid: *const ::windows::core::GUID, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateHandlerCollection(&*(&rclsidcollectionid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ncontrolflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateHandler<Impl: ISyncMgrControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszhandlerid: super::super::Foundation::PWSTR, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateHandler(&*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ncontrolflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateItem<Impl: ISyncMgrControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszhandlerid: super::super::Foundation::PWSTR, pszitemid: super::super::Foundation::PWSTR, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateItem(&*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pszitemid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ncontrolflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateEvents<Impl: ISyncMgrControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszhandlerid: super::super::Foundation::PWSTR, pszitemid: super::super::Foundation::PWSTR, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateEvents(&*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pszitemid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ncontrolflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateConflict<Impl: ISyncMgrControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszhandlerid: super::super::Foundation::PWSTR, pszitemid: super::super::Foundation::PWSTR, pconflict: ::windows::core::RawPtr, nreason: SYNCMGR_UPDATE_REASON) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateConflict(
                &*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszitemid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pconflict as *const <ISyncMgrConflict as ::windows::core::Abi>::Abi as *const <ISyncMgrConflict as ::windows::core::DefaultType>::DefaultType),
                nreason,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateConflicts<Impl: ISyncMgrControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszhandlerid: super::super::Foundation::PWSTR, pszitemid: super::super::Foundation::PWSTR, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateConflicts(&*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pszitemid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ncontrolflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ActivateHandler<Impl: ISyncMgrControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, factivate: super::super::Foundation::BOOL, pszhandlerid: super::super::Foundation::PWSTR, hwndowner: super::super::Foundation::HWND, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ActivateHandler(
                &*(&factivate as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType),
                &*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&hwndowner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                ncontrolflags,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnableHandler<Impl: ISyncMgrControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL, pszhandlerid: super::super::Foundation::PWSTR, hwndowner: super::super::Foundation::HWND, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnableHandler(
                &*(&fenable as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType),
                &*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&hwndowner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                ncontrolflags,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnableItem<Impl: ISyncMgrControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL, pszhandlerid: super::super::Foundation::PWSTR, pszitemid: super::super::Foundation::PWSTR, hwndowner: super::super::Foundation::HWND, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnableItem(
                &*(&fenable as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType),
                &*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszitemid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&hwndowner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                ncontrolflags,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ISyncMgrControl>,
            ::windows::core::GetTrustLevel,
            StartHandlerSync::<Impl, OFFSET>,
            StartItemSync::<Impl, OFFSET>,
            StartSyncAll::<Impl, OFFSET>,
            StopHandlerSync::<Impl, OFFSET>,
            StopItemSync::<Impl, OFFSET>,
            StopSyncAll::<Impl, OFFSET>,
            UpdateHandlerCollection::<Impl, OFFSET>,
            UpdateHandler::<Impl, OFFSET>,
            UpdateItem::<Impl, OFFSET>,
            UpdateEvents::<Impl, OFFSET>,
            UpdateConflict::<Impl, OFFSET>,
            UpdateConflicts::<Impl, OFFSET>,
            ActivateHandler::<Impl, OFFSET>,
            EnableHandler::<Impl, OFFSET>,
            EnableItem::<Impl, OFFSET>,
        )
    }
}
pub trait ISyncMgrEnumItemsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for ISyncMgrEnumItems {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrEnumItems";
}
impl ISyncMgrEnumItemsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrEnumItemsImpl, const OFFSET: isize>() -> ISyncMgrEnumItemsVtbl {
        unsafe extern "system" fn Next<Impl: ISyncMgrEnumItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut SYNCMGRITEM, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: ISyncMgrEnumItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: ISyncMgrEnumItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: ISyncMgrEnumItemsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrEnumItems>, ::windows::core::GetTrustLevel, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrEventImpl: Sized {
    fn GetEventID();
    fn GetHandlerID();
    fn GetItemID();
    fn GetLevel();
    fn GetFlags();
    fn GetTime();
    fn GetName();
    fn GetDescription();
    fn GetLinkText();
    fn GetLinkReference();
    fn GetContext();
}
impl ::windows::core::RuntimeName for ISyncMgrEvent {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrEvent";
}
impl ISyncMgrEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrEventImpl, const OFFSET: isize>() -> ISyncMgrEventVtbl {
        unsafe extern "system" fn GetEventID<Impl: ISyncMgrEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguideventid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventID(::core::mem::transmute_copy(&pguideventid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetHandlerID<Impl: ISyncMgrEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszhandlerid: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetHandlerID(::core::mem::transmute_copy(&ppszhandlerid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemID<Impl: ISyncMgrEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszitemid: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemID(::core::mem::transmute_copy(&ppszitemid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLevel<Impl: ISyncMgrEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnlevel: *mut SYNCMGR_EVENT_LEVEL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLevel(::core::mem::transmute_copy(&pnlevel)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFlags<Impl: ISyncMgrEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnflags: *mut SYNCMGR_EVENT_FLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFlags(::core::mem::transmute_copy(&pnflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTime<Impl: ISyncMgrEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfcreationtime: *mut super::super::Foundation::FILETIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTime(::core::mem::transmute_copy(&pfcreationtime)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetName<Impl: ISyncMgrEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszname: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&ppszname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDescription<Impl: ISyncMgrEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszdescription: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDescription(::core::mem::transmute_copy(&ppszdescription)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLinkText<Impl: ISyncMgrEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszlinktext: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLinkText(::core::mem::transmute_copy(&ppszlinktext)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLinkReference<Impl: ISyncMgrEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszlinkreference: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLinkReference(::core::mem::transmute_copy(&ppszlinkreference)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContext<Impl: ISyncMgrEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszcontext: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetContext(::core::mem::transmute_copy(&ppszcontext)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ISyncMgrEvent>,
            ::windows::core::GetTrustLevel,
            GetEventID::<Impl, OFFSET>,
            GetHandlerID::<Impl, OFFSET>,
            GetItemID::<Impl, OFFSET>,
            GetLevel::<Impl, OFFSET>,
            GetFlags::<Impl, OFFSET>,
            GetTime::<Impl, OFFSET>,
            GetName::<Impl, OFFSET>,
            GetDescription::<Impl, OFFSET>,
            GetLinkText::<Impl, OFFSET>,
            GetLinkReference::<Impl, OFFSET>,
            GetContext::<Impl, OFFSET>,
        )
    }
}
pub trait ISyncMgrEventLinkUIOperationImpl: Sized + ISyncMgrUIOperationImpl {
    fn Init();
}
impl ::windows::core::RuntimeName for ISyncMgrEventLinkUIOperation {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrEventLinkUIOperation";
}
impl ISyncMgrEventLinkUIOperationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrEventLinkUIOperationImpl, const OFFSET: isize>() -> ISyncMgrEventLinkUIOperationVtbl {
        unsafe extern "system" fn Init<Impl: ISyncMgrEventLinkUIOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rguideventid: *const ::windows::core::GUID, pevent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Init(&*(&rguideventid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&pevent as *const <ISyncMgrEvent as ::windows::core::Abi>::Abi as *const <ISyncMgrEvent as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrEventLinkUIOperation>, ::windows::core::GetTrustLevel, Init::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrEventStoreImpl: Sized {
    fn GetEventEnumerator();
    fn GetEventCount();
    fn GetEvent();
    fn RemoveEvent();
}
impl ::windows::core::RuntimeName for ISyncMgrEventStore {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrEventStore";
}
impl ISyncMgrEventStoreVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrEventStoreImpl, const OFFSET: isize>() -> ISyncMgrEventStoreVtbl {
        unsafe extern "system" fn GetEventEnumerator<Impl: ISyncMgrEventStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventEnumerator(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventCount<Impl: ISyncMgrEventStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcevents: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEventCount(::core::mem::transmute_copy(&pcevents)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEvent<Impl: ISyncMgrEventStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rguideventid: *const ::windows::core::GUID, ppevent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetEvent(&*(&rguideventid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppevent)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveEvent<Impl: ISyncMgrEventStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguideventids: *const ::windows::core::GUID, cevents: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveEvent(&*(&pguideventids as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), cevents) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrEventStore>, ::windows::core::GetTrustLevel, GetEventEnumerator::<Impl, OFFSET>, GetEventCount::<Impl, OFFSET>, GetEvent::<Impl, OFFSET>, RemoveEvent::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrHandlerImpl: Sized {
    fn GetName();
    fn GetHandlerInfo();
    fn GetObject();
    fn GetCapabilities();
    fn GetPolicies();
    fn Activate();
    fn Enable();
    fn Synchronize();
}
impl ::windows::core::RuntimeName for ISyncMgrHandler {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrHandler";
}
impl ISyncMgrHandlerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrHandlerImpl, const OFFSET: isize>() -> ISyncMgrHandlerVtbl {
        unsafe extern "system" fn GetName<Impl: ISyncMgrHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszname: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&ppszname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetHandlerInfo<Impl: ISyncMgrHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pphandlerinfo: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetHandlerInfo(::core::mem::transmute_copy(&pphandlerinfo)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetObject<Impl: ISyncMgrHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rguidobjectid: *const ::windows::core::GUID, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetObject(&*(&rguidobjectid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCapabilities<Impl: ISyncMgrHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmcapabilities: *mut SYNCMGR_HANDLER_CAPABILITIES) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCapabilities(::core::mem::transmute_copy(&pmcapabilities)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPolicies<Impl: ISyncMgrHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmpolicies: *mut SYNCMGR_HANDLER_POLICIES) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPolicies(::core::mem::transmute_copy(&pmpolicies)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Activate<Impl: ISyncMgrHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, factivate: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Activate(&*(&factivate as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Enable<Impl: ISyncMgrHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Enable(&*(&fenable as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Synchronize<Impl: ISyncMgrHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszitemids: *const super::super::Foundation::PWSTR, citems: u32, hwndowner: super::super::Foundation::HWND, psessioncreator: ::windows::core::RawPtr, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Synchronize(
                &*(&ppszitemids as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                citems,
                &*(&hwndowner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&psessioncreator as *const <ISyncMgrSessionCreator as ::windows::core::Abi>::Abi as *const <ISyncMgrSessionCreator as ::windows::core::DefaultType>::DefaultType),
                &*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ISyncMgrHandler>,
            ::windows::core::GetTrustLevel,
            GetName::<Impl, OFFSET>,
            GetHandlerInfo::<Impl, OFFSET>,
            GetObject::<Impl, OFFSET>,
            GetCapabilities::<Impl, OFFSET>,
            GetPolicies::<Impl, OFFSET>,
            Activate::<Impl, OFFSET>,
            Enable::<Impl, OFFSET>,
            Synchronize::<Impl, OFFSET>,
        )
    }
}
pub trait ISyncMgrHandlerCollectionImpl: Sized {
    fn GetHandlerEnumerator();
    fn BindToHandler();
}
impl ::windows::core::RuntimeName for ISyncMgrHandlerCollection {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrHandlerCollection";
}
impl ISyncMgrHandlerCollectionVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrHandlerCollectionImpl, const OFFSET: isize>() -> ISyncMgrHandlerCollectionVtbl {
        unsafe extern "system" fn GetHandlerEnumerator<Impl: ISyncMgrHandlerCollectionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetHandlerEnumerator(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BindToHandler<Impl: ISyncMgrHandlerCollectionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszhandlerid: super::super::Foundation::PWSTR, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).BindToHandler(&*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrHandlerCollection>, ::windows::core::GetTrustLevel, GetHandlerEnumerator::<Impl, OFFSET>, BindToHandler::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrHandlerInfoImpl: Sized {
    fn GetType();
    fn GetTypeLabel();
    fn GetComment();
    fn GetLastSyncTime();
    fn IsActive();
    fn IsEnabled();
    fn IsConnected();
}
impl ::windows::core::RuntimeName for ISyncMgrHandlerInfo {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrHandlerInfo";
}
impl ISyncMgrHandlerInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrHandlerInfoImpl, const OFFSET: isize>() -> ISyncMgrHandlerInfoVtbl {
        unsafe extern "system" fn GetType<Impl: ISyncMgrHandlerInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pntype: *mut SYNCMGR_HANDLER_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetType(::core::mem::transmute_copy(&pntype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeLabel<Impl: ISyncMgrHandlerInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsztypelabel: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeLabel(::core::mem::transmute_copy(&ppsztypelabel)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetComment<Impl: ISyncMgrHandlerInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszcomment: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetComment(::core::mem::transmute_copy(&ppszcomment)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLastSyncTime<Impl: ISyncMgrHandlerInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pftlastsync: *mut super::super::Foundation::FILETIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLastSyncTime(::core::mem::transmute_copy(&pftlastsync)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsActive<Impl: ISyncMgrHandlerInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsActive() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsEnabled<Impl: ISyncMgrHandlerInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsEnabled() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsConnected<Impl: ISyncMgrHandlerInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsConnected() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrHandlerInfo>, ::windows::core::GetTrustLevel, GetType::<Impl, OFFSET>, GetTypeLabel::<Impl, OFFSET>, GetComment::<Impl, OFFSET>, GetLastSyncTime::<Impl, OFFSET>, IsActive::<Impl, OFFSET>, IsEnabled::<Impl, OFFSET>, IsConnected::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrRegisterImpl: Sized {
    fn RegisterSyncMgrHandler();
    fn UnregisterSyncMgrHandler();
    fn GetHandlerRegistrationInfo();
}
impl ::windows::core::RuntimeName for ISyncMgrRegister {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrRegister";
}
impl ISyncMgrRegisterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrRegisterImpl, const OFFSET: isize>() -> ISyncMgrRegisterVtbl {
        unsafe extern "system" fn RegisterSyncMgrHandler<Impl: ISyncMgrRegisterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsidhandler: *const ::windows::core::GUID, pwszdescription: super::super::Foundation::PWSTR, dwsyncmgrregisterflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RegisterSyncMgrHandler(&*(&clsidhandler as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&pwszdescription as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwsyncmgrregisterflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnregisterSyncMgrHandler<Impl: ISyncMgrRegisterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsidhandler: *const ::windows::core::GUID, dwreserved: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UnregisterSyncMgrHandler(&*(&clsidhandler as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), dwreserved) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetHandlerRegistrationInfo<Impl: ISyncMgrRegisterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsidhandler: *const ::windows::core::GUID, pdwsyncmgrregisterflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetHandlerRegistrationInfo(&*(&clsidhandler as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), pdwsyncmgrregisterflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrRegister>, ::windows::core::GetTrustLevel, RegisterSyncMgrHandler::<Impl, OFFSET>, UnregisterSyncMgrHandler::<Impl, OFFSET>, GetHandlerRegistrationInfo::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrResolutionHandlerImpl: Sized {
    fn QueryAbilities();
    fn KeepOther();
    fn KeepRecent();
    fn RemoveFromSyncSet();
    fn KeepItems();
}
impl ::windows::core::RuntimeName for ISyncMgrResolutionHandler {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrResolutionHandler";
}
impl ISyncMgrResolutionHandlerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrResolutionHandlerImpl, const OFFSET: isize>() -> ISyncMgrResolutionHandlerVtbl {
        unsafe extern "system" fn QueryAbilities<Impl: ISyncMgrResolutionHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwabilities: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryAbilities(::core::mem::transmute_copy(&pdwabilities)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn KeepOther<Impl: ISyncMgrResolutionHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psiother: ::windows::core::RawPtr, pfeedback: *mut SYNCMGR_RESOLUTION_FEEDBACK) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).KeepOther(&*(&psiother as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pfeedback)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn KeepRecent<Impl: ISyncMgrResolutionHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfeedback: *mut SYNCMGR_RESOLUTION_FEEDBACK) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).KeepRecent(::core::mem::transmute_copy(&pfeedback)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveFromSyncSet<Impl: ISyncMgrResolutionHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfeedback: *mut SYNCMGR_RESOLUTION_FEEDBACK) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveFromSyncSet(::core::mem::transmute_copy(&pfeedback)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn KeepItems<Impl: ISyncMgrResolutionHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, parray: ::windows::core::RawPtr, pfeedback: *mut SYNCMGR_RESOLUTION_FEEDBACK) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).KeepItems(&*(&parray as *const <ISyncMgrConflictResolutionItems as ::windows::core::Abi>::Abi as *const <ISyncMgrConflictResolutionItems as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pfeedback)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrResolutionHandler>, ::windows::core::GetTrustLevel, QueryAbilities::<Impl, OFFSET>, KeepOther::<Impl, OFFSET>, KeepRecent::<Impl, OFFSET>, RemoveFromSyncSet::<Impl, OFFSET>, KeepItems::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrScheduleWizardUIOperationImpl: Sized + ISyncMgrUIOperationImpl {
    fn InitWizard();
}
impl ::windows::core::RuntimeName for ISyncMgrScheduleWizardUIOperation {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrScheduleWizardUIOperation";
}
impl ISyncMgrScheduleWizardUIOperationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrScheduleWizardUIOperationImpl, const OFFSET: isize>() -> ISyncMgrScheduleWizardUIOperationVtbl {
        unsafe extern "system" fn InitWizard<Impl: ISyncMgrScheduleWizardUIOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszhandlerid: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InitWizard(&*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrScheduleWizardUIOperation>, ::windows::core::GetTrustLevel, InitWizard::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrSessionCreatorImpl: Sized {
    fn CreateSession();
}
impl ::windows::core::RuntimeName for ISyncMgrSessionCreator {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrSessionCreator";
}
impl ISyncMgrSessionCreatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrSessionCreatorImpl, const OFFSET: isize>() -> ISyncMgrSessionCreatorVtbl {
        unsafe extern "system" fn CreateSession<Impl: ISyncMgrSessionCreatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszhandlerid: super::super::Foundation::PWSTR, ppszitemids: *const super::super::Foundation::PWSTR, citems: u32, ppcallback: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateSession(&*(&pszhandlerid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&ppszitemids as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), citems, ::core::mem::transmute_copy(&ppcallback)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrSessionCreator>, ::windows::core::GetTrustLevel, CreateSession::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrSyncCallbackImpl: Sized {
    fn ReportProgress();
    fn SetHandlerProgressText();
    fn ReportEvent();
    fn CanContinue();
    fn QueryForAdditionalItems();
    fn AddItemToSession();
    fn AddIUnknownToSession();
    fn ProposeItem();
    fn CommitItem();
    fn ReportManualSync();
}
impl ::windows::core::RuntimeName for ISyncMgrSyncCallback {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrSyncCallback";
}
impl ISyncMgrSyncCallbackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrSyncCallbackImpl, const OFFSET: isize>() -> ISyncMgrSyncCallbackVtbl {
        unsafe extern "system" fn ReportProgress<Impl: ISyncMgrSyncCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszitemid: super::super::Foundation::PWSTR, pszprogresstext: super::super::Foundation::PWSTR, nstatus: SYNCMGR_PROGRESS_STATUS, ucurrentstep: u32, umaxstep: u32, pncancelrequest: *mut SYNCMGR_CANCEL_REQUEST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReportProgress(&*(&pszitemid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pszprogresstext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), nstatus, ucurrentstep, umaxstep, pncancelrequest) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetHandlerProgressText<Impl: ISyncMgrSyncCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszprogresstext: super::super::Foundation::PWSTR, pncancelrequest: *mut SYNCMGR_CANCEL_REQUEST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetHandlerProgressText(&*(&pszprogresstext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), pncancelrequest) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReportEvent<Impl: ISyncMgrSyncCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszitemid: super::super::Foundation::PWSTR, nlevel: SYNCMGR_EVENT_LEVEL, nflags: SYNCMGR_EVENT_FLAGS, pszname: super::super::Foundation::PWSTR, pszdescription: super::super::Foundation::PWSTR, pszlinktext: super::super::Foundation::PWSTR, pszlinkreference: super::super::Foundation::PWSTR, pszcontext: super::super::Foundation::PWSTR, pguideventid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReportEvent(
                &*(&pszitemid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                nlevel,
                nflags,
                &*(&pszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszdescription as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszlinktext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszlinkreference as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszcontext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&pguideventid),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CanContinue<Impl: ISyncMgrSyncCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszitemid: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CanContinue(&*(&pszitemid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryForAdditionalItems<Impl: ISyncMgrSyncCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenumitemids: *mut ::windows::core::RawPtr, ppenumpunks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryForAdditionalItems(::core::mem::transmute_copy(&ppenumitemids), ::core::mem::transmute_copy(&ppenumpunks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddItemToSession<Impl: ISyncMgrSyncCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszitemid: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddItemToSession(&*(&pszitemid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddIUnknownToSession<Impl: ISyncMgrSyncCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddIUnknownToSession(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ProposeItem<Impl: ISyncMgrSyncCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnewitem: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ProposeItem(&*(&pnewitem as *const <ISyncMgrSyncItem as ::windows::core::Abi>::Abi as *const <ISyncMgrSyncItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CommitItem<Impl: ISyncMgrSyncCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszitemid: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CommitItem(&*(&pszitemid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReportManualSync<Impl: ISyncMgrSyncCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReportManualSync() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ISyncMgrSyncCallback>,
            ::windows::core::GetTrustLevel,
            ReportProgress::<Impl, OFFSET>,
            SetHandlerProgressText::<Impl, OFFSET>,
            ReportEvent::<Impl, OFFSET>,
            CanContinue::<Impl, OFFSET>,
            QueryForAdditionalItems::<Impl, OFFSET>,
            AddItemToSession::<Impl, OFFSET>,
            AddIUnknownToSession::<Impl, OFFSET>,
            ProposeItem::<Impl, OFFSET>,
            CommitItem::<Impl, OFFSET>,
            ReportManualSync::<Impl, OFFSET>,
        )
    }
}
pub trait ISyncMgrSyncItemImpl: Sized {
    fn GetItemID();
    fn GetName();
    fn GetItemInfo();
    fn GetObject();
    fn GetCapabilities();
    fn GetPolicies();
    fn Enable();
    fn Delete();
}
impl ::windows::core::RuntimeName for ISyncMgrSyncItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrSyncItem";
}
impl ISyncMgrSyncItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrSyncItemImpl, const OFFSET: isize>() -> ISyncMgrSyncItemVtbl {
        unsafe extern "system" fn GetItemID<Impl: ISyncMgrSyncItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszitemid: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemID(::core::mem::transmute_copy(&ppszitemid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetName<Impl: ISyncMgrSyncItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszname: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&ppszname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemInfo<Impl: ISyncMgrSyncItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppiteminfo: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemInfo(::core::mem::transmute_copy(&ppiteminfo)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetObject<Impl: ISyncMgrSyncItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rguidobjectid: *const ::windows::core::GUID, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetObject(&*(&rguidobjectid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCapabilities<Impl: ISyncMgrSyncItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmcapabilities: *mut SYNCMGR_ITEM_CAPABILITIES) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCapabilities(::core::mem::transmute_copy(&pmcapabilities)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPolicies<Impl: ISyncMgrSyncItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmpolicies: *mut SYNCMGR_ITEM_POLICIES) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPolicies(::core::mem::transmute_copy(&pmpolicies)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Enable<Impl: ISyncMgrSyncItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Enable(&*(&fenable as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Delete<Impl: ISyncMgrSyncItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Delete() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrSyncItem>, ::windows::core::GetTrustLevel, GetItemID::<Impl, OFFSET>, GetName::<Impl, OFFSET>, GetItemInfo::<Impl, OFFSET>, GetObject::<Impl, OFFSET>, GetCapabilities::<Impl, OFFSET>, GetPolicies::<Impl, OFFSET>, Enable::<Impl, OFFSET>, Delete::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrSyncItemContainerImpl: Sized {
    fn GetSyncItem();
    fn GetSyncItemEnumerator();
    fn GetSyncItemCount();
}
impl ::windows::core::RuntimeName for ISyncMgrSyncItemContainer {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrSyncItemContainer";
}
impl ISyncMgrSyncItemContainerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrSyncItemContainerImpl, const OFFSET: isize>() -> ISyncMgrSyncItemContainerVtbl {
        unsafe extern "system" fn GetSyncItem<Impl: ISyncMgrSyncItemContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszitemid: super::super::Foundation::PWSTR, ppitem: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSyncItem(&*(&pszitemid as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppitem)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSyncItemEnumerator<Impl: ISyncMgrSyncItemContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSyncItemEnumerator(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSyncItemCount<Impl: ISyncMgrSyncItemContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcitems: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetSyncItemCount(::core::mem::transmute_copy(&pcitems)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrSyncItemContainer>, ::windows::core::GetTrustLevel, GetSyncItem::<Impl, OFFSET>, GetSyncItemEnumerator::<Impl, OFFSET>, GetSyncItemCount::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrSyncItemInfoImpl: Sized {
    fn GetTypeLabel();
    fn GetComment();
    fn GetLastSyncTime();
    fn IsEnabled();
    fn IsConnected();
}
impl ::windows::core::RuntimeName for ISyncMgrSyncItemInfo {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrSyncItemInfo";
}
impl ISyncMgrSyncItemInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrSyncItemInfoImpl, const OFFSET: isize>() -> ISyncMgrSyncItemInfoVtbl {
        unsafe extern "system" fn GetTypeLabel<Impl: ISyncMgrSyncItemInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsztypelabel: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTypeLabel(::core::mem::transmute_copy(&ppsztypelabel)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetComment<Impl: ISyncMgrSyncItemInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszcomment: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetComment(::core::mem::transmute_copy(&ppszcomment)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLastSyncTime<Impl: ISyncMgrSyncItemInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pftlastsync: *mut super::super::Foundation::FILETIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLastSyncTime(::core::mem::transmute_copy(&pftlastsync)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsEnabled<Impl: ISyncMgrSyncItemInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsEnabled() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsConnected<Impl: ISyncMgrSyncItemInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsConnected() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrSyncItemInfo>, ::windows::core::GetTrustLevel, GetTypeLabel::<Impl, OFFSET>, GetComment::<Impl, OFFSET>, GetLastSyncTime::<Impl, OFFSET>, IsEnabled::<Impl, OFFSET>, IsConnected::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrSyncResultImpl: Sized {
    fn Result();
}
impl ::windows::core::RuntimeName for ISyncMgrSyncResult {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrSyncResult";
}
impl ISyncMgrSyncResultVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrSyncResultImpl, const OFFSET: isize>() -> ISyncMgrSyncResultVtbl {
        unsafe extern "system" fn Result<Impl: ISyncMgrSyncResultImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, nstatus: SYNCMGR_PROGRESS_STATUS, cerror: u32, cconflicts: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Result(nstatus, cerror, cconflicts) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrSyncResult>, ::windows::core::GetTrustLevel, Result::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrSynchronizeImpl: Sized {
    fn Initialize();
    fn GetHandlerInfo();
    fn EnumSyncMgrItems();
    fn GetItemObject();
    fn ShowProperties();
    fn SetProgressCallback();
    fn PrepareForSync();
    fn Synchronize();
    fn SetItemStatus();
    fn ShowError();
}
impl ::windows::core::RuntimeName for ISyncMgrSynchronize {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrSynchronize";
}
impl ISyncMgrSynchronizeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrSynchronizeImpl, const OFFSET: isize>() -> ISyncMgrSynchronizeVtbl {
        unsafe extern "system" fn Initialize<Impl: ISyncMgrSynchronizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwreserved: u32, dwsyncmgrflags: u32, cbcookie: u32, lpcookie: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Initialize(dwreserved, dwsyncmgrflags, cbcookie, lpcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetHandlerInfo<Impl: ISyncMgrSynchronizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsyncmgrhandlerinfo: *mut *mut SYNCMGRHANDLERINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetHandlerInfo(::core::mem::transmute_copy(&ppsyncmgrhandlerinfo)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumSyncMgrItems<Impl: ISyncMgrSynchronizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsyncmgrenumitems: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumSyncMgrItems(::core::mem::transmute_copy(&ppsyncmgrenumitems)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemObject<Impl: ISyncMgrSynchronizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, itemid: *const ::windows::core::GUID, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemObject(&*(&itemid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShowProperties<Impl: ISyncMgrSynchronizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, itemid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowProperties(&*(&hwndparent as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&itemid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProgressCallback<Impl: ISyncMgrSynchronizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpcallback: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetProgressCallback(&*(&lpcallback as *const <ISyncMgrSynchronizeCallback as ::windows::core::Abi>::Abi as *const <ISyncMgrSynchronizeCallback as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PrepareForSync<Impl: ISyncMgrSynchronizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cbnumitems: u32, pitemids: *const ::windows::core::GUID, hwndparent: super::super::Foundation::HWND, dwreserved: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PrepareForSync(cbnumitems, &*(&pitemids as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&hwndparent as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), dwreserved) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Synchronize<Impl: ISyncMgrSynchronizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Synchronize(&*(&hwndparent as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetItemStatus<Impl: ISyncMgrSynchronizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pitemid: *const ::windows::core::GUID, dwsyncmgrstatus: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetItemStatus(&*(&pitemid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), dwsyncmgrstatus) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShowError<Impl: ISyncMgrSynchronizeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, errorid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowError(&*(&hwndparent as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&errorid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ISyncMgrSynchronize>,
            ::windows::core::GetTrustLevel,
            Initialize::<Impl, OFFSET>,
            GetHandlerInfo::<Impl, OFFSET>,
            EnumSyncMgrItems::<Impl, OFFSET>,
            GetItemObject::<Impl, OFFSET>,
            ShowProperties::<Impl, OFFSET>,
            SetProgressCallback::<Impl, OFFSET>,
            PrepareForSync::<Impl, OFFSET>,
            Synchronize::<Impl, OFFSET>,
            SetItemStatus::<Impl, OFFSET>,
            ShowError::<Impl, OFFSET>,
        )
    }
}
pub trait ISyncMgrSynchronizeCallbackImpl: Sized {
    fn ShowPropertiesCompleted();
    fn PrepareForSyncCompleted();
    fn SynchronizeCompleted();
    fn ShowErrorCompleted();
    fn EnableModeless();
    fn Progress();
    fn LogError();
    fn DeleteLogError();
    fn EstablishConnection();
}
impl ::windows::core::RuntimeName for ISyncMgrSynchronizeCallback {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrSynchronizeCallback";
}
impl ISyncMgrSynchronizeCallbackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrSynchronizeCallbackImpl, const OFFSET: isize>() -> ISyncMgrSynchronizeCallbackVtbl {
        unsafe extern "system" fn ShowPropertiesCompleted<Impl: ISyncMgrSynchronizeCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hr: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowPropertiesCompleted(hr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PrepareForSyncCompleted<Impl: ISyncMgrSynchronizeCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hr: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PrepareForSyncCompleted(hr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SynchronizeCompleted<Impl: ISyncMgrSynchronizeCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hr: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SynchronizeCompleted(hr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShowErrorCompleted<Impl: ISyncMgrSynchronizeCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hr: ::windows::core::HRESULT, citems: u32, pitemids: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowErrorCompleted(hr, citems, &*(&pitemids as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnableModeless<Impl: ISyncMgrSynchronizeCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnableModeless(&*(&fenable as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Progress<Impl: ISyncMgrSynchronizeCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, itemid: *const ::windows::core::GUID, psyncprogressitem: *const SYNCMGRPROGRESSITEM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Progress(&*(&itemid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&psyncprogressitem as *const <SYNCMGRPROGRESSITEM as ::windows::core::Abi>::Abi as *const <SYNCMGRPROGRESSITEM as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LogError<Impl: ISyncMgrSynchronizeCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwerrorlevel: u32, pszerrortext: super::super::Foundation::PWSTR, psynclogerror: *const SYNCMGRLOGERRORINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).LogError(dwerrorlevel, &*(&pszerrortext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&psynclogerror as *const <SYNCMGRLOGERRORINFO as ::windows::core::Abi>::Abi as *const <SYNCMGRLOGERRORINFO as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DeleteLogError<Impl: ISyncMgrSynchronizeCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, errorid: *const ::windows::core::GUID, dwreserved: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DeleteLogError(&*(&errorid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), dwreserved) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EstablishConnection<Impl: ISyncMgrSynchronizeCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszconnection: super::super::Foundation::PWSTR, dwreserved: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EstablishConnection(&*(&pwszconnection as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwreserved) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ISyncMgrSynchronizeCallback>,
            ::windows::core::GetTrustLevel,
            ShowPropertiesCompleted::<Impl, OFFSET>,
            PrepareForSyncCompleted::<Impl, OFFSET>,
            SynchronizeCompleted::<Impl, OFFSET>,
            ShowErrorCompleted::<Impl, OFFSET>,
            EnableModeless::<Impl, OFFSET>,
            Progress::<Impl, OFFSET>,
            LogError::<Impl, OFFSET>,
            DeleteLogError::<Impl, OFFSET>,
            EstablishConnection::<Impl, OFFSET>,
        )
    }
}
pub trait ISyncMgrSynchronizeInvokeImpl: Sized {
    fn UpdateItems();
    fn UpdateAll();
}
impl ::windows::core::RuntimeName for ISyncMgrSynchronizeInvoke {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrSynchronizeInvoke";
}
impl ISyncMgrSynchronizeInvokeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrSynchronizeInvokeImpl, const OFFSET: isize>() -> ISyncMgrSynchronizeInvokeVtbl {
        unsafe extern "system" fn UpdateItems<Impl: ISyncMgrSynchronizeInvokeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwinvokeflags: u32, clsid: *const ::windows::core::GUID, cbcookie: u32, pcookie: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateItems(dwinvokeflags, &*(&clsid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), cbcookie, pcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateAll<Impl: ISyncMgrSynchronizeInvokeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateAll() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrSynchronizeInvoke>, ::windows::core::GetTrustLevel, UpdateItems::<Impl, OFFSET>, UpdateAll::<Impl, OFFSET>)
    }
}
pub trait ISyncMgrUIOperationImpl: Sized {
    fn Run();
}
impl ::windows::core::RuntimeName for ISyncMgrUIOperation {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ISyncMgrUIOperation";
}
impl ISyncMgrUIOperationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISyncMgrUIOperationImpl, const OFFSET: isize>() -> ISyncMgrUIOperationVtbl {
        unsafe extern "system" fn Run<Impl: ISyncMgrUIOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Run(&*(&hwndowner as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ISyncMgrUIOperation>, ::windows::core::GetTrustLevel, Run::<Impl, OFFSET>)
    }
}
pub trait ITaskbarListImpl: Sized {
    fn HrInit();
    fn AddTab();
    fn DeleteTab();
    fn ActivateTab();
    fn SetActiveAlt();
}
impl ::windows::core::RuntimeName for ITaskbarList {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITaskbarList";
}
impl ITaskbarListVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITaskbarListImpl, const OFFSET: isize>() -> ITaskbarListVtbl {
        unsafe extern "system" fn HrInit<Impl: ITaskbarListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HrInit() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddTab<Impl: ITaskbarListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddTab(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DeleteTab<Impl: ITaskbarListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DeleteTab(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ActivateTab<Impl: ITaskbarListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ActivateTab(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetActiveAlt<Impl: ITaskbarListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetActiveAlt(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ITaskbarList>, ::windows::core::GetTrustLevel, HrInit::<Impl, OFFSET>, AddTab::<Impl, OFFSET>, DeleteTab::<Impl, OFFSET>, ActivateTab::<Impl, OFFSET>, SetActiveAlt::<Impl, OFFSET>)
    }
}
pub trait ITaskbarList2Impl: Sized + ITaskbarListImpl {
    fn MarkFullscreenWindow();
}
impl ::windows::core::RuntimeName for ITaskbarList2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITaskbarList2";
}
impl ITaskbarList2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITaskbarList2Impl, const OFFSET: isize>() -> ITaskbarList2Vtbl {
        unsafe extern "system" fn MarkFullscreenWindow<Impl: ITaskbarList2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, ffullscreen: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MarkFullscreenWindow(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&ffullscreen as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ITaskbarList2>, ::windows::core::GetTrustLevel, MarkFullscreenWindow::<Impl, OFFSET>)
    }
}
pub trait ITaskbarList3Impl: Sized + ITaskbarList2Impl + ITaskbarListImpl {
    fn SetProgressValue();
    fn SetProgressState();
    fn RegisterTab();
    fn UnregisterTab();
    fn SetTabOrder();
    fn SetTabActive();
    fn ThumbBarAddButtons();
    fn ThumbBarUpdateButtons();
    fn ThumbBarSetImageList();
    fn SetOverlayIcon();
    fn SetThumbnailTooltip();
    fn SetThumbnailClip();
}
impl ::windows::core::RuntimeName for ITaskbarList3 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITaskbarList3";
}
impl ITaskbarList3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITaskbarList3Impl, const OFFSET: isize>() -> ITaskbarList3Vtbl {
        unsafe extern "system" fn SetProgressValue<Impl: ITaskbarList3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, ullcompleted: u64, ulltotal: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetProgressValue(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), ullcompleted, ulltotal) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProgressState<Impl: ITaskbarList3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, tbpflags: TBPFLAG) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetProgressState(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), tbpflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterTab<Impl: ITaskbarList3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndtab: super::super::Foundation::HWND, hwndmdi: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RegisterTab(&*(&hwndtab as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&hwndmdi as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnregisterTab<Impl: ITaskbarList3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndtab: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UnregisterTab(&*(&hwndtab as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTabOrder<Impl: ITaskbarList3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndtab: super::super::Foundation::HWND, hwndinsertbefore: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTabOrder(&*(&hwndtab as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&hwndinsertbefore as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTabActive<Impl: ITaskbarList3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndtab: super::super::Foundation::HWND, hwndmdi: super::super::Foundation::HWND, dwreserved: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTabActive(&*(&hwndtab as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&hwndmdi as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), dwreserved) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ThumbBarAddButtons<Impl: ITaskbarList3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, cbuttons: u32, pbutton: *const THUMBBUTTON) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ThumbBarAddButtons(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), cbuttons, &*(&pbutton as *const <THUMBBUTTON as ::windows::core::Abi>::Abi as *const <THUMBBUTTON as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ThumbBarUpdateButtons<Impl: ITaskbarList3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, cbuttons: u32, pbutton: *const THUMBBUTTON) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ThumbBarUpdateButtons(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), cbuttons, &*(&pbutton as *const <THUMBBUTTON as ::windows::core::Abi>::Abi as *const <THUMBBUTTON as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ThumbBarSetImageList<Impl: ITaskbarList3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, himl: super::Controls::HIMAGELIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ThumbBarSetImageList(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&himl as *const <super::Controls::HIMAGELIST as ::windows::core::Abi>::Abi as *const <super::Controls::HIMAGELIST as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOverlayIcon<Impl: ITaskbarList3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, hicon: super::WindowsAndMessaging::HICON, pszdescription: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetOverlayIcon(
                &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&hicon as *const <super::WindowsAndMessaging::HICON as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::HICON as ::windows::core::DefaultType>::DefaultType),
                &*(&pszdescription as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetThumbnailTooltip<Impl: ITaskbarList3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, psztip: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetThumbnailTooltip(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&psztip as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetThumbnailClip<Impl: ITaskbarList3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, prcclip: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetThumbnailClip(&*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&prcclip as *const <super::super::Foundation::RECT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ITaskbarList3>,
            ::windows::core::GetTrustLevel,
            SetProgressValue::<Impl, OFFSET>,
            SetProgressState::<Impl, OFFSET>,
            RegisterTab::<Impl, OFFSET>,
            UnregisterTab::<Impl, OFFSET>,
            SetTabOrder::<Impl, OFFSET>,
            SetTabActive::<Impl, OFFSET>,
            ThumbBarAddButtons::<Impl, OFFSET>,
            ThumbBarUpdateButtons::<Impl, OFFSET>,
            ThumbBarSetImageList::<Impl, OFFSET>,
            SetOverlayIcon::<Impl, OFFSET>,
            SetThumbnailTooltip::<Impl, OFFSET>,
            SetThumbnailClip::<Impl, OFFSET>,
        )
    }
}
pub trait ITaskbarList4Impl: Sized + ITaskbarList3Impl + ITaskbarList2Impl + ITaskbarListImpl {
    fn SetTabProperties();
}
impl ::windows::core::RuntimeName for ITaskbarList4 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITaskbarList4";
}
impl ITaskbarList4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITaskbarList4Impl, const OFFSET: isize>() -> ITaskbarList4Vtbl {
        unsafe extern "system" fn SetTabProperties<Impl: ITaskbarList4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndtab: super::super::Foundation::HWND, stpflags: STPFLAG) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTabProperties(&*(&hwndtab as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), stpflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ITaskbarList4>, ::windows::core::GetTrustLevel, SetTabProperties::<Impl, OFFSET>)
    }
}
pub trait IThumbnailCacheImpl: Sized {
    fn GetThumbnail();
    fn GetThumbnailByID();
}
impl ::windows::core::RuntimeName for IThumbnailCache {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IThumbnailCache";
}
impl IThumbnailCacheVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IThumbnailCacheImpl, const OFFSET: isize>() -> IThumbnailCacheVtbl {
        unsafe extern "system" fn GetThumbnail<Impl: IThumbnailCacheImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pshellitem: ::windows::core::RawPtr, cxyrequestedthumbsize: u32, flags: WTS_FLAGS, ppvthumb: *mut ::windows::core::RawPtr, poutflags: *mut WTS_CACHEFLAGS, pthumbnailid: *mut WTS_THUMBNAILID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThumbnail(&*(&pshellitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), cxyrequestedthumbsize, flags, ::core::mem::transmute_copy(&ppvthumb), ::core::mem::transmute_copy(&poutflags), ::core::mem::transmute_copy(&pthumbnailid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThumbnailByID<Impl: IThumbnailCacheImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, thumbnailid: WTS_THUMBNAILID, cxyrequestedthumbsize: u32, ppvthumb: *mut ::windows::core::RawPtr, poutflags: *mut WTS_CACHEFLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThumbnailByID(&*(&thumbnailid as *const <WTS_THUMBNAILID as ::windows::core::Abi>::Abi as *const <WTS_THUMBNAILID as ::windows::core::DefaultType>::DefaultType), cxyrequestedthumbsize, ::core::mem::transmute_copy(&ppvthumb), ::core::mem::transmute_copy(&poutflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IThumbnailCache>, ::windows::core::GetTrustLevel, GetThumbnail::<Impl, OFFSET>, GetThumbnailByID::<Impl, OFFSET>)
    }
}
pub trait IThumbnailCachePrimerImpl: Sized {
    fn PageInThumbnail();
}
impl ::windows::core::RuntimeName for IThumbnailCachePrimer {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IThumbnailCachePrimer";
}
impl IThumbnailCachePrimerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IThumbnailCachePrimerImpl, const OFFSET: isize>() -> IThumbnailCachePrimerVtbl {
        unsafe extern "system" fn PageInThumbnail<Impl: IThumbnailCachePrimerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, wtsflags: WTS_FLAGS, cxyrequestedthumbsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PageInThumbnail(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), wtsflags, cxyrequestedthumbsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IThumbnailCachePrimer>, ::windows::core::GetTrustLevel, PageInThumbnail::<Impl, OFFSET>)
    }
}
pub trait IThumbnailCaptureImpl: Sized {
    fn CaptureThumbnail();
}
impl ::windows::core::RuntimeName for IThumbnailCapture {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IThumbnailCapture";
}
impl IThumbnailCaptureVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IThumbnailCaptureImpl, const OFFSET: isize>() -> IThumbnailCaptureVtbl {
        unsafe extern "system" fn CaptureThumbnail<Impl: IThumbnailCaptureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmaxsize: *const super::super::Foundation::SIZE, phtmldoc2: *mut ::core::ffi::c_void, phbmthumbnail: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CaptureThumbnail(&*(&pmaxsize as *const <super::super::Foundation::SIZE as ::windows::core::Abi>::Abi as *const <super::super::Foundation::SIZE as ::windows::core::DefaultType>::DefaultType), &*(&phtmldoc2 as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&phbmthumbnail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IThumbnailCapture>, ::windows::core::GetTrustLevel, CaptureThumbnail::<Impl, OFFSET>)
    }
}
pub trait IThumbnailHandlerFactoryImpl: Sized {
    fn GetThumbnailHandler();
}
impl ::windows::core::RuntimeName for IThumbnailHandlerFactory {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IThumbnailHandlerFactory";
}
impl IThumbnailHandlerFactoryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IThumbnailHandlerFactoryImpl, const OFFSET: isize>() -> IThumbnailHandlerFactoryVtbl {
        unsafe extern "system" fn GetThumbnailHandler<Impl: IThumbnailHandlerFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidlchild: *const Common::ITEMIDLIST, pbc: ::windows::core::RawPtr, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThumbnailHandler(
                &*(&pidlchild as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType),
                &*(&pbc as *const <super::super::System::Com::IBindCtx as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindCtx as ::windows::core::DefaultType>::DefaultType),
                &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppv),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IThumbnailHandlerFactory>, ::windows::core::GetTrustLevel, GetThumbnailHandler::<Impl, OFFSET>)
    }
}
pub trait IThumbnailProviderImpl: Sized {
    fn GetThumbnail();
}
impl ::windows::core::RuntimeName for IThumbnailProvider {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IThumbnailProvider";
}
impl IThumbnailProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IThumbnailProviderImpl, const OFFSET: isize>() -> IThumbnailProviderVtbl {
        unsafe extern "system" fn GetThumbnail<Impl: IThumbnailProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cx: u32, phbmp: *mut super::super::Graphics::Gdi::HBITMAP, pdwalpha: *mut WTS_ALPHATYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThumbnail(cx, ::core::mem::transmute_copy(&phbmp), ::core::mem::transmute_copy(&pdwalpha)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IThumbnailProvider>, ::windows::core::GetTrustLevel, GetThumbnail::<Impl, OFFSET>)
    }
}
pub trait IThumbnailSettingsImpl: Sized {
    fn SetContext();
}
impl ::windows::core::RuntimeName for IThumbnailSettings {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IThumbnailSettings";
}
impl IThumbnailSettingsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IThumbnailSettingsImpl, const OFFSET: isize>() -> IThumbnailSettingsVtbl {
        unsafe extern "system" fn SetContext<Impl: IThumbnailSettingsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcontext: WTS_CONTEXTFLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetContext(dwcontext) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IThumbnailSettings>, ::windows::core::GetTrustLevel, SetContext::<Impl, OFFSET>)
    }
}
pub trait IThumbnailStreamCacheImpl: Sized {
    fn GetThumbnailStream();
    fn SetThumbnailStream();
}
impl ::windows::core::RuntimeName for IThumbnailStreamCache {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IThumbnailStreamCache";
}
impl IThumbnailStreamCacheVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IThumbnailStreamCacheImpl, const OFFSET: isize>() -> IThumbnailStreamCacheVtbl {
        unsafe extern "system" fn GetThumbnailStream<Impl: IThumbnailStreamCacheImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::Foundation::PWSTR, cacheid: u64, options: ThumbnailStreamCacheOptions, requestedthumbnailsize: u32, thumbnailsize: *mut super::super::Foundation::SIZE, thumbnailstream: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetThumbnailStream(&*(&path as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), cacheid, options, requestedthumbnailsize, ::core::mem::transmute_copy(&thumbnailsize), ::core::mem::transmute_copy(&thumbnailstream)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetThumbnailStream<Impl: IThumbnailStreamCacheImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::Foundation::PWSTR, cacheid: u64, thumbnailsize: super::super::Foundation::SIZE, thumbnailstream: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetThumbnailStream(
                &*(&path as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                cacheid,
                &*(&thumbnailsize as *const <super::super::Foundation::SIZE as ::windows::core::Abi>::Abi as *const <super::super::Foundation::SIZE as ::windows::core::DefaultType>::DefaultType),
                &*(&thumbnailstream as *const <super::super::System::Com::IStream as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IStream as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IThumbnailStreamCache>, ::windows::core::GetTrustLevel, GetThumbnailStream::<Impl, OFFSET>, SetThumbnailStream::<Impl, OFFSET>)
    }
}
pub trait ITrackShellMenuImpl: Sized + IShellMenuImpl {
    fn SetObscured();
    fn Popup();
}
impl ::windows::core::RuntimeName for ITrackShellMenu {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITrackShellMenu";
}
impl ITrackShellMenuVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITrackShellMenuImpl, const OFFSET: isize>() -> ITrackShellMenuVtbl {
        unsafe extern "system" fn SetObscured<Impl: ITrackShellMenuImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndtb: super::super::Foundation::HWND, punkband: *mut ::core::ffi::c_void, dwsmsetflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetObscured(&*(&hwndtb as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&punkband as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), dwsmsetflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Popup<Impl: ITrackShellMenuImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, ppt: *mut super::super::Foundation::POINTL, prcexclude: *mut super::super::Foundation::RECTL, dwflags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Popup(
                &*(&hwnd as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType),
                &*(&ppt as *const <super::super::Foundation::POINTL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINTL as ::windows::core::DefaultType>::DefaultType),
                &*(&prcexclude as *const <super::super::Foundation::RECTL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::RECTL as ::windows::core::DefaultType>::DefaultType),
                dwflags,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ITrackShellMenu>, ::windows::core::GetTrustLevel, SetObscured::<Impl, OFFSET>, Popup::<Impl, OFFSET>)
    }
}
pub trait ITranscodeImageImpl: Sized {
    fn TranscodeImage();
}
impl ::windows::core::RuntimeName for ITranscodeImage {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITranscodeImage";
}
impl ITranscodeImageVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITranscodeImageImpl, const OFFSET: isize>() -> ITranscodeImageVtbl {
        unsafe extern "system" fn TranscodeImage<Impl: ITranscodeImageImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pshellitem: ::windows::core::RawPtr, uimaxwidth: u32, uimaxheight: u32, flags: u32, pvimage: ::windows::core::RawPtr, puiwidth: *mut u32, puiheight: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TranscodeImage(&*(&pshellitem as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), uimaxwidth, uimaxheight, flags, &*(&pvimage as *const <super::super::System::Com::IStream as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IStream as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&puiwidth), ::core::mem::transmute_copy(&puiheight)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ITranscodeImage>, ::windows::core::GetTrustLevel, TranscodeImage::<Impl, OFFSET>)
    }
}
pub trait ITransferAdviseSinkImpl: Sized {
    fn UpdateProgress();
    fn UpdateTransferState();
    fn ConfirmOverwrite();
    fn ConfirmEncryptionLoss();
    fn FileFailure();
    fn SubStreamFailure();
    fn PropertyFailure();
}
impl ::windows::core::RuntimeName for ITransferAdviseSink {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITransferAdviseSink";
}
impl ITransferAdviseSinkVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITransferAdviseSinkImpl, const OFFSET: isize>() -> ITransferAdviseSinkVtbl {
        unsafe extern "system" fn UpdateProgress<Impl: ITransferAdviseSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ullsizecurrent: u64, ullsizetotal: u64, nfilescurrent: i32, nfilestotal: i32, nfolderscurrent: i32, nfolderstotal: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateProgress(ullsizecurrent, ullsizetotal, nfilescurrent, nfilestotal, nfolderscurrent, nfolderstotal) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateTransferState<Impl: ITransferAdviseSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ts: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateTransferState(ts) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConfirmOverwrite<Impl: ITransferAdviseSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psisource: ::windows::core::RawPtr, psidestparent: ::windows::core::RawPtr, pszname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ConfirmOverwrite(&*(&psisource as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psidestparent as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&pszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConfirmEncryptionLoss<Impl: ITransferAdviseSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psisource: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ConfirmEncryptionLoss(&*(&psisource as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FileFailure<Impl: ITransferAdviseSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, pszitem: super::super::Foundation::PWSTR, hrerror: ::windows::core::HRESULT, pszrename: super::super::Foundation::PWSTR, cchrename: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FileFailure(
                &*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&pszitem as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                hrerror,
                &*(&pszrename as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                cchrename,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SubStreamFailure<Impl: ITransferAdviseSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, pszstreamname: super::super::Foundation::PWSTR, hrerror: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SubStreamFailure(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&pszstreamname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), hrerror) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PropertyFailure<Impl: ITransferAdviseSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, pkey: *const PropertiesSystem::PROPERTYKEY, hrerror: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PropertyFailure(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&pkey as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::Abi>::Abi as *const <PropertiesSystem::PROPERTYKEY as ::windows::core::DefaultType>::DefaultType), hrerror) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ITransferAdviseSink>,
            ::windows::core::GetTrustLevel,
            UpdateProgress::<Impl, OFFSET>,
            UpdateTransferState::<Impl, OFFSET>,
            ConfirmOverwrite::<Impl, OFFSET>,
            ConfirmEncryptionLoss::<Impl, OFFSET>,
            FileFailure::<Impl, OFFSET>,
            SubStreamFailure::<Impl, OFFSET>,
            PropertyFailure::<Impl, OFFSET>,
        )
    }
}
pub trait ITransferDestinationImpl: Sized {
    fn Advise();
    fn Unadvise();
    fn CreateItem();
}
impl ::windows::core::RuntimeName for ITransferDestination {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITransferDestination";
}
impl ITransferDestinationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITransferDestinationImpl, const OFFSET: isize>() -> ITransferDestinationVtbl {
        unsafe extern "system" fn Advise<Impl: ITransferDestinationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psink: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Advise(&*(&psink as *const <ITransferAdviseSink as ::windows::core::Abi>::Abi as *const <ITransferAdviseSink as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Unadvise<Impl: ITransferDestinationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Unadvise(dwcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateItem<Impl: ITransferDestinationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::Foundation::PWSTR, dwattributes: u32, ullsize: u64, flags: u32, riiditem: *const ::windows::core::GUID, ppvitem: *mut *mut ::core::ffi::c_void, riidresources: *const ::windows::core::GUID, ppvresources: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateItem(
                &*(&pszname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwattributes,
                ullsize,
                flags,
                &*(&riiditem as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppvitem),
                &*(&riidresources as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppvresources),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ITransferDestination>, ::windows::core::GetTrustLevel, Advise::<Impl, OFFSET>, Unadvise::<Impl, OFFSET>, CreateItem::<Impl, OFFSET>)
    }
}
pub trait ITransferMediumItemImpl: Sized + IRelatedItemImpl {}
impl ::windows::core::RuntimeName for ITransferMediumItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITransferMediumItem";
}
impl ITransferMediumItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITransferMediumItemImpl, const OFFSET: isize>() -> ITransferMediumItemVtbl {
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ITransferMediumItem>, ::windows::core::GetTrustLevel)
    }
}
pub trait ITransferSourceImpl: Sized {
    fn Advise();
    fn Unadvise();
    fn SetProperties();
    fn OpenItem();
    fn MoveItem();
    fn RecycleItem();
    fn RemoveItem();
    fn RenameItem();
    fn LinkItem();
    fn ApplyPropertiesToItem();
    fn GetDefaultDestinationName();
    fn EnterFolder();
    fn LeaveFolder();
}
impl ::windows::core::RuntimeName for ITransferSource {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITransferSource";
}
impl ITransferSourceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITransferSourceImpl, const OFFSET: isize>() -> ITransferSourceVtbl {
        unsafe extern "system" fn Advise<Impl: ITransferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psink: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Advise(&*(&psink as *const <ITransferAdviseSink as ::windows::core::Abi>::Abi as *const <ITransferAdviseSink as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Unadvise<Impl: ITransferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Unadvise(dwcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProperties<Impl: ITransferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pproparray: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetProperties(&*(&pproparray as *const <PropertiesSystem::IPropertyChangeArray as ::windows::core::Abi>::Abi as *const <PropertiesSystem::IPropertyChangeArray as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenItem<Impl: ITransferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, flags: u32, riid: *const ::windows::core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OpenItem(&*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), flags, &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppv)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MoveItem<Impl: ITransferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psi: ::windows::core::RawPtr, psiparentdst: ::windows::core::RawPtr, psznamedst: super::super::Foundation::PWSTR, flags: u32, ppsinew: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MoveItem(
                &*(&psi as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&psiparentdst as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&psznamedst as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                flags,
                ::core::mem::transmute_copy(&ppsinew),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RecycleItem<Impl: ITransferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psisource: ::windows::core::RawPtr, psiparentdest: ::windows::core::RawPtr, flags: u32, ppsinewdest: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RecycleItem(&*(&psisource as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psiparentdest as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&ppsinewdest)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveItem<Impl: ITransferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psisource: ::windows::core::RawPtr, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveItem(&*(&psisource as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RenameItem<Impl: ITransferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psisource: ::windows::core::RawPtr, psznewname: super::super::Foundation::PWSTR, flags: u32, ppsinewdest: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RenameItem(&*(&psisource as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psznewname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&ppsinewdest)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LinkItem<Impl: ITransferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psisource: ::windows::core::RawPtr, psiparentdest: ::windows::core::RawPtr, psznewname: super::super::Foundation::PWSTR, flags: u32, ppsinewdest: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).LinkItem(
                &*(&psisource as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&psiparentdest as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType),
                &*(&psznewname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                flags,
                ::core::mem::transmute_copy(&ppsinewdest),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ApplyPropertiesToItem<Impl: ITransferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psisource: ::windows::core::RawPtr, ppsinew: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ApplyPropertiesToItem(&*(&psisource as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppsinew)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDefaultDestinationName<Impl: ITransferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psisource: ::windows::core::RawPtr, psiparentdest: ::windows::core::RawPtr, ppszdestinationname: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetDefaultDestinationName(&*(&psisource as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), &*(&psiparentdest as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppszdestinationname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnterFolder<Impl: ITransferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psichildfolderdest: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnterFolder(&*(&psichildfolderdest as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LeaveFolder<Impl: ITransferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psichildfolderdest: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).LeaveFolder(&*(&psichildfolderdest as *const <IShellItem as ::windows::core::Abi>::Abi as *const <IShellItem as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ITransferSource>,
            ::windows::core::GetTrustLevel,
            Advise::<Impl, OFFSET>,
            Unadvise::<Impl, OFFSET>,
            SetProperties::<Impl, OFFSET>,
            OpenItem::<Impl, OFFSET>,
            MoveItem::<Impl, OFFSET>,
            RecycleItem::<Impl, OFFSET>,
            RemoveItem::<Impl, OFFSET>,
            RenameItem::<Impl, OFFSET>,
            LinkItem::<Impl, OFFSET>,
            ApplyPropertiesToItem::<Impl, OFFSET>,
            GetDefaultDestinationName::<Impl, OFFSET>,
            EnterFolder::<Impl, OFFSET>,
            LeaveFolder::<Impl, OFFSET>,
        )
    }
}
pub trait ITravelEntryImpl: Sized {
    fn Invoke();
    fn Update();
    fn GetPidl();
}
impl ::windows::core::RuntimeName for ITravelEntry {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITravelEntry";
}
impl ITravelEntryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITravelEntryImpl, const OFFSET: isize>() -> ITravelEntryVtbl {
        unsafe extern "system" fn Invoke<Impl: ITravelEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Invoke(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Update<Impl: ITravelEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, fislocalanchor: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Update(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&fislocalanchor as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPidl<Impl: ITravelEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPidl(::core::mem::transmute_copy(&ppidl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ITravelEntry>, ::windows::core::GetTrustLevel, Invoke::<Impl, OFFSET>, Update::<Impl, OFFSET>, GetPidl::<Impl, OFFSET>)
    }
}
pub trait ITravelLogImpl: Sized {
    fn AddEntry();
    fn UpdateEntry();
    fn UpdateExternal();
    fn Travel();
    fn GetTravelEntry();
    fn FindTravelEntry();
    fn GetToolTipText();
    fn InsertMenuEntries();
    fn Clone();
    fn CountEntries();
    fn Revert();
}
impl ::windows::core::RuntimeName for ITravelLog {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITravelLog";
}
impl ITravelLogVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITravelLogImpl, const OFFSET: isize>() -> ITravelLogVtbl {
        unsafe extern "system" fn AddEntry<Impl: ITravelLogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, fislocalanchor: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddEntry(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&fislocalanchor as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateEntry<Impl: ITravelLogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, fislocalanchor: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateEntry(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&fislocalanchor as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateExternal<Impl: ITravelLogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, punkhlbrowsecontext: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).UpdateExternal(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&punkhlbrowsecontext as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Travel<Impl: ITravelLogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, ioffset: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Travel(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), ioffset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTravelEntry<Impl: ITravelLogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, ioffset: i32, ppte: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTravelEntry(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), ioffset, ::core::mem::transmute_copy(&ppte)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindTravelEntry<Impl: ITravelLogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, ppte: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindTravelEntry(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&pidl as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppte)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetToolTipText<Impl: ITravelLogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, ioffset: i32, idstemplate: i32, pwztext: super::super::Foundation::PWSTR, cchtext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetToolTipText(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), ioffset, idstemplate, ::core::mem::transmute_copy(&pwztext), cchtext) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InsertMenuEntries<Impl: ITravelLogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, hmenu: super::WindowsAndMessaging::HMENU, npos: i32, idfirst: i32, idlast: i32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InsertMenuEntries(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&hmenu as *const <super::WindowsAndMessaging::HMENU as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::HMENU as ::windows::core::DefaultType>::DefaultType), npos, idfirst, idlast, dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: ITravelLogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptl: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&pptl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CountEntries<Impl: ITravelLogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> u32 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CountEntries(&*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Revert<Impl: ITravelLogImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Revert() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<ITravelLog>,
            ::windows::core::GetTrustLevel,
            AddEntry::<Impl, OFFSET>,
            UpdateEntry::<Impl, OFFSET>,
            UpdateExternal::<Impl, OFFSET>,
            Travel::<Impl, OFFSET>,
            GetTravelEntry::<Impl, OFFSET>,
            FindTravelEntry::<Impl, OFFSET>,
            GetToolTipText::<Impl, OFFSET>,
            InsertMenuEntries::<Impl, OFFSET>,
            Clone::<Impl, OFFSET>,
            CountEntries::<Impl, OFFSET>,
            Revert::<Impl, OFFSET>,
        )
    }
}
pub trait ITravelLogClientImpl: Sized {
    fn FindWindowByIndex();
    fn GetWindowData();
    fn LoadHistoryPosition();
}
impl ::windows::core::RuntimeName for ITravelLogClient {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITravelLogClient";
}
impl ITravelLogClientVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITravelLogClientImpl, const OFFSET: isize>() -> ITravelLogClientVtbl {
        unsafe extern "system" fn FindWindowByIndex<Impl: ITravelLogClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwid: u32, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindWindowByIndex(dwid, ::core::mem::transmute_copy(&ppunk)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindowData<Impl: ITravelLogClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstream: ::windows::core::RawPtr, pwindata: *mut WINDOWDATA) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetWindowData(&*(&pstream as *const <super::super::System::Com::IStream as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IStream as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pwindata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LoadHistoryPosition<Impl: ITravelLogClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszurllocation: super::super::Foundation::PWSTR, dwposition: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).LoadHistoryPosition(&*(&pszurllocation as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwposition) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ITravelLogClient>, ::windows::core::GetTrustLevel, FindWindowByIndex::<Impl, OFFSET>, GetWindowData::<Impl, OFFSET>, LoadHistoryPosition::<Impl, OFFSET>)
    }
}
pub trait ITravelLogEntryImpl: Sized {
    fn GetTitle();
    fn GetURL();
}
impl ::windows::core::RuntimeName for ITravelLogEntry {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITravelLogEntry";
}
impl ITravelLogEntryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITravelLogEntryImpl, const OFFSET: isize>() -> ITravelLogEntryVtbl {
        unsafe extern "system" fn GetTitle<Impl: ITravelLogEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsztitle: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetTitle(::core::mem::transmute_copy(&ppsztitle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetURL<Impl: ITravelLogEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszurl: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetURL(::core::mem::transmute_copy(&ppszurl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ITravelLogEntry>, ::windows::core::GetTrustLevel, GetTitle::<Impl, OFFSET>, GetURL::<Impl, OFFSET>)
    }
}
pub trait ITravelLogStgImpl: Sized {
    fn CreateEntry();
    fn TravelTo();
    fn EnumEntries();
    fn FindEntries();
    fn GetCount();
    fn RemoveEntry();
    fn GetRelativeEntry();
}
impl ::windows::core::RuntimeName for ITravelLogStg {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITravelLogStg";
}
impl ITravelLogStgVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITravelLogStgImpl, const OFFSET: isize>() -> ITravelLogStgVtbl {
        unsafe extern "system" fn CreateEntry<Impl: ITravelLogStgImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszurl: super::super::Foundation::PWSTR, psztitle: super::super::Foundation::PWSTR, ptlerelativeto: ::windows::core::RawPtr, fprepend: super::super::Foundation::BOOL, pptle: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).CreateEntry(
                &*(&pszurl as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&psztitle as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&ptlerelativeto as *const <ITravelLogEntry as ::windows::core::Abi>::Abi as *const <ITravelLogEntry as ::windows::core::DefaultType>::DefaultType),
                &*(&fprepend as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&pptle),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TravelTo<Impl: ITravelLogStgImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptle: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TravelTo(&*(&ptle as *const <ITravelLogEntry as ::windows::core::Abi>::Abi as *const <ITravelLogEntry as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumEntries<Impl: ITravelLogStgImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: TLENUMF, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).EnumEntries(flags, ::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindEntries<Impl: ITravelLogStgImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: TLENUMF, pszurl: super::super::Foundation::PWSTR, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FindEntries(flags, &*(&pszurl as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCount<Impl: ITravelLogStgImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: TLENUMF, pcentries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCount(flags, ::core::mem::transmute_copy(&pcentries)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveEntry<Impl: ITravelLogStgImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptle: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RemoveEntry(&*(&ptle as *const <ITravelLogEntry as ::windows::core::Abi>::Abi as *const <ITravelLogEntry as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRelativeEntry<Impl: ITravelLogStgImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ioffset: i32, ptle: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetRelativeEntry(ioffset, ::core::mem::transmute_copy(&ptle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ITravelLogStg>, ::windows::core::GetTrustLevel, CreateEntry::<Impl, OFFSET>, TravelTo::<Impl, OFFSET>, EnumEntries::<Impl, OFFSET>, FindEntries::<Impl, OFFSET>, GetCount::<Impl, OFFSET>, RemoveEntry::<Impl, OFFSET>, GetRelativeEntry::<Impl, OFFSET>)
    }
}
pub trait ITrayDeskBandImpl: Sized {
    fn ShowDeskBand();
    fn HideDeskBand();
    fn IsDeskBandShown();
    fn DeskBandRegistrationChanged();
}
impl ::windows::core::RuntimeName for ITrayDeskBand {
    const NAME: &'static str = "Windows.Win32.UI.Shell.ITrayDeskBand";
}
impl ITrayDeskBandVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITrayDeskBandImpl, const OFFSET: isize>() -> ITrayDeskBandVtbl {
        unsafe extern "system" fn ShowDeskBand<Impl: ITrayDeskBandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowDeskBand(&*(&clsid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HideDeskBand<Impl: ITrayDeskBandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HideDeskBand(&*(&clsid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsDeskBandShown<Impl: ITrayDeskBandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsDeskBandShown(&*(&clsid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DeskBandRegistrationChanged<Impl: ITrayDeskBandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).DeskBandRegistrationChanged() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<ITrayDeskBand>, ::windows::core::GetTrustLevel, ShowDeskBand::<Impl, OFFSET>, HideDeskBand::<Impl, OFFSET>, IsDeskBandShown::<Impl, OFFSET>, DeskBandRegistrationChanged::<Impl, OFFSET>)
    }
}
pub trait IURLSearchHookImpl: Sized {
    fn Translate();
}
impl ::windows::core::RuntimeName for IURLSearchHook {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IURLSearchHook";
}
impl IURLSearchHookVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IURLSearchHookImpl, const OFFSET: isize>() -> IURLSearchHookVtbl {
        unsafe extern "system" fn Translate<Impl: IURLSearchHookImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszsearchurl: super::super::Foundation::PWSTR, cchbuffersize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Translate(::core::mem::transmute_copy(&pwszsearchurl), cchbuffersize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IURLSearchHook>, ::windows::core::GetTrustLevel, Translate::<Impl, OFFSET>)
    }
}
pub trait IURLSearchHook2Impl: Sized + IURLSearchHookImpl {
    fn TranslateWithSearchContext();
}
impl ::windows::core::RuntimeName for IURLSearchHook2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IURLSearchHook2";
}
impl IURLSearchHook2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IURLSearchHook2Impl, const OFFSET: isize>() -> IURLSearchHook2Vtbl {
        unsafe extern "system" fn TranslateWithSearchContext<Impl: IURLSearchHook2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszsearchurl: super::super::Foundation::PWSTR, cchbuffersize: u32, psearchcontext: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TranslateWithSearchContext(::core::mem::transmute_copy(&pwszsearchurl), cchbuffersize, &*(&psearchcontext as *const <ISearchContext as ::windows::core::Abi>::Abi as *const <ISearchContext as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IURLSearchHook2>, ::windows::core::GetTrustLevel, TranslateWithSearchContext::<Impl, OFFSET>)
    }
}
pub trait IUniformResourceLocatorAImpl: Sized {
    fn SetURL();
    fn GetURL();
    fn InvokeCommand();
}
impl ::windows::core::RuntimeName for IUniformResourceLocatorA {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IUniformResourceLocatorA";
}
impl IUniformResourceLocatorAVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IUniformResourceLocatorAImpl, const OFFSET: isize>() -> IUniformResourceLocatorAVtbl {
        unsafe extern "system" fn SetURL<Impl: IUniformResourceLocatorAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcszurl: super::super::Foundation::PSTR, dwinflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetURL(&*(&pcszurl as *const <super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), dwinflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetURL<Impl: IUniformResourceLocatorAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszurl: *mut super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetURL(::core::mem::transmute_copy(&ppszurl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InvokeCommand<Impl: IUniformResourceLocatorAImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, purlici: *mut urlinvokecommandinfoA) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InvokeCommand(&*(&purlici as *const <urlinvokecommandinfoA as ::windows::core::Abi>::Abi as *const <urlinvokecommandinfoA as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IUniformResourceLocatorA>, ::windows::core::GetTrustLevel, SetURL::<Impl, OFFSET>, GetURL::<Impl, OFFSET>, InvokeCommand::<Impl, OFFSET>)
    }
}
pub trait IUniformResourceLocatorWImpl: Sized {
    fn SetURL();
    fn GetURL();
    fn InvokeCommand();
}
impl ::windows::core::RuntimeName for IUniformResourceLocatorW {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IUniformResourceLocatorW";
}
impl IUniformResourceLocatorWVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IUniformResourceLocatorWImpl, const OFFSET: isize>() -> IUniformResourceLocatorWVtbl {
        unsafe extern "system" fn SetURL<Impl: IUniformResourceLocatorWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcszurl: super::super::Foundation::PWSTR, dwinflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetURL(&*(&pcszurl as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwinflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetURL<Impl: IUniformResourceLocatorWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszurl: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetURL(::core::mem::transmute_copy(&ppszurl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InvokeCommand<Impl: IUniformResourceLocatorWImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, purlici: *mut urlinvokecommandinfoW) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).InvokeCommand(&*(&purlici as *const <urlinvokecommandinfoW as ::windows::core::Abi>::Abi as *const <urlinvokecommandinfoW as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IUniformResourceLocatorW>, ::windows::core::GetTrustLevel, SetURL::<Impl, OFFSET>, GetURL::<Impl, OFFSET>, InvokeCommand::<Impl, OFFSET>)
    }
}
pub trait IUpdateIDListImpl: Sized {
    fn Update();
}
impl ::windows::core::RuntimeName for IUpdateIDList {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IUpdateIDList";
}
impl IUpdateIDListVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IUpdateIDListImpl, const OFFSET: isize>() -> IUpdateIDListVtbl {
        unsafe extern "system" fn Update<Impl: IUpdateIDListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbc: ::windows::core::RawPtr, pidlin: *const Common::ITEMIDLIST, ppidlout: *mut *mut Common::ITEMIDLIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Update(&*(&pbc as *const <super::super::System::Com::IBindCtx as ::windows::core::Abi>::Abi as *const <super::super::System::Com::IBindCtx as ::windows::core::DefaultType>::DefaultType), &*(&pidlin as *const <Common::ITEMIDLIST as ::windows::core::Abi>::Abi as *const <Common::ITEMIDLIST as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppidlout)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IUpdateIDList>, ::windows::core::GetTrustLevel, Update::<Impl, OFFSET>)
    }
}
pub trait IUseToBrowseItemImpl: Sized + IRelatedItemImpl {}
impl ::windows::core::RuntimeName for IUseToBrowseItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IUseToBrowseItem";
}
impl IUseToBrowseItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IUseToBrowseItemImpl, const OFFSET: isize>() -> IUseToBrowseItemVtbl {
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IUseToBrowseItem>, ::windows::core::GetTrustLevel)
    }
}
pub trait IUserAccountChangeCallbackImpl: Sized {
    fn OnPictureChange();
}
impl ::windows::core::RuntimeName for IUserAccountChangeCallback {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IUserAccountChangeCallback";
}
impl IUserAccountChangeCallbackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IUserAccountChangeCallbackImpl, const OFFSET: isize>() -> IUserAccountChangeCallbackVtbl {
        unsafe extern "system" fn OnPictureChange<Impl: IUserAccountChangeCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszusername: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnPictureChange(&*(&pszusername as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IUserAccountChangeCallback>, ::windows::core::GetTrustLevel, OnPictureChange::<Impl, OFFSET>)
    }
}
pub trait IUserNotificationImpl: Sized {
    fn SetBalloonInfo();
    fn SetBalloonRetry();
    fn SetIconInfo();
    fn Show();
    fn PlaySound();
}
impl ::windows::core::RuntimeName for IUserNotification {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IUserNotification";
}
impl IUserNotificationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IUserNotificationImpl, const OFFSET: isize>() -> IUserNotificationVtbl {
        unsafe extern "system" fn SetBalloonInfo<Impl: IUserNotificationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztitle: super::super::Foundation::PWSTR, psztext: super::super::Foundation::PWSTR, dwinfoflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBalloonInfo(&*(&psztitle as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&psztext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwinfoflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBalloonRetry<Impl: IUserNotificationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwshowtime: u32, dwinterval: u32, cretrycount: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBalloonRetry(dwshowtime, dwinterval, cretrycount) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetIconInfo<Impl: IUserNotificationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hicon: super::WindowsAndMessaging::HICON, psztooltip: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetIconInfo(&*(&hicon as *const <super::WindowsAndMessaging::HICON as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::HICON as ::windows::core::DefaultType>::DefaultType), &*(&psztooltip as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Show<Impl: IUserNotificationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pqc: ::windows::core::RawPtr, dwcontinuepollinterval: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Show(&*(&pqc as *const <IQueryContinue as ::windows::core::Abi>::Abi as *const <IQueryContinue as ::windows::core::DefaultType>::DefaultType), dwcontinuepollinterval) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PlaySound<Impl: IUserNotificationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszsoundname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PlaySound(&*(&pszsoundname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IUserNotification>, ::windows::core::GetTrustLevel, SetBalloonInfo::<Impl, OFFSET>, SetBalloonRetry::<Impl, OFFSET>, SetIconInfo::<Impl, OFFSET>, Show::<Impl, OFFSET>, PlaySound::<Impl, OFFSET>)
    }
}
pub trait IUserNotification2Impl: Sized {
    fn SetBalloonInfo();
    fn SetBalloonRetry();
    fn SetIconInfo();
    fn Show();
    fn PlaySound();
}
impl ::windows::core::RuntimeName for IUserNotification2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IUserNotification2";
}
impl IUserNotification2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IUserNotification2Impl, const OFFSET: isize>() -> IUserNotification2Vtbl {
        unsafe extern "system" fn SetBalloonInfo<Impl: IUserNotification2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztitle: super::super::Foundation::PWSTR, psztext: super::super::Foundation::PWSTR, dwinfoflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBalloonInfo(&*(&psztitle as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&psztext as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwinfoflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBalloonRetry<Impl: IUserNotification2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwshowtime: u32, dwinterval: u32, cretrycount: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetBalloonRetry(dwshowtime, dwinterval, cretrycount) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetIconInfo<Impl: IUserNotification2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hicon: super::WindowsAndMessaging::HICON, psztooltip: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetIconInfo(&*(&hicon as *const <super::WindowsAndMessaging::HICON as ::windows::core::Abi>::Abi as *const <super::WindowsAndMessaging::HICON as ::windows::core::DefaultType>::DefaultType), &*(&psztooltip as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Show<Impl: IUserNotification2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pqc: ::windows::core::RawPtr, dwcontinuepollinterval: u32, psink: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Show(&*(&pqc as *const <IQueryContinue as ::windows::core::Abi>::Abi as *const <IQueryContinue as ::windows::core::DefaultType>::DefaultType), dwcontinuepollinterval, &*(&psink as *const <IUserNotificationCallback as ::windows::core::Abi>::Abi as *const <IUserNotificationCallback as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PlaySound<Impl: IUserNotification2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszsoundname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PlaySound(&*(&pszsoundname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IUserNotification2>, ::windows::core::GetTrustLevel, SetBalloonInfo::<Impl, OFFSET>, SetBalloonRetry::<Impl, OFFSET>, SetIconInfo::<Impl, OFFSET>, Show::<Impl, OFFSET>, PlaySound::<Impl, OFFSET>)
    }
}
pub trait IUserNotificationCallbackImpl: Sized {
    fn OnBalloonUserClick();
    fn OnLeftClick();
    fn OnContextMenu();
}
impl ::windows::core::RuntimeName for IUserNotificationCallback {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IUserNotificationCallback";
}
impl IUserNotificationCallbackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IUserNotificationCallbackImpl, const OFFSET: isize>() -> IUserNotificationCallbackVtbl {
        unsafe extern "system" fn OnBalloonUserClick<Impl: IUserNotificationCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pt: *const super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnBalloonUserClick(&*(&pt as *const <super::super::Foundation::POINT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnLeftClick<Impl: IUserNotificationCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pt: *const super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnLeftClick(&*(&pt as *const <super::super::Foundation::POINT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnContextMenu<Impl: IUserNotificationCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pt: *const super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).OnContextMenu(&*(&pt as *const <super::super::Foundation::POINT as ::windows::core::Abi>::Abi as *const <super::super::Foundation::POINT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IUserNotificationCallback>, ::windows::core::GetTrustLevel, OnBalloonUserClick::<Impl, OFFSET>, OnLeftClick::<Impl, OFFSET>, OnContextMenu::<Impl, OFFSET>)
    }
}
pub trait IViewStateIdentityItemImpl: Sized + IRelatedItemImpl {}
impl ::windows::core::RuntimeName for IViewStateIdentityItem {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IViewStateIdentityItem";
}
impl IViewStateIdentityItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IViewStateIdentityItemImpl, const OFFSET: isize>() -> IViewStateIdentityItemVtbl {
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IViewStateIdentityItem>, ::windows::core::GetTrustLevel)
    }
}
pub trait IVirtualDesktopManagerImpl: Sized {
    fn IsWindowOnCurrentVirtualDesktop();
    fn GetWindowDesktopId();
    fn MoveWindowToDesktop();
}
impl ::windows::core::RuntimeName for IVirtualDesktopManager {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IVirtualDesktopManager";
}
impl IVirtualDesktopManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVirtualDesktopManagerImpl, const OFFSET: isize>() -> IVirtualDesktopManagerVtbl {
        unsafe extern "system" fn IsWindowOnCurrentVirtualDesktop<Impl: IVirtualDesktopManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, toplevelwindow: super::super::Foundation::HWND, oncurrentdesktop: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).IsWindowOnCurrentVirtualDesktop(&*(&toplevelwindow as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&oncurrentdesktop)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindowDesktopId<Impl: IVirtualDesktopManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, toplevelwindow: super::super::Foundation::HWND, desktopid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetWindowDesktopId(&*(&toplevelwindow as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&desktopid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MoveWindowToDesktop<Impl: IVirtualDesktopManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, toplevelwindow: super::super::Foundation::HWND, desktopid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MoveWindowToDesktop(&*(&toplevelwindow as *const <super::super::Foundation::HWND as ::windows::core::Abi>::Abi as *const <super::super::Foundation::HWND as ::windows::core::DefaultType>::DefaultType), &*(&desktopid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IVirtualDesktopManager>, ::windows::core::GetTrustLevel, IsWindowOnCurrentVirtualDesktop::<Impl, OFFSET>, GetWindowDesktopId::<Impl, OFFSET>, MoveWindowToDesktop::<Impl, OFFSET>)
    }
}
pub trait IVisualPropertiesImpl: Sized {
    fn SetWatermark();
    fn SetColor();
    fn GetColor();
    fn SetItemHeight();
    fn GetItemHeight();
    fn SetFont();
    fn GetFont();
    fn SetTheme();
}
impl ::windows::core::RuntimeName for IVisualProperties {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IVisualProperties";
}
impl IVisualPropertiesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVisualPropertiesImpl, const OFFSET: isize>() -> IVisualPropertiesVtbl {
        unsafe extern "system" fn SetWatermark<Impl: IVisualPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hbmp: super::super::Graphics::Gdi::HBITMAP, vpwf: VPWATERMARKFLAGS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetWatermark(&*(&hbmp as *const <super::super::Graphics::Gdi::HBITMAP as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::HBITMAP as ::windows::core::DefaultType>::DefaultType), vpwf) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetColor<Impl: IVisualPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vpcf: VPCOLORFLAGS, cr: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetColor(vpcf, cr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetColor<Impl: IVisualPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vpcf: VPCOLORFLAGS, pcr: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetColor(vpcf, ::core::mem::transmute_copy(&pcr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetItemHeight<Impl: IVisualPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cyiteminpixels: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetItemHeight(cyiteminpixels) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemHeight<Impl: IVisualPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cyiteminpixels: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetItemHeight(::core::mem::transmute_copy(&cyiteminpixels)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFont<Impl: IVisualPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plf: *const super::super::Graphics::Gdi::LOGFONTW, bredraw: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFont(&*(&plf as *const <super::super::Graphics::Gdi::LOGFONTW as ::windows::core::Abi>::Abi as *const <super::super::Graphics::Gdi::LOGFONTW as ::windows::core::DefaultType>::DefaultType), &*(&bredraw as *const <super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFont<Impl: IVisualPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plf: *mut super::super::Graphics::Gdi::LOGFONTW) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFont(::core::mem::transmute_copy(&plf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTheme<Impl: IVisualPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszsubappname: super::super::Foundation::PWSTR, pszsubidlist: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTheme(&*(&pszsubappname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pszsubidlist as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IVisualProperties>, ::windows::core::GetTrustLevel, SetWatermark::<Impl, OFFSET>, SetColor::<Impl, OFFSET>, GetColor::<Impl, OFFSET>, SetItemHeight::<Impl, OFFSET>, GetItemHeight::<Impl, OFFSET>, SetFont::<Impl, OFFSET>, GetFont::<Impl, OFFSET>, SetTheme::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IWebBrowserImpl: Sized + IDispatchImpl {
    fn GoBack();
    fn GoForward();
    fn GoHome();
    fn GoSearch();
    fn Navigate();
    fn Refresh();
    fn Refresh2();
    fn Stop();
    fn Application();
    fn Parent();
    fn Container();
    fn Document();
    fn TopLevelContainer();
    fn Type();
    fn Left();
    fn SetLeft();
    fn Top();
    fn SetTop();
    fn Width();
    fn SetWidth();
    fn Height();
    fn SetHeight();
    fn LocationName();
    fn LocationURL();
    fn Busy();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IWebBrowser {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IWebBrowser";
}
#[cfg(feature = "Win32_System_Com")]
impl IWebBrowserVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IWebBrowserImpl, const OFFSET: isize>() -> IWebBrowserVtbl {
        unsafe extern "system" fn GoBack<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GoBack() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GoForward<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GoForward() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GoHome<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GoHome() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GoSearch<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GoSearch() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Navigate<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, url: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, flags: *const super::super::System::Com::VARIANT, targetframename: *const super::super::System::Com::VARIANT, postdata: *const super::super::System::Com::VARIANT, headers: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Navigate(
                &*(&url as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&flags as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&targetframename as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&postdata as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&headers as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Refresh<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Refresh() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Refresh2<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Refresh2(&*(&level as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Stop<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Stop() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Application<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Application(::core::mem::transmute_copy(&ppdisp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Parent<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Parent(::core::mem::transmute_copy(&ppdisp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Container<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Container(::core::mem::transmute_copy(&ppdisp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Document<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Document(::core::mem::transmute_copy(&ppdisp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TopLevelContainer<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbool: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TopLevelContainer(::core::mem::transmute_copy(&pbool)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Type<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Type(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Left<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pl: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Left(::core::mem::transmute_copy(&pl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLeft<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, left: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetLeft(left) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Top<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pl: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Top(::core::mem::transmute_copy(&pl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTop<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, top: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTop(top) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Width<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pl: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Width(::core::mem::transmute_copy(&pl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetWidth<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, width: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetWidth(width) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Height<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pl: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Height(::core::mem::transmute_copy(&pl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetHeight<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, height: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetHeight(height) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LocationName<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, locationname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).LocationName(::core::mem::transmute_copy(&locationname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LocationURL<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, locationurl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).LocationURL(::core::mem::transmute_copy(&locationurl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Busy<Impl: IWebBrowserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbool: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Busy(::core::mem::transmute_copy(&pbool)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IWebBrowser>,
            ::windows::core::GetTrustLevel,
            GoBack::<Impl, OFFSET>,
            GoForward::<Impl, OFFSET>,
            GoHome::<Impl, OFFSET>,
            GoSearch::<Impl, OFFSET>,
            Navigate::<Impl, OFFSET>,
            Refresh::<Impl, OFFSET>,
            Refresh2::<Impl, OFFSET>,
            Stop::<Impl, OFFSET>,
            Application::<Impl, OFFSET>,
            Parent::<Impl, OFFSET>,
            Container::<Impl, OFFSET>,
            Document::<Impl, OFFSET>,
            TopLevelContainer::<Impl, OFFSET>,
            Type::<Impl, OFFSET>,
            Left::<Impl, OFFSET>,
            SetLeft::<Impl, OFFSET>,
            Top::<Impl, OFFSET>,
            SetTop::<Impl, OFFSET>,
            Width::<Impl, OFFSET>,
            SetWidth::<Impl, OFFSET>,
            Height::<Impl, OFFSET>,
            SetHeight::<Impl, OFFSET>,
            LocationName::<Impl, OFFSET>,
            LocationURL::<Impl, OFFSET>,
            Busy::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IWebBrowser2Impl: Sized + IWebBrowserAppImpl + IWebBrowserImpl + IDispatchImpl {
    fn Navigate2();
    fn QueryStatusWB();
    fn ExecWB();
    fn ShowBrowserBar();
    fn ReadyState();
    fn Offline();
    fn SetOffline();
    fn Silent();
    fn SetSilent();
    fn RegisterAsBrowser();
    fn SetRegisterAsBrowser();
    fn RegisterAsDropTarget();
    fn SetRegisterAsDropTarget();
    fn TheaterMode();
    fn SetTheaterMode();
    fn AddressBar();
    fn SetAddressBar();
    fn Resizable();
    fn SetResizable();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IWebBrowser2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IWebBrowser2";
}
#[cfg(feature = "Win32_System_Com")]
impl IWebBrowser2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IWebBrowser2Impl, const OFFSET: isize>() -> IWebBrowser2Vtbl {
        unsafe extern "system" fn Navigate2<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, url: *const super::super::System::Com::VARIANT, flags: *const super::super::System::Com::VARIANT, targetframename: *const super::super::System::Com::VARIANT, postdata: *const super::super::System::Com::VARIANT, headers: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Navigate2(
                &*(&url as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&flags as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&targetframename as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&postdata as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&headers as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryStatusWB<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cmdid: super::super::System::Ole::OLECMDID, pcmdf: *mut super::super::System::Ole::OLECMDF) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).QueryStatusWB(cmdid, ::core::mem::transmute_copy(&pcmdf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecWB<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cmdid: super::super::System::Ole::OLECMDID, cmdexecopt: super::super::System::Ole::OLECMDEXECOPT, pvain: *const super::super::System::Com::VARIANT, pvaout: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ExecWB(cmdid, cmdexecopt, &*(&pvain as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), &*(&pvaout as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ShowBrowserBar<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvaclsid: *const super::super::System::Com::VARIANT, pvarshow: *const super::super::System::Com::VARIANT, pvarsize: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ShowBrowserBar(
                &*(&pvaclsid as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&pvarshow as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&pvarsize as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadyState<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plreadystate: *mut super::super::System::Ole::READYSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ReadyState(::core::mem::transmute_copy(&plreadystate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Offline<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pboffline: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Offline(::core::mem::transmute_copy(&pboffline)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOffline<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, boffline: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetOffline(boffline) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Silent<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbsilent: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Silent(::core::mem::transmute_copy(&pbsilent)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSilent<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bsilent: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetSilent(bsilent) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterAsBrowser<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbregister: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RegisterAsBrowser(::core::mem::transmute_copy(&pbregister)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRegisterAsBrowser<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bregister: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetRegisterAsBrowser(bregister) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterAsDropTarget<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbregister: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).RegisterAsDropTarget(::core::mem::transmute_copy(&pbregister)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRegisterAsDropTarget<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bregister: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetRegisterAsDropTarget(bregister) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TheaterMode<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbregister: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).TheaterMode(::core::mem::transmute_copy(&pbregister)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTheaterMode<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bregister: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetTheaterMode(bregister) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddressBar<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddressBar(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAddressBar<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetAddressBar(value) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Resizable<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Resizable(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetResizable<Impl: IWebBrowser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetResizable(value) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IWebBrowser2>,
            ::windows::core::GetTrustLevel,
            Navigate2::<Impl, OFFSET>,
            QueryStatusWB::<Impl, OFFSET>,
            ExecWB::<Impl, OFFSET>,
            ShowBrowserBar::<Impl, OFFSET>,
            ReadyState::<Impl, OFFSET>,
            Offline::<Impl, OFFSET>,
            SetOffline::<Impl, OFFSET>,
            Silent::<Impl, OFFSET>,
            SetSilent::<Impl, OFFSET>,
            RegisterAsBrowser::<Impl, OFFSET>,
            SetRegisterAsBrowser::<Impl, OFFSET>,
            RegisterAsDropTarget::<Impl, OFFSET>,
            SetRegisterAsDropTarget::<Impl, OFFSET>,
            TheaterMode::<Impl, OFFSET>,
            SetTheaterMode::<Impl, OFFSET>,
            AddressBar::<Impl, OFFSET>,
            SetAddressBar::<Impl, OFFSET>,
            Resizable::<Impl, OFFSET>,
            SetResizable::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IWebBrowserAppImpl: Sized + IWebBrowserImpl + IDispatchImpl {
    fn Quit();
    fn ClientToWindow();
    fn PutProperty();
    fn GetProperty();
    fn Name();
    fn HWND();
    fn FullName();
    fn Path();
    fn Visible();
    fn SetVisible();
    fn StatusBar();
    fn SetStatusBar();
    fn StatusText();
    fn SetStatusText();
    fn ToolBar();
    fn SetToolBar();
    fn MenuBar();
    fn SetMenuBar();
    fn FullScreen();
    fn SetFullScreen();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IWebBrowserApp {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IWebBrowserApp";
}
#[cfg(feature = "Win32_System_Com")]
impl IWebBrowserAppVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IWebBrowserAppImpl, const OFFSET: isize>() -> IWebBrowserAppVtbl {
        unsafe extern "system" fn Quit<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Quit() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ClientToWindow<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcx: *mut i32, pcy: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ClientToWindow(pcx, pcy) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PutProperty<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, property: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, vtvalue: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).PutProperty(&*(&property as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), &*(&vtvalue as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProperty<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, property: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pvtvalue: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetProperty(&*(&property as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pvtvalue)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Name<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Name(::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HWND<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::Foundation::SHANDLE_PTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).HWND(::core::mem::transmute_copy(&phwnd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FullName<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fullname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FullName(::core::mem::transmute_copy(&fullname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Path<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Path(::core::mem::transmute_copy(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Visible<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbool: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Visible(::core::mem::transmute_copy(&pbool)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetVisible<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetVisible(value) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StatusBar<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbool: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StatusBar(::core::mem::transmute_copy(&pbool)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetStatusBar<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetStatusBar(value) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StatusText<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, statustext: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).StatusText(::core::mem::transmute_copy(&statustext)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetStatusText<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, statustext: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetStatusText(&*(&statustext as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ToolBar<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).ToolBar(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetToolBar<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetToolBar(value) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MenuBar<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).MenuBar(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetMenuBar<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetMenuBar(value) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FullScreen<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbfullscreen: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FullScreen(::core::mem::transmute_copy(&pbfullscreen)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFullScreen<Impl: IWebBrowserAppImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bfullscreen: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetFullScreen(bfullscreen) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IWebBrowserApp>,
            ::windows::core::GetTrustLevel,
            Quit::<Impl, OFFSET>,
            ClientToWindow::<Impl, OFFSET>,
            PutProperty::<Impl, OFFSET>,
            GetProperty::<Impl, OFFSET>,
            Name::<Impl, OFFSET>,
            HWND::<Impl, OFFSET>,
            FullName::<Impl, OFFSET>,
            Path::<Impl, OFFSET>,
            Visible::<Impl, OFFSET>,
            SetVisible::<Impl, OFFSET>,
            StatusBar::<Impl, OFFSET>,
            SetStatusBar::<Impl, OFFSET>,
            StatusText::<Impl, OFFSET>,
            SetStatusText::<Impl, OFFSET>,
            ToolBar::<Impl, OFFSET>,
            SetToolBar::<Impl, OFFSET>,
            MenuBar::<Impl, OFFSET>,
            SetMenuBar::<Impl, OFFSET>,
            FullScreen::<Impl, OFFSET>,
            SetFullScreen::<Impl, OFFSET>,
        )
    }
}
pub trait IWebWizardExtensionImpl: Sized + IWizardExtensionImpl {
    fn SetInitialURL();
    fn SetErrorURL();
}
impl ::windows::core::RuntimeName for IWebWizardExtension {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IWebWizardExtension";
}
impl IWebWizardExtensionVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IWebWizardExtensionImpl, const OFFSET: isize>() -> IWebWizardExtensionVtbl {
        unsafe extern "system" fn SetInitialURL<Impl: IWebWizardExtensionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszurl: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetInitialURL(&*(&pszurl as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetErrorURL<Impl: IWebWizardExtensionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszerrorurl: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetErrorURL(&*(&pszerrorurl as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IWebWizardExtension>, ::windows::core::GetTrustLevel, SetInitialURL::<Impl, OFFSET>, SetErrorURL::<Impl, OFFSET>)
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IWebWizardHostImpl: Sized + IDispatchImpl {
    fn FinalBack();
    fn FinalNext();
    fn Cancel();
    fn SetCaption();
    fn Caption();
    fn SetProperty();
    fn Property();
    fn SetWizardButtons();
    fn SetHeaderText();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IWebWizardHost {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IWebWizardHost";
}
#[cfg(feature = "Win32_System_Com")]
impl IWebWizardHostVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IWebWizardHostImpl, const OFFSET: isize>() -> IWebWizardHostVtbl {
        unsafe extern "system" fn FinalBack<Impl: IWebWizardHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FinalBack() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FinalNext<Impl: IWebWizardHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).FinalNext() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Cancel<Impl: IWebWizardHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Cancel() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCaption<Impl: IWebWizardHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrcaption: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetCaption(&*(&bstrcaption as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Caption<Impl: IWebWizardHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrcaption: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Caption(::core::mem::transmute_copy(&pbstrcaption)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProperty<Impl: IWebWizardHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrpropertyname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pvproperty: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetProperty(&*(&bstrpropertyname as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), &*(&pvproperty as *const <super::super::System::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::System::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Property<Impl: IWebWizardHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrpropertyname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pvproperty: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).Property(&*(&bstrpropertyname as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pvproperty)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetWizardButtons<Impl: IWebWizardHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vfenableback: i16, vfenablenext: i16, vflastpage: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetWizardButtons(vfenableback, vfenablenext, vflastpage) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetHeaderText<Impl: IWebWizardHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrheadertitle: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, bstrheadersubtitle: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SetHeaderText(&*(&bstrheadertitle as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), &*(&bstrheadersubtitle as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            ::windows::core::QueryInterface::<Identity, OFFSET>,
            ::windows::core::AddRef::<Identity, OFFSET>,
            ::windows::core::Release::<Identity, OFFSET>,
            ::windows::core::GetIids,
            ::windows::core::GetRuntimeClassName::<IWebWizardHost>,
            ::windows::core::GetTrustLevel,
            FinalBack::<Impl, OFFSET>,
            FinalNext::<Impl, OFFSET>,
            Cancel::<Impl, OFFSET>,
            SetCaption::<Impl, OFFSET>,
            Caption::<Impl, OFFSET>,
            SetProperty::<Impl, OFFSET>,
            Property::<Impl, OFFSET>,
            SetWizardButtons::<Impl, OFFSET>,
            SetHeaderText::<Impl, OFFSET>,
        )
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IWebWizardHost2Impl: Sized + IWebWizardHostImpl + IDispatchImpl {
    fn SignString();
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows::core::RuntimeName for IWebWizardHost2 {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IWebWizardHost2";
}
#[cfg(feature = "Win32_System_Com")]
impl IWebWizardHost2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IWebWizardHost2Impl, const OFFSET: isize>() -> IWebWizardHost2Vtbl {
        unsafe extern "system" fn SignString<Impl: IWebWizardHost2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, signedvalue: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).SignString(&*(&value as *const <super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&signedvalue)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IWebWizardHost2>, ::windows::core::GetTrustLevel, SignString::<Impl, OFFSET>)
    }
}
pub trait IWizardExtensionImpl: Sized {
    fn AddPages();
    fn GetFirstPage();
    fn GetLastPage();
}
impl ::windows::core::RuntimeName for IWizardExtension {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IWizardExtension";
}
impl IWizardExtensionVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IWizardExtensionImpl, const OFFSET: isize>() -> IWizardExtensionVtbl {
        unsafe extern "system" fn AddPages<Impl: IWizardExtensionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, apages: *mut super::Controls::HPROPSHEETPAGE, cpages: u32, pnpagesadded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).AddPages(::core::mem::transmute_copy(&apages), cpages, ::core::mem::transmute_copy(&pnpagesadded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFirstPage<Impl: IWizardExtensionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phpage: *mut super::Controls::HPROPSHEETPAGE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetFirstPage(::core::mem::transmute_copy(&phpage)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLastPage<Impl: IWizardExtensionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phpage: *mut super::Controls::HPROPSHEETPAGE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetLastPage(::core::mem::transmute_copy(&phpage)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IWizardExtension>, ::windows::core::GetTrustLevel, AddPages::<Impl, OFFSET>, GetFirstPage::<Impl, OFFSET>, GetLastPage::<Impl, OFFSET>)
    }
}
pub trait IWizardSiteImpl: Sized {
    fn GetPreviousPage();
    fn GetNextPage();
    fn GetCancelledPage();
}
impl ::windows::core::RuntimeName for IWizardSite {
    const NAME: &'static str = "Windows.Win32.UI.Shell.IWizardSite";
}
impl IWizardSiteVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IWizardSiteImpl, const OFFSET: isize>() -> IWizardSiteVtbl {
        unsafe extern "system" fn GetPreviousPage<Impl: IWizardSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phpage: *mut super::Controls::HPROPSHEETPAGE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetPreviousPage(::core::mem::transmute_copy(&phpage)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextPage<Impl: IWizardSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phpage: *mut super::Controls::HPROPSHEETPAGE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetNextPage(::core::mem::transmute_copy(&phpage)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCancelledPage<Impl: IWizardSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phpage: *mut super::Controls::HPROPSHEETPAGE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            match (*this).GetCancelledPage(::core::mem::transmute_copy(&phpage)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(::windows::core::QueryInterface::<Identity, OFFSET>, ::windows::core::AddRef::<Identity, OFFSET>, ::windows::core::Release::<Identity, OFFSET>, ::windows::core::GetIids, ::windows::core::GetRuntimeClassName::<IWizardSite>, ::windows::core::GetTrustLevel, GetPreviousPage::<Impl, OFFSET>, GetNextPage::<Impl, OFFSET>, GetCancelledPage::<Impl, OFFSET>)
    }
}
