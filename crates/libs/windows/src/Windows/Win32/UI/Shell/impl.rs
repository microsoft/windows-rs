# [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait CIE4ConnectionPointImpl < > : Sized + IConnectionPointImpl where { fn DoInvokeIE4 ( ) ; fn DoInvokePIDLIE4 ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > CIE4ConnectionPointVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : CIE4ConnectionPointImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> CIE4ConnectionPointVtbl < > { unsafe extern "system" fn DoInvokeIE4 < Impl : CIE4ConnectionPointImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pf : * mut super::super::Foundation:: BOOL , ppv : * mut * mut :: core :: ffi :: c_void , dispid : i32 , pdispparams : * mut super::super::System::Com:: DISPPARAMS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DoInvokePIDLIE4 < Impl : CIE4ConnectionPointImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dispid : i32 , pidl : * mut Common:: ITEMIDLIST , fcancancel : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , DoInvokeIE4 : DoInvokeIE4 :: < Impl , IMPL_OFFSET > , DoInvokePIDLIE4 : DoInvokePIDLIE4 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < CIE4ConnectionPoint < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DFConstraintImpl < > : Sized + IDispatchImpl where { fn Name ( ) ; fn Value ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DFConstraintVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DFConstraintImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DFConstraintVtbl < > { unsafe extern "system" fn Name < Impl : DFConstraintImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbs : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Value < Impl : DFConstraintImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pv : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Name : Name :: < Impl , IMPL_OFFSET > , Value : Value :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DFConstraint < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DShellFolderViewEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DShellFolderViewEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DShellFolderViewEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DShellFolderViewEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DShellFolderViewEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DShellNameSpaceEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DShellNameSpaceEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DShellNameSpaceEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DShellNameSpaceEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DShellNameSpaceEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DShellWindowsEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DShellWindowsEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DShellWindowsEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DShellWindowsEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DShellWindowsEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DWebBrowserEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DWebBrowserEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DWebBrowserEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DWebBrowserEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DWebBrowserEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DWebBrowserEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DWebBrowserEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DWebBrowserEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DWebBrowserEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DWebBrowserEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait FolderImpl < > : Sized + IDispatchImpl where { fn Title ( ) ; fn Application ( ) ; fn Parent ( ) ; fn ParentFolder ( ) ; fn Items ( ) ; fn ParseName ( ) ; fn NewFolder ( ) ; fn MoveHere ( ) ; fn CopyHere ( ) ; fn GetDetailsOf ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > FolderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : FolderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> FolderVtbl < > { unsafe extern "system" fn Title < Impl : FolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbs : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Application < Impl : FolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Parent < Impl : FolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ParentFolder < Impl : FolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsf : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Items < Impl : FolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ParseName < Impl : FolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NewFolder < Impl : FolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , voptions : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveHere < Impl : FolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vitem : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , voptions : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CopyHere < Impl : FolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vitem : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , voptions : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDetailsOf < Impl : FolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vitem : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , icolumn : i32 , pbs : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Title : Title :: < Impl , IMPL_OFFSET > , Application : Application :: < Impl , IMPL_OFFSET > , Parent : Parent :: < Impl , IMPL_OFFSET > , ParentFolder : ParentFolder :: < Impl , IMPL_OFFSET > , Items : Items :: < Impl , IMPL_OFFSET > , ParseName : ParseName :: < Impl , IMPL_OFFSET > , NewFolder : NewFolder :: < Impl , IMPL_OFFSET > , MoveHere : MoveHere :: < Impl , IMPL_OFFSET > , CopyHere : CopyHere :: < Impl , IMPL_OFFSET > , GetDetailsOf : GetDetailsOf :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < Folder < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait Folder2Impl < > : Sized + FolderImpl + IDispatchImpl where { fn Self_ ( ) ; fn OfflineStatus ( ) ; fn Synchronize ( ) ; fn HaveToShowWebViewBarricade ( ) ; fn DismissedWebViewBarricade ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > Folder2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : Folder2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> Folder2Vtbl < > { unsafe extern "system" fn Self_ < Impl : Folder2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppfi : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OfflineStatus < Impl : Folder2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pul : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Synchronize < Impl : Folder2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HaveToShowWebViewBarricade < Impl : Folder2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbhavetoshowwebviewbarricade : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DismissedWebViewBarricade < Impl : Folder2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Self_ : Self_ :: < Impl , IMPL_OFFSET > , OfflineStatus : OfflineStatus :: < Impl , IMPL_OFFSET > , Synchronize : Synchronize :: < Impl , IMPL_OFFSET > , HaveToShowWebViewBarricade : HaveToShowWebViewBarricade :: < Impl , IMPL_OFFSET > , DismissedWebViewBarricade : DismissedWebViewBarricade :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < Folder2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait Folder3Impl < > : Sized + Folder2Impl + FolderImpl + IDispatchImpl where { fn ShowWebViewBarricade ( ) ; fn SetShowWebViewBarricade ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > Folder3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : Folder3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> Folder3Vtbl < > { unsafe extern "system" fn ShowWebViewBarricade < Impl : Folder3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbshowwebviewbarricade : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetShowWebViewBarricade < Impl : Folder3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bshowwebviewbarricade : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , ShowWebViewBarricade : ShowWebViewBarricade :: < Impl , IMPL_OFFSET > , SetShowWebViewBarricade : SetShowWebViewBarricade :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < Folder3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait FolderItemImpl < > : Sized + IDispatchImpl where { fn Application ( ) ; fn Parent ( ) ; fn Name ( ) ; fn SetName ( ) ; fn Path ( ) ; fn GetLink ( ) ; fn GetFolder ( ) ; fn IsLink ( ) ; fn IsFolder ( ) ; fn IsFileSystem ( ) ; fn IsBrowsable ( ) ; fn ModifyDate ( ) ; fn SetModifyDate ( ) ; fn Size ( ) ; fn Type ( ) ; fn Verbs ( ) ; fn InvokeVerb ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > FolderItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : FolderItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> FolderItemVtbl < > { unsafe extern "system" fn Application < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Parent < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Name < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbs : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetName < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bs : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Path < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbs : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLink < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolder < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsLink < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pb : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsFolder < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pb : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsFileSystem < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pb : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsBrowsable < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pb : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ModifyDate < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdt : * mut f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetModifyDate < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dt : f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Size < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pul : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Type < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbs : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Verbs < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppfic : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvokeVerb < Impl : FolderItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vverb : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Application : Application :: < Impl , IMPL_OFFSET > , Parent : Parent :: < Impl , IMPL_OFFSET > , Name : Name :: < Impl , IMPL_OFFSET > , SetName : SetName :: < Impl , IMPL_OFFSET > , Path : Path :: < Impl , IMPL_OFFSET > , GetLink : GetLink :: < Impl , IMPL_OFFSET > , GetFolder : GetFolder :: < Impl , IMPL_OFFSET > , IsLink : IsLink :: < Impl , IMPL_OFFSET > , IsFolder : IsFolder :: < Impl , IMPL_OFFSET > , IsFileSystem : IsFileSystem :: < Impl , IMPL_OFFSET > , IsBrowsable : IsBrowsable :: < Impl , IMPL_OFFSET > , ModifyDate : ModifyDate :: < Impl , IMPL_OFFSET > , SetModifyDate : SetModifyDate :: < Impl , IMPL_OFFSET > , Size : Size :: < Impl , IMPL_OFFSET > , Type : Type :: < Impl , IMPL_OFFSET > , Verbs : Verbs :: < Impl , IMPL_OFFSET > , InvokeVerb : InvokeVerb :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < FolderItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait FolderItem2Impl < > : Sized + FolderItemImpl + IDispatchImpl where { fn InvokeVerbEx ( ) ; fn ExtendedProperty ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > FolderItem2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : FolderItem2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> FolderItem2Vtbl < > { unsafe extern "system" fn InvokeVerbEx < Impl : FolderItem2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vverb : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , vargs : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ExtendedProperty < Impl : FolderItem2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrpropname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvret : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , InvokeVerbEx : InvokeVerbEx :: < Impl , IMPL_OFFSET > , ExtendedProperty : ExtendedProperty :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < FolderItem2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait FolderItemVerbImpl < > : Sized + IDispatchImpl where { fn Application ( ) ; fn Parent ( ) ; fn Name ( ) ; fn DoIt ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > FolderItemVerbVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : FolderItemVerbImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> FolderItemVerbVtbl < > { unsafe extern "system" fn Application < Impl : FolderItemVerbImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Parent < Impl : FolderItemVerbImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Name < Impl : FolderItemVerbImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbs : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DoIt < Impl : FolderItemVerbImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Application : Application :: < Impl , IMPL_OFFSET > , Parent : Parent :: < Impl , IMPL_OFFSET > , Name : Name :: < Impl , IMPL_OFFSET > , DoIt : DoIt :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < FolderItemVerb < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait FolderItemVerbsImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn Application ( ) ; fn Parent ( ) ; fn Item ( ) ; fn _NewEnum ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > FolderItemVerbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : FolderItemVerbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> FolderItemVerbsVtbl < > { unsafe extern "system" fn Count < Impl : FolderItemVerbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Application < Impl : FolderItemVerbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Parent < Impl : FolderItemVerbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : FolderItemVerbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : FolderItemVerbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppunk : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , Application : Application :: < Impl , IMPL_OFFSET > , Parent : Parent :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < FolderItemVerbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait FolderItemsImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn Application ( ) ; fn Parent ( ) ; fn Item ( ) ; fn _NewEnum ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > FolderItemsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : FolderItemsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> FolderItemsVtbl < > { unsafe extern "system" fn Count < Impl : FolderItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Application < Impl : FolderItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Parent < Impl : FolderItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : FolderItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : FolderItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppunk : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , Application : Application :: < Impl , IMPL_OFFSET > , Parent : Parent :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < FolderItems < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait FolderItems2Impl < > : Sized + FolderItemsImpl + IDispatchImpl where { fn InvokeVerbEx ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > FolderItems2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : FolderItems2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> FolderItems2Vtbl < > { unsafe extern "system" fn InvokeVerbEx < Impl : FolderItems2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vverb : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , vargs : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , InvokeVerbEx : InvokeVerbEx :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < FolderItems2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait FolderItems3Impl < > : Sized + FolderItems2Impl + FolderItemsImpl + IDispatchImpl where { fn Filter ( ) ; fn Verbs ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > FolderItems3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : FolderItems3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> FolderItems3Vtbl < > { unsafe extern "system" fn Filter < Impl : FolderItems3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , grfflags : i32 , bstrfilespec : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Verbs < Impl : FolderItems3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppfic : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Filter : Filter :: < Impl , IMPL_OFFSET > , Verbs : Verbs :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < FolderItems3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IACListImpl < > : Sized where { fn Expand ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IACListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IACListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IACListVtbl < > { unsafe extern "system" fn Expand < Impl : IACListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszexpand : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Expand : Expand :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IACList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IACList2Impl < > : Sized + IACListImpl where { fn SetOptions ( ) ; fn GetOptions ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IACList2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IACList2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IACList2Vtbl < > { unsafe extern "system" fn SetOptions < Impl : IACList2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflag : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetOptions < Impl : IACList2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwflag : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetOptions : SetOptions :: < Impl , IMPL_OFFSET > , GetOptions : GetOptions :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IACList2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait IAccessibilityDockingServiceImpl < > : Sized where { fn GetAvailableSize ( ) ; fn DockWindow ( ) ; fn UndockWindow ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > IAccessibilityDockingServiceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAccessibilityDockingServiceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAccessibilityDockingServiceVtbl < > { unsafe extern "system" fn GetAvailableSize < Impl : IAccessibilityDockingServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hmonitor : super::super::Graphics::Gdi:: HMONITOR , pcxfixed : * mut u32 , pcymax : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DockWindow < Impl : IAccessibilityDockingServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , hmonitor : super::super::Graphics::Gdi:: HMONITOR , cyrequested : u32 , pcallback : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UndockWindow < Impl : IAccessibilityDockingServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetAvailableSize : GetAvailableSize :: < Impl , IMPL_OFFSET > , DockWindow : DockWindow :: < Impl , IMPL_OFFSET > , UndockWindow : UndockWindow :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAccessibilityDockingService < > as :: windows :: core :: Interface > :: IID } } pub trait IAccessibilityDockingServiceCallbackImpl < > : Sized where { fn Undocked ( ) ; } impl < > IAccessibilityDockingServiceCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAccessibilityDockingServiceCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAccessibilityDockingServiceCallbackVtbl < > { unsafe extern "system" fn Undocked < Impl : IAccessibilityDockingServiceCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , undockreason : UNDOCK_REASON , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Undocked : Undocked :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAccessibilityDockingServiceCallback < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IAccessibleObjectImpl < > : Sized where { fn SetAccessibleName ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IAccessibleObjectVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAccessibleObjectImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAccessibleObjectVtbl < > { unsafe extern "system" fn SetAccessibleName < Impl : IAccessibleObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetAccessibleName : SetAccessibleName :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAccessibleObject < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IActionProgressImpl < > : Sized where { fn Begin ( ) ; fn UpdateProgress ( ) ; fn UpdateText ( ) ; fn QueryCancel ( ) ; fn ResetCancel ( ) ; fn End ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IActionProgressVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IActionProgressImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IActionProgressVtbl < > { unsafe extern "system" fn Begin < Impl : IActionProgressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , action : SPACTION , flags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateProgress < Impl : IActionProgressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulcompleted : u64 , ultotal : u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateText < Impl : IActionProgressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , sptext : SPTEXT , psztext : super::super::Foundation:: PWSTR , fmaycompact : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryCancel < Impl : IActionProgressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfcancelled : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResetCancel < Impl : IActionProgressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn End < Impl : IActionProgressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Begin : Begin :: < Impl , IMPL_OFFSET > , UpdateProgress : UpdateProgress :: < Impl , IMPL_OFFSET > , UpdateText : UpdateText :: < Impl , IMPL_OFFSET > , QueryCancel : QueryCancel :: < Impl , IMPL_OFFSET > , ResetCancel : ResetCancel :: < Impl , IMPL_OFFSET > , End : End :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IActionProgress < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IActionProgressDialogImpl < > : Sized where { fn Initialize ( ) ; fn Stop ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IActionProgressDialogVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IActionProgressDialogImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IActionProgressDialogVtbl < > { unsafe extern "system" fn Initialize < Impl : IActionProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , flags : u32 , psztitle : super::super::Foundation:: PWSTR , pszcancel : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Stop < Impl : IActionProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , Stop : Stop :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IActionProgressDialog < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait IAppActivationUIInfoImpl < > : Sized where { fn GetMonitor ( ) ; fn GetInvokePoint ( ) ; fn GetShowCommand ( ) ; fn GetShowUI ( ) ; fn GetKeyState ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > IAppActivationUIInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAppActivationUIInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAppActivationUIInfoVtbl < > { unsafe extern "system" fn GetMonitor < Impl : IAppActivationUIInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut super::super::Graphics::Gdi:: HMONITOR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetInvokePoint < Impl : IAppActivationUIInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetShowCommand < Impl : IAppActivationUIInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetShowUI < Impl : IAppActivationUIInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetKeyState < Impl : IAppActivationUIInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetMonitor : GetMonitor :: < Impl , IMPL_OFFSET > , GetInvokePoint : GetInvokePoint :: < Impl , IMPL_OFFSET > , GetShowCommand : GetShowCommand :: < Impl , IMPL_OFFSET > , GetShowUI : GetShowUI :: < Impl , IMPL_OFFSET > , GetKeyState : GetKeyState :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAppActivationUIInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IAppPublisherImpl < > : Sized where { fn GetNumberOfCategories ( ) ; fn GetCategories ( ) ; fn GetNumberOfApps ( ) ; fn EnumApps ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IAppPublisherVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAppPublisherImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAppPublisherVtbl < > { unsafe extern "system" fn GetNumberOfCategories < Impl : IAppPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwcat : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCategories < Impl : IAppPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pappcategorylist : * mut APPCATEGORYINFOLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetNumberOfApps < Impl : IAppPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwapps : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnumApps < Impl : IAppPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pappcategoryid : * const :: windows :: core :: GUID , ppepa : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetNumberOfCategories : GetNumberOfCategories :: < Impl , IMPL_OFFSET > , GetCategories : GetCategories :: < Impl , IMPL_OFFSET > , GetNumberOfApps : GetNumberOfApps :: < Impl , IMPL_OFFSET > , EnumApps : EnumApps :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAppPublisher < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait IAppVisibilityImpl < > : Sized where { fn GetAppVisibilityOnMonitor ( ) ; fn IsLauncherVisible ( ) ; fn Advise ( ) ; fn Unadvise ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > IAppVisibilityVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAppVisibilityImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAppVisibilityVtbl < > { unsafe extern "system" fn GetAppVisibilityOnMonitor < Impl : IAppVisibilityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hmonitor : super::super::Graphics::Gdi:: HMONITOR , pmode : * mut MONITOR_APP_VISIBILITY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsLauncherVisible < Impl : IAppVisibilityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfvisible : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Advise < Impl : IAppVisibilityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcallback : :: windows :: core :: RawPtr , pdwcookie : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unadvise < Impl : IAppVisibilityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcookie : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetAppVisibilityOnMonitor : GetAppVisibilityOnMonitor :: < Impl , IMPL_OFFSET > , IsLauncherVisible : IsLauncherVisible :: < Impl , IMPL_OFFSET > , Advise : Advise :: < Impl , IMPL_OFFSET > , Unadvise : Unadvise :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAppVisibility < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait IAppVisibilityEventsImpl < > : Sized where { fn AppVisibilityOnMonitorChanged ( ) ; fn LauncherVisibilityChange ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > IAppVisibilityEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAppVisibilityEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAppVisibilityEventsVtbl < > { unsafe extern "system" fn AppVisibilityOnMonitorChanged < Impl : IAppVisibilityEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hmonitor : super::super::Graphics::Gdi:: HMONITOR , previousmode : MONITOR_APP_VISIBILITY , currentmode : MONITOR_APP_VISIBILITY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LauncherVisibilityChange < Impl : IAppVisibilityEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , currentvisiblestate : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AppVisibilityOnMonitorChanged : AppVisibilityOnMonitorChanged :: < Impl , IMPL_OFFSET > , LauncherVisibilityChange : LauncherVisibilityChange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAppVisibilityEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IApplicationActivationManagerImpl < > : Sized where { fn ActivateApplication ( ) ; fn ActivateForFile ( ) ; fn ActivateForProtocol ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IApplicationActivationManagerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IApplicationActivationManagerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IApplicationActivationManagerVtbl < > { unsafe extern "system" fn ActivateApplication < Impl : IApplicationActivationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , appusermodelid : super::super::Foundation:: PWSTR , arguments : super::super::Foundation:: PWSTR , options : ACTIVATEOPTIONS , processid : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ActivateForFile < Impl : IApplicationActivationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , appusermodelid : super::super::Foundation:: PWSTR , itemarray : :: windows :: core :: RawPtr , verb : super::super::Foundation:: PWSTR , processid : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ActivateForProtocol < Impl : IApplicationActivationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , appusermodelid : super::super::Foundation:: PWSTR , itemarray : :: windows :: core :: RawPtr , processid : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ActivateApplication : ActivateApplication :: < Impl , IMPL_OFFSET > , ActivateForFile : ActivateForFile :: < Impl , IMPL_OFFSET > , ActivateForProtocol : ActivateForProtocol :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IApplicationActivationManager < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IApplicationAssociationRegistrationImpl < > : Sized where { fn QueryCurrentDefault ( ) ; fn QueryAppIsDefault ( ) ; fn QueryAppIsDefaultAll ( ) ; fn SetAppAsDefault ( ) ; fn SetAppAsDefaultAll ( ) ; fn ClearUserAssociations ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IApplicationAssociationRegistrationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IApplicationAssociationRegistrationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IApplicationAssociationRegistrationVtbl < > { unsafe extern "system" fn QueryCurrentDefault < Impl : IApplicationAssociationRegistrationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszquery : super::super::Foundation:: PWSTR , atquerytype : ASSOCIATIONTYPE , alquerylevel : ASSOCIATIONLEVEL , ppszassociation : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryAppIsDefault < Impl : IApplicationAssociationRegistrationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszquery : super::super::Foundation:: PWSTR , atquerytype : ASSOCIATIONTYPE , alquerylevel : ASSOCIATIONLEVEL , pszappregistryname : super::super::Foundation:: PWSTR , pfdefault : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryAppIsDefaultAll < Impl : IApplicationAssociationRegistrationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , alquerylevel : ASSOCIATIONLEVEL , pszappregistryname : super::super::Foundation:: PWSTR , pfdefault : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetAppAsDefault < Impl : IApplicationAssociationRegistrationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszappregistryname : super::super::Foundation:: PWSTR , pszset : super::super::Foundation:: PWSTR , atsettype : ASSOCIATIONTYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetAppAsDefaultAll < Impl : IApplicationAssociationRegistrationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszappregistryname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ClearUserAssociations < Impl : IApplicationAssociationRegistrationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , QueryCurrentDefault : QueryCurrentDefault :: < Impl , IMPL_OFFSET > , QueryAppIsDefault : QueryAppIsDefault :: < Impl , IMPL_OFFSET > , QueryAppIsDefaultAll : QueryAppIsDefaultAll :: < Impl , IMPL_OFFSET > , SetAppAsDefault : SetAppAsDefault :: < Impl , IMPL_OFFSET > , SetAppAsDefaultAll : SetAppAsDefaultAll :: < Impl , IMPL_OFFSET > , ClearUserAssociations : ClearUserAssociations :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IApplicationAssociationRegistration < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IApplicationAssociationRegistrationUIImpl < > : Sized where { fn LaunchAdvancedAssociationUI ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IApplicationAssociationRegistrationUIVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IApplicationAssociationRegistrationUIImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IApplicationAssociationRegistrationUIVtbl < > { unsafe extern "system" fn LaunchAdvancedAssociationUI < Impl : IApplicationAssociationRegistrationUIImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszappregistryname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , LaunchAdvancedAssociationUI : LaunchAdvancedAssociationUI :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IApplicationAssociationRegistrationUI < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IApplicationDesignModeSettingsImpl < > : Sized where { fn SetNativeDisplaySize ( ) ; fn SetScaleFactor ( ) ; fn SetApplicationViewState ( ) ; fn ComputeApplicationSize ( ) ; fn IsApplicationViewStateSupported ( ) ; fn TriggerEdgeGesture ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IApplicationDesignModeSettingsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IApplicationDesignModeSettingsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IApplicationDesignModeSettingsVtbl < > { unsafe extern "system" fn SetNativeDisplaySize < Impl : IApplicationDesignModeSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , nativedisplaysizepixels : super::super::Foundation:: SIZE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetScaleFactor < Impl : IApplicationDesignModeSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , scalefactor : Common:: DEVICE_SCALE_FACTOR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetApplicationViewState < Impl : IApplicationDesignModeSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , viewstate : APPLICATION_VIEW_STATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ComputeApplicationSize < Impl : IApplicationDesignModeSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , applicationsizepixels : * mut super::super::Foundation:: SIZE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsApplicationViewStateSupported < Impl : IApplicationDesignModeSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , viewstate : APPLICATION_VIEW_STATE , nativedisplaysizepixels : super::super::Foundation:: SIZE , scalefactor : Common:: DEVICE_SCALE_FACTOR , supported : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TriggerEdgeGesture < Impl : IApplicationDesignModeSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , edgegesturekind : EDGE_GESTURE_KIND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetNativeDisplaySize : SetNativeDisplaySize :: < Impl , IMPL_OFFSET > , SetScaleFactor : SetScaleFactor :: < Impl , IMPL_OFFSET > , SetApplicationViewState : SetApplicationViewState :: < Impl , IMPL_OFFSET > , ComputeApplicationSize : ComputeApplicationSize :: < Impl , IMPL_OFFSET > , IsApplicationViewStateSupported : IsApplicationViewStateSupported :: < Impl , IMPL_OFFSET > , TriggerEdgeGesture : TriggerEdgeGesture :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IApplicationDesignModeSettings < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IApplicationDesignModeSettings2Impl < > : Sized + IApplicationDesignModeSettingsImpl where { fn SetNativeDisplayOrientation ( ) ; fn SetApplicationViewOrientation ( ) ; fn SetAdjacentDisplayEdges ( ) ; fn SetIsOnLockScreen ( ) ; fn SetApplicationViewMinWidth ( ) ; fn GetApplicationSizeBounds ( ) ; fn GetApplicationViewOrientation ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IApplicationDesignModeSettings2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IApplicationDesignModeSettings2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IApplicationDesignModeSettings2Vtbl < > { unsafe extern "system" fn SetNativeDisplayOrientation < Impl : IApplicationDesignModeSettings2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , nativedisplayorientation : NATIVE_DISPLAY_ORIENTATION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetApplicationViewOrientation < Impl : IApplicationDesignModeSettings2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vieworientation : APPLICATION_VIEW_ORIENTATION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetAdjacentDisplayEdges < Impl : IApplicationDesignModeSettings2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , adjacentdisplayedges : ADJACENT_DISPLAY_EDGES , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetIsOnLockScreen < Impl : IApplicationDesignModeSettings2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , isonlockscreen : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetApplicationViewMinWidth < Impl : IApplicationDesignModeSettings2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , viewminwidth : APPLICATION_VIEW_MIN_WIDTH , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetApplicationSizeBounds < Impl : IApplicationDesignModeSettings2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , minapplicationsizepixels : * mut super::super::Foundation:: SIZE , maxapplicationsizepixels : * mut super::super::Foundation:: SIZE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetApplicationViewOrientation < Impl : IApplicationDesignModeSettings2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , applicationsizepixels : super::super::Foundation:: SIZE , vieworientation : * mut APPLICATION_VIEW_ORIENTATION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetNativeDisplayOrientation : SetNativeDisplayOrientation :: < Impl , IMPL_OFFSET > , SetApplicationViewOrientation : SetApplicationViewOrientation :: < Impl , IMPL_OFFSET > , SetAdjacentDisplayEdges : SetAdjacentDisplayEdges :: < Impl , IMPL_OFFSET > , SetIsOnLockScreen : SetIsOnLockScreen :: < Impl , IMPL_OFFSET > , SetApplicationViewMinWidth : SetApplicationViewMinWidth :: < Impl , IMPL_OFFSET > , GetApplicationSizeBounds : GetApplicationSizeBounds :: < Impl , IMPL_OFFSET > , GetApplicationViewOrientation : GetApplicationViewOrientation :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IApplicationDesignModeSettings2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IApplicationDestinationsImpl < > : Sized where { fn SetAppID ( ) ; fn RemoveDestination ( ) ; fn RemoveAllDestinations ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IApplicationDestinationsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IApplicationDestinationsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IApplicationDestinationsVtbl < > { unsafe extern "system" fn SetAppID < Impl : IApplicationDestinationsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszappid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveDestination < Impl : IApplicationDestinationsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveAllDestinations < Impl : IApplicationDestinationsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetAppID : SetAppID :: < Impl , IMPL_OFFSET > , RemoveDestination : RemoveDestination :: < Impl , IMPL_OFFSET > , RemoveAllDestinations : RemoveAllDestinations :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IApplicationDestinations < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IApplicationDocumentListsImpl < > : Sized where { fn SetAppID ( ) ; fn GetList ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IApplicationDocumentListsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IApplicationDocumentListsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IApplicationDocumentListsVtbl < > { unsafe extern "system" fn SetAppID < Impl : IApplicationDocumentListsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszappid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetList < Impl : IApplicationDocumentListsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , listtype : APPDOCLISTTYPE , citemsdesired : u32 , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetAppID : SetAppID :: < Impl , IMPL_OFFSET > , GetList : GetList :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IApplicationDocumentLists < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IAssocHandlerImpl < > : Sized where { fn GetName ( ) ; fn GetUIName ( ) ; fn GetIconLocation ( ) ; fn IsRecommended ( ) ; fn MakeDefault ( ) ; fn Invoke ( ) ; fn CreateInvoker ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IAssocHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAssocHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAssocHandlerVtbl < > { unsafe extern "system" fn GetName < Impl : IAssocHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsz : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetUIName < Impl : IAssocHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsz : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIconLocation < Impl : IAssocHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszpath : * mut super::super::Foundation:: PWSTR , pindex : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsRecommended < Impl : IAssocHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MakeDefault < Impl : IAssocHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdescription : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Invoke < Impl : IAssocHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdo : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateInvoker < Impl : IAssocHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdo : :: windows :: core :: RawPtr , ppinvoker : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetName : GetName :: < Impl , IMPL_OFFSET > , GetUIName : GetUIName :: < Impl , IMPL_OFFSET > , GetIconLocation : GetIconLocation :: < Impl , IMPL_OFFSET > , IsRecommended : IsRecommended :: < Impl , IMPL_OFFSET > , MakeDefault : MakeDefault :: < Impl , IMPL_OFFSET > , Invoke : Invoke :: < Impl , IMPL_OFFSET > , CreateInvoker : CreateInvoker :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAssocHandler < > as :: windows :: core :: Interface > :: IID } } pub trait IAssocHandlerInvokerImpl < > : Sized where { fn SupportsSelection ( ) ; fn Invoke ( ) ; } impl < > IAssocHandlerInvokerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAssocHandlerInvokerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAssocHandlerInvokerVtbl < > { unsafe extern "system" fn SupportsSelection < Impl : IAssocHandlerInvokerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Invoke < Impl : IAssocHandlerInvokerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SupportsSelection : SupportsSelection :: < Impl , IMPL_OFFSET > , Invoke : Invoke :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAssocHandlerInvoker < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IAttachmentExecuteImpl < > : Sized where { fn SetClientTitle ( ) ; fn SetClientGuid ( ) ; fn SetLocalPath ( ) ; fn SetFileName ( ) ; fn SetSource ( ) ; fn SetReferrer ( ) ; fn CheckPolicy ( ) ; fn Prompt ( ) ; fn Save ( ) ; fn Execute ( ) ; fn SaveWithUI ( ) ; fn ClearClientState ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IAttachmentExecuteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAttachmentExecuteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAttachmentExecuteVtbl < > { unsafe extern "system" fn SetClientTitle < Impl : IAttachmentExecuteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psztitle : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetClientGuid < Impl : IAttachmentExecuteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , guid : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetLocalPath < Impl : IAttachmentExecuteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszlocalpath : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFileName < Impl : IAttachmentExecuteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszfilename : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSource < Impl : IAttachmentExecuteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszsource : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetReferrer < Impl : IAttachmentExecuteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszreferrer : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CheckPolicy < Impl : IAttachmentExecuteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Prompt < Impl : IAttachmentExecuteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , prompt : ATTACHMENT_PROMPT , paction : * mut ATTACHMENT_ACTION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Save < Impl : IAttachmentExecuteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Execute < Impl : IAttachmentExecuteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , pszverb : super::super::Foundation:: PWSTR , phprocess : * mut super::super::Foundation:: HANDLE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SaveWithUI < Impl : IAttachmentExecuteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ClearClientState < Impl : IAttachmentExecuteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetClientTitle : SetClientTitle :: < Impl , IMPL_OFFSET > , SetClientGuid : SetClientGuid :: < Impl , IMPL_OFFSET > , SetLocalPath : SetLocalPath :: < Impl , IMPL_OFFSET > , SetFileName : SetFileName :: < Impl , IMPL_OFFSET > , SetSource : SetSource :: < Impl , IMPL_OFFSET > , SetReferrer : SetReferrer :: < Impl , IMPL_OFFSET > , CheckPolicy : CheckPolicy :: < Impl , IMPL_OFFSET > , Prompt : Prompt :: < Impl , IMPL_OFFSET > , Save : Save :: < Impl , IMPL_OFFSET > , Execute : Execute :: < Impl , IMPL_OFFSET > , SaveWithUI : SaveWithUI :: < Impl , IMPL_OFFSET > , ClearClientState : ClearClientState :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAttachmentExecute < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IAutoCompleteImpl < > : Sized where { fn Init ( ) ; fn Enable ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IAutoCompleteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAutoCompleteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAutoCompleteVtbl < > { unsafe extern "system" fn Init < Impl : IAutoCompleteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndedit : super::super::Foundation:: HWND , punkacl : * mut :: core :: ffi :: c_void , pwszregkeypath : super::super::Foundation:: PWSTR , pwszquickcomplete : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Enable < Impl : IAutoCompleteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fenable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Init : Init :: < Impl , IMPL_OFFSET > , Enable : Enable :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAutoComplete < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IAutoComplete2Impl < > : Sized + IAutoCompleteImpl where { fn SetOptions ( ) ; fn GetOptions ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IAutoComplete2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAutoComplete2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAutoComplete2Vtbl < > { unsafe extern "system" fn SetOptions < Impl : IAutoComplete2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflag : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetOptions < Impl : IAutoComplete2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwflag : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetOptions : SetOptions :: < Impl , IMPL_OFFSET > , GetOptions : GetOptions :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAutoComplete2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IAutoCompleteDropDownImpl < > : Sized where { fn GetDropDownStatus ( ) ; fn ResetEnumerator ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IAutoCompleteDropDownVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAutoCompleteDropDownImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAutoCompleteDropDownVtbl < > { unsafe extern "system" fn GetDropDownStatus < Impl : IAutoCompleteDropDownImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwflags : * mut u32 , ppwszstring : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResetEnumerator < Impl : IAutoCompleteDropDownImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetDropDownStatus : GetDropDownStatus :: < Impl , IMPL_OFFSET > , ResetEnumerator : ResetEnumerator :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAutoCompleteDropDown < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IBandHostImpl < > : Sized where { fn CreateBand ( ) ; fn SetBandAvailability ( ) ; fn DestroyBand ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IBandHostVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IBandHostImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IBandHostVtbl < > { unsafe extern "system" fn CreateBand < Impl : IBandHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rclsidband : * const :: windows :: core :: GUID , favailable : super::super::Foundation:: BOOL , fvisible : super::super::Foundation:: BOOL , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBandAvailability < Impl : IBandHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rclsidband : * const :: windows :: core :: GUID , favailable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DestroyBand < Impl : IBandHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rclsidband : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateBand : CreateBand :: < Impl , IMPL_OFFSET > , SetBandAvailability : SetBandAvailability :: < Impl , IMPL_OFFSET > , DestroyBand : DestroyBand :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IBandHost < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] pub trait IBandSiteImpl < > : Sized where { fn AddBand ( ) ; fn EnumBands ( ) ; fn QueryBand ( ) ; fn SetBandState ( ) ; fn RemoveBand ( ) ; fn GetBandObject ( ) ; fn SetBandSiteInfo ( ) ; fn GetBandSiteInfo ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] impl < > IBandSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IBandSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IBandSiteVtbl < > { unsafe extern "system" fn AddBand < Impl : IBandSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnumBands < Impl : IBandSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uband : u32 , pdwbandid : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryBand < Impl : IBandSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwbandid : u32 , ppstb : * mut :: windows :: core :: RawPtr , pdwstate : * mut u32 , pszname : super::super::Foundation:: PWSTR , cchname : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBandState < Impl : IBandSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwbandid : u32 , dwmask : u32 , dwstate : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveBand < Impl : IBandSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwbandid : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBandObject < Impl : IBandSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwbandid : u32 , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBandSiteInfo < Impl : IBandSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbsinfo : * const BANDSITEINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBandSiteInfo < Impl : IBandSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbsinfo : * mut BANDSITEINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddBand : AddBand :: < Impl , IMPL_OFFSET > , EnumBands : EnumBands :: < Impl , IMPL_OFFSET > , QueryBand : QueryBand :: < Impl , IMPL_OFFSET > , SetBandState : SetBandState :: < Impl , IMPL_OFFSET > , RemoveBand : RemoveBand :: < Impl , IMPL_OFFSET > , GetBandObject : GetBandObject :: < Impl , IMPL_OFFSET > , SetBandSiteInfo : SetBandSiteInfo :: < Impl , IMPL_OFFSET > , GetBandSiteInfo : GetBandSiteInfo :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IBandSite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IBannerNotificationHandlerImpl < > : Sized where { fn OnBannerEvent ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IBannerNotificationHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IBannerNotificationHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IBannerNotificationHandlerVtbl < > { unsafe extern "system" fn OnBannerEvent < Impl : IBannerNotificationHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , notification : * const BANNER_NOTIFICATION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnBannerEvent : OnBannerEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IBannerNotificationHandler < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Graphics_Gdi" ) ] pub trait IBanneredBarImpl < > : Sized where { fn SetIconSize ( ) ; fn GetIconSize ( ) ; fn SetBitmap ( ) ; fn GetBitmap ( ) ; } # [ cfg ( feature ="Win32_Graphics_Gdi" ) ] impl < > IBanneredBarVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IBanneredBarImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IBanneredBarVtbl < > { unsafe extern "system" fn SetIconSize < Impl : IBanneredBarImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , iicon : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIconSize < Impl : IBanneredBarImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , piicon : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBitmap < Impl : IBanneredBarImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hbitmap : super::super::Graphics::Gdi:: HBITMAP , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBitmap < Impl : IBanneredBarImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phbitmap : * mut super::super::Graphics::Gdi:: HBITMAP , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetIconSize : SetIconSize :: < Impl , IMPL_OFFSET > , GetIconSize : GetIconSize :: < Impl , IMPL_OFFSET > , SetBitmap : SetBitmap :: < Impl , IMPL_OFFSET > , GetBitmap : GetBitmap :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IBanneredBar < > as :: windows :: core :: Interface > :: IID } } pub trait IBrowserFrameOptionsImpl < > : Sized where { fn GetFrameOptions ( ) ; } impl < > IBrowserFrameOptionsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IBrowserFrameOptionsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IBrowserFrameOptionsVtbl < > { unsafe extern "system" fn GetFrameOptions < Impl : IBrowserFrameOptionsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwmask : u32 , pdwoptions : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetFrameOptions : GetFrameOptions :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IBrowserFrameOptions < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IBrowserServiceImpl < > : Sized where { fn GetParentSite ( ) ; fn SetTitle ( ) ; fn GetTitle ( ) ; fn GetOleObject ( ) ; fn GetTravelLog ( ) ; fn ShowControlWindow ( ) ; fn IsControlWindowShown ( ) ; fn IEGetDisplayName ( ) ; fn IEParseDisplayName ( ) ; fn DisplayParseError ( ) ; fn NavigateToPidl ( ) ; fn SetNavigateState ( ) ; fn GetNavigateState ( ) ; fn NotifyRedirect ( ) ; fn UpdateWindowList ( ) ; fn UpdateBackForwardState ( ) ; fn SetFlags ( ) ; fn GetFlags ( ) ; fn CanNavigateNow ( ) ; fn GetPidl ( ) ; fn SetReferrer ( ) ; fn GetBrowserIndex ( ) ; fn GetBrowserByIndex ( ) ; fn GetHistoryObject ( ) ; fn SetHistoryObject ( ) ; fn CacheOLEServer ( ) ; fn GetSetCodePage ( ) ; fn OnHttpEquiv ( ) ; fn GetPalette ( ) ; fn RegisterWindow ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IBrowserServiceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IBrowserServiceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IBrowserServiceVtbl < > { unsafe extern "system" fn GetParentSite < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppipsite : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTitle < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psv : :: windows :: core :: RawPtr , pszname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTitle < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psv : :: windows :: core :: RawPtr , pszname : super::super::Foundation:: PWSTR , cchname : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetOleObject < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppobjv : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTravelLog < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pptl : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowControlWindow < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , id : u32 , fshow : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsControlWindowShown < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , id : u32 , pfshown : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IEGetDisplayName < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , pwszname : super::super::Foundation:: PWSTR , uflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IEParseDisplayName < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uicp : u32 , pwszpath : super::super::Foundation:: PWSTR , ppidlout : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DisplayParseError < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hres : :: windows :: core :: HRESULT , pwszpath : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NavigateToPidl < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , grfhlnf : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetNavigateState < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bnstate : BNSTATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetNavigateState < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbnstate : * mut BNSTATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NotifyRedirect < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psv : :: windows :: core :: RawPtr , pidl : * const Common:: ITEMIDLIST , pfdidbrowse : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateWindowList < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateBackForwardState < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFlags < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , dwflagmask : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFlags < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CanNavigateNow < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPidl < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppidl : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetReferrer < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBrowserIndex < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> u32 { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBrowserByIndex < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwid : u32 , ppunk : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetHistoryObject < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppole : * mut :: windows :: core :: RawPtr , pstm : * mut :: windows :: core :: RawPtr , ppbc : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetHistoryObject < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pole : :: windows :: core :: RawPtr , fislocalanchor : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CacheOLEServer < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pole : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSetCodePage < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarin : * const super::super::System::Com:: VARIANT , pvarout : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnHttpEquiv < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psv : :: windows :: core :: RawPtr , fdone : super::super::Foundation:: BOOL , pvarargin : * const super::super::System::Com:: VARIANT , pvarargout : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPalette < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hpal : * mut super::super::Graphics::Gdi:: HPALETTE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterWindow < Impl : IBrowserServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fforceregister : super::super::Foundation:: BOOL , swc : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetParentSite : GetParentSite :: < Impl , IMPL_OFFSET > , SetTitle : SetTitle :: < Impl , IMPL_OFFSET > , GetTitle : GetTitle :: < Impl , IMPL_OFFSET > , GetOleObject : GetOleObject :: < Impl , IMPL_OFFSET > , GetTravelLog : GetTravelLog :: < Impl , IMPL_OFFSET > , ShowControlWindow : ShowControlWindow :: < Impl , IMPL_OFFSET > , IsControlWindowShown : IsControlWindowShown :: < Impl , IMPL_OFFSET > , IEGetDisplayName : IEGetDisplayName :: < Impl , IMPL_OFFSET > , IEParseDisplayName : IEParseDisplayName :: < Impl , IMPL_OFFSET > , DisplayParseError : DisplayParseError :: < Impl , IMPL_OFFSET > , NavigateToPidl : NavigateToPidl :: < Impl , IMPL_OFFSET > , SetNavigateState : SetNavigateState :: < Impl , IMPL_OFFSET > , GetNavigateState : GetNavigateState :: < Impl , IMPL_OFFSET > , NotifyRedirect : NotifyRedirect :: < Impl , IMPL_OFFSET > , UpdateWindowList : UpdateWindowList :: < Impl , IMPL_OFFSET > , UpdateBackForwardState : UpdateBackForwardState :: < Impl , IMPL_OFFSET > , SetFlags : SetFlags :: < Impl , IMPL_OFFSET > , GetFlags : GetFlags :: < Impl , IMPL_OFFSET > , CanNavigateNow : CanNavigateNow :: < Impl , IMPL_OFFSET > , GetPidl : GetPidl :: < Impl , IMPL_OFFSET > , SetReferrer : SetReferrer :: < Impl , IMPL_OFFSET > , GetBrowserIndex : GetBrowserIndex :: < Impl , IMPL_OFFSET > , GetBrowserByIndex : GetBrowserByIndex :: < Impl , IMPL_OFFSET > , GetHistoryObject : GetHistoryObject :: < Impl , IMPL_OFFSET > , SetHistoryObject : SetHistoryObject :: < Impl , IMPL_OFFSET > , CacheOLEServer : CacheOLEServer :: < Impl , IMPL_OFFSET > , GetSetCodePage : GetSetCodePage :: < Impl , IMPL_OFFSET > , OnHttpEquiv : OnHttpEquiv :: < Impl , IMPL_OFFSET > , GetPalette : GetPalette :: < Impl , IMPL_OFFSET > , RegisterWindow : RegisterWindow :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IBrowserService < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Controls" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IBrowserService2Impl < > : Sized + IBrowserServiceImpl where { fn WndProcBS ( ) ; fn SetAsDefFolderSettings ( ) ; fn GetViewRect ( ) ; fn OnSize ( ) ; fn OnCreate ( ) ; fn OnCommand ( ) ; fn OnDestroy ( ) ; fn OnNotify ( ) ; fn OnSetFocus ( ) ; fn OnFrameWindowActivateBS ( ) ; fn ReleaseShellView ( ) ; fn ActivatePendingView ( ) ; fn CreateViewWindow ( ) ; fn CreateBrowserPropSheetExt ( ) ; fn GetViewWindow ( ) ; fn GetBaseBrowserData ( ) ; fn PutBaseBrowserData ( ) ; fn InitializeTravelLog ( ) ; fn SetTopBrowser ( ) ; fn Offline ( ) ; fn AllowViewResize ( ) ; fn SetActivateState ( ) ; fn UpdateSecureLockIcon ( ) ; fn InitializeDownloadManager ( ) ; fn InitializeTransitionSite ( ) ; fn _Initialize ( ) ; fn _CancelPendingNavigationAsync ( ) ; fn _CancelPendingView ( ) ; fn _MaySaveChanges ( ) ; fn _PauseOrResumeView ( ) ; fn _DisableModeless ( ) ; fn _NavigateToPidl2 ( ) ; fn _TryShell2Rename ( ) ; fn _SwitchActivationNow ( ) ; fn _ExecChildren ( ) ; fn _SendChildren ( ) ; fn GetFolderSetData ( ) ; fn _OnFocusChange ( ) ; fn v_ShowHideChildWindows ( ) ; fn _get_itbLastFocus ( ) ; fn _put_itbLastFocus ( ) ; fn _UIActivateView ( ) ; fn _GetViewBorderRect ( ) ; fn _UpdateViewRectSize ( ) ; fn _ResizeNextBorder ( ) ; fn _ResizeView ( ) ; fn _GetEffectiveClientArea ( ) ; fn v_GetViewStream ( ) ; fn ForwardViewMsg ( ) ; fn SetAcceleratorMenu ( ) ; fn _GetToolbarCount ( ) ; fn _GetToolbarItem ( ) ; fn _SaveToolbars ( ) ; fn _LoadToolbars ( ) ; fn _CloseAndReleaseToolbars ( ) ; fn v_MayGetNextToolbarFocus ( ) ; fn _ResizeNextBorderHelper ( ) ; fn _FindTBar ( ) ; fn _SetFocus ( ) ; fn v_MayTranslateAccelerator ( ) ; fn _GetBorderDWHelper ( ) ; fn v_CheckZoneCrossing ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Controls" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IBrowserService2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IBrowserService2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IBrowserService2Vtbl < > { unsafe extern "system" fn WndProcBS < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , umsg : u32 , wparam : super::super::Foundation:: WPARAM , lparam : super::super::Foundation:: LPARAM , ) -> super::super::Foundation:: LRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetAsDefFolderSettings < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetViewRect < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prc : * mut super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnSize < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , wparam : super::super::Foundation:: WPARAM , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnCreate < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcs : * const super::WindowsAndMessaging:: CREATESTRUCTW , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnCommand < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , wparam : super::super::Foundation:: WPARAM , lparam : super::super::Foundation:: LPARAM , ) -> super::super::Foundation:: LRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnDestroy < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnNotify < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnm : * const super::Controls:: NMHDR , ) -> super::super::Foundation:: LRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnSetFocus < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnFrameWindowActivateBS < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , factive : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReleaseShellView < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ActivatePendingView < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateViewWindow < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psvnew : :: windows :: core :: RawPtr , psvold : :: windows :: core :: RawPtr , prcview : * const super::super::Foundation:: RECT , phwnd : * mut super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateBrowserPropSheetExt < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetViewWindow < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phwndview : * mut super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBaseBrowserData < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbbd : * mut * mut BASEBROWSERDATALH , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PutBaseBrowserData < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> * mut BASEBROWSERDATALH { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InitializeTravelLog < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptl : :: windows :: core :: RawPtr , dw : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTopBrowser < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Offline < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , icmd : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AllowViewResize < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , f : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetActivateState < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , u : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateSecureLockIcon < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , esecurelock : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InitializeDownloadManager < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InitializeTransitionSite < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _Initialize < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , pauto : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _CancelPendingNavigationAsync < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _CancelPendingView < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _MaySaveChanges < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _PauseOrResumeView < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fpaused : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _DisableModeless < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NavigateToPidl2 < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , grfhlnf : u32 , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _TryShell2Rename < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psv : :: windows :: core :: RawPtr , pidlnew : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _SwitchActivationNow < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _ExecChildren < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkbar : * mut :: core :: ffi :: c_void , fbroadcast : super::super::Foundation:: BOOL , pguidcmdgroup : * const :: windows :: core :: GUID , ncmdid : u32 , ncmdexecopt : u32 , pvarargin : * const super::super::System::Com:: VARIANT , pvarargout : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _SendChildren < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndbar : super::super::Foundation:: HWND , fbroadcast : super::super::Foundation:: BOOL , umsg : u32 , wparam : super::super::Foundation:: WPARAM , lparam : super::super::Foundation:: LPARAM , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolderSetData < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfsd : * mut FOLDERSETDATA , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _OnFocusChange < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , itb : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn v_ShowHideChildWindows < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fchildonly : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _get_itbLastFocus < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> u32 { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _put_itbLastFocus < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , itblastfocus : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _UIActivateView < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ustate : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _GetViewBorderRect < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prc : * mut super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _UpdateViewRectSize < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _ResizeNextBorder < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , itb : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _ResizeView < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _GetEffectiveClientArea < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lprectborder : * mut super::super::Foundation:: RECT , hmon : super::super::Graphics::Gdi:: HMONITOR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn v_GetViewStream < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * mut Common:: ITEMIDLIST , grfmode : u32 , pwszname : super::super::Foundation:: PWSTR , ) -> :: core :: option :: Option < super::super::System::Com:: IStream > { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ForwardViewMsg < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , umsg : u32 , wparam : super::super::Foundation:: WPARAM , lparam : super::super::Foundation:: LPARAM , ) -> super::super::Foundation:: LRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetAcceleratorMenu < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hacc : super::WindowsAndMessaging:: HACCEL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _GetToolbarCount < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> i32 { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _GetToolbarItem < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , itb : i32 , ) -> * mut TOOLBARITEM { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _SaveToolbars < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstm : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _LoadToolbars < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstm : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _CloseAndReleaseToolbars < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fclose : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn v_MayGetNextToolbarFocus < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpmsg : * const super::WindowsAndMessaging:: MSG , itbnext : u32 , citb : i32 , pptbi : * mut * mut TOOLBARITEM , phwnd : * mut super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _ResizeNextBorderHelper < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , itb : u32 , busehmonitor : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _FindTBar < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punksrc : * mut :: core :: ffi :: c_void , ) -> u32 { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _SetFocus < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptbi : * const TOOLBARITEM , hwnd : super::super::Foundation:: HWND , lpmsg : * const super::WindowsAndMessaging:: MSG , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn v_MayTranslateAccelerator < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmsg : * mut super::WindowsAndMessaging:: MSG , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _GetBorderDWHelper < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punksrc : * mut :: core :: ffi :: c_void , lprectborder : * mut super::super::Foundation:: RECT , busehmonitor : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn v_CheckZoneCrossing < Impl : IBrowserService2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , WndProcBS : WndProcBS :: < Impl , IMPL_OFFSET > , SetAsDefFolderSettings : SetAsDefFolderSettings :: < Impl , IMPL_OFFSET > , GetViewRect : GetViewRect :: < Impl , IMPL_OFFSET > , OnSize : OnSize :: < Impl , IMPL_OFFSET > , OnCreate : OnCreate :: < Impl , IMPL_OFFSET > , OnCommand : OnCommand :: < Impl , IMPL_OFFSET > , OnDestroy : OnDestroy :: < Impl , IMPL_OFFSET > , OnNotify : OnNotify :: < Impl , IMPL_OFFSET > , OnSetFocus : OnSetFocus :: < Impl , IMPL_OFFSET > , OnFrameWindowActivateBS : OnFrameWindowActivateBS :: < Impl , IMPL_OFFSET > , ReleaseShellView : ReleaseShellView :: < Impl , IMPL_OFFSET > , ActivatePendingView : ActivatePendingView :: < Impl , IMPL_OFFSET > , CreateViewWindow : CreateViewWindow :: < Impl , IMPL_OFFSET > , CreateBrowserPropSheetExt : CreateBrowserPropSheetExt :: < Impl , IMPL_OFFSET > , GetViewWindow : GetViewWindow :: < Impl , IMPL_OFFSET > , GetBaseBrowserData : GetBaseBrowserData :: < Impl , IMPL_OFFSET > , PutBaseBrowserData : PutBaseBrowserData :: < Impl , IMPL_OFFSET > , InitializeTravelLog : InitializeTravelLog :: < Impl , IMPL_OFFSET > , SetTopBrowser : SetTopBrowser :: < Impl , IMPL_OFFSET > , Offline : Offline :: < Impl , IMPL_OFFSET > , AllowViewResize : AllowViewResize :: < Impl , IMPL_OFFSET > , SetActivateState : SetActivateState :: < Impl , IMPL_OFFSET > , UpdateSecureLockIcon : UpdateSecureLockIcon :: < Impl , IMPL_OFFSET > , InitializeDownloadManager : InitializeDownloadManager :: < Impl , IMPL_OFFSET > , InitializeTransitionSite : InitializeTransitionSite :: < Impl , IMPL_OFFSET > , _Initialize : _Initialize :: < Impl , IMPL_OFFSET > , _CancelPendingNavigationAsync : _CancelPendingNavigationAsync :: < Impl , IMPL_OFFSET > , _CancelPendingView : _CancelPendingView :: < Impl , IMPL_OFFSET > , _MaySaveChanges : _MaySaveChanges :: < Impl , IMPL_OFFSET > , _PauseOrResumeView : _PauseOrResumeView :: < Impl , IMPL_OFFSET > , _DisableModeless : _DisableModeless :: < Impl , IMPL_OFFSET > , _NavigateToPidl2 : _NavigateToPidl2 :: < Impl , IMPL_OFFSET > , _TryShell2Rename : _TryShell2Rename :: < Impl , IMPL_OFFSET > , _SwitchActivationNow : _SwitchActivationNow :: < Impl , IMPL_OFFSET > , _ExecChildren : _ExecChildren :: < Impl , IMPL_OFFSET > , _SendChildren : _SendChildren :: < Impl , IMPL_OFFSET > , GetFolderSetData : GetFolderSetData :: < Impl , IMPL_OFFSET > , _OnFocusChange : _OnFocusChange :: < Impl , IMPL_OFFSET > , v_ShowHideChildWindows : v_ShowHideChildWindows :: < Impl , IMPL_OFFSET > , _get_itbLastFocus : _get_itbLastFocus :: < Impl , IMPL_OFFSET > , _put_itbLastFocus : _put_itbLastFocus :: < Impl , IMPL_OFFSET > , _UIActivateView : _UIActivateView :: < Impl , IMPL_OFFSET > , _GetViewBorderRect : _GetViewBorderRect :: < Impl , IMPL_OFFSET > , _UpdateViewRectSize : _UpdateViewRectSize :: < Impl , IMPL_OFFSET > , _ResizeNextBorder : _ResizeNextBorder :: < Impl , IMPL_OFFSET > , _ResizeView : _ResizeView :: < Impl , IMPL_OFFSET > , _GetEffectiveClientArea : _GetEffectiveClientArea :: < Impl , IMPL_OFFSET > , v_GetViewStream : v_GetViewStream :: < Impl , IMPL_OFFSET > , ForwardViewMsg : ForwardViewMsg :: < Impl , IMPL_OFFSET > , SetAcceleratorMenu : SetAcceleratorMenu :: < Impl , IMPL_OFFSET > , _GetToolbarCount : _GetToolbarCount :: < Impl , IMPL_OFFSET > , _GetToolbarItem : _GetToolbarItem :: < Impl , IMPL_OFFSET > , _SaveToolbars : _SaveToolbars :: < Impl , IMPL_OFFSET > , _LoadToolbars : _LoadToolbars :: < Impl , IMPL_OFFSET > , _CloseAndReleaseToolbars : _CloseAndReleaseToolbars :: < Impl , IMPL_OFFSET > , v_MayGetNextToolbarFocus : v_MayGetNextToolbarFocus :: < Impl , IMPL_OFFSET > , _ResizeNextBorderHelper : _ResizeNextBorderHelper :: < Impl , IMPL_OFFSET > , _FindTBar : _FindTBar :: < Impl , IMPL_OFFSET > , _SetFocus : _SetFocus :: < Impl , IMPL_OFFSET > , v_MayTranslateAccelerator : v_MayTranslateAccelerator :: < Impl , IMPL_OFFSET > , _GetBorderDWHelper : _GetBorderDWHelper :: < Impl , IMPL_OFFSET > , v_CheckZoneCrossing : v_CheckZoneCrossing :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IBrowserService2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Controls" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IBrowserService3Impl < > : Sized + IBrowserService2Impl + IBrowserServiceImpl where { fn _PositionViewWindow ( ) ; fn IEParseDisplayNameEx ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Controls" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IBrowserService3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IBrowserService3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IBrowserService3Vtbl < > { unsafe extern "system" fn _PositionViewWindow < Impl : IBrowserService3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , prc : * const super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IEParseDisplayNameEx < Impl : IBrowserService3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uicp : u32 , pwszpath : super::super::Foundation:: PWSTR , dwflags : u32 , ppidlout : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , _PositionViewWindow : _PositionViewWindow :: < Impl , IMPL_OFFSET > , IEParseDisplayNameEx : IEParseDisplayNameEx :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IBrowserService3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Controls" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IBrowserService4Impl < > : Sized + IBrowserService3Impl + IBrowserService2Impl + IBrowserServiceImpl where { fn ActivateView ( ) ; fn SaveViewState ( ) ; fn _ResizeAllBorders ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Controls" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IBrowserService4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IBrowserService4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IBrowserService4Vtbl < > { unsafe extern "system" fn ActivateView < Impl : IBrowserService4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fpendingview : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SaveViewState < Impl : IBrowserService4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _ResizeAllBorders < Impl : IBrowserService4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , ActivateView : ActivateView :: < Impl , IMPL_OFFSET > , SaveViewState : SaveViewState :: < Impl , IMPL_OFFSET > , _ResizeAllBorders : _ResizeAllBorders :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IBrowserService4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ICDBurnImpl < > : Sized where { fn GetRecorderDriveLetter ( ) ; fn Burn ( ) ; fn HasRecordableDrive ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ICDBurnVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICDBurnImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICDBurnVtbl < > { unsafe extern "system" fn GetRecorderDriveLetter < Impl : ICDBurnImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdrive : super::super::Foundation:: PWSTR , cch : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Burn < Impl : ICDBurnImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HasRecordableDrive < Impl : ICDBurnImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfhasrecorder : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetRecorderDriveLetter : GetRecorderDriveLetter :: < Impl , IMPL_OFFSET > , Burn : Burn :: < Impl , IMPL_OFFSET > , HasRecordableDrive : HasRecordableDrive :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICDBurn < > as :: windows :: core :: Interface > :: IID } } pub trait ICDBurnExtImpl < > : Sized where { fn GetSupportedActionTypes ( ) ; } impl < > ICDBurnExtVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICDBurnExtImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICDBurnExtVtbl < > { unsafe extern "system" fn GetSupportedActionTypes < Impl : ICDBurnExtImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwactions : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetSupportedActionTypes : GetSupportedActionTypes :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICDBurnExt < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait ICategorizerImpl < > : Sized where { fn GetDescription ( ) ; fn GetCategory ( ) ; fn GetCategoryInfo ( ) ; fn CompareCategory ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > ICategorizerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICategorizerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICategorizerVtbl < > { unsafe extern "system" fn GetDescription < Impl : ICategorizerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdesc : super::super::Foundation:: PWSTR , cch : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCategory < Impl : ICategorizerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cidl : u32 , apidl : * const * const Common:: ITEMIDLIST , rgcategoryids : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCategoryInfo < Impl : ICategorizerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcategoryid : u32 , pci : * mut CATEGORY_INFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CompareCategory < Impl : ICategorizerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , csfflags : CATSORT_FLAGS , dwcategoryid1 : u32 , dwcategoryid2 : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetDescription : GetDescription :: < Impl , IMPL_OFFSET > , GetCategory : GetCategory :: < Impl , IMPL_OFFSET > , GetCategoryInfo : GetCategoryInfo :: < Impl , IMPL_OFFSET > , CompareCategory : CompareCategory :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICategorizer < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait ICategoryProviderImpl < > : Sized where { fn CanCategorizeOnSCID ( ) ; fn GetDefaultCategory ( ) ; fn GetCategoryForSCID ( ) ; fn EnumCategories ( ) ; fn GetCategoryName ( ) ; fn CreateCategory ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > ICategoryProviderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICategoryProviderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICategoryProviderVtbl < > { unsafe extern "system" fn CanCategorizeOnSCID < Impl : ICategoryProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pscid : * const PropertiesSystem:: PROPERTYKEY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDefaultCategory < Impl : ICategoryProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pguid : * mut :: windows :: core :: GUID , pscid : * mut PropertiesSystem:: PROPERTYKEY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCategoryForSCID < Impl : ICategoryProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pscid : * const PropertiesSystem:: PROPERTYKEY , pguid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnumCategories < Impl : ICategoryProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , penum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCategoryName < Impl : ICategoryProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pguid : * const :: windows :: core :: GUID , pszname : super::super::Foundation:: PWSTR , cch : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateCategory < Impl : ICategoryProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pguid : * const :: windows :: core :: GUID , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CanCategorizeOnSCID : CanCategorizeOnSCID :: < Impl , IMPL_OFFSET > , GetDefaultCategory : GetDefaultCategory :: < Impl , IMPL_OFFSET > , GetCategoryForSCID : GetCategoryForSCID :: < Impl , IMPL_OFFSET > , EnumCategories : EnumCategories :: < Impl , IMPL_OFFSET > , GetCategoryName : GetCategoryName :: < Impl , IMPL_OFFSET > , CreateCategory : CreateCategory :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICategoryProvider < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_PropertiesSystem" ) ] pub trait IColumnManagerImpl < > : Sized where { fn SetColumnInfo ( ) ; fn GetColumnInfo ( ) ; fn GetColumnCount ( ) ; fn GetColumns ( ) ; fn SetColumns ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_PropertiesSystem" ) ] impl < > IColumnManagerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IColumnManagerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IColumnManagerVtbl < > { unsafe extern "system" fn SetColumnInfo < Impl : IColumnManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propkey : * const PropertiesSystem:: PROPERTYKEY , pcmci : * const CM_COLUMNINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetColumnInfo < Impl : IColumnManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propkey : * const PropertiesSystem:: PROPERTYKEY , pcmci : * mut CM_COLUMNINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetColumnCount < Impl : IColumnManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : CM_ENUM_FLAGS , pucount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetColumns < Impl : IColumnManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : CM_ENUM_FLAGS , rgkeyorder : * mut PropertiesSystem:: PROPERTYKEY , ccolumns : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetColumns < Impl : IColumnManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rgkeyorder : * const PropertiesSystem:: PROPERTYKEY , cvisible : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetColumnInfo : SetColumnInfo :: < Impl , IMPL_OFFSET > , GetColumnInfo : GetColumnInfo :: < Impl , IMPL_OFFSET > , GetColumnCount : GetColumnCount :: < Impl , IMPL_OFFSET > , GetColumns : GetColumns :: < Impl , IMPL_OFFSET > , SetColumns : SetColumns :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IColumnManager < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait IColumnProviderImpl < > : Sized where { fn Initialize ( ) ; fn GetColumnInfo ( ) ; fn GetItemData ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > IColumnProviderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IColumnProviderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IColumnProviderVtbl < > { unsafe extern "system" fn Initialize < Impl : IColumnProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psci : * const SHCOLUMNINIT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetColumnInfo < Impl : IColumnProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwindex : u32 , psci : * mut SHCOLUMNINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItemData < Impl : IColumnProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pscid : * const PropertiesSystem:: PROPERTYKEY , pscd : * const SHCOLUMNDATA , pvardata : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , GetColumnInfo : GetColumnInfo :: < Impl , IMPL_OFFSET > , GetItemData : GetItemData :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IColumnProvider < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait ICommDlgBrowserImpl < > : Sized where { fn OnDefaultCommand ( ) ; fn OnStateChange ( ) ; fn IncludeObject ( ) ; } # [ cfg ( all ( feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > ICommDlgBrowserVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICommDlgBrowserImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICommDlgBrowserVtbl < > { unsafe extern "system" fn OnDefaultCommand < Impl : ICommDlgBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppshv : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnStateChange < Impl : ICommDlgBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppshv : :: windows :: core :: RawPtr , uchange : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IncludeObject < Impl : ICommDlgBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppshv : :: windows :: core :: RawPtr , pidl : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnDefaultCommand : OnDefaultCommand :: < Impl , IMPL_OFFSET > , OnStateChange : OnStateChange :: < Impl , IMPL_OFFSET > , IncludeObject : IncludeObject :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICommDlgBrowser < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait ICommDlgBrowser2Impl < > : Sized + ICommDlgBrowserImpl where { fn Notify ( ) ; fn GetDefaultMenuText ( ) ; fn GetViewFlags ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > ICommDlgBrowser2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICommDlgBrowser2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICommDlgBrowser2Vtbl < > { unsafe extern "system" fn Notify < Impl : ICommDlgBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppshv : :: windows :: core :: RawPtr , dwnotifytype : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDefaultMenuText < Impl : ICommDlgBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppshv : :: windows :: core :: RawPtr , psztext : super::super::Foundation:: PWSTR , cchmax : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetViewFlags < Impl : ICommDlgBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Notify : Notify :: < Impl , IMPL_OFFSET > , GetDefaultMenuText : GetDefaultMenuText :: < Impl , IMPL_OFFSET > , GetViewFlags : GetViewFlags :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICommDlgBrowser2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait ICommDlgBrowser3Impl < > : Sized + ICommDlgBrowser2Impl + ICommDlgBrowserImpl where { fn OnColumnClicked ( ) ; fn GetCurrentFilter ( ) ; fn OnPreViewCreated ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > ICommDlgBrowser3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICommDlgBrowser3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICommDlgBrowser3Vtbl < > { unsafe extern "system" fn OnColumnClicked < Impl : ICommDlgBrowser3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppshv : :: windows :: core :: RawPtr , icolumn : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCurrentFilter < Impl : ICommDlgBrowser3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszfilespec : super::super::Foundation:: PWSTR , cchfilespec : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnPreViewCreated < Impl : ICommDlgBrowser3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppshv : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , OnColumnClicked : OnColumnClicked :: < Impl , IMPL_OFFSET > , GetCurrentFilter : GetCurrentFilter :: < Impl , IMPL_OFFSET > , OnPreViewCreated : OnPreViewCreated :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICommDlgBrowser3 < > as :: windows :: core :: Interface > :: IID } } pub trait IComputerInfoChangeNotifyImpl < > : Sized where { fn ComputerInfoChanged ( ) ; } impl < > IComputerInfoChangeNotifyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IComputerInfoChangeNotifyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IComputerInfoChangeNotifyVtbl < > { unsafe extern "system" fn ComputerInfoChanged < Impl : IComputerInfoChangeNotifyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ComputerInfoChanged : ComputerInfoChanged :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IComputerInfoChangeNotify < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait IConnectableCredentialProviderCredentialImpl < > : Sized + ICredentialProviderCredentialImpl where { fn Connect ( ) ; fn Disconnect ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > IConnectableCredentialProviderCredentialVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IConnectableCredentialProviderCredentialImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IConnectableCredentialProviderCredentialVtbl < > { unsafe extern "system" fn Connect < Impl : IConnectableCredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pqcws : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Disconnect < Impl : IConnectableCredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Connect : Connect :: < Impl , IMPL_OFFSET > , Disconnect : Disconnect :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IConnectableCredentialProviderCredential < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IContactManagerInteropImpl < > : Sized where { fn ShowContactCardForWindow ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IContactManagerInteropVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IContactManagerInteropImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IContactManagerInteropVtbl < > { unsafe extern "system" fn ShowContactCardForWindow < Impl : IContactManagerInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , appwindow : super::super::Foundation:: HWND , contact : * mut :: core :: ffi :: c_void , selection : * const super::super::Foundation:: RECT , preferredplacement : FLYOUT_PLACEMENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ShowContactCardForWindow : ShowContactCardForWindow :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IContactManagerInterop < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IContextMenuImpl < > : Sized where { fn QueryContextMenu ( ) ; fn InvokeCommand ( ) ; fn GetCommandString ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IContextMenuVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IContextMenuImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IContextMenuVtbl < > { unsafe extern "system" fn QueryContextMenu < Impl : IContextMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hmenu : super::WindowsAndMessaging:: HMENU , indexmenu : u32 , idcmdfirst : u32 , idcmdlast : u32 , uflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvokeCommand < Impl : IContextMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pici : * const CMINVOKECOMMANDINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCommandString < Impl : IContextMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , idcmd : usize , utype : u32 , preserved : * mut u32 , pszname : super::super::Foundation:: PSTR , cchmax : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , QueryContextMenu : QueryContextMenu :: < Impl , IMPL_OFFSET > , InvokeCommand : InvokeCommand :: < Impl , IMPL_OFFSET > , GetCommandString : GetCommandString :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IContextMenu < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IContextMenu2Impl < > : Sized + IContextMenuImpl where { fn HandleMenuMsg ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IContextMenu2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IContextMenu2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IContextMenu2Vtbl < > { unsafe extern "system" fn HandleMenuMsg < Impl : IContextMenu2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , umsg : u32 , wparam : super::super::Foundation:: WPARAM , lparam : super::super::Foundation:: LPARAM , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , HandleMenuMsg : HandleMenuMsg :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IContextMenu2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IContextMenu3Impl < > : Sized + IContextMenu2Impl + IContextMenuImpl where { fn HandleMenuMsg2 ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IContextMenu3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IContextMenu3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IContextMenu3Vtbl < > { unsafe extern "system" fn HandleMenuMsg2 < Impl : IContextMenu3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , umsg : u32 , wparam : super::super::Foundation:: WPARAM , lparam : super::super::Foundation:: LPARAM , plresult : * mut super::super::Foundation:: LRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , HandleMenuMsg2 : HandleMenuMsg2 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IContextMenu3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IContextMenuCBImpl < > : Sized where { fn CallBack ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IContextMenuCBVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IContextMenuCBImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IContextMenuCBVtbl < > { unsafe extern "system" fn CallBack < Impl : IContextMenuCBImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psf : :: windows :: core :: RawPtr , hwndowner : super::super::Foundation:: HWND , pdtobj : :: windows :: core :: RawPtr , umsg : u32 , wparam : super::super::Foundation:: WPARAM , lparam : super::super::Foundation:: LPARAM , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CallBack : CallBack :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IContextMenuCB < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IContextMenuSiteImpl < > : Sized where { fn DoContextMenuPopup ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IContextMenuSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IContextMenuSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IContextMenuSiteVtbl < > { unsafe extern "system" fn DoContextMenuPopup < Impl : IContextMenuSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkcontextmenu : * mut :: core :: ffi :: c_void , fflags : u32 , pt : super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , DoContextMenuPopup : DoContextMenuPopup :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IContextMenuSite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ICopyHookAImpl < > : Sized where { fn CopyCallback ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ICopyHookAVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICopyHookAImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICopyHookAVtbl < > { unsafe extern "system" fn CopyCallback < Impl : ICopyHookAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , wfunc : u32 , wflags : u32 , pszsrcfile : super::super::Foundation:: PSTR , dwsrcattribs : u32 , pszdestfile : super::super::Foundation:: PSTR , dwdestattribs : u32 , ) -> u32 { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CopyCallback : CopyCallback :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICopyHookA < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ICopyHookWImpl < > : Sized where { fn CopyCallback ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ICopyHookWVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICopyHookWImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICopyHookWVtbl < > { unsafe extern "system" fn CopyCallback < Impl : ICopyHookWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , wfunc : u32 , wflags : u32 , pszsrcfile : super::super::Foundation:: PWSTR , dwsrcattribs : u32 , pszdestfile : super::super::Foundation:: PWSTR , dwdestattribs : u32 , ) -> u32 { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CopyCallback : CopyCallback :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICopyHookW < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ICreateProcessInputsImpl < > : Sized where { fn GetCreateFlags ( ) ; fn SetCreateFlags ( ) ; fn AddCreateFlags ( ) ; fn SetHotKey ( ) ; fn AddStartupFlags ( ) ; fn SetTitle ( ) ; fn SetEnvironmentVariable ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ICreateProcessInputsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICreateProcessInputsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICreateProcessInputsVtbl < > { unsafe extern "system" fn GetCreateFlags < Impl : ICreateProcessInputsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwcreationflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCreateFlags < Impl : ICreateProcessInputsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcreationflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddCreateFlags < Impl : ICreateProcessInputsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcreationflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetHotKey < Impl : ICreateProcessInputsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , whotkey : u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddStartupFlags < Impl : ICreateProcessInputsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwstartupinfoflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTitle < Impl : ICreateProcessInputsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psztitle : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetEnvironmentVariable < Impl : ICreateProcessInputsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszname : super::super::Foundation:: PWSTR , pszvalue : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetCreateFlags : GetCreateFlags :: < Impl , IMPL_OFFSET > , SetCreateFlags : SetCreateFlags :: < Impl , IMPL_OFFSET > , AddCreateFlags : AddCreateFlags :: < Impl , IMPL_OFFSET > , SetHotKey : SetHotKey :: < Impl , IMPL_OFFSET > , AddStartupFlags : AddStartupFlags :: < Impl , IMPL_OFFSET > , SetTitle : SetTitle :: < Impl , IMPL_OFFSET > , SetEnvironmentVariable : SetEnvironmentVariable :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICreateProcessInputs < > as :: windows :: core :: Interface > :: IID } } pub trait ICreatingProcessImpl < > : Sized where { fn OnCreating ( ) ; } impl < > ICreatingProcessVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICreatingProcessImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICreatingProcessVtbl < > { unsafe extern "system" fn OnCreating < Impl : ICreatingProcessImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnCreating : OnCreating :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICreatingProcess < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ICredentialProviderImpl < > : Sized where { fn SetUsageScenario ( ) ; fn SetSerialization ( ) ; fn Advise ( ) ; fn UnAdvise ( ) ; fn GetFieldDescriptorCount ( ) ; fn GetFieldDescriptorAt ( ) ; fn GetCredentialCount ( ) ; fn GetCredentialAt ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ICredentialProviderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICredentialProviderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICredentialProviderVtbl < > { unsafe extern "system" fn SetUsageScenario < Impl : ICredentialProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cpus : CREDENTIAL_PROVIDER_USAGE_SCENARIO , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSerialization < Impl : ICredentialProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpcs : * const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Advise < Impl : ICredentialProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpe : :: windows :: core :: RawPtr , upadvisecontext : usize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnAdvise < Impl : ICredentialProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFieldDescriptorCount < Impl : ICredentialProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwcount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFieldDescriptorAt < Impl : ICredentialProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwindex : u32 , ppcpfd : * mut * mut CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCredentialCount < Impl : ICredentialProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwcount : * mut u32 , pdwdefault : * mut u32 , pbautologonwithdefault : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCredentialAt < Impl : ICredentialProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwindex : u32 , ppcpc : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetUsageScenario : SetUsageScenario :: < Impl , IMPL_OFFSET > , SetSerialization : SetSerialization :: < Impl , IMPL_OFFSET > , Advise : Advise :: < Impl , IMPL_OFFSET > , UnAdvise : UnAdvise :: < Impl , IMPL_OFFSET > , GetFieldDescriptorCount : GetFieldDescriptorCount :: < Impl , IMPL_OFFSET > , GetFieldDescriptorAt : GetFieldDescriptorAt :: < Impl , IMPL_OFFSET > , GetCredentialCount : GetCredentialCount :: < Impl , IMPL_OFFSET > , GetCredentialAt : GetCredentialAt :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICredentialProvider < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait ICredentialProviderCredentialImpl < > : Sized where { fn Advise ( ) ; fn UnAdvise ( ) ; fn SetSelected ( ) ; fn SetDeselected ( ) ; fn GetFieldState ( ) ; fn GetStringValue ( ) ; fn GetBitmapValue ( ) ; fn GetCheckboxValue ( ) ; fn GetSubmitButtonValue ( ) ; fn GetComboBoxValueCount ( ) ; fn GetComboBoxValueAt ( ) ; fn SetStringValue ( ) ; fn SetCheckboxValue ( ) ; fn SetComboBoxSelectedValue ( ) ; fn CommandLinkClicked ( ) ; fn GetSerialization ( ) ; fn ReportResult ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > ICredentialProviderCredentialVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICredentialProviderCredentialImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICredentialProviderCredentialVtbl < > { unsafe extern "system" fn Advise < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpce : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnAdvise < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSelected < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbautologon : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDeselected < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFieldState < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwfieldid : u32 , pcpfs : * mut CREDENTIAL_PROVIDER_FIELD_STATE , pcpfis : * mut CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetStringValue < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwfieldid : u32 , ppsz : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBitmapValue < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwfieldid : u32 , phbmp : * mut super::super::Graphics::Gdi:: HBITMAP , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCheckboxValue < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwfieldid : u32 , pbchecked : * mut super::super::Foundation:: BOOL , ppszlabel : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSubmitButtonValue < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwfieldid : u32 , pdwadjacentto : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetComboBoxValueCount < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwfieldid : u32 , pcitems : * mut u32 , pdwselecteditem : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetComboBoxValueAt < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwfieldid : u32 , dwitem : u32 , ppszitem : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetStringValue < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwfieldid : u32 , psz : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCheckboxValue < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwfieldid : u32 , bchecked : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetComboBoxSelectedValue < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwfieldid : u32 , dwselecteditem : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CommandLinkClicked < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwfieldid : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSerialization < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpgsr : * mut CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE , pcpcs : * mut CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION , ppszoptionalstatustext : * mut super::super::Foundation:: PWSTR , pcpsioptionalstatusicon : * mut CREDENTIAL_PROVIDER_STATUS_ICON , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReportResult < Impl : ICredentialProviderCredentialImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ntsstatus : super::super::Foundation:: NTSTATUS , ntssubstatus : super::super::Foundation:: NTSTATUS , ppszoptionalstatustext : * mut super::super::Foundation:: PWSTR , pcpsioptionalstatusicon : * mut CREDENTIAL_PROVIDER_STATUS_ICON , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Advise : Advise :: < Impl , IMPL_OFFSET > , UnAdvise : UnAdvise :: < Impl , IMPL_OFFSET > , SetSelected : SetSelected :: < Impl , IMPL_OFFSET > , SetDeselected : SetDeselected :: < Impl , IMPL_OFFSET > , GetFieldState : GetFieldState :: < Impl , IMPL_OFFSET > , GetStringValue : GetStringValue :: < Impl , IMPL_OFFSET > , GetBitmapValue : GetBitmapValue :: < Impl , IMPL_OFFSET > , GetCheckboxValue : GetCheckboxValue :: < Impl , IMPL_OFFSET > , GetSubmitButtonValue : GetSubmitButtonValue :: < Impl , IMPL_OFFSET > , GetComboBoxValueCount : GetComboBoxValueCount :: < Impl , IMPL_OFFSET > , GetComboBoxValueAt : GetComboBoxValueAt :: < Impl , IMPL_OFFSET > , SetStringValue : SetStringValue :: < Impl , IMPL_OFFSET > , SetCheckboxValue : SetCheckboxValue :: < Impl , IMPL_OFFSET > , SetComboBoxSelectedValue : SetComboBoxSelectedValue :: < Impl , IMPL_OFFSET > , CommandLinkClicked : CommandLinkClicked :: < Impl , IMPL_OFFSET > , GetSerialization : GetSerialization :: < Impl , IMPL_OFFSET > , ReportResult : ReportResult :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICredentialProviderCredential < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait ICredentialProviderCredential2Impl < > : Sized + ICredentialProviderCredentialImpl where { fn GetUserSid ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > ICredentialProviderCredential2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICredentialProviderCredential2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICredentialProviderCredential2Vtbl < > { unsafe extern "system" fn GetUserSid < Impl : ICredentialProviderCredential2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , sid : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetUserSid : GetUserSid :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICredentialProviderCredential2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait ICredentialProviderCredentialEventsImpl < > : Sized where { fn SetFieldState ( ) ; fn SetFieldInteractiveState ( ) ; fn SetFieldString ( ) ; fn SetFieldCheckbox ( ) ; fn SetFieldBitmap ( ) ; fn SetFieldComboBoxSelectedItem ( ) ; fn DeleteFieldComboBoxItem ( ) ; fn AppendFieldComboBoxItem ( ) ; fn SetFieldSubmitButton ( ) ; fn OnCreatingWindow ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > ICredentialProviderCredentialEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICredentialProviderCredentialEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICredentialProviderCredentialEventsVtbl < > { unsafe extern "system" fn SetFieldState < Impl : ICredentialProviderCredentialEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpc : :: windows :: core :: RawPtr , dwfieldid : u32 , cpfs : CREDENTIAL_PROVIDER_FIELD_STATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFieldInteractiveState < Impl : ICredentialProviderCredentialEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpc : :: windows :: core :: RawPtr , dwfieldid : u32 , cpfis : CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFieldString < Impl : ICredentialProviderCredentialEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpc : :: windows :: core :: RawPtr , dwfieldid : u32 , psz : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFieldCheckbox < Impl : ICredentialProviderCredentialEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpc : :: windows :: core :: RawPtr , dwfieldid : u32 , bchecked : super::super::Foundation:: BOOL , pszlabel : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFieldBitmap < Impl : ICredentialProviderCredentialEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpc : :: windows :: core :: RawPtr , dwfieldid : u32 , hbmp : super::super::Graphics::Gdi:: HBITMAP , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFieldComboBoxSelectedItem < Impl : ICredentialProviderCredentialEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpc : :: windows :: core :: RawPtr , dwfieldid : u32 , dwselecteditem : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteFieldComboBoxItem < Impl : ICredentialProviderCredentialEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpc : :: windows :: core :: RawPtr , dwfieldid : u32 , dwitem : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AppendFieldComboBoxItem < Impl : ICredentialProviderCredentialEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpc : :: windows :: core :: RawPtr , dwfieldid : u32 , pszitem : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFieldSubmitButton < Impl : ICredentialProviderCredentialEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpc : :: windows :: core :: RawPtr , dwfieldid : u32 , dwadjacentto : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnCreatingWindow < Impl : ICredentialProviderCredentialEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phwndowner : * mut super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetFieldState : SetFieldState :: < Impl , IMPL_OFFSET > , SetFieldInteractiveState : SetFieldInteractiveState :: < Impl , IMPL_OFFSET > , SetFieldString : SetFieldString :: < Impl , IMPL_OFFSET > , SetFieldCheckbox : SetFieldCheckbox :: < Impl , IMPL_OFFSET > , SetFieldBitmap : SetFieldBitmap :: < Impl , IMPL_OFFSET > , SetFieldComboBoxSelectedItem : SetFieldComboBoxSelectedItem :: < Impl , IMPL_OFFSET > , DeleteFieldComboBoxItem : DeleteFieldComboBoxItem :: < Impl , IMPL_OFFSET > , AppendFieldComboBoxItem : AppendFieldComboBoxItem :: < Impl , IMPL_OFFSET > , SetFieldSubmitButton : SetFieldSubmitButton :: < Impl , IMPL_OFFSET > , OnCreatingWindow : OnCreatingWindow :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICredentialProviderCredentialEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait ICredentialProviderCredentialEvents2Impl < > : Sized + ICredentialProviderCredentialEventsImpl where { fn BeginFieldUpdates ( ) ; fn EndFieldUpdates ( ) ; fn SetFieldOptions ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > ICredentialProviderCredentialEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICredentialProviderCredentialEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICredentialProviderCredentialEvents2Vtbl < > { unsafe extern "system" fn BeginFieldUpdates < Impl : ICredentialProviderCredentialEvents2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndFieldUpdates < Impl : ICredentialProviderCredentialEvents2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFieldOptions < Impl : ICredentialProviderCredentialEvents2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , credential : :: windows :: core :: RawPtr , fieldid : u32 , options : CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , BeginFieldUpdates : BeginFieldUpdates :: < Impl , IMPL_OFFSET > , EndFieldUpdates : EndFieldUpdates :: < Impl , IMPL_OFFSET > , SetFieldOptions : SetFieldOptions :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICredentialProviderCredentialEvents2 < > as :: windows :: core :: Interface > :: IID } } pub trait ICredentialProviderCredentialWithFieldOptionsImpl < > : Sized where { fn GetFieldOptions ( ) ; } impl < > ICredentialProviderCredentialWithFieldOptionsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICredentialProviderCredentialWithFieldOptionsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICredentialProviderCredentialWithFieldOptionsVtbl < > { unsafe extern "system" fn GetFieldOptions < Impl : ICredentialProviderCredentialWithFieldOptionsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fieldid : u32 , options : * mut CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetFieldOptions : GetFieldOptions :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICredentialProviderCredentialWithFieldOptions < > as :: windows :: core :: Interface > :: IID } } pub trait ICredentialProviderEventsImpl < > : Sized where { fn CredentialsChanged ( ) ; } impl < > ICredentialProviderEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICredentialProviderEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICredentialProviderEventsVtbl < > { unsafe extern "system" fn CredentialsChanged < Impl : ICredentialProviderEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , upadvisecontext : usize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CredentialsChanged : CredentialsChanged :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICredentialProviderEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ICredentialProviderFilterImpl < > : Sized where { fn Filter ( ) ; fn UpdateRemoteCredential ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ICredentialProviderFilterVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICredentialProviderFilterImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICredentialProviderFilterVtbl < > { unsafe extern "system" fn Filter < Impl : ICredentialProviderFilterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cpus : CREDENTIAL_PROVIDER_USAGE_SCENARIO , dwflags : u32 , rgclsidproviders : * const :: windows :: core :: GUID , rgballow : * mut super::super::Foundation:: BOOL , cproviders : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateRemoteCredential < Impl : ICredentialProviderFilterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpcsin : * const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION , pcpcsout : * mut CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Filter : Filter :: < Impl , IMPL_OFFSET > , UpdateRemoteCredential : UpdateRemoteCredential :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICredentialProviderFilter < > as :: windows :: core :: Interface > :: IID } } pub trait ICredentialProviderSetUserArrayImpl < > : Sized where { fn SetUserArray ( ) ; } impl < > ICredentialProviderSetUserArrayVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICredentialProviderSetUserArrayImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICredentialProviderSetUserArrayVtbl < > { unsafe extern "system" fn SetUserArray < Impl : ICredentialProviderSetUserArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , users : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetUserArray : SetUserArray :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICredentialProviderSetUserArray < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait ICredentialProviderUserImpl < > : Sized where { fn GetSid ( ) ; fn GetProviderID ( ) ; fn GetStringValue ( ) ; fn GetValue ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > ICredentialProviderUserVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICredentialProviderUserImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICredentialProviderUserVtbl < > { unsafe extern "system" fn GetSid < Impl : ICredentialProviderUserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , sid : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProviderID < Impl : ICredentialProviderUserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , providerid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetStringValue < Impl : ICredentialProviderUserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , key : * const PropertiesSystem:: PROPERTYKEY , stringvalue : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetValue < Impl : ICredentialProviderUserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , key : * const PropertiesSystem:: PROPERTYKEY , value : * mut super::super::System::Com::StructuredStorage:: PROPVARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetSid : GetSid :: < Impl , IMPL_OFFSET > , GetProviderID : GetProviderID :: < Impl , IMPL_OFFSET > , GetStringValue : GetStringValue :: < Impl , IMPL_OFFSET > , GetValue : GetValue :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICredentialProviderUser < > as :: windows :: core :: Interface > :: IID } } pub trait ICredentialProviderUserArrayImpl < > : Sized where { fn SetProviderFilter ( ) ; fn GetAccountOptions ( ) ; fn GetCount ( ) ; fn GetAt ( ) ; } impl < > ICredentialProviderUserArrayVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICredentialProviderUserArrayImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICredentialProviderUserArrayVtbl < > { unsafe extern "system" fn SetProviderFilter < Impl : ICredentialProviderUserArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , guidprovidertofilterto : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAccountOptions < Impl : ICredentialProviderUserArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , credentialprovideraccountoptions : * mut CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCount < Impl : ICredentialProviderUserArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , usercount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAt < Impl : ICredentialProviderUserArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , userindex : u32 , user : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetProviderFilter : SetProviderFilter :: < Impl , IMPL_OFFSET > , GetAccountOptions : GetAccountOptions :: < Impl , IMPL_OFFSET > , GetCount : GetCount :: < Impl , IMPL_OFFSET > , GetAt : GetAt :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICredentialProviderUserArray < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait ICurrentItemImpl < > : Sized + IRelatedItemImpl where { } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > ICurrentItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICurrentItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICurrentItemVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICurrentItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ICurrentWorkingDirectoryImpl < > : Sized where { fn GetDirectory ( ) ; fn SetDirectory ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ICurrentWorkingDirectoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICurrentWorkingDirectoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICurrentWorkingDirectoryVtbl < > { unsafe extern "system" fn GetDirectory < Impl : ICurrentWorkingDirectoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzpath : super::super::Foundation:: PWSTR , cchsize : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDirectory < Impl : ICurrentWorkingDirectoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzpath : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetDirectory : GetDirectory :: < Impl , IMPL_OFFSET > , SetDirectory : SetDirectory :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICurrentWorkingDirectory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait ICustomDestinationListImpl < > : Sized where { fn SetAppID ( ) ; fn BeginList ( ) ; fn AppendCategory ( ) ; fn AppendKnownCategory ( ) ; fn AddUserTasks ( ) ; fn CommitList ( ) ; fn GetRemovedDestinations ( ) ; fn DeleteList ( ) ; fn AbortList ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > ICustomDestinationListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICustomDestinationListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICustomDestinationListVtbl < > { unsafe extern "system" fn SetAppID < Impl : ICustomDestinationListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszappid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginList < Impl : ICustomDestinationListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcminslots : * mut u32 , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AppendCategory < Impl : ICustomDestinationListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszcategory : super::super::Foundation:: PWSTR , poa : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AppendKnownCategory < Impl : ICustomDestinationListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , category : KNOWNDESTCATEGORY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddUserTasks < Impl : ICustomDestinationListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poa : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CommitList < Impl : ICustomDestinationListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetRemovedDestinations < Impl : ICustomDestinationListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteList < Impl : ICustomDestinationListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszappid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AbortList < Impl : ICustomDestinationListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetAppID : SetAppID :: < Impl , IMPL_OFFSET > , BeginList : BeginList :: < Impl , IMPL_OFFSET > , AppendCategory : AppendCategory :: < Impl , IMPL_OFFSET > , AppendKnownCategory : AppendKnownCategory :: < Impl , IMPL_OFFSET > , AddUserTasks : AddUserTasks :: < Impl , IMPL_OFFSET > , CommitList : CommitList :: < Impl , IMPL_OFFSET > , GetRemovedDestinations : GetRemovedDestinations :: < Impl , IMPL_OFFSET > , DeleteList : DeleteList :: < Impl , IMPL_OFFSET > , AbortList : AbortList :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICustomDestinationList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IDataObjectAsyncCapabilityImpl < > : Sized where { fn SetAsyncMode ( ) ; fn GetAsyncMode ( ) ; fn StartOperation ( ) ; fn InOperation ( ) ; fn EndOperation ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IDataObjectAsyncCapabilityVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDataObjectAsyncCapabilityImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDataObjectAsyncCapabilityVtbl < > { unsafe extern "system" fn SetAsyncMode < Impl : IDataObjectAsyncCapabilityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fdoopasync : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAsyncMode < Impl : IDataObjectAsyncCapabilityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfisopasync : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StartOperation < Impl : IDataObjectAsyncCapabilityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbcreserved : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InOperation < Impl : IDataObjectAsyncCapabilityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfinasyncop : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndOperation < Impl : IDataObjectAsyncCapabilityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hresult : :: windows :: core :: HRESULT , pbcreserved : :: windows :: core :: RawPtr , dweffects : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetAsyncMode : SetAsyncMode :: < Impl , IMPL_OFFSET > , GetAsyncMode : GetAsyncMode :: < Impl , IMPL_OFFSET > , StartOperation : StartOperation :: < Impl , IMPL_OFFSET > , InOperation : InOperation :: < Impl , IMPL_OFFSET > , EndOperation : EndOperation :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDataObjectAsyncCapability < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait IDataObjectProviderImpl < > : Sized where { fn GetDataObject ( ) ; fn SetDataObject ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > IDataObjectProviderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDataObjectProviderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDataObjectProviderVtbl < > { unsafe extern "system" fn GetDataObject < Impl : IDataObjectProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dataobject : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDataObject < Impl : IDataObjectProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dataobject : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetDataObject : GetDataObject :: < Impl , IMPL_OFFSET > , SetDataObject : SetDataObject :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDataObjectProvider < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IDataTransferManagerInteropImpl < > : Sized where { fn GetForWindow ( ) ; fn ShowShareUIForWindow ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IDataTransferManagerInteropVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDataTransferManagerInteropImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDataTransferManagerInteropVtbl < > { unsafe extern "system" fn GetForWindow < Impl : IDataTransferManagerInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , appwindow : super::super::Foundation:: HWND , riid : * const :: windows :: core :: GUID , datatransfermanager : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowShareUIForWindow < Impl : IDataTransferManagerInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , appwindow : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetForWindow : GetForWindow :: < Impl , IMPL_OFFSET > , ShowShareUIForWindow : ShowShareUIForWindow :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDataTransferManagerInterop < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Registry" ) ) ] pub trait IDefaultExtractIconInitImpl < > : Sized where { fn SetFlags ( ) ; fn SetKey ( ) ; fn SetNormalIcon ( ) ; fn SetOpenIcon ( ) ; fn SetShortcutIcon ( ) ; fn SetDefaultIcon ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Registry" ) ) ] impl < > IDefaultExtractIconInitVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDefaultExtractIconInitImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDefaultExtractIconInitVtbl < > { unsafe extern "system" fn SetFlags < Impl : IDefaultExtractIconInitImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetKey < Impl : IDefaultExtractIconInitImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hkey : super::super::System::Registry:: HKEY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetNormalIcon < Impl : IDefaultExtractIconInitImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszfile : super::super::Foundation:: PWSTR , iicon : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetOpenIcon < Impl : IDefaultExtractIconInitImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszfile : super::super::Foundation:: PWSTR , iicon : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetShortcutIcon < Impl : IDefaultExtractIconInitImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszfile : super::super::Foundation:: PWSTR , iicon : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDefaultIcon < Impl : IDefaultExtractIconInitImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszfile : super::super::Foundation:: PWSTR , iicon : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetFlags : SetFlags :: < Impl , IMPL_OFFSET > , SetKey : SetKey :: < Impl , IMPL_OFFSET > , SetNormalIcon : SetNormalIcon :: < Impl , IMPL_OFFSET > , SetOpenIcon : SetOpenIcon :: < Impl , IMPL_OFFSET > , SetShortcutIcon : SetShortcutIcon :: < Impl , IMPL_OFFSET > , SetDefaultIcon : SetDefaultIcon :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDefaultExtractIconInit < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Registry" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IDefaultFolderMenuInitializeImpl < > : Sized where { fn Initialize ( ) ; fn SetMenuRestrictions ( ) ; fn GetMenuRestrictions ( ) ; fn SetHandlerClsid ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Registry" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IDefaultFolderMenuInitializeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDefaultFolderMenuInitializeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDefaultFolderMenuInitializeVtbl < > { unsafe extern "system" fn Initialize < Impl : IDefaultFolderMenuInitializeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , pcmcb : :: windows :: core :: RawPtr , pidlfolder : * const Common:: ITEMIDLIST , psf : :: windows :: core :: RawPtr , cidl : u32 , apidl : * const * const Common:: ITEMIDLIST , punkassociation : * mut :: core :: ffi :: c_void , ckeys : u32 , akeys : * const super::super::System::Registry:: HKEY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMenuRestrictions < Impl : IDefaultFolderMenuInitializeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dfmrvalues : DEFAULT_FOLDER_MENU_RESTRICTIONS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMenuRestrictions < Impl : IDefaultFolderMenuInitializeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dfmrmask : DEFAULT_FOLDER_MENU_RESTRICTIONS , pdfmrvalues : * mut DEFAULT_FOLDER_MENU_RESTRICTIONS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetHandlerClsid < Impl : IDefaultFolderMenuInitializeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rclsid : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , SetMenuRestrictions : SetMenuRestrictions :: < Impl , IMPL_OFFSET > , GetMenuRestrictions : GetMenuRestrictions :: < Impl , IMPL_OFFSET > , SetHandlerClsid : SetHandlerClsid :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDefaultFolderMenuInitialize < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait IDelegateFolderImpl < > : Sized where { fn SetItemAlloc ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > IDelegateFolderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDelegateFolderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDelegateFolderVtbl < > { unsafe extern "system" fn SetItemAlloc < Impl : IDelegateFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmalloc : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetItemAlloc : SetItemAlloc :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDelegateFolder < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IDelegateItemImpl < > : Sized + IRelatedItemImpl where { } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IDelegateItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDelegateItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDelegateItemVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDelegateItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] pub trait IDeskBandImpl < > : Sized + IDockingWindowImpl + IOleWindowImpl where { fn GetBandInfo ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] impl < > IDeskBandVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDeskBandImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDeskBandVtbl < > { unsafe extern "system" fn GetBandInfo < Impl : IDeskBandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwbandid : u32 , dwviewmode : u32 , pdbi : * mut DESKBANDINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetBandInfo : GetBandInfo :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDeskBand < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] pub trait IDeskBand2Impl < > : Sized + IDeskBandImpl + IDockingWindowImpl + IOleWindowImpl where { fn CanRenderComposited ( ) ; fn SetCompositionState ( ) ; fn GetCompositionState ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] impl < > IDeskBand2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDeskBand2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDeskBand2Vtbl < > { unsafe extern "system" fn CanRenderComposited < Impl : IDeskBand2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfcanrendercomposited : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCompositionState < Impl : IDeskBand2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fcompositionenabled : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCompositionState < Impl : IDeskBand2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfcompositionenabled : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CanRenderComposited : CanRenderComposited :: < Impl , IMPL_OFFSET > , SetCompositionState : SetCompositionState :: < Impl , IMPL_OFFSET > , GetCompositionState : GetCompositionState :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDeskBand2 < > as :: windows :: core :: Interface > :: IID } } pub trait IDeskBandInfoImpl < > : Sized where { fn GetDefaultBandWidth ( ) ; } impl < > IDeskBandInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDeskBandInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDeskBandInfoVtbl < > { unsafe extern "system" fn GetDefaultBandWidth < Impl : IDeskBandInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwbandid : u32 , dwviewmode : u32 , pnwidth : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetDefaultBandWidth : GetDefaultBandWidth :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDeskBandInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] pub trait IDeskBarImpl < > : Sized + IOleWindowImpl where { fn SetClient ( ) ; fn GetClient ( ) ; fn OnPosRectChangeDB ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] impl < > IDeskBarVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDeskBarImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDeskBarVtbl < > { unsafe extern "system" fn SetClient < Impl : IDeskBarImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkclient : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetClient < Impl : IDeskBarImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppunkclient : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnPosRectChangeDB < Impl : IDeskBarImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prc : * const super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetClient : SetClient :: < Impl , IMPL_OFFSET > , GetClient : GetClient :: < Impl , IMPL_OFFSET > , OnPosRectChangeDB : OnPosRectChangeDB :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDeskBar < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] pub trait IDeskBarClientImpl < > : Sized + IOleWindowImpl where { fn SetDeskBarSite ( ) ; fn SetModeDBC ( ) ; fn UIActivateDBC ( ) ; fn GetSize ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] impl < > IDeskBarClientVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDeskBarClientImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDeskBarClientVtbl < > { unsafe extern "system" fn SetDeskBarSite < Impl : IDeskBarClientImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punksite : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetModeDBC < Impl : IDeskBarClientImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwmode : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UIActivateDBC < Impl : IDeskBarClientImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwstate : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSize < Impl : IDeskBarClientImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwwhich : u32 , prc : * mut super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetDeskBarSite : SetDeskBarSite :: < Impl , IMPL_OFFSET > , SetModeDBC : SetModeDBC :: < Impl , IMPL_OFFSET > , UIActivateDBC : UIActivateDBC :: < Impl , IMPL_OFFSET > , GetSize : GetSize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDeskBarClient < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IDesktopGadgetImpl < > : Sized where { fn RunGadget ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IDesktopGadgetVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDesktopGadgetImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDesktopGadgetVtbl < > { unsafe extern "system" fn RunGadget < Impl : IDesktopGadgetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , gadgetpath : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , RunGadget : RunGadget :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDesktopGadget < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IDesktopWallpaperImpl < > : Sized where { fn SetWallpaper ( ) ; fn GetWallpaper ( ) ; fn GetMonitorDevicePathAt ( ) ; fn GetMonitorDevicePathCount ( ) ; fn GetMonitorRECT ( ) ; fn SetBackgroundColor ( ) ; fn GetBackgroundColor ( ) ; fn SetPosition ( ) ; fn GetPosition ( ) ; fn SetSlideshow ( ) ; fn GetSlideshow ( ) ; fn SetSlideshowOptions ( ) ; fn GetSlideshowOptions ( ) ; fn AdvanceSlideshow ( ) ; fn GetStatus ( ) ; fn Enable ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IDesktopWallpaperVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDesktopWallpaperImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDesktopWallpaperVtbl < > { unsafe extern "system" fn SetWallpaper < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , monitorid : super::super::Foundation:: PWSTR , wallpaper : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetWallpaper < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , monitorid : super::super::Foundation:: PWSTR , wallpaper : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMonitorDevicePathAt < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , monitorindex : u32 , monitorid : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMonitorDevicePathCount < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , count : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMonitorRECT < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , monitorid : super::super::Foundation:: PWSTR , displayrect : * mut super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBackgroundColor < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , color : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBackgroundColor < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , color : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPosition < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , position : DESKTOP_WALLPAPER_POSITION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPosition < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , position : * mut DESKTOP_WALLPAPER_POSITION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSlideshow < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , items : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSlideshow < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , items : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSlideshowOptions < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , options : DESKTOP_SLIDESHOW_OPTIONS , slideshowtick : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSlideshowOptions < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , options : * mut DESKTOP_SLIDESHOW_OPTIONS , slideshowtick : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AdvanceSlideshow < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , monitorid : super::super::Foundation:: PWSTR , direction : DESKTOP_SLIDESHOW_DIRECTION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetStatus < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , state : * mut DESKTOP_SLIDESHOW_STATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Enable < Impl : IDesktopWallpaperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , enable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetWallpaper : SetWallpaper :: < Impl , IMPL_OFFSET > , GetWallpaper : GetWallpaper :: < Impl , IMPL_OFFSET > , GetMonitorDevicePathAt : GetMonitorDevicePathAt :: < Impl , IMPL_OFFSET > , GetMonitorDevicePathCount : GetMonitorDevicePathCount :: < Impl , IMPL_OFFSET > , GetMonitorRECT : GetMonitorRECT :: < Impl , IMPL_OFFSET > , SetBackgroundColor : SetBackgroundColor :: < Impl , IMPL_OFFSET > , GetBackgroundColor : GetBackgroundColor :: < Impl , IMPL_OFFSET > , SetPosition : SetPosition :: < Impl , IMPL_OFFSET > , GetPosition : GetPosition :: < Impl , IMPL_OFFSET > , SetSlideshow : SetSlideshow :: < Impl , IMPL_OFFSET > , GetSlideshow : GetSlideshow :: < Impl , IMPL_OFFSET > , SetSlideshowOptions : SetSlideshowOptions :: < Impl , IMPL_OFFSET > , GetSlideshowOptions : GetSlideshowOptions :: < Impl , IMPL_OFFSET > , AdvanceSlideshow : AdvanceSlideshow :: < Impl , IMPL_OFFSET > , GetStatus : GetStatus :: < Impl , IMPL_OFFSET > , Enable : Enable :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDesktopWallpaper < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait IDestinationStreamFactoryImpl < > : Sized where { fn GetDestinationStream ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > IDestinationStreamFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDestinationStreamFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDestinationStreamFactoryVtbl < > { unsafe extern "system" fn GetDestinationStream < Impl : IDestinationStreamFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppstm : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetDestinationStream : GetDestinationStream :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDestinationStreamFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IDisplayItemImpl < > : Sized + IRelatedItemImpl where { } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IDisplayItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDisplayItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDisplayItemVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDisplayItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDocViewSiteImpl < > : Sized where { fn OnSetTitle ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDocViewSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDocViewSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDocViewSiteVtbl < > { unsafe extern "system" fn OnSetTitle < Impl : IDocViewSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvtitle : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnSetTitle : OnSetTitle :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDocViewSite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] pub trait IDockingWindowImpl < > : Sized + IOleWindowImpl where { fn ShowDW ( ) ; fn CloseDW ( ) ; fn ResizeBorderDW ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] impl < > IDockingWindowVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDockingWindowImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDockingWindowVtbl < > { unsafe extern "system" fn ShowDW < Impl : IDockingWindowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fshow : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CloseDW < Impl : IDockingWindowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwreserved : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResizeBorderDW < Impl : IDockingWindowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prcborder : * const super::super::Foundation:: RECT , punktoolbarsite : * mut :: core :: ffi :: c_void , freserved : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , ShowDW : ShowDW :: < Impl , IMPL_OFFSET > , CloseDW : CloseDW :: < Impl , IMPL_OFFSET > , ResizeBorderDW : ResizeBorderDW :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDockingWindow < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] pub trait IDockingWindowFrameImpl < > : Sized + IOleWindowImpl where { fn AddToolbar ( ) ; fn RemoveToolbar ( ) ; fn FindToolbar ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] impl < > IDockingWindowFrameVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDockingWindowFrameImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDockingWindowFrameVtbl < > { unsafe extern "system" fn AddToolbar < Impl : IDockingWindowFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punksrc : * mut :: core :: ffi :: c_void , pwszitem : super::super::Foundation:: PWSTR , dwaddflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveToolbar < Impl : IDockingWindowFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punksrc : * mut :: core :: ffi :: c_void , dwremoveflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindToolbar < Impl : IDockingWindowFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwszitem : super::super::Foundation:: PWSTR , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , AddToolbar : AddToolbar :: < Impl , IMPL_OFFSET > , RemoveToolbar : RemoveToolbar :: < Impl , IMPL_OFFSET > , FindToolbar : FindToolbar :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDockingWindowFrame < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] pub trait IDockingWindowSiteImpl < > : Sized + IOleWindowImpl where { fn GetBorderDW ( ) ; fn RequestBorderSpaceDW ( ) ; fn SetBorderSpaceDW ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] impl < > IDockingWindowSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDockingWindowSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDockingWindowSiteVtbl < > { unsafe extern "system" fn GetBorderDW < Impl : IDockingWindowSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkobj : * mut :: core :: ffi :: c_void , prcborder : * mut super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RequestBorderSpaceDW < Impl : IDockingWindowSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkobj : * mut :: core :: ffi :: c_void , pbw : * const super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBorderSpaceDW < Impl : IDockingWindowSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkobj : * mut :: core :: ffi :: c_void , pbw : * const super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetBorderDW : GetBorderDW :: < Impl , IMPL_OFFSET > , RequestBorderSpaceDW : RequestBorderSpaceDW :: < Impl , IMPL_OFFSET > , SetBorderSpaceDW : SetBorderSpaceDW :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDockingWindowSite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_System_Com" ) ) ] pub trait IDragSourceHelperImpl < > : Sized where { fn InitializeFromBitmap ( ) ; fn InitializeFromWindow ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_System_Com" ) ) ] impl < > IDragSourceHelperVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDragSourceHelperImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDragSourceHelperVtbl < > { unsafe extern "system" fn InitializeFromBitmap < Impl : IDragSourceHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pshdi : * const SHDRAGIMAGE , pdataobject : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InitializeFromWindow < Impl : IDragSourceHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , ppt : * const super::super::Foundation:: POINT , pdataobject : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , InitializeFromBitmap : InitializeFromBitmap :: < Impl , IMPL_OFFSET > , InitializeFromWindow : InitializeFromWindow :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDragSourceHelper < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_System_Com" ) ) ] pub trait IDragSourceHelper2Impl < > : Sized + IDragSourceHelperImpl where { fn SetFlags ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_System_Com" ) ) ] impl < > IDragSourceHelper2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDragSourceHelper2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDragSourceHelper2Vtbl < > { unsafe extern "system" fn SetFlags < Impl : IDragSourceHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetFlags : SetFlags :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDragSourceHelper2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IDropTargetHelperImpl < > : Sized where { fn DragEnter ( ) ; fn DragLeave ( ) ; fn DragOver ( ) ; fn Drop ( ) ; fn Show ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IDropTargetHelperVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDropTargetHelperImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDropTargetHelperVtbl < > { unsafe extern "system" fn DragEnter < Impl : IDropTargetHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndtarget : super::super::Foundation:: HWND , pdataobject : :: windows :: core :: RawPtr , ppt : * const super::super::Foundation:: POINT , dweffect : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DragLeave < Impl : IDropTargetHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DragOver < Impl : IDropTargetHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppt : * const super::super::Foundation:: POINT , dweffect : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Drop < Impl : IDropTargetHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdataobject : :: windows :: core :: RawPtr , ppt : * const super::super::Foundation:: POINT , dweffect : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Show < Impl : IDropTargetHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fshow : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , DragEnter : DragEnter :: < Impl , IMPL_OFFSET > , DragLeave : DragLeave :: < Impl , IMPL_OFFSET > , DragOver : DragOver :: < Impl , IMPL_OFFSET > , Drop : Drop :: < Impl , IMPL_OFFSET > , Show : Show :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDropTargetHelper < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IDynamicHWHandlerImpl < > : Sized where { fn GetDynamicInfo ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IDynamicHWHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDynamicHWHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDynamicHWHandlerVtbl < > { unsafe extern "system" fn GetDynamicInfo < Impl : IDynamicHWHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdeviceid : super::super::Foundation:: PWSTR , dwcontenttype : u32 , ppszaction : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetDynamicInfo : GetDynamicInfo :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDynamicHWHandler < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IEnumACStringImpl < > : Sized + IEnumStringImpl where { fn NextItem ( ) ; fn SetEnumOptions ( ) ; fn GetEnumOptions ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IEnumACStringVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumACStringImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumACStringVtbl < > { unsafe extern "system" fn NextItem < Impl : IEnumACStringImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszurl : super::super::Foundation:: PWSTR , cchmax : u32 , pulsortindex : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetEnumOptions < Impl : IEnumACStringImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwoptions : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEnumOptions < Impl : IEnumACStringImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwoptions : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , NextItem : NextItem :: < Impl , IMPL_OFFSET > , SetEnumOptions : SetEnumOptions :: < Impl , IMPL_OFFSET > , GetEnumOptions : GetEnumOptions :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumACString < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumAssocHandlersImpl < > : Sized where { fn Next ( ) ; } impl < > IEnumAssocHandlersVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumAssocHandlersImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumAssocHandlersVtbl < > { unsafe extern "system" fn Next < Impl : IEnumAssocHandlersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , rgelt : * mut :: windows :: core :: RawPtr , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumAssocHandlers < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumExplorerCommandImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } impl < > IEnumExplorerCommandVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumExplorerCommandImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumExplorerCommandVtbl < > { unsafe extern "system" fn Next < Impl : IEnumExplorerCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , puicommand : * mut :: windows :: core :: RawPtr , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumExplorerCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumExplorerCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumExplorerCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumExplorerCommand < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumExtraSearchImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } impl < > IEnumExtraSearchVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumExtraSearchImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumExtraSearchVtbl < > { unsafe extern "system" fn Next < Impl : IEnumExtraSearchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , rgelt : * mut EXTRASEARCH , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumExtraSearchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumExtraSearchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumExtraSearchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumExtraSearch < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IEnumFullIDListImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IEnumFullIDListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumFullIDListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumFullIDListVtbl < > { unsafe extern "system" fn Next < Impl : IEnumFullIDListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , rgelt : * mut * mut Common:: ITEMIDLIST , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumFullIDListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumFullIDListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumFullIDListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumFullIDList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IEnumHLITEMImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IEnumHLITEMVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumHLITEMImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumHLITEMVtbl < > { unsafe extern "system" fn Next < Impl : IEnumHLITEMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , rgelt : * mut HLITEM , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumHLITEMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumHLITEMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumHLITEMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppienumhlitem : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumHLITEM < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IEnumIDListImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IEnumIDListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumIDListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumIDListVtbl < > { unsafe extern "system" fn Next < Impl : IEnumIDListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , rgelt : * mut * mut Common:: ITEMIDLIST , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumIDListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumIDListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumIDListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumIDList < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumObjectsImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } impl < > IEnumObjectsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumObjectsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumObjectsVtbl < > { unsafe extern "system" fn Next < Impl : IEnumObjectsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , riid : * const :: windows :: core :: GUID , rgelt : * mut * mut :: core :: ffi :: c_void , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumObjectsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumObjectsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumObjectsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumObjects < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumPublishedAppsImpl < > : Sized where { fn Next ( ) ; fn Reset ( ) ; } impl < > IEnumPublishedAppsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumPublishedAppsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumPublishedAppsVtbl < > { unsafe extern "system" fn Next < Impl : IEnumPublishedAppsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pia : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumPublishedAppsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumPublishedApps < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumReadyCallbackImpl < > : Sized where { fn EnumReady ( ) ; } impl < > IEnumReadyCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumReadyCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumReadyCallbackVtbl < > { unsafe extern "system" fn EnumReady < Impl : IEnumReadyCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , EnumReady : EnumReady :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumReadyCallback < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumResourcesImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } impl < > IEnumResourcesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumResourcesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumResourcesVtbl < > { unsafe extern "system" fn Next < Impl : IEnumResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , psir : * mut SHELL_ITEM_RESOURCE , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenumr : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumResources < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumShellItemsImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } impl < > IEnumShellItemsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumShellItemsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumShellItemsVtbl < > { unsafe extern "system" fn Next < Impl : IEnumShellItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , rgelt : * mut :: windows :: core :: RawPtr , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumShellItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumShellItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumShellItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumShellItems < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumSyncMgrConflictImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } impl < > IEnumSyncMgrConflictVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumSyncMgrConflictImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumSyncMgrConflictVtbl < > { unsafe extern "system" fn Next < Impl : IEnumSyncMgrConflictImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , rgelt : * mut :: windows :: core :: RawPtr , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumSyncMgrConflictImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumSyncMgrConflictImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumSyncMgrConflictImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumSyncMgrConflict < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumSyncMgrEventsImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } impl < > IEnumSyncMgrEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumSyncMgrEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumSyncMgrEventsVtbl < > { unsafe extern "system" fn Next < Impl : IEnumSyncMgrEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , rgelt : * mut :: windows :: core :: RawPtr , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumSyncMgrEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumSyncMgrEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumSyncMgrEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumSyncMgrEvents < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumSyncMgrSyncItemsImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } impl < > IEnumSyncMgrSyncItemsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumSyncMgrSyncItemsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumSyncMgrSyncItemsVtbl < > { unsafe extern "system" fn Next < Impl : IEnumSyncMgrSyncItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , rgelt : * mut :: windows :: core :: RawPtr , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumSyncMgrSyncItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumSyncMgrSyncItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumSyncMgrSyncItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumSyncMgrSyncItems < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumTravelLogEntryImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } impl < > IEnumTravelLogEntryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumTravelLogEntryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumTravelLogEntryVtbl < > { unsafe extern "system" fn Next < Impl : IEnumTravelLogEntryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , rgelt : * mut :: windows :: core :: RawPtr , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumTravelLogEntryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumTravelLogEntryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumTravelLogEntryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumTravelLogEntry < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IEnumerableViewImpl < > : Sized where { fn SetEnumReadyCallback ( ) ; fn CreateEnumIDListFromContents ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IEnumerableViewVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumerableViewImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumerableViewVtbl < > { unsafe extern "system" fn SetEnumReadyCallback < Impl : IEnumerableViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , percb : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateEnumIDListFromContents < Impl : IEnumerableViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidlfolder : * const Common:: ITEMIDLIST , dwenumflags : u32 , ppenumidlist : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetEnumReadyCallback : SetEnumReadyCallback :: < Impl , IMPL_OFFSET > , CreateEnumIDListFromContents : CreateEnumIDListFromContents :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumerableView < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IExecuteCommandImpl < > : Sized where { fn SetKeyState ( ) ; fn SetParameters ( ) ; fn SetPosition ( ) ; fn SetShowWindow ( ) ; fn SetNoShowUI ( ) ; fn SetDirectory ( ) ; fn Execute ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IExecuteCommandVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExecuteCommandImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExecuteCommandVtbl < > { unsafe extern "system" fn SetKeyState < Impl : IExecuteCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , grfkeystate : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetParameters < Impl : IExecuteCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszparameters : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPosition < Impl : IExecuteCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pt : super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetShowWindow < Impl : IExecuteCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , nshow : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetNoShowUI < Impl : IExecuteCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fnoshowui : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDirectory < Impl : IExecuteCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdirectory : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Execute < Impl : IExecuteCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetKeyState : SetKeyState :: < Impl , IMPL_OFFSET > , SetParameters : SetParameters :: < Impl , IMPL_OFFSET > , SetPosition : SetPosition :: < Impl , IMPL_OFFSET > , SetShowWindow : SetShowWindow :: < Impl , IMPL_OFFSET > , SetNoShowUI : SetNoShowUI :: < Impl , IMPL_OFFSET > , SetDirectory : SetDirectory :: < Impl , IMPL_OFFSET > , Execute : Execute :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExecuteCommand < > as :: windows :: core :: Interface > :: IID } } pub trait IExecuteCommandApplicationHostEnvironmentImpl < > : Sized where { fn GetValue ( ) ; } impl < > IExecuteCommandApplicationHostEnvironmentVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExecuteCommandApplicationHostEnvironmentImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExecuteCommandApplicationHostEnvironmentVtbl < > { unsafe extern "system" fn GetValue < Impl : IExecuteCommandApplicationHostEnvironmentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pahe : * mut AHE_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetValue : GetValue :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExecuteCommandApplicationHostEnvironment < > as :: windows :: core :: Interface > :: IID } } pub trait IExecuteCommandHostImpl < > : Sized where { fn GetUIMode ( ) ; } impl < > IExecuteCommandHostVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExecuteCommandHostImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExecuteCommandHostVtbl < > { unsafe extern "system" fn GetUIMode < Impl : IExecuteCommandHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , puimode : * mut EC_HOST_UI_MODE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetUIMode : GetUIMode :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExecuteCommandHost < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IExpDispSupportImpl < > : Sized where { fn FindConnectionPoint ( ) ; fn OnTranslateAccelerator ( ) ; fn OnInvoke ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IExpDispSupportVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExpDispSupportImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExpDispSupportVtbl < > { unsafe extern "system" fn FindConnectionPoint < Impl : IExpDispSupportImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppccp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnTranslateAccelerator < Impl : IExpDispSupportImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmsg : * const super::WindowsAndMessaging:: MSG , grfmodifiers : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnInvoke < Impl : IExpDispSupportImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dispidmember : i32 , iid : * const :: windows :: core :: GUID , lcid : u32 , wflags : u16 , pdispparams : * const super::super::System::Com:: DISPPARAMS , pvarresult : * mut super::super::System::Com:: VARIANT , pexcepinfo : * mut super::super::System::Com:: EXCEPINFO , puargerr : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , FindConnectionPoint : FindConnectionPoint :: < Impl , IMPL_OFFSET > , OnTranslateAccelerator : OnTranslateAccelerator :: < Impl , IMPL_OFFSET > , OnInvoke : OnInvoke :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExpDispSupport < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IExpDispSupportXPImpl < > : Sized where { fn FindCIE4ConnectionPoint ( ) ; fn OnTranslateAccelerator ( ) ; fn OnInvoke ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IExpDispSupportXPVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExpDispSupportXPImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExpDispSupportXPVtbl < > { unsafe extern "system" fn FindCIE4ConnectionPoint < Impl : IExpDispSupportXPImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppccp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnTranslateAccelerator < Impl : IExpDispSupportXPImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmsg : * const super::WindowsAndMessaging:: MSG , grfmodifiers : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnInvoke < Impl : IExpDispSupportXPImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dispidmember : i32 , iid : * const :: windows :: core :: GUID , lcid : u32 , wflags : u16 , pdispparams : * const super::super::System::Com:: DISPPARAMS , pvarresult : * mut super::super::System::Com:: VARIANT , pexcepinfo : * mut super::super::System::Com:: EXCEPINFO , puargerr : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , FindCIE4ConnectionPoint : FindCIE4ConnectionPoint :: < Impl , IMPL_OFFSET > , OnTranslateAccelerator : OnTranslateAccelerator :: < Impl , IMPL_OFFSET > , OnInvoke : OnInvoke :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExpDispSupportXP < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IExplorerBrowserImpl < > : Sized where { fn Initialize ( ) ; fn Destroy ( ) ; fn SetRect ( ) ; fn SetPropertyBag ( ) ; fn SetEmptyText ( ) ; fn SetFolderSettings ( ) ; fn Advise ( ) ; fn Unadvise ( ) ; fn SetOptions ( ) ; fn GetOptions ( ) ; fn BrowseToIDList ( ) ; fn BrowseToObject ( ) ; fn FillFromObject ( ) ; fn RemoveAll ( ) ; fn GetCurrentView ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IExplorerBrowserVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExplorerBrowserImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExplorerBrowserVtbl < > { unsafe extern "system" fn Initialize < Impl : IExplorerBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndparent : super::super::Foundation:: HWND , prc : * const super::super::Foundation:: RECT , pfs : * const FOLDERSETTINGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Destroy < Impl : IExplorerBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetRect < Impl : IExplorerBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phdwp : * mut isize , rcbrowser : super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPropertyBag < Impl : IExplorerBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszpropertybag : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetEmptyText < Impl : IExplorerBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszemptytext : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFolderSettings < Impl : IExplorerBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfs : * const FOLDERSETTINGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Advise < Impl : IExplorerBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psbe : :: windows :: core :: RawPtr , pdwcookie : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unadvise < Impl : IExplorerBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcookie : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetOptions < Impl : IExplorerBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflag : EXPLORER_BROWSER_OPTIONS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetOptions < Impl : IExplorerBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwflag : * mut EXPLORER_BROWSER_OPTIONS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BrowseToIDList < Impl : IExplorerBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , uflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BrowseToObject < Impl : IExplorerBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , uflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FillFromObject < Impl : IExplorerBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , dwflags : EXPLORER_BROWSER_FILL_FLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveAll < Impl : IExplorerBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCurrentView < Impl : IExplorerBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , Destroy : Destroy :: < Impl , IMPL_OFFSET > , SetRect : SetRect :: < Impl , IMPL_OFFSET > , SetPropertyBag : SetPropertyBag :: < Impl , IMPL_OFFSET > , SetEmptyText : SetEmptyText :: < Impl , IMPL_OFFSET > , SetFolderSettings : SetFolderSettings :: < Impl , IMPL_OFFSET > , Advise : Advise :: < Impl , IMPL_OFFSET > , Unadvise : Unadvise :: < Impl , IMPL_OFFSET > , SetOptions : SetOptions :: < Impl , IMPL_OFFSET > , GetOptions : GetOptions :: < Impl , IMPL_OFFSET > , BrowseToIDList : BrowseToIDList :: < Impl , IMPL_OFFSET > , BrowseToObject : BrowseToObject :: < Impl , IMPL_OFFSET > , FillFromObject : FillFromObject :: < Impl , IMPL_OFFSET > , RemoveAll : RemoveAll :: < Impl , IMPL_OFFSET > , GetCurrentView : GetCurrentView :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExplorerBrowser < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IExplorerBrowserEventsImpl < > : Sized where { fn OnNavigationPending ( ) ; fn OnViewCreated ( ) ; fn OnNavigationComplete ( ) ; fn OnNavigationFailed ( ) ; } # [ cfg ( all ( feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IExplorerBrowserEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExplorerBrowserEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExplorerBrowserEventsVtbl < > { unsafe extern "system" fn OnNavigationPending < Impl : IExplorerBrowserEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidlfolder : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnViewCreated < Impl : IExplorerBrowserEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psv : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnNavigationComplete < Impl : IExplorerBrowserEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidlfolder : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnNavigationFailed < Impl : IExplorerBrowserEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidlfolder : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnNavigationPending : OnNavigationPending :: < Impl , IMPL_OFFSET > , OnViewCreated : OnViewCreated :: < Impl , IMPL_OFFSET > , OnNavigationComplete : OnNavigationComplete :: < Impl , IMPL_OFFSET > , OnNavigationFailed : OnNavigationFailed :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExplorerBrowserEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IExplorerCommandImpl < > : Sized where { fn GetTitle ( ) ; fn GetIcon ( ) ; fn GetToolTip ( ) ; fn GetCanonicalName ( ) ; fn GetState ( ) ; fn Invoke ( ) ; fn GetFlags ( ) ; fn EnumSubCommands ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IExplorerCommandVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExplorerCommandImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExplorerCommandVtbl < > { unsafe extern "system" fn GetTitle < Impl : IExplorerCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiitemarray : :: windows :: core :: RawPtr , ppszname : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIcon < Impl : IExplorerCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiitemarray : :: windows :: core :: RawPtr , ppszicon : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetToolTip < Impl : IExplorerCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiitemarray : :: windows :: core :: RawPtr , ppszinfotip : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCanonicalName < Impl : IExplorerCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pguidcommandname : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetState < Impl : IExplorerCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiitemarray : :: windows :: core :: RawPtr , foktobeslow : super::super::Foundation:: BOOL , pcmdstate : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Invoke < Impl : IExplorerCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiitemarray : :: windows :: core :: RawPtr , pbc : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFlags < Impl : IExplorerCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnumSubCommands < Impl : IExplorerCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetTitle : GetTitle :: < Impl , IMPL_OFFSET > , GetIcon : GetIcon :: < Impl , IMPL_OFFSET > , GetToolTip : GetToolTip :: < Impl , IMPL_OFFSET > , GetCanonicalName : GetCanonicalName :: < Impl , IMPL_OFFSET > , GetState : GetState :: < Impl , IMPL_OFFSET > , Invoke : Invoke :: < Impl , IMPL_OFFSET > , GetFlags : GetFlags :: < Impl , IMPL_OFFSET > , EnumSubCommands : EnumSubCommands :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExplorerCommand < > as :: windows :: core :: Interface > :: IID } } pub trait IExplorerCommandProviderImpl < > : Sized where { fn GetCommands ( ) ; fn GetCommand ( ) ; } impl < > IExplorerCommandProviderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExplorerCommandProviderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExplorerCommandProviderVtbl < > { unsafe extern "system" fn GetCommands < Impl : IExplorerCommandProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punksite : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCommand < Impl : IExplorerCommandProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rguidcommandid : * const :: windows :: core :: GUID , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetCommands : GetCommands :: < Impl , IMPL_OFFSET > , GetCommand : GetCommand :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExplorerCommandProvider < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IExplorerCommandStateImpl < > : Sized where { fn GetState ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IExplorerCommandStateVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExplorerCommandStateImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExplorerCommandStateVtbl < > { unsafe extern "system" fn GetState < Impl : IExplorerCommandStateImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiitemarray : :: windows :: core :: RawPtr , foktobeslow : super::super::Foundation:: BOOL , pcmdstate : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetState : GetState :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExplorerCommandState < > as :: windows :: core :: Interface > :: IID } } pub trait IExplorerPaneVisibilityImpl < > : Sized where { fn GetPaneState ( ) ; } impl < > IExplorerPaneVisibilityVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExplorerPaneVisibilityImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExplorerPaneVisibilityVtbl < > { unsafe extern "system" fn GetPaneState < Impl : IExplorerPaneVisibilityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ep : * const :: windows :: core :: GUID , peps : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetPaneState : GetPaneState :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExplorerPaneVisibility < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IExtensionServicesImpl < > : Sized where { fn SetAdditionalHeaders ( ) ; fn SetAuthenticateData ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IExtensionServicesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExtensionServicesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExtensionServicesVtbl < > { unsafe extern "system" fn SetAdditionalHeaders < Impl : IExtensionServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzadditionalheaders : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetAuthenticateData < Impl : IExtensionServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phwnd : super::super::Foundation:: HWND , pwzusername : super::super::Foundation:: PWSTR , pwzpassword : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetAdditionalHeaders : SetAdditionalHeaders :: < Impl , IMPL_OFFSET > , SetAuthenticateData : SetAuthenticateData :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExtensionServices < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IExtractIconAImpl < > : Sized where { fn GetIconLocation ( ) ; fn Extract ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IExtractIconAVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExtractIconAImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExtractIconAVtbl < > { unsafe extern "system" fn GetIconLocation < Impl : IExtractIconAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uflags : u32 , psziconfile : super::super::Foundation:: PSTR , cchmax : u32 , piindex : * mut i32 , pwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Extract < Impl : IExtractIconAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszfile : super::super::Foundation:: PSTR , niconindex : u32 , phiconlarge : * mut super::WindowsAndMessaging:: HICON , phiconsmall : * mut super::WindowsAndMessaging:: HICON , niconsize : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetIconLocation : GetIconLocation :: < Impl , IMPL_OFFSET > , Extract : Extract :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExtractIconA < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IExtractIconWImpl < > : Sized where { fn GetIconLocation ( ) ; fn Extract ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IExtractIconWVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExtractIconWImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExtractIconWVtbl < > { unsafe extern "system" fn GetIconLocation < Impl : IExtractIconWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uflags : u32 , psziconfile : super::super::Foundation:: PWSTR , cchmax : u32 , piindex : * mut i32 , pwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Extract < Impl : IExtractIconWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszfile : super::super::Foundation:: PWSTR , niconindex : u32 , phiconlarge : * mut super::WindowsAndMessaging:: HICON , phiconsmall : * mut super::WindowsAndMessaging:: HICON , niconsize : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetIconLocation : GetIconLocation :: < Impl , IMPL_OFFSET > , Extract : Extract :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExtractIconW < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait IExtractImageImpl < > : Sized where { fn GetLocation ( ) ; fn Extract ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > IExtractImageVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExtractImageImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExtractImageVtbl < > { unsafe extern "system" fn GetLocation < Impl : IExtractImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszpathbuffer : super::super::Foundation:: PWSTR , cch : u32 , pdwpriority : * mut u32 , prgsize : * const super::super::Foundation:: SIZE , dwrecclrdepth : u32 , pdwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Extract < Impl : IExtractImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phbmpthumbnail : * mut super::super::Graphics::Gdi:: HBITMAP , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetLocation : GetLocation :: < Impl , IMPL_OFFSET > , Extract : Extract :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExtractImage < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait IExtractImage2Impl < > : Sized + IExtractImageImpl where { fn GetDateStamp ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > IExtractImage2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExtractImage2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExtractImage2Vtbl < > { unsafe extern "system" fn GetDateStamp < Impl : IExtractImage2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdatestamp : * mut super::super::Foundation:: FILETIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetDateStamp : GetDateStamp :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExtractImage2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IFileDialogImpl < > : Sized + IModalWindowImpl where { fn SetFileTypes ( ) ; fn SetFileTypeIndex ( ) ; fn GetFileTypeIndex ( ) ; fn Advise ( ) ; fn Unadvise ( ) ; fn SetOptions ( ) ; fn GetOptions ( ) ; fn SetDefaultFolder ( ) ; fn SetFolder ( ) ; fn GetFolder ( ) ; fn GetCurrentSelection ( ) ; fn SetFileName ( ) ; fn GetFileName ( ) ; fn SetTitle ( ) ; fn SetOkButtonLabel ( ) ; fn SetFileNameLabel ( ) ; fn GetResult ( ) ; fn AddPlace ( ) ; fn SetDefaultExtension ( ) ; fn Close ( ) ; fn SetClientGuid ( ) ; fn ClearClientData ( ) ; fn SetFilter ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IFileDialogVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFileDialogImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFileDialogVtbl < > { unsafe extern "system" fn SetFileTypes < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cfiletypes : u32 , rgfilterspec : * const Common:: COMDLG_FILTERSPEC , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFileTypeIndex < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ifiletype : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFileTypeIndex < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pifiletype : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Advise < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfde : :: windows :: core :: RawPtr , pdwcookie : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unadvise < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcookie : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetOptions < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fos : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetOptions < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfos : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDefaultFolder < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFolder < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolder < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsi : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCurrentSelection < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsi : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFileName < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFileName < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszname : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTitle < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psztitle : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetOkButtonLabel < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psztext : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFileNameLabel < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszlabel : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetResult < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsi : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPlace < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , fdap : FDAP , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDefaultExtension < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdefaultextension : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Close < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hr : :: windows :: core :: HRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetClientGuid < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , guid : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ClearClientData < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFilter < Impl : IFileDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfilter : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetFileTypes : SetFileTypes :: < Impl , IMPL_OFFSET > , SetFileTypeIndex : SetFileTypeIndex :: < Impl , IMPL_OFFSET > , GetFileTypeIndex : GetFileTypeIndex :: < Impl , IMPL_OFFSET > , Advise : Advise :: < Impl , IMPL_OFFSET > , Unadvise : Unadvise :: < Impl , IMPL_OFFSET > , SetOptions : SetOptions :: < Impl , IMPL_OFFSET > , GetOptions : GetOptions :: < Impl , IMPL_OFFSET > , SetDefaultFolder : SetDefaultFolder :: < Impl , IMPL_OFFSET > , SetFolder : SetFolder :: < Impl , IMPL_OFFSET > , GetFolder : GetFolder :: < Impl , IMPL_OFFSET > , GetCurrentSelection : GetCurrentSelection :: < Impl , IMPL_OFFSET > , SetFileName : SetFileName :: < Impl , IMPL_OFFSET > , GetFileName : GetFileName :: < Impl , IMPL_OFFSET > , SetTitle : SetTitle :: < Impl , IMPL_OFFSET > , SetOkButtonLabel : SetOkButtonLabel :: < Impl , IMPL_OFFSET > , SetFileNameLabel : SetFileNameLabel :: < Impl , IMPL_OFFSET > , GetResult : GetResult :: < Impl , IMPL_OFFSET > , AddPlace : AddPlace :: < Impl , IMPL_OFFSET > , SetDefaultExtension : SetDefaultExtension :: < Impl , IMPL_OFFSET > , Close : Close :: < Impl , IMPL_OFFSET > , SetClientGuid : SetClientGuid :: < Impl , IMPL_OFFSET > , ClearClientData : ClearClientData :: < Impl , IMPL_OFFSET > , SetFilter : SetFilter :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFileDialog < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IFileDialog2Impl < > : Sized + IFileDialogImpl + IModalWindowImpl where { fn SetCancelButtonLabel ( ) ; fn SetNavigationRoot ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IFileDialog2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFileDialog2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFileDialog2Vtbl < > { unsafe extern "system" fn SetCancelButtonLabel < Impl : IFileDialog2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszlabel : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetNavigationRoot < Impl : IFileDialog2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetCancelButtonLabel : SetCancelButtonLabel :: < Impl , IMPL_OFFSET > , SetNavigationRoot : SetNavigationRoot :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFileDialog2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IFileDialogControlEventsImpl < > : Sized where { fn OnItemSelected ( ) ; fn OnButtonClicked ( ) ; fn OnCheckButtonToggled ( ) ; fn OnControlActivating ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IFileDialogControlEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFileDialogControlEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFileDialogControlEventsVtbl < > { unsafe extern "system" fn OnItemSelected < Impl : IFileDialogControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfdc : :: windows :: core :: RawPtr , dwidctl : u32 , dwiditem : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnButtonClicked < Impl : IFileDialogControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfdc : :: windows :: core :: RawPtr , dwidctl : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnCheckButtonToggled < Impl : IFileDialogControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfdc : :: windows :: core :: RawPtr , dwidctl : u32 , bchecked : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnControlActivating < Impl : IFileDialogControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfdc : :: windows :: core :: RawPtr , dwidctl : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnItemSelected : OnItemSelected :: < Impl , IMPL_OFFSET > , OnButtonClicked : OnButtonClicked :: < Impl , IMPL_OFFSET > , OnCheckButtonToggled : OnCheckButtonToggled :: < Impl , IMPL_OFFSET > , OnControlActivating : OnControlActivating :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFileDialogControlEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IFileDialogCustomizeImpl < > : Sized where { fn EnableOpenDropDown ( ) ; fn AddMenu ( ) ; fn AddPushButton ( ) ; fn AddComboBox ( ) ; fn AddRadioButtonList ( ) ; fn AddCheckButton ( ) ; fn AddEditBox ( ) ; fn AddSeparator ( ) ; fn AddText ( ) ; fn SetControlLabel ( ) ; fn GetControlState ( ) ; fn SetControlState ( ) ; fn GetEditBoxText ( ) ; fn SetEditBoxText ( ) ; fn GetCheckButtonState ( ) ; fn SetCheckButtonState ( ) ; fn AddControlItem ( ) ; fn RemoveControlItem ( ) ; fn RemoveAllControlItems ( ) ; fn GetControlItemState ( ) ; fn SetControlItemState ( ) ; fn GetSelectedControlItem ( ) ; fn SetSelectedControlItem ( ) ; fn StartVisualGroup ( ) ; fn EndVisualGroup ( ) ; fn MakeProminent ( ) ; fn SetControlItemText ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IFileDialogCustomizeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFileDialogCustomizeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFileDialogCustomizeVtbl < > { unsafe extern "system" fn EnableOpenDropDown < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddMenu < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , pszlabel : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPushButton < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , pszlabel : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddComboBox < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddRadioButtonList < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddCheckButton < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , pszlabel : super::super::Foundation:: PWSTR , bchecked : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddEditBox < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , psztext : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddSeparator < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddText < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , psztext : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetControlLabel < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , pszlabel : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetControlState < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , pdwstate : * mut CDCONTROLSTATEF , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetControlState < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , dwstate : CDCONTROLSTATEF , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEditBoxText < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , ppsztext : * mut * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetEditBoxText < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , psztext : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCheckButtonState < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , pbchecked : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCheckButtonState < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , bchecked : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddControlItem < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , dwiditem : u32 , pszlabel : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveControlItem < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , dwiditem : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveAllControlItems < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetControlItemState < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , dwiditem : u32 , pdwstate : * mut CDCONTROLSTATEF , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetControlItemState < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , dwiditem : u32 , dwstate : CDCONTROLSTATEF , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSelectedControlItem < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , pdwiditem : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSelectedControlItem < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , dwiditem : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StartVisualGroup < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , pszlabel : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndVisualGroup < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MakeProminent < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetControlItemText < Impl : IFileDialogCustomizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidctl : u32 , dwiditem : u32 , pszlabel : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , EnableOpenDropDown : EnableOpenDropDown :: < Impl , IMPL_OFFSET > , AddMenu : AddMenu :: < Impl , IMPL_OFFSET > , AddPushButton : AddPushButton :: < Impl , IMPL_OFFSET > , AddComboBox : AddComboBox :: < Impl , IMPL_OFFSET > , AddRadioButtonList : AddRadioButtonList :: < Impl , IMPL_OFFSET > , AddCheckButton : AddCheckButton :: < Impl , IMPL_OFFSET > , AddEditBox : AddEditBox :: < Impl , IMPL_OFFSET > , AddSeparator : AddSeparator :: < Impl , IMPL_OFFSET > , AddText : AddText :: < Impl , IMPL_OFFSET > , SetControlLabel : SetControlLabel :: < Impl , IMPL_OFFSET > , GetControlState : GetControlState :: < Impl , IMPL_OFFSET > , SetControlState : SetControlState :: < Impl , IMPL_OFFSET > , GetEditBoxText : GetEditBoxText :: < Impl , IMPL_OFFSET > , SetEditBoxText : SetEditBoxText :: < Impl , IMPL_OFFSET > , GetCheckButtonState : GetCheckButtonState :: < Impl , IMPL_OFFSET > , SetCheckButtonState : SetCheckButtonState :: < Impl , IMPL_OFFSET > , AddControlItem : AddControlItem :: < Impl , IMPL_OFFSET > , RemoveControlItem : RemoveControlItem :: < Impl , IMPL_OFFSET > , RemoveAllControlItems : RemoveAllControlItems :: < Impl , IMPL_OFFSET > , GetControlItemState : GetControlItemState :: < Impl , IMPL_OFFSET > , SetControlItemState : SetControlItemState :: < Impl , IMPL_OFFSET > , GetSelectedControlItem : GetSelectedControlItem :: < Impl , IMPL_OFFSET > , SetSelectedControlItem : SetSelectedControlItem :: < Impl , IMPL_OFFSET > , StartVisualGroup : StartVisualGroup :: < Impl , IMPL_OFFSET > , EndVisualGroup : EndVisualGroup :: < Impl , IMPL_OFFSET > , MakeProminent : MakeProminent :: < Impl , IMPL_OFFSET > , SetControlItemText : SetControlItemText :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFileDialogCustomize < > as :: windows :: core :: Interface > :: IID } } pub trait IFileDialogEventsImpl < > : Sized where { fn OnFileOk ( ) ; fn OnFolderChanging ( ) ; fn OnFolderChange ( ) ; fn OnSelectionChange ( ) ; fn OnShareViolation ( ) ; fn OnTypeChange ( ) ; fn OnOverwrite ( ) ; } impl < > IFileDialogEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFileDialogEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFileDialogEventsVtbl < > { unsafe extern "system" fn OnFileOk < Impl : IFileDialogEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfd : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnFolderChanging < Impl : IFileDialogEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfd : :: windows :: core :: RawPtr , psifolder : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnFolderChange < Impl : IFileDialogEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfd : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnSelectionChange < Impl : IFileDialogEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfd : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnShareViolation < Impl : IFileDialogEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfd : :: windows :: core :: RawPtr , psi : :: windows :: core :: RawPtr , presponse : * mut FDE_SHAREVIOLATION_RESPONSE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnTypeChange < Impl : IFileDialogEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfd : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnOverwrite < Impl : IFileDialogEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfd : :: windows :: core :: RawPtr , psi : :: windows :: core :: RawPtr , presponse : * mut FDE_OVERWRITE_RESPONSE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnFileOk : OnFileOk :: < Impl , IMPL_OFFSET > , OnFolderChanging : OnFolderChanging :: < Impl , IMPL_OFFSET > , OnFolderChange : OnFolderChange :: < Impl , IMPL_OFFSET > , OnSelectionChange : OnSelectionChange :: < Impl , IMPL_OFFSET > , OnShareViolation : OnShareViolation :: < Impl , IMPL_OFFSET > , OnTypeChange : OnTypeChange :: < Impl , IMPL_OFFSET > , OnOverwrite : OnOverwrite :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFileDialogEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IFileIsInUseImpl < > : Sized where { fn GetAppName ( ) ; fn GetUsage ( ) ; fn GetCapabilities ( ) ; fn GetSwitchToHWND ( ) ; fn CloseFile ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IFileIsInUseVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFileIsInUseImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFileIsInUseVtbl < > { unsafe extern "system" fn GetAppName < Impl : IFileIsInUseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszname : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetUsage < Impl : IFileIsInUseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfut : * mut FILE_USAGE_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCapabilities < Impl : IFileIsInUseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwcapflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSwitchToHWND < Impl : IFileIsInUseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phwnd : * mut super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CloseFile < Impl : IFileIsInUseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetAppName : GetAppName :: < Impl , IMPL_OFFSET > , GetUsage : GetUsage :: < Impl , IMPL_OFFSET > , GetCapabilities : GetCapabilities :: < Impl , IMPL_OFFSET > , GetSwitchToHWND : GetSwitchToHWND :: < Impl , IMPL_OFFSET > , CloseFile : CloseFile :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFileIsInUse < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IFileOpenDialogImpl < > : Sized + IFileDialogImpl + IModalWindowImpl where { fn GetResults ( ) ; fn GetSelectedItems ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IFileOpenDialogVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFileOpenDialogImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFileOpenDialogVtbl < > { unsafe extern "system" fn GetResults < Impl : IFileOpenDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSelectedItems < Impl : IFileOpenDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsai : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetResults : GetResults :: < Impl , IMPL_OFFSET > , GetSelectedItems : GetSelectedItems :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFileOpenDialog < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait IFileOperationImpl < > : Sized where { fn Advise ( ) ; fn Unadvise ( ) ; fn SetOperationFlags ( ) ; fn SetProgressMessage ( ) ; fn SetProgressDialog ( ) ; fn SetProperties ( ) ; fn SetOwnerWindow ( ) ; fn ApplyPropertiesToItem ( ) ; fn ApplyPropertiesToItems ( ) ; fn RenameItem ( ) ; fn RenameItems ( ) ; fn MoveItem ( ) ; fn MoveItems ( ) ; fn CopyItem ( ) ; fn CopyItems ( ) ; fn DeleteItem ( ) ; fn DeleteItems ( ) ; fn NewItem ( ) ; fn PerformOperations ( ) ; fn GetAnyOperationsAborted ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > IFileOperationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFileOperationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFileOperationVtbl < > { unsafe extern "system" fn Advise < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfops : :: windows :: core :: RawPtr , pdwcookie : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unadvise < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcookie : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetOperationFlags < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwoperationflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProgressMessage < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszmessage : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProgressDialog < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , popd : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProperties < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pproparray : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetOwnerWindow < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndowner : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplyPropertiesToItem < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiitem : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplyPropertiesToItems < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkitems : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RenameItem < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiitem : :: windows :: core :: RawPtr , psznewname : super::super::Foundation:: PWSTR , pfopsitem : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RenameItems < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkitems : * mut :: core :: ffi :: c_void , psznewname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveItem < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiitem : :: windows :: core :: RawPtr , psidestinationfolder : :: windows :: core :: RawPtr , psznewname : super::super::Foundation:: PWSTR , pfopsitem : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveItems < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkitems : * mut :: core :: ffi :: c_void , psidestinationfolder : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CopyItem < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiitem : :: windows :: core :: RawPtr , psidestinationfolder : :: windows :: core :: RawPtr , pszcopyname : super::super::Foundation:: PWSTR , pfopsitem : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CopyItems < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkitems : * mut :: core :: ffi :: c_void , psidestinationfolder : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteItem < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiitem : :: windows :: core :: RawPtr , pfopsitem : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteItems < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkitems : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NewItem < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psidestinationfolder : :: windows :: core :: RawPtr , dwfileattributes : u32 , pszname : super::super::Foundation:: PWSTR , psztemplatename : super::super::Foundation:: PWSTR , pfopsitem : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PerformOperations < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAnyOperationsAborted < Impl : IFileOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfanyoperationsaborted : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Advise : Advise :: < Impl , IMPL_OFFSET > , Unadvise : Unadvise :: < Impl , IMPL_OFFSET > , SetOperationFlags : SetOperationFlags :: < Impl , IMPL_OFFSET > , SetProgressMessage : SetProgressMessage :: < Impl , IMPL_OFFSET > , SetProgressDialog : SetProgressDialog :: < Impl , IMPL_OFFSET > , SetProperties : SetProperties :: < Impl , IMPL_OFFSET > , SetOwnerWindow : SetOwnerWindow :: < Impl , IMPL_OFFSET > , ApplyPropertiesToItem : ApplyPropertiesToItem :: < Impl , IMPL_OFFSET > , ApplyPropertiesToItems : ApplyPropertiesToItems :: < Impl , IMPL_OFFSET > , RenameItem : RenameItem :: < Impl , IMPL_OFFSET > , RenameItems : RenameItems :: < Impl , IMPL_OFFSET > , MoveItem : MoveItem :: < Impl , IMPL_OFFSET > , MoveItems : MoveItems :: < Impl , IMPL_OFFSET > , CopyItem : CopyItem :: < Impl , IMPL_OFFSET > , CopyItems : CopyItems :: < Impl , IMPL_OFFSET > , DeleteItem : DeleteItem :: < Impl , IMPL_OFFSET > , DeleteItems : DeleteItems :: < Impl , IMPL_OFFSET > , NewItem : NewItem :: < Impl , IMPL_OFFSET > , PerformOperations : PerformOperations :: < Impl , IMPL_OFFSET > , GetAnyOperationsAborted : GetAnyOperationsAborted :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFileOperation < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait IFileOperation2Impl < > : Sized + IFileOperationImpl where { fn SetOperationFlags2 ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > IFileOperation2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFileOperation2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFileOperation2Vtbl < > { unsafe extern "system" fn SetOperationFlags2 < Impl : IFileOperation2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , operationflags2 : FILE_OPERATION_FLAGS2 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetOperationFlags2 : SetOperationFlags2 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFileOperation2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IFileOperationProgressSinkImpl < > : Sized where { fn StartOperations ( ) ; fn FinishOperations ( ) ; fn PreRenameItem ( ) ; fn PostRenameItem ( ) ; fn PreMoveItem ( ) ; fn PostMoveItem ( ) ; fn PreCopyItem ( ) ; fn PostCopyItem ( ) ; fn PreDeleteItem ( ) ; fn PostDeleteItem ( ) ; fn PreNewItem ( ) ; fn PostNewItem ( ) ; fn UpdateProgress ( ) ; fn ResetTimer ( ) ; fn PauseTimer ( ) ; fn ResumeTimer ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IFileOperationProgressSinkVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFileOperationProgressSinkImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFileOperationProgressSinkVtbl < > { unsafe extern "system" fn StartOperations < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FinishOperations < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hrresult : :: windows :: core :: HRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PreRenameItem < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , psiitem : :: windows :: core :: RawPtr , psznewname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PostRenameItem < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , psiitem : :: windows :: core :: RawPtr , psznewname : super::super::Foundation:: PWSTR , hrrename : :: windows :: core :: HRESULT , psinewlycreated : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PreMoveItem < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , psiitem : :: windows :: core :: RawPtr , psidestinationfolder : :: windows :: core :: RawPtr , psznewname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PostMoveItem < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , psiitem : :: windows :: core :: RawPtr , psidestinationfolder : :: windows :: core :: RawPtr , psznewname : super::super::Foundation:: PWSTR , hrmove : :: windows :: core :: HRESULT , psinewlycreated : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PreCopyItem < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , psiitem : :: windows :: core :: RawPtr , psidestinationfolder : :: windows :: core :: RawPtr , psznewname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PostCopyItem < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , psiitem : :: windows :: core :: RawPtr , psidestinationfolder : :: windows :: core :: RawPtr , psznewname : super::super::Foundation:: PWSTR , hrcopy : :: windows :: core :: HRESULT , psinewlycreated : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PreDeleteItem < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , psiitem : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PostDeleteItem < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , psiitem : :: windows :: core :: RawPtr , hrdelete : :: windows :: core :: HRESULT , psinewlycreated : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PreNewItem < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , psidestinationfolder : :: windows :: core :: RawPtr , psznewname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PostNewItem < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , psidestinationfolder : :: windows :: core :: RawPtr , psznewname : super::super::Foundation:: PWSTR , psztemplatename : super::super::Foundation:: PWSTR , dwfileattributes : u32 , hrnew : :: windows :: core :: HRESULT , psinewitem : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateProgress < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , iworktotal : u32 , iworksofar : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResetTimer < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PauseTimer < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResumeTimer < Impl : IFileOperationProgressSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , StartOperations : StartOperations :: < Impl , IMPL_OFFSET > , FinishOperations : FinishOperations :: < Impl , IMPL_OFFSET > , PreRenameItem : PreRenameItem :: < Impl , IMPL_OFFSET > , PostRenameItem : PostRenameItem :: < Impl , IMPL_OFFSET > , PreMoveItem : PreMoveItem :: < Impl , IMPL_OFFSET > , PostMoveItem : PostMoveItem :: < Impl , IMPL_OFFSET > , PreCopyItem : PreCopyItem :: < Impl , IMPL_OFFSET > , PostCopyItem : PostCopyItem :: < Impl , IMPL_OFFSET > , PreDeleteItem : PreDeleteItem :: < Impl , IMPL_OFFSET > , PostDeleteItem : PostDeleteItem :: < Impl , IMPL_OFFSET > , PreNewItem : PreNewItem :: < Impl , IMPL_OFFSET > , PostNewItem : PostNewItem :: < Impl , IMPL_OFFSET > , UpdateProgress : UpdateProgress :: < Impl , IMPL_OFFSET > , ResetTimer : ResetTimer :: < Impl , IMPL_OFFSET > , PauseTimer : PauseTimer :: < Impl , IMPL_OFFSET > , ResumeTimer : ResumeTimer :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFileOperationProgressSink < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait IFileSaveDialogImpl < > : Sized + IFileDialogImpl + IModalWindowImpl where { fn SetSaveAsItem ( ) ; fn SetProperties ( ) ; fn SetCollectedProperties ( ) ; fn GetProperties ( ) ; fn ApplyProperties ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > IFileSaveDialogVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFileSaveDialogImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFileSaveDialogVtbl < > { unsafe extern "system" fn SetSaveAsItem < Impl : IFileSaveDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProperties < Impl : IFileSaveDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstore : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCollectedProperties < Impl : IFileSaveDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plist : :: windows :: core :: RawPtr , fappenddefault : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProperties < Impl : IFileSaveDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppstore : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplyProperties < Impl : IFileSaveDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , pstore : :: windows :: core :: RawPtr , hwnd : super::super::Foundation:: HWND , psink : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetSaveAsItem : SetSaveAsItem :: < Impl , IMPL_OFFSET > , SetProperties : SetProperties :: < Impl , IMPL_OFFSET > , SetCollectedProperties : SetCollectedProperties :: < Impl , IMPL_OFFSET > , GetProperties : GetProperties :: < Impl , IMPL_OFFSET > , ApplyProperties : ApplyProperties :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFileSaveDialog < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IFileSearchBandImpl < > : Sized + IDispatchImpl where { fn SetFocus ( ) ; fn SetSearchParameters ( ) ; fn SearchID ( ) ; fn Scope ( ) ; fn QueryFile ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IFileSearchBandVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFileSearchBandImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFileSearchBandVtbl < > { unsafe extern "system" fn SetFocus < Impl : IFileSearchBandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSearchParameters < Impl : IFileSearchBandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrsearchid : * const super::super::Foundation:: BSTR , bnavtoresults : i16 , pvarscope : * const super::super::System::Com:: VARIANT , pvarqueryfile : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SearchID < Impl : IFileSearchBandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrsearchid : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Scope < Impl : IFileSearchBandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarscope : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryFile < Impl : IFileSearchBandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarfile : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetFocus : SetFocus :: < Impl , IMPL_OFFSET > , SetSearchParameters : SetSearchParameters :: < Impl , IMPL_OFFSET > , SearchID : SearchID :: < Impl , IMPL_OFFSET > , Scope : Scope :: < Impl , IMPL_OFFSET > , QueryFile : QueryFile :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFileSearchBand < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait IFileSyncMergeHandlerImpl < > : Sized where { fn Merge ( ) ; fn ShowResolveConflictUIAsync ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > IFileSyncMergeHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFileSyncMergeHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFileSyncMergeHandlerVtbl < > { unsafe extern "system" fn Merge < Impl : IFileSyncMergeHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , localfilepath : super::super::Foundation:: PWSTR , serverfilepath : super::super::Foundation:: PWSTR , updatestatus : * mut MERGE_UPDATE_STATUS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowResolveConflictUIAsync < Impl : IFileSyncMergeHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , localfilepath : super::super::Foundation:: PWSTR , monitortodisplayon : super::super::Graphics::Gdi:: HMONITOR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Merge : Merge :: < Impl , IMPL_OFFSET > , ShowResolveConflictUIAsync : ShowResolveConflictUIAsync :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFileSyncMergeHandler < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Storage_FileSystem" ) ) ] pub trait IFileSystemBindDataImpl < > : Sized where { fn SetFindData ( ) ; fn GetFindData ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Storage_FileSystem" ) ) ] impl < > IFileSystemBindDataVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFileSystemBindDataImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFileSystemBindDataVtbl < > { unsafe extern "system" fn SetFindData < Impl : IFileSystemBindDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfd : * const super::super::Storage::FileSystem:: WIN32_FIND_DATAW , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFindData < Impl : IFileSystemBindDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfd : * mut super::super::Storage::FileSystem:: WIN32_FIND_DATAW , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetFindData : SetFindData :: < Impl , IMPL_OFFSET > , GetFindData : GetFindData :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFileSystemBindData < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Storage_FileSystem" ) ) ] pub trait IFileSystemBindData2Impl < > : Sized + IFileSystemBindDataImpl where { fn SetFileID ( ) ; fn GetFileID ( ) ; fn SetJunctionCLSID ( ) ; fn GetJunctionCLSID ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Storage_FileSystem" ) ) ] impl < > IFileSystemBindData2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFileSystemBindData2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFileSystemBindData2Vtbl < > { unsafe extern "system" fn SetFileID < Impl : IFileSystemBindData2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lifileid : i64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFileID < Impl : IFileSystemBindData2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plifileid : * mut i64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetJunctionCLSID < Impl : IFileSystemBindData2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , clsid : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetJunctionCLSID < Impl : IFileSystemBindData2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pclsid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetFileID : SetFileID :: < Impl , IMPL_OFFSET > , GetFileID : GetFileID :: < Impl , IMPL_OFFSET > , SetJunctionCLSID : SetJunctionCLSID :: < Impl , IMPL_OFFSET > , GetJunctionCLSID : GetJunctionCLSID :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFileSystemBindData2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IFolderBandPrivImpl < > : Sized where { fn SetCascade ( ) ; fn SetAccelerators ( ) ; fn SetNoIcons ( ) ; fn SetNoText ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IFolderBandPrivVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFolderBandPrivImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFolderBandPrivVtbl < > { unsafe extern "system" fn SetCascade < Impl : IFolderBandPrivImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fcascade : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetAccelerators < Impl : IFolderBandPrivImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , faccelerators : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetNoIcons < Impl : IFolderBandPrivImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fnoicons : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetNoText < Impl : IFolderBandPrivImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fnotext : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetCascade : SetCascade :: < Impl , IMPL_OFFSET > , SetAccelerators : SetAccelerators :: < Impl , IMPL_OFFSET > , SetNoIcons : SetNoIcons :: < Impl , IMPL_OFFSET > , SetNoText : SetNoText :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFolderBandPriv < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IFolderFilterImpl < > : Sized where { fn ShouldShow ( ) ; fn GetEnumFlags ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IFolderFilterVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFolderFilterImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFolderFilterVtbl < > { unsafe extern "system" fn ShouldShow < Impl : IFolderFilterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psf : :: windows :: core :: RawPtr , pidlfolder : * const Common:: ITEMIDLIST , pidlitem : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEnumFlags < Impl : IFolderFilterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psf : :: windows :: core :: RawPtr , pidlfolder : * const Common:: ITEMIDLIST , phwnd : * mut super::super::Foundation:: HWND , pgrfflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ShouldShow : ShouldShow :: < Impl , IMPL_OFFSET > , GetEnumFlags : GetEnumFlags :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFolderFilter < > as :: windows :: core :: Interface > :: IID } } pub trait IFolderFilterSiteImpl < > : Sized where { fn SetFilter ( ) ; } impl < > IFolderFilterSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFolderFilterSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFolderFilterSiteVtbl < > { unsafe extern "system" fn SetFilter < Impl : IFolderFilterSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetFilter : SetFilter :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFolderFilterSite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IFolderViewImpl < > : Sized where { fn GetCurrentViewMode ( ) ; fn SetCurrentViewMode ( ) ; fn GetFolder ( ) ; fn Item ( ) ; fn ItemCount ( ) ; fn Items ( ) ; fn GetSelectionMarkedItem ( ) ; fn GetFocusedItem ( ) ; fn GetItemPosition ( ) ; fn GetSpacing ( ) ; fn GetDefaultSpacing ( ) ; fn GetAutoArrange ( ) ; fn SelectItem ( ) ; fn SelectAndPositionItems ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IFolderViewVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFolderViewImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFolderViewVtbl < > { unsafe extern "system" fn GetCurrentViewMode < Impl : IFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pviewmode : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCurrentViewMode < Impl : IFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , viewmode : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolder < Impl : IFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : IFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , iitemindex : i32 , ppidl : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ItemCount < Impl : IFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uflags : u32 , pcitems : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Items < Impl : IFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uflags : u32 , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSelectionMarkedItem < Impl : IFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , piitem : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFocusedItem < Impl : IFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , piitem : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItemPosition < Impl : IFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , ppt : * mut super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSpacing < Impl : IFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppt : * mut super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDefaultSpacing < Impl : IFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppt : * mut super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAutoArrange < Impl : IFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SelectItem < Impl : IFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , iitem : i32 , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SelectAndPositionItems < Impl : IFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cidl : u32 , apidl : * const * const Common:: ITEMIDLIST , apt : * const super::super::Foundation:: POINT , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetCurrentViewMode : GetCurrentViewMode :: < Impl , IMPL_OFFSET > , SetCurrentViewMode : SetCurrentViewMode :: < Impl , IMPL_OFFSET > , GetFolder : GetFolder :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , ItemCount : ItemCount :: < Impl , IMPL_OFFSET > , Items : Items :: < Impl , IMPL_OFFSET > , GetSelectionMarkedItem : GetSelectionMarkedItem :: < Impl , IMPL_OFFSET > , GetFocusedItem : GetFocusedItem :: < Impl , IMPL_OFFSET > , GetItemPosition : GetItemPosition :: < Impl , IMPL_OFFSET > , GetSpacing : GetSpacing :: < Impl , IMPL_OFFSET > , GetDefaultSpacing : GetDefaultSpacing :: < Impl , IMPL_OFFSET > , GetAutoArrange : GetAutoArrange :: < Impl , IMPL_OFFSET > , SelectItem : SelectItem :: < Impl , IMPL_OFFSET > , SelectAndPositionItems : SelectAndPositionItems :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFolderView < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait IFolderView2Impl < > : Sized + IFolderViewImpl where { fn SetGroupBy ( ) ; fn GetGroupBy ( ) ; fn SetViewProperty ( ) ; fn GetViewProperty ( ) ; fn SetTileViewProperties ( ) ; fn SetExtendedTileViewProperties ( ) ; fn SetText ( ) ; fn SetCurrentFolderFlags ( ) ; fn GetCurrentFolderFlags ( ) ; fn GetSortColumnCount ( ) ; fn SetSortColumns ( ) ; fn GetSortColumns ( ) ; fn GetItem ( ) ; fn GetVisibleItem ( ) ; fn GetSelectedItem ( ) ; fn GetSelection ( ) ; fn GetSelectionState ( ) ; fn InvokeVerbOnSelection ( ) ; fn SetViewModeAndIconSize ( ) ; fn GetViewModeAndIconSize ( ) ; fn SetGroupSubsetCount ( ) ; fn GetGroupSubsetCount ( ) ; fn SetRedraw ( ) ; fn IsMoveInSameFolder ( ) ; fn DoRename ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > IFolderView2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFolderView2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFolderView2Vtbl < > { unsafe extern "system" fn SetGroupBy < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , key : * const PropertiesSystem:: PROPERTYKEY , fascending : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetGroupBy < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pkey : * mut PropertiesSystem:: PROPERTYKEY , pfascending : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetViewProperty < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , propkey : * const PropertiesSystem:: PROPERTYKEY , propvar : * const super::super::System::Com::StructuredStorage:: PROPVARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetViewProperty < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , propkey : * const PropertiesSystem:: PROPERTYKEY , ppropvar : * mut super::super::System::Com::StructuredStorage:: PROPVARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTileViewProperties < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , pszproplist : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetExtendedTileViewProperties < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , pszproplist : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetText < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , itype : FVTEXTTYPE , pwsztext : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCurrentFolderFlags < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwmask : u32 , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCurrentFolderFlags < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSortColumnCount < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pccolumns : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSortColumns < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rgsortcolumns : * const SORTCOLUMN , ccolumns : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSortColumns < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rgsortcolumns : * mut SORTCOLUMN , ccolumns : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItem < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , iitem : i32 , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetVisibleItem < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , istart : i32 , fprevious : super::super::Foundation:: BOOL , piitem : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSelectedItem < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , istart : i32 , piitem : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSelection < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fnoneimpliesfolder : super::super::Foundation:: BOOL , ppsia : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSelectionState < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , pdwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvokeVerbOnSelection < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszverb : super::super::Foundation:: PSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetViewModeAndIconSize < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uviewmode : FOLDERVIEWMODE , iimagesize : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetViewModeAndIconSize < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , puviewmode : * mut FOLDERVIEWMODE , piimagesize : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetGroupSubsetCount < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cvisiblerows : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetGroupSubsetCount < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcvisiblerows : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetRedraw < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fredrawon : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsMoveInSameFolder < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DoRename < Impl : IFolderView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetGroupBy : SetGroupBy :: < Impl , IMPL_OFFSET > , GetGroupBy : GetGroupBy :: < Impl , IMPL_OFFSET > , SetViewProperty : SetViewProperty :: < Impl , IMPL_OFFSET > , GetViewProperty : GetViewProperty :: < Impl , IMPL_OFFSET > , SetTileViewProperties : SetTileViewProperties :: < Impl , IMPL_OFFSET > , SetExtendedTileViewProperties : SetExtendedTileViewProperties :: < Impl , IMPL_OFFSET > , SetText : SetText :: < Impl , IMPL_OFFSET > , SetCurrentFolderFlags : SetCurrentFolderFlags :: < Impl , IMPL_OFFSET > , GetCurrentFolderFlags : GetCurrentFolderFlags :: < Impl , IMPL_OFFSET > , GetSortColumnCount : GetSortColumnCount :: < Impl , IMPL_OFFSET > , SetSortColumns : SetSortColumns :: < Impl , IMPL_OFFSET > , GetSortColumns : GetSortColumns :: < Impl , IMPL_OFFSET > , GetItem : GetItem :: < Impl , IMPL_OFFSET > , GetVisibleItem : GetVisibleItem :: < Impl , IMPL_OFFSET > , GetSelectedItem : GetSelectedItem :: < Impl , IMPL_OFFSET > , GetSelection : GetSelection :: < Impl , IMPL_OFFSET > , GetSelectionState : GetSelectionState :: < Impl , IMPL_OFFSET > , InvokeVerbOnSelection : InvokeVerbOnSelection :: < Impl , IMPL_OFFSET > , SetViewModeAndIconSize : SetViewModeAndIconSize :: < Impl , IMPL_OFFSET > , GetViewModeAndIconSize : GetViewModeAndIconSize :: < Impl , IMPL_OFFSET > , SetGroupSubsetCount : SetGroupSubsetCount :: < Impl , IMPL_OFFSET > , GetGroupSubsetCount : GetGroupSubsetCount :: < Impl , IMPL_OFFSET > , SetRedraw : SetRedraw :: < Impl , IMPL_OFFSET > , IsMoveInSameFolder : IsMoveInSameFolder :: < Impl , IMPL_OFFSET > , DoRename : DoRename :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFolderView2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IFolderViewHostImpl < > : Sized where { fn Initialize ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IFolderViewHostVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFolderViewHostImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFolderViewHostVtbl < > { unsafe extern "system" fn Initialize < Impl : IFolderViewHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndparent : super::super::Foundation:: HWND , pdo : :: windows :: core :: RawPtr , prc : * const super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFolderViewHost < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IFolderViewOCImpl < > : Sized + IDispatchImpl where { fn SetFolderView ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IFolderViewOCVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFolderViewOCImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFolderViewOCVtbl < > { unsafe extern "system" fn SetFolderView < Impl : IFolderViewOCImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdisp : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetFolderView : SetFolderView :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFolderViewOC < > as :: windows :: core :: Interface > :: IID } } pub trait IFolderViewOptionsImpl < > : Sized where { fn SetFolderViewOptions ( ) ; fn GetFolderViewOptions ( ) ; } impl < > IFolderViewOptionsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFolderViewOptionsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFolderViewOptionsVtbl < > { unsafe extern "system" fn SetFolderViewOptions < Impl : IFolderViewOptionsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fvomask : FOLDERVIEWOPTIONS , fvoflags : FOLDERVIEWOPTIONS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolderViewOptions < Impl : IFolderViewOptionsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfvoflags : * mut FOLDERVIEWOPTIONS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetFolderViewOptions : SetFolderViewOptions :: < Impl , IMPL_OFFSET > , GetFolderViewOptions : GetFolderViewOptions :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFolderViewOptions < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait IFolderViewSettingsImpl < > : Sized where { fn GetColumnPropertyList ( ) ; fn GetGroupByProperty ( ) ; fn GetViewMode ( ) ; fn GetIconSize ( ) ; fn GetFolderFlags ( ) ; fn GetSortColumns ( ) ; fn GetGroupSubsetCount ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > IFolderViewSettingsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFolderViewSettingsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFolderViewSettingsVtbl < > { unsafe extern "system" fn GetColumnPropertyList < Impl : IFolderViewSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetGroupByProperty < Impl : IFolderViewSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pkey : * mut PropertiesSystem:: PROPERTYKEY , pfgroupascending : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetViewMode < Impl : IFolderViewSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plvm : * mut FOLDERLOGICALVIEWMODE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIconSize < Impl : IFolderViewSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , puiconsize : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolderFlags < Impl : IFolderViewSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfoldermask : * mut FOLDERFLAGS , pfolderflags : * mut FOLDERFLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSortColumns < Impl : IFolderViewSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rgsortcolumns : * mut SORTCOLUMN , ccolumnsin : u32 , pccolumnsout : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetGroupSubsetCount < Impl : IFolderViewSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcvisiblerows : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetColumnPropertyList : GetColumnPropertyList :: < Impl , IMPL_OFFSET > , GetGroupByProperty : GetGroupByProperty :: < Impl , IMPL_OFFSET > , GetViewMode : GetViewMode :: < Impl , IMPL_OFFSET > , GetIconSize : GetIconSize :: < Impl , IMPL_OFFSET > , GetFolderFlags : GetFolderFlags :: < Impl , IMPL_OFFSET > , GetSortColumns : GetSortColumns :: < Impl , IMPL_OFFSET > , GetGroupSubsetCount : GetGroupSubsetCount :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFolderViewSettings < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IFrameworkInputPaneImpl < > : Sized where { fn Advise ( ) ; fn AdviseWithHWND ( ) ; fn Unadvise ( ) ; fn Location ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IFrameworkInputPaneVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFrameworkInputPaneImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFrameworkInputPaneVtbl < > { unsafe extern "system" fn Advise < Impl : IFrameworkInputPaneImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwindow : * mut :: core :: ffi :: c_void , phandler : :: windows :: core :: RawPtr , pdwcookie : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AdviseWithHWND < Impl : IFrameworkInputPaneImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , phandler : :: windows :: core :: RawPtr , pdwcookie : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unadvise < Impl : IFrameworkInputPaneImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcookie : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Location < Impl : IFrameworkInputPaneImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prcinputpanescreenlocation : * mut super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Advise : Advise :: < Impl , IMPL_OFFSET > , AdviseWithHWND : AdviseWithHWND :: < Impl , IMPL_OFFSET > , Unadvise : Unadvise :: < Impl , IMPL_OFFSET > , Location : Location :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFrameworkInputPane < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IFrameworkInputPaneHandlerImpl < > : Sized where { fn Showing ( ) ; fn Hiding ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IFrameworkInputPaneHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFrameworkInputPaneHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFrameworkInputPaneHandlerVtbl < > { unsafe extern "system" fn Showing < Impl : IFrameworkInputPaneHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prcinputpanescreenlocation : * const super::super::Foundation:: RECT , fensurefocusedelementinview : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Hiding < Impl : IFrameworkInputPaneHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fensurefocusedelementinview : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Showing : Showing :: < Impl , IMPL_OFFSET > , Hiding : Hiding :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFrameworkInputPaneHandler < > as :: windows :: core :: Interface > :: IID } } pub trait IGetServiceIdsImpl < > : Sized where { fn GetServiceIds ( ) ; } impl < > IGetServiceIdsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IGetServiceIdsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IGetServiceIdsVtbl < > { unsafe extern "system" fn GetServiceIds < Impl : IGetServiceIdsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , serviceidcount : * mut u32 , serviceids : * mut * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetServiceIds : GetServiceIds :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IGetServiceIds < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IHWEventHandlerImpl < > : Sized where { fn Initialize ( ) ; fn HandleEvent ( ) ; fn HandleEventWithContent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IHWEventHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHWEventHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHWEventHandlerVtbl < > { unsafe extern "system" fn Initialize < Impl : IHWEventHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszparams : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HandleEvent < Impl : IHWEventHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdeviceid : super::super::Foundation:: PWSTR , pszaltdeviceid : super::super::Foundation:: PWSTR , pszeventtype : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HandleEventWithContent < Impl : IHWEventHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdeviceid : super::super::Foundation:: PWSTR , pszaltdeviceid : super::super::Foundation:: PWSTR , pszeventtype : super::super::Foundation:: PWSTR , pszcontenttypehandler : super::super::Foundation:: PWSTR , pdataobject : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , HandleEvent : HandleEvent :: < Impl , IMPL_OFFSET > , HandleEventWithContent : HandleEventWithContent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHWEventHandler < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IHWEventHandler2Impl < > : Sized + IHWEventHandlerImpl where { fn HandleEventWithHWND ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IHWEventHandler2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHWEventHandler2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHWEventHandler2Vtbl < > { unsafe extern "system" fn HandleEventWithHWND < Impl : IHWEventHandler2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdeviceid : super::super::Foundation:: PWSTR , pszaltdeviceid : super::super::Foundation:: PWSTR , pszeventtype : super::super::Foundation:: PWSTR , hwndowner : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , HandleEventWithHWND : HandleEventWithHWND :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHWEventHandler2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IHandlerActivationHostImpl < > : Sized where { fn BeforeCoCreateInstance ( ) ; fn BeforeCreateProcess ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IHandlerActivationHostVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHandlerActivationHostImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHandlerActivationHostVtbl < > { unsafe extern "system" fn BeforeCoCreateInstance < Impl : IHandlerActivationHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , clsidhandler : * const :: windows :: core :: GUID , itemsbeingactivated : :: windows :: core :: RawPtr , handlerinfo : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeforeCreateProcess < Impl : IHandlerActivationHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , applicationpath : super::super::Foundation:: PWSTR , commandline : super::super::Foundation:: PWSTR , handlerinfo : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , BeforeCoCreateInstance : BeforeCoCreateInstance :: < Impl , IMPL_OFFSET > , BeforeCreateProcess : BeforeCreateProcess :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHandlerActivationHost < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IHandlerInfoImpl < > : Sized where { fn GetApplicationDisplayName ( ) ; fn GetApplicationPublisher ( ) ; fn GetApplicationIconReference ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IHandlerInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHandlerInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHandlerInfoVtbl < > { unsafe extern "system" fn GetApplicationDisplayName < Impl : IHandlerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetApplicationPublisher < Impl : IHandlerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetApplicationIconReference < Impl : IHandlerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetApplicationDisplayName : GetApplicationDisplayName :: < Impl , IMPL_OFFSET > , GetApplicationPublisher : GetApplicationPublisher :: < Impl , IMPL_OFFSET > , GetApplicationIconReference : GetApplicationIconReference :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHandlerInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IHandlerInfo2Impl < > : Sized + IHandlerInfoImpl where { fn GetApplicationId ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IHandlerInfo2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHandlerInfo2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHandlerInfo2Vtbl < > { unsafe extern "system" fn GetApplicationId < Impl : IHandlerInfo2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetApplicationId : GetApplicationId :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHandlerInfo2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IHlinkImpl < > : Sized where { fn SetHlinkSite ( ) ; fn GetHlinkSite ( ) ; fn SetMonikerReference ( ) ; fn GetMonikerReference ( ) ; fn SetStringReference ( ) ; fn GetStringReference ( ) ; fn SetFriendlyName ( ) ; fn GetFriendlyName ( ) ; fn SetTargetFrameName ( ) ; fn GetTargetFrameName ( ) ; fn GetMiscStatus ( ) ; fn Navigate ( ) ; fn SetAdditionalParams ( ) ; fn GetAdditionalParams ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IHlinkVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHlinkImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHlinkVtbl < > { unsafe extern "system" fn SetHlinkSite < Impl : IHlinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pihlsite : :: windows :: core :: RawPtr , dwsitedata : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetHlinkSite < Impl : IHlinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppihlsite : * mut :: windows :: core :: RawPtr , pdwsitedata : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMonikerReference < Impl : IHlinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , grfhlsetf : u32 , pimktarget : :: windows :: core :: RawPtr , pwzlocation : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMonikerReference < Impl : IHlinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwwhichref : u32 , ppimktarget : * mut :: windows :: core :: RawPtr , ppwzlocation : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetStringReference < Impl : IHlinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , grfhlsetf : u32 , pwztarget : super::super::Foundation:: PWSTR , pwzlocation : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetStringReference < Impl : IHlinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwwhichref : u32 , ppwztarget : * mut super::super::Foundation:: PWSTR , ppwzlocation : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFriendlyName < Impl : IHlinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzfriendlyname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFriendlyName < Impl : IHlinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , grfhlfnamef : u32 , ppwzfriendlyname : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTargetFrameName < Impl : IHlinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwztargetframename : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTargetFrameName < Impl : IHlinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppwztargetframename : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMiscStatus < Impl : IHlinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwstatus : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Navigate < Impl : IHlinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , grfhlnf : u32 , pibc : :: windows :: core :: RawPtr , pibsc : :: windows :: core :: RawPtr , pihlbc : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetAdditionalParams < Impl : IHlinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzadditionalparams : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAdditionalParams < Impl : IHlinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppwzadditionalparams : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetHlinkSite : SetHlinkSite :: < Impl , IMPL_OFFSET > , GetHlinkSite : GetHlinkSite :: < Impl , IMPL_OFFSET > , SetMonikerReference : SetMonikerReference :: < Impl , IMPL_OFFSET > , GetMonikerReference : GetMonikerReference :: < Impl , IMPL_OFFSET > , SetStringReference : SetStringReference :: < Impl , IMPL_OFFSET > , GetStringReference : GetStringReference :: < Impl , IMPL_OFFSET > , SetFriendlyName : SetFriendlyName :: < Impl , IMPL_OFFSET > , GetFriendlyName : GetFriendlyName :: < Impl , IMPL_OFFSET > , SetTargetFrameName : SetTargetFrameName :: < Impl , IMPL_OFFSET > , GetTargetFrameName : GetTargetFrameName :: < Impl , IMPL_OFFSET > , GetMiscStatus : GetMiscStatus :: < Impl , IMPL_OFFSET > , Navigate : Navigate :: < Impl , IMPL_OFFSET > , SetAdditionalParams : SetAdditionalParams :: < Impl , IMPL_OFFSET > , GetAdditionalParams : GetAdditionalParams :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHlink < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IHlinkBrowseContextImpl < > : Sized where { fn Register ( ) ; fn GetObject ( ) ; fn Revoke ( ) ; fn SetBrowseWindowInfo ( ) ; fn GetBrowseWindowInfo ( ) ; fn SetInitialHlink ( ) ; fn OnNavigateHlink ( ) ; fn UpdateHlink ( ) ; fn EnumNavigationStack ( ) ; fn QueryHlink ( ) ; fn GetHlink ( ) ; fn SetCurrentHlink ( ) ; fn Clone ( ) ; fn Close ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IHlinkBrowseContextVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHlinkBrowseContextImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHlinkBrowseContextVtbl < > { unsafe extern "system" fn Register < Impl : IHlinkBrowseContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , reserved : u32 , piunk : * mut :: core :: ffi :: c_void , pimk : :: windows :: core :: RawPtr , pdwregister : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetObject < Impl : IHlinkBrowseContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pimk : :: windows :: core :: RawPtr , fbindifrootregistered : super::super::Foundation:: BOOL , ppiunk : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Revoke < Impl : IHlinkBrowseContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwregister : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBrowseWindowInfo < Impl : IHlinkBrowseContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phlbwi : * const HLBWINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBrowseWindowInfo < Impl : IHlinkBrowseContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phlbwi : * mut HLBWINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetInitialHlink < Impl : IHlinkBrowseContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pimktarget : :: windows :: core :: RawPtr , pwzlocation : super::super::Foundation:: PWSTR , pwzfriendlyname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnNavigateHlink < Impl : IHlinkBrowseContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , grfhlnf : u32 , pimktarget : :: windows :: core :: RawPtr , pwzlocation : super::super::Foundation:: PWSTR , pwzfriendlyname : super::super::Foundation:: PWSTR , puhlid : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateHlink < Impl : IHlinkBrowseContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uhlid : u32 , pimktarget : :: windows :: core :: RawPtr , pwzlocation : super::super::Foundation:: PWSTR , pwzfriendlyname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnumNavigationStack < Impl : IHlinkBrowseContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwreserved : u32 , grfhlfnamef : u32 , ppienumhlitem : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryHlink < Impl : IHlinkBrowseContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , grfhlqf : u32 , uhlid : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetHlink < Impl : IHlinkBrowseContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uhlid : u32 , ppihl : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCurrentHlink < Impl : IHlinkBrowseContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uhlid : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IHlinkBrowseContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , piunkouter : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppiunkobj : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Close < Impl : IHlinkBrowseContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , reserved : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Register : Register :: < Impl , IMPL_OFFSET > , GetObject : GetObject :: < Impl , IMPL_OFFSET > , Revoke : Revoke :: < Impl , IMPL_OFFSET > , SetBrowseWindowInfo : SetBrowseWindowInfo :: < Impl , IMPL_OFFSET > , GetBrowseWindowInfo : GetBrowseWindowInfo :: < Impl , IMPL_OFFSET > , SetInitialHlink : SetInitialHlink :: < Impl , IMPL_OFFSET > , OnNavigateHlink : OnNavigateHlink :: < Impl , IMPL_OFFSET > , UpdateHlink : UpdateHlink :: < Impl , IMPL_OFFSET > , EnumNavigationStack : EnumNavigationStack :: < Impl , IMPL_OFFSET > , QueryHlink : QueryHlink :: < Impl , IMPL_OFFSET > , GetHlink : GetHlink :: < Impl , IMPL_OFFSET > , SetCurrentHlink : SetCurrentHlink :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , Close : Close :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHlinkBrowseContext < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IHlinkFrameImpl < > : Sized where { fn SetBrowseContext ( ) ; fn GetBrowseContext ( ) ; fn Navigate ( ) ; fn OnNavigate ( ) ; fn UpdateHlink ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IHlinkFrameVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHlinkFrameImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHlinkFrameVtbl < > { unsafe extern "system" fn SetBrowseContext < Impl : IHlinkFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pihlbc : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBrowseContext < Impl : IHlinkFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppihlbc : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Navigate < Impl : IHlinkFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , grfhlnf : u32 , pbc : :: windows :: core :: RawPtr , pibsc : :: windows :: core :: RawPtr , pihlnavigate : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnNavigate < Impl : IHlinkFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , grfhlnf : u32 , pimktarget : :: windows :: core :: RawPtr , pwzlocation : super::super::Foundation:: PWSTR , pwzfriendlyname : super::super::Foundation:: PWSTR , dwreserved : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateHlink < Impl : IHlinkFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uhlid : u32 , pimktarget : :: windows :: core :: RawPtr , pwzlocation : super::super::Foundation:: PWSTR , pwzfriendlyname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetBrowseContext : SetBrowseContext :: < Impl , IMPL_OFFSET > , GetBrowseContext : GetBrowseContext :: < Impl , IMPL_OFFSET > , Navigate : Navigate :: < Impl , IMPL_OFFSET > , OnNavigate : OnNavigate :: < Impl , IMPL_OFFSET > , UpdateHlink : UpdateHlink :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHlinkFrame < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IHlinkSiteImpl < > : Sized where { fn QueryService ( ) ; fn GetMoniker ( ) ; fn ReadyToNavigate ( ) ; fn OnNavigationComplete ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IHlinkSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHlinkSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHlinkSiteVtbl < > { unsafe extern "system" fn QueryService < Impl : IHlinkSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwsitedata : u32 , guidservice : * const :: windows :: core :: GUID , riid : * const :: windows :: core :: GUID , ppiunk : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMoniker < Impl : IHlinkSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwsitedata : u32 , dwassign : u32 , dwwhich : u32 , ppimk : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReadyToNavigate < Impl : IHlinkSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwsitedata : u32 , dwreserved : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnNavigationComplete < Impl : IHlinkSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwsitedata : u32 , dwreserved : u32 , hrerror : :: windows :: core :: HRESULT , pwzerror : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , QueryService : QueryService :: < Impl , IMPL_OFFSET > , GetMoniker : GetMoniker :: < Impl , IMPL_OFFSET > , ReadyToNavigate : ReadyToNavigate :: < Impl , IMPL_OFFSET > , OnNavigationComplete : OnNavigationComplete :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHlinkSite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IHlinkTargetImpl < > : Sized where { fn SetBrowseContext ( ) ; fn GetBrowseContext ( ) ; fn Navigate ( ) ; fn GetMoniker ( ) ; fn GetFriendlyName ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IHlinkTargetVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHlinkTargetImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHlinkTargetVtbl < > { unsafe extern "system" fn SetBrowseContext < Impl : IHlinkTargetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pihlbc : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBrowseContext < Impl : IHlinkTargetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppihlbc : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Navigate < Impl : IHlinkTargetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , grfhlnf : u32 , pwzjumplocation : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMoniker < Impl : IHlinkTargetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzlocation : super::super::Foundation:: PWSTR , dwassign : u32 , ppimklocation : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFriendlyName < Impl : IHlinkTargetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzlocation : super::super::Foundation:: PWSTR , ppwzfriendlyname : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetBrowseContext : SetBrowseContext :: < Impl , IMPL_OFFSET > , GetBrowseContext : GetBrowseContext :: < Impl , IMPL_OFFSET > , Navigate : Navigate :: < Impl , IMPL_OFFSET > , GetMoniker : GetMoniker :: < Impl , IMPL_OFFSET > , GetFriendlyName : GetFriendlyName :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHlinkTarget < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IHomeGroupImpl < > : Sized where { fn IsMember ( ) ; fn ShowSharingWizard ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IHomeGroupVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHomeGroupImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHomeGroupVtbl < > { unsafe extern "system" fn IsMember < Impl : IHomeGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , member : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowSharingWizard < Impl : IHomeGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , owner : super::super::Foundation:: HWND , sharingchoices : * mut HOMEGROUPSHARINGCHOICES , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , IsMember : IsMember :: < Impl , IMPL_OFFSET > , ShowSharingWizard : ShowSharingWizard :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHomeGroup < > as :: windows :: core :: Interface > :: IID } } pub trait IIOCancelInformationImpl < > : Sized where { fn SetCancelInformation ( ) ; fn GetCancelInformation ( ) ; } impl < > IIOCancelInformationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IIOCancelInformationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IIOCancelInformationVtbl < > { unsafe extern "system" fn SetCancelInformation < Impl : IIOCancelInformationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwthreadid : u32 , umsgcancel : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCancelInformation < Impl : IIOCancelInformationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwthreadid : * mut u32 , pumsgcancel : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetCancelInformation : SetCancelInformation :: < Impl , IMPL_OFFSET > , GetCancelInformation : GetCancelInformation :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IIOCancelInformation < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IIdentityNameImpl < > : Sized + IRelatedItemImpl where { } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IIdentityNameVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IIdentityNameImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IIdentityNameVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IIdentityName < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" ) ) ] pub trait IImageRecompressImpl < > : Sized where { fn RecompressImage ( ) ; } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" ) ) ] impl < > IImageRecompressVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IImageRecompressImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IImageRecompressVtbl < > { unsafe extern "system" fn RecompressImage < Impl : IImageRecompressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , cx : i32 , cy : i32 , iquality : i32 , pstg : :: windows :: core :: RawPtr , ppstrmout : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , RecompressImage : RecompressImage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IImageRecompress < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com_StructuredStorage" ) ) ] pub trait IInitializeCommandImpl < > : Sized where { fn Initialize ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com_StructuredStorage" ) ) ] impl < > IInitializeCommandVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInitializeCommandImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInitializeCommandVtbl < > { unsafe extern "system" fn Initialize < Impl : IInitializeCommandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszcommandname : super::super::Foundation:: PWSTR , ppb : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInitializeCommand < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IInitializeNetworkFolderImpl < > : Sized where { fn Initialize ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IInitializeNetworkFolderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInitializeNetworkFolderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInitializeNetworkFolderVtbl < > { unsafe extern "system" fn Initialize < Impl : IInitializeNetworkFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , pidltarget : * const Common:: ITEMIDLIST , udisplaytype : u32 , pszresname : super::super::Foundation:: PWSTR , pszprovider : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInitializeNetworkFolder < > as :: windows :: core :: Interface > :: IID } } pub trait IInitializeObjectImpl < > : Sized where { fn Initialize ( ) ; } impl < > IInitializeObjectVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInitializeObjectImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInitializeObjectVtbl < > { unsafe extern "system" fn Initialize < Impl : IInitializeObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInitializeObject < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait IInitializeWithBindCtxImpl < > : Sized where { fn Initialize ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > IInitializeWithBindCtxVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInitializeWithBindCtxImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInitializeWithBindCtxVtbl < > { unsafe extern "system" fn Initialize < Impl : IInitializeWithBindCtxImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbc : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInitializeWithBindCtx < > as :: windows :: core :: Interface > :: IID } } pub trait IInitializeWithItemImpl < > : Sized where { fn Initialize ( ) ; } impl < > IInitializeWithItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInitializeWithItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInitializeWithItemVtbl < > { unsafe extern "system" fn Initialize < Impl : IInitializeWithItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , grfmode : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInitializeWithItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_PropertiesSystem" ) ] pub trait IInitializeWithPropertyStoreImpl < > : Sized where { fn Initialize ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_PropertiesSystem" ) ] impl < > IInitializeWithPropertyStoreVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInitializeWithPropertyStoreImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInitializeWithPropertyStoreVtbl < > { unsafe extern "system" fn Initialize < Impl : IInitializeWithPropertyStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pps : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInitializeWithPropertyStore < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IInitializeWithWindowImpl < > : Sized where { fn Initialize ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IInitializeWithWindowVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInitializeWithWindowImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInitializeWithWindowVtbl < > { unsafe extern "system" fn Initialize < Impl : IInitializeWithWindowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInitializeWithWindow < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IInputObjectImpl < > : Sized where { fn UIActivateIO ( ) ; fn HasFocusIO ( ) ; fn TranslateAcceleratorIO ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IInputObjectVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInputObjectImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInputObjectVtbl < > { unsafe extern "system" fn UIActivateIO < Impl : IInputObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , factivate : super::super::Foundation:: BOOL , pmsg : * const super::WindowsAndMessaging:: MSG , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HasFocusIO < Impl : IInputObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TranslateAcceleratorIO < Impl : IInputObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmsg : * const super::WindowsAndMessaging:: MSG , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , UIActivateIO : UIActivateIO :: < Impl , IMPL_OFFSET > , HasFocusIO : HasFocusIO :: < Impl , IMPL_OFFSET > , TranslateAcceleratorIO : TranslateAcceleratorIO :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInputObject < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IInputObject2Impl < > : Sized + IInputObjectImpl where { fn TranslateAcceleratorGlobal ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IInputObject2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInputObject2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInputObject2Vtbl < > { unsafe extern "system" fn TranslateAcceleratorGlobal < Impl : IInputObject2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmsg : * const super::WindowsAndMessaging:: MSG , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , TranslateAcceleratorGlobal : TranslateAcceleratorGlobal :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInputObject2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IInputObjectSiteImpl < > : Sized where { fn OnFocusChangeIS ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IInputObjectSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInputObjectSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInputObjectSiteVtbl < > { unsafe extern "system" fn OnFocusChangeIS < Impl : IInputObjectSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkobj : * mut :: core :: ffi :: c_void , fsetfocus : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnFocusChangeIS : OnFocusChangeIS :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInputObjectSite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Graphics_DirectComposition" ) ] pub trait IInputPaneAnimationCoordinatorImpl < > : Sized where { fn AddAnimation ( ) ; } # [ cfg ( feature ="Win32_Graphics_DirectComposition" ) ] impl < > IInputPaneAnimationCoordinatorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInputPaneAnimationCoordinatorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInputPaneAnimationCoordinatorVtbl < > { unsafe extern "system" fn AddAnimation < Impl : IInputPaneAnimationCoordinatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , device : * mut :: core :: ffi :: c_void , animation : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddAnimation : AddAnimation :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInputPaneAnimationCoordinator < > as :: windows :: core :: Interface > :: IID } } pub trait IInputPanelConfigurationImpl < > : Sized where { fn EnableFocusTracking ( ) ; } impl < > IInputPanelConfigurationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInputPanelConfigurationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInputPanelConfigurationVtbl < > { unsafe extern "system" fn EnableFocusTracking < Impl : IInputPanelConfigurationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , EnableFocusTracking : EnableFocusTracking :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInputPanelConfiguration < > as :: windows :: core :: Interface > :: IID } } pub trait IInputPanelInvocationConfigurationImpl < > : Sized where { fn RequireTouchInEditControl ( ) ; } impl < > IInputPanelInvocationConfigurationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInputPanelInvocationConfigurationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInputPanelInvocationConfigurationVtbl < > { unsafe extern "system" fn RequireTouchInEditControl < Impl : IInputPanelInvocationConfigurationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , RequireTouchInEditControl : RequireTouchInEditControl :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInputPanelInvocationConfiguration < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IInsertItemImpl < > : Sized where { fn InsertItem ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IInsertItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInsertItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInsertItemVtbl < > { unsafe extern "system" fn InsertItem < Impl : IInsertItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , InsertItem : InsertItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInsertItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IItemNameLimitsImpl < > : Sized where { fn GetValidCharacters ( ) ; fn GetMaxLength ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IItemNameLimitsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IItemNameLimitsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IItemNameLimitsVtbl < > { unsafe extern "system" fn GetValidCharacters < Impl : IItemNameLimitsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppwszvalidchars : * mut super::super::Foundation:: PWSTR , ppwszinvalidchars : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMaxLength < Impl : IItemNameLimitsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszname : super::super::Foundation:: PWSTR , pimaxnamelen : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetValidCharacters : GetValidCharacters :: < Impl , IMPL_OFFSET > , GetMaxLength : GetMaxLength :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IItemNameLimits < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IKnownFolderImpl < > : Sized where { fn GetId ( ) ; fn GetCategory ( ) ; fn GetShellItem ( ) ; fn GetPath ( ) ; fn SetPath ( ) ; fn GetIDList ( ) ; fn GetFolderType ( ) ; fn GetRedirectionCapabilities ( ) ; fn GetFolderDefinition ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IKnownFolderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IKnownFolderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IKnownFolderVtbl < > { unsafe extern "system" fn GetId < Impl : IKnownFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pkfid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCategory < Impl : IKnownFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcategory : * mut KF_CATEGORY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetShellItem < Impl : IKnownFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPath < Impl : IKnownFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , ppszpath : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPath < Impl : IKnownFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , pszpath : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIDList < Impl : IKnownFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , ppidl : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolderType < Impl : IKnownFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pftid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetRedirectionCapabilities < Impl : IKnownFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcapabilities : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolderDefinition < Impl : IKnownFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pkfd : * mut KNOWNFOLDER_DEFINITION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetId : GetId :: < Impl , IMPL_OFFSET > , GetCategory : GetCategory :: < Impl , IMPL_OFFSET > , GetShellItem : GetShellItem :: < Impl , IMPL_OFFSET > , GetPath : GetPath :: < Impl , IMPL_OFFSET > , SetPath : SetPath :: < Impl , IMPL_OFFSET > , GetIDList : GetIDList :: < Impl , IMPL_OFFSET > , GetFolderType : GetFolderType :: < Impl , IMPL_OFFSET > , GetRedirectionCapabilities : GetRedirectionCapabilities :: < Impl , IMPL_OFFSET > , GetFolderDefinition : GetFolderDefinition :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IKnownFolder < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IKnownFolderManagerImpl < > : Sized where { fn FolderIdFromCsidl ( ) ; fn FolderIdToCsidl ( ) ; fn GetFolderIds ( ) ; fn GetFolder ( ) ; fn GetFolderByName ( ) ; fn RegisterFolder ( ) ; fn UnregisterFolder ( ) ; fn FindFolderFromPath ( ) ; fn FindFolderFromIDList ( ) ; fn Redirect ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IKnownFolderManagerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IKnownFolderManagerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IKnownFolderManagerVtbl < > { unsafe extern "system" fn FolderIdFromCsidl < Impl : IKnownFolderManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ncsidl : i32 , pfid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FolderIdToCsidl < Impl : IKnownFolderManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rfid : * const :: windows :: core :: GUID , pncsidl : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolderIds < Impl : IKnownFolderManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppkfid : * mut * mut :: windows :: core :: GUID , pcount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolder < Impl : IKnownFolderManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rfid : * const :: windows :: core :: GUID , ppkf : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolderByName < Impl : IKnownFolderManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszcanonicalname : super::super::Foundation:: PWSTR , ppkf : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterFolder < Impl : IKnownFolderManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rfid : * const :: windows :: core :: GUID , pkfd : * const KNOWNFOLDER_DEFINITION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnregisterFolder < Impl : IKnownFolderManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rfid : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindFolderFromPath < Impl : IKnownFolderManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszpath : super::super::Foundation:: PWSTR , mode : FFFP_MODE , ppkf : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindFolderFromIDList < Impl : IKnownFolderManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , ppkf : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Redirect < Impl : IKnownFolderManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rfid : * const :: windows :: core :: GUID , hwnd : super::super::Foundation:: HWND , flags : u32 , psztargetpath : super::super::Foundation:: PWSTR , cfolders : u32 , pexclusion : * const :: windows :: core :: GUID , ppszerror : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , FolderIdFromCsidl : FolderIdFromCsidl :: < Impl , IMPL_OFFSET > , FolderIdToCsidl : FolderIdToCsidl :: < Impl , IMPL_OFFSET > , GetFolderIds : GetFolderIds :: < Impl , IMPL_OFFSET > , GetFolder : GetFolder :: < Impl , IMPL_OFFSET > , GetFolderByName : GetFolderByName :: < Impl , IMPL_OFFSET > , RegisterFolder : RegisterFolder :: < Impl , IMPL_OFFSET > , UnregisterFolder : UnregisterFolder :: < Impl , IMPL_OFFSET > , FindFolderFromPath : FindFolderFromPath :: < Impl , IMPL_OFFSET > , FindFolderFromIDList : FindFolderFromIDList :: < Impl , IMPL_OFFSET > , Redirect : Redirect :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IKnownFolderManager < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ILaunchSourceAppUserModelIdImpl < > : Sized where { fn GetAppUserModelId ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ILaunchSourceAppUserModelIdVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ILaunchSourceAppUserModelIdImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ILaunchSourceAppUserModelIdVtbl < > { unsafe extern "system" fn GetAppUserModelId < Impl : ILaunchSourceAppUserModelIdImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , launchingapp : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetAppUserModelId : GetAppUserModelId :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ILaunchSourceAppUserModelId < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ILaunchSourceViewSizePreferenceImpl < > : Sized where { fn GetSourceViewToPosition ( ) ; fn GetSourceViewSizePreference ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ILaunchSourceViewSizePreferenceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ILaunchSourceViewSizePreferenceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ILaunchSourceViewSizePreferenceVtbl < > { unsafe extern "system" fn GetSourceViewToPosition < Impl : ILaunchSourceViewSizePreferenceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : * mut super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSourceViewSizePreference < Impl : ILaunchSourceViewSizePreferenceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , sourcesizeafterlaunch : * mut APPLICATION_VIEW_SIZE_PREFERENCE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetSourceViewToPosition : GetSourceViewToPosition :: < Impl , IMPL_OFFSET > , GetSourceViewSizePreference : GetSourceViewSizePreference :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ILaunchSourceViewSizePreference < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Graphics_Gdi" ) ] pub trait ILaunchTargetMonitorImpl < > : Sized where { fn GetMonitor ( ) ; } # [ cfg ( feature ="Win32_Graphics_Gdi" ) ] impl < > ILaunchTargetMonitorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ILaunchTargetMonitorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ILaunchTargetMonitorVtbl < > { unsafe extern "system" fn GetMonitor < Impl : ILaunchTargetMonitorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , monitor : * mut super::super::Graphics::Gdi:: HMONITOR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetMonitor : GetMonitor :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ILaunchTargetMonitor < > as :: windows :: core :: Interface > :: IID } } pub trait ILaunchTargetViewSizePreferenceImpl < > : Sized where { fn GetTargetViewSizePreference ( ) ; } impl < > ILaunchTargetViewSizePreferenceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ILaunchTargetViewSizePreferenceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ILaunchTargetViewSizePreferenceVtbl < > { unsafe extern "system" fn GetTargetViewSizePreference < Impl : ILaunchTargetViewSizePreferenceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , targetsizeonlaunch : * mut APPLICATION_VIEW_SIZE_PREFERENCE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetTargetViewSizePreference : GetTargetViewSizePreference :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ILaunchTargetViewSizePreference < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ILaunchUIContextImpl < > : Sized where { fn SetAssociatedWindow ( ) ; fn SetTabGroupingPreference ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ILaunchUIContextVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ILaunchUIContextImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ILaunchUIContextVtbl < > { unsafe extern "system" fn SetAssociatedWindow < Impl : ILaunchUIContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTabGroupingPreference < Impl : ILaunchUIContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetAssociatedWindow : SetAssociatedWindow :: < Impl , IMPL_OFFSET > , SetTabGroupingPreference : SetTabGroupingPreference :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ILaunchUIContext < > as :: windows :: core :: Interface > :: IID } } pub trait ILaunchUIContextProviderImpl < > : Sized where { fn UpdateContext ( ) ; } impl < > ILaunchUIContextProviderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ILaunchUIContextProviderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ILaunchUIContextProviderVtbl < > { unsafe extern "system" fn UpdateContext < Impl : ILaunchUIContextProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , context : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , UpdateContext : UpdateContext :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ILaunchUIContextProvider < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IMenuBandImpl < > : Sized where { fn IsMenuMessage ( ) ; fn TranslateMenuMessage ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IMenuBandVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMenuBandImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMenuBandVtbl < > { unsafe extern "system" fn IsMenuMessage < Impl : IMenuBandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmsg : * const super::WindowsAndMessaging:: MSG , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TranslateMenuMessage < Impl : IMenuBandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmsg : * mut super::WindowsAndMessaging:: MSG , plret : * mut super::super::Foundation:: LRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , IsMenuMessage : IsMenuMessage :: < Impl , IMPL_OFFSET > , TranslateMenuMessage : TranslateMenuMessage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMenuBand < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] pub trait IMenuPopupImpl < > : Sized + IDeskBarImpl + IOleWindowImpl where { fn Popup ( ) ; fn OnSelect ( ) ; fn SetSubMenu ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] impl < > IMenuPopupVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMenuPopupImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMenuPopupVtbl < > { unsafe extern "system" fn Popup < Impl : IMenuPopupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppt : * const super::super::Foundation:: POINTL , prcexclude : * const super::super::Foundation:: RECTL , dwflags : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnSelect < Impl : IMenuPopupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwselecttype : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSubMenu < Impl : IMenuPopupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmp : :: windows :: core :: RawPtr , fset : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Popup : Popup :: < Impl , IMPL_OFFSET > , OnSelect : OnSelect :: < Impl , IMPL_OFFSET > , SetSubMenu : SetSubMenu :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMenuPopup < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IModalWindowImpl < > : Sized where { fn Show ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IModalWindowVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IModalWindowImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IModalWindowVtbl < > { unsafe extern "system" fn Show < Impl : IModalWindowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndowner : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Show : Show :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IModalWindow < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait INameSpaceTreeAccessibleImpl < > : Sized where { fn OnGetDefaultAccessibilityAction ( ) ; fn OnDoDefaultAccessibilityAction ( ) ; fn OnGetAccessibilityRole ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > INameSpaceTreeAccessibleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INameSpaceTreeAccessibleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INameSpaceTreeAccessibleVtbl < > { unsafe extern "system" fn OnGetDefaultAccessibilityAction < Impl : INameSpaceTreeAccessibleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , pbstrdefaultaction : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnDoDefaultAccessibilityAction < Impl : INameSpaceTreeAccessibleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnGetAccessibilityRole < Impl : INameSpaceTreeAccessibleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , pvarrole : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnGetDefaultAccessibilityAction : OnGetDefaultAccessibilityAction :: < Impl , IMPL_OFFSET > , OnDoDefaultAccessibilityAction : OnDoDefaultAccessibilityAction :: < Impl , IMPL_OFFSET > , OnGetAccessibilityRole : OnGetAccessibilityRole :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INameSpaceTreeAccessible < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait INameSpaceTreeControlImpl < > : Sized where { fn Initialize ( ) ; fn TreeAdvise ( ) ; fn TreeUnadvise ( ) ; fn AppendRoot ( ) ; fn InsertRoot ( ) ; fn RemoveRoot ( ) ; fn RemoveAllRoots ( ) ; fn GetRootItems ( ) ; fn SetItemState ( ) ; fn GetItemState ( ) ; fn GetSelectedItems ( ) ; fn GetItemCustomState ( ) ; fn SetItemCustomState ( ) ; fn EnsureItemVisible ( ) ; fn SetTheme ( ) ; fn GetNextItem ( ) ; fn HitTest ( ) ; fn GetItemRect ( ) ; fn CollapseAll ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > INameSpaceTreeControlVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INameSpaceTreeControlImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INameSpaceTreeControlVtbl < > { unsafe extern "system" fn Initialize < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndparent : super::super::Foundation:: HWND , prc : * const super::super::Foundation:: RECT , nsctsflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TreeAdvise < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , pdwcookie : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TreeUnadvise < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcookie : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AppendRoot < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiroot : :: windows :: core :: RawPtr , grfenumflags : u32 , grfrootstyle : u32 , pif : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InsertRoot < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , iindex : i32 , psiroot : :: windows :: core :: RawPtr , grfenumflags : u32 , grfrootstyle : u32 , pif : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveRoot < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiroot : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveAllRoots < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetRootItems < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsiarootitems : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetItemState < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , nstcismask : u32 , nstcisflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItemState < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , nstcismask : u32 , pnstcisflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSelectedItems < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiaitems : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItemCustomState < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , pistatenumber : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetItemCustomState < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , istatenumber : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnsureItemVisible < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTheme < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psztheme : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetNextItem < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , nstcgi : NSTCGNI , ppsinext : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HitTest < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppt : * const super::super::Foundation:: POINT , ppsiout : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItemRect < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , prect : * mut super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CollapseAll < Impl : INameSpaceTreeControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , TreeAdvise : TreeAdvise :: < Impl , IMPL_OFFSET > , TreeUnadvise : TreeUnadvise :: < Impl , IMPL_OFFSET > , AppendRoot : AppendRoot :: < Impl , IMPL_OFFSET > , InsertRoot : InsertRoot :: < Impl , IMPL_OFFSET > , RemoveRoot : RemoveRoot :: < Impl , IMPL_OFFSET > , RemoveAllRoots : RemoveAllRoots :: < Impl , IMPL_OFFSET > , GetRootItems : GetRootItems :: < Impl , IMPL_OFFSET > , SetItemState : SetItemState :: < Impl , IMPL_OFFSET > , GetItemState : GetItemState :: < Impl , IMPL_OFFSET > , GetSelectedItems : GetSelectedItems :: < Impl , IMPL_OFFSET > , GetItemCustomState : GetItemCustomState :: < Impl , IMPL_OFFSET > , SetItemCustomState : SetItemCustomState :: < Impl , IMPL_OFFSET > , EnsureItemVisible : EnsureItemVisible :: < Impl , IMPL_OFFSET > , SetTheme : SetTheme :: < Impl , IMPL_OFFSET > , GetNextItem : GetNextItem :: < Impl , IMPL_OFFSET > , HitTest : HitTest :: < Impl , IMPL_OFFSET > , GetItemRect : GetItemRect :: < Impl , IMPL_OFFSET > , CollapseAll : CollapseAll :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INameSpaceTreeControl < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait INameSpaceTreeControl2Impl < > : Sized + INameSpaceTreeControlImpl where { fn SetControlStyle ( ) ; fn GetControlStyle ( ) ; fn SetControlStyle2 ( ) ; fn GetControlStyle2 ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > INameSpaceTreeControl2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INameSpaceTreeControl2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INameSpaceTreeControl2Vtbl < > { unsafe extern "system" fn SetControlStyle < Impl : INameSpaceTreeControl2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , nstcsmask : u32 , nstcsstyle : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetControlStyle < Impl : INameSpaceTreeControl2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , nstcsmask : u32 , pnstcsstyle : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetControlStyle2 < Impl : INameSpaceTreeControl2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , nstcsmask : NSTCSTYLE2 , nstcsstyle : NSTCSTYLE2 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetControlStyle2 < Impl : INameSpaceTreeControl2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , nstcsmask : NSTCSTYLE2 , pnstcsstyle : * mut NSTCSTYLE2 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetControlStyle : SetControlStyle :: < Impl , IMPL_OFFSET > , GetControlStyle : GetControlStyle :: < Impl , IMPL_OFFSET > , SetControlStyle2 : SetControlStyle2 :: < Impl , IMPL_OFFSET > , GetControlStyle2 : GetControlStyle2 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INameSpaceTreeControl2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_UI_Controls" ) ) ] pub trait INameSpaceTreeControlCustomDrawImpl < > : Sized where { fn PrePaint ( ) ; fn PostPaint ( ) ; fn ItemPrePaint ( ) ; fn ItemPostPaint ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_UI_Controls" ) ) ] impl < > INameSpaceTreeControlCustomDrawVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INameSpaceTreeControlCustomDrawImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INameSpaceTreeControlCustomDrawVtbl < > { unsafe extern "system" fn PrePaint < Impl : INameSpaceTreeControlCustomDrawImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hdc : super::super::Graphics::Gdi:: HDC , prc : * const super::super::Foundation:: RECT , plres : * mut super::super::Foundation:: LRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PostPaint < Impl : INameSpaceTreeControlCustomDrawImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hdc : super::super::Graphics::Gdi:: HDC , prc : * const super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ItemPrePaint < Impl : INameSpaceTreeControlCustomDrawImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hdc : super::super::Graphics::Gdi:: HDC , prc : * const super::super::Foundation:: RECT , pnstccditem : * const NSTCCUSTOMDRAW , pclrtext : * mut u32 , pclrtextbk : * mut u32 , plres : * mut super::super::Foundation:: LRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ItemPostPaint < Impl : INameSpaceTreeControlCustomDrawImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hdc : super::super::Graphics::Gdi:: HDC , prc : * const super::super::Foundation:: RECT , pnstccditem : * const NSTCCUSTOMDRAW , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , PrePaint : PrePaint :: < Impl , IMPL_OFFSET > , PostPaint : PostPaint :: < Impl , IMPL_OFFSET > , ItemPrePaint : ItemPrePaint :: < Impl , IMPL_OFFSET > , ItemPostPaint : ItemPostPaint :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INameSpaceTreeControlCustomDraw < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait INameSpaceTreeControlDropHandlerImpl < > : Sized where { fn OnDragEnter ( ) ; fn OnDragOver ( ) ; fn OnDragPosition ( ) ; fn OnDrop ( ) ; fn OnDropPosition ( ) ; fn OnDragLeave ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > INameSpaceTreeControlDropHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INameSpaceTreeControlDropHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INameSpaceTreeControlDropHandlerVtbl < > { unsafe extern "system" fn OnDragEnter < Impl : INameSpaceTreeControlDropHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiover : :: windows :: core :: RawPtr , psiadata : :: windows :: core :: RawPtr , foutsidesource : super::super::Foundation:: BOOL , grfkeystate : u32 , pdweffect : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnDragOver < Impl : INameSpaceTreeControlDropHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiover : :: windows :: core :: RawPtr , psiadata : :: windows :: core :: RawPtr , grfkeystate : u32 , pdweffect : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnDragPosition < Impl : INameSpaceTreeControlDropHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiover : :: windows :: core :: RawPtr , psiadata : :: windows :: core :: RawPtr , inewposition : i32 , ioldposition : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnDrop < Impl : INameSpaceTreeControlDropHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiover : :: windows :: core :: RawPtr , psiadata : :: windows :: core :: RawPtr , iposition : i32 , grfkeystate : u32 , pdweffect : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnDropPosition < Impl : INameSpaceTreeControlDropHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiover : :: windows :: core :: RawPtr , psiadata : :: windows :: core :: RawPtr , inewposition : i32 , ioldposition : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnDragLeave < Impl : INameSpaceTreeControlDropHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiover : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnDragEnter : OnDragEnter :: < Impl , IMPL_OFFSET > , OnDragOver : OnDragOver :: < Impl , IMPL_OFFSET > , OnDragPosition : OnDragPosition :: < Impl , IMPL_OFFSET > , OnDrop : OnDrop :: < Impl , IMPL_OFFSET > , OnDropPosition : OnDropPosition :: < Impl , IMPL_OFFSET > , OnDragLeave : OnDragLeave :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INameSpaceTreeControlDropHandler < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait INameSpaceTreeControlEventsImpl < > : Sized where { fn OnItemClick ( ) ; fn OnPropertyItemCommit ( ) ; fn OnItemStateChanging ( ) ; fn OnItemStateChanged ( ) ; fn OnSelectionChanged ( ) ; fn OnKeyboardInput ( ) ; fn OnBeforeExpand ( ) ; fn OnAfterExpand ( ) ; fn OnBeginLabelEdit ( ) ; fn OnEndLabelEdit ( ) ; fn OnGetToolTip ( ) ; fn OnBeforeItemDelete ( ) ; fn OnItemAdded ( ) ; fn OnItemDeleted ( ) ; fn OnBeforeContextMenu ( ) ; fn OnAfterContextMenu ( ) ; fn OnBeforeStateImageChange ( ) ; fn OnGetDefaultIconIndex ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > INameSpaceTreeControlEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INameSpaceTreeControlEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INameSpaceTreeControlEventsVtbl < > { unsafe extern "system" fn OnItemClick < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , nstcehittest : u32 , nstceclicktype : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnPropertyItemCommit < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnItemStateChanging < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , nstcismask : u32 , nstcisstate : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnItemStateChanged < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , nstcismask : u32 , nstcisstate : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnSelectionChanged < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiaselection : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnKeyboardInput < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , umsg : u32 , wparam : super::super::Foundation:: WPARAM , lparam : super::super::Foundation:: LPARAM , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnBeforeExpand < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnAfterExpand < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnBeginLabelEdit < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnEndLabelEdit < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnGetToolTip < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , psztip : super::super::Foundation:: PWSTR , cchtip : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnBeforeItemDelete < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnItemAdded < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , fisroot : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnItemDeleted < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , fisroot : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnBeforeContextMenu < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnAfterContextMenu < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , pcmin : :: windows :: core :: RawPtr , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnBeforeStateImageChange < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnGetDefaultIconIndex < Impl : INameSpaceTreeControlEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , pidefaulticon : * mut i32 , piopenicon : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnItemClick : OnItemClick :: < Impl , IMPL_OFFSET > , OnPropertyItemCommit : OnPropertyItemCommit :: < Impl , IMPL_OFFSET > , OnItemStateChanging : OnItemStateChanging :: < Impl , IMPL_OFFSET > , OnItemStateChanged : OnItemStateChanged :: < Impl , IMPL_OFFSET > , OnSelectionChanged : OnSelectionChanged :: < Impl , IMPL_OFFSET > , OnKeyboardInput : OnKeyboardInput :: < Impl , IMPL_OFFSET > , OnBeforeExpand : OnBeforeExpand :: < Impl , IMPL_OFFSET > , OnAfterExpand : OnAfterExpand :: < Impl , IMPL_OFFSET > , OnBeginLabelEdit : OnBeginLabelEdit :: < Impl , IMPL_OFFSET > , OnEndLabelEdit : OnEndLabelEdit :: < Impl , IMPL_OFFSET > , OnGetToolTip : OnGetToolTip :: < Impl , IMPL_OFFSET > , OnBeforeItemDelete : OnBeforeItemDelete :: < Impl , IMPL_OFFSET > , OnItemAdded : OnItemAdded :: < Impl , IMPL_OFFSET > , OnItemDeleted : OnItemDeleted :: < Impl , IMPL_OFFSET > , OnBeforeContextMenu : OnBeforeContextMenu :: < Impl , IMPL_OFFSET > , OnAfterContextMenu : OnAfterContextMenu :: < Impl , IMPL_OFFSET > , OnBeforeStateImageChange : OnBeforeStateImageChange :: < Impl , IMPL_OFFSET > , OnGetDefaultIconIndex : OnGetDefaultIconIndex :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INameSpaceTreeControlEvents < > as :: windows :: core :: Interface > :: IID } } pub trait INameSpaceTreeControlFolderCapabilitiesImpl < > : Sized where { fn GetFolderCapabilities ( ) ; } impl < > INameSpaceTreeControlFolderCapabilitiesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INameSpaceTreeControlFolderCapabilitiesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INameSpaceTreeControlFolderCapabilitiesVtbl < > { unsafe extern "system" fn GetFolderCapabilities < Impl : INameSpaceTreeControlFolderCapabilitiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , nfcmask : NSTCFOLDERCAPABILITIES , pnfcvalue : * mut NSTCFOLDERCAPABILITIES , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetFolderCapabilities : GetFolderCapabilities :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INameSpaceTreeControlFolderCapabilities < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" ) ) ] pub trait INamedPropertyBagImpl < > : Sized where { fn ReadPropertyNPB ( ) ; fn WritePropertyNPB ( ) ; fn RemovePropertyNPB ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" ) ) ] impl < > INamedPropertyBagVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INamedPropertyBagImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INamedPropertyBagVtbl < > { unsafe extern "system" fn ReadPropertyNPB < Impl : INamedPropertyBagImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszbagname : super::super::Foundation:: PWSTR , pszpropname : super::super::Foundation:: PWSTR , pvar : * mut super::super::System::Com::StructuredStorage:: PROPVARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn WritePropertyNPB < Impl : INamedPropertyBagImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszbagname : super::super::Foundation:: PWSTR , pszpropname : super::super::Foundation:: PWSTR , pvar : * const super::super::System::Com::StructuredStorage:: PROPVARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemovePropertyNPB < Impl : INamedPropertyBagImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszbagname : super::super::Foundation:: PWSTR , pszpropname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ReadPropertyNPB : ReadPropertyNPB :: < Impl , IMPL_OFFSET > , WritePropertyNPB : WritePropertyNPB :: < Impl , IMPL_OFFSET > , RemovePropertyNPB : RemovePropertyNPB :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INamedPropertyBag < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait INamespaceWalkImpl < > : Sized where { fn Walk ( ) ; fn GetIDArrayResult ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > INamespaceWalkVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INamespaceWalkImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INamespaceWalkVtbl < > { unsafe extern "system" fn Walk < Impl : INamespaceWalkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punktowalk : * mut :: core :: ffi :: c_void , dwflags : u32 , cdepth : i32 , pnswcb : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIDArrayResult < Impl : INamespaceWalkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcitems : * mut u32 , prgpidl : * mut * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Walk : Walk :: < Impl , IMPL_OFFSET > , GetIDArrayResult : GetIDArrayResult :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INamespaceWalk < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait INamespaceWalkCBImpl < > : Sized where { fn FoundItem ( ) ; fn EnterFolder ( ) ; fn LeaveFolder ( ) ; fn InitializeProgressDialog ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > INamespaceWalkCBVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INamespaceWalkCBImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INamespaceWalkCBVtbl < > { unsafe extern "system" fn FoundItem < Impl : INamespaceWalkCBImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psf : :: windows :: core :: RawPtr , pidl : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnterFolder < Impl : INamespaceWalkCBImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psf : :: windows :: core :: RawPtr , pidl : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LeaveFolder < Impl : INamespaceWalkCBImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psf : :: windows :: core :: RawPtr , pidl : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InitializeProgressDialog < Impl : INamespaceWalkCBImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsztitle : * mut super::super::Foundation:: PWSTR , ppszcancel : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , FoundItem : FoundItem :: < Impl , IMPL_OFFSET > , EnterFolder : EnterFolder :: < Impl , IMPL_OFFSET > , LeaveFolder : LeaveFolder :: < Impl , IMPL_OFFSET > , InitializeProgressDialog : InitializeProgressDialog :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INamespaceWalkCB < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait INamespaceWalkCB2Impl < > : Sized + INamespaceWalkCBImpl where { fn WalkComplete ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > INamespaceWalkCB2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INamespaceWalkCB2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INamespaceWalkCB2Vtbl < > { unsafe extern "system" fn WalkComplete < Impl : INamespaceWalkCB2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hr : :: windows :: core :: HRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , WalkComplete : WalkComplete :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INamespaceWalkCB2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait INetworkFolderInternalImpl < > : Sized where { fn GetResourceDisplayType ( ) ; fn GetIDList ( ) ; fn GetProvider ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > INetworkFolderInternalVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INetworkFolderInternalImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INetworkFolderInternalVtbl < > { unsafe extern "system" fn GetResourceDisplayType < Impl : INetworkFolderInternalImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , displaytype : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIDList < Impl : INetworkFolderInternalImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , idlist : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProvider < Impl : INetworkFolderInternalImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , itemidcount : u32 , itemids : * const * const Common:: ITEMIDLIST , providermaxlength : u32 , provider : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetResourceDisplayType : GetResourceDisplayType :: < Impl , IMPL_OFFSET > , GetIDList : GetIDList :: < Impl , IMPL_OFFSET > , GetProvider : GetProvider :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INetworkFolderInternal < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait INewMenuClientImpl < > : Sized where { fn IncludeItems ( ) ; fn SelectAndEditItem ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > INewMenuClientVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INewMenuClientImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INewMenuClientVtbl < > { unsafe extern "system" fn IncludeItems < Impl : INewMenuClientImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pflags : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SelectAndEditItem < Impl : INewMenuClientImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidlitem : * const Common:: ITEMIDLIST , flags : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , IncludeItems : IncludeItems :: < Impl , IMPL_OFFSET > , SelectAndEditItem : SelectAndEditItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INewMenuClient < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait INewShortcutHookAImpl < > : Sized where { fn SetReferent ( ) ; fn GetReferent ( ) ; fn SetFolder ( ) ; fn GetFolder ( ) ; fn GetName ( ) ; fn GetExtension ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > INewShortcutHookAVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INewShortcutHookAImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INewShortcutHookAVtbl < > { unsafe extern "system" fn SetReferent < Impl : INewShortcutHookAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcszreferent : super::super::Foundation:: PSTR , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetReferent < Impl : INewShortcutHookAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszreferent : super::super::Foundation:: PSTR , cchreferent : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFolder < Impl : INewShortcutHookAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcszfolder : super::super::Foundation:: PSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolder < Impl : INewShortcutHookAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszfolder : super::super::Foundation:: PSTR , cchfolder : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetName < Impl : INewShortcutHookAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszname : super::super::Foundation:: PSTR , cchname : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetExtension < Impl : INewShortcutHookAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszextension : super::super::Foundation:: PSTR , cchextension : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetReferent : SetReferent :: < Impl , IMPL_OFFSET > , GetReferent : GetReferent :: < Impl , IMPL_OFFSET > , SetFolder : SetFolder :: < Impl , IMPL_OFFSET > , GetFolder : GetFolder :: < Impl , IMPL_OFFSET > , GetName : GetName :: < Impl , IMPL_OFFSET > , GetExtension : GetExtension :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INewShortcutHookA < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait INewShortcutHookWImpl < > : Sized where { fn SetReferent ( ) ; fn GetReferent ( ) ; fn SetFolder ( ) ; fn GetFolder ( ) ; fn GetName ( ) ; fn GetExtension ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > INewShortcutHookWVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INewShortcutHookWImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INewShortcutHookWVtbl < > { unsafe extern "system" fn SetReferent < Impl : INewShortcutHookWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcszreferent : super::super::Foundation:: PWSTR , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetReferent < Impl : INewShortcutHookWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszreferent : super::super::Foundation:: PWSTR , cchreferent : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFolder < Impl : INewShortcutHookWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcszfolder : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolder < Impl : INewShortcutHookWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszfolder : super::super::Foundation:: PWSTR , cchfolder : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetName < Impl : INewShortcutHookWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszname : super::super::Foundation:: PWSTR , cchname : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetExtension < Impl : INewShortcutHookWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszextension : super::super::Foundation:: PWSTR , cchextension : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetReferent : SetReferent :: < Impl , IMPL_OFFSET > , GetReferent : GetReferent :: < Impl , IMPL_OFFSET > , SetFolder : SetFolder :: < Impl , IMPL_OFFSET > , GetFolder : GetFolder :: < Impl , IMPL_OFFSET > , GetName : GetName :: < Impl , IMPL_OFFSET > , GetExtension : GetExtension :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INewShortcutHookW < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait INewWDEventsImpl < > : Sized + IWebWizardHostImpl + IDispatchImpl where { fn PassportAuthenticate ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > INewWDEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INewWDEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INewWDEventsVtbl < > { unsafe extern "system" fn PassportAuthenticate < Impl : INewWDEventsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrsigninurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvfauthenitcated : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , PassportAuthenticate : PassportAuthenticate :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INewWDEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait INewWindowManagerImpl < > : Sized where { fn EvaluateNewWindow ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > INewWindowManagerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INewWindowManagerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INewWindowManagerVtbl < > { unsafe extern "system" fn EvaluateNewWindow < Impl : INewWindowManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszurl : super::super::Foundation:: PWSTR , pszname : super::super::Foundation:: PWSTR , pszurlcontext : super::super::Foundation:: PWSTR , pszfeatures : super::super::Foundation:: PWSTR , freplace : super::super::Foundation:: BOOL , dwflags : u32 , dwuseractiontime : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , EvaluateNewWindow : EvaluateNewWindow :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INewWindowManager < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait INotifyReplicaImpl < > : Sized where { fn YouAreAReplica ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > INotifyReplicaVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INotifyReplicaImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INotifyReplicaVtbl < > { unsafe extern "system" fn YouAreAReplica < Impl : INotifyReplicaImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulcotherreplicas : u32 , rgpmkotherreplicas : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , YouAreAReplica : YouAreAReplica :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INotifyReplica < > as :: windows :: core :: Interface > :: IID } } pub trait IObjMgrImpl < > : Sized where { fn Append ( ) ; fn Remove ( ) ; } impl < > IObjMgrVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IObjMgrImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IObjMgrVtbl < > { unsafe extern "system" fn Append < Impl : IObjMgrImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Remove < Impl : IObjMgrImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Append : Append :: < Impl , IMPL_OFFSET > , Remove : Remove :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IObjMgr < > as :: windows :: core :: Interface > :: IID } } pub trait IObjectProviderImpl < > : Sized where { fn QueryObject ( ) ; } impl < > IObjectProviderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IObjectProviderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IObjectProviderVtbl < > { unsafe extern "system" fn QueryObject < Impl : IObjectProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , guidobject : * const :: windows :: core :: GUID , riid : * const :: windows :: core :: GUID , ppvout : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , QueryObject : QueryObject :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IObjectProvider < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IObjectWithAppUserModelIDImpl < > : Sized where { fn SetAppID ( ) ; fn GetAppID ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IObjectWithAppUserModelIDVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IObjectWithAppUserModelIDImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IObjectWithAppUserModelIDVtbl < > { unsafe extern "system" fn SetAppID < Impl : IObjectWithAppUserModelIDImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszappid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAppID < Impl : IObjectWithAppUserModelIDImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszappid : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetAppID : SetAppID :: < Impl , IMPL_OFFSET > , GetAppID : GetAppID :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IObjectWithAppUserModelID < > as :: windows :: core :: Interface > :: IID } } pub trait IObjectWithBackReferencesImpl < > : Sized where { fn RemoveBackReferences ( ) ; } impl < > IObjectWithBackReferencesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IObjectWithBackReferencesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IObjectWithBackReferencesVtbl < > { unsafe extern "system" fn RemoveBackReferences < Impl : IObjectWithBackReferencesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , RemoveBackReferences : RemoveBackReferences :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IObjectWithBackReferences < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IObjectWithCancelEventImpl < > : Sized where { fn GetCancelEvent ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IObjectWithCancelEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IObjectWithCancelEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IObjectWithCancelEventVtbl < > { unsafe extern "system" fn GetCancelEvent < Impl : IObjectWithCancelEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phevent : * mut super::super::Foundation:: HANDLE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetCancelEvent : GetCancelEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IObjectWithCancelEvent < > as :: windows :: core :: Interface > :: IID } } pub trait IObjectWithFolderEnumModeImpl < > : Sized where { fn SetMode ( ) ; fn GetMode ( ) ; } impl < > IObjectWithFolderEnumModeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IObjectWithFolderEnumModeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IObjectWithFolderEnumModeVtbl < > { unsafe extern "system" fn SetMode < Impl : IObjectWithFolderEnumModeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , femode : FOLDER_ENUM_MODE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMode < Impl : IObjectWithFolderEnumModeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfemode : * mut FOLDER_ENUM_MODE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetMode : SetMode :: < Impl , IMPL_OFFSET > , GetMode : GetMode :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IObjectWithFolderEnumMode < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IObjectWithProgIDImpl < > : Sized where { fn SetProgID ( ) ; fn GetProgID ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IObjectWithProgIDVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IObjectWithProgIDImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IObjectWithProgIDVtbl < > { unsafe extern "system" fn SetProgID < Impl : IObjectWithProgIDImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszprogid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProgID < Impl : IObjectWithProgIDImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszprogid : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetProgID : SetProgID :: < Impl , IMPL_OFFSET > , GetProgID : GetProgID :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IObjectWithProgID < > as :: windows :: core :: Interface > :: IID } } pub trait IObjectWithSelectionImpl < > : Sized where { fn SetSelection ( ) ; fn GetSelection ( ) ; } impl < > IObjectWithSelectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IObjectWithSelectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IObjectWithSelectionVtbl < > { unsafe extern "system" fn SetSelection < Impl : IObjectWithSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psia : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSelection < Impl : IObjectWithSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetSelection : SetSelection :: < Impl , IMPL_OFFSET > , GetSelection : GetSelection :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IObjectWithSelection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IOpenControlPanelImpl < > : Sized where { fn Open ( ) ; fn GetPath ( ) ; fn GetCurrentView ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IOpenControlPanelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IOpenControlPanelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IOpenControlPanelVtbl < > { unsafe extern "system" fn Open < Impl : IOpenControlPanelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszname : super::super::Foundation:: PWSTR , pszpage : super::super::Foundation:: PWSTR , punksite : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPath < Impl : IOpenControlPanelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszname : super::super::Foundation:: PWSTR , pszpath : super::super::Foundation:: PWSTR , cchpath : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCurrentView < Impl : IOpenControlPanelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pview : * mut CPVIEW , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Open : Open :: < Impl , IMPL_OFFSET > , GetPath : GetPath :: < Impl , IMPL_OFFSET > , GetCurrentView : GetCurrentView :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IOpenControlPanel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IOpenSearchSourceImpl < > : Sized where { fn GetResults ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IOpenSearchSourceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IOpenSearchSourceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IOpenSearchSourceVtbl < > { unsafe extern "system" fn GetResults < Impl : IOpenSearchSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , pszquery : super::super::Foundation:: PWSTR , dwstartindex : u32 , dwcount : u32 , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetResults : GetResults :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IOpenSearchSource < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait IOperationsProgressDialogImpl < > : Sized where { fn StartProgressDialog ( ) ; fn StopProgressDialog ( ) ; fn SetOperation ( ) ; fn SetMode ( ) ; fn UpdateProgress ( ) ; fn UpdateLocations ( ) ; fn ResetTimer ( ) ; fn PauseTimer ( ) ; fn ResumeTimer ( ) ; fn GetMilliseconds ( ) ; fn GetOperationStatus ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > IOperationsProgressDialogVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IOperationsProgressDialogImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IOperationsProgressDialogVtbl < > { unsafe extern "system" fn StartProgressDialog < Impl : IOperationsProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndowner : super::super::Foundation:: HWND , flags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StopProgressDialog < Impl : IOperationsProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetOperation < Impl : IOperationsProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , action : SPACTION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMode < Impl : IOperationsProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , mode : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateProgress < Impl : IOperationsProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ullpointscurrent : u64 , ullpointstotal : u64 , ullsizecurrent : u64 , ullsizetotal : u64 , ullitemscurrent : u64 , ullitemstotal : u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateLocations < Impl : IOperationsProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psisource : :: windows :: core :: RawPtr , psitarget : :: windows :: core :: RawPtr , psiitem : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResetTimer < Impl : IOperationsProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PauseTimer < Impl : IOperationsProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResumeTimer < Impl : IOperationsProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMilliseconds < Impl : IOperationsProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pullelapsed : * mut u64 , pullremaining : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetOperationStatus < Impl : IOperationsProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , popstatus : * mut PropertiesSystem:: PDOPSTATUS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , StartProgressDialog : StartProgressDialog :: < Impl , IMPL_OFFSET > , StopProgressDialog : StopProgressDialog :: < Impl , IMPL_OFFSET > , SetOperation : SetOperation :: < Impl , IMPL_OFFSET > , SetMode : SetMode :: < Impl , IMPL_OFFSET > , UpdateProgress : UpdateProgress :: < Impl , IMPL_OFFSET > , UpdateLocations : UpdateLocations :: < Impl , IMPL_OFFSET > , ResetTimer : ResetTimer :: < Impl , IMPL_OFFSET > , PauseTimer : PauseTimer :: < Impl , IMPL_OFFSET > , ResumeTimer : ResumeTimer :: < Impl , IMPL_OFFSET > , GetMilliseconds : GetMilliseconds :: < Impl , IMPL_OFFSET > , GetOperationStatus : GetOperationStatus :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IOperationsProgressDialog < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPackageDebugSettingsImpl < > : Sized where { fn EnableDebugging ( ) ; fn DisableDebugging ( ) ; fn Suspend ( ) ; fn Resume ( ) ; fn TerminateAllProcesses ( ) ; fn SetTargetSessionId ( ) ; fn EnumerateBackgroundTasks ( ) ; fn ActivateBackgroundTask ( ) ; fn StartServicing ( ) ; fn StopServicing ( ) ; fn StartSessionRedirection ( ) ; fn StopSessionRedirection ( ) ; fn GetPackageExecutionState ( ) ; fn RegisterForPackageStateChanges ( ) ; fn UnregisterForPackageStateChanges ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPackageDebugSettingsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPackageDebugSettingsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPackageDebugSettingsVtbl < > { unsafe extern "system" fn EnableDebugging < Impl : IPackageDebugSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , packagefullname : super::super::Foundation:: PWSTR , debuggercommandline : super::super::Foundation:: PWSTR , environment : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DisableDebugging < Impl : IPackageDebugSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , packagefullname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Suspend < Impl : IPackageDebugSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , packagefullname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Resume < Impl : IPackageDebugSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , packagefullname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TerminateAllProcesses < Impl : IPackageDebugSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , packagefullname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTargetSessionId < Impl : IPackageDebugSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , sessionid : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnumerateBackgroundTasks < Impl : IPackageDebugSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , packagefullname : super::super::Foundation:: PWSTR , taskcount : * mut u32 , taskids : * mut * mut :: windows :: core :: GUID , tasknames : * mut * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ActivateBackgroundTask < Impl : IPackageDebugSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , taskid : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StartServicing < Impl : IPackageDebugSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , packagefullname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StopServicing < Impl : IPackageDebugSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , packagefullname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StartSessionRedirection < Impl : IPackageDebugSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , packagefullname : super::super::Foundation:: PWSTR , sessionid : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StopSessionRedirection < Impl : IPackageDebugSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , packagefullname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPackageExecutionState < Impl : IPackageDebugSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , packagefullname : super::super::Foundation:: PWSTR , packageexecutionstate : * mut PACKAGE_EXECUTION_STATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterForPackageStateChanges < Impl : IPackageDebugSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , packagefullname : super::super::Foundation:: PWSTR , ppackageexecutionstatechangenotification : :: windows :: core :: RawPtr , pdwcookie : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnregisterForPackageStateChanges < Impl : IPackageDebugSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcookie : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , EnableDebugging : EnableDebugging :: < Impl , IMPL_OFFSET > , DisableDebugging : DisableDebugging :: < Impl , IMPL_OFFSET > , Suspend : Suspend :: < Impl , IMPL_OFFSET > , Resume : Resume :: < Impl , IMPL_OFFSET > , TerminateAllProcesses : TerminateAllProcesses :: < Impl , IMPL_OFFSET > , SetTargetSessionId : SetTargetSessionId :: < Impl , IMPL_OFFSET > , EnumerateBackgroundTasks : EnumerateBackgroundTasks :: < Impl , IMPL_OFFSET > , ActivateBackgroundTask : ActivateBackgroundTask :: < Impl , IMPL_OFFSET > , StartServicing : StartServicing :: < Impl , IMPL_OFFSET > , StopServicing : StopServicing :: < Impl , IMPL_OFFSET > , StartSessionRedirection : StartSessionRedirection :: < Impl , IMPL_OFFSET > , StopSessionRedirection : StopSessionRedirection :: < Impl , IMPL_OFFSET > , GetPackageExecutionState : GetPackageExecutionState :: < Impl , IMPL_OFFSET > , RegisterForPackageStateChanges : RegisterForPackageStateChanges :: < Impl , IMPL_OFFSET > , UnregisterForPackageStateChanges : UnregisterForPackageStateChanges :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPackageDebugSettings < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPackageDebugSettings2Impl < > : Sized + IPackageDebugSettingsImpl where { fn EnumerateApps ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPackageDebugSettings2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPackageDebugSettings2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPackageDebugSettings2Vtbl < > { unsafe extern "system" fn EnumerateApps < Impl : IPackageDebugSettings2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , packagefullname : super::super::Foundation:: PWSTR , appcount : * mut u32 , appusermodelids : * mut * mut super::super::Foundation:: PWSTR , appdisplaynames : * mut * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , EnumerateApps : EnumerateApps :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPackageDebugSettings2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPackageExecutionStateChangeNotificationImpl < > : Sized where { fn OnStateChanged ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPackageExecutionStateChangeNotificationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPackageExecutionStateChangeNotificationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPackageExecutionStateChangeNotificationVtbl < > { unsafe extern "system" fn OnStateChanged < Impl : IPackageExecutionStateChangeNotificationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszpackagefullname : super::super::Foundation:: PWSTR , pesnewstate : PACKAGE_EXECUTION_STATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnStateChanged : OnStateChanged :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPackageExecutionStateChangeNotification < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IParentAndItemImpl < > : Sized where { fn SetParentAndItem ( ) ; fn GetParentAndItem ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IParentAndItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IParentAndItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IParentAndItemVtbl < > { unsafe extern "system" fn SetParentAndItem < Impl : IParentAndItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidlparent : * const Common:: ITEMIDLIST , psf : :: windows :: core :: RawPtr , pidlchild : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetParentAndItem < Impl : IParentAndItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppidlparent : * mut * mut Common:: ITEMIDLIST , ppsf : * mut :: windows :: core :: RawPtr , ppidlchild : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetParentAndItem : SetParentAndItem :: < Impl , IMPL_OFFSET > , GetParentAndItem : GetParentAndItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IParentAndItem < > as :: windows :: core :: Interface > :: IID } } pub trait IParseAndCreateItemImpl < > : Sized where { fn SetItem ( ) ; fn GetItem ( ) ; } impl < > IParseAndCreateItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IParseAndCreateItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IParseAndCreateItemVtbl < > { unsafe extern "system" fn SetItem < Impl : IParseAndCreateItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItem < Impl : IParseAndCreateItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetItem : SetItem :: < Impl , IMPL_OFFSET > , GetItem : GetItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IParseAndCreateItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IPersistFolderImpl < > : Sized + IPersistImpl where { fn Initialize ( ) ; } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IPersistFolderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPersistFolderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPersistFolderVtbl < > { unsafe extern "system" fn Initialize < Impl : IPersistFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPersistFolder < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IPersistFolder2Impl < > : Sized + IPersistFolderImpl + IPersistImpl where { fn GetCurFolder ( ) ; } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IPersistFolder2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPersistFolder2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPersistFolder2Vtbl < > { unsafe extern "system" fn GetCurFolder < Impl : IPersistFolder2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppidl : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetCurFolder : GetCurFolder :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPersistFolder2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IPersistFolder3Impl < > : Sized + IPersistFolder2Impl + IPersistFolderImpl + IPersistImpl where { fn InitializeEx ( ) ; fn GetFolderTargetInfo ( ) ; } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IPersistFolder3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPersistFolder3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPersistFolder3Vtbl < > { unsafe extern "system" fn InitializeEx < Impl : IPersistFolder3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbc : :: windows :: core :: RawPtr , pidlroot : * const Common:: ITEMIDLIST , ppfti : * const PERSIST_FOLDER_TARGET_INFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolderTargetInfo < Impl : IPersistFolder3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppfti : * mut PERSIST_FOLDER_TARGET_INFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , InitializeEx : InitializeEx :: < Impl , IMPL_OFFSET > , GetFolderTargetInfo : GetFolderTargetInfo :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPersistFolder3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IPersistIDListImpl < > : Sized + IPersistImpl where { fn SetIDList ( ) ; fn GetIDList ( ) ; } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IPersistIDListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPersistIDListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPersistIDListVtbl < > { unsafe extern "system" fn SetIDList < Impl : IPersistIDListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIDList < Impl : IPersistIDListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppidl : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetIDList : SetIDList :: < Impl , IMPL_OFFSET > , GetIDList : GetIDList :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPersistIDList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IPreviewHandlerImpl < > : Sized where { fn SetWindow ( ) ; fn SetRect ( ) ; fn DoPreview ( ) ; fn Unload ( ) ; fn SetFocus ( ) ; fn QueryFocus ( ) ; fn TranslateAccelerator ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IPreviewHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPreviewHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPreviewHandlerVtbl < > { unsafe extern "system" fn SetWindow < Impl : IPreviewHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , prc : * const super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetRect < Impl : IPreviewHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prc : * const super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DoPreview < Impl : IPreviewHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unload < Impl : IPreviewHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFocus < Impl : IPreviewHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryFocus < Impl : IPreviewHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phwnd : * mut super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TranslateAccelerator < Impl : IPreviewHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmsg : * const super::WindowsAndMessaging:: MSG , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetWindow : SetWindow :: < Impl , IMPL_OFFSET > , SetRect : SetRect :: < Impl , IMPL_OFFSET > , DoPreview : DoPreview :: < Impl , IMPL_OFFSET > , Unload : Unload :: < Impl , IMPL_OFFSET > , SetFocus : SetFocus :: < Impl , IMPL_OFFSET > , QueryFocus : QueryFocus :: < Impl , IMPL_OFFSET > , TranslateAccelerator : TranslateAccelerator :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPreviewHandler < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IPreviewHandlerFrameImpl < > : Sized where { fn GetWindowContext ( ) ; fn TranslateAccelerator ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IPreviewHandlerFrameVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPreviewHandlerFrameImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPreviewHandlerFrameVtbl < > { unsafe extern "system" fn GetWindowContext < Impl : IPreviewHandlerFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinfo : * mut PREVIEWHANDLERFRAMEINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TranslateAccelerator < Impl : IPreviewHandlerFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmsg : * const super::WindowsAndMessaging:: MSG , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetWindowContext : GetWindowContext :: < Impl , IMPL_OFFSET > , TranslateAccelerator : TranslateAccelerator :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPreviewHandlerFrame < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Graphics_Gdi" ) ] pub trait IPreviewHandlerVisualsImpl < > : Sized where { fn SetBackgroundColor ( ) ; fn SetFont ( ) ; fn SetTextColor ( ) ; } # [ cfg ( feature ="Win32_Graphics_Gdi" ) ] impl < > IPreviewHandlerVisualsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPreviewHandlerVisualsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPreviewHandlerVisualsVtbl < > { unsafe extern "system" fn SetBackgroundColor < Impl : IPreviewHandlerVisualsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , color : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFont < Impl : IPreviewHandlerVisualsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plf : * const super::super::Graphics::Gdi:: LOGFONTW , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTextColor < Impl : IPreviewHandlerVisualsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , color : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetBackgroundColor : SetBackgroundColor :: < Impl , IMPL_OFFSET > , SetFont : SetFont :: < Impl , IMPL_OFFSET > , SetTextColor : SetTextColor :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPreviewHandlerVisuals < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IPreviewItemImpl < > : Sized + IRelatedItemImpl where { } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IPreviewItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPreviewItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPreviewItemVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPreviewItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPreviousVersionsInfoImpl < > : Sized where { fn AreSnapshotsAvailable ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPreviousVersionsInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPreviousVersionsInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPreviousVersionsInfoVtbl < > { unsafe extern "system" fn AreSnapshotsAvailable < Impl : IPreviousVersionsInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszpath : super::super::Foundation:: PWSTR , foktobeslow : super::super::Foundation:: BOOL , pfavailable : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AreSnapshotsAvailable : AreSnapshotsAvailable :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPreviousVersionsInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait IProfferServiceImpl < > : Sized where { fn ProfferService ( ) ; fn RevokeService ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > IProfferServiceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IProfferServiceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IProfferServiceVtbl < > { unsafe extern "system" fn ProfferService < Impl : IProfferServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , serviceid : * const :: windows :: core :: GUID , serviceprovider : :: windows :: core :: RawPtr , cookie : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RevokeService < Impl : IProfferServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cookie : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ProfferService : ProfferService :: < Impl , IMPL_OFFSET > , RevokeService : RevokeService :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IProfferService < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IProgressDialogImpl < > : Sized where { fn StartProgressDialog ( ) ; fn StopProgressDialog ( ) ; fn SetTitle ( ) ; fn SetAnimation ( ) ; fn HasUserCancelled ( ) ; fn SetProgress ( ) ; fn SetProgress64 ( ) ; fn SetLine ( ) ; fn SetCancelMsg ( ) ; fn Timer ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IProgressDialogVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IProgressDialogImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IProgressDialogVtbl < > { unsafe extern "system" fn StartProgressDialog < Impl : IProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndparent : super::super::Foundation:: HWND , punkenablemodless : * mut :: core :: ffi :: c_void , dwflags : u32 , pvresevered : * const :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StopProgressDialog < Impl : IProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTitle < Impl : IProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwztitle : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetAnimation < Impl : IProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hinstanimation : super::super::Foundation:: HINSTANCE , idanimation : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HasUserCancelled < Impl : IProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> super::super::Foundation:: BOOL { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProgress < Impl : IProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcompleted : u32 , dwtotal : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProgress64 < Impl : IProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ullcompleted : u64 , ulltotal : u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetLine < Impl : IProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwlinenum : u32 , pwzstring : super::super::Foundation:: PWSTR , fcompactpath : super::super::Foundation:: BOOL , pvresevered : * const :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCancelMsg < Impl : IProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzcancelmsg : super::super::Foundation:: PWSTR , pvresevered : * const :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Timer < Impl : IProgressDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwtimeraction : u32 , pvresevered : * const :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , StartProgressDialog : StartProgressDialog :: < Impl , IMPL_OFFSET > , StopProgressDialog : StopProgressDialog :: < Impl , IMPL_OFFSET > , SetTitle : SetTitle :: < Impl , IMPL_OFFSET > , SetAnimation : SetAnimation :: < Impl , IMPL_OFFSET > , HasUserCancelled : HasUserCancelled :: < Impl , IMPL_OFFSET > , SetProgress : SetProgress :: < Impl , IMPL_OFFSET > , SetProgress64 : SetProgress64 :: < Impl , IMPL_OFFSET > , SetLine : SetLine :: < Impl , IMPL_OFFSET > , SetCancelMsg : SetCancelMsg :: < Impl , IMPL_OFFSET > , Timer : Timer :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IProgressDialog < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_PropertiesSystem" ) ] pub trait IPropertyKeyStoreImpl < > : Sized where { fn GetKeyCount ( ) ; fn GetKeyAt ( ) ; fn AppendKey ( ) ; fn DeleteKey ( ) ; fn IsKeyInStore ( ) ; fn RemoveKey ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_PropertiesSystem" ) ] impl < > IPropertyKeyStoreVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPropertyKeyStoreImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPropertyKeyStoreVtbl < > { unsafe extern "system" fn GetKeyCount < Impl : IPropertyKeyStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , keycount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetKeyAt < Impl : IPropertyKeyStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pkey : * mut PropertiesSystem:: PROPERTYKEY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AppendKey < Impl : IPropertyKeyStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , key : * const PropertiesSystem:: PROPERTYKEY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteKey < Impl : IPropertyKeyStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsKeyInStore < Impl : IPropertyKeyStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , key : * const PropertiesSystem:: PROPERTYKEY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveKey < Impl : IPropertyKeyStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , key : * const PropertiesSystem:: PROPERTYKEY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetKeyCount : GetKeyCount :: < Impl , IMPL_OFFSET > , GetKeyAt : GetKeyAt :: < Impl , IMPL_OFFSET > , AppendKey : AppendKey :: < Impl , IMPL_OFFSET > , DeleteKey : DeleteKey :: < Impl , IMPL_OFFSET > , IsKeyInStore : IsKeyInStore :: < Impl , IMPL_OFFSET > , RemoveKey : RemoveKey :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPropertyKeyStore < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPublishedAppImpl < > : Sized + IShellAppImpl where { fn Install ( ) ; fn GetPublishedAppInfo ( ) ; fn Unschedule ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPublishedAppVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPublishedAppImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPublishedAppVtbl < > { unsafe extern "system" fn Install < Impl : IPublishedAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstinstall : * const super::super::Foundation:: SYSTEMTIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPublishedAppInfo < Impl : IPublishedAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppai : * mut PUBAPPINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unschedule < Impl : IPublishedAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Install : Install :: < Impl , IMPL_OFFSET > , GetPublishedAppInfo : GetPublishedAppInfo :: < Impl , IMPL_OFFSET > , Unschedule : Unschedule :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPublishedApp < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPublishedApp2Impl < > : Sized + IPublishedAppImpl + IShellAppImpl where { fn Install2 ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPublishedApp2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPublishedApp2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPublishedApp2Vtbl < > { unsafe extern "system" fn Install2 < Impl : IPublishedApp2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstinstall : * const super::super::Foundation:: SYSTEMTIME , hwndparent : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Install2 : Install2 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPublishedApp2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Data_Xml_MsXml" , feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_UI_Controls" ) ) ] pub trait IPublishingWizardImpl < > : Sized + IWizardExtensionImpl where { fn Initialize ( ) ; fn GetTransferManifest ( ) ; } # [ cfg ( all ( feature ="Win32_Data_Xml_MsXml" , feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_UI_Controls" ) ) ] impl < > IPublishingWizardVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPublishingWizardImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPublishingWizardVtbl < > { unsafe extern "system" fn Initialize < Impl : IPublishingWizardImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdo : :: windows :: core :: RawPtr , dwoptions : u32 , pszservicescope : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTransferManifest < Impl : IPublishingWizardImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phrfromtransfer : * mut :: windows :: core :: HRESULT , pdocmanifest : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , GetTransferManifest : GetTransferManifest :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPublishingWizard < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Registry" ) ) ] pub trait IQueryAssociationsImpl < > : Sized where { fn Init ( ) ; fn GetString ( ) ; fn GetKey ( ) ; fn GetData ( ) ; fn GetEnum ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Registry" ) ) ] impl < > IQueryAssociationsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IQueryAssociationsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IQueryAssociationsVtbl < > { unsafe extern "system" fn Init < Impl : IQueryAssociationsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , flags : u32 , pszassoc : super::super::Foundation:: PWSTR , hkprogid : super::super::System::Registry:: HKEY , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetString < Impl : IQueryAssociationsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , flags : u32 , str : ASSOCSTR , pszextra : super::super::Foundation:: PWSTR , pszout : super::super::Foundation:: PWSTR , pcchout : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetKey < Impl : IQueryAssociationsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , flags : u32 , key : ASSOCKEY , pszextra : super::super::Foundation:: PWSTR , phkeyout : * mut super::super::System::Registry:: HKEY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetData < Impl : IQueryAssociationsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , flags : u32 , data : ASSOCDATA , pszextra : super::super::Foundation:: PWSTR , pvout : * mut :: core :: ffi :: c_void , pcbout : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEnum < Impl : IQueryAssociationsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , flags : u32 , assocenum : ASSOCENUM , pszextra : super::super::Foundation:: PWSTR , riid : * const :: windows :: core :: GUID , ppvout : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Init : Init :: < Impl , IMPL_OFFSET > , GetString : GetString :: < Impl , IMPL_OFFSET > , GetKey : GetKey :: < Impl , IMPL_OFFSET > , GetData : GetData :: < Impl , IMPL_OFFSET > , GetEnum : GetEnum :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IQueryAssociations < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IQueryCancelAutoPlayImpl < > : Sized where { fn AllowAutoPlay ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IQueryCancelAutoPlayVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IQueryCancelAutoPlayImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IQueryCancelAutoPlayVtbl < > { unsafe extern "system" fn AllowAutoPlay < Impl : IQueryCancelAutoPlayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszpath : super::super::Foundation:: PWSTR , dwcontenttype : u32 , pszlabel : super::super::Foundation:: PWSTR , dwserialnumber : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AllowAutoPlay : AllowAutoPlay :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IQueryCancelAutoPlay < > as :: windows :: core :: Interface > :: IID } } pub trait IQueryCodePageImpl < > : Sized where { fn GetCodePage ( ) ; fn SetCodePage ( ) ; } impl < > IQueryCodePageVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IQueryCodePageImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IQueryCodePageVtbl < > { unsafe extern "system" fn GetCodePage < Impl : IQueryCodePageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , puicodepage : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCodePage < Impl : IQueryCodePageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uicodepage : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetCodePage : GetCodePage :: < Impl , IMPL_OFFSET > , SetCodePage : SetCodePage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IQueryCodePage < > as :: windows :: core :: Interface > :: IID } } pub trait IQueryContinueImpl < > : Sized where { fn QueryContinue ( ) ; } impl < > IQueryContinueVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IQueryContinueImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IQueryContinueVtbl < > { unsafe extern "system" fn QueryContinue < Impl : IQueryContinueImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , QueryContinue : QueryContinue :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IQueryContinue < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IQueryContinueWithStatusImpl < > : Sized + IQueryContinueImpl where { fn SetStatusMessage ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IQueryContinueWithStatusVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IQueryContinueWithStatusImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IQueryContinueWithStatusVtbl < > { unsafe extern "system" fn SetStatusMessage < Impl : IQueryContinueWithStatusImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psz : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetStatusMessage : SetStatusMessage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IQueryContinueWithStatus < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IQueryInfoImpl < > : Sized where { fn GetInfoTip ( ) ; fn GetInfoFlags ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IQueryInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IQueryInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IQueryInfoVtbl < > { unsafe extern "system" fn GetInfoTip < Impl : IQueryInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : QITIPF_FLAGS , ppwsztip : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetInfoFlags < Impl : IQueryInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetInfoTip : GetInfoTip :: < Impl , IMPL_OFFSET > , GetInfoFlags : GetInfoFlags :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IQueryInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IRegTreeItemImpl < > : Sized where { fn GetCheckState ( ) ; fn SetCheckState ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IRegTreeItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IRegTreeItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IRegTreeItemVtbl < > { unsafe extern "system" fn GetCheckState < Impl : IRegTreeItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbcheck : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCheckState < Impl : IRegTreeItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bcheck : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetCheckState : GetCheckState :: < Impl , IMPL_OFFSET > , SetCheckState : SetCheckState :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IRegTreeItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IRelatedItemImpl < > : Sized where { fn GetItemIDList ( ) ; fn GetItem ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IRelatedItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IRelatedItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IRelatedItemVtbl < > { unsafe extern "system" fn GetItemIDList < Impl : IRelatedItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppidl : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItem < Impl : IRelatedItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsi : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetItemIDList : GetItemIDList :: < Impl , IMPL_OFFSET > , GetItem : GetItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IRelatedItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IRemoteComputerImpl < > : Sized where { fn Initialize ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IRemoteComputerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IRemoteComputerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IRemoteComputerVtbl < > { unsafe extern "system" fn Initialize < Impl : IRemoteComputerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszmachine : super::super::Foundation:: PWSTR , benumerating : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IRemoteComputer < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IResolveShellLinkImpl < > : Sized where { fn ResolveShellLink ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IResolveShellLinkVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IResolveShellLinkImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IResolveShellLinkVtbl < > { unsafe extern "system" fn ResolveShellLink < Impl : IResolveShellLinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punklink : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , fflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ResolveShellLink : ResolveShellLink :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IResolveShellLink < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IResultsFolderImpl < > : Sized where { fn AddItem ( ) ; fn AddIDList ( ) ; fn RemoveItem ( ) ; fn RemoveIDList ( ) ; fn RemoveAll ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IResultsFolderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IResultsFolderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IResultsFolderVtbl < > { unsafe extern "system" fn AddItem < Impl : IResultsFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddIDList < Impl : IResultsFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , ppidladded : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveItem < Impl : IResultsFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveIDList < Impl : IResultsFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveAll < Impl : IResultsFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddItem : AddItem :: < Impl , IMPL_OFFSET > , AddIDList : AddIDList :: < Impl , IMPL_OFFSET > , RemoveItem : RemoveItem :: < Impl , IMPL_OFFSET > , RemoveIDList : RemoveIDList :: < Impl , IMPL_OFFSET > , RemoveAll : RemoveAll :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IResultsFolder < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IRunnableTaskImpl < > : Sized where { fn Run ( ) ; fn Kill ( ) ; fn Suspend ( ) ; fn Resume ( ) ; fn IsRunning ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IRunnableTaskVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IRunnableTaskImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IRunnableTaskVtbl < > { unsafe extern "system" fn Run < Impl : IRunnableTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Kill < Impl : IRunnableTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bwait : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Suspend < Impl : IRunnableTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Resume < Impl : IRunnableTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsRunning < Impl : IRunnableTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> u32 { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Run : Run :: < Impl , IMPL_OFFSET > , Kill : Kill :: < Impl , IMPL_OFFSET > , Suspend : Suspend :: < Impl , IMPL_OFFSET > , Resume : Resume :: < Impl , IMPL_OFFSET > , IsRunning : IsRunning :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IRunnableTask < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IScriptErrorListImpl < > : Sized + IDispatchImpl where { fn advanceError ( ) ; fn retreatError ( ) ; fn canAdvanceError ( ) ; fn canRetreatError ( ) ; fn getErrorLine ( ) ; fn getErrorChar ( ) ; fn getErrorCode ( ) ; fn getErrorMsg ( ) ; fn getErrorUrl ( ) ; fn getAlwaysShowLockState ( ) ; fn getDetailsPaneOpen ( ) ; fn setDetailsPaneOpen ( ) ; fn getPerErrorDisplay ( ) ; fn setPerErrorDisplay ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IScriptErrorListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IScriptErrorListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IScriptErrorListVtbl < > { unsafe extern "system" fn advanceError < Impl : IScriptErrorListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn retreatError < Impl : IScriptErrorListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn canAdvanceError < Impl : IScriptErrorListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfcanadvance : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn canRetreatError < Impl : IScriptErrorListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfcanretreat : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getErrorLine < Impl : IScriptErrorListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plline : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getErrorChar < Impl : IScriptErrorListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plchar : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getErrorCode < Impl : IScriptErrorListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcode : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getErrorMsg < Impl : IScriptErrorListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstr : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getErrorUrl < Impl : IScriptErrorListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstr : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAlwaysShowLockState < Impl : IScriptErrorListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfalwaysshowlocked : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getDetailsPaneOpen < Impl : IScriptErrorListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfdetailspaneopen : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setDetailsPaneOpen < Impl : IScriptErrorListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fdetailspaneopen : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getPerErrorDisplay < Impl : IScriptErrorListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfpererrordisplay : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setPerErrorDisplay < Impl : IScriptErrorListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fpererrordisplay : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , advanceError : advanceError :: < Impl , IMPL_OFFSET > , retreatError : retreatError :: < Impl , IMPL_OFFSET > , canAdvanceError : canAdvanceError :: < Impl , IMPL_OFFSET > , canRetreatError : canRetreatError :: < Impl , IMPL_OFFSET > , getErrorLine : getErrorLine :: < Impl , IMPL_OFFSET > , getErrorChar : getErrorChar :: < Impl , IMPL_OFFSET > , getErrorCode : getErrorCode :: < Impl , IMPL_OFFSET > , getErrorMsg : getErrorMsg :: < Impl , IMPL_OFFSET > , getErrorUrl : getErrorUrl :: < Impl , IMPL_OFFSET > , getAlwaysShowLockState : getAlwaysShowLockState :: < Impl , IMPL_OFFSET > , getDetailsPaneOpen : getDetailsPaneOpen :: < Impl , IMPL_OFFSET > , setDetailsPaneOpen : setDetailsPaneOpen :: < Impl , IMPL_OFFSET > , getPerErrorDisplay : getPerErrorDisplay :: < Impl , IMPL_OFFSET > , setPerErrorDisplay : setPerErrorDisplay :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IScriptErrorList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISearchBoxInfoImpl < > : Sized where { fn GetCondition ( ) ; fn GetText ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISearchBoxInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISearchBoxInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISearchBoxInfoVtbl < > { unsafe extern "system" fn GetCondition < Impl : ISearchBoxInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetText < Impl : ISearchBoxInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsz : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetCondition : GetCondition :: < Impl , IMPL_OFFSET > , GetText : GetText :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISearchBoxInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISearchContextImpl < > : Sized where { fn GetSearchUrl ( ) ; fn GetSearchText ( ) ; fn GetSearchStyle ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISearchContextVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISearchContextImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISearchContextVtbl < > { unsafe extern "system" fn GetSearchUrl < Impl : ISearchContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrsearchurl : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSearchText < Impl : ISearchContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrsearchtext : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSearchStyle < Impl : ISearchContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwsearchstyle : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetSearchUrl : GetSearchUrl :: < Impl , IMPL_OFFSET > , GetSearchText : GetSearchText :: < Impl , IMPL_OFFSET > , GetSearchStyle : GetSearchStyle :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISearchContext < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Search" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait ISearchFolderItemFactoryImpl < > : Sized where { fn SetDisplayName ( ) ; fn SetFolderTypeID ( ) ; fn SetFolderLogicalViewMode ( ) ; fn SetIconSize ( ) ; fn SetVisibleColumns ( ) ; fn SetSortColumns ( ) ; fn SetGroupColumn ( ) ; fn SetStacks ( ) ; fn SetScope ( ) ; fn SetCondition ( ) ; fn GetShellItem ( ) ; fn GetIDList ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Search" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > ISearchFolderItemFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISearchFolderItemFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISearchFolderItemFactoryVtbl < > { unsafe extern "system" fn SetDisplayName < Impl : ISearchFolderItemFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdisplayname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFolderTypeID < Impl : ISearchFolderItemFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ftid : :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFolderLogicalViewMode < Impl : ISearchFolderItemFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , flvm : FOLDERLOGICALVIEWMODE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetIconSize < Impl : ISearchFolderItemFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , iiconsize : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetVisibleColumns < Impl : ISearchFolderItemFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cvisiblecolumns : u32 , rgkey : * const PropertiesSystem:: PROPERTYKEY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSortColumns < Impl : ISearchFolderItemFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , csortcolumns : u32 , rgsortcolumns : * const SORTCOLUMN , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetGroupColumn < Impl : ISearchFolderItemFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , keygroup : * const PropertiesSystem:: PROPERTYKEY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetStacks < Impl : ISearchFolderItemFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cstackkeys : u32 , rgstackkeys : * const PropertiesSystem:: PROPERTYKEY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetScope < Impl : ISearchFolderItemFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiascope : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCondition < Impl : ISearchFolderItemFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcondition : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetShellItem < Impl : ISearchFolderItemFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIDList < Impl : ISearchFolderItemFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppidl : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetDisplayName : SetDisplayName :: < Impl , IMPL_OFFSET > , SetFolderTypeID : SetFolderTypeID :: < Impl , IMPL_OFFSET > , SetFolderLogicalViewMode : SetFolderLogicalViewMode :: < Impl , IMPL_OFFSET > , SetIconSize : SetIconSize :: < Impl , IMPL_OFFSET > , SetVisibleColumns : SetVisibleColumns :: < Impl , IMPL_OFFSET > , SetSortColumns : SetSortColumns :: < Impl , IMPL_OFFSET > , SetGroupColumn : SetGroupColumn :: < Impl , IMPL_OFFSET > , SetStacks : SetStacks :: < Impl , IMPL_OFFSET > , SetScope : SetScope :: < Impl , IMPL_OFFSET > , SetCondition : SetCondition :: < Impl , IMPL_OFFSET > , GetShellItem : GetShellItem :: < Impl , IMPL_OFFSET > , GetIDList : GetIDList :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISearchFolderItemFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait ISharedBitmapImpl < > : Sized where { fn GetSharedBitmap ( ) ; fn GetSize ( ) ; fn GetFormat ( ) ; fn InitializeBitmap ( ) ; fn Detach ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > ISharedBitmapVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISharedBitmapImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISharedBitmapVtbl < > { unsafe extern "system" fn GetSharedBitmap < Impl : ISharedBitmapImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phbm : * mut super::super::Graphics::Gdi:: HBITMAP , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSize < Impl : ISharedBitmapImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psize : * mut super::super::Foundation:: SIZE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFormat < Impl : ISharedBitmapImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pat : * mut WTS_ALPHATYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InitializeBitmap < Impl : ISharedBitmapImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hbm : super::super::Graphics::Gdi:: HBITMAP , wtsat : WTS_ALPHATYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Detach < Impl : ISharedBitmapImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phbm : * mut super::super::Graphics::Gdi:: HBITMAP , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetSharedBitmap : GetSharedBitmap :: < Impl , IMPL_OFFSET > , GetSize : GetSize :: < Impl , IMPL_OFFSET > , GetFormat : GetFormat :: < Impl , IMPL_OFFSET > , InitializeBitmap : InitializeBitmap :: < Impl , IMPL_OFFSET > , Detach : Detach :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISharedBitmap < > as :: windows :: core :: Interface > :: IID } } pub trait ISharingConfigurationManagerImpl < > : Sized where { fn CreateShare ( ) ; fn DeleteShare ( ) ; fn ShareExists ( ) ; fn GetSharePermissions ( ) ; fn SharePrinters ( ) ; fn StopSharingPrinters ( ) ; fn ArePrintersShared ( ) ; } impl < > ISharingConfigurationManagerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISharingConfigurationManagerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISharingConfigurationManagerVtbl < > { unsafe extern "system" fn CreateShare < Impl : ISharingConfigurationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dsid : DEF_SHARE_ID , role : SHARE_ROLE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteShare < Impl : ISharingConfigurationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dsid : DEF_SHARE_ID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShareExists < Impl : ISharingConfigurationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dsid : DEF_SHARE_ID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSharePermissions < Impl : ISharingConfigurationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dsid : DEF_SHARE_ID , prole : * mut SHARE_ROLE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SharePrinters < Impl : ISharingConfigurationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StopSharingPrinters < Impl : ISharingConfigurationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ArePrintersShared < Impl : ISharingConfigurationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateShare : CreateShare :: < Impl , IMPL_OFFSET > , DeleteShare : DeleteShare :: < Impl , IMPL_OFFSET > , ShareExists : ShareExists :: < Impl , IMPL_OFFSET > , GetSharePermissions : GetSharePermissions :: < Impl , IMPL_OFFSET > , SharePrinters : SharePrinters :: < Impl , IMPL_OFFSET > , StopSharingPrinters : StopSharingPrinters :: < Impl , IMPL_OFFSET > , ArePrintersShared : ArePrintersShared :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISharingConfigurationManager < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IShellAppImpl < > : Sized where { fn GetAppInfo ( ) ; fn GetPossibleActions ( ) ; fn GetSlowAppInfo ( ) ; fn GetCachedSlowAppInfo ( ) ; fn IsInstalled ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IShellAppVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellAppImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellAppVtbl < > { unsafe extern "system" fn GetAppInfo < Impl : IShellAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pai : * mut APPINFODATA , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPossibleActions < Impl : IShellAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwactions : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSlowAppInfo < Impl : IShellAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psaid : * mut SLOWAPPINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCachedSlowAppInfo < Impl : IShellAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psaid : * mut SLOWAPPINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsInstalled < Impl : IShellAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetAppInfo : GetAppInfo :: < Impl , IMPL_OFFSET > , GetPossibleActions : GetPossibleActions :: < Impl , IMPL_OFFSET > , GetSlowAppInfo : GetSlowAppInfo :: < Impl , IMPL_OFFSET > , GetCachedSlowAppInfo : GetCachedSlowAppInfo :: < Impl , IMPL_OFFSET > , IsInstalled : IsInstalled :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellApp < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Controls" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IShellBrowserImpl < > : Sized + IOleWindowImpl where { fn InsertMenusSB ( ) ; fn SetMenuSB ( ) ; fn RemoveMenusSB ( ) ; fn SetStatusTextSB ( ) ; fn EnableModelessSB ( ) ; fn TranslateAcceleratorSB ( ) ; fn BrowseObject ( ) ; fn GetViewStateStream ( ) ; fn GetControlWindow ( ) ; fn SendControlMsg ( ) ; fn QueryActiveShellView ( ) ; fn OnViewWindowActive ( ) ; fn SetToolbarItems ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Controls" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IShellBrowserVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellBrowserImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellBrowserVtbl < > { unsafe extern "system" fn InsertMenusSB < Impl : IShellBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hmenushared : super::WindowsAndMessaging:: HMENU , lpmenuwidths : * mut super::super::System::Ole:: OleMenuGroupWidths , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMenuSB < Impl : IShellBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hmenushared : super::WindowsAndMessaging:: HMENU , holemenures : isize , hwndactiveobject : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveMenusSB < Impl : IShellBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hmenushared : super::WindowsAndMessaging:: HMENU , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetStatusTextSB < Impl : IShellBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszstatustext : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnableModelessSB < Impl : IShellBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fenable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TranslateAcceleratorSB < Impl : IShellBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmsg : * const super::WindowsAndMessaging:: MSG , wid : u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BrowseObject < Impl : IShellBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , wflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetViewStateStream < Impl : IShellBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , grfmode : u32 , ppstrm : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetControlWindow < Impl : IShellBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , id : u32 , phwnd : * mut super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SendControlMsg < Impl : IShellBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , id : u32 , umsg : u32 , wparam : super::super::Foundation:: WPARAM , lparam : super::super::Foundation:: LPARAM , pret : * mut super::super::Foundation:: LRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryActiveShellView < Impl : IShellBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppshv : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnViewWindowActive < Impl : IShellBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pshv : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetToolbarItems < Impl : IShellBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpbuttons : * const super::Controls:: TBBUTTON , nbuttons : u32 , uflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , InsertMenusSB : InsertMenusSB :: < Impl , IMPL_OFFSET > , SetMenuSB : SetMenuSB :: < Impl , IMPL_OFFSET > , RemoveMenusSB : RemoveMenusSB :: < Impl , IMPL_OFFSET > , SetStatusTextSB : SetStatusTextSB :: < Impl , IMPL_OFFSET > , EnableModelessSB : EnableModelessSB :: < Impl , IMPL_OFFSET > , TranslateAcceleratorSB : TranslateAcceleratorSB :: < Impl , IMPL_OFFSET > , BrowseObject : BrowseObject :: < Impl , IMPL_OFFSET > , GetViewStateStream : GetViewStateStream :: < Impl , IMPL_OFFSET > , GetControlWindow : GetControlWindow :: < Impl , IMPL_OFFSET > , SendControlMsg : SendControlMsg :: < Impl , IMPL_OFFSET > , QueryActiveShellView : QueryActiveShellView :: < Impl , IMPL_OFFSET > , OnViewWindowActive : OnViewWindowActive :: < Impl , IMPL_OFFSET > , SetToolbarItems : SetToolbarItems :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellBrowser < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IShellChangeNotifyImpl < > : Sized where { fn OnChange ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IShellChangeNotifyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellChangeNotifyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellChangeNotifyVtbl < > { unsafe extern "system" fn OnChange < Impl : IShellChangeNotifyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , levent : i32 , pidl1 : * const Common:: ITEMIDLIST , pidl2 : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnChange : OnChange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellChangeNotify < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IShellDetailsImpl < > : Sized where { fn GetDetailsOf ( ) ; fn ColumnClick ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IShellDetailsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellDetailsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellDetailsVtbl < > { unsafe extern "system" fn GetDetailsOf < Impl : IShellDetailsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , icolumn : u32 , pdetails : * mut Common:: SHELLDETAILS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ColumnClick < Impl : IShellDetailsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , icolumn : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetDetailsOf : GetDetailsOf :: < Impl , IMPL_OFFSET > , ColumnClick : ColumnClick :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellDetails < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellDispatchImpl < > : Sized + IDispatchImpl where { fn Application ( ) ; fn Parent ( ) ; fn NameSpace ( ) ; fn BrowseForFolder ( ) ; fn Windows ( ) ; fn Open ( ) ; fn Explore ( ) ; fn MinimizeAll ( ) ; fn UndoMinimizeALL ( ) ; fn FileRun ( ) ; fn CascadeWindows ( ) ; fn TileVertically ( ) ; fn TileHorizontally ( ) ; fn ShutdownWindows ( ) ; fn Suspend ( ) ; fn EjectPC ( ) ; fn SetTime ( ) ; fn TrayProperties ( ) ; fn Help ( ) ; fn FindFiles ( ) ; fn FindComputer ( ) ; fn RefreshMenu ( ) ; fn ControlPanelItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellDispatchVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellDispatchImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellDispatchVtbl < > { unsafe extern "system" fn Application < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Parent < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NameSpace < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vdir : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppsdf : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BrowseForFolder < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : i32 , title : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , options : i32 , rootfolder : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppsdf : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Windows < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Open < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vdir : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Explore < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vdir : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MinimizeAll < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UndoMinimizeALL < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FileRun < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CascadeWindows < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TileVertically < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TileHorizontally < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShutdownWindows < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Suspend < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EjectPC < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTime < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TrayProperties < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Help < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindFiles < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindComputer < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RefreshMenu < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ControlPanelItem < Impl : IShellDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdir : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Application : Application :: < Impl , IMPL_OFFSET > , Parent : Parent :: < Impl , IMPL_OFFSET > , NameSpace : NameSpace :: < Impl , IMPL_OFFSET > , BrowseForFolder : BrowseForFolder :: < Impl , IMPL_OFFSET > , Windows : Windows :: < Impl , IMPL_OFFSET > , Open : Open :: < Impl , IMPL_OFFSET > , Explore : Explore :: < Impl , IMPL_OFFSET > , MinimizeAll : MinimizeAll :: < Impl , IMPL_OFFSET > , UndoMinimizeALL : UndoMinimizeALL :: < Impl , IMPL_OFFSET > , FileRun : FileRun :: < Impl , IMPL_OFFSET > , CascadeWindows : CascadeWindows :: < Impl , IMPL_OFFSET > , TileVertically : TileVertically :: < Impl , IMPL_OFFSET > , TileHorizontally : TileHorizontally :: < Impl , IMPL_OFFSET > , ShutdownWindows : ShutdownWindows :: < Impl , IMPL_OFFSET > , Suspend : Suspend :: < Impl , IMPL_OFFSET > , EjectPC : EjectPC :: < Impl , IMPL_OFFSET > , SetTime : SetTime :: < Impl , IMPL_OFFSET > , TrayProperties : TrayProperties :: < Impl , IMPL_OFFSET > , Help : Help :: < Impl , IMPL_OFFSET > , FindFiles : FindFiles :: < Impl , IMPL_OFFSET > , FindComputer : FindComputer :: < Impl , IMPL_OFFSET > , RefreshMenu : RefreshMenu :: < Impl , IMPL_OFFSET > , ControlPanelItem : ControlPanelItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellDispatch < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellDispatch2Impl < > : Sized + IShellDispatchImpl + IDispatchImpl where { fn IsRestricted ( ) ; fn ShellExecute ( ) ; fn FindPrinter ( ) ; fn GetSystemInformation ( ) ; fn ServiceStart ( ) ; fn ServiceStop ( ) ; fn IsServiceRunning ( ) ; fn CanStartStopService ( ) ; fn ShowBrowserBar ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellDispatch2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellDispatch2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellDispatch2Vtbl < > { unsafe extern "system" fn IsRestricted < Impl : IShellDispatch2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , group : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , restriction : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , plrestrictvalue : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShellExecute < Impl : IShellDispatch2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , file : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , vargs : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , vdir : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , voperation : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , vshow : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindPrinter < Impl : IShellDispatch2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , location : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , model : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSystemInformation < Impl : IShellDispatch2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pv : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ServiceStart < Impl : IShellDispatch2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , servicename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , persistent : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , psuccess : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ServiceStop < Impl : IShellDispatch2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , servicename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , persistent : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , psuccess : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsServiceRunning < Impl : IShellDispatch2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , servicename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , prunning : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CanStartStopService < Impl : IShellDispatch2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , servicename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pcanstartstop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowBrowserBar < Impl : IShellDispatch2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrclsid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bshow : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , psuccess : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , IsRestricted : IsRestricted :: < Impl , IMPL_OFFSET > , ShellExecute : ShellExecute :: < Impl , IMPL_OFFSET > , FindPrinter : FindPrinter :: < Impl , IMPL_OFFSET > , GetSystemInformation : GetSystemInformation :: < Impl , IMPL_OFFSET > , ServiceStart : ServiceStart :: < Impl , IMPL_OFFSET > , ServiceStop : ServiceStop :: < Impl , IMPL_OFFSET > , IsServiceRunning : IsServiceRunning :: < Impl , IMPL_OFFSET > , CanStartStopService : CanStartStopService :: < Impl , IMPL_OFFSET > , ShowBrowserBar : ShowBrowserBar :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellDispatch2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellDispatch3Impl < > : Sized + IShellDispatch2Impl + IShellDispatchImpl + IDispatchImpl where { fn AddToRecent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellDispatch3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellDispatch3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellDispatch3Vtbl < > { unsafe extern "system" fn AddToRecent < Impl : IShellDispatch3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varfile : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , bstrcategory : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , AddToRecent : AddToRecent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellDispatch3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellDispatch4Impl < > : Sized + IShellDispatch3Impl + IShellDispatch2Impl + IShellDispatchImpl + IDispatchImpl where { fn WindowsSecurity ( ) ; fn ToggleDesktop ( ) ; fn ExplorerPolicy ( ) ; fn GetSetting ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellDispatch4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellDispatch4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellDispatch4Vtbl < > { unsafe extern "system" fn WindowsSecurity < Impl : IShellDispatch4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ToggleDesktop < Impl : IShellDispatch4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ExplorerPolicy < Impl : IShellDispatch4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrpolicyname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSetting < Impl : IShellDispatch4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lsetting : i32 , presult : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , WindowsSecurity : WindowsSecurity :: < Impl , IMPL_OFFSET > , ToggleDesktop : ToggleDesktop :: < Impl , IMPL_OFFSET > , ExplorerPolicy : ExplorerPolicy :: < Impl , IMPL_OFFSET > , GetSetting : GetSetting :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellDispatch4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellDispatch5Impl < > : Sized + IShellDispatch4Impl + IShellDispatch3Impl + IShellDispatch2Impl + IShellDispatchImpl + IDispatchImpl where { fn WindowSwitcher ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellDispatch5Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellDispatch5Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellDispatch5Vtbl < > { unsafe extern "system" fn WindowSwitcher < Impl : IShellDispatch5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , WindowSwitcher : WindowSwitcher :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellDispatch5 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellDispatch6Impl < > : Sized + IShellDispatch5Impl + IShellDispatch4Impl + IShellDispatch3Impl + IShellDispatch2Impl + IShellDispatchImpl + IDispatchImpl where { fn SearchCommand ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellDispatch6Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellDispatch6Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellDispatch6Vtbl < > { unsafe extern "system" fn SearchCommand < Impl : IShellDispatch6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SearchCommand : SearchCommand :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellDispatch6 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_System_Registry" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IShellExtInitImpl < > : Sized where { fn Initialize ( ) ; } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_System_Registry" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IShellExtInitVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellExtInitImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellExtInitVtbl < > { unsafe extern "system" fn Initialize < Impl : IShellExtInitImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidlfolder : * const Common:: ITEMIDLIST , pdtobj : :: windows :: core :: RawPtr , hkeyprogid : super::super::System::Registry:: HKEY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellExtInit < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellFavoritesNameSpaceImpl < > : Sized + IDispatchImpl where { fn MoveSelectionUp ( ) ; fn MoveSelectionDown ( ) ; fn ResetSort ( ) ; fn NewFolder ( ) ; fn Synchronize ( ) ; fn Import ( ) ; fn Export ( ) ; fn InvokeContextMenuCommand ( ) ; fn MoveSelectionTo ( ) ; fn SubscriptionsEnabled ( ) ; fn CreateSubscriptionForSelection ( ) ; fn DeleteSubscriptionForSelection ( ) ; fn SetRoot ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellFavoritesNameSpaceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellFavoritesNameSpaceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellFavoritesNameSpaceVtbl < > { unsafe extern "system" fn MoveSelectionUp < Impl : IShellFavoritesNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveSelectionDown < Impl : IShellFavoritesNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResetSort < Impl : IShellFavoritesNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NewFolder < Impl : IShellFavoritesNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Synchronize < Impl : IShellFavoritesNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Import < Impl : IShellFavoritesNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Export < Impl : IShellFavoritesNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvokeContextMenuCommand < Impl : IShellFavoritesNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strcommand : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveSelectionTo < Impl : IShellFavoritesNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SubscriptionsEnabled < Impl : IShellFavoritesNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbool : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateSubscriptionForSelection < Impl : IShellFavoritesNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbool : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteSubscriptionForSelection < Impl : IShellFavoritesNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbool : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetRoot < Impl : IShellFavoritesNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrfullpath : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , MoveSelectionUp : MoveSelectionUp :: < Impl , IMPL_OFFSET > , MoveSelectionDown : MoveSelectionDown :: < Impl , IMPL_OFFSET > , ResetSort : ResetSort :: < Impl , IMPL_OFFSET > , NewFolder : NewFolder :: < Impl , IMPL_OFFSET > , Synchronize : Synchronize :: < Impl , IMPL_OFFSET > , Import : Import :: < Impl , IMPL_OFFSET > , Export : Export :: < Impl , IMPL_OFFSET > , InvokeContextMenuCommand : InvokeContextMenuCommand :: < Impl , IMPL_OFFSET > , MoveSelectionTo : MoveSelectionTo :: < Impl , IMPL_OFFSET > , SubscriptionsEnabled : SubscriptionsEnabled :: < Impl , IMPL_OFFSET > , CreateSubscriptionForSelection : CreateSubscriptionForSelection :: < Impl , IMPL_OFFSET > , DeleteSubscriptionForSelection : DeleteSubscriptionForSelection :: < Impl , IMPL_OFFSET > , SetRoot : SetRoot :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellFavoritesNameSpace < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IShellFolderImpl < > : Sized where { fn ParseDisplayName ( ) ; fn EnumObjects ( ) ; fn BindToObject ( ) ; fn BindToStorage ( ) ; fn CompareIDs ( ) ; fn CreateViewObject ( ) ; fn GetAttributesOf ( ) ; fn GetUIObjectOf ( ) ; fn GetDisplayNameOf ( ) ; fn SetNameOf ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IShellFolderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellFolderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellFolderVtbl < > { unsafe extern "system" fn ParseDisplayName < Impl : IShellFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , pbc : :: windows :: core :: RawPtr , pszdisplayname : super::super::Foundation:: PWSTR , pcheaten : * mut u32 , ppidl : * mut * mut Common:: ITEMIDLIST , pdwattributes : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnumObjects < Impl : IShellFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , grfflags : u32 , ppenumidlist : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BindToObject < Impl : IShellFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , pbc : :: windows :: core :: RawPtr , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BindToStorage < Impl : IShellFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , pbc : :: windows :: core :: RawPtr , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CompareIDs < Impl : IShellFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lparam : super::super::Foundation:: LPARAM , pidl1 : * const Common:: ITEMIDLIST , pidl2 : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateViewObject < Impl : IShellFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndowner : super::super::Foundation:: HWND , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAttributesOf < Impl : IShellFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cidl : u32 , apidl : * const * const Common:: ITEMIDLIST , rgfinout : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetUIObjectOf < Impl : IShellFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndowner : super::super::Foundation:: HWND , cidl : u32 , apidl : * const * const Common:: ITEMIDLIST , riid : * const :: windows :: core :: GUID , rgfreserved : * mut u32 , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDisplayNameOf < Impl : IShellFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , uflags : u32 , pname : * mut Common:: STRRET , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetNameOf < Impl : IShellFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , pidl : * const Common:: ITEMIDLIST , pszname : super::super::Foundation:: PWSTR , uflags : u32 , ppidlout : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ParseDisplayName : ParseDisplayName :: < Impl , IMPL_OFFSET > , EnumObjects : EnumObjects :: < Impl , IMPL_OFFSET > , BindToObject : BindToObject :: < Impl , IMPL_OFFSET > , BindToStorage : BindToStorage :: < Impl , IMPL_OFFSET > , CompareIDs : CompareIDs :: < Impl , IMPL_OFFSET > , CreateViewObject : CreateViewObject :: < Impl , IMPL_OFFSET > , GetAttributesOf : GetAttributesOf :: < Impl , IMPL_OFFSET > , GetUIObjectOf : GetUIObjectOf :: < Impl , IMPL_OFFSET > , GetDisplayNameOf : GetDisplayNameOf :: < Impl , IMPL_OFFSET > , SetNameOf : SetNameOf :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellFolder < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait IShellFolder2Impl < > : Sized + IShellFolderImpl where { fn GetDefaultSearchGUID ( ) ; fn EnumSearches ( ) ; fn GetDefaultColumn ( ) ; fn GetDefaultColumnState ( ) ; fn GetDetailsEx ( ) ; fn GetDetailsOf ( ) ; fn MapColumnToSCID ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > IShellFolder2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellFolder2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellFolder2Vtbl < > { unsafe extern "system" fn GetDefaultSearchGUID < Impl : IShellFolder2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pguid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnumSearches < Impl : IShellFolder2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDefaultColumn < Impl : IShellFolder2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwres : u32 , psort : * mut u32 , pdisplay : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDefaultColumnState < Impl : IShellFolder2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , icolumn : u32 , pcsflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDetailsEx < Impl : IShellFolder2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , pscid : * const PropertiesSystem:: PROPERTYKEY , pv : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDetailsOf < Impl : IShellFolder2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , icolumn : u32 , psd : * mut Common:: SHELLDETAILS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MapColumnToSCID < Impl : IShellFolder2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , icolumn : u32 , pscid : * mut PropertiesSystem:: PROPERTYKEY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetDefaultSearchGUID : GetDefaultSearchGUID :: < Impl , IMPL_OFFSET > , EnumSearches : EnumSearches :: < Impl , IMPL_OFFSET > , GetDefaultColumn : GetDefaultColumn :: < Impl , IMPL_OFFSET > , GetDefaultColumnState : GetDefaultColumnState :: < Impl , IMPL_OFFSET > , GetDetailsEx : GetDetailsEx :: < Impl , IMPL_OFFSET > , GetDetailsOf : GetDetailsOf :: < Impl , IMPL_OFFSET > , MapColumnToSCID : MapColumnToSCID :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellFolder2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IShellFolderBandImpl < > : Sized where { fn InitializeSFB ( ) ; fn SetBandInfoSFB ( ) ; fn GetBandInfoSFB ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IShellFolderBandVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellFolderBandImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellFolderBandVtbl < > { unsafe extern "system" fn InitializeSFB < Impl : IShellFolderBandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psf : :: windows :: core :: RawPtr , pidl : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBandInfoSFB < Impl : IShellFolderBandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbi : * const BANDINFOSFB , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBandInfoSFB < Impl : IShellFolderBandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbi : * mut BANDINFOSFB , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , InitializeSFB : InitializeSFB :: < Impl , IMPL_OFFSET > , SetBandInfoSFB : SetBandInfoSFB :: < Impl , IMPL_OFFSET > , GetBandInfoSFB : GetBandInfoSFB :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellFolderBand < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IShellFolderViewImpl < > : Sized where { fn Rearrange ( ) ; fn GetArrangeParam ( ) ; fn ArrangeGrid ( ) ; fn AutoArrange ( ) ; fn GetAutoArrange ( ) ; fn AddObject ( ) ; fn GetObject ( ) ; fn RemoveObject ( ) ; fn GetObjectCount ( ) ; fn SetObjectCount ( ) ; fn UpdateObject ( ) ; fn RefreshObject ( ) ; fn SetRedraw ( ) ; fn GetSelectedCount ( ) ; fn GetSelectedObjects ( ) ; fn IsDropOnSource ( ) ; fn GetDragPoint ( ) ; fn GetDropPoint ( ) ; fn MoveIcons ( ) ; fn SetItemPos ( ) ; fn IsBkDropTarget ( ) ; fn SetClipboard ( ) ; fn SetPoints ( ) ; fn GetItemSpacing ( ) ; fn SetCallback ( ) ; fn Select ( ) ; fn QuerySupport ( ) ; fn SetAutomationObject ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IShellFolderViewVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellFolderViewImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellFolderViewVtbl < > { unsafe extern "system" fn Rearrange < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lparamsort : super::super::Foundation:: LPARAM , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetArrangeParam < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plparamsort : * mut super::super::Foundation:: LPARAM , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ArrangeGrid < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AutoArrange < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAutoArrange < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddObject < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , puitem : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetObject < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppidl : * mut * mut Common:: ITEMIDLIST , uitem : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveObject < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , puitem : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetObjectCount < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pucount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetObjectCount < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ucount : u32 , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateObject < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidlold : * const Common:: ITEMIDLIST , pidlnew : * const Common:: ITEMIDLIST , puitem : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RefreshObject < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , puitem : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetRedraw < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bredraw : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSelectedCount < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , puselected : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSelectedObjects < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pppidl : * mut * mut * mut Common:: ITEMIDLIST , puitems : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsDropOnSource < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdroptarget : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDragPoint < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppt : * mut super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDropPoint < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppt : * mut super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveIcons < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdataobject : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetItemPos < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , ppt : * const super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsBkDropTarget < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdroptarget : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetClipboard < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bmove : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPoints < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdataobject : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItemSpacing < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pspacing : * mut ITEMSPACING , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCallback < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnewcb : :: windows :: core :: RawPtr , ppoldcb : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Select < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : SFVS_SELECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QuerySupport < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwsupport : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetAutomationObject < Impl : IShellFolderViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdisp : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Rearrange : Rearrange :: < Impl , IMPL_OFFSET > , GetArrangeParam : GetArrangeParam :: < Impl , IMPL_OFFSET > , ArrangeGrid : ArrangeGrid :: < Impl , IMPL_OFFSET > , AutoArrange : AutoArrange :: < Impl , IMPL_OFFSET > , GetAutoArrange : GetAutoArrange :: < Impl , IMPL_OFFSET > , AddObject : AddObject :: < Impl , IMPL_OFFSET > , GetObject : GetObject :: < Impl , IMPL_OFFSET > , RemoveObject : RemoveObject :: < Impl , IMPL_OFFSET > , GetObjectCount : GetObjectCount :: < Impl , IMPL_OFFSET > , SetObjectCount : SetObjectCount :: < Impl , IMPL_OFFSET > , UpdateObject : UpdateObject :: < Impl , IMPL_OFFSET > , RefreshObject : RefreshObject :: < Impl , IMPL_OFFSET > , SetRedraw : SetRedraw :: < Impl , IMPL_OFFSET > , GetSelectedCount : GetSelectedCount :: < Impl , IMPL_OFFSET > , GetSelectedObjects : GetSelectedObjects :: < Impl , IMPL_OFFSET > , IsDropOnSource : IsDropOnSource :: < Impl , IMPL_OFFSET > , GetDragPoint : GetDragPoint :: < Impl , IMPL_OFFSET > , GetDropPoint : GetDropPoint :: < Impl , IMPL_OFFSET > , MoveIcons : MoveIcons :: < Impl , IMPL_OFFSET > , SetItemPos : SetItemPos :: < Impl , IMPL_OFFSET > , IsBkDropTarget : IsBkDropTarget :: < Impl , IMPL_OFFSET > , SetClipboard : SetClipboard :: < Impl , IMPL_OFFSET > , SetPoints : SetPoints :: < Impl , IMPL_OFFSET > , GetItemSpacing : GetItemSpacing :: < Impl , IMPL_OFFSET > , SetCallback : SetCallback :: < Impl , IMPL_OFFSET > , Select : Select :: < Impl , IMPL_OFFSET > , QuerySupport : QuerySupport :: < Impl , IMPL_OFFSET > , SetAutomationObject : SetAutomationObject :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellFolderView < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IShellFolderViewCBImpl < > : Sized where { fn MessageSFVCB ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IShellFolderViewCBVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellFolderViewCBImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellFolderViewCBVtbl < > { unsafe extern "system" fn MessageSFVCB < Impl : IShellFolderViewCBImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , umsg : SFVM_MESSAGE_ID , wparam : super::super::Foundation:: WPARAM , lparam : super::super::Foundation:: LPARAM , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , MessageSFVCB : MessageSFVCB :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellFolderViewCB < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellFolderViewDualImpl < > : Sized + IDispatchImpl where { fn Application ( ) ; fn Parent ( ) ; fn Folder ( ) ; fn SelectedItems ( ) ; fn FocusedItem ( ) ; fn SelectItem ( ) ; fn PopupItemMenu ( ) ; fn Script ( ) ; fn ViewOptions ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellFolderViewDualVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellFolderViewDualImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellFolderViewDualVtbl < > { unsafe extern "system" fn Application < Impl : IShellFolderViewDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Parent < Impl : IShellFolderViewDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Folder < Impl : IShellFolderViewDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SelectedItems < Impl : IShellFolderViewDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FocusedItem < Impl : IShellFolderViewDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SelectItem < Impl : IShellFolderViewDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvfi : * const super::super::System::Com:: VARIANT , dwflags : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PopupItemMenu < Impl : IShellFolderViewDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfi : :: windows :: core :: RawPtr , vx : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , vy : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pbs : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Script < Impl : IShellFolderViewDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ViewOptions < Impl : IShellFolderViewDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plviewoptions : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Application : Application :: < Impl , IMPL_OFFSET > , Parent : Parent :: < Impl , IMPL_OFFSET > , Folder : Folder :: < Impl , IMPL_OFFSET > , SelectedItems : SelectedItems :: < Impl , IMPL_OFFSET > , FocusedItem : FocusedItem :: < Impl , IMPL_OFFSET > , SelectItem : SelectItem :: < Impl , IMPL_OFFSET > , PopupItemMenu : PopupItemMenu :: < Impl , IMPL_OFFSET > , Script : Script :: < Impl , IMPL_OFFSET > , ViewOptions : ViewOptions :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellFolderViewDual < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellFolderViewDual2Impl < > : Sized + IShellFolderViewDualImpl + IDispatchImpl where { fn CurrentViewMode ( ) ; fn SetCurrentViewMode ( ) ; fn SelectItemRelative ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellFolderViewDual2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellFolderViewDual2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellFolderViewDual2Vtbl < > { unsafe extern "system" fn CurrentViewMode < Impl : IShellFolderViewDual2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pviewmode : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCurrentViewMode < Impl : IShellFolderViewDual2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , viewmode : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SelectItemRelative < Impl : IShellFolderViewDual2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , irelative : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CurrentViewMode : CurrentViewMode :: < Impl , IMPL_OFFSET > , SetCurrentViewMode : SetCurrentViewMode :: < Impl , IMPL_OFFSET > , SelectItemRelative : SelectItemRelative :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellFolderViewDual2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellFolderViewDual3Impl < > : Sized + IShellFolderViewDual2Impl + IShellFolderViewDualImpl + IDispatchImpl where { fn GroupBy ( ) ; fn SetGroupBy ( ) ; fn FolderFlags ( ) ; fn SetFolderFlags ( ) ; fn SortColumns ( ) ; fn SetSortColumns ( ) ; fn SetIconSize ( ) ; fn IconSize ( ) ; fn FilterView ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellFolderViewDual3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellFolderViewDual3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellFolderViewDual3Vtbl < > { unsafe extern "system" fn GroupBy < Impl : IShellFolderViewDual3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrgroupby : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetGroupBy < Impl : IShellFolderViewDual3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrgroupby : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FolderFlags < Impl : IShellFolderViewDual3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFolderFlags < Impl : IShellFolderViewDual3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SortColumns < Impl : IShellFolderViewDual3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrsortcolumns : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSortColumns < Impl : IShellFolderViewDual3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrsortcolumns : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetIconSize < Impl : IShellFolderViewDual3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , iiconsize : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IconSize < Impl : IShellFolderViewDual3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , piiconsize : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FilterView < Impl : IShellFolderViewDual3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrfiltertext : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GroupBy : GroupBy :: < Impl , IMPL_OFFSET > , SetGroupBy : SetGroupBy :: < Impl , IMPL_OFFSET > , FolderFlags : FolderFlags :: < Impl , IMPL_OFFSET > , SetFolderFlags : SetFolderFlags :: < Impl , IMPL_OFFSET > , SortColumns : SortColumns :: < Impl , IMPL_OFFSET > , SetSortColumns : SetSortColumns :: < Impl , IMPL_OFFSET > , SetIconSize : SetIconSize :: < Impl , IMPL_OFFSET > , IconSize : IconSize :: < Impl , IMPL_OFFSET > , FilterView : FilterView :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellFolderViewDual3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IShellIconImpl < > : Sized where { fn GetIconOf ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IShellIconVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellIconImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellIconVtbl < > { unsafe extern "system" fn GetIconOf < Impl : IShellIconImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , flags : u32 , piconindex : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetIconOf : GetIconOf :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellIcon < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IShellIconOverlayImpl < > : Sized where { fn GetOverlayIndex ( ) ; fn GetOverlayIconIndex ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IShellIconOverlayVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellIconOverlayImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellIconOverlayVtbl < > { unsafe extern "system" fn GetOverlayIndex < Impl : IShellIconOverlayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , pindex : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetOverlayIconIndex < Impl : IShellIconOverlayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , piconindex : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetOverlayIndex : GetOverlayIndex :: < Impl , IMPL_OFFSET > , GetOverlayIconIndex : GetOverlayIconIndex :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellIconOverlay < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IShellIconOverlayIdentifierImpl < > : Sized where { fn IsMemberOf ( ) ; fn GetOverlayInfo ( ) ; fn GetPriority ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IShellIconOverlayIdentifierVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellIconOverlayIdentifierImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellIconOverlayIdentifierVtbl < > { unsafe extern "system" fn IsMemberOf < Impl : IShellIconOverlayIdentifierImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwszpath : super::super::Foundation:: PWSTR , dwattrib : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetOverlayInfo < Impl : IShellIconOverlayIdentifierImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwsziconfile : super::super::Foundation:: PWSTR , cchmax : i32 , pindex : * mut i32 , pdwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPriority < Impl : IShellIconOverlayIdentifierImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppriority : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , IsMemberOf : IsMemberOf :: < Impl , IMPL_OFFSET > , GetOverlayInfo : GetOverlayInfo :: < Impl , IMPL_OFFSET > , GetPriority : GetPriority :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellIconOverlayIdentifier < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IShellIconOverlayManagerImpl < > : Sized where { fn GetFileOverlayInfo ( ) ; fn GetReservedOverlayInfo ( ) ; fn RefreshOverlayImages ( ) ; fn LoadNonloadedOverlayIdentifiers ( ) ; fn OverlayIndexFromImageIndex ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IShellIconOverlayManagerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellIconOverlayManagerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellIconOverlayManagerVtbl < > { unsafe extern "system" fn GetFileOverlayInfo < Impl : IShellIconOverlayManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwszpath : super::super::Foundation:: PWSTR , dwattrib : u32 , pindex : * mut i32 , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetReservedOverlayInfo < Impl : IShellIconOverlayManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwszpath : super::super::Foundation:: PWSTR , dwattrib : u32 , pindex : * mut i32 , dwflags : u32 , ireservedid : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RefreshOverlayImages < Impl : IShellIconOverlayManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LoadNonloadedOverlayIdentifiers < Impl : IShellIconOverlayManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OverlayIndexFromImageIndex < Impl : IShellIconOverlayManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , iimage : i32 , piindex : * mut i32 , fadd : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetFileOverlayInfo : GetFileOverlayInfo :: < Impl , IMPL_OFFSET > , GetReservedOverlayInfo : GetReservedOverlayInfo :: < Impl , IMPL_OFFSET > , RefreshOverlayImages : RefreshOverlayImages :: < Impl , IMPL_OFFSET > , LoadNonloadedOverlayIdentifiers : LoadNonloadedOverlayIdentifiers :: < Impl , IMPL_OFFSET > , OverlayIndexFromImageIndex : OverlayIndexFromImageIndex :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellIconOverlayManager < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_System_Com_StructuredStorage" ) ) ] pub trait IShellImageDataImpl < > : Sized where { fn Decode ( ) ; fn Draw ( ) ; fn NextFrame ( ) ; fn NextPage ( ) ; fn PrevPage ( ) ; fn IsTransparent ( ) ; fn IsAnimated ( ) ; fn IsVector ( ) ; fn IsMultipage ( ) ; fn IsEditable ( ) ; fn IsPrintable ( ) ; fn IsDecoded ( ) ; fn GetCurrentPage ( ) ; fn GetPageCount ( ) ; fn SelectPage ( ) ; fn GetSize ( ) ; fn GetRawDataFormat ( ) ; fn GetPixelFormat ( ) ; fn GetDelay ( ) ; fn GetProperties ( ) ; fn Rotate ( ) ; fn Scale ( ) ; fn DiscardEdit ( ) ; fn SetEncoderParams ( ) ; fn DisplayName ( ) ; fn GetResolution ( ) ; fn GetEncoderParams ( ) ; fn RegisterAbort ( ) ; fn CloneFrame ( ) ; fn ReplaceFrame ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_System_Com_StructuredStorage" ) ) ] impl < > IShellImageDataVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellImageDataImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellImageDataVtbl < > { unsafe extern "system" fn Decode < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , cxdesired : u32 , cydesired : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Draw < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hdc : super::super::Graphics::Gdi:: HDC , prcdest : * mut super::super::Foundation:: RECT , prcsrc : * mut super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NextFrame < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NextPage < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrevPage < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsTransparent < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsAnimated < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsVector < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsMultipage < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsEditable < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsPrintable < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsDecoded < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCurrentPage < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnpage : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPageCount < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcpages : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SelectPage < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ipage : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSize < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psize : * mut super::super::Foundation:: SIZE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetRawDataFormat < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdataformat : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPixelFormat < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pformat : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDelay < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwdelay : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProperties < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwmode : u32 , pppropset : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Rotate < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwangle : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Scale < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cx : u32 , cy : u32 , hints : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DiscardEdit < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetEncoderParams < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbagenc : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DisplayName < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , wszname : super::super::Foundation:: PWSTR , cch : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetResolution < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , puresolutionx : * mut u32 , puresolutiony : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEncoderParams < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pguidfmt : * mut :: windows :: core :: GUID , ppencparams : * mut * mut u8 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterAbort < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pabort : :: windows :: core :: RawPtr , ppabortprev : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CloneFrame < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppimg : * mut * mut u8 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReplaceFrame < Impl : IShellImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pimg : * mut u8 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Decode : Decode :: < Impl , IMPL_OFFSET > , Draw : Draw :: < Impl , IMPL_OFFSET > , NextFrame : NextFrame :: < Impl , IMPL_OFFSET > , NextPage : NextPage :: < Impl , IMPL_OFFSET > , PrevPage : PrevPage :: < Impl , IMPL_OFFSET > , IsTransparent : IsTransparent :: < Impl , IMPL_OFFSET > , IsAnimated : IsAnimated :: < Impl , IMPL_OFFSET > , IsVector : IsVector :: < Impl , IMPL_OFFSET > , IsMultipage : IsMultipage :: < Impl , IMPL_OFFSET > , IsEditable : IsEditable :: < Impl , IMPL_OFFSET > , IsPrintable : IsPrintable :: < Impl , IMPL_OFFSET > , IsDecoded : IsDecoded :: < Impl , IMPL_OFFSET > , GetCurrentPage : GetCurrentPage :: < Impl , IMPL_OFFSET > , GetPageCount : GetPageCount :: < Impl , IMPL_OFFSET > , SelectPage : SelectPage :: < Impl , IMPL_OFFSET > , GetSize : GetSize :: < Impl , IMPL_OFFSET > , GetRawDataFormat : GetRawDataFormat :: < Impl , IMPL_OFFSET > , GetPixelFormat : GetPixelFormat :: < Impl , IMPL_OFFSET > , GetDelay : GetDelay :: < Impl , IMPL_OFFSET > , GetProperties : GetProperties :: < Impl , IMPL_OFFSET > , Rotate : Rotate :: < Impl , IMPL_OFFSET > , Scale : Scale :: < Impl , IMPL_OFFSET > , DiscardEdit : DiscardEdit :: < Impl , IMPL_OFFSET > , SetEncoderParams : SetEncoderParams :: < Impl , IMPL_OFFSET > , DisplayName : DisplayName :: < Impl , IMPL_OFFSET > , GetResolution : GetResolution :: < Impl , IMPL_OFFSET > , GetEncoderParams : GetEncoderParams :: < Impl , IMPL_OFFSET > , RegisterAbort : RegisterAbort :: < Impl , IMPL_OFFSET > , CloneFrame : CloneFrame :: < Impl , IMPL_OFFSET > , ReplaceFrame : ReplaceFrame :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellImageData < > as :: windows :: core :: Interface > :: IID } } pub trait IShellImageDataAbortImpl < > : Sized where { fn QueryAbort ( ) ; } impl < > IShellImageDataAbortVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellImageDataAbortImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellImageDataAbortVtbl < > { unsafe extern "system" fn QueryAbort < Impl : IShellImageDataAbortImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , QueryAbort : QueryAbort :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellImageDataAbort < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IShellImageDataFactoryImpl < > : Sized where { fn CreateIShellImageData ( ) ; fn CreateImageFromFile ( ) ; fn CreateImageFromStream ( ) ; fn GetDataFormatFromPath ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IShellImageDataFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellImageDataFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellImageDataFactoryVtbl < > { unsafe extern "system" fn CreateIShellImageData < Impl : IShellImageDataFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppshimg : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateImageFromFile < Impl : IShellImageDataFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszpath : super::super::Foundation:: PWSTR , ppshimg : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateImageFromStream < Impl : IShellImageDataFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstream : :: windows :: core :: RawPtr , ppshimg : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDataFormatFromPath < Impl : IShellImageDataFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszpath : super::super::Foundation:: PWSTR , pdataformat : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateIShellImageData : CreateIShellImageData :: < Impl , IMPL_OFFSET > , CreateImageFromFile : CreateImageFromFile :: < Impl , IMPL_OFFSET > , CreateImageFromStream : CreateImageFromStream :: < Impl , IMPL_OFFSET > , GetDataFormatFromPath : GetDataFormatFromPath :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellImageDataFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IShellItemImpl < > : Sized where { fn BindToHandler ( ) ; fn GetParent ( ) ; fn GetDisplayName ( ) ; fn GetAttributes ( ) ; fn Compare ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IShellItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellItemVtbl < > { unsafe extern "system" fn BindToHandler < Impl : IShellItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbc : :: windows :: core :: RawPtr , bhid : * const :: windows :: core :: GUID , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetParent < Impl : IShellItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsi : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDisplayName < Impl : IShellItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , sigdnname : SIGDN , ppszname : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAttributes < Impl : IShellItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , sfgaomask : u32 , psfgaoattribs : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Compare < Impl : IShellItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , hint : u32 , piorder : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , BindToHandler : BindToHandler :: < Impl , IMPL_OFFSET > , GetParent : GetParent :: < Impl , IMPL_OFFSET > , GetDisplayName : GetDisplayName :: < Impl , IMPL_OFFSET > , GetAttributes : GetAttributes :: < Impl , IMPL_OFFSET > , Compare : Compare :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait IShellItem2Impl < > : Sized + IShellItemImpl where { fn GetPropertyStore ( ) ; fn GetPropertyStoreWithCreateObject ( ) ; fn GetPropertyStoreForKeys ( ) ; fn GetPropertyDescriptionList ( ) ; fn Update ( ) ; fn GetProperty ( ) ; fn GetCLSID ( ) ; fn GetFileTime ( ) ; fn GetInt32 ( ) ; fn GetString ( ) ; fn GetUInt32 ( ) ; fn GetUInt64 ( ) ; fn GetBool ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > IShellItem2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellItem2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellItem2Vtbl < > { unsafe extern "system" fn GetPropertyStore < Impl : IShellItem2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , flags : PropertiesSystem:: GETPROPERTYSTOREFLAGS , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPropertyStoreWithCreateObject < Impl : IShellItem2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , flags : PropertiesSystem:: GETPROPERTYSTOREFLAGS , punkcreateobject : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPropertyStoreForKeys < Impl : IShellItem2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rgkeys : * const PropertiesSystem:: PROPERTYKEY , ckeys : u32 , flags : PropertiesSystem:: GETPROPERTYSTOREFLAGS , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPropertyDescriptionList < Impl : IShellItem2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , keytype : * const PropertiesSystem:: PROPERTYKEY , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Update < Impl : IShellItem2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbc : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProperty < Impl : IShellItem2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , key : * const PropertiesSystem:: PROPERTYKEY , ppropvar : * mut super::super::System::Com::StructuredStorage:: PROPVARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCLSID < Impl : IShellItem2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , key : * const PropertiesSystem:: PROPERTYKEY , pclsid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFileTime < Impl : IShellItem2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , key : * const PropertiesSystem:: PROPERTYKEY , pft : * mut super::super::Foundation:: FILETIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetInt32 < Impl : IShellItem2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , key : * const PropertiesSystem:: PROPERTYKEY , pi : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetString < Impl : IShellItem2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , key : * const PropertiesSystem:: PROPERTYKEY , ppsz : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetUInt32 < Impl : IShellItem2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , key : * const PropertiesSystem:: PROPERTYKEY , pui : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetUInt64 < Impl : IShellItem2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , key : * const PropertiesSystem:: PROPERTYKEY , pull : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBool < Impl : IShellItem2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , key : * const PropertiesSystem:: PROPERTYKEY , pf : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetPropertyStore : GetPropertyStore :: < Impl , IMPL_OFFSET > , GetPropertyStoreWithCreateObject : GetPropertyStoreWithCreateObject :: < Impl , IMPL_OFFSET > , GetPropertyStoreForKeys : GetPropertyStoreForKeys :: < Impl , IMPL_OFFSET > , GetPropertyDescriptionList : GetPropertyDescriptionList :: < Impl , IMPL_OFFSET > , Update : Update :: < Impl , IMPL_OFFSET > , GetProperty : GetProperty :: < Impl , IMPL_OFFSET > , GetCLSID : GetCLSID :: < Impl , IMPL_OFFSET > , GetFileTime : GetFileTime :: < Impl , IMPL_OFFSET > , GetInt32 : GetInt32 :: < Impl , IMPL_OFFSET > , GetString : GetString :: < Impl , IMPL_OFFSET > , GetUInt32 : GetUInt32 :: < Impl , IMPL_OFFSET > , GetUInt64 : GetUInt64 :: < Impl , IMPL_OFFSET > , GetBool : GetBool :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellItem2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait IShellItemArrayImpl < > : Sized where { fn BindToHandler ( ) ; fn GetPropertyStore ( ) ; fn GetPropertyDescriptionList ( ) ; fn GetAttributes ( ) ; fn GetCount ( ) ; fn GetItemAt ( ) ; fn EnumItems ( ) ; } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > IShellItemArrayVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellItemArrayImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellItemArrayVtbl < > { unsafe extern "system" fn BindToHandler < Impl : IShellItemArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbc : :: windows :: core :: RawPtr , bhid : * const :: windows :: core :: GUID , riid : * const :: windows :: core :: GUID , ppvout : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPropertyStore < Impl : IShellItemArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , flags : PropertiesSystem:: GETPROPERTYSTOREFLAGS , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPropertyDescriptionList < Impl : IShellItemArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , keytype : * const PropertiesSystem:: PROPERTYKEY , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAttributes < Impl : IShellItemArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , attribflags : SIATTRIBFLAGS , sfgaomask : u32 , psfgaoattribs : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCount < Impl : IShellItemArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwnumitems : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItemAt < Impl : IShellItemArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwindex : u32 , ppsi : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnumItems < Impl : IShellItemArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenumshellitems : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , BindToHandler : BindToHandler :: < Impl , IMPL_OFFSET > , GetPropertyStore : GetPropertyStore :: < Impl , IMPL_OFFSET > , GetPropertyDescriptionList : GetPropertyDescriptionList :: < Impl , IMPL_OFFSET > , GetAttributes : GetAttributes :: < Impl , IMPL_OFFSET > , GetCount : GetCount :: < Impl , IMPL_OFFSET > , GetItemAt : GetItemAt :: < Impl , IMPL_OFFSET > , EnumItems : EnumItems :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellItemArray < > as :: windows :: core :: Interface > :: IID } } pub trait IShellItemFilterImpl < > : Sized where { fn IncludeItem ( ) ; fn GetEnumFlagsForItem ( ) ; } impl < > IShellItemFilterVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellItemFilterImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellItemFilterVtbl < > { unsafe extern "system" fn IncludeItem < Impl : IShellItemFilterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEnumFlagsForItem < Impl : IShellItemFilterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , pgrfflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , IncludeItem : IncludeItem :: < Impl , IMPL_OFFSET > , GetEnumFlagsForItem : GetEnumFlagsForItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellItemFilter < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait IShellItemImageFactoryImpl < > : Sized where { fn GetImage ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > IShellItemImageFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellItemImageFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellItemImageFactoryVtbl < > { unsafe extern "system" fn GetImage < Impl : IShellItemImageFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , size : super::super::Foundation:: SIZE , flags : SIIGBF , phbm : * mut super::super::Graphics::Gdi:: HBITMAP , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetImage : GetImage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellItemImageFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IShellItemResourcesImpl < > : Sized where { fn GetAttributes ( ) ; fn GetSize ( ) ; fn GetTimes ( ) ; fn SetTimes ( ) ; fn GetResourceDescription ( ) ; fn EnumResources ( ) ; fn SupportsResource ( ) ; fn OpenResource ( ) ; fn CreateResource ( ) ; fn MarkForDelete ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IShellItemResourcesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellItemResourcesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellItemResourcesVtbl < > { unsafe extern "system" fn GetAttributes < Impl : IShellItemResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwattributes : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSize < Impl : IShellItemResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pullsize : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTimes < Impl : IShellItemResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pftcreation : * mut super::super::Foundation:: FILETIME , pftwrite : * mut super::super::Foundation:: FILETIME , pftaccess : * mut super::super::Foundation:: FILETIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTimes < Impl : IShellItemResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pftcreation : * const super::super::Foundation:: FILETIME , pftwrite : * const super::super::Foundation:: FILETIME , pftaccess : * const super::super::Foundation:: FILETIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetResourceDescription < Impl : IShellItemResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcsir : * const SHELL_ITEM_RESOURCE , ppszdescription : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnumResources < Impl : IShellItemResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenumr : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SupportsResource < Impl : IShellItemResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcsir : * const SHELL_ITEM_RESOURCE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenResource < Impl : IShellItemResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcsir : * const SHELL_ITEM_RESOURCE , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateResource < Impl : IShellItemResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcsir : * const SHELL_ITEM_RESOURCE , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MarkForDelete < Impl : IShellItemResourcesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetAttributes : GetAttributes :: < Impl , IMPL_OFFSET > , GetSize : GetSize :: < Impl , IMPL_OFFSET > , GetTimes : GetTimes :: < Impl , IMPL_OFFSET > , SetTimes : SetTimes :: < Impl , IMPL_OFFSET > , GetResourceDescription : GetResourceDescription :: < Impl , IMPL_OFFSET > , EnumResources : EnumResources :: < Impl , IMPL_OFFSET > , SupportsResource : SupportsResource :: < Impl , IMPL_OFFSET > , OpenResource : OpenResource :: < Impl , IMPL_OFFSET > , CreateResource : CreateResource :: < Impl , IMPL_OFFSET > , MarkForDelete : MarkForDelete :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellItemResources < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IShellLibraryImpl < > : Sized where { fn LoadLibraryFromItem ( ) ; fn LoadLibraryFromKnownFolder ( ) ; fn AddFolder ( ) ; fn RemoveFolder ( ) ; fn GetFolders ( ) ; fn ResolveFolder ( ) ; fn GetDefaultSaveFolder ( ) ; fn SetDefaultSaveFolder ( ) ; fn GetOptions ( ) ; fn SetOptions ( ) ; fn GetFolderType ( ) ; fn SetFolderType ( ) ; fn GetIcon ( ) ; fn SetIcon ( ) ; fn Commit ( ) ; fn Save ( ) ; fn SaveInKnownFolder ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IShellLibraryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellLibraryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellLibraryVtbl < > { unsafe extern "system" fn LoadLibraryFromItem < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psilibrary : :: windows :: core :: RawPtr , grfmode : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LoadLibraryFromKnownFolder < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , kfidlibrary : * const :: windows :: core :: GUID , grfmode : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddFolder < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psilocation : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveFolder < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psilocation : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolders < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lff : LIBRARYFOLDERFILTER , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResolveFolder < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psifoldertoresolve : :: windows :: core :: RawPtr , dwtimeout : u32 , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDefaultSaveFolder < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dsft : DEFAULTSAVEFOLDERTYPE , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDefaultSaveFolder < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dsft : DEFAULTSAVEFOLDERTYPE , psi : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetOptions < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plofoptions : * mut LIBRARYOPTIONFLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetOptions < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lofmask : LIBRARYOPTIONFLAGS , lofoptions : LIBRARYOPTIONFLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFolderType < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pftid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFolderType < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ftid : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIcon < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszicon : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetIcon < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszicon : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Commit < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Save < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psifoldertosavein : :: windows :: core :: RawPtr , pszlibraryname : super::super::Foundation:: PWSTR , lsf : LIBRARYSAVEFLAGS , ppsisavedto : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SaveInKnownFolder < Impl : IShellLibraryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , kfidtosavein : * const :: windows :: core :: GUID , pszlibraryname : super::super::Foundation:: PWSTR , lsf : LIBRARYSAVEFLAGS , ppsisavedto : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , LoadLibraryFromItem : LoadLibraryFromItem :: < Impl , IMPL_OFFSET > , LoadLibraryFromKnownFolder : LoadLibraryFromKnownFolder :: < Impl , IMPL_OFFSET > , AddFolder : AddFolder :: < Impl , IMPL_OFFSET > , RemoveFolder : RemoveFolder :: < Impl , IMPL_OFFSET > , GetFolders : GetFolders :: < Impl , IMPL_OFFSET > , ResolveFolder : ResolveFolder :: < Impl , IMPL_OFFSET > , GetDefaultSaveFolder : GetDefaultSaveFolder :: < Impl , IMPL_OFFSET > , SetDefaultSaveFolder : SetDefaultSaveFolder :: < Impl , IMPL_OFFSET > , GetOptions : GetOptions :: < Impl , IMPL_OFFSET > , SetOptions : SetOptions :: < Impl , IMPL_OFFSET > , GetFolderType : GetFolderType :: < Impl , IMPL_OFFSET > , SetFolderType : SetFolderType :: < Impl , IMPL_OFFSET > , GetIcon : GetIcon :: < Impl , IMPL_OFFSET > , SetIcon : SetIcon :: < Impl , IMPL_OFFSET > , Commit : Commit :: < Impl , IMPL_OFFSET > , Save : Save :: < Impl , IMPL_OFFSET > , SaveInKnownFolder : SaveInKnownFolder :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellLibrary < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Storage_FileSystem" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IShellLinkAImpl < > : Sized where { fn GetPath ( ) ; fn GetIDList ( ) ; fn SetIDList ( ) ; fn GetDescription ( ) ; fn SetDescription ( ) ; fn GetWorkingDirectory ( ) ; fn SetWorkingDirectory ( ) ; fn GetArguments ( ) ; fn SetArguments ( ) ; fn GetHotkey ( ) ; fn SetHotkey ( ) ; fn GetShowCmd ( ) ; fn SetShowCmd ( ) ; fn GetIconLocation ( ) ; fn SetIconLocation ( ) ; fn SetRelativePath ( ) ; fn Resolve ( ) ; fn SetPath ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Storage_FileSystem" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IShellLinkAVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellLinkAImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellLinkAVtbl < > { unsafe extern "system" fn GetPath < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszfile : super::super::Foundation:: PSTR , cch : i32 , pfd : * mut super::super::Storage::FileSystem:: WIN32_FIND_DATAA , fflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIDList < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppidl : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetIDList < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDescription < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszname : super::super::Foundation:: PSTR , cch : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDescription < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszname : super::super::Foundation:: PSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetWorkingDirectory < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdir : super::super::Foundation:: PSTR , cch : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetWorkingDirectory < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdir : super::super::Foundation:: PSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetArguments < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszargs : super::super::Foundation:: PSTR , cch : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetArguments < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszargs : super::super::Foundation:: PSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetHotkey < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwhotkey : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetHotkey < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , whotkey : u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetShowCmd < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pishowcmd : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetShowCmd < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ishowcmd : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIconLocation < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psziconpath : super::super::Foundation:: PSTR , cch : i32 , piicon : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetIconLocation < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psziconpath : super::super::Foundation:: PSTR , iicon : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetRelativePath < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszpathrel : super::super::Foundation:: PSTR , dwreserved : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Resolve < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , fflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPath < Impl : IShellLinkAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszfile : super::super::Foundation:: PSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetPath : GetPath :: < Impl , IMPL_OFFSET > , GetIDList : GetIDList :: < Impl , IMPL_OFFSET > , SetIDList : SetIDList :: < Impl , IMPL_OFFSET > , GetDescription : GetDescription :: < Impl , IMPL_OFFSET > , SetDescription : SetDescription :: < Impl , IMPL_OFFSET > , GetWorkingDirectory : GetWorkingDirectory :: < Impl , IMPL_OFFSET > , SetWorkingDirectory : SetWorkingDirectory :: < Impl , IMPL_OFFSET > , GetArguments : GetArguments :: < Impl , IMPL_OFFSET > , SetArguments : SetArguments :: < Impl , IMPL_OFFSET > , GetHotkey : GetHotkey :: < Impl , IMPL_OFFSET > , SetHotkey : SetHotkey :: < Impl , IMPL_OFFSET > , GetShowCmd : GetShowCmd :: < Impl , IMPL_OFFSET > , SetShowCmd : SetShowCmd :: < Impl , IMPL_OFFSET > , GetIconLocation : GetIconLocation :: < Impl , IMPL_OFFSET > , SetIconLocation : SetIconLocation :: < Impl , IMPL_OFFSET > , SetRelativePath : SetRelativePath :: < Impl , IMPL_OFFSET > , Resolve : Resolve :: < Impl , IMPL_OFFSET > , SetPath : SetPath :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellLinkA < > as :: windows :: core :: Interface > :: IID } } pub trait IShellLinkDataListImpl < > : Sized where { fn AddDataBlock ( ) ; fn CopyDataBlock ( ) ; fn RemoveDataBlock ( ) ; fn GetFlags ( ) ; fn SetFlags ( ) ; } impl < > IShellLinkDataListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellLinkDataListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellLinkDataListVtbl < > { unsafe extern "system" fn AddDataBlock < Impl : IShellLinkDataListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdatablock : * const :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CopyDataBlock < Impl : IShellLinkDataListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwsig : u32 , ppdatablock : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveDataBlock < Impl : IShellLinkDataListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwsig : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFlags < Impl : IShellLinkDataListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFlags < Impl : IShellLinkDataListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddDataBlock : AddDataBlock :: < Impl , IMPL_OFFSET > , CopyDataBlock : CopyDataBlock :: < Impl , IMPL_OFFSET > , RemoveDataBlock : RemoveDataBlock :: < Impl , IMPL_OFFSET > , GetFlags : GetFlags :: < Impl , IMPL_OFFSET > , SetFlags : SetFlags :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellLinkDataList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellLinkDualImpl < > : Sized + IDispatchImpl where { fn Path ( ) ; fn SetPath ( ) ; fn Description ( ) ; fn SetDescription ( ) ; fn WorkingDirectory ( ) ; fn SetWorkingDirectory ( ) ; fn Arguments ( ) ; fn SetArguments ( ) ; fn Hotkey ( ) ; fn SetHotkey ( ) ; fn ShowCommand ( ) ; fn SetShowCommand ( ) ; fn Resolve ( ) ; fn GetIconLocation ( ) ; fn SetIconLocation ( ) ; fn Save ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellLinkDualVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellLinkDualImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellLinkDualVtbl < > { unsafe extern "system" fn Path < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbs : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPath < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bs : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Description < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbs : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDescription < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bs : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn WorkingDirectory < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbs : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetWorkingDirectory < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bs : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Arguments < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbs : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetArguments < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bs : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Hotkey < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pihk : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetHotkey < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ihk : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowCommand < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pishowcommand : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetShowCommand < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ishowcommand : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Resolve < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fflags : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIconLocation < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbs : * mut super::super::Foundation:: BSTR , piicon : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetIconLocation < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bs : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , iicon : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Save < Impl : IShellLinkDualImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vwhere : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Path : Path :: < Impl , IMPL_OFFSET > , SetPath : SetPath :: < Impl , IMPL_OFFSET > , Description : Description :: < Impl , IMPL_OFFSET > , SetDescription : SetDescription :: < Impl , IMPL_OFFSET > , WorkingDirectory : WorkingDirectory :: < Impl , IMPL_OFFSET > , SetWorkingDirectory : SetWorkingDirectory :: < Impl , IMPL_OFFSET > , Arguments : Arguments :: < Impl , IMPL_OFFSET > , SetArguments : SetArguments :: < Impl , IMPL_OFFSET > , Hotkey : Hotkey :: < Impl , IMPL_OFFSET > , SetHotkey : SetHotkey :: < Impl , IMPL_OFFSET > , ShowCommand : ShowCommand :: < Impl , IMPL_OFFSET > , SetShowCommand : SetShowCommand :: < Impl , IMPL_OFFSET > , Resolve : Resolve :: < Impl , IMPL_OFFSET > , GetIconLocation : GetIconLocation :: < Impl , IMPL_OFFSET > , SetIconLocation : SetIconLocation :: < Impl , IMPL_OFFSET > , Save : Save :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellLinkDual < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellLinkDual2Impl < > : Sized + IShellLinkDualImpl + IDispatchImpl where { fn Target ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellLinkDual2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellLinkDual2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellLinkDual2Vtbl < > { unsafe extern "system" fn Target < Impl : IShellLinkDual2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppfi : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Target : Target :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellLinkDual2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Storage_FileSystem" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IShellLinkWImpl < > : Sized where { fn GetPath ( ) ; fn GetIDList ( ) ; fn SetIDList ( ) ; fn GetDescription ( ) ; fn SetDescription ( ) ; fn GetWorkingDirectory ( ) ; fn SetWorkingDirectory ( ) ; fn GetArguments ( ) ; fn SetArguments ( ) ; fn GetHotkey ( ) ; fn SetHotkey ( ) ; fn GetShowCmd ( ) ; fn SetShowCmd ( ) ; fn GetIconLocation ( ) ; fn SetIconLocation ( ) ; fn SetRelativePath ( ) ; fn Resolve ( ) ; fn SetPath ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Storage_FileSystem" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IShellLinkWVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellLinkWImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellLinkWVtbl < > { unsafe extern "system" fn GetPath < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszfile : super::super::Foundation:: PWSTR , cch : i32 , pfd : * mut super::super::Storage::FileSystem:: WIN32_FIND_DATAW , fflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIDList < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppidl : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetIDList < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDescription < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszname : super::super::Foundation:: PWSTR , cch : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDescription < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetWorkingDirectory < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdir : super::super::Foundation:: PWSTR , cch : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetWorkingDirectory < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdir : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetArguments < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszargs : super::super::Foundation:: PWSTR , cch : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetArguments < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszargs : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetHotkey < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwhotkey : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetHotkey < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , whotkey : u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetShowCmd < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pishowcmd : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetShowCmd < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ishowcmd : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIconLocation < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psziconpath : super::super::Foundation:: PWSTR , cch : i32 , piicon : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetIconLocation < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psziconpath : super::super::Foundation:: PWSTR , iicon : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetRelativePath < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszpathrel : super::super::Foundation:: PWSTR , dwreserved : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Resolve < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , fflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPath < Impl : IShellLinkWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszfile : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetPath : GetPath :: < Impl , IMPL_OFFSET > , GetIDList : GetIDList :: < Impl , IMPL_OFFSET > , SetIDList : SetIDList :: < Impl , IMPL_OFFSET > , GetDescription : GetDescription :: < Impl , IMPL_OFFSET > , SetDescription : SetDescription :: < Impl , IMPL_OFFSET > , GetWorkingDirectory : GetWorkingDirectory :: < Impl , IMPL_OFFSET > , SetWorkingDirectory : SetWorkingDirectory :: < Impl , IMPL_OFFSET > , GetArguments : GetArguments :: < Impl , IMPL_OFFSET > , SetArguments : SetArguments :: < Impl , IMPL_OFFSET > , GetHotkey : GetHotkey :: < Impl , IMPL_OFFSET > , SetHotkey : SetHotkey :: < Impl , IMPL_OFFSET > , GetShowCmd : GetShowCmd :: < Impl , IMPL_OFFSET > , SetShowCmd : SetShowCmd :: < Impl , IMPL_OFFSET > , GetIconLocation : GetIconLocation :: < Impl , IMPL_OFFSET > , SetIconLocation : SetIconLocation :: < Impl , IMPL_OFFSET > , SetRelativePath : SetRelativePath :: < Impl , IMPL_OFFSET > , Resolve : Resolve :: < Impl , IMPL_OFFSET > , SetPath : SetPath :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellLinkW < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Registry" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IShellMenuImpl < > : Sized where { fn Initialize ( ) ; fn GetMenuInfo ( ) ; fn SetShellFolder ( ) ; fn GetShellFolder ( ) ; fn SetMenu ( ) ; fn GetMenu ( ) ; fn InvalidateItem ( ) ; fn GetState ( ) ; fn SetMenuToolbar ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Registry" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IShellMenuVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellMenuImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellMenuVtbl < > { unsafe extern "system" fn Initialize < Impl : IShellMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psmc : :: windows :: core :: RawPtr , uid : u32 , uidancestor : u32 , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMenuInfo < Impl : IShellMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsmc : * mut :: windows :: core :: RawPtr , puid : * mut u32 , puidancestor : * mut u32 , pdwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetShellFolder < Impl : IShellMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psf : :: windows :: core :: RawPtr , pidlfolder : * const Common:: ITEMIDLIST , hkey : super::super::System::Registry:: HKEY , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetShellFolder < Impl : IShellMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwflags : * mut u32 , ppidl : * mut * mut Common:: ITEMIDLIST , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMenu < Impl : IShellMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hmenu : super::WindowsAndMessaging:: HMENU , hwnd : super::super::Foundation:: HWND , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMenu < Impl : IShellMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phmenu : * mut super::WindowsAndMessaging:: HMENU , phwnd : * mut super::super::Foundation:: HWND , pdwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvalidateItem < Impl : IShellMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psmd : * const SMDATA , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetState < Impl : IShellMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psmd : * mut SMDATA , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMenuToolbar < Impl : IShellMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , GetMenuInfo : GetMenuInfo :: < Impl , IMPL_OFFSET > , SetShellFolder : SetShellFolder :: < Impl , IMPL_OFFSET > , GetShellFolder : GetShellFolder :: < Impl , IMPL_OFFSET > , SetMenu : SetMenu :: < Impl , IMPL_OFFSET > , GetMenu : GetMenu :: < Impl , IMPL_OFFSET > , InvalidateItem : InvalidateItem :: < Impl , IMPL_OFFSET > , GetState : GetState :: < Impl , IMPL_OFFSET > , SetMenuToolbar : SetMenuToolbar :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellMenu < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IShellMenuCallbackImpl < > : Sized where { fn CallbackSM ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IShellMenuCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellMenuCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellMenuCallbackVtbl < > { unsafe extern "system" fn CallbackSM < Impl : IShellMenuCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psmd : * mut SMDATA , umsg : u32 , wparam : super::super::Foundation:: WPARAM , lparam : super::super::Foundation:: LPARAM , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CallbackSM : CallbackSM :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellMenuCallback < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellNameSpaceImpl < > : Sized + IShellFavoritesNameSpaceImpl + IDispatchImpl where { fn EnumOptions ( ) ; fn SetEnumOptions ( ) ; fn SelectedItem ( ) ; fn SetSelectedItem ( ) ; fn Root ( ) ; fn SetRoot ( ) ; fn Depth ( ) ; fn SetDepth ( ) ; fn Mode ( ) ; fn SetMode ( ) ; fn Flags ( ) ; fn SetFlags ( ) ; fn SetTVFlags ( ) ; fn TVFlags ( ) ; fn Columns ( ) ; fn SetColumns ( ) ; fn CountViewTypes ( ) ; fn SetViewType ( ) ; fn SelectedItems ( ) ; fn Expand ( ) ; fn UnselectAll ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellNameSpaceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellNameSpaceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellNameSpaceVtbl < > { unsafe extern "system" fn EnumOptions < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pgrfenumflags : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetEnumOptions < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lval : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SelectedItem < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pitem : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSelectedItem < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pitem : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Root < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvar : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetRoot < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , var : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Depth < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidepth : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDepth < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , idepth : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Mode < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pumode : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMode < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , umode : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Flags < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFlags < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTVFlags < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TVFlags < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Columns < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrcolumns : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetColumns < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrcolumns : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CountViewTypes < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pitypes : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetViewType < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , itype : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SelectedItems < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppid : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Expand < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , var : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , idepth : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnselectAll < Impl : IShellNameSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , EnumOptions : EnumOptions :: < Impl , IMPL_OFFSET > , SetEnumOptions : SetEnumOptions :: < Impl , IMPL_OFFSET > , SelectedItem : SelectedItem :: < Impl , IMPL_OFFSET > , SetSelectedItem : SetSelectedItem :: < Impl , IMPL_OFFSET > , Root : Root :: < Impl , IMPL_OFFSET > , SetRoot : SetRoot :: < Impl , IMPL_OFFSET > , Depth : Depth :: < Impl , IMPL_OFFSET > , SetDepth : SetDepth :: < Impl , IMPL_OFFSET > , Mode : Mode :: < Impl , IMPL_OFFSET > , SetMode : SetMode :: < Impl , IMPL_OFFSET > , Flags : Flags :: < Impl , IMPL_OFFSET > , SetFlags : SetFlags :: < Impl , IMPL_OFFSET > , SetTVFlags : SetTVFlags :: < Impl , IMPL_OFFSET > , TVFlags : TVFlags :: < Impl , IMPL_OFFSET > , Columns : Columns :: < Impl , IMPL_OFFSET > , SetColumns : SetColumns :: < Impl , IMPL_OFFSET > , CountViewTypes : CountViewTypes :: < Impl , IMPL_OFFSET > , SetViewType : SetViewType :: < Impl , IMPL_OFFSET > , SelectedItems : SelectedItems :: < Impl , IMPL_OFFSET > , Expand : Expand :: < Impl , IMPL_OFFSET > , UnselectAll : UnselectAll :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellNameSpace < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Controls" ) ) ] pub trait IShellPropSheetExtImpl < > : Sized where { fn AddPages ( ) ; fn ReplacePage ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Controls" ) ) ] impl < > IShellPropSheetExtVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellPropSheetExtImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellPropSheetExtVtbl < > { unsafe extern "system" fn AddPages < Impl : IShellPropSheetExtImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfnaddpage : :: windows :: core :: RawPtr , lparam : super::super::Foundation:: LPARAM , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReplacePage < Impl : IShellPropSheetExtImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , upageid : u32 , pfnreplacewith : :: windows :: core :: RawPtr , lparam : super::super::Foundation:: LPARAM , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddPages : AddPages :: < Impl , IMPL_OFFSET > , ReplacePage : ReplacePage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellPropSheetExt < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IShellRunDllImpl < > : Sized where { fn Run ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IShellRunDllVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellRunDllImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellRunDllVtbl < > { unsafe extern "system" fn Run < Impl : IShellRunDllImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszargs : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Run : Run :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellRunDll < > as :: windows :: core :: Interface > :: IID } } pub trait IShellServiceImpl < > : Sized where { fn SetOwner ( ) ; } impl < > IShellServiceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellServiceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellServiceVtbl < > { unsafe extern "system" fn SetOwner < Impl : IShellServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkowner : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetOwner : SetOwner :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellService < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IShellTaskSchedulerImpl < > : Sized where { fn AddTask ( ) ; fn RemoveTasks ( ) ; fn CountTasks ( ) ; fn Status ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IShellTaskSchedulerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellTaskSchedulerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellTaskSchedulerVtbl < > { unsafe extern "system" fn AddTask < Impl : IShellTaskSchedulerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prt : :: windows :: core :: RawPtr , rtoid : * const :: windows :: core :: GUID , lparam : usize , dwpriority : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveTasks < Impl : IShellTaskSchedulerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rtoid : * const :: windows :: core :: GUID , lparam : usize , bwaitifrunning : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CountTasks < Impl : IShellTaskSchedulerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rtoid : * const :: windows :: core :: GUID , ) -> u32 { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Status < Impl : IShellTaskSchedulerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwreleasestatus : u32 , dwthreadtimeout : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddTask : AddTask :: < Impl , IMPL_OFFSET > , RemoveTasks : RemoveTasks :: < Impl , IMPL_OFFSET > , CountTasks : CountTasks :: < Impl , IMPL_OFFSET > , Status : Status :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellTaskScheduler < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellUIHelperImpl < > : Sized + IDispatchImpl where { fn ResetFirstBootMode ( ) ; fn ResetSafeMode ( ) ; fn RefreshOfflineDesktop ( ) ; fn AddFavorite ( ) ; fn AddChannel ( ) ; fn AddDesktopComponent ( ) ; fn IsSubscribed ( ) ; fn NavigateAndFind ( ) ; fn ImportExportFavorites ( ) ; fn AutoCompleteSaveForm ( ) ; fn AutoScan ( ) ; fn AutoCompleteAttach ( ) ; fn ShowBrowserUI ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellUIHelperVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellUIHelperImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellUIHelperVtbl < > { unsafe extern "system" fn ResetFirstBootMode < Impl : IShellUIHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResetSafeMode < Impl : IShellUIHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RefreshOfflineDesktop < Impl : IShellUIHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddFavorite < Impl : IShellUIHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , title : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddChannel < Impl : IShellUIHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddDesktopComponent < Impl : IShellUIHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , r#type : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , left : * const super::super::System::Com:: VARIANT , top : * const super::super::System::Com:: VARIANT , width : * const super::super::System::Com:: VARIANT , height : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsSubscribed < Impl : IShellUIHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pbool : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NavigateAndFind < Impl : IShellUIHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , strquery : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , vartargetframe : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ImportExportFavorites < Impl : IShellUIHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fimport : i16 , strimpexppath : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AutoCompleteSaveForm < Impl : IShellUIHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , form : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AutoScan < Impl : IShellUIHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strsearch : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , strfailureurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvartargetframe : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AutoCompleteAttach < Impl : IShellUIHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , reserved : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowBrowserUI < Impl : IShellUIHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvarin : * const super::super::System::Com:: VARIANT , pvarout : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , ResetFirstBootMode : ResetFirstBootMode :: < Impl , IMPL_OFFSET > , ResetSafeMode : ResetSafeMode :: < Impl , IMPL_OFFSET > , RefreshOfflineDesktop : RefreshOfflineDesktop :: < Impl , IMPL_OFFSET > , AddFavorite : AddFavorite :: < Impl , IMPL_OFFSET > , AddChannel : AddChannel :: < Impl , IMPL_OFFSET > , AddDesktopComponent : AddDesktopComponent :: < Impl , IMPL_OFFSET > , IsSubscribed : IsSubscribed :: < Impl , IMPL_OFFSET > , NavigateAndFind : NavigateAndFind :: < Impl , IMPL_OFFSET > , ImportExportFavorites : ImportExportFavorites :: < Impl , IMPL_OFFSET > , AutoCompleteSaveForm : AutoCompleteSaveForm :: < Impl , IMPL_OFFSET > , AutoScan : AutoScan :: < Impl , IMPL_OFFSET > , AutoCompleteAttach : AutoCompleteAttach :: < Impl , IMPL_OFFSET > , ShowBrowserUI : ShowBrowserUI :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellUIHelper < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellUIHelper2Impl < > : Sized + IShellUIHelperImpl + IDispatchImpl where { fn AddSearchProvider ( ) ; fn RunOnceShown ( ) ; fn SkipRunOnce ( ) ; fn CustomizeSettings ( ) ; fn SqmEnabled ( ) ; fn PhishingEnabled ( ) ; fn BrandImageUri ( ) ; fn SkipTabsWelcome ( ) ; fn DiagnoseConnection ( ) ; fn CustomizeClearType ( ) ; fn IsSearchProviderInstalled ( ) ; fn IsSearchMigrated ( ) ; fn DefaultSearchProvider ( ) ; fn RunOnceRequiredSettingsComplete ( ) ; fn RunOnceHasShown ( ) ; fn SearchGuideUrl ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellUIHelper2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellUIHelper2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellUIHelper2Vtbl < > { unsafe extern "system" fn AddSearchProvider < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RunOnceShown < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SkipRunOnce < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CustomizeSettings < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fsqm : i16 , fphishing : i16 , bstrlocale : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SqmEnabled < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfenabled : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PhishingEnabled < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfenabled : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BrandImageUri < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstruri : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SkipTabsWelcome < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DiagnoseConnection < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CustomizeClearType < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fset : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsSearchProviderInstalled < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdwresult : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsSearchMigrated < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfmigrated : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DefaultSearchProvider < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RunOnceRequiredSettingsComplete < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fcomplete : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RunOnceHasShown < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfshown : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SearchGuideUrl < Impl : IShellUIHelper2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrurl : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , AddSearchProvider : AddSearchProvider :: < Impl , IMPL_OFFSET > , RunOnceShown : RunOnceShown :: < Impl , IMPL_OFFSET > , SkipRunOnce : SkipRunOnce :: < Impl , IMPL_OFFSET > , CustomizeSettings : CustomizeSettings :: < Impl , IMPL_OFFSET > , SqmEnabled : SqmEnabled :: < Impl , IMPL_OFFSET > , PhishingEnabled : PhishingEnabled :: < Impl , IMPL_OFFSET > , BrandImageUri : BrandImageUri :: < Impl , IMPL_OFFSET > , SkipTabsWelcome : SkipTabsWelcome :: < Impl , IMPL_OFFSET > , DiagnoseConnection : DiagnoseConnection :: < Impl , IMPL_OFFSET > , CustomizeClearType : CustomizeClearType :: < Impl , IMPL_OFFSET > , IsSearchProviderInstalled : IsSearchProviderInstalled :: < Impl , IMPL_OFFSET > , IsSearchMigrated : IsSearchMigrated :: < Impl , IMPL_OFFSET > , DefaultSearchProvider : DefaultSearchProvider :: < Impl , IMPL_OFFSET > , RunOnceRequiredSettingsComplete : RunOnceRequiredSettingsComplete :: < Impl , IMPL_OFFSET > , RunOnceHasShown : RunOnceHasShown :: < Impl , IMPL_OFFSET > , SearchGuideUrl : SearchGuideUrl :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellUIHelper2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellUIHelper3Impl < > : Sized + IShellUIHelper2Impl + IShellUIHelperImpl + IDispatchImpl where { fn AddService ( ) ; fn IsServiceInstalled ( ) ; fn InPrivateFilteringEnabled ( ) ; fn AddToFavoritesBar ( ) ; fn BuildNewTabPage ( ) ; fn SetRecentlyClosedVisible ( ) ; fn SetActivitiesVisible ( ) ; fn ContentDiscoveryReset ( ) ; fn IsSuggestedSitesEnabled ( ) ; fn EnableSuggestedSites ( ) ; fn NavigateToSuggestedSites ( ) ; fn ShowTabsHelp ( ) ; fn ShowInPrivateHelp ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellUIHelper3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellUIHelper3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellUIHelper3Vtbl < > { unsafe extern "system" fn AddService < Impl : IShellUIHelper3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsServiceInstalled < Impl : IShellUIHelper3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , verb : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdwresult : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InPrivateFilteringEnabled < Impl : IShellUIHelper3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfenabled : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddToFavoritesBar < Impl : IShellUIHelper3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , title : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , r#type : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BuildNewTabPage < Impl : IShellUIHelper3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetRecentlyClosedVisible < Impl : IShellUIHelper3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fvisible : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetActivitiesVisible < Impl : IShellUIHelper3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fvisible : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ContentDiscoveryReset < Impl : IShellUIHelper3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsSuggestedSitesEnabled < Impl : IShellUIHelper3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfenabled : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnableSuggestedSites < Impl : IShellUIHelper3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fenable : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NavigateToSuggestedSites < Impl : IShellUIHelper3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrrelativeurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowTabsHelp < Impl : IShellUIHelper3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowInPrivateHelp < Impl : IShellUIHelper3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , AddService : AddService :: < Impl , IMPL_OFFSET > , IsServiceInstalled : IsServiceInstalled :: < Impl , IMPL_OFFSET > , InPrivateFilteringEnabled : InPrivateFilteringEnabled :: < Impl , IMPL_OFFSET > , AddToFavoritesBar : AddToFavoritesBar :: < Impl , IMPL_OFFSET > , BuildNewTabPage : BuildNewTabPage :: < Impl , IMPL_OFFSET > , SetRecentlyClosedVisible : SetRecentlyClosedVisible :: < Impl , IMPL_OFFSET > , SetActivitiesVisible : SetActivitiesVisible :: < Impl , IMPL_OFFSET > , ContentDiscoveryReset : ContentDiscoveryReset :: < Impl , IMPL_OFFSET > , IsSuggestedSitesEnabled : IsSuggestedSitesEnabled :: < Impl , IMPL_OFFSET > , EnableSuggestedSites : EnableSuggestedSites :: < Impl , IMPL_OFFSET > , NavigateToSuggestedSites : NavigateToSuggestedSites :: < Impl , IMPL_OFFSET > , ShowTabsHelp : ShowTabsHelp :: < Impl , IMPL_OFFSET > , ShowInPrivateHelp : ShowInPrivateHelp :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellUIHelper3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellUIHelper4Impl < > : Sized + IShellUIHelper3Impl + IShellUIHelper2Impl + IShellUIHelperImpl + IDispatchImpl where { fn msIsSiteMode ( ) ; fn msSiteModeShowThumbBar ( ) ; fn msSiteModeAddThumbBarButton ( ) ; fn msSiteModeUpdateThumbBarButton ( ) ; fn msSiteModeSetIconOverlay ( ) ; fn msSiteModeClearIconOverlay ( ) ; fn msAddSiteMode ( ) ; fn msSiteModeCreateJumpList ( ) ; fn msSiteModeAddJumpListItem ( ) ; fn msSiteModeClearJumpList ( ) ; fn msSiteModeShowJumpList ( ) ; fn msSiteModeAddButtonStyle ( ) ; fn msSiteModeShowButtonStyle ( ) ; fn msSiteModeActivate ( ) ; fn msIsSiteModeFirstRun ( ) ; fn msAddTrackingProtectionList ( ) ; fn msTrackingProtectionEnabled ( ) ; fn msActiveXFilteringEnabled ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellUIHelper4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellUIHelper4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellUIHelper4Vtbl < > { unsafe extern "system" fn msIsSiteMode < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfsitemode : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msSiteModeShowThumbBar < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msSiteModeAddThumbBarButton < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstriconurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrtooltip : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvarbuttonid : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msSiteModeUpdateThumbBarButton < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , buttonid : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , fenabled : i16 , fvisible : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msSiteModeSetIconOverlay < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , iconurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvardescription : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msSiteModeClearIconOverlay < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msAddSiteMode < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msSiteModeCreateJumpList < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrheader : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msSiteModeAddJumpListItem < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstractionuri : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstriconuri : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvarwindowtype : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msSiteModeClearJumpList < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msSiteModeShowJumpList < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msSiteModeAddButtonStyle < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uibuttonid : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , bstriconurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrtooltip : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvarstyleid : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msSiteModeShowButtonStyle < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uibuttonid : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , uistyleid : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msSiteModeActivate < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msIsSiteModeFirstRun < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fpreservestate : i16 , puifirstrun : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msAddTrackingProtectionList < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrfiltername : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msTrackingProtectionEnabled < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfenabled : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msActiveXFilteringEnabled < Impl : IShellUIHelper4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfenabled : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , msIsSiteMode : msIsSiteMode :: < Impl , IMPL_OFFSET > , msSiteModeShowThumbBar : msSiteModeShowThumbBar :: < Impl , IMPL_OFFSET > , msSiteModeAddThumbBarButton : msSiteModeAddThumbBarButton :: < Impl , IMPL_OFFSET > , msSiteModeUpdateThumbBarButton : msSiteModeUpdateThumbBarButton :: < Impl , IMPL_OFFSET > , msSiteModeSetIconOverlay : msSiteModeSetIconOverlay :: < Impl , IMPL_OFFSET > , msSiteModeClearIconOverlay : msSiteModeClearIconOverlay :: < Impl , IMPL_OFFSET > , msAddSiteMode : msAddSiteMode :: < Impl , IMPL_OFFSET > , msSiteModeCreateJumpList : msSiteModeCreateJumpList :: < Impl , IMPL_OFFSET > , msSiteModeAddJumpListItem : msSiteModeAddJumpListItem :: < Impl , IMPL_OFFSET > , msSiteModeClearJumpList : msSiteModeClearJumpList :: < Impl , IMPL_OFFSET > , msSiteModeShowJumpList : msSiteModeShowJumpList :: < Impl , IMPL_OFFSET > , msSiteModeAddButtonStyle : msSiteModeAddButtonStyle :: < Impl , IMPL_OFFSET > , msSiteModeShowButtonStyle : msSiteModeShowButtonStyle :: < Impl , IMPL_OFFSET > , msSiteModeActivate : msSiteModeActivate :: < Impl , IMPL_OFFSET > , msIsSiteModeFirstRun : msIsSiteModeFirstRun :: < Impl , IMPL_OFFSET > , msAddTrackingProtectionList : msAddTrackingProtectionList :: < Impl , IMPL_OFFSET > , msTrackingProtectionEnabled : msTrackingProtectionEnabled :: < Impl , IMPL_OFFSET > , msActiveXFilteringEnabled : msActiveXFilteringEnabled :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellUIHelper4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellUIHelper5Impl < > : Sized + IShellUIHelper4Impl + IShellUIHelper3Impl + IShellUIHelper2Impl + IShellUIHelperImpl + IDispatchImpl where { fn msProvisionNetworks ( ) ; fn msReportSafeUrl ( ) ; fn msSiteModeRefreshBadge ( ) ; fn msSiteModeClearBadge ( ) ; fn msDiagnoseConnectionUILess ( ) ; fn msLaunchNetworkClientHelp ( ) ; fn msChangeDefaultBrowser ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellUIHelper5Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellUIHelper5Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellUIHelper5Vtbl < > { unsafe extern "system" fn msProvisionNetworks < Impl : IShellUIHelper5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprovisioningxml : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , puiresult : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msReportSafeUrl < Impl : IShellUIHelper5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msSiteModeRefreshBadge < Impl : IShellUIHelper5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msSiteModeClearBadge < Impl : IShellUIHelper5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msDiagnoseConnectionUILess < Impl : IShellUIHelper5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msLaunchNetworkClientHelp < Impl : IShellUIHelper5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msChangeDefaultBrowser < Impl : IShellUIHelper5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fchange : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , msProvisionNetworks : msProvisionNetworks :: < Impl , IMPL_OFFSET > , msReportSafeUrl : msReportSafeUrl :: < Impl , IMPL_OFFSET > , msSiteModeRefreshBadge : msSiteModeRefreshBadge :: < Impl , IMPL_OFFSET > , msSiteModeClearBadge : msSiteModeClearBadge :: < Impl , IMPL_OFFSET > , msDiagnoseConnectionUILess : msDiagnoseConnectionUILess :: < Impl , IMPL_OFFSET > , msLaunchNetworkClientHelp : msLaunchNetworkClientHelp :: < Impl , IMPL_OFFSET > , msChangeDefaultBrowser : msChangeDefaultBrowser :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellUIHelper5 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellUIHelper6Impl < > : Sized + IShellUIHelper5Impl + IShellUIHelper4Impl + IShellUIHelper3Impl + IShellUIHelper2Impl + IShellUIHelperImpl + IDispatchImpl where { fn msStopPeriodicTileUpdate ( ) ; fn msStartPeriodicTileUpdate ( ) ; fn msStartPeriodicTileUpdateBatch ( ) ; fn msClearTile ( ) ; fn msEnableTileNotificationQueue ( ) ; fn msPinnedSiteState ( ) ; fn msEnableTileNotificationQueueForSquare150x150 ( ) ; fn msEnableTileNotificationQueueForWide310x150 ( ) ; fn msEnableTileNotificationQueueForSquare310x310 ( ) ; fn msScheduledTileNotification ( ) ; fn msRemoveScheduledTileNotification ( ) ; fn msStartPeriodicBadgeUpdate ( ) ; fn msStopPeriodicBadgeUpdate ( ) ; fn msLaunchInternetOptions ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellUIHelper6Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellUIHelper6Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellUIHelper6Vtbl < > { unsafe extern "system" fn msStopPeriodicTileUpdate < Impl : IShellUIHelper6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msStartPeriodicTileUpdate < Impl : IShellUIHelper6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pollinguris : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , starttime : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , uiupdaterecurrence : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msStartPeriodicTileUpdateBatch < Impl : IShellUIHelper6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pollinguris : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , starttime : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , uiupdaterecurrence : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msClearTile < Impl : IShellUIHelper6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msEnableTileNotificationQueue < Impl : IShellUIHelper6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fchange : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msPinnedSiteState < Impl : IShellUIHelper6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarsitestate : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msEnableTileNotificationQueueForSquare150x150 < Impl : IShellUIHelper6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fchange : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msEnableTileNotificationQueueForWide310x150 < Impl : IShellUIHelper6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fchange : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msEnableTileNotificationQueueForSquare310x310 < Impl : IShellUIHelper6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fchange : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msScheduledTileNotification < Impl : IShellUIHelper6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrnotificationxml : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrnotificationid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrnotificationtag : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , starttime : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , expirationtime : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msRemoveScheduledTileNotification < Impl : IShellUIHelper6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrnotificationid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msStartPeriodicBadgeUpdate < Impl : IShellUIHelper6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pollinguri : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , starttime : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , uiupdaterecurrence : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msStopPeriodicBadgeUpdate < Impl : IShellUIHelper6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msLaunchInternetOptions < Impl : IShellUIHelper6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , msStopPeriodicTileUpdate : msStopPeriodicTileUpdate :: < Impl , IMPL_OFFSET > , msStartPeriodicTileUpdate : msStartPeriodicTileUpdate :: < Impl , IMPL_OFFSET > , msStartPeriodicTileUpdateBatch : msStartPeriodicTileUpdateBatch :: < Impl , IMPL_OFFSET > , msClearTile : msClearTile :: < Impl , IMPL_OFFSET > , msEnableTileNotificationQueue : msEnableTileNotificationQueue :: < Impl , IMPL_OFFSET > , msPinnedSiteState : msPinnedSiteState :: < Impl , IMPL_OFFSET > , msEnableTileNotificationQueueForSquare150x150 : msEnableTileNotificationQueueForSquare150x150 :: < Impl , IMPL_OFFSET > , msEnableTileNotificationQueueForWide310x150 : msEnableTileNotificationQueueForWide310x150 :: < Impl , IMPL_OFFSET > , msEnableTileNotificationQueueForSquare310x310 : msEnableTileNotificationQueueForSquare310x310 :: < Impl , IMPL_OFFSET > , msScheduledTileNotification : msScheduledTileNotification :: < Impl , IMPL_OFFSET > , msRemoveScheduledTileNotification : msRemoveScheduledTileNotification :: < Impl , IMPL_OFFSET > , msStartPeriodicBadgeUpdate : msStartPeriodicBadgeUpdate :: < Impl , IMPL_OFFSET > , msStopPeriodicBadgeUpdate : msStopPeriodicBadgeUpdate :: < Impl , IMPL_OFFSET > , msLaunchInternetOptions : msLaunchInternetOptions :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellUIHelper6 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellUIHelper7Impl < > : Sized + IShellUIHelper6Impl + IShellUIHelper5Impl + IShellUIHelper4Impl + IShellUIHelper3Impl + IShellUIHelper2Impl + IShellUIHelperImpl + IDispatchImpl where { fn SetExperimentalFlag ( ) ; fn GetExperimentalFlag ( ) ; fn SetExperimentalValue ( ) ; fn GetExperimentalValue ( ) ; fn ResetAllExperimentalFlagsAndValues ( ) ; fn GetNeedIEAutoLaunchFlag ( ) ; fn SetNeedIEAutoLaunchFlag ( ) ; fn HasNeedIEAutoLaunchFlag ( ) ; fn LaunchIE ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellUIHelper7Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellUIHelper7Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellUIHelper7Vtbl < > { unsafe extern "system" fn SetExperimentalFlag < Impl : IShellUIHelper7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrflagstring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , vfflag : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetExperimentalFlag < Impl : IShellUIHelper7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrflagstring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , vfflag : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetExperimentalValue < Impl : IShellUIHelper7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrvaluestring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , dwvalue : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetExperimentalValue < Impl : IShellUIHelper7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrvaluestring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdwvalue : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResetAllExperimentalFlagsAndValues < Impl : IShellUIHelper7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetNeedIEAutoLaunchFlag < Impl : IShellUIHelper7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , flag : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetNeedIEAutoLaunchFlag < Impl : IShellUIHelper7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , flag : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HasNeedIEAutoLaunchFlag < Impl : IShellUIHelper7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , exists : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LaunchIE < Impl : IShellUIHelper7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , automated : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetExperimentalFlag : SetExperimentalFlag :: < Impl , IMPL_OFFSET > , GetExperimentalFlag : GetExperimentalFlag :: < Impl , IMPL_OFFSET > , SetExperimentalValue : SetExperimentalValue :: < Impl , IMPL_OFFSET > , GetExperimentalValue : GetExperimentalValue :: < Impl , IMPL_OFFSET > , ResetAllExperimentalFlagsAndValues : ResetAllExperimentalFlagsAndValues :: < Impl , IMPL_OFFSET > , GetNeedIEAutoLaunchFlag : GetNeedIEAutoLaunchFlag :: < Impl , IMPL_OFFSET > , SetNeedIEAutoLaunchFlag : SetNeedIEAutoLaunchFlag :: < Impl , IMPL_OFFSET > , HasNeedIEAutoLaunchFlag : HasNeedIEAutoLaunchFlag :: < Impl , IMPL_OFFSET > , LaunchIE : LaunchIE :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellUIHelper7 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellUIHelper8Impl < > : Sized + IShellUIHelper7Impl + IShellUIHelper6Impl + IShellUIHelper5Impl + IShellUIHelper4Impl + IShellUIHelper3Impl + IShellUIHelper2Impl + IShellUIHelperImpl + IDispatchImpl where { fn GetCVListData ( ) ; fn GetCVListLocalData ( ) ; fn GetEMIEListData ( ) ; fn GetEMIEListLocalData ( ) ; fn OpenFavoritesPane ( ) ; fn OpenFavoritesSettings ( ) ; fn LaunchInHVSI ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellUIHelper8Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellUIHelper8Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellUIHelper8Vtbl < > { unsafe extern "system" fn GetCVListData < Impl : IShellUIHelper8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrresult : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCVListLocalData < Impl : IShellUIHelper8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrresult : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEMIEListData < Impl : IShellUIHelper8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrresult : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEMIEListLocalData < Impl : IShellUIHelper8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrresult : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenFavoritesPane < Impl : IShellUIHelper8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenFavoritesSettings < Impl : IShellUIHelper8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LaunchInHVSI < Impl : IShellUIHelper8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetCVListData : GetCVListData :: < Impl , IMPL_OFFSET > , GetCVListLocalData : GetCVListLocalData :: < Impl , IMPL_OFFSET > , GetEMIEListData : GetEMIEListData :: < Impl , IMPL_OFFSET > , GetEMIEListLocalData : GetEMIEListLocalData :: < Impl , IMPL_OFFSET > , OpenFavoritesPane : OpenFavoritesPane :: < Impl , IMPL_OFFSET > , OpenFavoritesSettings : OpenFavoritesSettings :: < Impl , IMPL_OFFSET > , LaunchInHVSI : LaunchInHVSI :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellUIHelper8 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellUIHelper9Impl < > : Sized + IShellUIHelper8Impl + IShellUIHelper7Impl + IShellUIHelper6Impl + IShellUIHelper5Impl + IShellUIHelper4Impl + IShellUIHelper3Impl + IShellUIHelper2Impl + IShellUIHelperImpl + IDispatchImpl where { fn GetOSSku ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellUIHelper9Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellUIHelper9Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellUIHelper9Vtbl < > { unsafe extern "system" fn GetOSSku < Impl : IShellUIHelper9Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwresult : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetOSSku : GetOSSku :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellUIHelper9 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" , feature ="Win32_UI_Controls" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IShellViewImpl < > : Sized + IOleWindowImpl where { fn TranslateAccelerator ( ) ; fn EnableModeless ( ) ; fn UIActivate ( ) ; fn Refresh ( ) ; fn CreateViewWindow ( ) ; fn DestroyViewWindow ( ) ; fn GetCurrentInfo ( ) ; fn AddPropertySheetPages ( ) ; fn SaveViewState ( ) ; fn SelectItem ( ) ; fn GetItemObject ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" , feature ="Win32_UI_Controls" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IShellViewVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellViewImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellViewVtbl < > { unsafe extern "system" fn TranslateAccelerator < Impl : IShellViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmsg : * const super::WindowsAndMessaging:: MSG , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnableModeless < Impl : IShellViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fenable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UIActivate < Impl : IShellViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ustate : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : IShellViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateViewWindow < Impl : IShellViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psvprevious : :: windows :: core :: RawPtr , pfs : * const FOLDERSETTINGS , psb : :: windows :: core :: RawPtr , prcview : * const super::super::Foundation:: RECT , phwnd : * mut super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DestroyViewWindow < Impl : IShellViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCurrentInfo < Impl : IShellViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfs : * mut FOLDERSETTINGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPropertySheetPages < Impl : IShellViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwreserved : u32 , pfn : :: windows :: core :: RawPtr , lparam : super::super::Foundation:: LPARAM , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SaveViewState < Impl : IShellViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SelectItem < Impl : IShellViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidlitem : * const Common:: ITEMIDLIST , uflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItemObject < Impl : IShellViewImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uitem : u32 , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , TranslateAccelerator : TranslateAccelerator :: < Impl , IMPL_OFFSET > , EnableModeless : EnableModeless :: < Impl , IMPL_OFFSET > , UIActivate : UIActivate :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , CreateViewWindow : CreateViewWindow :: < Impl , IMPL_OFFSET > , DestroyViewWindow : DestroyViewWindow :: < Impl , IMPL_OFFSET > , GetCurrentInfo : GetCurrentInfo :: < Impl , IMPL_OFFSET > , AddPropertySheetPages : AddPropertySheetPages :: < Impl , IMPL_OFFSET > , SaveViewState : SaveViewState :: < Impl , IMPL_OFFSET > , SelectItem : SelectItem :: < Impl , IMPL_OFFSET > , GetItemObject : GetItemObject :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellView < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" , feature ="Win32_UI_Controls" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IShellView2Impl < > : Sized + IShellViewImpl + IOleWindowImpl where { fn GetView ( ) ; fn CreateViewWindow2 ( ) ; fn HandleRename ( ) ; fn SelectAndPositionItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" , feature ="Win32_UI_Controls" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IShellView2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellView2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellView2Vtbl < > { unsafe extern "system" fn GetView < Impl : IShellView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvid : * mut :: windows :: core :: GUID , uview : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateViewWindow2 < Impl : IShellView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpparams : * const SV2CVW2_PARAMS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HandleRename < Impl : IShellView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidlnew : * const Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SelectAndPositionItem < Impl : IShellView2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidlitem : * const Common:: ITEMIDLIST , uflags : u32 , ppt : * const super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetView : GetView :: < Impl , IMPL_OFFSET > , CreateViewWindow2 : CreateViewWindow2 :: < Impl , IMPL_OFFSET > , HandleRename : HandleRename :: < Impl , IMPL_OFFSET > , SelectAndPositionItem : SelectAndPositionItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellView2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" , feature ="Win32_UI_Controls" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IShellView3Impl < > : Sized + IShellView2Impl + IShellViewImpl + IOleWindowImpl where { fn CreateViewWindow3 ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" , feature ="Win32_UI_Controls" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IShellView3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellView3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellView3Vtbl < > { unsafe extern "system" fn CreateViewWindow3 < Impl : IShellView3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psbowner : :: windows :: core :: RawPtr , psvprev : :: windows :: core :: RawPtr , dwviewflags : u32 , dwmask : FOLDERFLAGS , dwflags : FOLDERFLAGS , fvmode : FOLDERVIEWMODE , pvid : * const :: windows :: core :: GUID , prcview : * const super::super::Foundation:: RECT , phwndview : * mut super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CreateViewWindow3 : CreateViewWindow3 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellView3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IShellWindowsImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn Item ( ) ; fn _NewEnum ( ) ; fn Register ( ) ; fn RegisterPending ( ) ; fn Revoke ( ) ; fn OnNavigate ( ) ; fn OnActivated ( ) ; fn FindWindowSW ( ) ; fn OnCreated ( ) ; fn ProcessAttachDetach ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IShellWindowsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IShellWindowsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IShellWindowsVtbl < > { unsafe extern "system" fn Count < Impl : IShellWindowsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , count : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : IShellWindowsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , folder : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : IShellWindowsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppunk : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Register < Impl : IShellWindowsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pid : :: windows :: core :: RawPtr , hwnd : i32 , swclass : i32 , plcookie : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterPending < Impl : IShellWindowsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lthreadid : i32 , pvarloc : * const super::super::System::Com:: VARIANT , pvarlocroot : * const super::super::System::Com:: VARIANT , swclass : i32 , plcookie : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Revoke < Impl : IShellWindowsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lcookie : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnNavigate < Impl : IShellWindowsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lcookie : i32 , pvarloc : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnActivated < Impl : IShellWindowsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lcookie : i32 , factive : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindWindowSW < Impl : IShellWindowsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarloc : * const super::super::System::Com:: VARIANT , pvarlocroot : * const super::super::System::Com:: VARIANT , swclass : i32 , phwnd : * mut i32 , swfwoptions : i32 , ppdispout : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnCreated < Impl : IShellWindowsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lcookie : i32 , punk : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ProcessAttachDetach < Impl : IShellWindowsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fattach : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Register : Register :: < Impl , IMPL_OFFSET > , RegisterPending : RegisterPending :: < Impl , IMPL_OFFSET > , Revoke : Revoke :: < Impl , IMPL_OFFSET > , OnNavigate : OnNavigate :: < Impl , IMPL_OFFSET > , OnActivated : OnActivated :: < Impl , IMPL_OFFSET > , FindWindowSW : FindWindowSW :: < Impl , IMPL_OFFSET > , OnCreated : OnCreated :: < Impl , IMPL_OFFSET > , ProcessAttachDetach : ProcessAttachDetach :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IShellWindows < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_PropertiesSystem" ) ] pub trait ISortColumnArrayImpl < > : Sized where { fn GetCount ( ) ; fn GetAt ( ) ; fn GetSortType ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_PropertiesSystem" ) ] impl < > ISortColumnArrayVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISortColumnArrayImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISortColumnArrayVtbl < > { unsafe extern "system" fn GetCount < Impl : ISortColumnArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , columncount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAt < Impl : ISortColumnArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : u32 , sortcolumn : * mut SORTCOLUMN , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSortType < Impl : ISortColumnArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , r#type : * mut SORT_ORDER_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetCount : GetCount :: < Impl , IMPL_OFFSET > , GetAt : GetAt :: < Impl , IMPL_OFFSET > , GetSortType : GetSortType :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISortColumnArray < > as :: windows :: core :: Interface > :: IID } } pub trait IStartMenuPinnedListImpl < > : Sized where { fn RemoveFromList ( ) ; } impl < > IStartMenuPinnedListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IStartMenuPinnedListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IStartMenuPinnedListVtbl < > { unsafe extern "system" fn RemoveFromList < Impl : IStartMenuPinnedListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pitem : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , RemoveFromList : RemoveFromList :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IStartMenuPinnedList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IStorageProviderBannersImpl < > : Sized where { fn SetBanner ( ) ; fn ClearBanner ( ) ; fn ClearAllBanners ( ) ; fn GetBanner ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IStorageProviderBannersVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IStorageProviderBannersImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IStorageProviderBannersVtbl < > { unsafe extern "system" fn SetBanner < Impl : IStorageProviderBannersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , provideridentity : super::super::Foundation:: PWSTR , subscriptionid : super::super::Foundation:: PWSTR , contentid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ClearBanner < Impl : IStorageProviderBannersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , provideridentity : super::super::Foundation:: PWSTR , subscriptionid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ClearAllBanners < Impl : IStorageProviderBannersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , provideridentity : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBanner < Impl : IStorageProviderBannersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , provideridentity : super::super::Foundation:: PWSTR , subscriptionid : super::super::Foundation:: PWSTR , contentid : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetBanner : SetBanner :: < Impl , IMPL_OFFSET > , ClearBanner : ClearBanner :: < Impl , IMPL_OFFSET > , ClearAllBanners : ClearAllBanners :: < Impl , IMPL_OFFSET > , GetBanner : GetBanner :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IStorageProviderBanners < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IStorageProviderCopyHookImpl < > : Sized where { fn CopyCallback ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IStorageProviderCopyHookVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IStorageProviderCopyHookImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IStorageProviderCopyHookVtbl < > { unsafe extern "system" fn CopyCallback < Impl : IStorageProviderCopyHookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , operation : u32 , flags : u32 , srcfile : super::super::Foundation:: PWSTR , srcattribs : u32 , destfile : super::super::Foundation:: PWSTR , destattribs : u32 , result : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CopyCallback : CopyCallback :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IStorageProviderCopyHook < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IStorageProviderHandlerImpl < > : Sized where { fn GetPropertyHandlerFromPath ( ) ; fn GetPropertyHandlerFromUri ( ) ; fn GetPropertyHandlerFromFileId ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IStorageProviderHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IStorageProviderHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IStorageProviderHandlerVtbl < > { unsafe extern "system" fn GetPropertyHandlerFromPath < Impl : IStorageProviderHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , path : super::super::Foundation:: PWSTR , propertyhandler : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPropertyHandlerFromUri < Impl : IStorageProviderHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uri : super::super::Foundation:: PWSTR , propertyhandler : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPropertyHandlerFromFileId < Impl : IStorageProviderHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fileid : super::super::Foundation:: PWSTR , propertyhandler : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetPropertyHandlerFromPath : GetPropertyHandlerFromPath :: < Impl , IMPL_OFFSET > , GetPropertyHandlerFromUri : GetPropertyHandlerFromUri :: < Impl , IMPL_OFFSET > , GetPropertyHandlerFromFileId : GetPropertyHandlerFromFileId :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IStorageProviderHandler < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_PropertiesSystem" ) ] pub trait IStorageProviderPropertyHandlerImpl < > : Sized where { fn RetrieveProperties ( ) ; fn SaveProperties ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_PropertiesSystem" ) ] impl < > IStorageProviderPropertyHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IStorageProviderPropertyHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IStorageProviderPropertyHandlerVtbl < > { unsafe extern "system" fn RetrieveProperties < Impl : IStorageProviderPropertyHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propertiestoretrieve : * const PropertiesSystem:: PROPERTYKEY , propertiestoretrievecount : u32 , retrievedproperties : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SaveProperties < Impl : IStorageProviderPropertyHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propertiestosave : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , RetrieveProperties : RetrieveProperties :: < Impl , IMPL_OFFSET > , SaveProperties : SaveProperties :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IStorageProviderPropertyHandler < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" , feature ="Win32_System_IO" ) ) ] pub trait IStreamAsyncImpl < > : Sized + IStreamImpl + ISequentialStreamImpl where { fn ReadAsync ( ) ; fn WriteAsync ( ) ; fn OverlappedResult ( ) ; fn CancelIo ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" , feature ="Win32_System_IO" ) ) ] impl < > IStreamAsyncVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IStreamAsyncImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IStreamAsyncVtbl < > { unsafe extern "system" fn ReadAsync < Impl : IStreamAsyncImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pv : * mut :: core :: ffi :: c_void , cb : u32 , pcbread : * mut u32 , lpoverlapped : * const super::super::System::IO:: OVERLAPPED , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn WriteAsync < Impl : IStreamAsyncImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpbuffer : * const :: core :: ffi :: c_void , cb : u32 , pcbwritten : * mut u32 , lpoverlapped : * const super::super::System::IO:: OVERLAPPED , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OverlappedResult < Impl : IStreamAsyncImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpoverlapped : * const super::super::System::IO:: OVERLAPPED , lpnumberofbytestransferred : * mut u32 , bwait : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CancelIo < Impl : IStreamAsyncImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , ReadAsync : ReadAsync :: < Impl , IMPL_OFFSET > , WriteAsync : WriteAsync :: < Impl , IMPL_OFFSET > , OverlappedResult : OverlappedResult :: < Impl , IMPL_OFFSET > , CancelIo : CancelIo :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IStreamAsync < > as :: windows :: core :: Interface > :: IID } } pub trait IStreamUnbufferedInfoImpl < > : Sized where { fn GetSectorSize ( ) ; } impl < > IStreamUnbufferedInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IStreamUnbufferedInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IStreamUnbufferedInfoVtbl < > { unsafe extern "system" fn GetSectorSize < Impl : IStreamUnbufferedInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcbsectorsize : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetSectorSize : GetSectorSize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IStreamUnbufferedInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISuspensionDependencyManagerImpl < > : Sized where { fn RegisterAsChild ( ) ; fn GroupChildWithParent ( ) ; fn UngroupChildFromParent ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISuspensionDependencyManagerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISuspensionDependencyManagerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISuspensionDependencyManagerVtbl < > { unsafe extern "system" fn RegisterAsChild < Impl : ISuspensionDependencyManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , processhandle : super::super::Foundation:: HANDLE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GroupChildWithParent < Impl : ISuspensionDependencyManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , childprocesshandle : super::super::Foundation:: HANDLE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UngroupChildFromParent < Impl : ISuspensionDependencyManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , childprocesshandle : super::super::Foundation:: HANDLE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , RegisterAsChild : RegisterAsChild :: < Impl , IMPL_OFFSET > , GroupChildWithParent : GroupChildWithParent :: < Impl , IMPL_OFFSET > , UngroupChildFromParent : UngroupChildFromParent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISuspensionDependencyManager < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait ISyncMgrConflictImpl < > : Sized where { fn GetProperty ( ) ; fn GetConflictIdInfo ( ) ; fn GetItemsArray ( ) ; fn Resolve ( ) ; fn GetResolutionHandler ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > ISyncMgrConflictVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrConflictImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrConflictVtbl < > { unsafe extern "system" fn GetProperty < Impl : ISyncMgrConflictImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propkey : * const PropertiesSystem:: PROPERTYKEY , ppropvar : * mut super::super::System::Com::StructuredStorage:: PROPVARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetConflictIdInfo < Impl : ISyncMgrConflictImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pconflictidinfo : * mut SYNCMGR_CONFLICT_ID_INFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItemsArray < Impl : ISyncMgrConflictImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pparray : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Resolve < Impl : ISyncMgrConflictImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presolveinfo : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetResolutionHandler < Impl : ISyncMgrConflictImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppvresolutionhandler : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetProperty : GetProperty :: < Impl , IMPL_OFFSET > , GetConflictIdInfo : GetConflictIdInfo :: < Impl , IMPL_OFFSET > , GetItemsArray : GetItemsArray :: < Impl , IMPL_OFFSET > , Resolve : Resolve :: < Impl , IMPL_OFFSET > , GetResolutionHandler : GetResolutionHandler :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrConflict < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait ISyncMgrConflictFolderImpl < > : Sized where { fn GetConflictIDList ( ) ; } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > ISyncMgrConflictFolderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrConflictFolderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrConflictFolderVtbl < > { unsafe extern "system" fn GetConflictIDList < Impl : ISyncMgrConflictFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pconflict : :: windows :: core :: RawPtr , ppidlconflict : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetConflictIDList : GetConflictIDList :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrConflictFolder < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrConflictItemsImpl < > : Sized where { fn GetCount ( ) ; fn GetItem ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrConflictItemsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrConflictItemsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrConflictItemsVtbl < > { unsafe extern "system" fn GetCount < Impl : ISyncMgrConflictItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItem < Impl : ISyncMgrConflictItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , iindex : u32 , piteminfo : * mut CONFIRM_CONFLICT_ITEM , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetCount : GetCount :: < Impl , IMPL_OFFSET > , GetItem : GetItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrConflictItems < > as :: windows :: core :: Interface > :: IID } } pub trait ISyncMgrConflictPresenterImpl < > : Sized where { fn PresentConflict ( ) ; } impl < > ISyncMgrConflictPresenterVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrConflictPresenterImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrConflictPresenterVtbl < > { unsafe extern "system" fn PresentConflict < Impl : ISyncMgrConflictPresenterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pconflict : :: windows :: core :: RawPtr , presolveinfo : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , PresentConflict : PresentConflict :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrConflictPresenter < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrConflictResolutionItemsImpl < > : Sized where { fn GetCount ( ) ; fn GetItem ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrConflictResolutionItemsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrConflictResolutionItemsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrConflictResolutionItemsVtbl < > { unsafe extern "system" fn GetCount < Impl : ISyncMgrConflictResolutionItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItem < Impl : ISyncMgrConflictResolutionItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , iindex : u32 , piteminfo : * mut CONFIRM_CONFLICT_RESULT_INFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetCount : GetCount :: < Impl , IMPL_OFFSET > , GetItem : GetItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrConflictResolutionItems < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrConflictResolveInfoImpl < > : Sized where { fn GetIterationInfo ( ) ; fn GetPresenterNextStep ( ) ; fn GetPresenterChoice ( ) ; fn GetItemChoiceCount ( ) ; fn GetItemChoice ( ) ; fn SetPresenterNextStep ( ) ; fn SetPresenterChoice ( ) ; fn SetItemChoices ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrConflictResolveInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrConflictResolveInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrConflictResolveInfoVtbl < > { unsafe extern "system" fn GetIterationInfo < Impl : ISyncMgrConflictResolveInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pncurrentconflict : * mut u32 , pcconflicts : * mut u32 , pcremainingforapplytoall : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPresenterNextStep < Impl : ISyncMgrConflictResolveInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnpresenternextstep : * mut SYNCMGR_PRESENTER_NEXT_STEP , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPresenterChoice < Impl : ISyncMgrConflictResolveInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnpresenterchoice : * mut SYNCMGR_PRESENTER_CHOICE , pfapplytoall : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItemChoiceCount < Impl : ISyncMgrConflictResolveInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcchoices : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItemChoice < Impl : ISyncMgrConflictResolveInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ichoice : u32 , pichoiceindex : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPresenterNextStep < Impl : ISyncMgrConflictResolveInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , npresenternextstep : SYNCMGR_PRESENTER_NEXT_STEP , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPresenterChoice < Impl : ISyncMgrConflictResolveInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , npresenterchoice : SYNCMGR_PRESENTER_CHOICE , fapplytoall : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetItemChoices < Impl : ISyncMgrConflictResolveInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prgiconflictitemindexes : * mut u32 , cchoices : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetIterationInfo : GetIterationInfo :: < Impl , IMPL_OFFSET > , GetPresenterNextStep : GetPresenterNextStep :: < Impl , IMPL_OFFSET > , GetPresenterChoice : GetPresenterChoice :: < Impl , IMPL_OFFSET > , GetItemChoiceCount : GetItemChoiceCount :: < Impl , IMPL_OFFSET > , GetItemChoice : GetItemChoice :: < Impl , IMPL_OFFSET > , SetPresenterNextStep : SetPresenterNextStep :: < Impl , IMPL_OFFSET > , SetPresenterChoice : SetPresenterChoice :: < Impl , IMPL_OFFSET > , SetItemChoices : SetItemChoices :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrConflictResolveInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait ISyncMgrConflictStoreImpl < > : Sized where { fn EnumConflicts ( ) ; fn BindToConflict ( ) ; fn RemoveConflicts ( ) ; fn GetCount ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > ISyncMgrConflictStoreVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrConflictStoreImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrConflictStoreVtbl < > { unsafe extern "system" fn EnumConflicts < Impl : ISyncMgrConflictStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszhandlerid : super::super::Foundation:: PWSTR , pszitemid : super::super::Foundation:: PWSTR , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BindToConflict < Impl : ISyncMgrConflictStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pconflictidinfo : * const SYNCMGR_CONFLICT_ID_INFO , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveConflicts < Impl : ISyncMgrConflictStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rgconflictidinfo : * const SYNCMGR_CONFLICT_ID_INFO , cconflicts : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCount < Impl : ISyncMgrConflictStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszhandlerid : super::super::Foundation:: PWSTR , pszitemid : super::super::Foundation:: PWSTR , pnconflicts : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , EnumConflicts : EnumConflicts :: < Impl , IMPL_OFFSET > , BindToConflict : BindToConflict :: < Impl , IMPL_OFFSET > , RemoveConflicts : RemoveConflicts :: < Impl , IMPL_OFFSET > , GetCount : GetCount :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrConflictStore < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrControlImpl < > : Sized where { fn StartHandlerSync ( ) ; fn StartItemSync ( ) ; fn StartSyncAll ( ) ; fn StopHandlerSync ( ) ; fn StopItemSync ( ) ; fn StopSyncAll ( ) ; fn UpdateHandlerCollection ( ) ; fn UpdateHandler ( ) ; fn UpdateItem ( ) ; fn UpdateEvents ( ) ; fn UpdateConflict ( ) ; fn UpdateConflicts ( ) ; fn ActivateHandler ( ) ; fn EnableHandler ( ) ; fn EnableItem ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrControlVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrControlImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrControlVtbl < > { unsafe extern "system" fn StartHandlerSync < Impl : ISyncMgrControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszhandlerid : super::super::Foundation:: PWSTR , hwndowner : super::super::Foundation:: HWND , punk : * mut :: core :: ffi :: c_void , nsynccontrolflags : SYNCMGR_SYNC_CONTROL_FLAGS , presult : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StartItemSync < Impl : ISyncMgrControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszhandlerid : super::super::Foundation:: PWSTR , ppszitemids : * const super::super::Foundation:: PWSTR , citems : u32 , hwndowner : super::super::Foundation:: HWND , punk : * mut :: core :: ffi :: c_void , nsynccontrolflags : SYNCMGR_SYNC_CONTROL_FLAGS , presult : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StartSyncAll < Impl : ISyncMgrControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndowner : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StopHandlerSync < Impl : ISyncMgrControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszhandlerid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StopItemSync < Impl : ISyncMgrControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszhandlerid : super::super::Foundation:: PWSTR , ppszitemids : * const super::super::Foundation:: PWSTR , citems : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StopSyncAll < Impl : ISyncMgrControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateHandlerCollection < Impl : ISyncMgrControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rclsidcollectionid : * const :: windows :: core :: GUID , ncontrolflags : SYNCMGR_CONTROL_FLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateHandler < Impl : ISyncMgrControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszhandlerid : super::super::Foundation:: PWSTR , ncontrolflags : SYNCMGR_CONTROL_FLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateItem < Impl : ISyncMgrControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszhandlerid : super::super::Foundation:: PWSTR , pszitemid : super::super::Foundation:: PWSTR , ncontrolflags : SYNCMGR_CONTROL_FLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateEvents < Impl : ISyncMgrControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszhandlerid : super::super::Foundation:: PWSTR , pszitemid : super::super::Foundation:: PWSTR , ncontrolflags : SYNCMGR_CONTROL_FLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateConflict < Impl : ISyncMgrControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszhandlerid : super::super::Foundation:: PWSTR , pszitemid : super::super::Foundation:: PWSTR , pconflict : :: windows :: core :: RawPtr , nreason : SYNCMGR_UPDATE_REASON , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateConflicts < Impl : ISyncMgrControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszhandlerid : super::super::Foundation:: PWSTR , pszitemid : super::super::Foundation:: PWSTR , ncontrolflags : SYNCMGR_CONTROL_FLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ActivateHandler < Impl : ISyncMgrControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , factivate : super::super::Foundation:: BOOL , pszhandlerid : super::super::Foundation:: PWSTR , hwndowner : super::super::Foundation:: HWND , ncontrolflags : SYNCMGR_CONTROL_FLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnableHandler < Impl : ISyncMgrControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fenable : super::super::Foundation:: BOOL , pszhandlerid : super::super::Foundation:: PWSTR , hwndowner : super::super::Foundation:: HWND , ncontrolflags : SYNCMGR_CONTROL_FLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnableItem < Impl : ISyncMgrControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fenable : super::super::Foundation:: BOOL , pszhandlerid : super::super::Foundation:: PWSTR , pszitemid : super::super::Foundation:: PWSTR , hwndowner : super::super::Foundation:: HWND , ncontrolflags : SYNCMGR_CONTROL_FLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , StartHandlerSync : StartHandlerSync :: < Impl , IMPL_OFFSET > , StartItemSync : StartItemSync :: < Impl , IMPL_OFFSET > , StartSyncAll : StartSyncAll :: < Impl , IMPL_OFFSET > , StopHandlerSync : StopHandlerSync :: < Impl , IMPL_OFFSET > , StopItemSync : StopItemSync :: < Impl , IMPL_OFFSET > , StopSyncAll : StopSyncAll :: < Impl , IMPL_OFFSET > , UpdateHandlerCollection : UpdateHandlerCollection :: < Impl , IMPL_OFFSET > , UpdateHandler : UpdateHandler :: < Impl , IMPL_OFFSET > , UpdateItem : UpdateItem :: < Impl , IMPL_OFFSET > , UpdateEvents : UpdateEvents :: < Impl , IMPL_OFFSET > , UpdateConflict : UpdateConflict :: < Impl , IMPL_OFFSET > , UpdateConflicts : UpdateConflicts :: < Impl , IMPL_OFFSET > , ActivateHandler : ActivateHandler :: < Impl , IMPL_OFFSET > , EnableHandler : EnableHandler :: < Impl , IMPL_OFFSET > , EnableItem : EnableItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrControl < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait ISyncMgrEnumItemsImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > ISyncMgrEnumItemsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrEnumItemsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrEnumItemsVtbl < > { unsafe extern "system" fn Next < Impl : ISyncMgrEnumItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , rgelt : * mut SYNCMGRITEM , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : ISyncMgrEnumItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : ISyncMgrEnumItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : ISyncMgrEnumItemsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrEnumItems < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrEventImpl < > : Sized where { fn GetEventID ( ) ; fn GetHandlerID ( ) ; fn GetItemID ( ) ; fn GetLevel ( ) ; fn GetFlags ( ) ; fn GetTime ( ) ; fn GetName ( ) ; fn GetDescription ( ) ; fn GetLinkText ( ) ; fn GetLinkReference ( ) ; fn GetContext ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrEventVtbl < > { unsafe extern "system" fn GetEventID < Impl : ISyncMgrEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pguideventid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetHandlerID < Impl : ISyncMgrEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszhandlerid : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItemID < Impl : ISyncMgrEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszitemid : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLevel < Impl : ISyncMgrEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnlevel : * mut SYNCMGR_EVENT_LEVEL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFlags < Impl : ISyncMgrEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnflags : * mut SYNCMGR_EVENT_FLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTime < Impl : ISyncMgrEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfcreationtime : * mut super::super::Foundation:: FILETIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetName < Impl : ISyncMgrEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszname : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDescription < Impl : ISyncMgrEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszdescription : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLinkText < Impl : ISyncMgrEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszlinktext : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLinkReference < Impl : ISyncMgrEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszlinkreference : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetContext < Impl : ISyncMgrEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszcontext : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetEventID : GetEventID :: < Impl , IMPL_OFFSET > , GetHandlerID : GetHandlerID :: < Impl , IMPL_OFFSET > , GetItemID : GetItemID :: < Impl , IMPL_OFFSET > , GetLevel : GetLevel :: < Impl , IMPL_OFFSET > , GetFlags : GetFlags :: < Impl , IMPL_OFFSET > , GetTime : GetTime :: < Impl , IMPL_OFFSET > , GetName : GetName :: < Impl , IMPL_OFFSET > , GetDescription : GetDescription :: < Impl , IMPL_OFFSET > , GetLinkText : GetLinkText :: < Impl , IMPL_OFFSET > , GetLinkReference : GetLinkReference :: < Impl , IMPL_OFFSET > , GetContext : GetContext :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrEventLinkUIOperationImpl < > : Sized + ISyncMgrUIOperationImpl where { fn Init ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrEventLinkUIOperationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrEventLinkUIOperationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrEventLinkUIOperationVtbl < > { unsafe extern "system" fn Init < Impl : ISyncMgrEventLinkUIOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rguideventid : * const :: windows :: core :: GUID , pevent : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Init : Init :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrEventLinkUIOperation < > as :: windows :: core :: Interface > :: IID } } pub trait ISyncMgrEventStoreImpl < > : Sized where { fn GetEventEnumerator ( ) ; fn GetEventCount ( ) ; fn GetEvent ( ) ; fn RemoveEvent ( ) ; } impl < > ISyncMgrEventStoreVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrEventStoreImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrEventStoreVtbl < > { unsafe extern "system" fn GetEventEnumerator < Impl : ISyncMgrEventStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEventCount < Impl : ISyncMgrEventStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcevents : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEvent < Impl : ISyncMgrEventStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rguideventid : * const :: windows :: core :: GUID , ppevent : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveEvent < Impl : ISyncMgrEventStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pguideventids : * const :: windows :: core :: GUID , cevents : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetEventEnumerator : GetEventEnumerator :: < Impl , IMPL_OFFSET > , GetEventCount : GetEventCount :: < Impl , IMPL_OFFSET > , GetEvent : GetEvent :: < Impl , IMPL_OFFSET > , RemoveEvent : RemoveEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrEventStore < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrHandlerImpl < > : Sized where { fn GetName ( ) ; fn GetHandlerInfo ( ) ; fn GetObject ( ) ; fn GetCapabilities ( ) ; fn GetPolicies ( ) ; fn Activate ( ) ; fn Enable ( ) ; fn Synchronize ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrHandlerVtbl < > { unsafe extern "system" fn GetName < Impl : ISyncMgrHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszname : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetHandlerInfo < Impl : ISyncMgrHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pphandlerinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetObject < Impl : ISyncMgrHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rguidobjectid : * const :: windows :: core :: GUID , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCapabilities < Impl : ISyncMgrHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmcapabilities : * mut SYNCMGR_HANDLER_CAPABILITIES , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPolicies < Impl : ISyncMgrHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmpolicies : * mut SYNCMGR_HANDLER_POLICIES , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Activate < Impl : ISyncMgrHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , factivate : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Enable < Impl : ISyncMgrHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fenable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Synchronize < Impl : ISyncMgrHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszitemids : * const super::super::Foundation:: PWSTR , citems : u32 , hwndowner : super::super::Foundation:: HWND , psessioncreator : :: windows :: core :: RawPtr , punk : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetName : GetName :: < Impl , IMPL_OFFSET > , GetHandlerInfo : GetHandlerInfo :: < Impl , IMPL_OFFSET > , GetObject : GetObject :: < Impl , IMPL_OFFSET > , GetCapabilities : GetCapabilities :: < Impl , IMPL_OFFSET > , GetPolicies : GetPolicies :: < Impl , IMPL_OFFSET > , Activate : Activate :: < Impl , IMPL_OFFSET > , Enable : Enable :: < Impl , IMPL_OFFSET > , Synchronize : Synchronize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrHandler < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait ISyncMgrHandlerCollectionImpl < > : Sized where { fn GetHandlerEnumerator ( ) ; fn BindToHandler ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > ISyncMgrHandlerCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrHandlerCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrHandlerCollectionVtbl < > { unsafe extern "system" fn GetHandlerEnumerator < Impl : ISyncMgrHandlerCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BindToHandler < Impl : ISyncMgrHandlerCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszhandlerid : super::super::Foundation:: PWSTR , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetHandlerEnumerator : GetHandlerEnumerator :: < Impl , IMPL_OFFSET > , BindToHandler : BindToHandler :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrHandlerCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrHandlerInfoImpl < > : Sized where { fn GetType ( ) ; fn GetTypeLabel ( ) ; fn GetComment ( ) ; fn GetLastSyncTime ( ) ; fn IsActive ( ) ; fn IsEnabled ( ) ; fn IsConnected ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrHandlerInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrHandlerInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrHandlerInfoVtbl < > { unsafe extern "system" fn GetType < Impl : ISyncMgrHandlerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pntype : * mut SYNCMGR_HANDLER_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTypeLabel < Impl : ISyncMgrHandlerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsztypelabel : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetComment < Impl : ISyncMgrHandlerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszcomment : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLastSyncTime < Impl : ISyncMgrHandlerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pftlastsync : * mut super::super::Foundation:: FILETIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsActive < Impl : ISyncMgrHandlerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsEnabled < Impl : ISyncMgrHandlerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsConnected < Impl : ISyncMgrHandlerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetType : GetType :: < Impl , IMPL_OFFSET > , GetTypeLabel : GetTypeLabel :: < Impl , IMPL_OFFSET > , GetComment : GetComment :: < Impl , IMPL_OFFSET > , GetLastSyncTime : GetLastSyncTime :: < Impl , IMPL_OFFSET > , IsActive : IsActive :: < Impl , IMPL_OFFSET > , IsEnabled : IsEnabled :: < Impl , IMPL_OFFSET > , IsConnected : IsConnected :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrHandlerInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrRegisterImpl < > : Sized where { fn RegisterSyncMgrHandler ( ) ; fn UnregisterSyncMgrHandler ( ) ; fn GetHandlerRegistrationInfo ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrRegisterVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrRegisterImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrRegisterVtbl < > { unsafe extern "system" fn RegisterSyncMgrHandler < Impl : ISyncMgrRegisterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , clsidhandler : * const :: windows :: core :: GUID , pwszdescription : super::super::Foundation:: PWSTR , dwsyncmgrregisterflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnregisterSyncMgrHandler < Impl : ISyncMgrRegisterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , clsidhandler : * const :: windows :: core :: GUID , dwreserved : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetHandlerRegistrationInfo < Impl : ISyncMgrRegisterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , clsidhandler : * const :: windows :: core :: GUID , pdwsyncmgrregisterflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , RegisterSyncMgrHandler : RegisterSyncMgrHandler :: < Impl , IMPL_OFFSET > , UnregisterSyncMgrHandler : UnregisterSyncMgrHandler :: < Impl , IMPL_OFFSET > , GetHandlerRegistrationInfo : GetHandlerRegistrationInfo :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrRegister < > as :: windows :: core :: Interface > :: IID } } pub trait ISyncMgrResolutionHandlerImpl < > : Sized where { fn QueryAbilities ( ) ; fn KeepOther ( ) ; fn KeepRecent ( ) ; fn RemoveFromSyncSet ( ) ; fn KeepItems ( ) ; } impl < > ISyncMgrResolutionHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrResolutionHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrResolutionHandlerVtbl < > { unsafe extern "system" fn QueryAbilities < Impl : ISyncMgrResolutionHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwabilities : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn KeepOther < Impl : ISyncMgrResolutionHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psiother : :: windows :: core :: RawPtr , pfeedback : * mut SYNCMGR_RESOLUTION_FEEDBACK , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn KeepRecent < Impl : ISyncMgrResolutionHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfeedback : * mut SYNCMGR_RESOLUTION_FEEDBACK , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveFromSyncSet < Impl : ISyncMgrResolutionHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfeedback : * mut SYNCMGR_RESOLUTION_FEEDBACK , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn KeepItems < Impl : ISyncMgrResolutionHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , parray : :: windows :: core :: RawPtr , pfeedback : * mut SYNCMGR_RESOLUTION_FEEDBACK , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , QueryAbilities : QueryAbilities :: < Impl , IMPL_OFFSET > , KeepOther : KeepOther :: < Impl , IMPL_OFFSET > , KeepRecent : KeepRecent :: < Impl , IMPL_OFFSET > , RemoveFromSyncSet : RemoveFromSyncSet :: < Impl , IMPL_OFFSET > , KeepItems : KeepItems :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrResolutionHandler < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrScheduleWizardUIOperationImpl < > : Sized + ISyncMgrUIOperationImpl where { fn InitWizard ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrScheduleWizardUIOperationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrScheduleWizardUIOperationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrScheduleWizardUIOperationVtbl < > { unsafe extern "system" fn InitWizard < Impl : ISyncMgrScheduleWizardUIOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszhandlerid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , InitWizard : InitWizard :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrScheduleWizardUIOperation < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrSessionCreatorImpl < > : Sized where { fn CreateSession ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrSessionCreatorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrSessionCreatorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrSessionCreatorVtbl < > { unsafe extern "system" fn CreateSession < Impl : ISyncMgrSessionCreatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszhandlerid : super::super::Foundation:: PWSTR , ppszitemids : * const super::super::Foundation:: PWSTR , citems : u32 , ppcallback : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateSession : CreateSession :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrSessionCreator < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait ISyncMgrSyncCallbackImpl < > : Sized where { fn ReportProgress ( ) ; fn SetHandlerProgressText ( ) ; fn ReportEvent ( ) ; fn CanContinue ( ) ; fn QueryForAdditionalItems ( ) ; fn AddItemToSession ( ) ; fn AddIUnknownToSession ( ) ; fn ProposeItem ( ) ; fn CommitItem ( ) ; fn ReportManualSync ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > ISyncMgrSyncCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrSyncCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrSyncCallbackVtbl < > { unsafe extern "system" fn ReportProgress < Impl : ISyncMgrSyncCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszitemid : super::super::Foundation:: PWSTR , pszprogresstext : super::super::Foundation:: PWSTR , nstatus : SYNCMGR_PROGRESS_STATUS , ucurrentstep : u32 , umaxstep : u32 , pncancelrequest : * mut SYNCMGR_CANCEL_REQUEST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetHandlerProgressText < Impl : ISyncMgrSyncCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszprogresstext : super::super::Foundation:: PWSTR , pncancelrequest : * mut SYNCMGR_CANCEL_REQUEST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReportEvent < Impl : ISyncMgrSyncCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszitemid : super::super::Foundation:: PWSTR , nlevel : SYNCMGR_EVENT_LEVEL , nflags : SYNCMGR_EVENT_FLAGS , pszname : super::super::Foundation:: PWSTR , pszdescription : super::super::Foundation:: PWSTR , pszlinktext : super::super::Foundation:: PWSTR , pszlinkreference : super::super::Foundation:: PWSTR , pszcontext : super::super::Foundation:: PWSTR , pguideventid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CanContinue < Impl : ISyncMgrSyncCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszitemid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryForAdditionalItems < Impl : ISyncMgrSyncCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenumitemids : * mut :: windows :: core :: RawPtr , ppenumpunks : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddItemToSession < Impl : ISyncMgrSyncCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszitemid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddIUnknownToSession < Impl : ISyncMgrSyncCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ProposeItem < Impl : ISyncMgrSyncCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnewitem : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CommitItem < Impl : ISyncMgrSyncCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszitemid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReportManualSync < Impl : ISyncMgrSyncCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ReportProgress : ReportProgress :: < Impl , IMPL_OFFSET > , SetHandlerProgressText : SetHandlerProgressText :: < Impl , IMPL_OFFSET > , ReportEvent : ReportEvent :: < Impl , IMPL_OFFSET > , CanContinue : CanContinue :: < Impl , IMPL_OFFSET > , QueryForAdditionalItems : QueryForAdditionalItems :: < Impl , IMPL_OFFSET > , AddItemToSession : AddItemToSession :: < Impl , IMPL_OFFSET > , AddIUnknownToSession : AddIUnknownToSession :: < Impl , IMPL_OFFSET > , ProposeItem : ProposeItem :: < Impl , IMPL_OFFSET > , CommitItem : CommitItem :: < Impl , IMPL_OFFSET > , ReportManualSync : ReportManualSync :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrSyncCallback < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrSyncItemImpl < > : Sized where { fn GetItemID ( ) ; fn GetName ( ) ; fn GetItemInfo ( ) ; fn GetObject ( ) ; fn GetCapabilities ( ) ; fn GetPolicies ( ) ; fn Enable ( ) ; fn Delete ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrSyncItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrSyncItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrSyncItemVtbl < > { unsafe extern "system" fn GetItemID < Impl : ISyncMgrSyncItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszitemid : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetName < Impl : ISyncMgrSyncItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszname : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItemInfo < Impl : ISyncMgrSyncItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppiteminfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetObject < Impl : ISyncMgrSyncItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rguidobjectid : * const :: windows :: core :: GUID , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCapabilities < Impl : ISyncMgrSyncItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmcapabilities : * mut SYNCMGR_ITEM_CAPABILITIES , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPolicies < Impl : ISyncMgrSyncItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmpolicies : * mut SYNCMGR_ITEM_POLICIES , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Enable < Impl : ISyncMgrSyncItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fenable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Delete < Impl : ISyncMgrSyncItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetItemID : GetItemID :: < Impl , IMPL_OFFSET > , GetName : GetName :: < Impl , IMPL_OFFSET > , GetItemInfo : GetItemInfo :: < Impl , IMPL_OFFSET > , GetObject : GetObject :: < Impl , IMPL_OFFSET > , GetCapabilities : GetCapabilities :: < Impl , IMPL_OFFSET > , GetPolicies : GetPolicies :: < Impl , IMPL_OFFSET > , Enable : Enable :: < Impl , IMPL_OFFSET > , Delete : Delete :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrSyncItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrSyncItemContainerImpl < > : Sized where { fn GetSyncItem ( ) ; fn GetSyncItemEnumerator ( ) ; fn GetSyncItemCount ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrSyncItemContainerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrSyncItemContainerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrSyncItemContainerVtbl < > { unsafe extern "system" fn GetSyncItem < Impl : ISyncMgrSyncItemContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszitemid : super::super::Foundation:: PWSTR , ppitem : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSyncItemEnumerator < Impl : ISyncMgrSyncItemContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSyncItemCount < Impl : ISyncMgrSyncItemContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcitems : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetSyncItem : GetSyncItem :: < Impl , IMPL_OFFSET > , GetSyncItemEnumerator : GetSyncItemEnumerator :: < Impl , IMPL_OFFSET > , GetSyncItemCount : GetSyncItemCount :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrSyncItemContainer < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrSyncItemInfoImpl < > : Sized where { fn GetTypeLabel ( ) ; fn GetComment ( ) ; fn GetLastSyncTime ( ) ; fn IsEnabled ( ) ; fn IsConnected ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrSyncItemInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrSyncItemInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrSyncItemInfoVtbl < > { unsafe extern "system" fn GetTypeLabel < Impl : ISyncMgrSyncItemInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsztypelabel : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetComment < Impl : ISyncMgrSyncItemInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszcomment : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLastSyncTime < Impl : ISyncMgrSyncItemInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pftlastsync : * mut super::super::Foundation:: FILETIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsEnabled < Impl : ISyncMgrSyncItemInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsConnected < Impl : ISyncMgrSyncItemInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetTypeLabel : GetTypeLabel :: < Impl , IMPL_OFFSET > , GetComment : GetComment :: < Impl , IMPL_OFFSET > , GetLastSyncTime : GetLastSyncTime :: < Impl , IMPL_OFFSET > , IsEnabled : IsEnabled :: < Impl , IMPL_OFFSET > , IsConnected : IsConnected :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrSyncItemInfo < > as :: windows :: core :: Interface > :: IID } } pub trait ISyncMgrSyncResultImpl < > : Sized where { fn Result ( ) ; } impl < > ISyncMgrSyncResultVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrSyncResultImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrSyncResultVtbl < > { unsafe extern "system" fn Result < Impl : ISyncMgrSyncResultImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , nstatus : SYNCMGR_PROGRESS_STATUS , cerror : u32 , cconflicts : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Result : Result :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrSyncResult < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait ISyncMgrSynchronizeImpl < > : Sized where { fn Initialize ( ) ; fn GetHandlerInfo ( ) ; fn EnumSyncMgrItems ( ) ; fn GetItemObject ( ) ; fn ShowProperties ( ) ; fn SetProgressCallback ( ) ; fn PrepareForSync ( ) ; fn Synchronize ( ) ; fn SetItemStatus ( ) ; fn ShowError ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > ISyncMgrSynchronizeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrSynchronizeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrSynchronizeVtbl < > { unsafe extern "system" fn Initialize < Impl : ISyncMgrSynchronizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwreserved : u32 , dwsyncmgrflags : u32 , cbcookie : u32 , lpcookie : * const u8 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetHandlerInfo < Impl : ISyncMgrSynchronizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsyncmgrhandlerinfo : * mut * mut SYNCMGRHANDLERINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnumSyncMgrItems < Impl : ISyncMgrSynchronizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsyncmgrenumitems : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItemObject < Impl : ISyncMgrSynchronizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , itemid : * const :: windows :: core :: GUID , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowProperties < Impl : ISyncMgrSynchronizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndparent : super::super::Foundation:: HWND , itemid : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProgressCallback < Impl : ISyncMgrSynchronizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpcallback : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrepareForSync < Impl : ISyncMgrSynchronizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbnumitems : u32 , pitemids : * const :: windows :: core :: GUID , hwndparent : super::super::Foundation:: HWND , dwreserved : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Synchronize < Impl : ISyncMgrSynchronizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndparent : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetItemStatus < Impl : ISyncMgrSynchronizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pitemid : * const :: windows :: core :: GUID , dwsyncmgrstatus : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowError < Impl : ISyncMgrSynchronizeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndparent : super::super::Foundation:: HWND , errorid : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , GetHandlerInfo : GetHandlerInfo :: < Impl , IMPL_OFFSET > , EnumSyncMgrItems : EnumSyncMgrItems :: < Impl , IMPL_OFFSET > , GetItemObject : GetItemObject :: < Impl , IMPL_OFFSET > , ShowProperties : ShowProperties :: < Impl , IMPL_OFFSET > , SetProgressCallback : SetProgressCallback :: < Impl , IMPL_OFFSET > , PrepareForSync : PrepareForSync :: < Impl , IMPL_OFFSET > , Synchronize : Synchronize :: < Impl , IMPL_OFFSET > , SetItemStatus : SetItemStatus :: < Impl , IMPL_OFFSET > , ShowError : ShowError :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrSynchronize < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrSynchronizeCallbackImpl < > : Sized where { fn ShowPropertiesCompleted ( ) ; fn PrepareForSyncCompleted ( ) ; fn SynchronizeCompleted ( ) ; fn ShowErrorCompleted ( ) ; fn EnableModeless ( ) ; fn Progress ( ) ; fn LogError ( ) ; fn DeleteLogError ( ) ; fn EstablishConnection ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrSynchronizeCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrSynchronizeCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrSynchronizeCallbackVtbl < > { unsafe extern "system" fn ShowPropertiesCompleted < Impl : ISyncMgrSynchronizeCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hr : :: windows :: core :: HRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrepareForSyncCompleted < Impl : ISyncMgrSynchronizeCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hr : :: windows :: core :: HRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SynchronizeCompleted < Impl : ISyncMgrSynchronizeCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hr : :: windows :: core :: HRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowErrorCompleted < Impl : ISyncMgrSynchronizeCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hr : :: windows :: core :: HRESULT , citems : u32 , pitemids : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnableModeless < Impl : ISyncMgrSynchronizeCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fenable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Progress < Impl : ISyncMgrSynchronizeCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , itemid : * const :: windows :: core :: GUID , psyncprogressitem : * const SYNCMGRPROGRESSITEM , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LogError < Impl : ISyncMgrSynchronizeCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwerrorlevel : u32 , pszerrortext : super::super::Foundation:: PWSTR , psynclogerror : * const SYNCMGRLOGERRORINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteLogError < Impl : ISyncMgrSynchronizeCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , errorid : * const :: windows :: core :: GUID , dwreserved : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EstablishConnection < Impl : ISyncMgrSynchronizeCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwszconnection : super::super::Foundation:: PWSTR , dwreserved : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ShowPropertiesCompleted : ShowPropertiesCompleted :: < Impl , IMPL_OFFSET > , PrepareForSyncCompleted : PrepareForSyncCompleted :: < Impl , IMPL_OFFSET > , SynchronizeCompleted : SynchronizeCompleted :: < Impl , IMPL_OFFSET > , ShowErrorCompleted : ShowErrorCompleted :: < Impl , IMPL_OFFSET > , EnableModeless : EnableModeless :: < Impl , IMPL_OFFSET > , Progress : Progress :: < Impl , IMPL_OFFSET > , LogError : LogError :: < Impl , IMPL_OFFSET > , DeleteLogError : DeleteLogError :: < Impl , IMPL_OFFSET > , EstablishConnection : EstablishConnection :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrSynchronizeCallback < > as :: windows :: core :: Interface > :: IID } } pub trait ISyncMgrSynchronizeInvokeImpl < > : Sized where { fn UpdateItems ( ) ; fn UpdateAll ( ) ; } impl < > ISyncMgrSynchronizeInvokeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrSynchronizeInvokeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrSynchronizeInvokeVtbl < > { unsafe extern "system" fn UpdateItems < Impl : ISyncMgrSynchronizeInvokeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwinvokeflags : u32 , clsid : * const :: windows :: core :: GUID , cbcookie : u32 , pcookie : * const u8 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateAll < Impl : ISyncMgrSynchronizeInvokeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , UpdateItems : UpdateItems :: < Impl , IMPL_OFFSET > , UpdateAll : UpdateAll :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrSynchronizeInvoke < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISyncMgrUIOperationImpl < > : Sized where { fn Run ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISyncMgrUIOperationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISyncMgrUIOperationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISyncMgrUIOperationVtbl < > { unsafe extern "system" fn Run < Impl : ISyncMgrUIOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndowner : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Run : Run :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISyncMgrUIOperation < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ITaskbarListImpl < > : Sized where { fn HrInit ( ) ; fn AddTab ( ) ; fn DeleteTab ( ) ; fn ActivateTab ( ) ; fn SetActiveAlt ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ITaskbarListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITaskbarListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITaskbarListVtbl < > { unsafe extern "system" fn HrInit < Impl : ITaskbarListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddTab < Impl : ITaskbarListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteTab < Impl : ITaskbarListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ActivateTab < Impl : ITaskbarListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetActiveAlt < Impl : ITaskbarListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , HrInit : HrInit :: < Impl , IMPL_OFFSET > , AddTab : AddTab :: < Impl , IMPL_OFFSET > , DeleteTab : DeleteTab :: < Impl , IMPL_OFFSET > , ActivateTab : ActivateTab :: < Impl , IMPL_OFFSET > , SetActiveAlt : SetActiveAlt :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITaskbarList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ITaskbarList2Impl < > : Sized + ITaskbarListImpl where { fn MarkFullscreenWindow ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ITaskbarList2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITaskbarList2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITaskbarList2Vtbl < > { unsafe extern "system" fn MarkFullscreenWindow < Impl : ITaskbarList2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , ffullscreen : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , MarkFullscreenWindow : MarkFullscreenWindow :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITaskbarList2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Controls" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait ITaskbarList3Impl < > : Sized + ITaskbarList2Impl + ITaskbarListImpl where { fn SetProgressValue ( ) ; fn SetProgressState ( ) ; fn RegisterTab ( ) ; fn UnregisterTab ( ) ; fn SetTabOrder ( ) ; fn SetTabActive ( ) ; fn ThumbBarAddButtons ( ) ; fn ThumbBarUpdateButtons ( ) ; fn ThumbBarSetImageList ( ) ; fn SetOverlayIcon ( ) ; fn SetThumbnailTooltip ( ) ; fn SetThumbnailClip ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Controls" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > ITaskbarList3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITaskbarList3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITaskbarList3Vtbl < > { unsafe extern "system" fn SetProgressValue < Impl : ITaskbarList3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , ullcompleted : u64 , ulltotal : u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProgressState < Impl : ITaskbarList3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , tbpflags : TBPFLAG , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterTab < Impl : ITaskbarList3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndtab : super::super::Foundation:: HWND , hwndmdi : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnregisterTab < Impl : ITaskbarList3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndtab : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTabOrder < Impl : ITaskbarList3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndtab : super::super::Foundation:: HWND , hwndinsertbefore : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTabActive < Impl : ITaskbarList3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndtab : super::super::Foundation:: HWND , hwndmdi : super::super::Foundation:: HWND , dwreserved : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ThumbBarAddButtons < Impl : ITaskbarList3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , cbuttons : u32 , pbutton : * const THUMBBUTTON , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ThumbBarUpdateButtons < Impl : ITaskbarList3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , cbuttons : u32 , pbutton : * const THUMBBUTTON , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ThumbBarSetImageList < Impl : ITaskbarList3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , himl : super::Controls:: HIMAGELIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetOverlayIcon < Impl : ITaskbarList3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , hicon : super::WindowsAndMessaging:: HICON , pszdescription : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetThumbnailTooltip < Impl : ITaskbarList3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , psztip : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetThumbnailClip < Impl : ITaskbarList3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , prcclip : * const super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetProgressValue : SetProgressValue :: < Impl , IMPL_OFFSET > , SetProgressState : SetProgressState :: < Impl , IMPL_OFFSET > , RegisterTab : RegisterTab :: < Impl , IMPL_OFFSET > , UnregisterTab : UnregisterTab :: < Impl , IMPL_OFFSET > , SetTabOrder : SetTabOrder :: < Impl , IMPL_OFFSET > , SetTabActive : SetTabActive :: < Impl , IMPL_OFFSET > , ThumbBarAddButtons : ThumbBarAddButtons :: < Impl , IMPL_OFFSET > , ThumbBarUpdateButtons : ThumbBarUpdateButtons :: < Impl , IMPL_OFFSET > , ThumbBarSetImageList : ThumbBarSetImageList :: < Impl , IMPL_OFFSET > , SetOverlayIcon : SetOverlayIcon :: < Impl , IMPL_OFFSET > , SetThumbnailTooltip : SetThumbnailTooltip :: < Impl , IMPL_OFFSET > , SetThumbnailClip : SetThumbnailClip :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITaskbarList3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Controls" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait ITaskbarList4Impl < > : Sized + ITaskbarList3Impl + ITaskbarList2Impl + ITaskbarListImpl where { fn SetTabProperties ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Controls" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > ITaskbarList4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITaskbarList4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITaskbarList4Vtbl < > { unsafe extern "system" fn SetTabProperties < Impl : ITaskbarList4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndtab : super::super::Foundation:: HWND , stpflags : STPFLAG , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetTabProperties : SetTabProperties :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITaskbarList4 < > as :: windows :: core :: Interface > :: IID } } pub trait IThumbnailCacheImpl < > : Sized where { fn GetThumbnail ( ) ; fn GetThumbnailByID ( ) ; } impl < > IThumbnailCacheVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IThumbnailCacheImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IThumbnailCacheVtbl < > { unsafe extern "system" fn GetThumbnail < Impl : IThumbnailCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pshellitem : :: windows :: core :: RawPtr , cxyrequestedthumbsize : u32 , flags : WTS_FLAGS , ppvthumb : * mut :: windows :: core :: RawPtr , poutflags : * mut WTS_CACHEFLAGS , pthumbnailid : * mut WTS_THUMBNAILID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetThumbnailByID < Impl : IThumbnailCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , thumbnailid : WTS_THUMBNAILID , cxyrequestedthumbsize : u32 , ppvthumb : * mut :: windows :: core :: RawPtr , poutflags : * mut WTS_CACHEFLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetThumbnail : GetThumbnail :: < Impl , IMPL_OFFSET > , GetThumbnailByID : GetThumbnailByID :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IThumbnailCache < > as :: windows :: core :: Interface > :: IID } } pub trait IThumbnailCachePrimerImpl < > : Sized where { fn PageInThumbnail ( ) ; } impl < > IThumbnailCachePrimerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IThumbnailCachePrimerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IThumbnailCachePrimerVtbl < > { unsafe extern "system" fn PageInThumbnail < Impl : IThumbnailCachePrimerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , wtsflags : WTS_FLAGS , cxyrequestedthumbsize : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , PageInThumbnail : PageInThumbnail :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IThumbnailCachePrimer < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait IThumbnailCaptureImpl < > : Sized where { fn CaptureThumbnail ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > IThumbnailCaptureVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IThumbnailCaptureImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IThumbnailCaptureVtbl < > { unsafe extern "system" fn CaptureThumbnail < Impl : IThumbnailCaptureImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmaxsize : * const super::super::Foundation:: SIZE , phtmldoc2 : * mut :: core :: ffi :: c_void , phbmthumbnail : * mut super::super::Graphics::Gdi:: HBITMAP , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CaptureThumbnail : CaptureThumbnail :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IThumbnailCapture < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IThumbnailHandlerFactoryImpl < > : Sized where { fn GetThumbnailHandler ( ) ; } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IThumbnailHandlerFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IThumbnailHandlerFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IThumbnailHandlerFactoryVtbl < > { unsafe extern "system" fn GetThumbnailHandler < Impl : IThumbnailHandlerFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidlchild : * const Common:: ITEMIDLIST , pbc : :: windows :: core :: RawPtr , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetThumbnailHandler : GetThumbnailHandler :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IThumbnailHandlerFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Graphics_Gdi" ) ] pub trait IThumbnailProviderImpl < > : Sized where { fn GetThumbnail ( ) ; } # [ cfg ( feature ="Win32_Graphics_Gdi" ) ] impl < > IThumbnailProviderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IThumbnailProviderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IThumbnailProviderVtbl < > { unsafe extern "system" fn GetThumbnail < Impl : IThumbnailProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cx : u32 , phbmp : * mut super::super::Graphics::Gdi:: HBITMAP , pdwalpha : * mut WTS_ALPHATYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetThumbnail : GetThumbnail :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IThumbnailProvider < > as :: windows :: core :: Interface > :: IID } } pub trait IThumbnailSettingsImpl < > : Sized where { fn SetContext ( ) ; } impl < > IThumbnailSettingsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IThumbnailSettingsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IThumbnailSettingsVtbl < > { unsafe extern "system" fn SetContext < Impl : IThumbnailSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcontext : WTS_CONTEXTFLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetContext : SetContext :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IThumbnailSettings < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IThumbnailStreamCacheImpl < > : Sized where { fn GetThumbnailStream ( ) ; fn SetThumbnailStream ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IThumbnailStreamCacheVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IThumbnailStreamCacheImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IThumbnailStreamCacheVtbl < > { unsafe extern "system" fn GetThumbnailStream < Impl : IThumbnailStreamCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , path : super::super::Foundation:: PWSTR , cacheid : u64 , options : ThumbnailStreamCacheOptions , requestedthumbnailsize : u32 , thumbnailsize : * mut super::super::Foundation:: SIZE , thumbnailstream : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetThumbnailStream < Impl : IThumbnailStreamCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , path : super::super::Foundation:: PWSTR , cacheid : u64 , thumbnailsize : super::super::Foundation:: SIZE , thumbnailstream : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetThumbnailStream : GetThumbnailStream :: < Impl , IMPL_OFFSET > , SetThumbnailStream : SetThumbnailStream :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IThumbnailStreamCache < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Registry" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait ITrackShellMenuImpl < > : Sized + IShellMenuImpl where { fn SetObscured ( ) ; fn Popup ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Registry" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > ITrackShellMenuVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITrackShellMenuImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITrackShellMenuVtbl < > { unsafe extern "system" fn SetObscured < Impl : ITrackShellMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndtb : super::super::Foundation:: HWND , punkband : * mut :: core :: ffi :: c_void , dwsmsetflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Popup < Impl : ITrackShellMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , ppt : * mut super::super::Foundation:: POINTL , prcexclude : * mut super::super::Foundation:: RECTL , dwflags : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetObscured : SetObscured :: < Impl , IMPL_OFFSET > , Popup : Popup :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITrackShellMenu < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait ITranscodeImageImpl < > : Sized where { fn TranscodeImage ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > ITranscodeImageVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITranscodeImageImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITranscodeImageVtbl < > { unsafe extern "system" fn TranscodeImage < Impl : ITranscodeImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pshellitem : :: windows :: core :: RawPtr , uimaxwidth : u32 , uimaxheight : u32 , flags : u32 , pvimage : :: windows :: core :: RawPtr , puiwidth : * mut u32 , puiheight : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , TranscodeImage : TranscodeImage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITranscodeImage < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait ITransferAdviseSinkImpl < > : Sized where { fn UpdateProgress ( ) ; fn UpdateTransferState ( ) ; fn ConfirmOverwrite ( ) ; fn ConfirmEncryptionLoss ( ) ; fn FileFailure ( ) ; fn SubStreamFailure ( ) ; fn PropertyFailure ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > ITransferAdviseSinkVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITransferAdviseSinkImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITransferAdviseSinkVtbl < > { unsafe extern "system" fn UpdateProgress < Impl : ITransferAdviseSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ullsizecurrent : u64 , ullsizetotal : u64 , nfilescurrent : i32 , nfilestotal : i32 , nfolderscurrent : i32 , nfolderstotal : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateTransferState < Impl : ITransferAdviseSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ts : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ConfirmOverwrite < Impl : ITransferAdviseSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psisource : :: windows :: core :: RawPtr , psidestparent : :: windows :: core :: RawPtr , pszname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ConfirmEncryptionLoss < Impl : ITransferAdviseSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psisource : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FileFailure < Impl : ITransferAdviseSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , pszitem : super::super::Foundation:: PWSTR , hrerror : :: windows :: core :: HRESULT , pszrename : super::super::Foundation:: PWSTR , cchrename : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SubStreamFailure < Impl : ITransferAdviseSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , pszstreamname : super::super::Foundation:: PWSTR , hrerror : :: windows :: core :: HRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PropertyFailure < Impl : ITransferAdviseSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , pkey : * const PropertiesSystem:: PROPERTYKEY , hrerror : :: windows :: core :: HRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , UpdateProgress : UpdateProgress :: < Impl , IMPL_OFFSET > , UpdateTransferState : UpdateTransferState :: < Impl , IMPL_OFFSET > , ConfirmOverwrite : ConfirmOverwrite :: < Impl , IMPL_OFFSET > , ConfirmEncryptionLoss : ConfirmEncryptionLoss :: < Impl , IMPL_OFFSET > , FileFailure : FileFailure :: < Impl , IMPL_OFFSET > , SubStreamFailure : SubStreamFailure :: < Impl , IMPL_OFFSET > , PropertyFailure : PropertyFailure :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITransferAdviseSink < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ITransferDestinationImpl < > : Sized where { fn Advise ( ) ; fn Unadvise ( ) ; fn CreateItem ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ITransferDestinationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITransferDestinationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITransferDestinationVtbl < > { unsafe extern "system" fn Advise < Impl : ITransferDestinationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psink : :: windows :: core :: RawPtr , pdwcookie : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unadvise < Impl : ITransferDestinationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcookie : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateItem < Impl : ITransferDestinationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszname : super::super::Foundation:: PWSTR , dwattributes : u32 , ullsize : u64 , flags : u32 , riiditem : * const :: windows :: core :: GUID , ppvitem : * mut * mut :: core :: ffi :: c_void , riidresources : * const :: windows :: core :: GUID , ppvresources : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Advise : Advise :: < Impl , IMPL_OFFSET > , Unadvise : Unadvise :: < Impl , IMPL_OFFSET > , CreateItem : CreateItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITransferDestination < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait ITransferMediumItemImpl < > : Sized + IRelatedItemImpl where { } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > ITransferMediumItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITransferMediumItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITransferMediumItemVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITransferMediumItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] pub trait ITransferSourceImpl < > : Sized where { fn Advise ( ) ; fn Unadvise ( ) ; fn SetProperties ( ) ; fn OpenItem ( ) ; fn MoveItem ( ) ; fn RecycleItem ( ) ; fn RemoveItem ( ) ; fn RenameItem ( ) ; fn LinkItem ( ) ; fn ApplyPropertiesToItem ( ) ; fn GetDefaultDestinationName ( ) ; fn EnterFolder ( ) ; fn LeaveFolder ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_PropertiesSystem" ) ) ] impl < > ITransferSourceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITransferSourceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITransferSourceVtbl < > { unsafe extern "system" fn Advise < Impl : ITransferSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psink : :: windows :: core :: RawPtr , pdwcookie : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unadvise < Impl : ITransferSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcookie : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProperties < Impl : ITransferSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pproparray : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenItem < Impl : ITransferSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , flags : u32 , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveItem < Impl : ITransferSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psi : :: windows :: core :: RawPtr , psiparentdst : :: windows :: core :: RawPtr , psznamedst : super::super::Foundation:: PWSTR , flags : u32 , ppsinew : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RecycleItem < Impl : ITransferSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psisource : :: windows :: core :: RawPtr , psiparentdest : :: windows :: core :: RawPtr , flags : u32 , ppsinewdest : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveItem < Impl : ITransferSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psisource : :: windows :: core :: RawPtr , flags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RenameItem < Impl : ITransferSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psisource : :: windows :: core :: RawPtr , psznewname : super::super::Foundation:: PWSTR , flags : u32 , ppsinewdest : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LinkItem < Impl : ITransferSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psisource : :: windows :: core :: RawPtr , psiparentdest : :: windows :: core :: RawPtr , psznewname : super::super::Foundation:: PWSTR , flags : u32 , ppsinewdest : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplyPropertiesToItem < Impl : ITransferSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psisource : :: windows :: core :: RawPtr , ppsinew : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDefaultDestinationName < Impl : ITransferSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psisource : :: windows :: core :: RawPtr , psiparentdest : :: windows :: core :: RawPtr , ppszdestinationname : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnterFolder < Impl : ITransferSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psichildfolderdest : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LeaveFolder < Impl : ITransferSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psichildfolderdest : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Advise : Advise :: < Impl , IMPL_OFFSET > , Unadvise : Unadvise :: < Impl , IMPL_OFFSET > , SetProperties : SetProperties :: < Impl , IMPL_OFFSET > , OpenItem : OpenItem :: < Impl , IMPL_OFFSET > , MoveItem : MoveItem :: < Impl , IMPL_OFFSET > , RecycleItem : RecycleItem :: < Impl , IMPL_OFFSET > , RemoveItem : RemoveItem :: < Impl , IMPL_OFFSET > , RenameItem : RenameItem :: < Impl , IMPL_OFFSET > , LinkItem : LinkItem :: < Impl , IMPL_OFFSET > , ApplyPropertiesToItem : ApplyPropertiesToItem :: < Impl , IMPL_OFFSET > , GetDefaultDestinationName : GetDefaultDestinationName :: < Impl , IMPL_OFFSET > , EnterFolder : EnterFolder :: < Impl , IMPL_OFFSET > , LeaveFolder : LeaveFolder :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITransferSource < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait ITravelEntryImpl < > : Sized where { fn Invoke ( ) ; fn Update ( ) ; fn GetPidl ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > ITravelEntryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITravelEntryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITravelEntryVtbl < > { unsafe extern "system" fn Invoke < Impl : ITravelEntryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Update < Impl : ITravelEntryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , fislocalanchor : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPidl < Impl : ITravelEntryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppidl : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Invoke : Invoke :: < Impl , IMPL_OFFSET > , Update : Update :: < Impl , IMPL_OFFSET > , GetPidl : GetPidl :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITravelEntry < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait ITravelLogImpl < > : Sized where { fn AddEntry ( ) ; fn UpdateEntry ( ) ; fn UpdateExternal ( ) ; fn Travel ( ) ; fn GetTravelEntry ( ) ; fn FindTravelEntry ( ) ; fn GetToolTipText ( ) ; fn InsertMenuEntries ( ) ; fn Clone ( ) ; fn CountEntries ( ) ; fn Revert ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Shell_Common" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > ITravelLogVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITravelLogImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITravelLogVtbl < > { unsafe extern "system" fn AddEntry < Impl : ITravelLogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , fislocalanchor : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateEntry < Impl : ITravelLogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , fislocalanchor : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateExternal < Impl : ITravelLogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , punkhlbrowsecontext : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Travel < Impl : ITravelLogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ioffset : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTravelEntry < Impl : ITravelLogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ioffset : i32 , ppte : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindTravelEntry < Impl : ITravelLogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , pidl : * const Common:: ITEMIDLIST , ppte : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetToolTipText < Impl : ITravelLogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ioffset : i32 , idstemplate : i32 , pwztext : super::super::Foundation:: PWSTR , cchtext : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InsertMenuEntries < Impl : ITravelLogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , hmenu : super::WindowsAndMessaging:: HMENU , npos : i32 , idfirst : i32 , idlast : i32 , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : ITravelLogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pptl : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CountEntries < Impl : ITravelLogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ) -> u32 { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Revert < Impl : ITravelLogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddEntry : AddEntry :: < Impl , IMPL_OFFSET > , UpdateEntry : UpdateEntry :: < Impl , IMPL_OFFSET > , UpdateExternal : UpdateExternal :: < Impl , IMPL_OFFSET > , Travel : Travel :: < Impl , IMPL_OFFSET > , GetTravelEntry : GetTravelEntry :: < Impl , IMPL_OFFSET > , FindTravelEntry : FindTravelEntry :: < Impl , IMPL_OFFSET > , GetToolTipText : GetToolTipText :: < Impl , IMPL_OFFSET > , InsertMenuEntries : InsertMenuEntries :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , CountEntries : CountEntries :: < Impl , IMPL_OFFSET > , Revert : Revert :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITravelLog < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait ITravelLogClientImpl < > : Sized where { fn FindWindowByIndex ( ) ; fn GetWindowData ( ) ; fn LoadHistoryPosition ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > ITravelLogClientVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITravelLogClientImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITravelLogClientVtbl < > { unsafe extern "system" fn FindWindowByIndex < Impl : ITravelLogClientImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwid : u32 , ppunk : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetWindowData < Impl : ITravelLogClientImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstream : :: windows :: core :: RawPtr , pwindata : * mut WINDOWDATA , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LoadHistoryPosition < Impl : ITravelLogClientImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszurllocation : super::super::Foundation:: PWSTR , dwposition : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , FindWindowByIndex : FindWindowByIndex :: < Impl , IMPL_OFFSET > , GetWindowData : GetWindowData :: < Impl , IMPL_OFFSET > , LoadHistoryPosition : LoadHistoryPosition :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITravelLogClient < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ITravelLogEntryImpl < > : Sized where { fn GetTitle ( ) ; fn GetURL ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ITravelLogEntryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITravelLogEntryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITravelLogEntryVtbl < > { unsafe extern "system" fn GetTitle < Impl : ITravelLogEntryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsztitle : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetURL < Impl : ITravelLogEntryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszurl : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetTitle : GetTitle :: < Impl , IMPL_OFFSET > , GetURL : GetURL :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITravelLogEntry < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ITravelLogStgImpl < > : Sized where { fn CreateEntry ( ) ; fn TravelTo ( ) ; fn EnumEntries ( ) ; fn FindEntries ( ) ; fn GetCount ( ) ; fn RemoveEntry ( ) ; fn GetRelativeEntry ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ITravelLogStgVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITravelLogStgImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITravelLogStgVtbl < > { unsafe extern "system" fn CreateEntry < Impl : ITravelLogStgImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszurl : super::super::Foundation:: PWSTR , psztitle : super::super::Foundation:: PWSTR , ptlerelativeto : :: windows :: core :: RawPtr , fprepend : super::super::Foundation:: BOOL , pptle : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TravelTo < Impl : ITravelLogStgImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptle : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnumEntries < Impl : ITravelLogStgImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , flags : TLENUMF , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindEntries < Impl : ITravelLogStgImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , flags : TLENUMF , pszurl : super::super::Foundation:: PWSTR , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCount < Impl : ITravelLogStgImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , flags : TLENUMF , pcentries : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveEntry < Impl : ITravelLogStgImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptle : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetRelativeEntry < Impl : ITravelLogStgImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ioffset : i32 , ptle : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateEntry : CreateEntry :: < Impl , IMPL_OFFSET > , TravelTo : TravelTo :: < Impl , IMPL_OFFSET > , EnumEntries : EnumEntries :: < Impl , IMPL_OFFSET > , FindEntries : FindEntries :: < Impl , IMPL_OFFSET > , GetCount : GetCount :: < Impl , IMPL_OFFSET > , RemoveEntry : RemoveEntry :: < Impl , IMPL_OFFSET > , GetRelativeEntry : GetRelativeEntry :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITravelLogStg < > as :: windows :: core :: Interface > :: IID } } pub trait ITrayDeskBandImpl < > : Sized where { fn ShowDeskBand ( ) ; fn HideDeskBand ( ) ; fn IsDeskBandShown ( ) ; fn DeskBandRegistrationChanged ( ) ; } impl < > ITrayDeskBandVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITrayDeskBandImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITrayDeskBandVtbl < > { unsafe extern "system" fn ShowDeskBand < Impl : ITrayDeskBandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , clsid : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HideDeskBand < Impl : ITrayDeskBandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , clsid : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsDeskBandShown < Impl : ITrayDeskBandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , clsid : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeskBandRegistrationChanged < Impl : ITrayDeskBandImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ShowDeskBand : ShowDeskBand :: < Impl , IMPL_OFFSET > , HideDeskBand : HideDeskBand :: < Impl , IMPL_OFFSET > , IsDeskBandShown : IsDeskBandShown :: < Impl , IMPL_OFFSET > , DeskBandRegistrationChanged : DeskBandRegistrationChanged :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITrayDeskBand < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IURLSearchHookImpl < > : Sized where { fn Translate ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IURLSearchHookVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IURLSearchHookImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IURLSearchHookVtbl < > { unsafe extern "system" fn Translate < Impl : IURLSearchHookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwszsearchurl : super::super::Foundation:: PWSTR , cchbuffersize : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Translate : Translate :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IURLSearchHook < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IURLSearchHook2Impl < > : Sized + IURLSearchHookImpl where { fn TranslateWithSearchContext ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IURLSearchHook2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IURLSearchHook2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IURLSearchHook2Vtbl < > { unsafe extern "system" fn TranslateWithSearchContext < Impl : IURLSearchHook2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwszsearchurl : super::super::Foundation:: PWSTR , cchbuffersize : u32 , psearchcontext : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , TranslateWithSearchContext : TranslateWithSearchContext :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IURLSearchHook2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IUniformResourceLocatorAImpl < > : Sized where { fn SetURL ( ) ; fn GetURL ( ) ; fn InvokeCommand ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IUniformResourceLocatorAVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUniformResourceLocatorAImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUniformResourceLocatorAVtbl < > { unsafe extern "system" fn SetURL < Impl : IUniformResourceLocatorAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcszurl : super::super::Foundation:: PSTR , dwinflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetURL < Impl : IUniformResourceLocatorAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszurl : * mut super::super::Foundation:: PSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvokeCommand < Impl : IUniformResourceLocatorAImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , purlici : * mut urlinvokecommandinfoA , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetURL : SetURL :: < Impl , IMPL_OFFSET > , GetURL : GetURL :: < Impl , IMPL_OFFSET > , InvokeCommand : InvokeCommand :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUniformResourceLocatorA < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IUniformResourceLocatorWImpl < > : Sized where { fn SetURL ( ) ; fn GetURL ( ) ; fn InvokeCommand ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IUniformResourceLocatorWVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUniformResourceLocatorWImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUniformResourceLocatorWVtbl < > { unsafe extern "system" fn SetURL < Impl : IUniformResourceLocatorWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcszurl : super::super::Foundation:: PWSTR , dwinflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetURL < Impl : IUniformResourceLocatorWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszurl : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvokeCommand < Impl : IUniformResourceLocatorWImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , purlici : * mut urlinvokecommandinfoW , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetURL : SetURL :: < Impl , IMPL_OFFSET > , GetURL : GetURL :: < Impl , IMPL_OFFSET > , InvokeCommand : InvokeCommand :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUniformResourceLocatorW < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] pub trait IUpdateIDListImpl < > : Sized where { fn Update ( ) ; } # [ cfg ( all ( feature ="Win32_System_Com" , feature ="Win32_UI_Shell_Common" ) ) ] impl < > IUpdateIDListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUpdateIDListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUpdateIDListVtbl < > { unsafe extern "system" fn Update < Impl : IUpdateIDListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbc : :: windows :: core :: RawPtr , pidlin : * const Common:: ITEMIDLIST , ppidlout : * mut * mut Common:: ITEMIDLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Update : Update :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUpdateIDList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IUseToBrowseItemImpl < > : Sized + IRelatedItemImpl where { } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IUseToBrowseItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUseToBrowseItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUseToBrowseItemVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUseToBrowseItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IUserAccountChangeCallbackImpl < > : Sized where { fn OnPictureChange ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IUserAccountChangeCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUserAccountChangeCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUserAccountChangeCallbackVtbl < > { unsafe extern "system" fn OnPictureChange < Impl : IUserAccountChangeCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszusername : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnPictureChange : OnPictureChange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUserAccountChangeCallback < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IUserNotificationImpl < > : Sized where { fn SetBalloonInfo ( ) ; fn SetBalloonRetry ( ) ; fn SetIconInfo ( ) ; fn Show ( ) ; fn PlaySound ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IUserNotificationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUserNotificationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUserNotificationVtbl < > { unsafe extern "system" fn SetBalloonInfo < Impl : IUserNotificationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psztitle : super::super::Foundation:: PWSTR , psztext : super::super::Foundation:: PWSTR , dwinfoflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBalloonRetry < Impl : IUserNotificationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwshowtime : u32 , dwinterval : u32 , cretrycount : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetIconInfo < Impl : IUserNotificationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hicon : super::WindowsAndMessaging:: HICON , psztooltip : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Show < Impl : IUserNotificationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pqc : :: windows :: core :: RawPtr , dwcontinuepollinterval : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PlaySound < Impl : IUserNotificationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszsoundname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetBalloonInfo : SetBalloonInfo :: < Impl , IMPL_OFFSET > , SetBalloonRetry : SetBalloonRetry :: < Impl , IMPL_OFFSET > , SetIconInfo : SetIconInfo :: < Impl , IMPL_OFFSET > , Show : Show :: < Impl , IMPL_OFFSET > , PlaySound : PlaySound :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUserNotification < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IUserNotification2Impl < > : Sized where { fn SetBalloonInfo ( ) ; fn SetBalloonRetry ( ) ; fn SetIconInfo ( ) ; fn Show ( ) ; fn PlaySound ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IUserNotification2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUserNotification2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUserNotification2Vtbl < > { unsafe extern "system" fn SetBalloonInfo < Impl : IUserNotification2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psztitle : super::super::Foundation:: PWSTR , psztext : super::super::Foundation:: PWSTR , dwinfoflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBalloonRetry < Impl : IUserNotification2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwshowtime : u32 , dwinterval : u32 , cretrycount : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetIconInfo < Impl : IUserNotification2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hicon : super::WindowsAndMessaging:: HICON , psztooltip : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Show < Impl : IUserNotification2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pqc : :: windows :: core :: RawPtr , dwcontinuepollinterval : u32 , psink : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PlaySound < Impl : IUserNotification2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszsoundname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetBalloonInfo : SetBalloonInfo :: < Impl , IMPL_OFFSET > , SetBalloonRetry : SetBalloonRetry :: < Impl , IMPL_OFFSET > , SetIconInfo : SetIconInfo :: < Impl , IMPL_OFFSET > , Show : Show :: < Impl , IMPL_OFFSET > , PlaySound : PlaySound :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUserNotification2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IUserNotificationCallbackImpl < > : Sized where { fn OnBalloonUserClick ( ) ; fn OnLeftClick ( ) ; fn OnContextMenu ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IUserNotificationCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUserNotificationCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUserNotificationCallbackVtbl < > { unsafe extern "system" fn OnBalloonUserClick < Impl : IUserNotificationCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pt : * const super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnLeftClick < Impl : IUserNotificationCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pt : * const super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnContextMenu < Impl : IUserNotificationCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pt : * const super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnBalloonUserClick : OnBalloonUserClick :: < Impl , IMPL_OFFSET > , OnLeftClick : OnLeftClick :: < Impl , IMPL_OFFSET > , OnContextMenu : OnContextMenu :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUserNotificationCallback < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] pub trait IViewStateIdentityItemImpl < > : Sized + IRelatedItemImpl where { } # [ cfg ( feature ="Win32_UI_Shell_Common" ) ] impl < > IViewStateIdentityItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IViewStateIdentityItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IViewStateIdentityItemVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IViewStateIdentityItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IVirtualDesktopManagerImpl < > : Sized where { fn IsWindowOnCurrentVirtualDesktop ( ) ; fn GetWindowDesktopId ( ) ; fn MoveWindowToDesktop ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IVirtualDesktopManagerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IVirtualDesktopManagerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IVirtualDesktopManagerVtbl < > { unsafe extern "system" fn IsWindowOnCurrentVirtualDesktop < Impl : IVirtualDesktopManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , toplevelwindow : super::super::Foundation:: HWND , oncurrentdesktop : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetWindowDesktopId < Impl : IVirtualDesktopManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , toplevelwindow : super::super::Foundation:: HWND , desktopid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveWindowToDesktop < Impl : IVirtualDesktopManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , toplevelwindow : super::super::Foundation:: HWND , desktopid : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , IsWindowOnCurrentVirtualDesktop : IsWindowOnCurrentVirtualDesktop :: < Impl , IMPL_OFFSET > , GetWindowDesktopId : GetWindowDesktopId :: < Impl , IMPL_OFFSET > , MoveWindowToDesktop : MoveWindowToDesktop :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IVirtualDesktopManager < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait IVisualPropertiesImpl < > : Sized where { fn SetWatermark ( ) ; fn SetColor ( ) ; fn GetColor ( ) ; fn SetItemHeight ( ) ; fn GetItemHeight ( ) ; fn SetFont ( ) ; fn GetFont ( ) ; fn SetTheme ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > IVisualPropertiesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IVisualPropertiesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IVisualPropertiesVtbl < > { unsafe extern "system" fn SetWatermark < Impl : IVisualPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hbmp : super::super::Graphics::Gdi:: HBITMAP , vpwf : VPWATERMARKFLAGS , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetColor < Impl : IVisualPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vpcf : VPCOLORFLAGS , cr : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetColor < Impl : IVisualPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vpcf : VPCOLORFLAGS , pcr : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetItemHeight < Impl : IVisualPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cyiteminpixels : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetItemHeight < Impl : IVisualPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cyiteminpixels : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFont < Impl : IVisualPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plf : * const super::super::Graphics::Gdi:: LOGFONTW , bredraw : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFont < Impl : IVisualPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plf : * mut super::super::Graphics::Gdi:: LOGFONTW , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTheme < Impl : IVisualPropertiesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszsubappname : super::super::Foundation:: PWSTR , pszsubidlist : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetWatermark : SetWatermark :: < Impl , IMPL_OFFSET > , SetColor : SetColor :: < Impl , IMPL_OFFSET > , GetColor : GetColor :: < Impl , IMPL_OFFSET > , SetItemHeight : SetItemHeight :: < Impl , IMPL_OFFSET > , GetItemHeight : GetItemHeight :: < Impl , IMPL_OFFSET > , SetFont : SetFont :: < Impl , IMPL_OFFSET > , GetFont : GetFont :: < Impl , IMPL_OFFSET > , SetTheme : SetTheme :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IVisualProperties < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IWebBrowserImpl < > : Sized + IDispatchImpl where { fn GoBack ( ) ; fn GoForward ( ) ; fn GoHome ( ) ; fn GoSearch ( ) ; fn Navigate ( ) ; fn Refresh ( ) ; fn Refresh2 ( ) ; fn Stop ( ) ; fn Application ( ) ; fn Parent ( ) ; fn Container ( ) ; fn Document ( ) ; fn TopLevelContainer ( ) ; fn Type ( ) ; fn Left ( ) ; fn SetLeft ( ) ; fn Top ( ) ; fn SetTop ( ) ; fn Width ( ) ; fn SetWidth ( ) ; fn Height ( ) ; fn SetHeight ( ) ; fn LocationName ( ) ; fn LocationURL ( ) ; fn Busy ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IWebBrowserVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWebBrowserImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWebBrowserVtbl < > { unsafe extern "system" fn GoBack < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GoForward < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GoHome < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GoSearch < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Navigate < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , flags : * const super::super::System::Com:: VARIANT , targetframename : * const super::super::System::Com:: VARIANT , postdata : * const super::super::System::Com:: VARIANT , headers : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Refresh2 < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , level : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Stop < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Application < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Parent < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Container < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Document < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TopLevelContainer < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbool : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Type < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , r#type : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Left < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pl : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetLeft < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , left : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Top < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pl : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTop < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , top : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Width < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pl : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetWidth < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , width : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Height < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pl : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetHeight < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , height : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LocationName < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , locationname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LocationURL < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , locationurl : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Busy < Impl : IWebBrowserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbool : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GoBack : GoBack :: < Impl , IMPL_OFFSET > , GoForward : GoForward :: < Impl , IMPL_OFFSET > , GoHome : GoHome :: < Impl , IMPL_OFFSET > , GoSearch : GoSearch :: < Impl , IMPL_OFFSET > , Navigate : Navigate :: < Impl , IMPL_OFFSET > , Refresh : Refresh :: < Impl , IMPL_OFFSET > , Refresh2 : Refresh2 :: < Impl , IMPL_OFFSET > , Stop : Stop :: < Impl , IMPL_OFFSET > , Application : Application :: < Impl , IMPL_OFFSET > , Parent : Parent :: < Impl , IMPL_OFFSET > , Container : Container :: < Impl , IMPL_OFFSET > , Document : Document :: < Impl , IMPL_OFFSET > , TopLevelContainer : TopLevelContainer :: < Impl , IMPL_OFFSET > , Type : Type :: < Impl , IMPL_OFFSET > , Left : Left :: < Impl , IMPL_OFFSET > , SetLeft : SetLeft :: < Impl , IMPL_OFFSET > , Top : Top :: < Impl , IMPL_OFFSET > , SetTop : SetTop :: < Impl , IMPL_OFFSET > , Width : Width :: < Impl , IMPL_OFFSET > , SetWidth : SetWidth :: < Impl , IMPL_OFFSET > , Height : Height :: < Impl , IMPL_OFFSET > , SetHeight : SetHeight :: < Impl , IMPL_OFFSET > , LocationName : LocationName :: < Impl , IMPL_OFFSET > , LocationURL : LocationURL :: < Impl , IMPL_OFFSET > , Busy : Busy :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWebBrowser < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IWebBrowser2Impl < > : Sized + IWebBrowserAppImpl + IWebBrowserImpl + IDispatchImpl where { fn Navigate2 ( ) ; fn QueryStatusWB ( ) ; fn ExecWB ( ) ; fn ShowBrowserBar ( ) ; fn ReadyState ( ) ; fn Offline ( ) ; fn SetOffline ( ) ; fn Silent ( ) ; fn SetSilent ( ) ; fn RegisterAsBrowser ( ) ; fn SetRegisterAsBrowser ( ) ; fn RegisterAsDropTarget ( ) ; fn SetRegisterAsDropTarget ( ) ; fn TheaterMode ( ) ; fn SetTheaterMode ( ) ; fn AddressBar ( ) ; fn SetAddressBar ( ) ; fn Resizable ( ) ; fn SetResizable ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IWebBrowser2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWebBrowser2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWebBrowser2Vtbl < > { unsafe extern "system" fn Navigate2 < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : * const super::super::System::Com:: VARIANT , flags : * const super::super::System::Com:: VARIANT , targetframename : * const super::super::System::Com:: VARIANT , postdata : * const super::super::System::Com:: VARIANT , headers : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryStatusWB < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : super::super::System::Ole:: OLECMDID , pcmdf : * mut super::super::System::Ole:: OLECMDF , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ExecWB < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : super::super::System::Ole:: OLECMDID , cmdexecopt : super::super::System::Ole:: OLECMDEXECOPT , pvain : * const super::super::System::Com:: VARIANT , pvaout : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowBrowserBar < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvaclsid : * const super::super::System::Com:: VARIANT , pvarshow : * const super::super::System::Com:: VARIANT , pvarsize : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReadyState < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plreadystate : * mut super::super::System::Ole:: READYSTATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Offline < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pboffline : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetOffline < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , boffline : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Silent < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbsilent : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSilent < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bsilent : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterAsBrowser < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbregister : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetRegisterAsBrowser < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bregister : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterAsDropTarget < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbregister : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetRegisterAsDropTarget < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bregister : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TheaterMode < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbregister : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTheaterMode < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bregister : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddressBar < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetAddressBar < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Resizable < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetResizable < Impl : IWebBrowser2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Navigate2 : Navigate2 :: < Impl , IMPL_OFFSET > , QueryStatusWB : QueryStatusWB :: < Impl , IMPL_OFFSET > , ExecWB : ExecWB :: < Impl , IMPL_OFFSET > , ShowBrowserBar : ShowBrowserBar :: < Impl , IMPL_OFFSET > , ReadyState : ReadyState :: < Impl , IMPL_OFFSET > , Offline : Offline :: < Impl , IMPL_OFFSET > , SetOffline : SetOffline :: < Impl , IMPL_OFFSET > , Silent : Silent :: < Impl , IMPL_OFFSET > , SetSilent : SetSilent :: < Impl , IMPL_OFFSET > , RegisterAsBrowser : RegisterAsBrowser :: < Impl , IMPL_OFFSET > , SetRegisterAsBrowser : SetRegisterAsBrowser :: < Impl , IMPL_OFFSET > , RegisterAsDropTarget : RegisterAsDropTarget :: < Impl , IMPL_OFFSET > , SetRegisterAsDropTarget : SetRegisterAsDropTarget :: < Impl , IMPL_OFFSET > , TheaterMode : TheaterMode :: < Impl , IMPL_OFFSET > , SetTheaterMode : SetTheaterMode :: < Impl , IMPL_OFFSET > , AddressBar : AddressBar :: < Impl , IMPL_OFFSET > , SetAddressBar : SetAddressBar :: < Impl , IMPL_OFFSET > , Resizable : Resizable :: < Impl , IMPL_OFFSET > , SetResizable : SetResizable :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWebBrowser2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IWebBrowserAppImpl < > : Sized + IWebBrowserImpl + IDispatchImpl where { fn Quit ( ) ; fn ClientToWindow ( ) ; fn PutProperty ( ) ; fn GetProperty ( ) ; fn Name ( ) ; fn HWND ( ) ; fn FullName ( ) ; fn Path ( ) ; fn Visible ( ) ; fn SetVisible ( ) ; fn StatusBar ( ) ; fn SetStatusBar ( ) ; fn StatusText ( ) ; fn SetStatusText ( ) ; fn ToolBar ( ) ; fn SetToolBar ( ) ; fn MenuBar ( ) ; fn SetMenuBar ( ) ; fn FullScreen ( ) ; fn SetFullScreen ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IWebBrowserAppVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWebBrowserAppImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWebBrowserAppVtbl < > { unsafe extern "system" fn Quit < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ClientToWindow < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcx : * mut i32 , pcy : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PutProperty < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , property : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , vtvalue : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProperty < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , property : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvtvalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Name < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HWND < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phwnd : * mut super::super::Foundation:: SHANDLE_PTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FullName < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fullname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Path < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , path : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Visible < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbool : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetVisible < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StatusBar < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbool : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetStatusBar < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StatusText < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , statustext : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetStatusText < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , statustext : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ToolBar < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetToolBar < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MenuBar < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMenuBar < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FullScreen < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbfullscreen : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFullScreen < Impl : IWebBrowserAppImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bfullscreen : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Quit : Quit :: < Impl , IMPL_OFFSET > , ClientToWindow : ClientToWindow :: < Impl , IMPL_OFFSET > , PutProperty : PutProperty :: < Impl , IMPL_OFFSET > , GetProperty : GetProperty :: < Impl , IMPL_OFFSET > , Name : Name :: < Impl , IMPL_OFFSET > , HWND : HWND :: < Impl , IMPL_OFFSET > , FullName : FullName :: < Impl , IMPL_OFFSET > , Path : Path :: < Impl , IMPL_OFFSET > , Visible : Visible :: < Impl , IMPL_OFFSET > , SetVisible : SetVisible :: < Impl , IMPL_OFFSET > , StatusBar : StatusBar :: < Impl , IMPL_OFFSET > , SetStatusBar : SetStatusBar :: < Impl , IMPL_OFFSET > , StatusText : StatusText :: < Impl , IMPL_OFFSET > , SetStatusText : SetStatusText :: < Impl , IMPL_OFFSET > , ToolBar : ToolBar :: < Impl , IMPL_OFFSET > , SetToolBar : SetToolBar :: < Impl , IMPL_OFFSET > , MenuBar : MenuBar :: < Impl , IMPL_OFFSET > , SetMenuBar : SetMenuBar :: < Impl , IMPL_OFFSET > , FullScreen : FullScreen :: < Impl , IMPL_OFFSET > , SetFullScreen : SetFullScreen :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWebBrowserApp < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Controls" ) ) ] pub trait IWebWizardExtensionImpl < > : Sized + IWizardExtensionImpl where { fn SetInitialURL ( ) ; fn SetErrorURL ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Controls" ) ) ] impl < > IWebWizardExtensionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWebWizardExtensionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWebWizardExtensionVtbl < > { unsafe extern "system" fn SetInitialURL < Impl : IWebWizardExtensionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszurl : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetErrorURL < Impl : IWebWizardExtensionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszerrorurl : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetInitialURL : SetInitialURL :: < Impl , IMPL_OFFSET > , SetErrorURL : SetErrorURL :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWebWizardExtension < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IWebWizardHostImpl < > : Sized + IDispatchImpl where { fn FinalBack ( ) ; fn FinalNext ( ) ; fn Cancel ( ) ; fn SetCaption ( ) ; fn Caption ( ) ; fn SetProperty ( ) ; fn Property ( ) ; fn SetWizardButtons ( ) ; fn SetHeaderText ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IWebWizardHostVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWebWizardHostImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWebWizardHostVtbl < > { unsafe extern "system" fn FinalBack < Impl : IWebWizardHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FinalNext < Impl : IWebWizardHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Cancel < Impl : IWebWizardHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCaption < Impl : IWebWizardHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrcaption : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Caption < Impl : IWebWizardHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrcaption : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProperty < Impl : IWebWizardHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrpropertyname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvproperty : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Property < Impl : IWebWizardHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrpropertyname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvproperty : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetWizardButtons < Impl : IWebWizardHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vfenableback : i16 , vfenablenext : i16 , vflastpage : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetHeaderText < Impl : IWebWizardHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrheadertitle : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrheadersubtitle : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , FinalBack : FinalBack :: < Impl , IMPL_OFFSET > , FinalNext : FinalNext :: < Impl , IMPL_OFFSET > , Cancel : Cancel :: < Impl , IMPL_OFFSET > , SetCaption : SetCaption :: < Impl , IMPL_OFFSET > , Caption : Caption :: < Impl , IMPL_OFFSET > , SetProperty : SetProperty :: < Impl , IMPL_OFFSET > , Property : Property :: < Impl , IMPL_OFFSET > , SetWizardButtons : SetWizardButtons :: < Impl , IMPL_OFFSET > , SetHeaderText : SetHeaderText :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWebWizardHost < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IWebWizardHost2Impl < > : Sized + IWebWizardHostImpl + IDispatchImpl where { fn SignString ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IWebWizardHost2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWebWizardHost2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWebWizardHost2Vtbl < > { unsafe extern "system" fn SignString < Impl : IWebWizardHost2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , signedvalue : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SignString : SignString :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWebWizardHost2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Controls" ) ] pub trait IWizardExtensionImpl < > : Sized where { fn AddPages ( ) ; fn GetFirstPage ( ) ; fn GetLastPage ( ) ; } # [ cfg ( feature ="Win32_UI_Controls" ) ] impl < > IWizardExtensionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWizardExtensionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWizardExtensionVtbl < > { unsafe extern "system" fn AddPages < Impl : IWizardExtensionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , apages : * mut super::Controls:: HPROPSHEETPAGE , cpages : u32 , pnpagesadded : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFirstPage < Impl : IWizardExtensionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phpage : * mut super::Controls:: HPROPSHEETPAGE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLastPage < Impl : IWizardExtensionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phpage : * mut super::Controls:: HPROPSHEETPAGE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddPages : AddPages :: < Impl , IMPL_OFFSET > , GetFirstPage : GetFirstPage :: < Impl , IMPL_OFFSET > , GetLastPage : GetLastPage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWizardExtension < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Controls" ) ] pub trait IWizardSiteImpl < > : Sized where { fn GetPreviousPage ( ) ; fn GetNextPage ( ) ; fn GetCancelledPage ( ) ; } # [ cfg ( feature ="Win32_UI_Controls" ) ] impl < > IWizardSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWizardSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWizardSiteVtbl < > { unsafe extern "system" fn GetPreviousPage < Impl : IWizardSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phpage : * mut super::Controls:: HPROPSHEETPAGE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetNextPage < Impl : IWizardSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phpage : * mut super::Controls:: HPROPSHEETPAGE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCancelledPage < Impl : IWizardSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phpage : * mut super::Controls:: HPROPSHEETPAGE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetPreviousPage : GetPreviousPage :: < Impl , IMPL_OFFSET > , GetNextPage : GetNextPage :: < Impl , IMPL_OFFSET > , GetCancelledPage : GetCancelledPage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWizardSite < > as :: windows :: core :: Interface > :: IID } } 