pub trait IAMAnalogVideoDecoderImpl: Sized {
    fn AvailableTVFormats();
    fn SetTVFormat();
    fn TVFormat();
    fn HorizontalLocked();
    fn SetVCRHorizontalLocking();
    fn VCRHorizontalLocking();
    fn NumberOfLines();
    fn SetOutputEnable();
    fn OutputEnable();
}
impl IAMAnalogVideoDecoderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMAnalogVideoDecoderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMAnalogVideoDecoderVtbl {
        unsafe extern "system" fn AvailableTVFormats<Impl: IAMAnalogVideoDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lanalogvideostandard: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTVFormat<Impl: IAMAnalogVideoDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lanalogvideostandard: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TVFormat<Impl: IAMAnalogVideoDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, planalogvideostandard: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HorizontalLocked<Impl: IAMAnalogVideoDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pllocked: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetVCRHorizontalLocking<Impl: IAMAnalogVideoDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lvcrhorizontallocking: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VCRHorizontalLocking<Impl: IAMAnalogVideoDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plvcrhorizontallocking: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NumberOfLines<Impl: IAMAnalogVideoDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plnumberoflines: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputEnable<Impl: IAMAnalogVideoDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, loutputenable: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputEnable<Impl: IAMAnalogVideoDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ploutputenable: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            AvailableTVFormats::<Impl, IMPL_OFFSET>,
            SetTVFormat::<Impl, IMPL_OFFSET>,
            TVFormat::<Impl, IMPL_OFFSET>,
            HorizontalLocked::<Impl, IMPL_OFFSET>,
            SetVCRHorizontalLocking::<Impl, IMPL_OFFSET>,
            VCRHorizontalLocking::<Impl, IMPL_OFFSET>,
            NumberOfLines::<Impl, IMPL_OFFSET>,
            SetOutputEnable::<Impl, IMPL_OFFSET>,
            OutputEnable::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMAnalogVideoDecoder as ::windows::core::Interface>::IID
    }
}
pub trait IAMAnalogVideoEncoderImpl: Sized {
    fn AvailableTVFormats();
    fn SetTVFormat();
    fn TVFormat();
    fn SetCopyProtection();
    fn CopyProtection();
    fn SetCCEnable();
    fn CCEnable();
}
impl IAMAnalogVideoEncoderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMAnalogVideoEncoderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMAnalogVideoEncoderVtbl {
        unsafe extern "system" fn AvailableTVFormats<Impl: IAMAnalogVideoEncoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lanalogvideostandard: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTVFormat<Impl: IAMAnalogVideoEncoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lanalogvideostandard: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TVFormat<Impl: IAMAnalogVideoEncoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, planalogvideostandard: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCopyProtection<Impl: IAMAnalogVideoEncoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lvideocopyprotection: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CopyProtection<Impl: IAMAnalogVideoEncoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lvideocopyprotection: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCCEnable<Impl: IAMAnalogVideoEncoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lccenable: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CCEnable<Impl: IAMAnalogVideoEncoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lccenable: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, AvailableTVFormats::<Impl, IMPL_OFFSET>, SetTVFormat::<Impl, IMPL_OFFSET>, TVFormat::<Impl, IMPL_OFFSET>, SetCopyProtection::<Impl, IMPL_OFFSET>, CopyProtection::<Impl, IMPL_OFFSET>, SetCCEnable::<Impl, IMPL_OFFSET>, CCEnable::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMAnalogVideoEncoder as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMAsyncReaderTimestampScalingImpl: Sized {
    fn GetTimestampMode();
    fn SetTimestampMode();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMAsyncReaderTimestampScalingVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMAsyncReaderTimestampScalingImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMAsyncReaderTimestampScalingVtbl {
        unsafe extern "system" fn GetTimestampMode<Impl: IAMAsyncReaderTimestampScalingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfraw: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTimestampMode<Impl: IAMAsyncReaderTimestampScalingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fraw: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTimestampMode::<Impl, IMPL_OFFSET>, SetTimestampMode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMAsyncReaderTimestampScaling as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMAudioInputMixerImpl: Sized {
    fn SetEnable();
    fn Enable();
    fn SetMono();
    fn Mono();
    fn SetMixLevel();
    fn MixLevel();
    fn SetPan();
    fn Pan();
    fn SetLoudness();
    fn Loudness();
    fn SetTreble();
    fn Treble();
    fn TrebleRange();
    fn SetBass();
    fn Bass();
    fn BassRange();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMAudioInputMixerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMAudioInputMixerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMAudioInputMixerVtbl {
        unsafe extern "system" fn SetEnable<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Enable<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfenable: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMono<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fmono: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Mono<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfmono: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMixLevel<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MixLevel<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plevel: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPan<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pan: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Pan<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppan: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLoudness<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, floudness: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Loudness<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfloudness: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTreble<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, treble: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Treble<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptreble: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TrebleRange<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prange: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBass<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bass: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Bass<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbass: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BassRange<Impl: IAMAudioInputMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prange: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetEnable::<Impl, IMPL_OFFSET>,
            Enable::<Impl, IMPL_OFFSET>,
            SetMono::<Impl, IMPL_OFFSET>,
            Mono::<Impl, IMPL_OFFSET>,
            SetMixLevel::<Impl, IMPL_OFFSET>,
            MixLevel::<Impl, IMPL_OFFSET>,
            SetPan::<Impl, IMPL_OFFSET>,
            Pan::<Impl, IMPL_OFFSET>,
            SetLoudness::<Impl, IMPL_OFFSET>,
            Loudness::<Impl, IMPL_OFFSET>,
            SetTreble::<Impl, IMPL_OFFSET>,
            Treble::<Impl, IMPL_OFFSET>,
            TrebleRange::<Impl, IMPL_OFFSET>,
            SetBass::<Impl, IMPL_OFFSET>,
            Bass::<Impl, IMPL_OFFSET>,
            BassRange::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMAudioInputMixer as ::windows::core::Interface>::IID
    }
}
pub trait IAMAudioRendererStatsImpl: Sized {
    fn GetStatParam();
}
impl IAMAudioRendererStatsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMAudioRendererStatsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMAudioRendererStatsVtbl {
        unsafe extern "system" fn GetStatParam<Impl: IAMAudioRendererStatsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwparam: u32, pdwparam1: *mut u32, pdwparam2: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetStatParam::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMAudioRendererStats as ::windows::core::Interface>::IID
    }
}
pub trait IAMBufferNegotiationImpl: Sized {
    fn SuggestAllocatorProperties();
    fn GetAllocatorProperties();
}
impl IAMBufferNegotiationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMBufferNegotiationImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMBufferNegotiationVtbl {
        unsafe extern "system" fn SuggestAllocatorProperties<Impl: IAMBufferNegotiationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pprop: *const ALLOCATOR_PROPERTIES) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAllocatorProperties<Impl: IAMBufferNegotiationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pprop: *mut ALLOCATOR_PROPERTIES) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SuggestAllocatorProperties::<Impl, IMPL_OFFSET>, GetAllocatorProperties::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMBufferNegotiation as ::windows::core::Interface>::IID
    }
}
pub trait IAMCameraControlImpl: Sized {
    fn GetRange();
    fn Set();
    fn Get();
}
impl IAMCameraControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMCameraControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMCameraControlVtbl {
        unsafe extern "system" fn GetRange<Impl: IAMCameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, property: i32, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Set<Impl: IAMCameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, property: i32, lvalue: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Get<Impl: IAMCameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, property: i32, lvalue: *mut i32, flags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetRange::<Impl, IMPL_OFFSET>, Set::<Impl, IMPL_OFFSET>, Get::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMCameraControl as ::windows::core::Interface>::IID
    }
}
pub trait IAMCertifiedOutputProtectionImpl: Sized {
    fn KeyExchange();
    fn SessionSequenceStart();
    fn ProtectionCommand();
    fn ProtectionStatus();
}
impl IAMCertifiedOutputProtectionVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMCertifiedOutputProtectionImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMCertifiedOutputProtectionVtbl {
        unsafe extern "system" fn KeyExchange<Impl: IAMCertifiedOutputProtectionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prandom: *mut ::windows::core::GUID, varlencertgh: *mut *mut u8, pdwlengthcertgh: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SessionSequenceStart<Impl: IAMCertifiedOutputProtectionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psig: *mut AMCOPPSignature) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ProtectionCommand<Impl: IAMCertifiedOutputProtectionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cmd: *const AMCOPPCommand) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ProtectionStatus<Impl: IAMCertifiedOutputProtectionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstatusinput: *const AMCOPPStatusInput, pstatusoutput: *mut AMCOPPStatusOutput) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, KeyExchange::<Impl, IMPL_OFFSET>, SessionSequenceStart::<Impl, IMPL_OFFSET>, ProtectionCommand::<Impl, IMPL_OFFSET>, ProtectionStatus::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMCertifiedOutputProtection as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAMChannelInfoImpl: Sized + IDispatchImpl {
    fn ChannelName();
    fn ChannelDescription();
    fn ChannelURL();
    fn ContactAddress();
    fn ContactPhone();
    fn ContactEmail();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAMChannelInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMChannelInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMChannelInfoVtbl {
        unsafe extern "system" fn ChannelName<Impl: IAMChannelInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrchannelname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChannelDescription<Impl: IAMChannelInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrchanneldescription: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChannelURL<Impl: IAMChannelInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrchannelurl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ContactAddress<Impl: IAMChannelInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrcontactaddress: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ContactPhone<Impl: IAMChannelInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrcontactphone: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ContactEmail<Impl: IAMChannelInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrcontactemail: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            ChannelName::<Impl, IMPL_OFFSET>,
            ChannelDescription::<Impl, IMPL_OFFSET>,
            ChannelURL::<Impl, IMPL_OFFSET>,
            ContactAddress::<Impl, IMPL_OFFSET>,
            ContactPhone::<Impl, IMPL_OFFSET>,
            ContactEmail::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMChannelInfo as ::windows::core::Interface>::IID
    }
}
pub trait IAMClockAdjustImpl: Sized {
    fn SetClockDelta();
}
impl IAMClockAdjustVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMClockAdjustImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMClockAdjustVtbl {
        unsafe extern "system" fn SetClockDelta<Impl: IAMClockAdjustImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rtdelta: i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetClockDelta::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMClockAdjust as ::windows::core::Interface>::IID
    }
}
pub trait IAMClockSlaveImpl: Sized {
    fn SetErrorTolerance();
    fn GetErrorTolerance();
}
impl IAMClockSlaveVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMClockSlaveImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMClockSlaveVtbl {
        unsafe extern "system" fn SetErrorTolerance<Impl: IAMClockSlaveImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtolerance: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetErrorTolerance<Impl: IAMClockSlaveImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwtolerance: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetErrorTolerance::<Impl, IMPL_OFFSET>, GetErrorTolerance::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMClockSlave as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAMCollectionImpl: Sized + IDispatchImpl {
    fn Count();
    fn Item();
    fn _NewEnum();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAMCollectionVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMCollectionImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMCollectionVtbl {
        unsafe extern "system" fn Count<Impl: IAMCollectionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plcount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Item<Impl: IAMCollectionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, litem: i32, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _NewEnum<Impl: IAMCollectionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, Count::<Impl, IMPL_OFFSET>, Item::<Impl, IMPL_OFFSET>, _NewEnum::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMCollection as ::windows::core::Interface>::IID
    }
}
pub trait IAMCopyCaptureFileProgressImpl: Sized {
    fn Progress();
}
impl IAMCopyCaptureFileProgressVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMCopyCaptureFileProgressImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMCopyCaptureFileProgressVtbl {
        unsafe extern "system" fn Progress<Impl: IAMCopyCaptureFileProgressImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, iprogress: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Progress::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMCopyCaptureFileProgress as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMCrossbarImpl: Sized {
    fn PinCounts();
    fn CanRoute();
    fn Route();
    fn IsRoutedTo();
    fn CrossbarPinInfo();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMCrossbarVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMCrossbarImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMCrossbarVtbl {
        unsafe extern "system" fn PinCounts<Impl: IAMCrossbarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputpincount: *mut i32, inputpincount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CanRoute<Impl: IAMCrossbarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputpinindex: i32, inputpinindex: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Route<Impl: IAMCrossbarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputpinindex: i32, inputpinindex: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsRoutedTo<Impl: IAMCrossbarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputpinindex: i32, inputpinindex: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CrossbarPinInfo<Impl: IAMCrossbarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, isinputpin: super::super::Foundation::BOOL, pinindex: i32, pinindexrelated: *mut i32, physicaltype: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, PinCounts::<Impl, IMPL_OFFSET>, CanRoute::<Impl, IMPL_OFFSET>, Route::<Impl, IMPL_OFFSET>, IsRoutedTo::<Impl, IMPL_OFFSET>, CrossbarPinInfo::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMCrossbar as ::windows::core::Interface>::IID
    }
}
pub trait IAMDecoderCapsImpl: Sized {
    fn GetDecoderCaps();
}
impl IAMDecoderCapsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMDecoderCapsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMDecoderCapsVtbl {
        unsafe extern "system" fn GetDecoderCaps<Impl: IAMDecoderCapsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcapindex: u32, lpdwcap: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetDecoderCaps::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMDecoderCaps as ::windows::core::Interface>::IID
    }
}
pub trait IAMDevMemoryAllocatorImpl: Sized {
    fn GetInfo();
    fn CheckMemory();
    fn Alloc();
    fn Free();
    fn GetDevMemoryObject();
}
impl IAMDevMemoryAllocatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMDevMemoryAllocatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMDevMemoryAllocatorVtbl {
        unsafe extern "system" fn GetInfo<Impl: IAMDevMemoryAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcbtotalfree: *mut u32, pdwcblargestfree: *mut u32, pdwcbtotalmemory: *mut u32, pdwcbminimumchunk: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CheckMemory<Impl: IAMDevMemoryAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbuffer: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Alloc<Impl: IAMDevMemoryAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppbuffer: *mut *mut u8, pdwcbbuffer: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Free<Impl: IAMDevMemoryAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbuffer: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDevMemoryObject<Impl: IAMDevMemoryAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunkinnner: *mut *mut ::core::ffi::c_void, punkouter: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetInfo::<Impl, IMPL_OFFSET>, CheckMemory::<Impl, IMPL_OFFSET>, Alloc::<Impl, IMPL_OFFSET>, Free::<Impl, IMPL_OFFSET>, GetDevMemoryObject::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMDevMemoryAllocator as ::windows::core::Interface>::IID
    }
}
pub trait IAMDevMemoryControlImpl: Sized {
    fn QueryWriteSync();
    fn WriteSync();
    fn GetDevId();
}
impl IAMDevMemoryControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMDevMemoryControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMDevMemoryControlVtbl {
        unsafe extern "system" fn QueryWriteSync<Impl: IAMDevMemoryControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteSync<Impl: IAMDevMemoryControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDevId<Impl: IAMDevMemoryControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwdevid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, QueryWriteSync::<Impl, IMPL_OFFSET>, WriteSync::<Impl, IMPL_OFFSET>, GetDevId::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMDevMemoryControl as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMDeviceRemovalImpl: Sized {
    fn DeviceInfo();
    fn Reassociate();
    fn Disassociate();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMDeviceRemovalVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMDeviceRemovalImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMDeviceRemovalVtbl {
        unsafe extern "system" fn DeviceInfo<Impl: IAMDeviceRemovalImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pclsidinterfaceclass: *mut ::windows::core::GUID, pwszsymboliclink: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reassociate<Impl: IAMDeviceRemovalImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Disassociate<Impl: IAMDeviceRemovalImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, DeviceInfo::<Impl, IMPL_OFFSET>, Reassociate::<Impl, IMPL_OFFSET>, Disassociate::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMDeviceRemoval as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_Audio_DirectSound"))]
pub trait IAMDirectSoundImpl: Sized {
    fn GetDirectSoundInterface();
    fn GetPrimaryBufferInterface();
    fn GetSecondaryBufferInterface();
    fn ReleaseDirectSoundInterface();
    fn ReleasePrimaryBufferInterface();
    fn ReleaseSecondaryBufferInterface();
    fn SetFocusWindow();
    fn GetFocusWindow();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_Audio_DirectSound"))]
impl IAMDirectSoundVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMDirectSoundImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMDirectSoundVtbl {
        unsafe extern "system" fn GetDirectSoundInterface<Impl: IAMDirectSoundImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lplpds: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPrimaryBufferInterface<Impl: IAMDirectSoundImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lplpdsb: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSecondaryBufferInterface<Impl: IAMDirectSoundImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lplpdsb: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReleaseDirectSoundInterface<Impl: IAMDirectSoundImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpds: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReleasePrimaryBufferInterface<Impl: IAMDirectSoundImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpdsb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReleaseSecondaryBufferInterface<Impl: IAMDirectSoundImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpdsb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFocusWindow<Impl: IAMDirectSoundImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, param0: super::super::Foundation::HWND, param1: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFocusWindow<Impl: IAMDirectSoundImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, param0: *mut super::super::Foundation::HWND, param1: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetDirectSoundInterface::<Impl, IMPL_OFFSET>,
            GetPrimaryBufferInterface::<Impl, IMPL_OFFSET>,
            GetSecondaryBufferInterface::<Impl, IMPL_OFFSET>,
            ReleaseDirectSoundInterface::<Impl, IMPL_OFFSET>,
            ReleasePrimaryBufferInterface::<Impl, IMPL_OFFSET>,
            ReleaseSecondaryBufferInterface::<Impl, IMPL_OFFSET>,
            SetFocusWindow::<Impl, IMPL_OFFSET>,
            GetFocusWindow::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMDirectSound as ::windows::core::Interface>::IID
    }
}
pub trait IAMDroppedFramesImpl: Sized {
    fn GetNumDropped();
    fn GetNumNotDropped();
    fn GetDroppedInfo();
    fn GetAverageFrameSize();
}
impl IAMDroppedFramesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMDroppedFramesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMDroppedFramesVtbl {
        unsafe extern "system" fn GetNumDropped<Impl: IAMDroppedFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pldropped: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumNotDropped<Impl: IAMDroppedFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plnotdropped: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDroppedInfo<Impl: IAMDroppedFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lsize: i32, plarray: *mut i32, plnumcopied: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAverageFrameSize<Impl: IAMDroppedFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plaveragesize: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetNumDropped::<Impl, IMPL_OFFSET>, GetNumNotDropped::<Impl, IMPL_OFFSET>, GetDroppedInfo::<Impl, IMPL_OFFSET>, GetAverageFrameSize::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMDroppedFrames as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMExtDeviceImpl: Sized {
    fn GetCapability();
    fn ExternalDeviceID();
    fn ExternalDeviceVersion();
    fn SetDevicePower();
    fn DevicePower();
    fn Calibrate();
    fn SetDevicePort();
    fn DevicePort();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMExtDeviceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMExtDeviceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMExtDeviceVtbl {
        unsafe extern "system" fn GetCapability<Impl: IAMExtDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, capability: i32, pvalue: *mut i32, pdblvalue: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExternalDeviceID<Impl: IAMExtDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszdata: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExternalDeviceVersion<Impl: IAMExtDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszdata: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDevicePower<Impl: IAMExtDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, powermode: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DevicePower<Impl: IAMExtDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppowermode: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Calibrate<Impl: IAMExtDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hevent: usize, mode: i32, pstatus: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDevicePort<Impl: IAMExtDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, deviceport: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DevicePort<Impl: IAMExtDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdeviceport: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetCapability::<Impl, IMPL_OFFSET>, ExternalDeviceID::<Impl, IMPL_OFFSET>, ExternalDeviceVersion::<Impl, IMPL_OFFSET>, SetDevicePower::<Impl, IMPL_OFFSET>, DevicePower::<Impl, IMPL_OFFSET>, Calibrate::<Impl, IMPL_OFFSET>, SetDevicePort::<Impl, IMPL_OFFSET>, DevicePort::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMExtDevice as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMExtTransportImpl: Sized {
    fn GetCapability();
    fn SetMediaState();
    fn MediaState();
    fn SetLocalControl();
    fn LocalControl();
    fn GetStatus();
    fn GetTransportBasicParameters();
    fn SetTransportBasicParameters();
    fn GetTransportVideoParameters();
    fn SetTransportVideoParameters();
    fn GetTransportAudioParameters();
    fn SetTransportAudioParameters();
    fn SetMode();
    fn Mode();
    fn SetRate();
    fn Rate();
    fn GetChase();
    fn SetChase();
    fn GetBump();
    fn SetBump();
    fn AntiClogControl();
    fn SetAntiClogControl();
    fn GetEditPropertySet();
    fn SetEditPropertySet();
    fn GetEditProperty();
    fn SetEditProperty();
    fn EditStart();
    fn SetEditStart();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMExtTransportVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMExtTransportImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMExtTransportVtbl {
        unsafe extern "system" fn GetCapability<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, capability: i32, pvalue: *mut i32, pdblvalue: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMediaState<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, state: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MediaState<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstate: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLocalControl<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, state: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LocalControl<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstate: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStatus<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, statusitem: i32, pvalue: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTransportBasicParameters<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, param: i32, pvalue: *mut i32, ppszdata: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTransportBasicParameters<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, param: i32, value: i32, pszdata: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTransportVideoParameters<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, param: i32, pvalue: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTransportVideoParameters<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, param: i32, value: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTransportAudioParameters<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, param: i32, pvalue: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTransportAudioParameters<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, param: i32, value: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMode<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Mode<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmode: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRate<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dblrate: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Rate<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdblrate: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetChase<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, penabled: *mut i32, poffset: *mut i32, phevent: *mut usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetChase<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enable: i32, offset: i32, hevent: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBump<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pspeed: *mut i32, pduration: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBump<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, speed: i32, duration: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AntiClogControl<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, penabled: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAntiClogControl<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enable: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEditPropertySet<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, editid: i32, pstate: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEditPropertySet<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, peditid: *mut i32, state: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEditProperty<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, editid: i32, param: i32, pvalue: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEditProperty<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, editid: i32, param: i32, value: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EditStart<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEditStart<Impl: IAMExtTransportImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetCapability::<Impl, IMPL_OFFSET>,
            SetMediaState::<Impl, IMPL_OFFSET>,
            MediaState::<Impl, IMPL_OFFSET>,
            SetLocalControl::<Impl, IMPL_OFFSET>,
            LocalControl::<Impl, IMPL_OFFSET>,
            GetStatus::<Impl, IMPL_OFFSET>,
            GetTransportBasicParameters::<Impl, IMPL_OFFSET>,
            SetTransportBasicParameters::<Impl, IMPL_OFFSET>,
            GetTransportVideoParameters::<Impl, IMPL_OFFSET>,
            SetTransportVideoParameters::<Impl, IMPL_OFFSET>,
            GetTransportAudioParameters::<Impl, IMPL_OFFSET>,
            SetTransportAudioParameters::<Impl, IMPL_OFFSET>,
            SetMode::<Impl, IMPL_OFFSET>,
            Mode::<Impl, IMPL_OFFSET>,
            SetRate::<Impl, IMPL_OFFSET>,
            Rate::<Impl, IMPL_OFFSET>,
            GetChase::<Impl, IMPL_OFFSET>,
            SetChase::<Impl, IMPL_OFFSET>,
            GetBump::<Impl, IMPL_OFFSET>,
            SetBump::<Impl, IMPL_OFFSET>,
            AntiClogControl::<Impl, IMPL_OFFSET>,
            SetAntiClogControl::<Impl, IMPL_OFFSET>,
            GetEditPropertySet::<Impl, IMPL_OFFSET>,
            SetEditPropertySet::<Impl, IMPL_OFFSET>,
            GetEditProperty::<Impl, IMPL_OFFSET>,
            SetEditProperty::<Impl, IMPL_OFFSET>,
            EditStart::<Impl, IMPL_OFFSET>,
            SetEditStart::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMExtTransport as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAMExtendedErrorInfoImpl: Sized + IDispatchImpl {
    fn HasError();
    fn ErrorDescription();
    fn ErrorCode();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAMExtendedErrorInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMExtendedErrorInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMExtendedErrorInfoVtbl {
        unsafe extern "system" fn HasError<Impl: IAMExtendedErrorInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phaserror: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ErrorDescription<Impl: IAMExtendedErrorInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrerrordescription: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ErrorCode<Impl: IAMExtendedErrorInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, perrorcode: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, HasError::<Impl, IMPL_OFFSET>, ErrorDescription::<Impl, IMPL_OFFSET>, ErrorCode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMExtendedErrorInfo as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAMExtendedSeekingImpl: Sized + IDispatchImpl {
    fn ExSeekCapabilities();
    fn MarkerCount();
    fn CurrentMarker();
    fn GetMarkerTime();
    fn GetMarkerName();
    fn SetPlaybackSpeed();
    fn PlaybackSpeed();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAMExtendedSeekingVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMExtendedSeekingImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMExtendedSeekingVtbl {
        unsafe extern "system" fn ExSeekCapabilities<Impl: IAMExtendedSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pexcapabilities: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MarkerCount<Impl: IAMExtendedSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmarkercount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CurrentMarker<Impl: IAMExtendedSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcurrentmarker: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMarkerTime<Impl: IAMExtendedSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, markernum: i32, pmarkertime: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMarkerName<Impl: IAMExtendedSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, markernum: i32, pbstrmarkername: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPlaybackSpeed<Impl: IAMExtendedSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, speed: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlaybackSpeed<Impl: IAMExtendedSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pspeed: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            ExSeekCapabilities::<Impl, IMPL_OFFSET>,
            MarkerCount::<Impl, IMPL_OFFSET>,
            CurrentMarker::<Impl, IMPL_OFFSET>,
            GetMarkerTime::<Impl, IMPL_OFFSET>,
            GetMarkerName::<Impl, IMPL_OFFSET>,
            SetPlaybackSpeed::<Impl, IMPL_OFFSET>,
            PlaybackSpeed::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMExtendedSeeking as ::windows::core::Interface>::IID
    }
}
pub trait IAMFilterGraphCallbackImpl: Sized {
    fn UnableToRender();
}
impl IAMFilterGraphCallbackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMFilterGraphCallbackImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMFilterGraphCallbackVtbl {
        unsafe extern "system" fn UnableToRender<Impl: IAMFilterGraphCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, UnableToRender::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMFilterGraphCallback as ::windows::core::Interface>::IID
    }
}
pub trait IAMFilterMiscFlagsImpl: Sized {
    fn GetMiscFlags();
}
impl IAMFilterMiscFlagsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMFilterMiscFlagsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMFilterMiscFlagsVtbl {
        unsafe extern "system" fn GetMiscFlags<Impl: IAMFilterMiscFlagsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> u32 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetMiscFlags::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMFilterMiscFlags as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IAMGraphBuilderCallbackImpl: Sized {
    fn SelectedFilter();
    fn CreatedFilter();
}
#[cfg(feature = "Win32_System_Com")]
impl IAMGraphBuilderCallbackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMGraphBuilderCallbackImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMGraphBuilderCallbackVtbl {
        unsafe extern "system" fn SelectedFilter<Impl: IAMGraphBuilderCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmon: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreatedFilter<Impl: IAMGraphBuilderCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfil: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SelectedFilter::<Impl, IMPL_OFFSET>, CreatedFilter::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMGraphBuilderCallback as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMGraphStreamsImpl: Sized {
    fn FindUpstreamInterface();
    fn SyncUsingStreamOffset();
    fn SetMaxGraphLatency();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMGraphStreamsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMGraphStreamsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMGraphStreamsVtbl {
        unsafe extern "system" fn FindUpstreamInterface<Impl: IAMGraphStreamsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: ::windows::core::RawPtr, riid: *const ::windows::core::GUID, ppvinterface: *mut *mut ::core::ffi::c_void, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SyncUsingStreamOffset<Impl: IAMGraphStreamsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busestreamoffset: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMaxGraphLatency<Impl: IAMGraphStreamsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rtmaxgraphlatency: i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, FindUpstreamInterface::<Impl, IMPL_OFFSET>, SyncUsingStreamOffset::<Impl, IMPL_OFFSET>, SetMaxGraphLatency::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMGraphStreams as ::windows::core::Interface>::IID
    }
}
pub trait IAMLatencyImpl: Sized {
    fn GetLatency();
}
impl IAMLatencyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMLatencyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMLatencyVtbl {
        unsafe extern "system" fn GetLatency<Impl: IAMLatencyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prtlatency: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetLatency::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMLatency as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IAMLine21DecoderImpl: Sized {
    fn GetDecoderLevel();
    fn GetCurrentService();
    fn SetCurrentService();
    fn GetServiceState();
    fn SetServiceState();
    fn GetOutputFormat();
    fn SetOutputFormat();
    fn GetBackgroundColor();
    fn SetBackgroundColor();
    fn GetRedrawAlways();
    fn SetRedrawAlways();
    fn GetDrawBackgroundMode();
    fn SetDrawBackgroundMode();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl IAMLine21DecoderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMLine21DecoderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMLine21DecoderVtbl {
        unsafe extern "system" fn GetDecoderLevel<Impl: IAMLine21DecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lplevel: *mut AM_LINE21_CCLEVEL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentService<Impl: IAMLine21DecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpservice: *mut AM_LINE21_CCSERVICE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentService<Impl: IAMLine21DecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, service: AM_LINE21_CCSERVICE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceState<Impl: IAMLine21DecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpstate: *mut AM_LINE21_CCSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetServiceState<Impl: IAMLine21DecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, state: AM_LINE21_CCSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputFormat<Impl: IAMLine21DecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpbmih: *mut super::super::Graphics::Gdi::BITMAPINFOHEADER) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputFormat<Impl: IAMLine21DecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpbmi: *mut super::super::Graphics::Gdi::BITMAPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBackgroundColor<Impl: IAMLine21DecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwphyscolor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBackgroundColor<Impl: IAMLine21DecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwphyscolor: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRedrawAlways<Impl: IAMLine21DecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpboption: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRedrawAlways<Impl: IAMLine21DecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, boption: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDrawBackgroundMode<Impl: IAMLine21DecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpmode: *mut AM_LINE21_DRAWBGMODE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDrawBackgroundMode<Impl: IAMLine21DecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: AM_LINE21_DRAWBGMODE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetDecoderLevel::<Impl, IMPL_OFFSET>,
            GetCurrentService::<Impl, IMPL_OFFSET>,
            SetCurrentService::<Impl, IMPL_OFFSET>,
            GetServiceState::<Impl, IMPL_OFFSET>,
            SetServiceState::<Impl, IMPL_OFFSET>,
            GetOutputFormat::<Impl, IMPL_OFFSET>,
            SetOutputFormat::<Impl, IMPL_OFFSET>,
            GetBackgroundColor::<Impl, IMPL_OFFSET>,
            SetBackgroundColor::<Impl, IMPL_OFFSET>,
            GetRedrawAlways::<Impl, IMPL_OFFSET>,
            SetRedrawAlways::<Impl, IMPL_OFFSET>,
            GetDrawBackgroundMode::<Impl, IMPL_OFFSET>,
            SetDrawBackgroundMode::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMLine21Decoder as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAMMediaContentImpl: Sized + IDispatchImpl {
    fn AuthorName();
    fn Title();
    fn Rating();
    fn Description();
    fn Copyright();
    fn BaseURL();
    fn LogoURL();
    fn LogoIconURL();
    fn WatermarkURL();
    fn MoreInfoURL();
    fn MoreInfoBannerImage();
    fn MoreInfoBannerURL();
    fn MoreInfoText();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAMMediaContentVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMMediaContentImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMMediaContentVtbl {
        unsafe extern "system" fn AuthorName<Impl: IAMMediaContentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrauthorname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Title<Impl: IAMMediaContentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrtitle: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Rating<Impl: IAMMediaContentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrrating: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Description<Impl: IAMMediaContentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrdescription: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Copyright<Impl: IAMMediaContentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrcopyright: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BaseURL<Impl: IAMMediaContentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrbaseurl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LogoURL<Impl: IAMMediaContentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrlogourl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LogoIconURL<Impl: IAMMediaContentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrlogourl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WatermarkURL<Impl: IAMMediaContentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrwatermarkurl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MoreInfoURL<Impl: IAMMediaContentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrmoreinfourl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MoreInfoBannerImage<Impl: IAMMediaContentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrmoreinfobannerimage: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MoreInfoBannerURL<Impl: IAMMediaContentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrmoreinfobannerurl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MoreInfoText<Impl: IAMMediaContentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrmoreinfotext: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            AuthorName::<Impl, IMPL_OFFSET>,
            Title::<Impl, IMPL_OFFSET>,
            Rating::<Impl, IMPL_OFFSET>,
            Description::<Impl, IMPL_OFFSET>,
            Copyright::<Impl, IMPL_OFFSET>,
            BaseURL::<Impl, IMPL_OFFSET>,
            LogoURL::<Impl, IMPL_OFFSET>,
            LogoIconURL::<Impl, IMPL_OFFSET>,
            WatermarkURL::<Impl, IMPL_OFFSET>,
            MoreInfoURL::<Impl, IMPL_OFFSET>,
            MoreInfoBannerImage::<Impl, IMPL_OFFSET>,
            MoreInfoBannerURL::<Impl, IMPL_OFFSET>,
            MoreInfoText::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMMediaContent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAMMediaContent2Impl: Sized + IDispatchImpl {
    fn MediaParameter();
    fn MediaParameterName();
    fn PlaylistCount();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAMMediaContent2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMMediaContent2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMMediaContent2Vtbl {
        unsafe extern "system" fn MediaParameter<Impl: IAMMediaContent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entrynum: i32, bstrname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pbstrvalue: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MediaParameterName<Impl: IAMMediaContent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entrynum: i32, index: i32, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlaylistCount<Impl: IAMMediaContent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnumberentries: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, MediaParameter::<Impl, IMPL_OFFSET>, MediaParameterName::<Impl, IMPL_OFFSET>, PlaylistCount::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMMediaContent2 as ::windows::core::Interface>::IID
    }
}
pub trait IAMMediaStreamImpl: Sized + IMediaStreamImpl {
    fn Initialize();
    fn SetState();
    fn JoinAMMultiMediaStream();
    fn JoinFilter();
    fn JoinFilterGraph();
}
impl IAMMediaStreamVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMMediaStreamImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMMediaStreamVtbl {
        unsafe extern "system" fn Initialize<Impl: IAMMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psourceobject: *mut ::core::ffi::c_void, dwflags: u32, purposeid: *const ::windows::core::GUID, streamtype: STREAM_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetState<Impl: IAMMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, state: FILTER_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn JoinAMMultiMediaStream<Impl: IAMMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pammultimediastream: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn JoinFilter<Impl: IAMMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmediastreamfilter: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn JoinFilterGraph<Impl: IAMMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfiltergraph: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetMultiMediaStream::<Impl, IMPL_OFFSET>,
            GetInformation::<Impl, IMPL_OFFSET>,
            SetSameFormat::<Impl, IMPL_OFFSET>,
            AllocateSample::<Impl, IMPL_OFFSET>,
            CreateSharedSample::<Impl, IMPL_OFFSET>,
            SendEndOfStream::<Impl, IMPL_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            SetState::<Impl, IMPL_OFFSET>,
            JoinAMMultiMediaStream::<Impl, IMPL_OFFSET>,
            JoinFilter::<Impl, IMPL_OFFSET>,
            JoinFilterGraph::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMMediaStream as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMMediaTypeSampleImpl: Sized + IStreamSampleImpl {
    fn SetPointer();
    fn GetPointer();
    fn GetSize();
    fn GetTime();
    fn SetTime();
    fn IsSyncPoint();
    fn SetSyncPoint();
    fn IsPreroll();
    fn SetPreroll();
    fn GetActualDataLength();
    fn SetActualDataLength();
    fn GetMediaType();
    fn SetMediaType();
    fn IsDiscontinuity();
    fn SetDiscontinuity();
    fn GetMediaTime();
    fn SetMediaTime();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMMediaTypeSampleVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMMediaTypeSampleImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMMediaTypeSampleVtbl {
        unsafe extern "system" fn SetPointer<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbuffer: *const u8, lsize: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPointer<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppbuffer: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSize<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> i32 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTime<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptimestart: *mut i64, ptimeend: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTime<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptimestart: *const i64, ptimeend: *const i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsSyncPoint<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSyncPoint<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bissyncpoint: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsPreroll<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPreroll<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bispreroll: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetActualDataLength<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> i32 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetActualDataLength<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, __midl__iammediatypesample0000: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMediaType<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppmediatype: *mut *mut AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMediaType<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmediatype: *const AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsDiscontinuity<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDiscontinuity<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bdiscontinuity: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMediaTime<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptimestart: *mut i64, ptimeend: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMediaTime<Impl: IAMMediaTypeSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptimestart: *const i64, ptimeend: *const i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetMediaStream::<Impl, IMPL_OFFSET>,
            GetSampleTimes::<Impl, IMPL_OFFSET>,
            SetSampleTimes::<Impl, IMPL_OFFSET>,
            Update::<Impl, IMPL_OFFSET>,
            CompletionStatus::<Impl, IMPL_OFFSET>,
            SetPointer::<Impl, IMPL_OFFSET>,
            GetPointer::<Impl, IMPL_OFFSET>,
            GetSize::<Impl, IMPL_OFFSET>,
            GetTime::<Impl, IMPL_OFFSET>,
            SetTime::<Impl, IMPL_OFFSET>,
            IsSyncPoint::<Impl, IMPL_OFFSET>,
            SetSyncPoint::<Impl, IMPL_OFFSET>,
            IsPreroll::<Impl, IMPL_OFFSET>,
            SetPreroll::<Impl, IMPL_OFFSET>,
            GetActualDataLength::<Impl, IMPL_OFFSET>,
            SetActualDataLength::<Impl, IMPL_OFFSET>,
            GetMediaType::<Impl, IMPL_OFFSET>,
            SetMediaType::<Impl, IMPL_OFFSET>,
            IsDiscontinuity::<Impl, IMPL_OFFSET>,
            SetDiscontinuity::<Impl, IMPL_OFFSET>,
            GetMediaTime::<Impl, IMPL_OFFSET>,
            SetMediaTime::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMMediaTypeSample as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMMediaTypeStreamImpl: Sized + IMediaStreamImpl {
    fn GetFormat();
    fn SetFormat();
    fn CreateSample();
    fn GetStreamAllocatorRequirements();
    fn SetStreamAllocatorRequirements();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMMediaTypeStreamVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMMediaTypeStreamImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMMediaTypeStreamVtbl {
        unsafe extern "system" fn GetFormat<Impl: IAMMediaTypeStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmediatype: *mut AM_MEDIA_TYPE, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFormat<Impl: IAMMediaTypeStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmediatype: *const AM_MEDIA_TYPE, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateSample<Impl: IAMMediaTypeStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lsamplesize: i32, pbbuffer: *const u8, dwflags: u32, punkouter: *mut ::core::ffi::c_void, ppammediatypesample: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStreamAllocatorRequirements<Impl: IAMMediaTypeStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pprops: *mut ALLOCATOR_PROPERTIES) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetStreamAllocatorRequirements<Impl: IAMMediaTypeStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pprops: *const ALLOCATOR_PROPERTIES) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetMultiMediaStream::<Impl, IMPL_OFFSET>,
            GetInformation::<Impl, IMPL_OFFSET>,
            SetSameFormat::<Impl, IMPL_OFFSET>,
            AllocateSample::<Impl, IMPL_OFFSET>,
            CreateSharedSample::<Impl, IMPL_OFFSET>,
            SendEndOfStream::<Impl, IMPL_OFFSET>,
            GetFormat::<Impl, IMPL_OFFSET>,
            SetFormat::<Impl, IMPL_OFFSET>,
            CreateSample::<Impl, IMPL_OFFSET>,
            GetStreamAllocatorRequirements::<Impl, IMPL_OFFSET>,
            SetStreamAllocatorRequirements::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMMediaTypeStream as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IAMMultiMediaStreamImpl: Sized + IMultiMediaStreamImpl {
    fn Initialize();
    fn GetFilterGraph();
    fn GetFilter();
    fn AddMediaStream();
    fn OpenFile();
    fn OpenMoniker();
    fn Render();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IAMMultiMediaStreamVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMMultiMediaStreamImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMMultiMediaStreamVtbl {
        unsafe extern "system" fn Initialize<Impl: IAMMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, streamtype: STREAM_TYPE, dwflags: AMMSF_MMS_INIT_FLAGS, pfiltergraph: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFilterGraph<Impl: IAMMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppgraphbuilder: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFilter<Impl: IAMMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppfilter: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddMediaStream<Impl: IAMMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstreamobject: *mut ::core::ffi::c_void, purposeid: *const ::windows::core::GUID, dwflags: AMMSF_MS_FLAGS, ppnewstream: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenFile<Impl: IAMMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfilename: super::super::Foundation::PWSTR, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenMoniker<Impl: IAMMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pctx: ::windows::core::RawPtr, pmoniker: ::windows::core::RawPtr, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Render<Impl: IAMMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetInformation::<Impl, IMPL_OFFSET>,
            GetMediaStream::<Impl, IMPL_OFFSET>,
            EnumMediaStreams::<Impl, IMPL_OFFSET>,
            GetState::<Impl, IMPL_OFFSET>,
            SetState::<Impl, IMPL_OFFSET>,
            GetTime::<Impl, IMPL_OFFSET>,
            GetDuration::<Impl, IMPL_OFFSET>,
            Seek::<Impl, IMPL_OFFSET>,
            GetEndOfStreamEventHandle::<Impl, IMPL_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetFilterGraph::<Impl, IMPL_OFFSET>,
            GetFilter::<Impl, IMPL_OFFSET>,
            AddMediaStream::<Impl, IMPL_OFFSET>,
            OpenFile::<Impl, IMPL_OFFSET>,
            OpenMoniker::<Impl, IMPL_OFFSET>,
            Render::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMMultiMediaStream as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAMNetShowConfigImpl: Sized + IDispatchImpl {
    fn BufferingTime();
    fn SetBufferingTime();
    fn UseFixedUDPPort();
    fn SetUseFixedUDPPort();
    fn FixedUDPPort();
    fn SetFixedUDPPort();
    fn UseHTTPProxy();
    fn SetUseHTTPProxy();
    fn EnableAutoProxy();
    fn SetEnableAutoProxy();
    fn HTTPProxyHost();
    fn SetHTTPProxyHost();
    fn HTTPProxyPort();
    fn SetHTTPProxyPort();
    fn EnableMulticast();
    fn SetEnableMulticast();
    fn EnableUDP();
    fn SetEnableUDP();
    fn EnableTCP();
    fn SetEnableTCP();
    fn EnableHTTP();
    fn SetEnableHTTP();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAMNetShowConfigVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMNetShowConfigImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMNetShowConfigVtbl {
        unsafe extern "system" fn BufferingTime<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbufferingtime: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBufferingTime<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bufferingtime: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UseFixedUDPPort<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pusefixedudpport: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetUseFixedUDPPort<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, usefixedudpport: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FixedUDPPort<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfixedudpport: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFixedUDPPort<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fixedudpport: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UseHTTPProxy<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pusehttpproxy: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetUseHTTPProxy<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, usehttpproxy: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnableAutoProxy<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, penableautoproxy: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEnableAutoProxy<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enableautoproxy: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HTTPProxyHost<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrhttpproxyhost: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetHTTPProxyHost<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrhttpproxyhost: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HTTPProxyPort<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phttpproxyport: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetHTTPProxyPort<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, httpproxyport: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnableMulticast<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, penablemulticast: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEnableMulticast<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enablemulticast: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnableUDP<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, penableudp: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEnableUDP<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enableudp: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnableTCP<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, penabletcp: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEnableTCP<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enabletcp: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnableHTTP<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, penablehttp: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEnableHTTP<Impl: IAMNetShowConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enablehttp: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            BufferingTime::<Impl, IMPL_OFFSET>,
            SetBufferingTime::<Impl, IMPL_OFFSET>,
            UseFixedUDPPort::<Impl, IMPL_OFFSET>,
            SetUseFixedUDPPort::<Impl, IMPL_OFFSET>,
            FixedUDPPort::<Impl, IMPL_OFFSET>,
            SetFixedUDPPort::<Impl, IMPL_OFFSET>,
            UseHTTPProxy::<Impl, IMPL_OFFSET>,
            SetUseHTTPProxy::<Impl, IMPL_OFFSET>,
            EnableAutoProxy::<Impl, IMPL_OFFSET>,
            SetEnableAutoProxy::<Impl, IMPL_OFFSET>,
            HTTPProxyHost::<Impl, IMPL_OFFSET>,
            SetHTTPProxyHost::<Impl, IMPL_OFFSET>,
            HTTPProxyPort::<Impl, IMPL_OFFSET>,
            SetHTTPProxyPort::<Impl, IMPL_OFFSET>,
            EnableMulticast::<Impl, IMPL_OFFSET>,
            SetEnableMulticast::<Impl, IMPL_OFFSET>,
            EnableUDP::<Impl, IMPL_OFFSET>,
            SetEnableUDP::<Impl, IMPL_OFFSET>,
            EnableTCP::<Impl, IMPL_OFFSET>,
            SetEnableTCP::<Impl, IMPL_OFFSET>,
            EnableHTTP::<Impl, IMPL_OFFSET>,
            SetEnableHTTP::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMNetShowConfig as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAMNetShowExPropsImpl: Sized + IDispatchImpl {
    fn SourceProtocol();
    fn Bandwidth();
    fn ErrorCorrection();
    fn CodecCount();
    fn GetCodecInstalled();
    fn GetCodecDescription();
    fn GetCodecURL();
    fn CreationDate();
    fn SourceLink();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAMNetShowExPropsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMNetShowExPropsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMNetShowExPropsVtbl {
        unsafe extern "system" fn SourceProtocol<Impl: IAMNetShowExPropsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psourceprotocol: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Bandwidth<Impl: IAMNetShowExPropsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbandwidth: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ErrorCorrection<Impl: IAMNetShowExPropsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrerrorcorrection: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CodecCount<Impl: IAMNetShowExPropsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcodeccount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCodecInstalled<Impl: IAMNetShowExPropsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, codecnum: i32, pcodecinstalled: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCodecDescription<Impl: IAMNetShowExPropsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, codecnum: i32, pbstrcodecdescription: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCodecURL<Impl: IAMNetShowExPropsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, codecnum: i32, pbstrcodecurl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreationDate<Impl: IAMNetShowExPropsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcreationdate: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SourceLink<Impl: IAMNetShowExPropsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrsourcelink: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            SourceProtocol::<Impl, IMPL_OFFSET>,
            Bandwidth::<Impl, IMPL_OFFSET>,
            ErrorCorrection::<Impl, IMPL_OFFSET>,
            CodecCount::<Impl, IMPL_OFFSET>,
            GetCodecInstalled::<Impl, IMPL_OFFSET>,
            GetCodecDescription::<Impl, IMPL_OFFSET>,
            GetCodecURL::<Impl, IMPL_OFFSET>,
            CreationDate::<Impl, IMPL_OFFSET>,
            SourceLink::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMNetShowExProps as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAMNetShowPrerollImpl: Sized + IDispatchImpl {
    fn SetPreroll();
    fn Preroll();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAMNetShowPrerollVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMNetShowPrerollImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMNetShowPrerollVtbl {
        unsafe extern "system" fn SetPreroll<Impl: IAMNetShowPrerollImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fpreroll: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Preroll<Impl: IAMNetShowPrerollImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfpreroll: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, SetPreroll::<Impl, IMPL_OFFSET>, Preroll::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMNetShowPreroll as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAMNetworkStatusImpl: Sized + IDispatchImpl {
    fn ReceivedPackets();
    fn RecoveredPackets();
    fn LostPackets();
    fn ReceptionQuality();
    fn BufferingCount();
    fn IsBroadcast();
    fn BufferingProgress();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAMNetworkStatusVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMNetworkStatusImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMNetworkStatusVtbl {
        unsafe extern "system" fn ReceivedPackets<Impl: IAMNetworkStatusImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, preceivedpackets: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RecoveredPackets<Impl: IAMNetworkStatusImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, precoveredpackets: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LostPackets<Impl: IAMNetworkStatusImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plostpackets: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReceptionQuality<Impl: IAMNetworkStatusImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, preceptionquality: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BufferingCount<Impl: IAMNetworkStatusImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbufferingcount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsBroadcast<Impl: IAMNetworkStatusImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pisbroadcast: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BufferingProgress<Impl: IAMNetworkStatusImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbufferingprogress: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            ReceivedPackets::<Impl, IMPL_OFFSET>,
            RecoveredPackets::<Impl, IMPL_OFFSET>,
            LostPackets::<Impl, IMPL_OFFSET>,
            ReceptionQuality::<Impl, IMPL_OFFSET>,
            BufferingCount::<Impl, IMPL_OFFSET>,
            IsBroadcast::<Impl, IMPL_OFFSET>,
            BufferingProgress::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMNetworkStatus as ::windows::core::Interface>::IID
    }
}
pub trait IAMOpenProgressImpl: Sized {
    fn QueryProgress();
    fn AbortOperation();
}
impl IAMOpenProgressVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMOpenProgressImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMOpenProgressVtbl {
        unsafe extern "system" fn QueryProgress<Impl: IAMOpenProgressImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plltotal: *mut i64, pllcurrent: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AbortOperation<Impl: IAMOpenProgressImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, QueryProgress::<Impl, IMPL_OFFSET>, AbortOperation::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMOpenProgress as ::windows::core::Interface>::IID
    }
}
pub trait IAMOverlayFXImpl: Sized {
    fn QueryOverlayFXCaps();
    fn SetOverlayFX();
    fn GetOverlayFX();
}
impl IAMOverlayFXVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMOverlayFXImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMOverlayFXVtbl {
        unsafe extern "system" fn QueryOverlayFXCaps<Impl: IAMOverlayFXImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpdwoverlayfxcaps: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOverlayFX<Impl: IAMOverlayFXImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwoverlayfx: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOverlayFX<Impl: IAMOverlayFXImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpdwoverlayfx: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, QueryOverlayFXCaps::<Impl, IMPL_OFFSET>, SetOverlayFX::<Impl, IMPL_OFFSET>, GetOverlayFX::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMOverlayFX as ::windows::core::Interface>::IID
    }
}
pub trait IAMParseImpl: Sized {
    fn GetParseTime();
    fn SetParseTime();
    fn Flush();
}
impl IAMParseVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMParseImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMParseVtbl {
        unsafe extern "system" fn GetParseTime<Impl: IAMParseImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prtcurrent: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetParseTime<Impl: IAMParseImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rtcurrent: i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Flush<Impl: IAMParseImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetParseTime::<Impl, IMPL_OFFSET>, SetParseTime::<Impl, IMPL_OFFSET>, Flush::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMParse as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMPhysicalPinInfoImpl: Sized {
    fn GetPhysicalType();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMPhysicalPinInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMPhysicalPinInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMPhysicalPinInfoVtbl {
        unsafe extern "system" fn GetPhysicalType<Impl: IAMPhysicalPinInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptype: *mut i32, ppsztype: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetPhysicalType::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMPhysicalPinInfo as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMPlayListImpl: Sized {
    fn GetFlags();
    fn GetItemCount();
    fn GetItem();
    fn GetNamedEvent();
    fn GetRepeatInfo();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMPlayListVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMPlayListImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMPlayListVtbl {
        unsafe extern "system" fn GetFlags<Impl: IAMPlayListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetItemCount<Impl: IAMPlayListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwitems: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetItem<Impl: IAMPlayListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwitemindex: u32, ppitem: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNamedEvent<Impl: IAMPlayListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszeventname: super::super::Foundation::PWSTR, dwitemindex: u32, ppitem: *mut ::windows::core::RawPtr, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRepeatInfo<Impl: IAMPlayListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwrepeatcount: *mut u32, pdwrepeatstart: *mut u32, pdwrepeatend: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetFlags::<Impl, IMPL_OFFSET>, GetItemCount::<Impl, IMPL_OFFSET>, GetItem::<Impl, IMPL_OFFSET>, GetNamedEvent::<Impl, IMPL_OFFSET>, GetRepeatInfo::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMPlayList as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMPlayListItemImpl: Sized {
    fn GetFlags();
    fn GetSourceCount();
    fn GetSourceURL();
    fn GetSourceStart();
    fn GetSourceDuration();
    fn GetSourceStartMarker();
    fn GetSourceEndMarker();
    fn GetSourceStartMarkerName();
    fn GetSourceEndMarkerName();
    fn GetLinkURL();
    fn GetScanDuration();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMPlayListItemVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMPlayListItemImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMPlayListItemVtbl {
        unsafe extern "system" fn GetFlags<Impl: IAMPlayListItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceCount<Impl: IAMPlayListItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwsources: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceURL<Impl: IAMPlayListItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourceindex: u32, pbstrurl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceStart<Impl: IAMPlayListItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourceindex: u32, prtstart: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceDuration<Impl: IAMPlayListItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourceindex: u32, prtduration: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceStartMarker<Impl: IAMPlayListItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourceindex: u32, pdwmarker: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEndMarker<Impl: IAMPlayListItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourceindex: u32, pdwmarker: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceStartMarkerName<Impl: IAMPlayListItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourceindex: u32, pbstrstartmarker: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEndMarkerName<Impl: IAMPlayListItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourceindex: u32, pbstrendmarker: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLinkURL<Impl: IAMPlayListItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrurl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScanDuration<Impl: IAMPlayListItemImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourceindex: u32, prtscanduration: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetFlags::<Impl, IMPL_OFFSET>,
            GetSourceCount::<Impl, IMPL_OFFSET>,
            GetSourceURL::<Impl, IMPL_OFFSET>,
            GetSourceStart::<Impl, IMPL_OFFSET>,
            GetSourceDuration::<Impl, IMPL_OFFSET>,
            GetSourceStartMarker::<Impl, IMPL_OFFSET>,
            GetSourceEndMarker::<Impl, IMPL_OFFSET>,
            GetSourceStartMarkerName::<Impl, IMPL_OFFSET>,
            GetSourceEndMarkerName::<Impl, IMPL_OFFSET>,
            GetLinkURL::<Impl, IMPL_OFFSET>,
            GetScanDuration::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMPlayListItem as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMPluginControlImpl: Sized {
    fn GetPreferredClsid();
    fn GetPreferredClsidByIndex();
    fn SetPreferredClsid();
    fn IsDisabled();
    fn GetDisabledByIndex();
    fn SetDisabled();
    fn IsLegacyDisabled();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMPluginControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMPluginControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMPluginControlVtbl {
        unsafe extern "system" fn GetPreferredClsid<Impl: IAMPluginControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, subtype: *const ::windows::core::GUID, clsid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPreferredClsidByIndex<Impl: IAMPluginControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, subtype: *mut ::windows::core::GUID, clsid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPreferredClsid<Impl: IAMPluginControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, subtype: *const ::windows::core::GUID, clsid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsDisabled<Impl: IAMPluginControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDisabledByIndex<Impl: IAMPluginControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, clsid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDisabled<Impl: IAMPluginControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsid: *const ::windows::core::GUID, disabled: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsLegacyDisabled<Impl: IAMPluginControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dllname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetPreferredClsid::<Impl, IMPL_OFFSET>, GetPreferredClsidByIndex::<Impl, IMPL_OFFSET>, SetPreferredClsid::<Impl, IMPL_OFFSET>, IsDisabled::<Impl, IMPL_OFFSET>, GetDisabledByIndex::<Impl, IMPL_OFFSET>, SetDisabled::<Impl, IMPL_OFFSET>, IsLegacyDisabled::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMPluginControl as ::windows::core::Interface>::IID
    }
}
pub trait IAMPushSourceImpl: Sized + IAMLatencyImpl {
    fn GetPushSourceFlags();
    fn SetPushSourceFlags();
    fn SetStreamOffset();
    fn GetStreamOffset();
    fn GetMaxStreamOffset();
    fn SetMaxStreamOffset();
}
impl IAMPushSourceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMPushSourceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMPushSourceVtbl {
        unsafe extern "system" fn GetPushSourceFlags<Impl: IAMPushSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPushSourceFlags<Impl: IAMPushSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetStreamOffset<Impl: IAMPushSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rtoffset: i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStreamOffset<Impl: IAMPushSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prtoffset: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMaxStreamOffset<Impl: IAMPushSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prtmaxoffset: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMaxStreamOffset<Impl: IAMPushSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rtmaxoffset: i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetLatency::<Impl, IMPL_OFFSET>, GetPushSourceFlags::<Impl, IMPL_OFFSET>, SetPushSourceFlags::<Impl, IMPL_OFFSET>, SetStreamOffset::<Impl, IMPL_OFFSET>, GetStreamOffset::<Impl, IMPL_OFFSET>, GetMaxStreamOffset::<Impl, IMPL_OFFSET>, SetMaxStreamOffset::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMPushSource as ::windows::core::Interface>::IID
    }
}
pub trait IAMRebuildImpl: Sized {
    fn RebuildNow();
}
impl IAMRebuildVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMRebuildImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMRebuildVtbl {
        unsafe extern "system" fn RebuildNow<Impl: IAMRebuildImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, RebuildNow::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMRebuild as ::windows::core::Interface>::IID
    }
}
pub trait IAMResourceControlImpl: Sized {
    fn Reserve();
}
impl IAMResourceControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMResourceControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMResourceControlVtbl {
        unsafe extern "system" fn Reserve<Impl: IAMResourceControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, pvreserved: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Reserve::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMResourceControl as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAMStatsImpl: Sized + IDispatchImpl {
    fn Reset();
    fn Count();
    fn GetValueByIndex();
    fn GetValueByName();
    fn GetIndex();
    fn AddValue();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAMStatsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMStatsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMStatsVtbl {
        unsafe extern "system" fn Reset<Impl: IAMStatsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Count<Impl: IAMStatsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plcount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetValueByIndex<Impl: IAMStatsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lindex: i32, szname: *mut super::super::Foundation::BSTR, lcount: *mut i32, dlast: *mut f64, daverage: *mut f64, dstddev: *mut f64, dmin: *mut f64, dmax: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetValueByName<Impl: IAMStatsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, szname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, lindex: *mut i32, lcount: *mut i32, dlast: *mut f64, daverage: *mut f64, dstddev: *mut f64, dmin: *mut f64, dmax: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIndex<Impl: IAMStatsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, szname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, lcreate: i32, plindex: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddValue<Impl: IAMStatsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lindex: i32, dvalue: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Reset::<Impl, IMPL_OFFSET>,
            Count::<Impl, IMPL_OFFSET>,
            GetValueByIndex::<Impl, IMPL_OFFSET>,
            GetValueByName::<Impl, IMPL_OFFSET>,
            GetIndex::<Impl, IMPL_OFFSET>,
            AddValue::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMStats as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMStreamConfigImpl: Sized {
    fn SetFormat();
    fn GetFormat();
    fn GetNumberOfCapabilities();
    fn GetStreamCaps();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMStreamConfigVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMStreamConfigImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMStreamConfigVtbl {
        unsafe extern "system" fn SetFormat<Impl: IAMStreamConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmt: *mut AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFormat<Impl: IAMStreamConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppmt: *mut *mut AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberOfCapabilities<Impl: IAMStreamConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, picount: *mut i32, pisize: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStreamCaps<Impl: IAMStreamConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, iindex: i32, ppmt: *mut *mut AM_MEDIA_TYPE, pscc: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetFormat::<Impl, IMPL_OFFSET>, GetFormat::<Impl, IMPL_OFFSET>, GetNumberOfCapabilities::<Impl, IMPL_OFFSET>, GetStreamCaps::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMStreamConfig as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMStreamControlImpl: Sized {
    fn StartAt();
    fn StopAt();
    fn GetInfo();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMStreamControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMStreamControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMStreamControlVtbl {
        unsafe extern "system" fn StartAt<Impl: IAMStreamControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptstart: *const i64, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StopAt<Impl: IAMStreamControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptstop: *const i64, bsendextra: super::super::Foundation::BOOL, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInfo<Impl: IAMStreamControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pinfo: *mut AM_STREAM_INFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, StartAt::<Impl, IMPL_OFFSET>, StopAt::<Impl, IMPL_OFFSET>, GetInfo::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMStreamControl as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMStreamSelectImpl: Sized {
    fn Count();
    fn Info();
    fn Enable();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMStreamSelectVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMStreamSelectImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMStreamSelectVtbl {
        unsafe extern "system" fn Count<Impl: IAMStreamSelectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcstreams: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Info<Impl: IAMStreamSelectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lindex: i32, ppmt: *mut *mut AM_MEDIA_TYPE, pdwflags: *mut u32, plcid: *mut u32, pdwgroup: *mut u32, ppszname: *mut super::super::Foundation::PWSTR, ppobject: *mut *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Enable<Impl: IAMStreamSelectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lindex: i32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Count::<Impl, IMPL_OFFSET>, Info::<Impl, IMPL_OFFSET>, Enable::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMStreamSelect as ::windows::core::Interface>::IID
    }
}
pub trait IAMTVAudioImpl: Sized {
    fn GetHardwareSupportedTVAudioModes();
    fn GetAvailableTVAudioModes();
    fn TVAudioMode();
    fn SetTVAudioMode();
    fn RegisterNotificationCallBack();
    fn UnRegisterNotificationCallBack();
}
impl IAMTVAudioVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMTVAudioImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMTVAudioVtbl {
        unsafe extern "system" fn GetHardwareSupportedTVAudioModes<Impl: IAMTVAudioImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plmodes: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAvailableTVAudioModes<Impl: IAMTVAudioImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plmodes: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TVAudioMode<Impl: IAMTVAudioImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plmode: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTVAudioMode<Impl: IAMTVAudioImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lmode: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterNotificationCallBack<Impl: IAMTVAudioImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnotify: ::windows::core::RawPtr, levents: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnRegisterNotificationCallBack<Impl: IAMTVAudioImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnotify: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetHardwareSupportedTVAudioModes::<Impl, IMPL_OFFSET>, GetAvailableTVAudioModes::<Impl, IMPL_OFFSET>, TVAudioMode::<Impl, IMPL_OFFSET>, SetTVAudioMode::<Impl, IMPL_OFFSET>, RegisterNotificationCallBack::<Impl, IMPL_OFFSET>, UnRegisterNotificationCallBack::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMTVAudio as ::windows::core::Interface>::IID
    }
}
pub trait IAMTVAudioNotificationImpl: Sized {
    fn OnEvent();
}
impl IAMTVAudioNotificationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMTVAudioNotificationImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMTVAudioNotificationVtbl {
        unsafe extern "system" fn OnEvent<Impl: IAMTVAudioNotificationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, event: AMTVAudioEventType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, OnEvent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMTVAudioNotification as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMTVTunerImpl: Sized + IAMTunerImpl {
    fn AvailableTVFormats();
    fn TVFormat();
    fn AutoTune();
    fn StoreAutoTune();
    fn NumInputConnections();
    fn SetInputType();
    fn InputType();
    fn SetConnectInput();
    fn ConnectInput();
    fn VideoFrequency();
    fn AudioFrequency();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMTVTunerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMTVTunerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMTVTunerVtbl {
        unsafe extern "system" fn AvailableTVFormats<Impl: IAMTVTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lanalogvideostandard: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TVFormat<Impl: IAMTVTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, planalogvideostandard: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AutoTune<Impl: IAMTVTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lchannel: i32, plfoundsignal: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StoreAutoTune<Impl: IAMTVTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NumInputConnections<Impl: IAMTVTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plnuminputconnections: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInputType<Impl: IAMTVTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lindex: i32, inputtype: TunerInputType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InputType<Impl: IAMTVTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lindex: i32, pinputtype: *mut TunerInputType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetConnectInput<Impl: IAMTVTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lindex: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectInput<Impl: IAMTVTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plindex: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VideoFrequency<Impl: IAMTVTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lfreq: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AudioFrequency<Impl: IAMTVTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lfreq: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetChannel::<Impl, IMPL_OFFSET>,
            Channel::<Impl, IMPL_OFFSET>,
            ChannelMinMax::<Impl, IMPL_OFFSET>,
            SetCountryCode::<Impl, IMPL_OFFSET>,
            CountryCode::<Impl, IMPL_OFFSET>,
            SetTuningSpace::<Impl, IMPL_OFFSET>,
            TuningSpace::<Impl, IMPL_OFFSET>,
            Logon::<Impl, IMPL_OFFSET>,
            Logout::<Impl, IMPL_OFFSET>,
            SignalPresent::<Impl, IMPL_OFFSET>,
            SetMode::<Impl, IMPL_OFFSET>,
            Mode::<Impl, IMPL_OFFSET>,
            GetAvailableModes::<Impl, IMPL_OFFSET>,
            RegisterNotificationCallBack::<Impl, IMPL_OFFSET>,
            UnRegisterNotificationCallBack::<Impl, IMPL_OFFSET>,
            AvailableTVFormats::<Impl, IMPL_OFFSET>,
            TVFormat::<Impl, IMPL_OFFSET>,
            AutoTune::<Impl, IMPL_OFFSET>,
            StoreAutoTune::<Impl, IMPL_OFFSET>,
            NumInputConnections::<Impl, IMPL_OFFSET>,
            SetInputType::<Impl, IMPL_OFFSET>,
            InputType::<Impl, IMPL_OFFSET>,
            SetConnectInput::<Impl, IMPL_OFFSET>,
            ConnectInput::<Impl, IMPL_OFFSET>,
            VideoFrequency::<Impl, IMPL_OFFSET>,
            AudioFrequency::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMTVTuner as ::windows::core::Interface>::IID
    }
}
pub trait IAMTimecodeDisplayImpl: Sized {
    fn GetTCDisplayEnable();
    fn SetTCDisplayEnable();
    fn GetTCDisplay();
    fn SetTCDisplay();
}
impl IAMTimecodeDisplayVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMTimecodeDisplayImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMTimecodeDisplayVtbl {
        unsafe extern "system" fn GetTCDisplayEnable<Impl: IAMTimecodeDisplayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstate: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTCDisplayEnable<Impl: IAMTimecodeDisplayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, state: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTCDisplay<Impl: IAMTimecodeDisplayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, param: i32, pvalue: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTCDisplay<Impl: IAMTimecodeDisplayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, param: i32, value: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTCDisplayEnable::<Impl, IMPL_OFFSET>, SetTCDisplayEnable::<Impl, IMPL_OFFSET>, GetTCDisplay::<Impl, IMPL_OFFSET>, SetTCDisplay::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMTimecodeDisplay as ::windows::core::Interface>::IID
    }
}
pub trait IAMTimecodeGeneratorImpl: Sized {
    fn GetTCGMode();
    fn SetTCGMode();
    fn SetVITCLine();
    fn VITCLine();
    fn SetTimecode();
    fn GetTimecode();
}
impl IAMTimecodeGeneratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMTimecodeGeneratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMTimecodeGeneratorVtbl {
        unsafe extern "system" fn GetTCGMode<Impl: IAMTimecodeGeneratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, param: i32, pvalue: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTCGMode<Impl: IAMTimecodeGeneratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, param: i32, value: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetVITCLine<Impl: IAMTimecodeGeneratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VITCLine<Impl: IAMTimecodeGeneratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pline: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTimecode<Impl: IAMTimecodeGeneratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptimecodesample: *mut super::TIMECODE_SAMPLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTimecode<Impl: IAMTimecodeGeneratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptimecodesample: *mut super::TIMECODE_SAMPLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTCGMode::<Impl, IMPL_OFFSET>, SetTCGMode::<Impl, IMPL_OFFSET>, SetVITCLine::<Impl, IMPL_OFFSET>, VITCLine::<Impl, IMPL_OFFSET>, SetTimecode::<Impl, IMPL_OFFSET>, GetTimecode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMTimecodeGenerator as ::windows::core::Interface>::IID
    }
}
pub trait IAMTimecodeReaderImpl: Sized {
    fn GetTCRMode();
    fn SetTCRMode();
    fn SetVITCLine();
    fn VITCLine();
    fn GetTimecode();
}
impl IAMTimecodeReaderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMTimecodeReaderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMTimecodeReaderVtbl {
        unsafe extern "system" fn GetTCRMode<Impl: IAMTimecodeReaderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, param: i32, pvalue: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTCRMode<Impl: IAMTimecodeReaderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, param: i32, value: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetVITCLine<Impl: IAMTimecodeReaderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VITCLine<Impl: IAMTimecodeReaderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pline: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTimecode<Impl: IAMTimecodeReaderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptimecodesample: *mut super::TIMECODE_SAMPLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTCRMode::<Impl, IMPL_OFFSET>, SetTCRMode::<Impl, IMPL_OFFSET>, SetVITCLine::<Impl, IMPL_OFFSET>, VITCLine::<Impl, IMPL_OFFSET>, GetTimecode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMTimecodeReader as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMTunerImpl: Sized {
    fn SetChannel();
    fn Channel();
    fn ChannelMinMax();
    fn SetCountryCode();
    fn CountryCode();
    fn SetTuningSpace();
    fn TuningSpace();
    fn Logon();
    fn Logout();
    fn SignalPresent();
    fn SetMode();
    fn Mode();
    fn GetAvailableModes();
    fn RegisterNotificationCallBack();
    fn UnRegisterNotificationCallBack();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMTunerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMTunerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMTunerVtbl {
        unsafe extern "system" fn SetChannel<Impl: IAMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lchannel: i32, lvideosubchannel: i32, laudiosubchannel: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Channel<Impl: IAMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plchannel: *mut i32, plvideosubchannel: *mut i32, plaudiosubchannel: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChannelMinMax<Impl: IAMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lchannelmin: *mut i32, lchannelmax: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCountryCode<Impl: IAMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcountrycode: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CountryCode<Impl: IAMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plcountrycode: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTuningSpace<Impl: IAMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ltuningspace: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TuningSpace<Impl: IAMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pltuningspace: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Logon<Impl: IAMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hcurrentuser: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Logout<Impl: IAMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SignalPresent<Impl: IAMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plsignalstrength: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMode<Impl: IAMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lmode: AMTunerModeType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Mode<Impl: IAMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plmode: *mut AMTunerModeType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAvailableModes<Impl: IAMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plmodes: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterNotificationCallBack<Impl: IAMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnotify: ::windows::core::RawPtr, levents: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnRegisterNotificationCallBack<Impl: IAMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnotify: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetChannel::<Impl, IMPL_OFFSET>,
            Channel::<Impl, IMPL_OFFSET>,
            ChannelMinMax::<Impl, IMPL_OFFSET>,
            SetCountryCode::<Impl, IMPL_OFFSET>,
            CountryCode::<Impl, IMPL_OFFSET>,
            SetTuningSpace::<Impl, IMPL_OFFSET>,
            TuningSpace::<Impl, IMPL_OFFSET>,
            Logon::<Impl, IMPL_OFFSET>,
            Logout::<Impl, IMPL_OFFSET>,
            SignalPresent::<Impl, IMPL_OFFSET>,
            SetMode::<Impl, IMPL_OFFSET>,
            Mode::<Impl, IMPL_OFFSET>,
            GetAvailableModes::<Impl, IMPL_OFFSET>,
            RegisterNotificationCallBack::<Impl, IMPL_OFFSET>,
            UnRegisterNotificationCallBack::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMTuner as ::windows::core::Interface>::IID
    }
}
pub trait IAMTunerNotificationImpl: Sized {
    fn OnEvent();
}
impl IAMTunerNotificationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMTunerNotificationImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMTunerNotificationVtbl {
        unsafe extern "system" fn OnEvent<Impl: IAMTunerNotificationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, event: AMTunerEventType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, OnEvent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMTunerNotification as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMVfwCaptureDialogsImpl: Sized {
    fn HasDialog();
    fn ShowDialog();
    fn SendDriverMessage();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMVfwCaptureDialogsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMVfwCaptureDialogsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMVfwCaptureDialogsVtbl {
        unsafe extern "system" fn HasDialog<Impl: IAMVfwCaptureDialogsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idialog: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ShowDialog<Impl: IAMVfwCaptureDialogsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idialog: i32, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SendDriverMessage<Impl: IAMVfwCaptureDialogsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idialog: i32, umsg: i32, dw1: i32, dw2: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, HasDialog::<Impl, IMPL_OFFSET>, ShowDialog::<Impl, IMPL_OFFSET>, SendDriverMessage::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMVfwCaptureDialogs as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMVfwCompressDialogsImpl: Sized {
    fn ShowDialog();
    fn GetState();
    fn SetState();
    fn SendDriverMessage();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMVfwCompressDialogsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMVfwCompressDialogsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMVfwCompressDialogsVtbl {
        unsafe extern "system" fn ShowDialog<Impl: IAMVfwCompressDialogsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idialog: i32, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetState<Impl: IAMVfwCompressDialogsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstate: *mut ::core::ffi::c_void, pcbstate: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetState<Impl: IAMVfwCompressDialogsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstate: *const ::core::ffi::c_void, cbstate: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SendDriverMessage<Impl: IAMVfwCompressDialogsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, umsg: i32, dw1: i32, dw2: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ShowDialog::<Impl, IMPL_OFFSET>, GetState::<Impl, IMPL_OFFSET>, SetState::<Impl, IMPL_OFFSET>, SendDriverMessage::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMVfwCompressDialogs as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
pub trait IAMVideoAcceleratorImpl: Sized {
    fn GetVideoAcceleratorGUIDs();
    fn GetUncompFormatsSupported();
    fn GetInternalMemInfo();
    fn GetCompBufferInfo();
    fn GetInternalCompBufferInfo();
    fn BeginFrame();
    fn EndFrame();
    fn GetBuffer();
    fn ReleaseBuffer();
    fn Execute();
    fn QueryRenderStatus();
    fn DisplayFrame();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
impl IAMVideoAcceleratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMVideoAcceleratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMVideoAcceleratorVtbl {
        unsafe extern "system" fn GetVideoAcceleratorGUIDs<Impl: IAMVideoAcceleratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwnumguidssupported: *mut u32, pguidssupported: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetUncompFormatsSupported<Impl: IAMVideoAcceleratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *const ::windows::core::GUID, pdwnumformatssupported: *mut u32, pformatssupported: *mut super::super::Graphics::DirectDraw::DDPIXELFORMAT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInternalMemInfo<Impl: IAMVideoAcceleratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *const ::windows::core::GUID, pamvauncompdatainfo: *const AMVAUncompDataInfo, pamvainternalmeminfo: *mut AMVAInternalMemInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCompBufferInfo<Impl: IAMVideoAcceleratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *const ::windows::core::GUID, pamvauncompdatainfo: *const AMVAUncompDataInfo, pdwnumtypescompbuffers: *mut u32, pamvacompbufferinfo: *mut AMVACompBufferInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInternalCompBufferInfo<Impl: IAMVideoAcceleratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwnumtypescompbuffers: *mut u32, pamvacompbufferinfo: *mut AMVACompBufferInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BeginFrame<Impl: IAMVideoAcceleratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, amvabeginframeinfo: *const AMVABeginFrameInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndFrame<Impl: IAMVideoAcceleratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pendframeinfo: *const AMVAEndFrameInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBuffer<Impl: IAMVideoAcceleratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtypeindex: u32, dwbufferindex: u32, breadonly: super::super::Foundation::BOOL, ppbuffer: *mut *mut ::core::ffi::c_void, lpstride: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReleaseBuffer<Impl: IAMVideoAcceleratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtypeindex: u32, dwbufferindex: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Execute<Impl: IAMVideoAcceleratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfunction: u32, lpprivateinputdata: *const ::core::ffi::c_void, cbprivateinputdata: u32, lpprivateoutputdat: *const ::core::ffi::c_void, cbprivateoutputdata: u32, dwnumbuffers: u32, pamvabufferinfo: *const AMVABUFFERINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryRenderStatus<Impl: IAMVideoAcceleratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtypeindex: u32, dwbufferindex: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisplayFrame<Impl: IAMVideoAcceleratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfliptoindex: u32, pmediasample: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetVideoAcceleratorGUIDs::<Impl, IMPL_OFFSET>,
            GetUncompFormatsSupported::<Impl, IMPL_OFFSET>,
            GetInternalMemInfo::<Impl, IMPL_OFFSET>,
            GetCompBufferInfo::<Impl, IMPL_OFFSET>,
            GetInternalCompBufferInfo::<Impl, IMPL_OFFSET>,
            BeginFrame::<Impl, IMPL_OFFSET>,
            EndFrame::<Impl, IMPL_OFFSET>,
            GetBuffer::<Impl, IMPL_OFFSET>,
            ReleaseBuffer::<Impl, IMPL_OFFSET>,
            Execute::<Impl, IMPL_OFFSET>,
            QueryRenderStatus::<Impl, IMPL_OFFSET>,
            DisplayFrame::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMVideoAccelerator as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Graphics_DirectDraw")]
pub trait IAMVideoAcceleratorNotifyImpl: Sized {
    fn GetUncompSurfacesInfo();
    fn SetUncompSurfacesInfo();
    fn GetCreateVideoAcceleratorData();
}
#[cfg(feature = "Win32_Graphics_DirectDraw")]
impl IAMVideoAcceleratorNotifyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMVideoAcceleratorNotifyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMVideoAcceleratorNotifyVtbl {
        unsafe extern "system" fn GetUncompSurfacesInfo<Impl: IAMVideoAcceleratorNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *const ::windows::core::GUID, puncompbufferinfo: *mut AMVAUncompBufferInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetUncompSurfacesInfo<Impl: IAMVideoAcceleratorNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwactualuncompsurfacesallocated: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCreateVideoAcceleratorData<Impl: IAMVideoAcceleratorNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *const ::windows::core::GUID, pdwsizemiscdata: *mut u32, ppmiscdata: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetUncompSurfacesInfo::<Impl, IMPL_OFFSET>, SetUncompSurfacesInfo::<Impl, IMPL_OFFSET>, GetCreateVideoAcceleratorData::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMVideoAcceleratorNotify as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMVideoCompressionImpl: Sized {
    fn SetKeyFrameRate();
    fn KeyFrameRate();
    fn SetPFramesPerKeyFrame();
    fn PFramesPerKeyFrame();
    fn SetQuality();
    fn Quality();
    fn SetWindowSize();
    fn WindowSize();
    fn GetInfo();
    fn OverrideKeyFrame();
    fn OverrideFrameSize();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMVideoCompressionVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMVideoCompressionImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMVideoCompressionVtbl {
        unsafe extern "system" fn SetKeyFrameRate<Impl: IAMVideoCompressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, keyframerate: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn KeyFrameRate<Impl: IAMVideoCompressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pkeyframerate: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPFramesPerKeyFrame<Impl: IAMVideoCompressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pframesperkeyframe: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PFramesPerKeyFrame<Impl: IAMVideoCompressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppframesperkeyframe: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetQuality<Impl: IAMVideoCompressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, quality: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Quality<Impl: IAMVideoCompressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pquality: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetWindowSize<Impl: IAMVideoCompressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, windowsize: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WindowSize<Impl: IAMVideoCompressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwindowsize: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInfo<Impl: IAMVideoCompressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszversion: super::super::Foundation::PWSTR, pcbversion: *mut i32, pszdescription: super::super::Foundation::PWSTR, pcbdescription: *mut i32, pdefaultkeyframerate: *mut i32, pdefaultpframesperkey: *mut i32, pdefaultquality: *mut f64, pcapabilities: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OverrideKeyFrame<Impl: IAMVideoCompressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, framenumber: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OverrideFrameSize<Impl: IAMVideoCompressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, framenumber: i32, size: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetKeyFrameRate::<Impl, IMPL_OFFSET>,
            KeyFrameRate::<Impl, IMPL_OFFSET>,
            SetPFramesPerKeyFrame::<Impl, IMPL_OFFSET>,
            PFramesPerKeyFrame::<Impl, IMPL_OFFSET>,
            SetQuality::<Impl, IMPL_OFFSET>,
            Quality::<Impl, IMPL_OFFSET>,
            SetWindowSize::<Impl, IMPL_OFFSET>,
            WindowSize::<Impl, IMPL_OFFSET>,
            GetInfo::<Impl, IMPL_OFFSET>,
            OverrideKeyFrame::<Impl, IMPL_OFFSET>,
            OverrideFrameSize::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMVideoCompression as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAMVideoControlImpl: Sized {
    fn GetCaps();
    fn SetMode();
    fn GetMode();
    fn GetCurrentActualFrameRate();
    fn GetMaxAvailableFrameRate();
    fn GetFrameRateList();
}
#[cfg(feature = "Win32_Foundation")]
impl IAMVideoControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMVideoControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMVideoControlVtbl {
        unsafe extern "system" fn GetCaps<Impl: IAMVideoControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: ::windows::core::RawPtr, pcapsflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMode<Impl: IAMVideoControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: ::windows::core::RawPtr, mode: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMode<Impl: IAMVideoControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: ::windows::core::RawPtr, mode: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentActualFrameRate<Impl: IAMVideoControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: ::windows::core::RawPtr, actualframerate: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMaxAvailableFrameRate<Impl: IAMVideoControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: ::windows::core::RawPtr, iindex: i32, dimensions: super::super::Foundation::SIZE, maxavailableframerate: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFrameRateList<Impl: IAMVideoControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: ::windows::core::RawPtr, iindex: i32, dimensions: super::super::Foundation::SIZE, listsize: *mut i32, framerates: *mut *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetCaps::<Impl, IMPL_OFFSET>, SetMode::<Impl, IMPL_OFFSET>, GetMode::<Impl, IMPL_OFFSET>, GetCurrentActualFrameRate::<Impl, IMPL_OFFSET>, GetMaxAvailableFrameRate::<Impl, IMPL_OFFSET>, GetFrameRateList::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMVideoControl as ::windows::core::Interface>::IID
    }
}
pub trait IAMVideoDecimationPropertiesImpl: Sized {
    fn QueryDecimationUsage();
    fn SetDecimationUsage();
}
impl IAMVideoDecimationPropertiesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMVideoDecimationPropertiesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMVideoDecimationPropertiesVtbl {
        unsafe extern "system" fn QueryDecimationUsage<Impl: IAMVideoDecimationPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpusage: *mut DECIMATION_USAGE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDecimationUsage<Impl: IAMVideoDecimationPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, usage: DECIMATION_USAGE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, QueryDecimationUsage::<Impl, IMPL_OFFSET>, SetDecimationUsage::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMVideoDecimationProperties as ::windows::core::Interface>::IID
    }
}
pub trait IAMVideoProcAmpImpl: Sized {
    fn GetRange();
    fn Set();
    fn Get();
}
impl IAMVideoProcAmpVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMVideoProcAmpImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMVideoProcAmpVtbl {
        unsafe extern "system" fn GetRange<Impl: IAMVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, property: i32, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Set<Impl: IAMVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, property: i32, lvalue: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Get<Impl: IAMVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, property: i32, lvalue: *mut i32, flags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetRange::<Impl, IMPL_OFFSET>, Set::<Impl, IMPL_OFFSET>, Get::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMVideoProcAmp as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IAMWstDecoderImpl: Sized {
    fn GetDecoderLevel();
    fn GetCurrentService();
    fn GetServiceState();
    fn SetServiceState();
    fn GetOutputFormat();
    fn SetOutputFormat();
    fn GetBackgroundColor();
    fn SetBackgroundColor();
    fn GetRedrawAlways();
    fn SetRedrawAlways();
    fn GetDrawBackgroundMode();
    fn SetDrawBackgroundMode();
    fn SetAnswerMode();
    fn GetAnswerMode();
    fn SetHoldPage();
    fn GetHoldPage();
    fn GetCurrentPage();
    fn SetCurrentPage();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl IAMWstDecoderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMWstDecoderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMWstDecoderVtbl {
        unsafe extern "system" fn GetDecoderLevel<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lplevel: *mut AM_WST_LEVEL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentService<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpservice: *mut AM_WST_SERVICE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceState<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpstate: *mut AM_WST_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetServiceState<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, state: AM_WST_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputFormat<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpbmih: *mut super::super::Graphics::Gdi::BITMAPINFOHEADER) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputFormat<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpbmi: *mut super::super::Graphics::Gdi::BITMAPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBackgroundColor<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwphyscolor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBackgroundColor<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwphyscolor: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRedrawAlways<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpboption: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRedrawAlways<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, boption: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDrawBackgroundMode<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpmode: *mut AM_WST_DRAWBGMODE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDrawBackgroundMode<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: AM_WST_DRAWBGMODE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAnswerMode<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, banswer: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAnswerMode<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbanswer: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetHoldPage<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bholdpage: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetHoldPage<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbholdpage: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentPage<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwstpage: *mut AM_WST_PAGE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentPage<Impl: IAMWstDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, wstpage: AM_WST_PAGE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetDecoderLevel::<Impl, IMPL_OFFSET>,
            GetCurrentService::<Impl, IMPL_OFFSET>,
            GetServiceState::<Impl, IMPL_OFFSET>,
            SetServiceState::<Impl, IMPL_OFFSET>,
            GetOutputFormat::<Impl, IMPL_OFFSET>,
            SetOutputFormat::<Impl, IMPL_OFFSET>,
            GetBackgroundColor::<Impl, IMPL_OFFSET>,
            SetBackgroundColor::<Impl, IMPL_OFFSET>,
            GetRedrawAlways::<Impl, IMPL_OFFSET>,
            SetRedrawAlways::<Impl, IMPL_OFFSET>,
            GetDrawBackgroundMode::<Impl, IMPL_OFFSET>,
            SetDrawBackgroundMode::<Impl, IMPL_OFFSET>,
            SetAnswerMode::<Impl, IMPL_OFFSET>,
            GetAnswerMode::<Impl, IMPL_OFFSET>,
            SetHoldPage::<Impl, IMPL_OFFSET>,
            GetHoldPage::<Impl, IMPL_OFFSET>,
            GetCurrentPage::<Impl, IMPL_OFFSET>,
            SetCurrentPage::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMWstDecoder as ::windows::core::Interface>::IID
    }
}
pub trait IAMovieSetupImpl: Sized {
    fn Register();
    fn Unregister();
}
impl IAMovieSetupVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAMovieSetupImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAMovieSetupVtbl {
        unsafe extern "system" fn Register<Impl: IAMovieSetupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Unregister<Impl: IAMovieSetupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Register::<Impl, IMPL_OFFSET>, Unregister::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAMovieSetup as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IATSCChannelTuneRequestImpl: Sized + IChannelTuneRequestImpl + ITuneRequestImpl + IDispatchImpl {
    fn MinorChannel();
    fn SetMinorChannel();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IATSCChannelTuneRequestVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IATSCChannelTuneRequestImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IATSCChannelTuneRequestVtbl {
        unsafe extern "system" fn MinorChannel<Impl: IATSCChannelTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, minorchannel: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMinorChannel<Impl: IATSCChannelTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, minorchannel: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            TuningSpace::<Impl, IMPL_OFFSET>,
            Components::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            Locator::<Impl, IMPL_OFFSET>,
            SetLocator::<Impl, IMPL_OFFSET>,
            Channel::<Impl, IMPL_OFFSET>,
            SetChannel::<Impl, IMPL_OFFSET>,
            MinorChannel::<Impl, IMPL_OFFSET>,
            SetMinorChannel::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IATSCChannelTuneRequest as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IATSCComponentTypeImpl: Sized + IMPEG2ComponentTypeImpl + ILanguageComponentTypeImpl + IComponentTypeImpl + IDispatchImpl {
    fn Flags();
    fn SetFlags();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IATSCComponentTypeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IATSCComponentTypeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IATSCComponentTypeVtbl {
        unsafe extern "system" fn Flags<Impl: IATSCComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFlags<Impl: IATSCComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            SetCategory::<Impl, IMPL_OFFSET>,
            MediaMajorType::<Impl, IMPL_OFFSET>,
            SetMediaMajorType::<Impl, IMPL_OFFSET>,
            _MediaMajorType::<Impl, IMPL_OFFSET>,
            Set_MediaMajorType::<Impl, IMPL_OFFSET>,
            MediaSubType::<Impl, IMPL_OFFSET>,
            SetMediaSubType::<Impl, IMPL_OFFSET>,
            _MediaSubType::<Impl, IMPL_OFFSET>,
            Set_MediaSubType::<Impl, IMPL_OFFSET>,
            MediaFormatType::<Impl, IMPL_OFFSET>,
            SetMediaFormatType::<Impl, IMPL_OFFSET>,
            _MediaFormatType::<Impl, IMPL_OFFSET>,
            Set_MediaFormatType::<Impl, IMPL_OFFSET>,
            MediaType::<Impl, IMPL_OFFSET>,
            SetMediaType::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            LangID::<Impl, IMPL_OFFSET>,
            SetLangID::<Impl, IMPL_OFFSET>,
            StreamType::<Impl, IMPL_OFFSET>,
            SetStreamType::<Impl, IMPL_OFFSET>,
            Flags::<Impl, IMPL_OFFSET>,
            SetFlags::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IATSCComponentType as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IATSCLocatorImpl: Sized + IDigitalLocatorImpl + ILocatorImpl + IDispatchImpl {
    fn PhysicalChannel();
    fn SetPhysicalChannel();
    fn TSID();
    fn SetTSID();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IATSCLocatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IATSCLocatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IATSCLocatorVtbl {
        unsafe extern "system" fn PhysicalChannel<Impl: IATSCLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, physicalchannel: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPhysicalChannel<Impl: IATSCLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, physicalchannel: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TSID<Impl: IATSCLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tsid: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTSID<Impl: IATSCLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tsid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            CarrierFrequency::<Impl, IMPL_OFFSET>,
            SetCarrierFrequency::<Impl, IMPL_OFFSET>,
            InnerFEC::<Impl, IMPL_OFFSET>,
            SetInnerFEC::<Impl, IMPL_OFFSET>,
            InnerFECRate::<Impl, IMPL_OFFSET>,
            SetInnerFECRate::<Impl, IMPL_OFFSET>,
            OuterFEC::<Impl, IMPL_OFFSET>,
            SetOuterFEC::<Impl, IMPL_OFFSET>,
            OuterFECRate::<Impl, IMPL_OFFSET>,
            SetOuterFECRate::<Impl, IMPL_OFFSET>,
            Modulation::<Impl, IMPL_OFFSET>,
            SetModulation::<Impl, IMPL_OFFSET>,
            SymbolRate::<Impl, IMPL_OFFSET>,
            SetSymbolRate::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            PhysicalChannel::<Impl, IMPL_OFFSET>,
            SetPhysicalChannel::<Impl, IMPL_OFFSET>,
            TSID::<Impl, IMPL_OFFSET>,
            SetTSID::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IATSCLocator as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IATSCLocator2Impl: Sized + IATSCLocatorImpl + IDigitalLocatorImpl + ILocatorImpl + IDispatchImpl {
    fn ProgramNumber();
    fn SetProgramNumber();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IATSCLocator2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IATSCLocator2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IATSCLocator2Vtbl {
        unsafe extern "system" fn ProgramNumber<Impl: IATSCLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, programnumber: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProgramNumber<Impl: IATSCLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, programnumber: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            CarrierFrequency::<Impl, IMPL_OFFSET>,
            SetCarrierFrequency::<Impl, IMPL_OFFSET>,
            InnerFEC::<Impl, IMPL_OFFSET>,
            SetInnerFEC::<Impl, IMPL_OFFSET>,
            InnerFECRate::<Impl, IMPL_OFFSET>,
            SetInnerFECRate::<Impl, IMPL_OFFSET>,
            OuterFEC::<Impl, IMPL_OFFSET>,
            SetOuterFEC::<Impl, IMPL_OFFSET>,
            OuterFECRate::<Impl, IMPL_OFFSET>,
            SetOuterFECRate::<Impl, IMPL_OFFSET>,
            Modulation::<Impl, IMPL_OFFSET>,
            SetModulation::<Impl, IMPL_OFFSET>,
            SymbolRate::<Impl, IMPL_OFFSET>,
            SetSymbolRate::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            PhysicalChannel::<Impl, IMPL_OFFSET>,
            SetPhysicalChannel::<Impl, IMPL_OFFSET>,
            TSID::<Impl, IMPL_OFFSET>,
            SetTSID::<Impl, IMPL_OFFSET>,
            ProgramNumber::<Impl, IMPL_OFFSET>,
            SetProgramNumber::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IATSCLocator2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IATSCTuningSpaceImpl: Sized + IAnalogTVTuningSpaceImpl + ITuningSpaceImpl + IDispatchImpl {
    fn MinMinorChannel();
    fn SetMinMinorChannel();
    fn MaxMinorChannel();
    fn SetMaxMinorChannel();
    fn MinPhysicalChannel();
    fn SetMinPhysicalChannel();
    fn MaxPhysicalChannel();
    fn SetMaxPhysicalChannel();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IATSCTuningSpaceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IATSCTuningSpaceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IATSCTuningSpaceVtbl {
        unsafe extern "system" fn MinMinorChannel<Impl: IATSCTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, minminorchannelval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMinMinorChannel<Impl: IATSCTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newminminorchannelval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MaxMinorChannel<Impl: IATSCTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, maxminorchannelval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMaxMinorChannel<Impl: IATSCTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newmaxminorchannelval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MinPhysicalChannel<Impl: IATSCTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, minphysicalchannelval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMinPhysicalChannel<Impl: IATSCTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newminphysicalchannelval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MaxPhysicalChannel<Impl: IATSCTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, maxphysicalchannelval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMaxPhysicalChannel<Impl: IATSCTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newmaxphysicalchannelval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            UniqueName::<Impl, IMPL_OFFSET>,
            SetUniqueName::<Impl, IMPL_OFFSET>,
            FriendlyName::<Impl, IMPL_OFFSET>,
            SetFriendlyName::<Impl, IMPL_OFFSET>,
            CLSID::<Impl, IMPL_OFFSET>,
            NetworkType::<Impl, IMPL_OFFSET>,
            SetNetworkType::<Impl, IMPL_OFFSET>,
            _NetworkType::<Impl, IMPL_OFFSET>,
            Set_NetworkType::<Impl, IMPL_OFFSET>,
            CreateTuneRequest::<Impl, IMPL_OFFSET>,
            EnumCategoryGUIDs::<Impl, IMPL_OFFSET>,
            EnumDeviceMonikers::<Impl, IMPL_OFFSET>,
            DefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SetDefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            FrequencyMapping::<Impl, IMPL_OFFSET>,
            SetFrequencyMapping::<Impl, IMPL_OFFSET>,
            DefaultLocator::<Impl, IMPL_OFFSET>,
            SetDefaultLocator::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            MinChannel::<Impl, IMPL_OFFSET>,
            SetMinChannel::<Impl, IMPL_OFFSET>,
            MaxChannel::<Impl, IMPL_OFFSET>,
            SetMaxChannel::<Impl, IMPL_OFFSET>,
            InputType::<Impl, IMPL_OFFSET>,
            SetInputType::<Impl, IMPL_OFFSET>,
            CountryCode::<Impl, IMPL_OFFSET>,
            SetCountryCode::<Impl, IMPL_OFFSET>,
            MinMinorChannel::<Impl, IMPL_OFFSET>,
            SetMinMinorChannel::<Impl, IMPL_OFFSET>,
            MaxMinorChannel::<Impl, IMPL_OFFSET>,
            SetMaxMinorChannel::<Impl, IMPL_OFFSET>,
            MinPhysicalChannel::<Impl, IMPL_OFFSET>,
            SetMinPhysicalChannel::<Impl, IMPL_OFFSET>,
            MaxPhysicalChannel::<Impl, IMPL_OFFSET>,
            SetMaxPhysicalChannel::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IATSCTuningSpace as ::windows::core::Interface>::IID
    }
}
pub trait IATSC_EITImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetSourceId();
    fn GetProtocolVersion();
    fn GetCountOfRecords();
    fn GetRecordEventId();
    fn GetRecordStartTime();
    fn GetRecordEtmLocation();
    fn GetRecordDuration();
    fn GetRecordTitleText();
    fn GetRecordCountOfDescriptors();
    fn GetRecordDescriptorByIndex();
    fn GetRecordDescriptorByTag();
}
impl IATSC_EITVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IATSC_EITImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IATSC_EITVtbl {
        unsafe extern "system" fn Initialize<Impl: IATSC_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IATSC_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceId<Impl: IATSC_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProtocolVersion<Impl: IATSC_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IATSC_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordEventId<Impl: IATSC_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordStartTime<Impl: IATSC_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordEtmLocation<Impl: IATSC_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDuration<Impl: IATSC_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdval: *mut MPEG_TIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordTitleText<Impl: IATSC_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwlength: *mut u32, pptext: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Impl: IATSC_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Impl: IATSC_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Impl: IATSC_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetSourceId::<Impl, IMPL_OFFSET>,
            GetProtocolVersion::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordEventId::<Impl, IMPL_OFFSET>,
            GetRecordStartTime::<Impl, IMPL_OFFSET>,
            GetRecordEtmLocation::<Impl, IMPL_OFFSET>,
            GetRecordDuration::<Impl, IMPL_OFFSET>,
            GetRecordTitleText::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IATSC_EIT as ::windows::core::Interface>::IID
    }
}
pub trait IATSC_ETTImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetProtocolVersion();
    fn GetEtmId();
    fn GetExtendedMessageText();
}
impl IATSC_ETTVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IATSC_ETTImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IATSC_ETTVtbl {
        unsafe extern "system" fn Initialize<Impl: IATSC_ETTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IATSC_ETTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProtocolVersion<Impl: IATSC_ETTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEtmId<Impl: IATSC_ETTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtendedMessageText<Impl: IATSC_ETTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwlength: *mut u32, pptext: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, GetVersionNumber::<Impl, IMPL_OFFSET>, GetProtocolVersion::<Impl, IMPL_OFFSET>, GetEtmId::<Impl, IMPL_OFFSET>, GetExtendedMessageText::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IATSC_ETT as ::windows::core::Interface>::IID
    }
}
pub trait IATSC_MGTImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetProtocolVersion();
    fn GetCountOfRecords();
    fn GetRecordType();
    fn GetRecordTypePid();
    fn GetRecordVersionNumber();
    fn GetRecordCountOfDescriptors();
    fn GetRecordDescriptorByIndex();
    fn GetRecordDescriptorByTag();
    fn GetCountOfTableDescriptors();
    fn GetTableDescriptorByIndex();
    fn GetTableDescriptorByTag();
}
impl IATSC_MGTVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IATSC_MGTImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IATSC_MGTVtbl {
        unsafe extern "system" fn Initialize<Impl: IATSC_MGTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IATSC_MGTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProtocolVersion<Impl: IATSC_MGTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IATSC_MGTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordType<Impl: IATSC_MGTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordTypePid<Impl: IATSC_MGTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, ppidval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordVersionNumber<Impl: IATSC_MGTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Impl: IATSC_MGTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Impl: IATSC_MGTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Impl: IATSC_MGTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Impl: IATSC_MGTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *const u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Impl: IATSC_MGTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Impl: IATSC_MGTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetProtocolVersion::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordType::<Impl, IMPL_OFFSET>,
            GetRecordTypePid::<Impl, IMPL_OFFSET>,
            GetRecordVersionNumber::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
            GetCountOfTableDescriptors::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByTag::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IATSC_MGT as ::windows::core::Interface>::IID
    }
}
pub trait IATSC_STTImpl: Sized {
    fn Initialize();
    fn GetProtocolVersion();
    fn GetSystemTime();
    fn GetGpsUtcOffset();
    fn GetDaylightSavings();
    fn GetCountOfTableDescriptors();
    fn GetTableDescriptorByIndex();
    fn GetTableDescriptorByTag();
}
impl IATSC_STTVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IATSC_STTImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IATSC_STTVtbl {
        unsafe extern "system" fn Initialize<Impl: IATSC_STTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProtocolVersion<Impl: IATSC_STTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemTime<Impl: IATSC_STTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmdtsystemtime: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetGpsUtcOffset<Impl: IATSC_STTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDaylightSavings<Impl: IATSC_STTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Impl: IATSC_STTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Impl: IATSC_STTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Impl: IATSC_STTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetProtocolVersion::<Impl, IMPL_OFFSET>,
            GetSystemTime::<Impl, IMPL_OFFSET>,
            GetGpsUtcOffset::<Impl, IMPL_OFFSET>,
            GetDaylightSavings::<Impl, IMPL_OFFSET>,
            GetCountOfTableDescriptors::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByTag::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IATSC_STT as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IATSC_VCTImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetTransportStreamId();
    fn GetProtocolVersion();
    fn GetCountOfRecords();
    fn GetRecordName();
    fn GetRecordMajorChannelNumber();
    fn GetRecordMinorChannelNumber();
    fn GetRecordModulationMode();
    fn GetRecordCarrierFrequency();
    fn GetRecordTransportStreamId();
    fn GetRecordProgramNumber();
    fn GetRecordEtmLocation();
    fn GetRecordIsAccessControlledBitSet();
    fn GetRecordIsHiddenBitSet();
    fn GetRecordIsPathSelectBitSet();
    fn GetRecordIsOutOfBandBitSet();
    fn GetRecordIsHideGuideBitSet();
    fn GetRecordServiceType();
    fn GetRecordSourceId();
    fn GetRecordCountOfDescriptors();
    fn GetRecordDescriptorByIndex();
    fn GetRecordDescriptorByTag();
    fn GetCountOfTableDescriptors();
    fn GetTableDescriptorByIndex();
    fn GetTableDescriptorByTag();
}
#[cfg(feature = "Win32_Foundation")]
impl IATSC_VCTVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IATSC_VCTImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IATSC_VCTVtbl {
        unsafe extern "system" fn Initialize<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTransportStreamId<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProtocolVersion<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordName<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwsname: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordMajorChannelNumber<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordMinorChannelNumber<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordModulationMode<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCarrierFrequency<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordTransportStreamId<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordProgramNumber<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordEtmLocation<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordIsAccessControlledBitSet<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordIsHiddenBitSet<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordIsPathSelectBitSet<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordIsOutOfBandBitSet<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordIsHideGuideBitSet<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordServiceType<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordSourceId<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *const u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Impl: IATSC_VCTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetTransportStreamId::<Impl, IMPL_OFFSET>,
            GetProtocolVersion::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordName::<Impl, IMPL_OFFSET>,
            GetRecordMajorChannelNumber::<Impl, IMPL_OFFSET>,
            GetRecordMinorChannelNumber::<Impl, IMPL_OFFSET>,
            GetRecordModulationMode::<Impl, IMPL_OFFSET>,
            GetRecordCarrierFrequency::<Impl, IMPL_OFFSET>,
            GetRecordTransportStreamId::<Impl, IMPL_OFFSET>,
            GetRecordProgramNumber::<Impl, IMPL_OFFSET>,
            GetRecordEtmLocation::<Impl, IMPL_OFFSET>,
            GetRecordIsAccessControlledBitSet::<Impl, IMPL_OFFSET>,
            GetRecordIsHiddenBitSet::<Impl, IMPL_OFFSET>,
            GetRecordIsPathSelectBitSet::<Impl, IMPL_OFFSET>,
            GetRecordIsOutOfBandBitSet::<Impl, IMPL_OFFSET>,
            GetRecordIsHideGuideBitSet::<Impl, IMPL_OFFSET>,
            GetRecordServiceType::<Impl, IMPL_OFFSET>,
            GetRecordSourceId::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
            GetCountOfTableDescriptors::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByTag::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IATSC_VCT as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAnalogAudioComponentTypeImpl: Sized + IComponentTypeImpl + IDispatchImpl {
    fn AnalogAudioMode();
    fn SetAnalogAudioMode();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAnalogAudioComponentTypeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAnalogAudioComponentTypeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAnalogAudioComponentTypeVtbl {
        unsafe extern "system" fn AnalogAudioMode<Impl: IAnalogAudioComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: *mut TVAudioMode) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAnalogAudioMode<Impl: IAnalogAudioComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: TVAudioMode) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            SetCategory::<Impl, IMPL_OFFSET>,
            MediaMajorType::<Impl, IMPL_OFFSET>,
            SetMediaMajorType::<Impl, IMPL_OFFSET>,
            _MediaMajorType::<Impl, IMPL_OFFSET>,
            Set_MediaMajorType::<Impl, IMPL_OFFSET>,
            MediaSubType::<Impl, IMPL_OFFSET>,
            SetMediaSubType::<Impl, IMPL_OFFSET>,
            _MediaSubType::<Impl, IMPL_OFFSET>,
            Set_MediaSubType::<Impl, IMPL_OFFSET>,
            MediaFormatType::<Impl, IMPL_OFFSET>,
            SetMediaFormatType::<Impl, IMPL_OFFSET>,
            _MediaFormatType::<Impl, IMPL_OFFSET>,
            Set_MediaFormatType::<Impl, IMPL_OFFSET>,
            MediaType::<Impl, IMPL_OFFSET>,
            SetMediaType::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            AnalogAudioMode::<Impl, IMPL_OFFSET>,
            SetAnalogAudioMode::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAnalogAudioComponentType as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAnalogLocatorImpl: Sized + ILocatorImpl + IDispatchImpl {
    fn VideoStandard();
    fn SetVideoStandard();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAnalogLocatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAnalogLocatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAnalogLocatorVtbl {
        unsafe extern "system" fn VideoStandard<Impl: IAnalogLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, avs: *mut AnalogVideoStandard) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetVideoStandard<Impl: IAnalogLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, avs: AnalogVideoStandard) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            CarrierFrequency::<Impl, IMPL_OFFSET>,
            SetCarrierFrequency::<Impl, IMPL_OFFSET>,
            InnerFEC::<Impl, IMPL_OFFSET>,
            SetInnerFEC::<Impl, IMPL_OFFSET>,
            InnerFECRate::<Impl, IMPL_OFFSET>,
            SetInnerFECRate::<Impl, IMPL_OFFSET>,
            OuterFEC::<Impl, IMPL_OFFSET>,
            SetOuterFEC::<Impl, IMPL_OFFSET>,
            OuterFECRate::<Impl, IMPL_OFFSET>,
            SetOuterFECRate::<Impl, IMPL_OFFSET>,
            Modulation::<Impl, IMPL_OFFSET>,
            SetModulation::<Impl, IMPL_OFFSET>,
            SymbolRate::<Impl, IMPL_OFFSET>,
            SetSymbolRate::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            VideoStandard::<Impl, IMPL_OFFSET>,
            SetVideoStandard::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAnalogLocator as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAnalogRadioTuningSpaceImpl: Sized + ITuningSpaceImpl + IDispatchImpl {
    fn MinFrequency();
    fn SetMinFrequency();
    fn MaxFrequency();
    fn SetMaxFrequency();
    fn Step();
    fn SetStep();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAnalogRadioTuningSpaceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAnalogRadioTuningSpaceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAnalogRadioTuningSpaceVtbl {
        unsafe extern "system" fn MinFrequency<Impl: IAnalogRadioTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, minfrequencyval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMinFrequency<Impl: IAnalogRadioTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newminfrequencyval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MaxFrequency<Impl: IAnalogRadioTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, maxfrequencyval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMaxFrequency<Impl: IAnalogRadioTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newmaxfrequencyval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Step<Impl: IAnalogRadioTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, stepval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetStep<Impl: IAnalogRadioTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newstepval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            UniqueName::<Impl, IMPL_OFFSET>,
            SetUniqueName::<Impl, IMPL_OFFSET>,
            FriendlyName::<Impl, IMPL_OFFSET>,
            SetFriendlyName::<Impl, IMPL_OFFSET>,
            CLSID::<Impl, IMPL_OFFSET>,
            NetworkType::<Impl, IMPL_OFFSET>,
            SetNetworkType::<Impl, IMPL_OFFSET>,
            _NetworkType::<Impl, IMPL_OFFSET>,
            Set_NetworkType::<Impl, IMPL_OFFSET>,
            CreateTuneRequest::<Impl, IMPL_OFFSET>,
            EnumCategoryGUIDs::<Impl, IMPL_OFFSET>,
            EnumDeviceMonikers::<Impl, IMPL_OFFSET>,
            DefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SetDefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            FrequencyMapping::<Impl, IMPL_OFFSET>,
            SetFrequencyMapping::<Impl, IMPL_OFFSET>,
            DefaultLocator::<Impl, IMPL_OFFSET>,
            SetDefaultLocator::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            MinFrequency::<Impl, IMPL_OFFSET>,
            SetMinFrequency::<Impl, IMPL_OFFSET>,
            MaxFrequency::<Impl, IMPL_OFFSET>,
            SetMaxFrequency::<Impl, IMPL_OFFSET>,
            Step::<Impl, IMPL_OFFSET>,
            SetStep::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAnalogRadioTuningSpace as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAnalogRadioTuningSpace2Impl: Sized + IAnalogRadioTuningSpaceImpl + ITuningSpaceImpl + IDispatchImpl {
    fn CountryCode();
    fn SetCountryCode();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAnalogRadioTuningSpace2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAnalogRadioTuningSpace2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAnalogRadioTuningSpace2Vtbl {
        unsafe extern "system" fn CountryCode<Impl: IAnalogRadioTuningSpace2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, countrycodeval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCountryCode<Impl: IAnalogRadioTuningSpace2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newcountrycodeval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            UniqueName::<Impl, IMPL_OFFSET>,
            SetUniqueName::<Impl, IMPL_OFFSET>,
            FriendlyName::<Impl, IMPL_OFFSET>,
            SetFriendlyName::<Impl, IMPL_OFFSET>,
            CLSID::<Impl, IMPL_OFFSET>,
            NetworkType::<Impl, IMPL_OFFSET>,
            SetNetworkType::<Impl, IMPL_OFFSET>,
            _NetworkType::<Impl, IMPL_OFFSET>,
            Set_NetworkType::<Impl, IMPL_OFFSET>,
            CreateTuneRequest::<Impl, IMPL_OFFSET>,
            EnumCategoryGUIDs::<Impl, IMPL_OFFSET>,
            EnumDeviceMonikers::<Impl, IMPL_OFFSET>,
            DefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SetDefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            FrequencyMapping::<Impl, IMPL_OFFSET>,
            SetFrequencyMapping::<Impl, IMPL_OFFSET>,
            DefaultLocator::<Impl, IMPL_OFFSET>,
            SetDefaultLocator::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            MinFrequency::<Impl, IMPL_OFFSET>,
            SetMinFrequency::<Impl, IMPL_OFFSET>,
            MaxFrequency::<Impl, IMPL_OFFSET>,
            SetMaxFrequency::<Impl, IMPL_OFFSET>,
            Step::<Impl, IMPL_OFFSET>,
            SetStep::<Impl, IMPL_OFFSET>,
            CountryCode::<Impl, IMPL_OFFSET>,
            SetCountryCode::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAnalogRadioTuningSpace2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAnalogTVTuningSpaceImpl: Sized + ITuningSpaceImpl + IDispatchImpl {
    fn MinChannel();
    fn SetMinChannel();
    fn MaxChannel();
    fn SetMaxChannel();
    fn InputType();
    fn SetInputType();
    fn CountryCode();
    fn SetCountryCode();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAnalogTVTuningSpaceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAnalogTVTuningSpaceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAnalogTVTuningSpaceVtbl {
        unsafe extern "system" fn MinChannel<Impl: IAnalogTVTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, minchannelval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMinChannel<Impl: IAnalogTVTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newminchannelval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MaxChannel<Impl: IAnalogTVTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, maxchannelval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMaxChannel<Impl: IAnalogTVTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newmaxchannelval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InputType<Impl: IAnalogTVTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, inputtypeval: *mut TunerInputType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInputType<Impl: IAnalogTVTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newinputtypeval: TunerInputType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CountryCode<Impl: IAnalogTVTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, countrycodeval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCountryCode<Impl: IAnalogTVTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newcountrycodeval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            UniqueName::<Impl, IMPL_OFFSET>,
            SetUniqueName::<Impl, IMPL_OFFSET>,
            FriendlyName::<Impl, IMPL_OFFSET>,
            SetFriendlyName::<Impl, IMPL_OFFSET>,
            CLSID::<Impl, IMPL_OFFSET>,
            NetworkType::<Impl, IMPL_OFFSET>,
            SetNetworkType::<Impl, IMPL_OFFSET>,
            _NetworkType::<Impl, IMPL_OFFSET>,
            Set_NetworkType::<Impl, IMPL_OFFSET>,
            CreateTuneRequest::<Impl, IMPL_OFFSET>,
            EnumCategoryGUIDs::<Impl, IMPL_OFFSET>,
            EnumDeviceMonikers::<Impl, IMPL_OFFSET>,
            DefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SetDefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            FrequencyMapping::<Impl, IMPL_OFFSET>,
            SetFrequencyMapping::<Impl, IMPL_OFFSET>,
            DefaultLocator::<Impl, IMPL_OFFSET>,
            SetDefaultLocator::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            MinChannel::<Impl, IMPL_OFFSET>,
            SetMinChannel::<Impl, IMPL_OFFSET>,
            MaxChannel::<Impl, IMPL_OFFSET>,
            SetMaxChannel::<Impl, IMPL_OFFSET>,
            InputType::<Impl, IMPL_OFFSET>,
            SetInputType::<Impl, IMPL_OFFSET>,
            CountryCode::<Impl, IMPL_OFFSET>,
            SetCountryCode::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAnalogTVTuningSpace as ::windows::core::Interface>::IID
    }
}
pub trait IAsyncReaderImpl: Sized {
    fn RequestAllocator();
    fn Request();
    fn WaitForNext();
    fn SyncReadAligned();
    fn SyncRead();
    fn Length();
    fn BeginFlush();
    fn EndFlush();
}
impl IAsyncReaderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAsyncReaderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAsyncReaderVtbl {
        unsafe extern "system" fn RequestAllocator<Impl: IAsyncReaderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppreferred: ::windows::core::RawPtr, pprops: *const ALLOCATOR_PROPERTIES, ppactual: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Request<Impl: IAsyncReaderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psample: ::windows::core::RawPtr, dwuser: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForNext<Impl: IAsyncReaderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppsample: *mut ::windows::core::RawPtr, pdwuser: *mut usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SyncReadAligned<Impl: IAsyncReaderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psample: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SyncRead<Impl: IAsyncReaderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, llposition: i64, llength: i32, pbuffer: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Length<Impl: IAsyncReaderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptotal: *mut i64, pavailable: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BeginFlush<Impl: IAsyncReaderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndFlush<Impl: IAsyncReaderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, RequestAllocator::<Impl, IMPL_OFFSET>, Request::<Impl, IMPL_OFFSET>, WaitForNext::<Impl, IMPL_OFFSET>, SyncReadAligned::<Impl, IMPL_OFFSET>, SyncRead::<Impl, IMPL_OFFSET>, Length::<Impl, IMPL_OFFSET>, BeginFlush::<Impl, IMPL_OFFSET>, EndFlush::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAsyncReader as ::windows::core::Interface>::IID
    }
}
pub trait IAtscContentAdvisoryDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetRatingRegionCount();
    fn GetRecordRatingRegion();
    fn GetRecordRatedDimensions();
    fn GetRecordRatingDimension();
    fn GetRecordRatingValue();
    fn GetRecordRatingDescriptionText();
}
impl IAtscContentAdvisoryDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAtscContentAdvisoryDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAtscContentAdvisoryDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IAtscContentAdvisoryDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IAtscContentAdvisoryDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRatingRegionCount<Impl: IAtscContentAdvisoryDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordRatingRegion<Impl: IAtscContentAdvisoryDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordRatedDimensions<Impl: IAtscContentAdvisoryDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordRatingDimension<Impl: IAtscContentAdvisoryDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindexouter: u8, bindexinner: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordRatingValue<Impl: IAtscContentAdvisoryDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindexouter: u8, bindexinner: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordRatingDescriptionText<Impl: IAtscContentAdvisoryDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindex: u8, pblength: *mut u8, pptext: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTag::<Impl, IMPL_OFFSET>,
            GetLength::<Impl, IMPL_OFFSET>,
            GetRatingRegionCount::<Impl, IMPL_OFFSET>,
            GetRecordRatingRegion::<Impl, IMPL_OFFSET>,
            GetRecordRatedDimensions::<Impl, IMPL_OFFSET>,
            GetRecordRatingDimension::<Impl, IMPL_OFFSET>,
            GetRecordRatingValue::<Impl, IMPL_OFFSET>,
            GetRecordRatingDescriptionText::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAtscContentAdvisoryDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAtscPsipParserImpl: Sized {
    fn Initialize();
    fn GetPAT();
    fn GetCAT();
    fn GetPMT();
    fn GetTSDT();
    fn GetMGT();
    fn GetVCT();
    fn GetEIT();
    fn GetETT();
    fn GetSTT();
    fn GetEAS();
}
#[cfg(feature = "Win32_Foundation")]
impl IAtscPsipParserVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAtscPsipParserImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAtscPsipParserVtbl {
        unsafe extern "system" fn Initialize<Impl: IAtscPsipParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkmpeg2data: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPAT<Impl: IAtscPsipParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pppat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCAT<Impl: IAtscPsipParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppcat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPMT<Impl: IAtscPsipParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pid: u16, pwprogramnumber: *const u16, pppmt: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTSDT<Impl: IAtscPsipParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptsdt: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMGT<Impl: IAtscPsipParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppmgt: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVCT<Impl: IAtscPsipParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tableid: u8, fgetnexttable: super::super::Foundation::BOOL, ppvct: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEIT<Impl: IAtscPsipParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pid: u16, pwsourceid: *const u16, dwtimeout: u32, ppeit: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetETT<Impl: IAtscPsipParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pid: u16, wsourceid: *const u16, pweventid: *const u16, ppett: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSTT<Impl: IAtscPsipParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppstt: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEAS<Impl: IAtscPsipParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pid: u16, ppeas: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetPAT::<Impl, IMPL_OFFSET>,
            GetCAT::<Impl, IMPL_OFFSET>,
            GetPMT::<Impl, IMPL_OFFSET>,
            GetTSDT::<Impl, IMPL_OFFSET>,
            GetMGT::<Impl, IMPL_OFFSET>,
            GetVCT::<Impl, IMPL_OFFSET>,
            GetEIT::<Impl, IMPL_OFFSET>,
            GetETT::<Impl, IMPL_OFFSET>,
            GetSTT::<Impl, IMPL_OFFSET>,
            GetEAS::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAtscPsipParser as ::windows::core::Interface>::IID
    }
}
pub trait IAttributeGetImpl: Sized {
    fn GetCount();
    fn GetAttribIndexed();
    fn GetAttrib();
}
impl IAttributeGetVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAttributeGetImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAttributeGetVtbl {
        unsafe extern "system" fn GetCount<Impl: IAttributeGetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plcount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAttribIndexed<Impl: IAttributeGetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lindex: i32, pguidattribute: *mut ::windows::core::GUID, pbattribute: *mut u8, pdwattributelength: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAttrib<Impl: IAttributeGetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guidattribute: ::windows::core::GUID, pbattribute: *mut u8, pdwattributelength: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetCount::<Impl, IMPL_OFFSET>, GetAttribIndexed::<Impl, IMPL_OFFSET>, GetAttrib::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAttributeGet as ::windows::core::Interface>::IID
    }
}
pub trait IAttributeSetImpl: Sized {
    fn SetAttrib();
}
impl IAttributeSetVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAttributeSetImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAttributeSetVtbl {
        unsafe extern "system" fn SetAttrib<Impl: IAttributeSetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guidattribute: ::windows::core::GUID, pbattribute: *const u8, dwattributelength: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetAttrib::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAttributeSet as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Media_Audio")]
pub trait IAudioDataImpl: Sized + IMemoryDataImpl {
    fn GetFormat();
    fn SetFormat();
}
#[cfg(feature = "Win32_Media_Audio")]
impl IAudioDataVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAudioDataImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAudioDataVtbl {
        unsafe extern "system" fn GetFormat<Impl: IAudioDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwaveformatcurrent: *mut super::Audio::WAVEFORMATEX) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFormat<Impl: IAudioDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpwaveformat: *const super::Audio::WAVEFORMATEX) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetBuffer::<Impl, IMPL_OFFSET>, GetInfo::<Impl, IMPL_OFFSET>, SetActual::<Impl, IMPL_OFFSET>, GetFormat::<Impl, IMPL_OFFSET>, SetFormat::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAudioData as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Media_Audio")]
pub trait IAudioMediaStreamImpl: Sized + IMediaStreamImpl {
    fn GetFormat();
    fn SetFormat();
    fn CreateSample();
}
#[cfg(feature = "Win32_Media_Audio")]
impl IAudioMediaStreamVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAudioMediaStreamImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAudioMediaStreamVtbl {
        unsafe extern "system" fn GetFormat<Impl: IAudioMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwaveformatcurrent: *mut super::Audio::WAVEFORMATEX) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFormat<Impl: IAudioMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpwaveformat: *const super::Audio::WAVEFORMATEX) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateSample<Impl: IAudioMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, paudiodata: ::windows::core::RawPtr, dwflags: u32, ppsample: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetMultiMediaStream::<Impl, IMPL_OFFSET>,
            GetInformation::<Impl, IMPL_OFFSET>,
            SetSameFormat::<Impl, IMPL_OFFSET>,
            AllocateSample::<Impl, IMPL_OFFSET>,
            CreateSharedSample::<Impl, IMPL_OFFSET>,
            SendEndOfStream::<Impl, IMPL_OFFSET>,
            GetFormat::<Impl, IMPL_OFFSET>,
            SetFormat::<Impl, IMPL_OFFSET>,
            CreateSample::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAudioMediaStream as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IAudioStreamSampleImpl: Sized + IStreamSampleImpl {
    fn GetAudioData();
}
#[cfg(feature = "Win32_Foundation")]
impl IAudioStreamSampleVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAudioStreamSampleImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAudioStreamSampleVtbl {
        unsafe extern "system" fn GetAudioData<Impl: IAudioStreamSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppaudio: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetMediaStream::<Impl, IMPL_OFFSET>, GetSampleTimes::<Impl, IMPL_OFFSET>, SetSampleTimes::<Impl, IMPL_OFFSET>, Update::<Impl, IMPL_OFFSET>, CompletionStatus::<Impl, IMPL_OFFSET>, GetAudioData::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAudioStreamSample as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAuxInTuningSpaceImpl: Sized + ITuningSpaceImpl + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAuxInTuningSpaceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAuxInTuningSpaceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAuxInTuningSpaceVtbl {
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            UniqueName::<Impl, IMPL_OFFSET>,
            SetUniqueName::<Impl, IMPL_OFFSET>,
            FriendlyName::<Impl, IMPL_OFFSET>,
            SetFriendlyName::<Impl, IMPL_OFFSET>,
            CLSID::<Impl, IMPL_OFFSET>,
            NetworkType::<Impl, IMPL_OFFSET>,
            SetNetworkType::<Impl, IMPL_OFFSET>,
            _NetworkType::<Impl, IMPL_OFFSET>,
            Set_NetworkType::<Impl, IMPL_OFFSET>,
            CreateTuneRequest::<Impl, IMPL_OFFSET>,
            EnumCategoryGUIDs::<Impl, IMPL_OFFSET>,
            EnumDeviceMonikers::<Impl, IMPL_OFFSET>,
            DefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SetDefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            FrequencyMapping::<Impl, IMPL_OFFSET>,
            SetFrequencyMapping::<Impl, IMPL_OFFSET>,
            DefaultLocator::<Impl, IMPL_OFFSET>,
            SetDefaultLocator::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAuxInTuningSpace as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IAuxInTuningSpace2Impl: Sized + IAuxInTuningSpaceImpl + ITuningSpaceImpl + IDispatchImpl {
    fn CountryCode();
    fn SetCountryCode();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IAuxInTuningSpace2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IAuxInTuningSpace2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IAuxInTuningSpace2Vtbl {
        unsafe extern "system" fn CountryCode<Impl: IAuxInTuningSpace2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, countrycodeval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCountryCode<Impl: IAuxInTuningSpace2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newcountrycodeval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            UniqueName::<Impl, IMPL_OFFSET>,
            SetUniqueName::<Impl, IMPL_OFFSET>,
            FriendlyName::<Impl, IMPL_OFFSET>,
            SetFriendlyName::<Impl, IMPL_OFFSET>,
            CLSID::<Impl, IMPL_OFFSET>,
            NetworkType::<Impl, IMPL_OFFSET>,
            SetNetworkType::<Impl, IMPL_OFFSET>,
            _NetworkType::<Impl, IMPL_OFFSET>,
            Set_NetworkType::<Impl, IMPL_OFFSET>,
            CreateTuneRequest::<Impl, IMPL_OFFSET>,
            EnumCategoryGUIDs::<Impl, IMPL_OFFSET>,
            EnumDeviceMonikers::<Impl, IMPL_OFFSET>,
            DefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SetDefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            FrequencyMapping::<Impl, IMPL_OFFSET>,
            SetFrequencyMapping::<Impl, IMPL_OFFSET>,
            DefaultLocator::<Impl, IMPL_OFFSET>,
            SetDefaultLocator::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            CountryCode::<Impl, IMPL_OFFSET>,
            SetCountryCode::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IAuxInTuningSpace2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IBDAComparableImpl: Sized {
    fn CompareExact();
    fn CompareEquivalent();
    fn HashExact();
    fn HashExactIncremental();
    fn HashEquivalent();
    fn HashEquivalentIncremental();
}
#[cfg(feature = "Win32_System_Com")]
impl IBDAComparableVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDAComparableImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDAComparableVtbl {
        unsafe extern "system" fn CompareExact<Impl: IBDAComparableImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, compareto: ::windows::core::RawPtr, result: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CompareEquivalent<Impl: IBDAComparableImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, compareto: ::windows::core::RawPtr, dwflags: u32, result: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HashExact<Impl: IBDAComparableImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, result: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HashExactIncremental<Impl: IBDAComparableImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, partialresult: i64, result: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HashEquivalent<Impl: IBDAComparableImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, result: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HashEquivalentIncremental<Impl: IBDAComparableImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, partialresult: i64, dwflags: u32, result: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CompareExact::<Impl, IMPL_OFFSET>, CompareEquivalent::<Impl, IMPL_OFFSET>, HashExact::<Impl, IMPL_OFFSET>, HashExactIncremental::<Impl, IMPL_OFFSET>, HashEquivalent::<Impl, IMPL_OFFSET>, HashEquivalentIncremental::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDAComparable as ::windows::core::Interface>::IID
    }
}
pub trait IBDACreateTuneRequestExImpl: Sized {
    fn CreateTuneRequestEx();
}
impl IBDACreateTuneRequestExVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDACreateTuneRequestExImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDACreateTuneRequestExVtbl {
        unsafe extern "system" fn CreateTuneRequestEx<Impl: IBDACreateTuneRequestExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tunerequestiid: *const ::windows::core::GUID, tunerequest: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CreateTuneRequestEx::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDACreateTuneRequestEx as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_AUXImpl: Sized {
    fn QueryCapabilities();
    fn EnumCapability();
}
impl IBDA_AUXVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_AUXImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_AUXVtbl {
        unsafe extern "system" fn QueryCapabilities<Impl: IBDA_AUXImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwnumauxinputsbstr: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumCapability<Impl: IBDA_AUXImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, dwinputid: *mut u32, pconnectortype: *mut ::windows::core::GUID, conntypenum: *mut u32, numvideostds: *mut u32, analogstds: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, QueryCapabilities::<Impl, IMPL_OFFSET>, EnumCapability::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_AUX as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_AutoDemodulateImpl: Sized {
    fn SetAutoDemodulate();
}
impl IBDA_AutoDemodulateVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_AutoDemodulateImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_AutoDemodulateVtbl {
        unsafe extern "system" fn SetAutoDemodulate<Impl: IBDA_AutoDemodulateImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetAutoDemodulate::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_AutoDemodulate as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_AutoDemodulateExImpl: Sized + IBDA_AutoDemodulateImpl {
    fn SupportedDeviceNodeTypes();
    fn SupportedVideoFormats();
    fn AuxInputCount();
}
impl IBDA_AutoDemodulateExVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_AutoDemodulateExImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_AutoDemodulateExVtbl {
        unsafe extern "system" fn SupportedDeviceNodeTypes<Impl: IBDA_AutoDemodulateExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcdevicenodetypesmax: u32, pulcdevicenodetypes: *mut u32, pguiddevicenodetypes: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SupportedVideoFormats<Impl: IBDA_AutoDemodulateExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulamtunermodetype: *mut u32, pulanalogvideostandard: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AuxInputCount<Impl: IBDA_AutoDemodulateExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcompositecount: *mut u32, pulsvideocount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetAutoDemodulate::<Impl, IMPL_OFFSET>, SupportedDeviceNodeTypes::<Impl, IMPL_OFFSET>, SupportedVideoFormats::<Impl, IMPL_OFFSET>, AuxInputCount::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_AutoDemodulateEx as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IBDA_ConditionalAccessImpl: Sized {
    fn SmartCardStatus();
    fn SmartCardInfo();
    fn SmartCardApplications();
    fn Entitlement();
    fn TuneByChannel();
    fn SetProgram();
    fn AddProgram();
    fn RemoveProgram();
    fn GetModuleUI();
    fn InformUIClosed();
}
#[cfg(feature = "Win32_Foundation")]
impl IBDA_ConditionalAccessVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_ConditionalAccessImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_ConditionalAccessVtbl {
        unsafe extern "system" fn SmartCardStatus<Impl: IBDA_ConditionalAccessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcardstatus: *mut SmartCardStatusType, pcardassociation: *mut SmartCardAssociationType, pbstrcarderror: *mut super::super::Foundation::BSTR, pfooblocked: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SmartCardInfo<Impl: IBDA_ConditionalAccessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrcardname: *mut super::super::Foundation::BSTR, pbstrcardmanufacturer: *mut super::super::Foundation::BSTR, pfdaylightsavings: *mut i16, pbyratingregion: *mut u8, pltimezoneoffsetminutes: *mut i32, pbstrlanguage: *mut super::super::Foundation::BSTR, pealocationcode: *mut EALocationCodeType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SmartCardApplications<Impl: IBDA_ConditionalAccessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcapplications: *mut u32, ulcapplicationsmax: u32, rgapplications: *mut SmartCardApplication) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Entitlement<Impl: IBDA_ConditionalAccessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, usvirtualchannel: u16, pentitlement: *mut EntitlementType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TuneByChannel<Impl: IBDA_ConditionalAccessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, usvirtualchannel: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProgram<Impl: IBDA_ConditionalAccessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, usprogramnumber: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddProgram<Impl: IBDA_ConditionalAccessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, usprogramnumber: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveProgram<Impl: IBDA_ConditionalAccessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, usprogramnumber: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleUI<Impl: IBDA_ConditionalAccessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bydialognumber: u8, pbstrurl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InformUIClosed<Impl: IBDA_ConditionalAccessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bydialognumber: u8, closereason: UICloseReasonType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SmartCardStatus::<Impl, IMPL_OFFSET>,
            SmartCardInfo::<Impl, IMPL_OFFSET>,
            SmartCardApplications::<Impl, IMPL_OFFSET>,
            Entitlement::<Impl, IMPL_OFFSET>,
            TuneByChannel::<Impl, IMPL_OFFSET>,
            SetProgram::<Impl, IMPL_OFFSET>,
            AddProgram::<Impl, IMPL_OFFSET>,
            RemoveProgram::<Impl, IMPL_OFFSET>,
            GetModuleUI::<Impl, IMPL_OFFSET>,
            InformUIClosed::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_ConditionalAccess as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IBDA_ConditionalAccessExImpl: Sized {
    fn CheckEntitlementToken();
    fn SetCaptureToken();
    fn OpenBroadcastMmi();
    fn CloseMmiDialog();
    fn CreateDialogRequestNumber();
}
#[cfg(feature = "Win32_Foundation")]
impl IBDA_ConditionalAccessExVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_ConditionalAccessExImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_ConditionalAccessExVtbl {
        unsafe extern "system" fn CheckEntitlementToken<Impl: IBDA_ConditionalAccessExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uldialogrequest: u32, bstrlanguage: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, requesttype: BDA_CONDITIONALACCESS_REQUESTTYPE, ulcbentitlementtokenlen: u32, pbentitlementtoken: *const u8, puldescramblestatus: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCaptureToken<Impl: IBDA_ConditionalAccessExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcbcapturetokenlen: u32, pbcapturetoken: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenBroadcastMmi<Impl: IBDA_ConditionalAccessExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uldialogrequest: u32, bstrlanguage: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, eventid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CloseMmiDialog<Impl: IBDA_ConditionalAccessExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uldialogrequest: u32, bstrlanguage: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, uldialognumber: u32, reasoncode: BDA_CONDITIONALACCESS_MMICLOSEREASON, pulsessionresult: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateDialogRequestNumber<Impl: IBDA_ConditionalAccessExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, puldialogrequestnumber: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CheckEntitlementToken::<Impl, IMPL_OFFSET>, SetCaptureToken::<Impl, IMPL_OFFSET>, OpenBroadcastMmi::<Impl, IMPL_OFFSET>, CloseMmiDialog::<Impl, IMPL_OFFSET>, CreateDialogRequestNumber::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_ConditionalAccessEx as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IBDA_DRIDRMServiceImpl: Sized {
    fn SetDRM();
    fn GetDRMStatus();
    fn GetPairingStatus();
}
#[cfg(feature = "Win32_Foundation")]
impl IBDA_DRIDRMServiceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_DRIDRMServiceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_DRIDRMServiceVtbl {
        unsafe extern "system" fn SetDRM<Impl: IBDA_DRIDRMServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrnewdrm: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDRMStatus<Impl: IBDA_DRIDRMServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrdrmuuidlist: *mut super::super::Foundation::BSTR, drmuuid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPairingStatus<Impl: IBDA_DRIDRMServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, penumpairingstatus: *mut BDA_DrmPairingError) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetDRM::<Impl, IMPL_OFFSET>, GetDRMStatus::<Impl, IMPL_OFFSET>, GetPairingStatus::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_DRIDRMService as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_DRIWMDRMSessionImpl: Sized {
    fn AcknowledgeLicense();
    fn ProcessLicenseChallenge();
    fn ProcessRegistrationChallenge();
    fn SetRevInfo();
    fn SetCrl();
    fn GetHMSAssociationData();
    fn GetLastCardeaError();
}
impl IBDA_DRIWMDRMSessionVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_DRIWMDRMSessionImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_DRIWMDRMSessionVtbl {
        unsafe extern "system" fn AcknowledgeLicense<Impl: IBDA_DRIWMDRMSessionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hrlicenseack: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ProcessLicenseChallenge<Impl: IBDA_DRIWMDRMSessionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcblicensemessage: u32, pblicensemessage: *const u8, pdwcblicenseresponse: *mut u32, ppblicenseresponse: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ProcessRegistrationChallenge<Impl: IBDA_DRIWMDRMSessionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcbregistrationmessage: u32, pbregistrationmessage: *const u8, pdwcbregistrationresponse: *mut u32, ppbregistrationresponse: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRevInfo<Impl: IBDA_DRIWMDRMSessionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrevinfolen: u32, pbrevinfo: *const u8, pdwresponse: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCrl<Impl: IBDA_DRIWMDRMSessionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcrllen: u32, pbcrllen: *const u8, pdwresponse: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetHMSAssociationData<Impl: IBDA_DRIWMDRMSessionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastCardeaError<Impl: IBDA_DRIWMDRMSessionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwerror: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, AcknowledgeLicense::<Impl, IMPL_OFFSET>, ProcessLicenseChallenge::<Impl, IMPL_OFFSET>, ProcessRegistrationChallenge::<Impl, IMPL_OFFSET>, SetRevInfo::<Impl, IMPL_OFFSET>, SetCrl::<Impl, IMPL_OFFSET>, GetHMSAssociationData::<Impl, IMPL_OFFSET>, GetLastCardeaError::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_DRIWMDRMSession as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IBDA_DRMImpl: Sized {
    fn GetDRMPairingStatus();
    fn PerformDRMPairing();
}
#[cfg(feature = "Win32_Foundation")]
impl IBDA_DRMVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_DRMImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_DRMVtbl {
        unsafe extern "system" fn GetDRMPairingStatus<Impl: IBDA_DRMImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwstatus: *mut u32, pherror: *mut ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PerformDRMPairing<Impl: IBDA_DRMImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fsync: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetDRMPairingStatus::<Impl, IMPL_OFFSET>, PerformDRMPairing::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_DRM as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IBDA_DRMServiceImpl: Sized {
    fn SetDRM();
    fn GetDRMStatus();
}
#[cfg(feature = "Win32_Foundation")]
impl IBDA_DRMServiceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_DRMServiceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_DRMServiceVtbl {
        unsafe extern "system" fn SetDRM<Impl: IBDA_DRMServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, puuidnewdrm: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDRMStatus<Impl: IBDA_DRMServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrdrmuuidlist: *mut super::super::Foundation::BSTR, drmuuid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetDRM::<Impl, IMPL_OFFSET>, GetDRMStatus::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_DRMService as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_DeviceControlImpl: Sized {
    fn StartChanges();
    fn CheckChanges();
    fn CommitChanges();
    fn GetChangeState();
}
impl IBDA_DeviceControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_DeviceControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_DeviceControlVtbl {
        unsafe extern "system" fn StartChanges<Impl: IBDA_DeviceControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CheckChanges<Impl: IBDA_DeviceControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CommitChanges<Impl: IBDA_DeviceControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetChangeState<Impl: IBDA_DeviceControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, StartChanges::<Impl, IMPL_OFFSET>, CheckChanges::<Impl, IMPL_OFFSET>, CommitChanges::<Impl, IMPL_OFFSET>, GetChangeState::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_DeviceControl as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole"))]
pub trait IBDA_DiagnosticPropertiesImpl: Sized + IPropertyBagImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole"))]
impl IBDA_DiagnosticPropertiesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_DiagnosticPropertiesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_DiagnosticPropertiesVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Read::<Impl, IMPL_OFFSET>, Write::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_DiagnosticProperties as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_DigitalDemodulatorImpl: Sized {
    fn SetModulationType();
    fn ModulationType();
    fn SetInnerFECMethod();
    fn InnerFECMethod();
    fn SetInnerFECRate();
    fn InnerFECRate();
    fn SetOuterFECMethod();
    fn OuterFECMethod();
    fn SetOuterFECRate();
    fn OuterFECRate();
    fn SetSymbolRate();
    fn SymbolRate();
    fn SetSpectralInversion();
    fn SpectralInversion();
}
impl IBDA_DigitalDemodulatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_DigitalDemodulatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_DigitalDemodulatorVtbl {
        unsafe extern "system" fn SetModulationType<Impl: IBDA_DigitalDemodulatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmodulationtype: *const ModulationType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ModulationType<Impl: IBDA_DigitalDemodulatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmodulationtype: *mut ModulationType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInnerFECMethod<Impl: IBDA_DigitalDemodulatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfecmethod: *const FECMethod) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InnerFECMethod<Impl: IBDA_DigitalDemodulatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfecmethod: *mut FECMethod) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInnerFECRate<Impl: IBDA_DigitalDemodulatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfecrate: *const BinaryConvolutionCodeRate) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InnerFECRate<Impl: IBDA_DigitalDemodulatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfecrate: *mut BinaryConvolutionCodeRate) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOuterFECMethod<Impl: IBDA_DigitalDemodulatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfecmethod: *const FECMethod) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OuterFECMethod<Impl: IBDA_DigitalDemodulatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfecmethod: *mut FECMethod) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOuterFECRate<Impl: IBDA_DigitalDemodulatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfecrate: *const BinaryConvolutionCodeRate) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OuterFECRate<Impl: IBDA_DigitalDemodulatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfecrate: *mut BinaryConvolutionCodeRate) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSymbolRate<Impl: IBDA_DigitalDemodulatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psymbolrate: *const u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SymbolRate<Impl: IBDA_DigitalDemodulatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psymbolrate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpectralInversion<Impl: IBDA_DigitalDemodulatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pspectralinversion: *const SpectralInversion) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SpectralInversion<Impl: IBDA_DigitalDemodulatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pspectralinversion: *mut SpectralInversion) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetModulationType::<Impl, IMPL_OFFSET>,
            ModulationType::<Impl, IMPL_OFFSET>,
            SetInnerFECMethod::<Impl, IMPL_OFFSET>,
            InnerFECMethod::<Impl, IMPL_OFFSET>,
            SetInnerFECRate::<Impl, IMPL_OFFSET>,
            InnerFECRate::<Impl, IMPL_OFFSET>,
            SetOuterFECMethod::<Impl, IMPL_OFFSET>,
            OuterFECMethod::<Impl, IMPL_OFFSET>,
            SetOuterFECRate::<Impl, IMPL_OFFSET>,
            OuterFECRate::<Impl, IMPL_OFFSET>,
            SetSymbolRate::<Impl, IMPL_OFFSET>,
            SymbolRate::<Impl, IMPL_OFFSET>,
            SetSpectralInversion::<Impl, IMPL_OFFSET>,
            SpectralInversion::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_DigitalDemodulator as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_DigitalDemodulator2Impl: Sized + IBDA_DigitalDemodulatorImpl {
    fn SetGuardInterval();
    fn GuardInterval();
    fn SetTransmissionMode();
    fn TransmissionMode();
    fn SetRollOff();
    fn RollOff();
    fn SetPilot();
    fn Pilot();
}
impl IBDA_DigitalDemodulator2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_DigitalDemodulator2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_DigitalDemodulator2Vtbl {
        unsafe extern "system" fn SetGuardInterval<Impl: IBDA_DigitalDemodulator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguardinterval: *const GuardInterval) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GuardInterval<Impl: IBDA_DigitalDemodulator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguardinterval: *mut GuardInterval) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTransmissionMode<Impl: IBDA_DigitalDemodulator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptransmissionmode: *const TransmissionMode) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TransmissionMode<Impl: IBDA_DigitalDemodulator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptransmissionmode: *mut TransmissionMode) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRollOff<Impl: IBDA_DigitalDemodulator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prolloff: *const RollOff) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RollOff<Impl: IBDA_DigitalDemodulator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prolloff: *mut RollOff) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPilot<Impl: IBDA_DigitalDemodulator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppilot: *const Pilot) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Pilot<Impl: IBDA_DigitalDemodulator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppilot: *mut Pilot) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetModulationType::<Impl, IMPL_OFFSET>,
            ModulationType::<Impl, IMPL_OFFSET>,
            SetInnerFECMethod::<Impl, IMPL_OFFSET>,
            InnerFECMethod::<Impl, IMPL_OFFSET>,
            SetInnerFECRate::<Impl, IMPL_OFFSET>,
            InnerFECRate::<Impl, IMPL_OFFSET>,
            SetOuterFECMethod::<Impl, IMPL_OFFSET>,
            OuterFECMethod::<Impl, IMPL_OFFSET>,
            SetOuterFECRate::<Impl, IMPL_OFFSET>,
            OuterFECRate::<Impl, IMPL_OFFSET>,
            SetSymbolRate::<Impl, IMPL_OFFSET>,
            SymbolRate::<Impl, IMPL_OFFSET>,
            SetSpectralInversion::<Impl, IMPL_OFFSET>,
            SpectralInversion::<Impl, IMPL_OFFSET>,
            SetGuardInterval::<Impl, IMPL_OFFSET>,
            GuardInterval::<Impl, IMPL_OFFSET>,
            SetTransmissionMode::<Impl, IMPL_OFFSET>,
            TransmissionMode::<Impl, IMPL_OFFSET>,
            SetRollOff::<Impl, IMPL_OFFSET>,
            RollOff::<Impl, IMPL_OFFSET>,
            SetPilot::<Impl, IMPL_OFFSET>,
            Pilot::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_DigitalDemodulator2 as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_DigitalDemodulator3Impl: Sized + IBDA_DigitalDemodulator2Impl + IBDA_DigitalDemodulatorImpl {
    fn SetSignalTimeouts();
    fn SignalTimeouts();
    fn SetPLPNumber();
    fn PLPNumber();
}
impl IBDA_DigitalDemodulator3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_DigitalDemodulator3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_DigitalDemodulator3Vtbl {
        unsafe extern "system" fn SetSignalTimeouts<Impl: IBDA_DigitalDemodulator3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psignaltimeouts: *const BDA_SIGNAL_TIMEOUTS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SignalTimeouts<Impl: IBDA_DigitalDemodulator3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psignaltimeouts: *mut BDA_SIGNAL_TIMEOUTS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPLPNumber<Impl: IBDA_DigitalDemodulator3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pplpnumber: *const u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PLPNumber<Impl: IBDA_DigitalDemodulator3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pplpnumber: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetModulationType::<Impl, IMPL_OFFSET>,
            ModulationType::<Impl, IMPL_OFFSET>,
            SetInnerFECMethod::<Impl, IMPL_OFFSET>,
            InnerFECMethod::<Impl, IMPL_OFFSET>,
            SetInnerFECRate::<Impl, IMPL_OFFSET>,
            InnerFECRate::<Impl, IMPL_OFFSET>,
            SetOuterFECMethod::<Impl, IMPL_OFFSET>,
            OuterFECMethod::<Impl, IMPL_OFFSET>,
            SetOuterFECRate::<Impl, IMPL_OFFSET>,
            OuterFECRate::<Impl, IMPL_OFFSET>,
            SetSymbolRate::<Impl, IMPL_OFFSET>,
            SymbolRate::<Impl, IMPL_OFFSET>,
            SetSpectralInversion::<Impl, IMPL_OFFSET>,
            SpectralInversion::<Impl, IMPL_OFFSET>,
            SetGuardInterval::<Impl, IMPL_OFFSET>,
            GuardInterval::<Impl, IMPL_OFFSET>,
            SetTransmissionMode::<Impl, IMPL_OFFSET>,
            TransmissionMode::<Impl, IMPL_OFFSET>,
            SetRollOff::<Impl, IMPL_OFFSET>,
            RollOff::<Impl, IMPL_OFFSET>,
            SetPilot::<Impl, IMPL_OFFSET>,
            Pilot::<Impl, IMPL_OFFSET>,
            SetSignalTimeouts::<Impl, IMPL_OFFSET>,
            SignalTimeouts::<Impl, IMPL_OFFSET>,
            SetPLPNumber::<Impl, IMPL_OFFSET>,
            PLPNumber::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_DigitalDemodulator3 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IBDA_DiseqCommandImpl: Sized {
    fn SetEnableDiseqCommands();
    fn SetDiseqLNBSource();
    fn SetDiseqUseToneBurst();
    fn SetDiseqRepeats();
    fn SetDiseqSendCommand();
    fn DiseqResponse();
}
#[cfg(feature = "Win32_Foundation")]
impl IBDA_DiseqCommandVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_DiseqCommandImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_DiseqCommandVtbl {
        unsafe extern "system" fn SetEnableDiseqCommands<Impl: IBDA_DiseqCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benable: super::super::Foundation::BOOLEAN) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDiseqLNBSource<Impl: IBDA_DiseqCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ullnbsource: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDiseqUseToneBurst<Impl: IBDA_DiseqCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busetoneburst: super::super::Foundation::BOOLEAN) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDiseqRepeats<Impl: IBDA_DiseqCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulrepeats: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDiseqSendCommand<Impl: IBDA_DiseqCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulrequestid: u32, ulcbcommandlen: u32, pbcommand: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DiseqResponse<Impl: IBDA_DiseqCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulrequestid: u32, pulcbresponselen: *mut u32, pbresponse: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetEnableDiseqCommands::<Impl, IMPL_OFFSET>, SetDiseqLNBSource::<Impl, IMPL_OFFSET>, SetDiseqUseToneBurst::<Impl, IMPL_OFFSET>, SetDiseqRepeats::<Impl, IMPL_OFFSET>, SetDiseqSendCommand::<Impl, IMPL_OFFSET>, DiseqResponse::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_DiseqCommand as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_EasMessageImpl: Sized {
    fn EasMessage();
}
impl IBDA_EasMessageVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_EasMessageImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_EasMessageVtbl {
        unsafe extern "system" fn EasMessage<Impl: IBDA_EasMessageImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uleventid: u32, ppeasobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, EasMessage::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_EasMessage as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IBDA_EncoderImpl: Sized {
    fn QueryCapabilities();
    fn EnumAudioCapability();
    fn EnumVideoCapability();
    fn SetParameters();
    fn GetState();
}
#[cfg(feature = "Win32_Foundation")]
impl IBDA_EncoderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_EncoderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_EncoderVtbl {
        unsafe extern "system" fn QueryCapabilities<Impl: IBDA_EncoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, numaudiofmts: *mut u32, numvideofmts: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumAudioCapability<Impl: IBDA_EncoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fmtindex: u32, methodid: *mut u32, algorithmtype: *mut u32, samplingrate: *mut u32, bitdepth: *mut u32, numchannels: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumVideoCapability<Impl: IBDA_EncoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fmtindex: u32, methodid: *mut u32, algorithmtype: *mut u32, verticalsize: *mut u32, horizontalsize: *mut u32, aspectratio: *mut u32, frameratecode: *mut u32, progressivesequence: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetParameters<Impl: IBDA_EncoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, audiobitratemode: u32, audiobitrate: u32, audiomethodid: u32, audioprogram: u32, videobitratemode: u32, videobitrate: u32, videomethodid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetState<Impl: IBDA_EncoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, audiobitratemax: *mut u32, audiobitratemin: *mut u32, audiobitratemode: *mut u32, audiobitratestepping: *mut u32, audiobitrate: *mut u32, audiomethodid: *mut u32, availableaudioprograms: *mut u32, audioprogram: *mut u32, videobitratemax: *mut u32, videobitratemin: *mut u32, videobitratemode: *mut u32, videobitrate: *mut u32, videobitratestepping: *mut u32, videomethodid: *mut u32, signalsourceid: *mut u32, signalformat: *mut u64, signallock: *mut super::super::Foundation::BOOL, signallevel: *mut i32, signaltonoiseratio: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, QueryCapabilities::<Impl, IMPL_OFFSET>, EnumAudioCapability::<Impl, IMPL_OFFSET>, EnumVideoCapability::<Impl, IMPL_OFFSET>, SetParameters::<Impl, IMPL_OFFSET>, GetState::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_Encoder as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_EthernetFilterImpl: Sized {
    fn GetMulticastListSize();
    fn PutMulticastList();
    fn GetMulticastList();
    fn PutMulticastMode();
    fn GetMulticastMode();
}
impl IBDA_EthernetFilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_EthernetFilterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_EthernetFilterVtbl {
        unsafe extern "system" fn GetMulticastListSize<Impl: IBDA_EthernetFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcbaddresses: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PutMulticastList<Impl: IBDA_EthernetFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcbaddresses: u32, paddresslist: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMulticastList<Impl: IBDA_EthernetFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcbaddresses: *mut u32, paddresslist: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PutMulticastMode<Impl: IBDA_EthernetFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulmodemask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMulticastMode<Impl: IBDA_EthernetFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulmodemask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetMulticastListSize::<Impl, IMPL_OFFSET>, PutMulticastList::<Impl, IMPL_OFFSET>, GetMulticastList::<Impl, IMPL_OFFSET>, PutMulticastMode::<Impl, IMPL_OFFSET>, GetMulticastMode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_EthernetFilter as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_EventingServiceImpl: Sized {
    fn CompleteEvent();
}
impl IBDA_EventingServiceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_EventingServiceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_EventingServiceVtbl {
        unsafe extern "system" fn CompleteEvent<Impl: IBDA_EventingServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uleventid: u32, uleventresult: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CompleteEvent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_EventingService as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IBDA_FDCImpl: Sized {
    fn GetStatus();
    fn RequestTables();
    fn AddPid();
    fn RemovePid();
    fn AddTid();
    fn RemoveTid();
    fn GetTableSection();
}
#[cfg(feature = "Win32_Foundation")]
impl IBDA_FDCVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_FDCImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_FDCVtbl {
        unsafe extern "system" fn GetStatus<Impl: IBDA_FDCImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentbitrate: *mut u32, carrierlock: *mut super::super::Foundation::BOOL, currentfrequency: *mut u32, currentspectruminversion: *mut super::super::Foundation::BOOL, currentpidlist: *mut super::super::Foundation::BSTR, currenttidlist: *mut super::super::Foundation::BSTR, overflow: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RequestTables<Impl: IBDA_FDCImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tableids: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddPid<Impl: IBDA_FDCImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidstoadd: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, remainingfilterentries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemovePid<Impl: IBDA_FDCImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidstoremove: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddTid<Impl: IBDA_FDCImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tidstoadd: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, currenttidlist: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveTid<Impl: IBDA_FDCImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tidstoremove: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableSection<Impl: IBDA_FDCImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pid: *mut u32, maxbuffersize: u32, actualsize: *mut u32, secbuffer: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetStatus::<Impl, IMPL_OFFSET>, RequestTables::<Impl, IMPL_OFFSET>, AddPid::<Impl, IMPL_OFFSET>, RemovePid::<Impl, IMPL_OFFSET>, AddTid::<Impl, IMPL_OFFSET>, RemoveTid::<Impl, IMPL_OFFSET>, GetTableSection::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_FDC as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_FrequencyFilterImpl: Sized {
    fn SetAutotune();
    fn Autotune();
    fn SetFrequency();
    fn Frequency();
    fn SetPolarity();
    fn Polarity();
    fn SetRange();
    fn Range();
    fn SetBandwidth();
    fn Bandwidth();
    fn SetFrequencyMultiplier();
    fn FrequencyMultiplier();
}
impl IBDA_FrequencyFilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_FrequencyFilterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_FrequencyFilterVtbl {
        unsafe extern "system" fn SetAutotune<Impl: IBDA_FrequencyFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultransponder: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Autotune<Impl: IBDA_FrequencyFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pultransponder: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFrequency<Impl: IBDA_FrequencyFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulfrequency: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Frequency<Impl: IBDA_FrequencyFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulfrequency: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPolarity<Impl: IBDA_FrequencyFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, polarity: Polarisation) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Polarity<Impl: IBDA_FrequencyFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppolarity: *mut Polarisation) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRange<Impl: IBDA_FrequencyFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulrange: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Range<Impl: IBDA_FrequencyFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulrange: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBandwidth<Impl: IBDA_FrequencyFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulbandwidth: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Bandwidth<Impl: IBDA_FrequencyFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulbandwidth: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFrequencyMultiplier<Impl: IBDA_FrequencyFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulmultiplier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FrequencyMultiplier<Impl: IBDA_FrequencyFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulmultiplier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetAutotune::<Impl, IMPL_OFFSET>,
            Autotune::<Impl, IMPL_OFFSET>,
            SetFrequency::<Impl, IMPL_OFFSET>,
            Frequency::<Impl, IMPL_OFFSET>,
            SetPolarity::<Impl, IMPL_OFFSET>,
            Polarity::<Impl, IMPL_OFFSET>,
            SetRange::<Impl, IMPL_OFFSET>,
            Range::<Impl, IMPL_OFFSET>,
            SetBandwidth::<Impl, IMPL_OFFSET>,
            Bandwidth::<Impl, IMPL_OFFSET>,
            SetFrequencyMultiplier::<Impl, IMPL_OFFSET>,
            FrequencyMultiplier::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_FrequencyFilter as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IBDA_GuideDataDeliveryServiceImpl: Sized {
    fn GetGuideDataType();
    fn GetGuideData();
    fn RequestGuideDataUpdate();
    fn GetTuneXmlFromServiceIdx();
    fn GetServices();
    fn GetServiceInfoFromTuneXml();
}
#[cfg(feature = "Win32_Foundation")]
impl IBDA_GuideDataDeliveryServiceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_GuideDataDeliveryServiceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_GuideDataDeliveryServiceVtbl {
        unsafe extern "system" fn GetGuideDataType<Impl: IBDA_GuideDataDeliveryServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguiddatatype: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetGuideData<Impl: IBDA_GuideDataDeliveryServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcbbufferlen: *mut u32, pbbuffer: *mut u8, pulguidedatapercentageprogress: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RequestGuideDataUpdate<Impl: IBDA_GuideDataDeliveryServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTuneXmlFromServiceIdx<Impl: IBDA_GuideDataDeliveryServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ul64serviceidx: u64, pbstrtunexml: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServices<Impl: IBDA_GuideDataDeliveryServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcbbufferlen: *mut u32, pbbuffer: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceInfoFromTuneXml<Impl: IBDA_GuideDataDeliveryServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrtunexml: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pbstrservicedescription: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetGuideDataType::<Impl, IMPL_OFFSET>, GetGuideData::<Impl, IMPL_OFFSET>, RequestGuideDataUpdate::<Impl, IMPL_OFFSET>, GetTuneXmlFromServiceIdx::<Impl, IMPL_OFFSET>, GetServices::<Impl, IMPL_OFFSET>, GetServiceInfoFromTuneXml::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_GuideDataDeliveryService as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_IPSinkControlImpl: Sized {
    fn GetMulticastList();
    fn GetAdapterIPAddress();
}
impl IBDA_IPSinkControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_IPSinkControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_IPSinkControlVtbl {
        unsafe extern "system" fn GetMulticastList<Impl: IBDA_IPSinkControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcbsize: *mut u32, pbbuffer: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAdapterIPAddress<Impl: IBDA_IPSinkControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcbsize: *mut u32, pbbuffer: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetMulticastList::<Impl, IMPL_OFFSET>, GetAdapterIPAddress::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_IPSinkControl as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IBDA_IPSinkInfoImpl: Sized {
    fn MulticastList();
    fn AdapterIPAddress();
    fn AdapterDescription();
}
#[cfg(feature = "Win32_Foundation")]
impl IBDA_IPSinkInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_IPSinkInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_IPSinkInfoVtbl {
        unsafe extern "system" fn MulticastList<Impl: IBDA_IPSinkInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcbaddresses: *mut u32, ppbaddresslist: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AdapterIPAddress<Impl: IBDA_IPSinkInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrbuffer: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AdapterDescription<Impl: IBDA_IPSinkInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrbuffer: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, MulticastList::<Impl, IMPL_OFFSET>, AdapterIPAddress::<Impl, IMPL_OFFSET>, AdapterDescription::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_IPSinkInfo as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_IPV4FilterImpl: Sized {
    fn GetMulticastListSize();
    fn PutMulticastList();
    fn GetMulticastList();
    fn PutMulticastMode();
    fn GetMulticastMode();
}
impl IBDA_IPV4FilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_IPV4FilterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_IPV4FilterVtbl {
        unsafe extern "system" fn GetMulticastListSize<Impl: IBDA_IPV4FilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcbaddresses: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PutMulticastList<Impl: IBDA_IPV4FilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcbaddresses: u32, paddresslist: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMulticastList<Impl: IBDA_IPV4FilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcbaddresses: *mut u32, paddresslist: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PutMulticastMode<Impl: IBDA_IPV4FilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulmodemask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMulticastMode<Impl: IBDA_IPV4FilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulmodemask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetMulticastListSize::<Impl, IMPL_OFFSET>, PutMulticastList::<Impl, IMPL_OFFSET>, GetMulticastList::<Impl, IMPL_OFFSET>, PutMulticastMode::<Impl, IMPL_OFFSET>, GetMulticastMode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_IPV4Filter as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_IPV6FilterImpl: Sized {
    fn GetMulticastListSize();
    fn PutMulticastList();
    fn GetMulticastList();
    fn PutMulticastMode();
    fn GetMulticastMode();
}
impl IBDA_IPV6FilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_IPV6FilterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_IPV6FilterVtbl {
        unsafe extern "system" fn GetMulticastListSize<Impl: IBDA_IPV6FilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcbaddresses: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PutMulticastList<Impl: IBDA_IPV6FilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcbaddresses: u32, paddresslist: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMulticastList<Impl: IBDA_IPV6FilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcbaddresses: *mut u32, paddresslist: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PutMulticastMode<Impl: IBDA_IPV6FilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulmodemask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMulticastMode<Impl: IBDA_IPV6FilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulmodemask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetMulticastListSize::<Impl, IMPL_OFFSET>, PutMulticastList::<Impl, IMPL_OFFSET>, GetMulticastList::<Impl, IMPL_OFFSET>, PutMulticastMode::<Impl, IMPL_OFFSET>, GetMulticastMode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_IPV6Filter as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_ISDBConditionalAccessImpl: Sized {
    fn SetIsdbCasRequest();
}
impl IBDA_ISDBConditionalAccessVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_ISDBConditionalAccessImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_ISDBConditionalAccessVtbl {
        unsafe extern "system" fn SetIsdbCasRequest<Impl: IBDA_ISDBConditionalAccessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulrequestid: u32, ulcbrequestbufferlen: u32, pbrequestbuffer: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetIsdbCasRequest::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_ISDBConditionalAccess as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_LNBInfoImpl: Sized {
    fn SetLocalOscilatorFrequencyLowBand();
    fn LocalOscilatorFrequencyLowBand();
    fn SetLocalOscilatorFrequencyHighBand();
    fn LocalOscilatorFrequencyHighBand();
    fn SetHighLowSwitchFrequency();
    fn HighLowSwitchFrequency();
}
impl IBDA_LNBInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_LNBInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_LNBInfoVtbl {
        unsafe extern "system" fn SetLocalOscilatorFrequencyLowBand<Impl: IBDA_LNBInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulloflow: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LocalOscilatorFrequencyLowBand<Impl: IBDA_LNBInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulloflow: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLocalOscilatorFrequencyHighBand<Impl: IBDA_LNBInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ullofhigh: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LocalOscilatorFrequencyHighBand<Impl: IBDA_LNBInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pullofhigh: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetHighLowSwitchFrequency<Impl: IBDA_LNBInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulswitchfrequency: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HighLowSwitchFrequency<Impl: IBDA_LNBInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulswitchfrequency: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetLocalOscilatorFrequencyLowBand::<Impl, IMPL_OFFSET>, LocalOscilatorFrequencyLowBand::<Impl, IMPL_OFFSET>, SetLocalOscilatorFrequencyHighBand::<Impl, IMPL_OFFSET>, LocalOscilatorFrequencyHighBand::<Impl, IMPL_OFFSET>, SetHighLowSwitchFrequency::<Impl, IMPL_OFFSET>, HighLowSwitchFrequency::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_LNBInfo as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_MUXImpl: Sized {
    fn SetPidList();
    fn GetPidList();
}
impl IBDA_MUXVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_MUXImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_MUXVtbl {
        unsafe extern "system" fn SetPidList<Impl: IBDA_MUXImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulpidlistcount: u32, pbpidlistbuffer: *const BDA_MUX_PIDLISTITEM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPidList<Impl: IBDA_MUXImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulpidlistcount: *mut u32, pbpidlistbuffer: *mut BDA_MUX_PIDLISTITEM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetPidList::<Impl, IMPL_OFFSET>, GetPidList::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_MUX as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IBDA_NameValueServiceImpl: Sized {
    fn GetValueNameByIndex();
    fn GetValue();
    fn SetValue();
}
#[cfg(feature = "Win32_Foundation")]
impl IBDA_NameValueServiceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_NameValueServiceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_NameValueServiceVtbl {
        unsafe extern "system" fn GetValueNameByIndex<Impl: IBDA_NameValueServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulindex: u32, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetValue<Impl: IBDA_NameValueServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, bstrlanguage: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pbstrvalue: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetValue<Impl: IBDA_NameValueServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uldialogrequest: u32, bstrlanguage: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, bstrname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, bstrvalue: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, ulreserved: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetValueNameByIndex::<Impl, IMPL_OFFSET>, GetValue::<Impl, IMPL_OFFSET>, SetValue::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_NameValueService as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_NetworkProviderImpl: Sized {
    fn PutSignalSource();
    fn GetSignalSource();
    fn GetNetworkType();
    fn PutTuningSpace();
    fn GetTuningSpace();
    fn RegisterDeviceFilter();
    fn UnRegisterDeviceFilter();
}
impl IBDA_NetworkProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_NetworkProviderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_NetworkProviderVtbl {
        unsafe extern "system" fn PutSignalSource<Impl: IBDA_NetworkProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulsignalsource: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSignalSource<Impl: IBDA_NetworkProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulsignalsource: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNetworkType<Impl: IBDA_NetworkProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguidnetworktype: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PutTuningSpace<Impl: IBDA_NetworkProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guidtuningspace: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTuningSpace<Impl: IBDA_NetworkProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguidtuingspace: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterDeviceFilter<Impl: IBDA_NetworkProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkfiltercontrol: *mut ::core::ffi::c_void, ppvregisitrationcontext: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnRegisterDeviceFilter<Impl: IBDA_NetworkProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvregistrationcontext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, PutSignalSource::<Impl, IMPL_OFFSET>, GetSignalSource::<Impl, IMPL_OFFSET>, GetNetworkType::<Impl, IMPL_OFFSET>, PutTuningSpace::<Impl, IMPL_OFFSET>, GetTuningSpace::<Impl, IMPL_OFFSET>, RegisterDeviceFilter::<Impl, IMPL_OFFSET>, UnRegisterDeviceFilter::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_NetworkProvider as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_NullTransformImpl: Sized {
    fn Start();
    fn Stop();
}
impl IBDA_NullTransformVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_NullTransformImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_NullTransformVtbl {
        unsafe extern "system" fn Start<Impl: IBDA_NullTransformImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Stop<Impl: IBDA_NullTransformImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Start::<Impl, IMPL_OFFSET>, Stop::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_NullTransform as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_PinControlImpl: Sized {
    fn GetPinID();
    fn GetPinType();
    fn RegistrationContext();
}
impl IBDA_PinControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_PinControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_PinControlVtbl {
        unsafe extern "system" fn GetPinID<Impl: IBDA_PinControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulpinid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPinType<Impl: IBDA_PinControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulpintype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegistrationContext<Impl: IBDA_PinControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulregistrationctx: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetPinID::<Impl, IMPL_OFFSET>, GetPinType::<Impl, IMPL_OFFSET>, RegistrationContext::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_PinControl as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_SignalPropertiesImpl: Sized {
    fn PutNetworkType();
    fn GetNetworkType();
    fn PutSignalSource();
    fn GetSignalSource();
    fn PutTuningSpace();
    fn GetTuningSpace();
}
impl IBDA_SignalPropertiesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_SignalPropertiesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_SignalPropertiesVtbl {
        unsafe extern "system" fn PutNetworkType<Impl: IBDA_SignalPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guidnetworktype: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNetworkType<Impl: IBDA_SignalPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguidnetworktype: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PutSignalSource<Impl: IBDA_SignalPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulsignalsource: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSignalSource<Impl: IBDA_SignalPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulsignalsource: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PutTuningSpace<Impl: IBDA_SignalPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guidtuningspace: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTuningSpace<Impl: IBDA_SignalPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguidtuingspace: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, PutNetworkType::<Impl, IMPL_OFFSET>, GetNetworkType::<Impl, IMPL_OFFSET>, PutSignalSource::<Impl, IMPL_OFFSET>, GetSignalSource::<Impl, IMPL_OFFSET>, PutTuningSpace::<Impl, IMPL_OFFSET>, GetTuningSpace::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_SignalProperties as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IBDA_SignalStatisticsImpl: Sized {
    fn SetSignalStrength();
    fn SignalStrength();
    fn SetSignalQuality();
    fn SignalQuality();
    fn SetSignalPresent();
    fn SignalPresent();
    fn SetSignalLocked();
    fn SignalLocked();
    fn SetSampleTime();
    fn SampleTime();
}
#[cfg(feature = "Win32_Foundation")]
impl IBDA_SignalStatisticsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_SignalStatisticsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_SignalStatisticsVtbl {
        unsafe extern "system" fn SetSignalStrength<Impl: IBDA_SignalStatisticsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ldbstrength: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SignalStrength<Impl: IBDA_SignalStatisticsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pldbstrength: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSignalQuality<Impl: IBDA_SignalStatisticsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpercentquality: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SignalQuality<Impl: IBDA_SignalStatisticsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plpercentquality: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSignalPresent<Impl: IBDA_SignalStatisticsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fpresent: super::super::Foundation::BOOLEAN) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SignalPresent<Impl: IBDA_SignalStatisticsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfpresent: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSignalLocked<Impl: IBDA_SignalStatisticsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flocked: super::super::Foundation::BOOLEAN) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SignalLocked<Impl: IBDA_SignalStatisticsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pflocked: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSampleTime<Impl: IBDA_SignalStatisticsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lmssampletime: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SampleTime<Impl: IBDA_SignalStatisticsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plmssampletime: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetSignalStrength::<Impl, IMPL_OFFSET>,
            SignalStrength::<Impl, IMPL_OFFSET>,
            SetSignalQuality::<Impl, IMPL_OFFSET>,
            SignalQuality::<Impl, IMPL_OFFSET>,
            SetSignalPresent::<Impl, IMPL_OFFSET>,
            SignalPresent::<Impl, IMPL_OFFSET>,
            SetSignalLocked::<Impl, IMPL_OFFSET>,
            SignalLocked::<Impl, IMPL_OFFSET>,
            SetSampleTime::<Impl, IMPL_OFFSET>,
            SampleTime::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_SignalStatistics as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_TIF_REGISTRATIONImpl: Sized {
    fn RegisterTIFEx();
    fn UnregisterTIF();
}
impl IBDA_TIF_REGISTRATIONVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_TIF_REGISTRATIONImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_TIF_REGISTRATIONVtbl {
        unsafe extern "system" fn RegisterTIFEx<Impl: IBDA_TIF_REGISTRATIONImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptifinputpin: ::windows::core::RawPtr, ppvregistrationcontext: *mut u32, ppmpeg2datacontrol: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnregisterTIF<Impl: IBDA_TIF_REGISTRATIONImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvregistrationcontext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, RegisterTIFEx::<Impl, IMPL_OFFSET>, UnregisterTIF::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_TIF_REGISTRATION as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IBDA_TopologyImpl: Sized {
    fn GetNodeTypes();
    fn GetNodeDescriptors();
    fn GetNodeInterfaces();
    fn GetPinTypes();
    fn GetTemplateConnections();
    fn CreatePin();
    fn DeletePin();
    fn SetMediaType();
    fn SetMedium();
    fn CreateTopology();
    fn GetControlNode();
}
#[cfg(feature = "Win32_Foundation")]
impl IBDA_TopologyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_TopologyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_TopologyVtbl {
        unsafe extern "system" fn GetNodeTypes<Impl: IBDA_TopologyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcnodetypes: *mut u32, ulcnodetypesmax: u32, rgulnodetypes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNodeDescriptors<Impl: IBDA_TopologyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcnodedescriptors: *mut u32, ulcnodedescriptorsmax: u32, rgnodedescriptors: *mut BDANODE_DESCRIPTOR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNodeInterfaces<Impl: IBDA_TopologyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulnodetype: u32, pulcinterfaces: *mut u32, ulcinterfacesmax: u32, rgguidinterfaces: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPinTypes<Impl: IBDA_TopologyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcpintypes: *mut u32, ulcpintypesmax: u32, rgulpintypes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTemplateConnections<Impl: IBDA_TopologyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcconnections: *mut u32, ulcconnectionsmax: u32, rgconnections: *mut BDA_TEMPLATE_CONNECTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreatePin<Impl: IBDA_TopologyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulpintype: u32, pulpinid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DeletePin<Impl: IBDA_TopologyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulpinid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMediaType<Impl: IBDA_TopologyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulpinid: u32, pmediatype: *const AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMedium<Impl: IBDA_TopologyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulpinid: u32, pmedium: *const REGPINMEDIUM) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateTopology<Impl: IBDA_TopologyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulinputpinid: u32, uloutputpinid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetControlNode<Impl: IBDA_TopologyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulinputpinid: u32, uloutputpinid: u32, ulnodetype: u32, ppcontrolnode: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetNodeTypes::<Impl, IMPL_OFFSET>,
            GetNodeDescriptors::<Impl, IMPL_OFFSET>,
            GetNodeInterfaces::<Impl, IMPL_OFFSET>,
            GetPinTypes::<Impl, IMPL_OFFSET>,
            GetTemplateConnections::<Impl, IMPL_OFFSET>,
            CreatePin::<Impl, IMPL_OFFSET>,
            DeletePin::<Impl, IMPL_OFFSET>,
            SetMediaType::<Impl, IMPL_OFFSET>,
            SetMedium::<Impl, IMPL_OFFSET>,
            CreateTopology::<Impl, IMPL_OFFSET>,
            GetControlNode::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_Topology as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_TransportStreamInfoImpl: Sized {
    fn PatTableTickCount();
}
impl IBDA_TransportStreamInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_TransportStreamInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_TransportStreamInfoVtbl {
        unsafe extern "system" fn PatTableTickCount<Impl: IBDA_TransportStreamInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppattickcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, PatTableTickCount::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_TransportStreamInfo as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_TransportStreamSelectorImpl: Sized {
    fn SetTSID();
    fn GetTSInformation();
}
impl IBDA_TransportStreamSelectorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_TransportStreamSelectorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_TransportStreamSelectorVtbl {
        unsafe extern "system" fn SetTSID<Impl: IBDA_TransportStreamSelectorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ustsid: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTSInformation<Impl: IBDA_TransportStreamSelectorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pultsinformationbufferlen: *mut u32, pbtsinformationbuffer: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetTSID::<Impl, IMPL_OFFSET>, GetTSInformation::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_TransportStreamSelector as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_UserActivityServiceImpl: Sized {
    fn SetCurrentTunerUseReason();
    fn GetUserActivityInterval();
    fn UserActivityDetected();
}
impl IBDA_UserActivityServiceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_UserActivityServiceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_UserActivityServiceVtbl {
        unsafe extern "system" fn SetCurrentTunerUseReason<Impl: IBDA_UserActivityServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwusereason: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetUserActivityInterval<Impl: IBDA_UserActivityServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwactivityinterval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UserActivityDetected<Impl: IBDA_UserActivityServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetCurrentTunerUseReason::<Impl, IMPL_OFFSET>, GetUserActivityInterval::<Impl, IMPL_OFFSET>, UserActivityDetected::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_UserActivityService as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_VoidTransformImpl: Sized {
    fn Start();
    fn Stop();
}
impl IBDA_VoidTransformVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_VoidTransformImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_VoidTransformVtbl {
        unsafe extern "system" fn Start<Impl: IBDA_VoidTransformImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Stop<Impl: IBDA_VoidTransformImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Start::<Impl, IMPL_OFFSET>, Stop::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_VoidTransform as ::windows::core::Interface>::IID
    }
}
pub trait IBDA_WMDRMSessionImpl: Sized {
    fn GetStatus();
    fn SetRevInfo();
    fn SetCrl();
    fn TransactMessage();
    fn GetLicense();
    fn ReissueLicense();
    fn RenewLicense();
    fn GetKeyInfo();
}
impl IBDA_WMDRMSessionVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_WMDRMSessionImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_WMDRMSessionVtbl {
        unsafe extern "system" fn GetStatus<Impl: IBDA_WMDRMSessionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, maxcapturetoken: *mut u32, maxstreamingpid: *mut u32, maxlicense: *mut u32, minsecuritylevel: *mut u32, revinfosequencenumber: *mut u32, revinfoissuedtime: *mut u64, revinfottl: *mut u32, revlistversion: *mut u32, ulstate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRevInfo<Impl: IBDA_WMDRMSessionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulrevinfolen: u32, pbrevinfo: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCrl<Impl: IBDA_WMDRMSessionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcrllen: u32, pbcrllen: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TransactMessage<Impl: IBDA_WMDRMSessionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcbrequest: u32, pbrequest: *const u8, pulcbresponse: *mut u32, pbresponse: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLicense<Impl: IBDA_WMDRMSessionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uuidkey: *const ::windows::core::GUID, pulpackagelen: *mut u32, pbpackage: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReissueLicense<Impl: IBDA_WMDRMSessionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uuidkey: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RenewLicense<Impl: IBDA_WMDRMSessionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulinxmrlicenselen: u32, pbinxmrlicense: *const u8, ulentitlementtokenlen: u32, pbentitlementtoken: *const u8, puldescramblestatus: *mut u32, puloutxmrlicenselen: *mut u32, pboutxmrlicense: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKeyInfo<Impl: IBDA_WMDRMSessionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulkeyinfolen: *mut u32, pbkeyinfo: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetStatus::<Impl, IMPL_OFFSET>, SetRevInfo::<Impl, IMPL_OFFSET>, SetCrl::<Impl, IMPL_OFFSET>, TransactMessage::<Impl, IMPL_OFFSET>, GetLicense::<Impl, IMPL_OFFSET>, ReissueLicense::<Impl, IMPL_OFFSET>, RenewLicense::<Impl, IMPL_OFFSET>, GetKeyInfo::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_WMDRMSession as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IBDA_WMDRMTunerImpl: Sized {
    fn PurchaseEntitlement();
    fn CancelCaptureToken();
    fn SetPidProtection();
    fn GetPidProtection();
    fn SetSyncValue();
    fn GetStartCodeProfile();
}
#[cfg(feature = "Win32_Foundation")]
impl IBDA_WMDRMTunerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBDA_WMDRMTunerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBDA_WMDRMTunerVtbl {
        unsafe extern "system" fn PurchaseEntitlement<Impl: IBDA_WMDRMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uldialogrequest: u32, bstrlanguage: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, ulpurchasetokenlen: u32, pbpurchasetoken: *const u8, puldescramblestatus: *mut u32, pulcapturetokenlen: *mut u32, pbcapturetoken: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CancelCaptureToken<Impl: IBDA_WMDRMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcapturetokenlen: u32, pbcapturetoken: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPidProtection<Impl: IBDA_WMDRMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulpid: u32, uuidkey: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPidProtection<Impl: IBDA_WMDRMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulpid: u32, uuidkey: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSyncValue<Impl: IBDA_WMDRMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulsyncvalue: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStartCodeProfile<Impl: IBDA_WMDRMTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulstartcodeprofilelen: *mut u32, pbstartcodeprofile: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, PurchaseEntitlement::<Impl, IMPL_OFFSET>, CancelCaptureToken::<Impl, IMPL_OFFSET>, SetPidProtection::<Impl, IMPL_OFFSET>, GetPidProtection::<Impl, IMPL_OFFSET>, SetSyncValue::<Impl, IMPL_OFFSET>, GetStartCodeProfile::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBDA_WMDRMTuner as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IBPCSatelliteTunerImpl: Sized + IAMTunerImpl {
    fn DefaultSubChannelTypes();
    fn SetDefaultSubChannelTypes();
    fn IsTapingPermitted();
}
#[cfg(feature = "Win32_Foundation")]
impl IBPCSatelliteTunerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBPCSatelliteTunerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBPCSatelliteTunerVtbl {
        unsafe extern "system" fn DefaultSubChannelTypes<Impl: IBPCSatelliteTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pldefaultvideotype: *mut i32, pldefaultaudiotype: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefaultSubChannelTypes<Impl: IBPCSatelliteTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ldefaultvideotype: i32, ldefaultaudiotype: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsTapingPermitted<Impl: IBPCSatelliteTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetChannel::<Impl, IMPL_OFFSET>,
            Channel::<Impl, IMPL_OFFSET>,
            ChannelMinMax::<Impl, IMPL_OFFSET>,
            SetCountryCode::<Impl, IMPL_OFFSET>,
            CountryCode::<Impl, IMPL_OFFSET>,
            SetTuningSpace::<Impl, IMPL_OFFSET>,
            TuningSpace::<Impl, IMPL_OFFSET>,
            Logon::<Impl, IMPL_OFFSET>,
            Logout::<Impl, IMPL_OFFSET>,
            SignalPresent::<Impl, IMPL_OFFSET>,
            SetMode::<Impl, IMPL_OFFSET>,
            Mode::<Impl, IMPL_OFFSET>,
            GetAvailableModes::<Impl, IMPL_OFFSET>,
            RegisterNotificationCallBack::<Impl, IMPL_OFFSET>,
            UnRegisterNotificationCallBack::<Impl, IMPL_OFFSET>,
            DefaultSubChannelTypes::<Impl, IMPL_OFFSET>,
            SetDefaultSubChannelTypes::<Impl, IMPL_OFFSET>,
            IsTapingPermitted::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBPCSatelliteTuner as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IBaseFilterImpl: Sized + IMediaFilterImpl + IPersistImpl {
    fn EnumPins();
    fn FindPin();
    fn QueryFilterInfo();
    fn JoinFilterGraph();
    fn QueryVendorInfo();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IBaseFilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBaseFilterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBaseFilterVtbl {
        unsafe extern "system" fn EnumPins<Impl: IBaseFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindPin<Impl: IBaseFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: super::super::Foundation::PWSTR, pppin: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryFilterInfo<Impl: IBaseFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pinfo: *mut FILTER_INFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn JoinFilterGraph<Impl: IBaseFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pgraph: ::windows::core::RawPtr, pname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryVendorInfo<Impl: IBaseFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvendorinfo: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetClassID::<Impl, IMPL_OFFSET>,
            Stop::<Impl, IMPL_OFFSET>,
            Pause::<Impl, IMPL_OFFSET>,
            Run::<Impl, IMPL_OFFSET>,
            GetState::<Impl, IMPL_OFFSET>,
            SetSyncSource::<Impl, IMPL_OFFSET>,
            GetSyncSource::<Impl, IMPL_OFFSET>,
            EnumPins::<Impl, IMPL_OFFSET>,
            FindPin::<Impl, IMPL_OFFSET>,
            QueryFilterInfo::<Impl, IMPL_OFFSET>,
            JoinFilterGraph::<Impl, IMPL_OFFSET>,
            QueryVendorInfo::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBaseFilter as ::windows::core::Interface>::IID
    }
}
pub trait IBaseVideoMixerImpl: Sized {
    fn SetLeadPin();
    fn GetLeadPin();
    fn GetInputPinCount();
    fn IsUsingClock();
    fn SetUsingClock();
    fn GetClockPeriod();
    fn SetClockPeriod();
}
impl IBaseVideoMixerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBaseVideoMixerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBaseVideoMixerVtbl {
        unsafe extern "system" fn SetLeadPin<Impl: IBaseVideoMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ipin: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLeadPin<Impl: IBaseVideoMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pipin: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInputPinCount<Impl: IBaseVideoMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pipincount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsUsingClock<Impl: IBaseVideoMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbvalue: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetUsingClock<Impl: IBaseVideoMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bvalue: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetClockPeriod<Impl: IBaseVideoMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbvalue: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetClockPeriod<Impl: IBaseVideoMixerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bvalue: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetLeadPin::<Impl, IMPL_OFFSET>, GetLeadPin::<Impl, IMPL_OFFSET>, GetInputPinCount::<Impl, IMPL_OFFSET>, IsUsingClock::<Impl, IMPL_OFFSET>, SetUsingClock::<Impl, IMPL_OFFSET>, GetClockPeriod::<Impl, IMPL_OFFSET>, SetClockPeriod::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBaseVideoMixer as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IBasicAudioImpl: Sized + IDispatchImpl {
    fn SetVolume();
    fn Volume();
    fn SetBalance();
    fn Balance();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IBasicAudioVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBasicAudioImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBasicAudioVtbl {
        unsafe extern "system" fn SetVolume<Impl: IBasicAudioImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lvolume: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Volume<Impl: IBasicAudioImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plvolume: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBalance<Impl: IBasicAudioImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lbalance: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Balance<Impl: IBasicAudioImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plbalance: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, SetVolume::<Impl, IMPL_OFFSET>, Volume::<Impl, IMPL_OFFSET>, SetBalance::<Impl, IMPL_OFFSET>, Balance::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBasicAudio as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IBasicVideoImpl: Sized + IDispatchImpl {
    fn AvgTimePerFrame();
    fn BitRate();
    fn BitErrorRate();
    fn VideoWidth();
    fn VideoHeight();
    fn SetSourceLeft();
    fn SourceLeft();
    fn SetSourceWidth();
    fn SourceWidth();
    fn SetSourceTop();
    fn SourceTop();
    fn SetSourceHeight();
    fn SourceHeight();
    fn SetDestinationLeft();
    fn DestinationLeft();
    fn SetDestinationWidth();
    fn DestinationWidth();
    fn SetDestinationTop();
    fn DestinationTop();
    fn SetDestinationHeight();
    fn DestinationHeight();
    fn SetSourcePosition();
    fn GetSourcePosition();
    fn SetDefaultSourcePosition();
    fn SetDestinationPosition();
    fn GetDestinationPosition();
    fn SetDefaultDestinationPosition();
    fn GetVideoSize();
    fn GetVideoPaletteEntries();
    fn GetCurrentImage();
    fn IsUsingDefaultSource();
    fn IsUsingDefaultDestination();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IBasicVideoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBasicVideoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBasicVideoVtbl {
        unsafe extern "system" fn AvgTimePerFrame<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pavgtimeperframe: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BitRate<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbitrate: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BitErrorRate<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbiterrorrate: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VideoWidth<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvideowidth: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VideoHeight<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvideoheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourceLeft<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sourceleft: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SourceLeft<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psourceleft: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourceWidth<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sourcewidth: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SourceWidth<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psourcewidth: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourceTop<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sourcetop: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SourceTop<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psourcetop: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourceHeight<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sourceheight: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SourceHeight<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psourceheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDestinationLeft<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, destinationleft: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DestinationLeft<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdestinationleft: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDestinationWidth<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, destinationwidth: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DestinationWidth<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdestinationwidth: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDestinationTop<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, destinationtop: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DestinationTop<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdestinationtop: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDestinationHeight<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, destinationheight: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DestinationHeight<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdestinationheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourcePosition<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, left: i32, top: i32, width: i32, height: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePosition<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pleft: *mut i32, ptop: *mut i32, pwidth: *mut i32, pheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefaultSourcePosition<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDestinationPosition<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, left: i32, top: i32, width: i32, height: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDestinationPosition<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pleft: *mut i32, ptop: *mut i32, pwidth: *mut i32, pheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefaultDestinationPosition<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVideoSize<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwidth: *mut i32, pheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVideoPaletteEntries<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startindex: i32, entries: i32, pretrieved: *mut i32, ppalette: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentImage<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbuffersize: *mut i32, pdibimage: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsUsingDefaultSource<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsUsingDefaultDestination<Impl: IBasicVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            AvgTimePerFrame::<Impl, IMPL_OFFSET>,
            BitRate::<Impl, IMPL_OFFSET>,
            BitErrorRate::<Impl, IMPL_OFFSET>,
            VideoWidth::<Impl, IMPL_OFFSET>,
            VideoHeight::<Impl, IMPL_OFFSET>,
            SetSourceLeft::<Impl, IMPL_OFFSET>,
            SourceLeft::<Impl, IMPL_OFFSET>,
            SetSourceWidth::<Impl, IMPL_OFFSET>,
            SourceWidth::<Impl, IMPL_OFFSET>,
            SetSourceTop::<Impl, IMPL_OFFSET>,
            SourceTop::<Impl, IMPL_OFFSET>,
            SetSourceHeight::<Impl, IMPL_OFFSET>,
            SourceHeight::<Impl, IMPL_OFFSET>,
            SetDestinationLeft::<Impl, IMPL_OFFSET>,
            DestinationLeft::<Impl, IMPL_OFFSET>,
            SetDestinationWidth::<Impl, IMPL_OFFSET>,
            DestinationWidth::<Impl, IMPL_OFFSET>,
            SetDestinationTop::<Impl, IMPL_OFFSET>,
            DestinationTop::<Impl, IMPL_OFFSET>,
            SetDestinationHeight::<Impl, IMPL_OFFSET>,
            DestinationHeight::<Impl, IMPL_OFFSET>,
            SetSourcePosition::<Impl, IMPL_OFFSET>,
            GetSourcePosition::<Impl, IMPL_OFFSET>,
            SetDefaultSourcePosition::<Impl, IMPL_OFFSET>,
            SetDestinationPosition::<Impl, IMPL_OFFSET>,
            GetDestinationPosition::<Impl, IMPL_OFFSET>,
            SetDefaultDestinationPosition::<Impl, IMPL_OFFSET>,
            GetVideoSize::<Impl, IMPL_OFFSET>,
            GetVideoPaletteEntries::<Impl, IMPL_OFFSET>,
            GetCurrentImage::<Impl, IMPL_OFFSET>,
            IsUsingDefaultSource::<Impl, IMPL_OFFSET>,
            IsUsingDefaultDestination::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBasicVideo as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IBasicVideo2Impl: Sized + IBasicVideoImpl + IDispatchImpl {
    fn GetPreferredAspectRatio();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IBasicVideo2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBasicVideo2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBasicVideo2Vtbl {
        unsafe extern "system" fn GetPreferredAspectRatio<Impl: IBasicVideo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plaspectx: *mut i32, plaspecty: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            AvgTimePerFrame::<Impl, IMPL_OFFSET>,
            BitRate::<Impl, IMPL_OFFSET>,
            BitErrorRate::<Impl, IMPL_OFFSET>,
            VideoWidth::<Impl, IMPL_OFFSET>,
            VideoHeight::<Impl, IMPL_OFFSET>,
            SetSourceLeft::<Impl, IMPL_OFFSET>,
            SourceLeft::<Impl, IMPL_OFFSET>,
            SetSourceWidth::<Impl, IMPL_OFFSET>,
            SourceWidth::<Impl, IMPL_OFFSET>,
            SetSourceTop::<Impl, IMPL_OFFSET>,
            SourceTop::<Impl, IMPL_OFFSET>,
            SetSourceHeight::<Impl, IMPL_OFFSET>,
            SourceHeight::<Impl, IMPL_OFFSET>,
            SetDestinationLeft::<Impl, IMPL_OFFSET>,
            DestinationLeft::<Impl, IMPL_OFFSET>,
            SetDestinationWidth::<Impl, IMPL_OFFSET>,
            DestinationWidth::<Impl, IMPL_OFFSET>,
            SetDestinationTop::<Impl, IMPL_OFFSET>,
            DestinationTop::<Impl, IMPL_OFFSET>,
            SetDestinationHeight::<Impl, IMPL_OFFSET>,
            DestinationHeight::<Impl, IMPL_OFFSET>,
            SetSourcePosition::<Impl, IMPL_OFFSET>,
            GetSourcePosition::<Impl, IMPL_OFFSET>,
            SetDefaultSourcePosition::<Impl, IMPL_OFFSET>,
            SetDestinationPosition::<Impl, IMPL_OFFSET>,
            GetDestinationPosition::<Impl, IMPL_OFFSET>,
            SetDefaultDestinationPosition::<Impl, IMPL_OFFSET>,
            GetVideoSize::<Impl, IMPL_OFFSET>,
            GetVideoPaletteEntries::<Impl, IMPL_OFFSET>,
            GetCurrentImage::<Impl, IMPL_OFFSET>,
            IsUsingDefaultSource::<Impl, IMPL_OFFSET>,
            IsUsingDefaultDestination::<Impl, IMPL_OFFSET>,
            GetPreferredAspectRatio::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBasicVideo2 as ::windows::core::Interface>::IID
    }
}
pub trait IBroadcastEventImpl: Sized {
    fn Fire();
}
impl IBroadcastEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBroadcastEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBroadcastEventVtbl {
        unsafe extern "system" fn Fire<Impl: IBroadcastEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventid: ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Fire::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBroadcastEvent as ::windows::core::Interface>::IID
    }
}
pub trait IBroadcastEventExImpl: Sized + IBroadcastEventImpl {
    fn FireEx();
}
impl IBroadcastEventExVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBroadcastEventExImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBroadcastEventExVtbl {
        unsafe extern "system" fn FireEx<Impl: IBroadcastEventExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventid: ::windows::core::GUID, param1: u32, param2: u32, param3: u32, param4: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Fire::<Impl, IMPL_OFFSET>, FireEx::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBroadcastEventEx as ::windows::core::Interface>::IID
    }
}
pub trait IBufferingTimeImpl: Sized {
    fn GetBufferingTime();
    fn SetBufferingTime();
}
impl IBufferingTimeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBufferingTimeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBufferingTimeVtbl {
        unsafe extern "system" fn GetBufferingTime<Impl: IBufferingTimeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwmilliseconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBufferingTime<Impl: IBufferingTimeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwmilliseconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetBufferingTime::<Impl, IMPL_OFFSET>, SetBufferingTime::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBufferingTime as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait ICATImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetCountOfTableDescriptors();
    fn GetTableDescriptorByIndex();
    fn GetTableDescriptorByTag();
    fn RegisterForNextTable();
    fn GetNextTable();
    fn RegisterForWhenCurrent();
    fn ConvertNextToCurrent();
}
#[cfg(feature = "Win32_Foundation")]
impl ICATVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICATImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ICATVtbl {
        unsafe extern "system" fn Initialize<Impl: ICATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: ICATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Impl: ICATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Impl: ICATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Impl: ICATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForNextTable<Impl: ICATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextTable<Impl: ICATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppcat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Impl: ICATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConvertNextToCurrent<Impl: ICATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetCountOfTableDescriptors::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByTag::<Impl, IMPL_OFFSET>,
            RegisterForNextTable::<Impl, IMPL_OFFSET>,
            GetNextTable::<Impl, IMPL_OFFSET>,
            RegisterForWhenCurrent::<Impl, IMPL_OFFSET>,
            ConvertNextToCurrent::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICAT as ::windows::core::Interface>::IID
    }
}
pub trait ICCSubStreamFilteringImpl: Sized {
    fn SubstreamTypes();
    fn SetSubstreamTypes();
}
impl ICCSubStreamFilteringVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICCSubStreamFilteringImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ICCSubStreamFilteringVtbl {
        unsafe extern "system" fn SubstreamTypes<Impl: ICCSubStreamFilteringImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptypes: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSubstreamTypes<Impl: ICCSubStreamFilteringImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, types: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SubstreamTypes::<Impl, IMPL_OFFSET>, SetSubstreamTypes::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICCSubStreamFiltering as ::windows::core::Interface>::IID
    }
}
pub trait ICameraControlImpl: Sized {
    fn Exposure();
    fn SetExposure();
    fn getRange_Exposure();
    fn Focus();
    fn SetFocus();
    fn getRange_Focus();
    fn Iris();
    fn SetIris();
    fn getRange_Iris();
    fn Zoom();
    fn SetZoom();
    fn getRange_Zoom();
    fn FocalLengths();
    fn Pan();
    fn SetPan();
    fn getRange_Pan();
    fn Tilt();
    fn SetTilt();
    fn getRange_Tilt();
    fn PanTilt();
    fn SetPanTilt();
    fn Roll();
    fn SetRoll();
    fn getRange_Roll();
    fn ExposureRelative();
    fn SetExposureRelative();
    fn getRange_ExposureRelative();
    fn FocusRelative();
    fn SetFocusRelative();
    fn getRange_FocusRelative();
    fn IrisRelative();
    fn SetIrisRelative();
    fn getRange_IrisRelative();
    fn ZoomRelative();
    fn SetZoomRelative();
    fn getRange_ZoomRelative();
    fn PanRelative();
    fn SetPanRelative();
    fn TiltRelative();
    fn SetTiltRelative();
    fn getRange_TiltRelative();
    fn PanTiltRelative();
    fn SetPanTiltRelative();
    fn getRange_PanRelative();
    fn RollRelative();
    fn SetRollRelative();
    fn getRange_RollRelative();
    fn ScanMode();
    fn SetScanMode();
    fn PrivacyMode();
    fn SetPrivacyMode();
}
impl ICameraControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICameraControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ICameraControlVtbl {
        unsafe extern "system" fn Exposure<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExposure<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_Exposure<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Focus<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFocus<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_Focus<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Iris<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetIris<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_Iris<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Zoom<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetZoom<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_Zoom<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FocalLengths<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plocularfocallength: *mut i32, plobjectivefocallengthmin: *mut i32, plobjectivefocallengthmax: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Pan<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPan<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_Pan<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Tilt<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTilt<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_Tilt<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PanTilt<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppanvalue: *mut i32, ptiltvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPanTilt<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, panvalue: i32, tiltvalue: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Roll<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRoll<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_Roll<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExposureRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExposureRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_ExposureRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FocusRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFocusRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_FocusRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IrisRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetIrisRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_IrisRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ZoomRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetZoomRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_ZoomRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PanRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPanRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TiltRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTiltRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_TiltRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PanTiltRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppanvalue: *mut i32, ptiltvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPanTiltRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, panvalue: i32, tiltvalue: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_PanRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RollRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRollRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_RollRelative<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ScanMode<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScanMode<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PrivacyMode<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPrivacyMode<Impl: ICameraControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Exposure::<Impl, IMPL_OFFSET>,
            SetExposure::<Impl, IMPL_OFFSET>,
            getRange_Exposure::<Impl, IMPL_OFFSET>,
            Focus::<Impl, IMPL_OFFSET>,
            SetFocus::<Impl, IMPL_OFFSET>,
            getRange_Focus::<Impl, IMPL_OFFSET>,
            Iris::<Impl, IMPL_OFFSET>,
            SetIris::<Impl, IMPL_OFFSET>,
            getRange_Iris::<Impl, IMPL_OFFSET>,
            Zoom::<Impl, IMPL_OFFSET>,
            SetZoom::<Impl, IMPL_OFFSET>,
            getRange_Zoom::<Impl, IMPL_OFFSET>,
            FocalLengths::<Impl, IMPL_OFFSET>,
            Pan::<Impl, IMPL_OFFSET>,
            SetPan::<Impl, IMPL_OFFSET>,
            getRange_Pan::<Impl, IMPL_OFFSET>,
            Tilt::<Impl, IMPL_OFFSET>,
            SetTilt::<Impl, IMPL_OFFSET>,
            getRange_Tilt::<Impl, IMPL_OFFSET>,
            PanTilt::<Impl, IMPL_OFFSET>,
            SetPanTilt::<Impl, IMPL_OFFSET>,
            Roll::<Impl, IMPL_OFFSET>,
            SetRoll::<Impl, IMPL_OFFSET>,
            getRange_Roll::<Impl, IMPL_OFFSET>,
            ExposureRelative::<Impl, IMPL_OFFSET>,
            SetExposureRelative::<Impl, IMPL_OFFSET>,
            getRange_ExposureRelative::<Impl, IMPL_OFFSET>,
            FocusRelative::<Impl, IMPL_OFFSET>,
            SetFocusRelative::<Impl, IMPL_OFFSET>,
            getRange_FocusRelative::<Impl, IMPL_OFFSET>,
            IrisRelative::<Impl, IMPL_OFFSET>,
            SetIrisRelative::<Impl, IMPL_OFFSET>,
            getRange_IrisRelative::<Impl, IMPL_OFFSET>,
            ZoomRelative::<Impl, IMPL_OFFSET>,
            SetZoomRelative::<Impl, IMPL_OFFSET>,
            getRange_ZoomRelative::<Impl, IMPL_OFFSET>,
            PanRelative::<Impl, IMPL_OFFSET>,
            SetPanRelative::<Impl, IMPL_OFFSET>,
            TiltRelative::<Impl, IMPL_OFFSET>,
            SetTiltRelative::<Impl, IMPL_OFFSET>,
            getRange_TiltRelative::<Impl, IMPL_OFFSET>,
            PanTiltRelative::<Impl, IMPL_OFFSET>,
            SetPanTiltRelative::<Impl, IMPL_OFFSET>,
            getRange_PanRelative::<Impl, IMPL_OFFSET>,
            RollRelative::<Impl, IMPL_OFFSET>,
            SetRollRelative::<Impl, IMPL_OFFSET>,
            getRange_RollRelative::<Impl, IMPL_OFFSET>,
            ScanMode::<Impl, IMPL_OFFSET>,
            SetScanMode::<Impl, IMPL_OFFSET>,
            PrivacyMode::<Impl, IMPL_OFFSET>,
            SetPrivacyMode::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICameraControl as ::windows::core::Interface>::IID
    }
}
pub trait ICaptionServiceDescriptorImpl: Sized {
    fn GetNumberOfServices();
    fn GetLanguageCode();
    fn GetCaptionServiceNumber();
    fn GetCCType();
    fn GetEasyReader();
    fn GetWideAspectRatio();
}
impl ICaptionServiceDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICaptionServiceDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ICaptionServiceDescriptorVtbl {
        unsafe extern "system" fn GetNumberOfServices<Impl: ICaptionServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLanguageCode<Impl: ICaptionServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindex: u8, langcode: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCaptionServiceNumber<Impl: ICaptionServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCCType<Impl: ICaptionServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEasyReader<Impl: ICaptionServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWideAspectRatio<Impl: ICaptionServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetNumberOfServices::<Impl, IMPL_OFFSET>, GetLanguageCode::<Impl, IMPL_OFFSET>, GetCaptionServiceNumber::<Impl, IMPL_OFFSET>, GetCCType::<Impl, IMPL_OFFSET>, GetEasyReader::<Impl, IMPL_OFFSET>, GetWideAspectRatio::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICaptionServiceDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait ICaptureGraphBuilderImpl: Sized {
    fn SetFiltergraph();
    fn GetFiltergraph();
    fn SetOutputFileName();
    fn FindInterface();
    fn RenderStream();
    fn ControlStream();
    fn AllocCapFile();
    fn CopyCaptureFile();
}
#[cfg(feature = "Win32_Foundation")]
impl ICaptureGraphBuilderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICaptureGraphBuilderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ICaptureGraphBuilderVtbl {
        unsafe extern "system" fn SetFiltergraph<Impl: ICaptureGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfg: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFiltergraph<Impl: ICaptureGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppfg: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputFileName<Impl: ICaptureGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptype: *const ::windows::core::GUID, lpstrfile: super::super::Foundation::PWSTR, ppf: *mut ::windows::core::RawPtr, ppsink: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindInterface<Impl: ICaptureGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcategory: *const ::windows::core::GUID, pf: ::windows::core::RawPtr, riid: *const ::windows::core::GUID, ppint: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RenderStream<Impl: ICaptureGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcategory: *const ::windows::core::GUID, psource: *mut ::core::ffi::c_void, pfcompressor: ::windows::core::RawPtr, pfrenderer: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlStream<Impl: ICaptureGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcategory: *const ::windows::core::GUID, pfilter: ::windows::core::RawPtr, pstart: *mut i64, pstop: *mut i64, wstartcookie: u16, wstopcookie: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AllocCapFile<Impl: ICaptureGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpstr: super::super::Foundation::PWSTR, dwlsize: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CopyCaptureFile<Impl: ICaptureGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpwstrold: super::super::Foundation::PWSTR, lpwstrnew: super::super::Foundation::PWSTR, fallowescabort: i32, pcallback: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetFiltergraph::<Impl, IMPL_OFFSET>, GetFiltergraph::<Impl, IMPL_OFFSET>, SetOutputFileName::<Impl, IMPL_OFFSET>, FindInterface::<Impl, IMPL_OFFSET>, RenderStream::<Impl, IMPL_OFFSET>, ControlStream::<Impl, IMPL_OFFSET>, AllocCapFile::<Impl, IMPL_OFFSET>, CopyCaptureFile::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICaptureGraphBuilder as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait ICaptureGraphBuilder2Impl: Sized {
    fn SetFiltergraph();
    fn GetFiltergraph();
    fn SetOutputFileName();
    fn FindInterface();
    fn RenderStream();
    fn ControlStream();
    fn AllocCapFile();
    fn CopyCaptureFile();
    fn FindPin();
}
#[cfg(feature = "Win32_Foundation")]
impl ICaptureGraphBuilder2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICaptureGraphBuilder2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ICaptureGraphBuilder2Vtbl {
        unsafe extern "system" fn SetFiltergraph<Impl: ICaptureGraphBuilder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfg: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFiltergraph<Impl: ICaptureGraphBuilder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppfg: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputFileName<Impl: ICaptureGraphBuilder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptype: *const ::windows::core::GUID, lpstrfile: super::super::Foundation::PWSTR, ppf: *mut ::windows::core::RawPtr, ppsink: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindInterface<Impl: ICaptureGraphBuilder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcategory: *const ::windows::core::GUID, ptype: *const ::windows::core::GUID, pf: ::windows::core::RawPtr, riid: *const ::windows::core::GUID, ppint: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RenderStream<Impl: ICaptureGraphBuilder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcategory: *const ::windows::core::GUID, ptype: *const ::windows::core::GUID, psource: *mut ::core::ffi::c_void, pfcompressor: ::windows::core::RawPtr, pfrenderer: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlStream<Impl: ICaptureGraphBuilder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcategory: *const ::windows::core::GUID, ptype: *const ::windows::core::GUID, pfilter: ::windows::core::RawPtr, pstart: *const i64, pstop: *const i64, wstartcookie: u16, wstopcookie: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AllocCapFile<Impl: ICaptureGraphBuilder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpstr: super::super::Foundation::PWSTR, dwlsize: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CopyCaptureFile<Impl: ICaptureGraphBuilder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpwstrold: super::super::Foundation::PWSTR, lpwstrnew: super::super::Foundation::PWSTR, fallowescabort: i32, pcallback: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindPin<Impl: ICaptureGraphBuilder2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psource: *mut ::core::ffi::c_void, pindir: PIN_DIRECTION, pcategory: *const ::windows::core::GUID, ptype: *const ::windows::core::GUID, funconnected: super::super::Foundation::BOOL, num: i32, pppin: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetFiltergraph::<Impl, IMPL_OFFSET>,
            GetFiltergraph::<Impl, IMPL_OFFSET>,
            SetOutputFileName::<Impl, IMPL_OFFSET>,
            FindInterface::<Impl, IMPL_OFFSET>,
            RenderStream::<Impl, IMPL_OFFSET>,
            ControlStream::<Impl, IMPL_OFFSET>,
            AllocCapFile::<Impl, IMPL_OFFSET>,
            CopyCaptureFile::<Impl, IMPL_OFFSET>,
            FindPin::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICaptureGraphBuilder2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IChannelIDTuneRequestImpl: Sized + ITuneRequestImpl + IDispatchImpl {
    fn ChannelID();
    fn SetChannelID();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IChannelIDTuneRequestVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IChannelIDTuneRequestImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IChannelIDTuneRequestVtbl {
        unsafe extern "system" fn ChannelID<Impl: IChannelIDTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, channelid: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetChannelID<Impl: IChannelIDTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, channelid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            TuningSpace::<Impl, IMPL_OFFSET>,
            Components::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            Locator::<Impl, IMPL_OFFSET>,
            SetLocator::<Impl, IMPL_OFFSET>,
            ChannelID::<Impl, IMPL_OFFSET>,
            SetChannelID::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IChannelIDTuneRequest as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IChannelTuneRequestImpl: Sized + ITuneRequestImpl + IDispatchImpl {
    fn Channel();
    fn SetChannel();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IChannelTuneRequestVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IChannelTuneRequestImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IChannelTuneRequestVtbl {
        unsafe extern "system" fn Channel<Impl: IChannelTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, channel: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetChannel<Impl: IChannelTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, channel: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            TuningSpace::<Impl, IMPL_OFFSET>,
            Components::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            Locator::<Impl, IMPL_OFFSET>,
            SetLocator::<Impl, IMPL_OFFSET>,
            Channel::<Impl, IMPL_OFFSET>,
            SetChannel::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IChannelTuneRequest as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IComponentImpl: Sized + IDispatchImpl {
    fn Type();
    fn SetType();
    fn DescLangID();
    fn SetDescLangID();
    fn Status();
    fn SetStatus();
    fn Description();
    fn SetDescription();
    fn Clone();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IComponentVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IComponentImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IComponentVtbl {
        unsafe extern "system" fn Type<Impl: IComponentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ct: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetType<Impl: IComponentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ct: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DescLangID<Impl: IComponentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, langid: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDescLangID<Impl: IComponentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, langid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Status<Impl: IComponentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut ComponentStatus) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetStatus<Impl: IComponentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: ComponentStatus) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Description<Impl: IComponentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, description: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDescription<Impl: IComponentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, description: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IComponentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newcomponent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Type::<Impl, IMPL_OFFSET>,
            SetType::<Impl, IMPL_OFFSET>,
            DescLangID::<Impl, IMPL_OFFSET>,
            SetDescLangID::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetStatus::<Impl, IMPL_OFFSET>,
            Description::<Impl, IMPL_OFFSET>,
            SetDescription::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IComponent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IComponentTypeImpl: Sized + IDispatchImpl {
    fn Category();
    fn SetCategory();
    fn MediaMajorType();
    fn SetMediaMajorType();
    fn _MediaMajorType();
    fn Set_MediaMajorType();
    fn MediaSubType();
    fn SetMediaSubType();
    fn _MediaSubType();
    fn Set_MediaSubType();
    fn MediaFormatType();
    fn SetMediaFormatType();
    fn _MediaFormatType();
    fn Set_MediaFormatType();
    fn MediaType();
    fn SetMediaType();
    fn Clone();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IComponentTypeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IComponentTypeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IComponentTypeVtbl {
        unsafe extern "system" fn Category<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, category: *mut ComponentCategory) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCategory<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, category: ComponentCategory) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MediaMajorType<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mediamajortype: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMediaMajorType<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mediamajortype: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _MediaMajorType<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mediamajortypeguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Set_MediaMajorType<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mediamajortypeguid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MediaSubType<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mediasubtype: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMediaSubType<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mediasubtype: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _MediaSubType<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mediasubtypeguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Set_MediaSubType<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mediasubtypeguid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MediaFormatType<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mediaformattype: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMediaFormatType<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mediaformattype: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _MediaFormatType<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mediaformattypeguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Set_MediaFormatType<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mediaformattypeguid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MediaType<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mediatype: *mut AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMediaType<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mediatype: *const AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newct: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            SetCategory::<Impl, IMPL_OFFSET>,
            MediaMajorType::<Impl, IMPL_OFFSET>,
            SetMediaMajorType::<Impl, IMPL_OFFSET>,
            _MediaMajorType::<Impl, IMPL_OFFSET>,
            Set_MediaMajorType::<Impl, IMPL_OFFSET>,
            MediaSubType::<Impl, IMPL_OFFSET>,
            SetMediaSubType::<Impl, IMPL_OFFSET>,
            _MediaSubType::<Impl, IMPL_OFFSET>,
            Set_MediaSubType::<Impl, IMPL_OFFSET>,
            MediaFormatType::<Impl, IMPL_OFFSET>,
            SetMediaFormatType::<Impl, IMPL_OFFSET>,
            _MediaFormatType::<Impl, IMPL_OFFSET>,
            Set_MediaFormatType::<Impl, IMPL_OFFSET>,
            MediaType::<Impl, IMPL_OFFSET>,
            SetMediaType::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IComponentType as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IComponentTypesImpl: Sized + IDispatchImpl {
    fn Count();
    fn _NewEnum();
    fn EnumComponentTypes();
    fn Item();
    fn SetItem();
    fn Add();
    fn Remove();
    fn Clone();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IComponentTypesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IComponentTypesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IComponentTypesVtbl {
        unsafe extern "system" fn Count<Impl: IComponentTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _NewEnum<Impl: IComponentTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppnewenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumComponentTypes<Impl: IComponentTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppnewenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Item<Impl: IComponentTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, componenttype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetItem<Impl: IComponentTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, componenttype: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Add<Impl: IComponentTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, componenttype: ::windows::core::RawPtr, newindex: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Remove<Impl: IComponentTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IComponentTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newlist: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Count::<Impl, IMPL_OFFSET>,
            _NewEnum::<Impl, IMPL_OFFSET>,
            EnumComponentTypes::<Impl, IMPL_OFFSET>,
            Item::<Impl, IMPL_OFFSET>,
            SetItem::<Impl, IMPL_OFFSET>,
            Add::<Impl, IMPL_OFFSET>,
            Remove::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IComponentTypes as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IComponentsImpl: Sized + IDispatchImpl {
    fn Count();
    fn _NewEnum();
    fn EnumComponents();
    fn Item();
    fn Add();
    fn Remove();
    fn Clone();
    fn SetItem();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IComponentsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IComponentsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IComponentsVtbl {
        unsafe extern "system" fn Count<Impl: IComponentsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _NewEnum<Impl: IComponentsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppnewenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumComponents<Impl: IComponentsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppnewenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Item<Impl: IComponentsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, ppcomponent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Add<Impl: IComponentsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, component: ::windows::core::RawPtr, newindex: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Remove<Impl: IComponentsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IComponentsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newlist: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetItem<Impl: IComponentsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, ppcomponent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Count::<Impl, IMPL_OFFSET>,
            _NewEnum::<Impl, IMPL_OFFSET>,
            EnumComponents::<Impl, IMPL_OFFSET>,
            Item::<Impl, IMPL_OFFSET>,
            Add::<Impl, IMPL_OFFSET>,
            Remove::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            SetItem::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IComponents as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IComponentsOldImpl: Sized + IDispatchImpl {
    fn Count();
    fn _NewEnum();
    fn EnumComponents();
    fn Item();
    fn Add();
    fn Remove();
    fn Clone();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IComponentsOldVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IComponentsOldImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IComponentsOldVtbl {
        unsafe extern "system" fn Count<Impl: IComponentsOldImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _NewEnum<Impl: IComponentsOldImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppnewenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumComponents<Impl: IComponentsOldImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppnewenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Item<Impl: IComponentsOldImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, ppcomponent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Add<Impl: IComponentsOldImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, component: ::windows::core::RawPtr, newindex: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Remove<Impl: IComponentsOldImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IComponentsOldImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newlist: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Count::<Impl, IMPL_OFFSET>,
            _NewEnum::<Impl, IMPL_OFFSET>,
            EnumComponents::<Impl, IMPL_OFFSET>,
            Item::<Impl, IMPL_OFFSET>,
            Add::<Impl, IMPL_OFFSET>,
            Remove::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IComponentsOld as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_WindowsMediaFormat"))]
pub trait IConfigAsfWriterImpl: Sized {
    fn ConfigureFilterUsingProfileId();
    fn GetCurrentProfileId();
    fn ConfigureFilterUsingProfileGuid();
    fn GetCurrentProfileGuid();
    fn ConfigureFilterUsingProfile();
    fn GetCurrentProfile();
    fn SetIndexMode();
    fn GetIndexMode();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_WindowsMediaFormat"))]
impl IConfigAsfWriterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IConfigAsfWriterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IConfigAsfWriterVtbl {
        unsafe extern "system" fn ConfigureFilterUsingProfileId<Impl: IConfigAsfWriterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwprofileid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProfileId<Impl: IConfigAsfWriterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwprofileid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConfigureFilterUsingProfileGuid<Impl: IConfigAsfWriterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guidprofile: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProfileGuid<Impl: IConfigAsfWriterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pprofileguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConfigureFilterUsingProfile<Impl: IConfigAsfWriterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pprofile: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProfile<Impl: IConfigAsfWriterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppprofile: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetIndexMode<Impl: IConfigAsfWriterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindexfile: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIndexMode<Impl: IConfigAsfWriterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbindexfile: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            ConfigureFilterUsingProfileId::<Impl, IMPL_OFFSET>,
            GetCurrentProfileId::<Impl, IMPL_OFFSET>,
            ConfigureFilterUsingProfileGuid::<Impl, IMPL_OFFSET>,
            GetCurrentProfileGuid::<Impl, IMPL_OFFSET>,
            ConfigureFilterUsingProfile::<Impl, IMPL_OFFSET>,
            GetCurrentProfile::<Impl, IMPL_OFFSET>,
            SetIndexMode::<Impl, IMPL_OFFSET>,
            GetIndexMode::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IConfigAsfWriter as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_WindowsMediaFormat"))]
pub trait IConfigAsfWriter2Impl: Sized + IConfigAsfWriterImpl {
    fn StreamNumFromPin();
    fn SetParam();
    fn GetParam();
    fn ResetMultiPassState();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_WindowsMediaFormat"))]
impl IConfigAsfWriter2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IConfigAsfWriter2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IConfigAsfWriter2Vtbl {
        unsafe extern "system" fn StreamNumFromPin<Impl: IConfigAsfWriter2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: ::windows::core::RawPtr, pwstreamnum: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetParam<Impl: IConfigAsfWriter2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwparam: u32, dwparam1: u32, dwparam2: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParam<Impl: IConfigAsfWriter2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwparam: u32, pdwparam1: *mut u32, pdwparam2: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResetMultiPassState<Impl: IConfigAsfWriter2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            ConfigureFilterUsingProfileId::<Impl, IMPL_OFFSET>,
            GetCurrentProfileId::<Impl, IMPL_OFFSET>,
            ConfigureFilterUsingProfileGuid::<Impl, IMPL_OFFSET>,
            GetCurrentProfileGuid::<Impl, IMPL_OFFSET>,
            ConfigureFilterUsingProfile::<Impl, IMPL_OFFSET>,
            GetCurrentProfile::<Impl, IMPL_OFFSET>,
            SetIndexMode::<Impl, IMPL_OFFSET>,
            GetIndexMode::<Impl, IMPL_OFFSET>,
            StreamNumFromPin::<Impl, IMPL_OFFSET>,
            SetParam::<Impl, IMPL_OFFSET>,
            GetParam::<Impl, IMPL_OFFSET>,
            ResetMultiPassState::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IConfigAsfWriter2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IConfigAviMuxImpl: Sized {
    fn SetMasterStream();
    fn GetMasterStream();
    fn SetOutputCompatibilityIndex();
    fn GetOutputCompatibilityIndex();
}
#[cfg(feature = "Win32_Foundation")]
impl IConfigAviMuxVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IConfigAviMuxImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IConfigAviMuxVtbl {
        unsafe extern "system" fn SetMasterStream<Impl: IConfigAviMuxImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, istream: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMasterStream<Impl: IConfigAviMuxImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstream: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputCompatibilityIndex<Impl: IConfigAviMuxImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, foldindex: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputCompatibilityIndex<Impl: IConfigAviMuxImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfoldindex: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetMasterStream::<Impl, IMPL_OFFSET>, GetMasterStream::<Impl, IMPL_OFFSET>, SetOutputCompatibilityIndex::<Impl, IMPL_OFFSET>, GetOutputCompatibilityIndex::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IConfigAviMux as ::windows::core::Interface>::IID
    }
}
pub trait IConfigInterleavingImpl: Sized {
    fn SetMode();
    fn Mode();
    fn SetInterleaving();
    fn Interleaving();
}
impl IConfigInterleavingVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IConfigInterleavingImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IConfigInterleavingVtbl {
        unsafe extern "system" fn SetMode<Impl: IConfigInterleavingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: InterleavingMode) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Mode<Impl: IConfigInterleavingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmode: *mut InterleavingMode) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterleaving<Impl: IConfigInterleavingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prtinterleave: *const i64, prtpreroll: *const i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Interleaving<Impl: IConfigInterleavingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prtinterleave: *mut i64, prtpreroll: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetMode::<Impl, IMPL_OFFSET>, Mode::<Impl, IMPL_OFFSET>, SetInterleaving::<Impl, IMPL_OFFSET>, Interleaving::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IConfigInterleaving as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait ICreateDevEnumImpl: Sized {
    fn CreateClassEnumerator();
}
#[cfg(feature = "Win32_System_Com")]
impl ICreateDevEnumVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICreateDevEnumImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ICreateDevEnumVtbl {
        unsafe extern "system" fn CreateClassEnumerator<Impl: ICreateDevEnumImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsiddeviceclass: *const ::windows::core::GUID, ppenummoniker: *mut ::windows::core::RawPtr, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CreateClassEnumerator::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICreateDevEnum as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub trait ICreatePropBagOnRegKeyImpl: Sized {
    fn Create();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ICreatePropBagOnRegKeyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICreatePropBagOnRegKeyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ICreatePropBagOnRegKeyVtbl {
        unsafe extern "system" fn Create<Impl: ICreatePropBagOnRegKeyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hkey: super::super::System::Registry::HKEY, subkey: super::super::Foundation::PWSTR, uloptions: u32, samdesired: u32, iid: *const ::windows::core::GUID, ppbag: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Create::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICreatePropBagOnRegKey as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
pub trait IDDrawExclModeVideoImpl: Sized {
    fn SetDDrawObject();
    fn GetDDrawObject();
    fn SetDDrawSurface();
    fn GetDDrawSurface();
    fn SetDrawParameters();
    fn GetNativeVideoProps();
    fn SetCallbackInterface();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
impl IDDrawExclModeVideoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDDrawExclModeVideoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDDrawExclModeVideoVtbl {
        unsafe extern "system" fn SetDDrawObject<Impl: IDDrawExclModeVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddrawobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDDrawObject<Impl: IDDrawExclModeVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppddrawobject: *mut ::windows::core::RawPtr, pbusingexternal: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDDrawSurface<Impl: IDDrawExclModeVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddrawsurface: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDDrawSurface<Impl: IDDrawExclModeVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppddrawsurface: *mut ::windows::core::RawPtr, pbusingexternal: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDrawParameters<Impl: IDDrawExclModeVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prcsource: *const super::super::Foundation::RECT, prctarget: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNativeVideoProps<Impl: IDDrawExclModeVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwvideowidth: *mut u32, pdwvideoheight: *mut u32, pdwpictaspectratiox: *mut u32, pdwpictaspectratioy: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCallbackInterface<Impl: IDDrawExclModeVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcallback: ::windows::core::RawPtr, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetDDrawObject::<Impl, IMPL_OFFSET>, GetDDrawObject::<Impl, IMPL_OFFSET>, SetDDrawSurface::<Impl, IMPL_OFFSET>, GetDDrawSurface::<Impl, IMPL_OFFSET>, SetDrawParameters::<Impl, IMPL_OFFSET>, GetNativeVideoProps::<Impl, IMPL_OFFSET>, SetCallbackInterface::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDDrawExclModeVideo as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDDrawExclModeVideoCallbackImpl: Sized {
    fn OnUpdateOverlay();
    fn OnUpdateColorKey();
    fn OnUpdateSize();
}
#[cfg(feature = "Win32_Foundation")]
impl IDDrawExclModeVideoCallbackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDDrawExclModeVideoCallbackImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDDrawExclModeVideoCallbackVtbl {
        unsafe extern "system" fn OnUpdateOverlay<Impl: IDDrawExclModeVideoCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bbefore: super::super::Foundation::BOOL, dwflags: u32, boldvisible: super::super::Foundation::BOOL, prcoldsrc: *const super::super::Foundation::RECT, prcolddest: *const super::super::Foundation::RECT, bnewvisible: super::super::Foundation::BOOL, prcnewsrc: *const super::super::Foundation::RECT, prcnewdest: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnUpdateColorKey<Impl: IDDrawExclModeVideoCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pkey: *const COLORKEY, dwcolor: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnUpdateSize<Impl: IDDrawExclModeVideoCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwwidth: u32, dwheight: u32, dwarwidth: u32, dwarheight: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, OnUpdateOverlay::<Impl, IMPL_OFFSET>, OnUpdateColorKey::<Impl, IMPL_OFFSET>, OnUpdateSize::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDDrawExclModeVideoCallback as ::windows::core::Interface>::IID
    }
}
pub trait IDMOWrapperFilterImpl: Sized {
    fn Init();
}
impl IDMOWrapperFilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDMOWrapperFilterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDMOWrapperFilterVtbl {
        unsafe extern "system" fn Init<Impl: IDMOWrapperFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsiddmo: *const ::windows::core::GUID, catdmo: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Init::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDMOWrapperFilter as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDShowPluginImpl: Sized {
    fn URL();
    fn UserAgent();
}
#[cfg(feature = "Win32_Foundation")]
impl IDShowPluginVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDShowPluginImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDShowPluginVtbl {
        unsafe extern "system" fn URL<Impl: IDShowPluginImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, purl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UserAgent<Impl: IDShowPluginImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, puseragent: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, URL::<Impl, IMPL_OFFSET>, UserAgent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDShowPlugin as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDTFilterImpl: Sized {
    fn EvalRatObjOK();
    fn GetCurrRating();
    fn BlockedRatingAttributes();
    fn SetBlockedRatingAttributes();
    fn BlockUnRated();
    fn SetBlockUnRated();
    fn BlockUnRatedDelay();
    fn SetBlockUnRatedDelay();
}
#[cfg(feature = "Win32_Foundation")]
impl IDTFilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDTFilterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDTFilterVtbl {
        unsafe extern "system" fn EvalRatObjOK<Impl: IDTFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phrcocreateretval: *mut ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrRating<Impl: IDTFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BlockedRatingAttributes<Impl: IDTFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBlockedRatingAttributes<Impl: IDTFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, lbfattrs: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BlockUnRated<Impl: IDTFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfblockunratedshows: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBlockUnRated<Impl: IDTFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fblockunratedshows: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BlockUnRatedDelay<Impl: IDTFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmsecsdelaybeforeblock: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBlockUnRatedDelay<Impl: IDTFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msecsdelaybeforeblock: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, EvalRatObjOK::<Impl, IMPL_OFFSET>, GetCurrRating::<Impl, IMPL_OFFSET>, BlockedRatingAttributes::<Impl, IMPL_OFFSET>, SetBlockedRatingAttributes::<Impl, IMPL_OFFSET>, BlockUnRated::<Impl, IMPL_OFFSET>, SetBlockUnRated::<Impl, IMPL_OFFSET>, BlockUnRatedDelay::<Impl, IMPL_OFFSET>, SetBlockUnRatedDelay::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDTFilter as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDTFilter2Impl: Sized + IDTFilterImpl {
    fn ChallengeUrl();
    fn GetCurrLicenseExpDate();
    fn GetLastErrorCode();
}
#[cfg(feature = "Win32_Foundation")]
impl IDTFilter2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDTFilter2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDTFilter2Vtbl {
        unsafe extern "system" fn ChallengeUrl<Impl: IDTFilter2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrchallengeurl: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrLicenseExpDate<Impl: IDTFilter2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prottype: *const ProtType, lpdatetime: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastErrorCode<Impl: IDTFilter2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            EvalRatObjOK::<Impl, IMPL_OFFSET>,
            GetCurrRating::<Impl, IMPL_OFFSET>,
            BlockedRatingAttributes::<Impl, IMPL_OFFSET>,
            SetBlockedRatingAttributes::<Impl, IMPL_OFFSET>,
            BlockUnRated::<Impl, IMPL_OFFSET>,
            SetBlockUnRated::<Impl, IMPL_OFFSET>,
            BlockUnRatedDelay::<Impl, IMPL_OFFSET>,
            SetBlockUnRatedDelay::<Impl, IMPL_OFFSET>,
            ChallengeUrl::<Impl, IMPL_OFFSET>,
            GetCurrLicenseExpDate::<Impl, IMPL_OFFSET>,
            GetLastErrorCode::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDTFilter2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDTFilter3Impl: Sized + IDTFilter2Impl + IDTFilterImpl {
    fn GetProtectionType();
    fn LicenseHasExpirationDate();
    fn SetRights();
}
#[cfg(feature = "Win32_Foundation")]
impl IDTFilter3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDTFilter3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDTFilter3Vtbl {
        unsafe extern "system" fn GetProtectionType<Impl: IDTFilter3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pprotectiontype: *mut ProtType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LicenseHasExpirationDate<Impl: IDTFilter3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pflicensehasexpirationdate: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRights<Impl: IDTFilter3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrrights: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            EvalRatObjOK::<Impl, IMPL_OFFSET>,
            GetCurrRating::<Impl, IMPL_OFFSET>,
            BlockedRatingAttributes::<Impl, IMPL_OFFSET>,
            SetBlockedRatingAttributes::<Impl, IMPL_OFFSET>,
            BlockUnRated::<Impl, IMPL_OFFSET>,
            SetBlockUnRated::<Impl, IMPL_OFFSET>,
            BlockUnRatedDelay::<Impl, IMPL_OFFSET>,
            SetBlockUnRatedDelay::<Impl, IMPL_OFFSET>,
            ChallengeUrl::<Impl, IMPL_OFFSET>,
            GetCurrLicenseExpDate::<Impl, IMPL_OFFSET>,
            GetLastErrorCode::<Impl, IMPL_OFFSET>,
            GetProtectionType::<Impl, IMPL_OFFSET>,
            LicenseHasExpirationDate::<Impl, IMPL_OFFSET>,
            SetRights::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDTFilter3 as ::windows::core::Interface>::IID
    }
}
pub trait IDTFilterConfigImpl: Sized {
    fn GetSecureChannelObject();
}
impl IDTFilterConfigVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDTFilterConfigImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDTFilterConfigVtbl {
        unsafe extern "system" fn GetSecureChannelObject<Impl: IDTFilterConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunkdrmsecurechannel: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetSecureChannelObject::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDTFilterConfig as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDTFilterEventsImpl: Sized + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDTFilterEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDTFilterEventsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDTFilterEventsVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDTFilterEvents as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDTFilterLicenseRenewalImpl: Sized {
    fn GetLicenseRenewalData();
}
#[cfg(feature = "Win32_Foundation")]
impl IDTFilterLicenseRenewalVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDTFilterLicenseRenewalImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDTFilterLicenseRenewalVtbl {
        unsafe extern "system" fn GetLicenseRenewalData<Impl: IDTFilterLicenseRenewalImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppwszfilename: *mut super::super::Foundation::PWSTR, ppwszexpiredkid: *mut super::super::Foundation::PWSTR, ppwsztunerid: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetLicenseRenewalData::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDTFilterLicenseRenewal as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDVBCLocatorImpl: Sized + IDigitalLocatorImpl + ILocatorImpl + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDVBCLocatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVBCLocatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVBCLocatorVtbl {
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            CarrierFrequency::<Impl, IMPL_OFFSET>,
            SetCarrierFrequency::<Impl, IMPL_OFFSET>,
            InnerFEC::<Impl, IMPL_OFFSET>,
            SetInnerFEC::<Impl, IMPL_OFFSET>,
            InnerFECRate::<Impl, IMPL_OFFSET>,
            SetInnerFECRate::<Impl, IMPL_OFFSET>,
            OuterFEC::<Impl, IMPL_OFFSET>,
            SetOuterFEC::<Impl, IMPL_OFFSET>,
            OuterFECRate::<Impl, IMPL_OFFSET>,
            SetOuterFECRate::<Impl, IMPL_OFFSET>,
            Modulation::<Impl, IMPL_OFFSET>,
            SetModulation::<Impl, IMPL_OFFSET>,
            SymbolRate::<Impl, IMPL_OFFSET>,
            SetSymbolRate::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVBCLocator as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDVBSLocatorImpl: Sized + IDigitalLocatorImpl + ILocatorImpl + IDispatchImpl {
    fn SignalPolarisation();
    fn SetSignalPolarisation();
    fn WestPosition();
    fn SetWestPosition();
    fn OrbitalPosition();
    fn SetOrbitalPosition();
    fn Azimuth();
    fn SetAzimuth();
    fn Elevation();
    fn SetElevation();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDVBSLocatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVBSLocatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVBSLocatorVtbl {
        unsafe extern "system" fn SignalPolarisation<Impl: IDVBSLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, polarisationval: *mut Polarisation) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSignalPolarisation<Impl: IDVBSLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, polarisationval: Polarisation) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WestPosition<Impl: IDVBSLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, westlongitude: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetWestPosition<Impl: IDVBSLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, westlongitude: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OrbitalPosition<Impl: IDVBSLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, longitude: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOrbitalPosition<Impl: IDVBSLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, longitude: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Azimuth<Impl: IDVBSLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, azimuth: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAzimuth<Impl: IDVBSLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, azimuth: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Elevation<Impl: IDVBSLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, elevation: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetElevation<Impl: IDVBSLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, elevation: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            CarrierFrequency::<Impl, IMPL_OFFSET>,
            SetCarrierFrequency::<Impl, IMPL_OFFSET>,
            InnerFEC::<Impl, IMPL_OFFSET>,
            SetInnerFEC::<Impl, IMPL_OFFSET>,
            InnerFECRate::<Impl, IMPL_OFFSET>,
            SetInnerFECRate::<Impl, IMPL_OFFSET>,
            OuterFEC::<Impl, IMPL_OFFSET>,
            SetOuterFEC::<Impl, IMPL_OFFSET>,
            OuterFECRate::<Impl, IMPL_OFFSET>,
            SetOuterFECRate::<Impl, IMPL_OFFSET>,
            Modulation::<Impl, IMPL_OFFSET>,
            SetModulation::<Impl, IMPL_OFFSET>,
            SymbolRate::<Impl, IMPL_OFFSET>,
            SetSymbolRate::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            SignalPolarisation::<Impl, IMPL_OFFSET>,
            SetSignalPolarisation::<Impl, IMPL_OFFSET>,
            WestPosition::<Impl, IMPL_OFFSET>,
            SetWestPosition::<Impl, IMPL_OFFSET>,
            OrbitalPosition::<Impl, IMPL_OFFSET>,
            SetOrbitalPosition::<Impl, IMPL_OFFSET>,
            Azimuth::<Impl, IMPL_OFFSET>,
            SetAzimuth::<Impl, IMPL_OFFSET>,
            Elevation::<Impl, IMPL_OFFSET>,
            SetElevation::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVBSLocator as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDVBSLocator2Impl: Sized + IDVBSLocatorImpl + IDigitalLocatorImpl + ILocatorImpl + IDispatchImpl {
    fn DiseqLNBSource();
    fn SetDiseqLNBSource();
    fn LocalOscillatorOverrideLow();
    fn SetLocalOscillatorOverrideLow();
    fn LocalOscillatorOverrideHigh();
    fn SetLocalOscillatorOverrideHigh();
    fn LocalLNBSwitchOverride();
    fn SetLocalLNBSwitchOverride();
    fn LocalSpectralInversionOverride();
    fn SetLocalSpectralInversionOverride();
    fn SignalRollOff();
    fn SetSignalRollOff();
    fn SignalPilot();
    fn SetSignalPilot();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDVBSLocator2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVBSLocator2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVBSLocator2Vtbl {
        unsafe extern "system" fn DiseqLNBSource<Impl: IDVBSLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, diseqlnbsourceval: *mut LNB_Source) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDiseqLNBSource<Impl: IDVBSLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, diseqlnbsourceval: LNB_Source) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LocalOscillatorOverrideLow<Impl: IDVBSLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, localoscillatoroverridelowval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLocalOscillatorOverrideLow<Impl: IDVBSLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, localoscillatoroverridelowval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LocalOscillatorOverrideHigh<Impl: IDVBSLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, localoscillatoroverridehighval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLocalOscillatorOverrideHigh<Impl: IDVBSLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, localoscillatoroverridehighval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LocalLNBSwitchOverride<Impl: IDVBSLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, locallnbswitchoverrideval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLocalLNBSwitchOverride<Impl: IDVBSLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, locallnbswitchoverrideval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LocalSpectralInversionOverride<Impl: IDVBSLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, localspectralinversionoverrideval: *mut SpectralInversion) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLocalSpectralInversionOverride<Impl: IDVBSLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, localspectralinversionoverrideval: SpectralInversion) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SignalRollOff<Impl: IDVBSLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rolloffval: *mut RollOff) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSignalRollOff<Impl: IDVBSLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rolloffval: RollOff) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SignalPilot<Impl: IDVBSLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pilotval: *mut Pilot) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSignalPilot<Impl: IDVBSLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pilotval: Pilot) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            CarrierFrequency::<Impl, IMPL_OFFSET>,
            SetCarrierFrequency::<Impl, IMPL_OFFSET>,
            InnerFEC::<Impl, IMPL_OFFSET>,
            SetInnerFEC::<Impl, IMPL_OFFSET>,
            InnerFECRate::<Impl, IMPL_OFFSET>,
            SetInnerFECRate::<Impl, IMPL_OFFSET>,
            OuterFEC::<Impl, IMPL_OFFSET>,
            SetOuterFEC::<Impl, IMPL_OFFSET>,
            OuterFECRate::<Impl, IMPL_OFFSET>,
            SetOuterFECRate::<Impl, IMPL_OFFSET>,
            Modulation::<Impl, IMPL_OFFSET>,
            SetModulation::<Impl, IMPL_OFFSET>,
            SymbolRate::<Impl, IMPL_OFFSET>,
            SetSymbolRate::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            SignalPolarisation::<Impl, IMPL_OFFSET>,
            SetSignalPolarisation::<Impl, IMPL_OFFSET>,
            WestPosition::<Impl, IMPL_OFFSET>,
            SetWestPosition::<Impl, IMPL_OFFSET>,
            OrbitalPosition::<Impl, IMPL_OFFSET>,
            SetOrbitalPosition::<Impl, IMPL_OFFSET>,
            Azimuth::<Impl, IMPL_OFFSET>,
            SetAzimuth::<Impl, IMPL_OFFSET>,
            Elevation::<Impl, IMPL_OFFSET>,
            SetElevation::<Impl, IMPL_OFFSET>,
            DiseqLNBSource::<Impl, IMPL_OFFSET>,
            SetDiseqLNBSource::<Impl, IMPL_OFFSET>,
            LocalOscillatorOverrideLow::<Impl, IMPL_OFFSET>,
            SetLocalOscillatorOverrideLow::<Impl, IMPL_OFFSET>,
            LocalOscillatorOverrideHigh::<Impl, IMPL_OFFSET>,
            SetLocalOscillatorOverrideHigh::<Impl, IMPL_OFFSET>,
            LocalLNBSwitchOverride::<Impl, IMPL_OFFSET>,
            SetLocalLNBSwitchOverride::<Impl, IMPL_OFFSET>,
            LocalSpectralInversionOverride::<Impl, IMPL_OFFSET>,
            SetLocalSpectralInversionOverride::<Impl, IMPL_OFFSET>,
            SignalRollOff::<Impl, IMPL_OFFSET>,
            SetSignalRollOff::<Impl, IMPL_OFFSET>,
            SignalPilot::<Impl, IMPL_OFFSET>,
            SetSignalPilot::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVBSLocator2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDVBSTuningSpaceImpl: Sized + IDVBTuningSpace2Impl + IDVBTuningSpaceImpl + ITuningSpaceImpl + IDispatchImpl {
    fn LowOscillator();
    fn SetLowOscillator();
    fn HighOscillator();
    fn SetHighOscillator();
    fn LNBSwitch();
    fn SetLNBSwitch();
    fn InputRange();
    fn SetInputRange();
    fn SpectralInversion();
    fn SetSpectralInversion();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDVBSTuningSpaceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVBSTuningSpaceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVBSTuningSpaceVtbl {
        unsafe extern "system" fn LowOscillator<Impl: IDVBSTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lowoscillator: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLowOscillator<Impl: IDVBSTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lowoscillator: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HighOscillator<Impl: IDVBSTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, highoscillator: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetHighOscillator<Impl: IDVBSTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, highoscillator: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LNBSwitch<Impl: IDVBSTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lnbswitch: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLNBSwitch<Impl: IDVBSTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lnbswitch: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InputRange<Impl: IDVBSTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, inputrange: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInputRange<Impl: IDVBSTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, inputrange: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SpectralInversion<Impl: IDVBSTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, spectralinversionval: *mut SpectralInversion) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpectralInversion<Impl: IDVBSTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, spectralinversionval: SpectralInversion) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            UniqueName::<Impl, IMPL_OFFSET>,
            SetUniqueName::<Impl, IMPL_OFFSET>,
            FriendlyName::<Impl, IMPL_OFFSET>,
            SetFriendlyName::<Impl, IMPL_OFFSET>,
            CLSID::<Impl, IMPL_OFFSET>,
            NetworkType::<Impl, IMPL_OFFSET>,
            SetNetworkType::<Impl, IMPL_OFFSET>,
            _NetworkType::<Impl, IMPL_OFFSET>,
            Set_NetworkType::<Impl, IMPL_OFFSET>,
            CreateTuneRequest::<Impl, IMPL_OFFSET>,
            EnumCategoryGUIDs::<Impl, IMPL_OFFSET>,
            EnumDeviceMonikers::<Impl, IMPL_OFFSET>,
            DefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SetDefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            FrequencyMapping::<Impl, IMPL_OFFSET>,
            SetFrequencyMapping::<Impl, IMPL_OFFSET>,
            DefaultLocator::<Impl, IMPL_OFFSET>,
            SetDefaultLocator::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            SystemType::<Impl, IMPL_OFFSET>,
            SetSystemType::<Impl, IMPL_OFFSET>,
            NetworkID::<Impl, IMPL_OFFSET>,
            SetNetworkID::<Impl, IMPL_OFFSET>,
            LowOscillator::<Impl, IMPL_OFFSET>,
            SetLowOscillator::<Impl, IMPL_OFFSET>,
            HighOscillator::<Impl, IMPL_OFFSET>,
            SetHighOscillator::<Impl, IMPL_OFFSET>,
            LNBSwitch::<Impl, IMPL_OFFSET>,
            SetLNBSwitch::<Impl, IMPL_OFFSET>,
            InputRange::<Impl, IMPL_OFFSET>,
            SetInputRange::<Impl, IMPL_OFFSET>,
            SpectralInversion::<Impl, IMPL_OFFSET>,
            SetSpectralInversion::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVBSTuningSpace as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDVBTLocatorImpl: Sized + IDigitalLocatorImpl + ILocatorImpl + IDispatchImpl {
    fn Bandwidth();
    fn SetBandwidth();
    fn LPInnerFEC();
    fn SetLPInnerFEC();
    fn LPInnerFECRate();
    fn SetLPInnerFECRate();
    fn HAlpha();
    fn SetHAlpha();
    fn Guard();
    fn SetGuard();
    fn Mode();
    fn SetMode();
    fn OtherFrequencyInUse();
    fn SetOtherFrequencyInUse();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDVBTLocatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVBTLocatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVBTLocatorVtbl {
        unsafe extern "system" fn Bandwidth<Impl: IDVBTLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bandwidthval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBandwidth<Impl: IDVBTLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bandwidthval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LPInnerFEC<Impl: IDVBTLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fec: *mut FECMethod) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLPInnerFEC<Impl: IDVBTLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fec: FECMethod) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LPInnerFECRate<Impl: IDVBTLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fec: *mut BinaryConvolutionCodeRate) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLPInnerFECRate<Impl: IDVBTLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fec: BinaryConvolutionCodeRate) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HAlpha<Impl: IDVBTLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, alpha: *mut HierarchyAlpha) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetHAlpha<Impl: IDVBTLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, alpha: HierarchyAlpha) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Guard<Impl: IDVBTLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, gi: *mut GuardInterval) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetGuard<Impl: IDVBTLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, gi: GuardInterval) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Mode<Impl: IDVBTLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: *mut TransmissionMode) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMode<Impl: IDVBTLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: TransmissionMode) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OtherFrequencyInUse<Impl: IDVBTLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, otherfrequencyinuseval: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOtherFrequencyInUse<Impl: IDVBTLocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, otherfrequencyinuseval: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            CarrierFrequency::<Impl, IMPL_OFFSET>,
            SetCarrierFrequency::<Impl, IMPL_OFFSET>,
            InnerFEC::<Impl, IMPL_OFFSET>,
            SetInnerFEC::<Impl, IMPL_OFFSET>,
            InnerFECRate::<Impl, IMPL_OFFSET>,
            SetInnerFECRate::<Impl, IMPL_OFFSET>,
            OuterFEC::<Impl, IMPL_OFFSET>,
            SetOuterFEC::<Impl, IMPL_OFFSET>,
            OuterFECRate::<Impl, IMPL_OFFSET>,
            SetOuterFECRate::<Impl, IMPL_OFFSET>,
            Modulation::<Impl, IMPL_OFFSET>,
            SetModulation::<Impl, IMPL_OFFSET>,
            SymbolRate::<Impl, IMPL_OFFSET>,
            SetSymbolRate::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            Bandwidth::<Impl, IMPL_OFFSET>,
            SetBandwidth::<Impl, IMPL_OFFSET>,
            LPInnerFEC::<Impl, IMPL_OFFSET>,
            SetLPInnerFEC::<Impl, IMPL_OFFSET>,
            LPInnerFECRate::<Impl, IMPL_OFFSET>,
            SetLPInnerFECRate::<Impl, IMPL_OFFSET>,
            HAlpha::<Impl, IMPL_OFFSET>,
            SetHAlpha::<Impl, IMPL_OFFSET>,
            Guard::<Impl, IMPL_OFFSET>,
            SetGuard::<Impl, IMPL_OFFSET>,
            Mode::<Impl, IMPL_OFFSET>,
            SetMode::<Impl, IMPL_OFFSET>,
            OtherFrequencyInUse::<Impl, IMPL_OFFSET>,
            SetOtherFrequencyInUse::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVBTLocator as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDVBTLocator2Impl: Sized + IDVBTLocatorImpl + IDigitalLocatorImpl + ILocatorImpl + IDispatchImpl {
    fn PhysicalLayerPipeId();
    fn SetPhysicalLayerPipeId();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDVBTLocator2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVBTLocator2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVBTLocator2Vtbl {
        unsafe extern "system" fn PhysicalLayerPipeId<Impl: IDVBTLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, physicallayerpipeidval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPhysicalLayerPipeId<Impl: IDVBTLocator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, physicallayerpipeidval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            CarrierFrequency::<Impl, IMPL_OFFSET>,
            SetCarrierFrequency::<Impl, IMPL_OFFSET>,
            InnerFEC::<Impl, IMPL_OFFSET>,
            SetInnerFEC::<Impl, IMPL_OFFSET>,
            InnerFECRate::<Impl, IMPL_OFFSET>,
            SetInnerFECRate::<Impl, IMPL_OFFSET>,
            OuterFEC::<Impl, IMPL_OFFSET>,
            SetOuterFEC::<Impl, IMPL_OFFSET>,
            OuterFECRate::<Impl, IMPL_OFFSET>,
            SetOuterFECRate::<Impl, IMPL_OFFSET>,
            Modulation::<Impl, IMPL_OFFSET>,
            SetModulation::<Impl, IMPL_OFFSET>,
            SymbolRate::<Impl, IMPL_OFFSET>,
            SetSymbolRate::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            Bandwidth::<Impl, IMPL_OFFSET>,
            SetBandwidth::<Impl, IMPL_OFFSET>,
            LPInnerFEC::<Impl, IMPL_OFFSET>,
            SetLPInnerFEC::<Impl, IMPL_OFFSET>,
            LPInnerFECRate::<Impl, IMPL_OFFSET>,
            SetLPInnerFECRate::<Impl, IMPL_OFFSET>,
            HAlpha::<Impl, IMPL_OFFSET>,
            SetHAlpha::<Impl, IMPL_OFFSET>,
            Guard::<Impl, IMPL_OFFSET>,
            SetGuard::<Impl, IMPL_OFFSET>,
            Mode::<Impl, IMPL_OFFSET>,
            SetMode::<Impl, IMPL_OFFSET>,
            OtherFrequencyInUse::<Impl, IMPL_OFFSET>,
            SetOtherFrequencyInUse::<Impl, IMPL_OFFSET>,
            PhysicalLayerPipeId::<Impl, IMPL_OFFSET>,
            SetPhysicalLayerPipeId::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVBTLocator2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDVBTuneRequestImpl: Sized + ITuneRequestImpl + IDispatchImpl {
    fn ONID();
    fn SetONID();
    fn TSID();
    fn SetTSID();
    fn SID();
    fn SetSID();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDVBTuneRequestVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVBTuneRequestImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVBTuneRequestVtbl {
        unsafe extern "system" fn ONID<Impl: IDVBTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, onid: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetONID<Impl: IDVBTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, onid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TSID<Impl: IDVBTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tsid: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTSID<Impl: IDVBTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tsid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SID<Impl: IDVBTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sid: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSID<Impl: IDVBTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            TuningSpace::<Impl, IMPL_OFFSET>,
            Components::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            Locator::<Impl, IMPL_OFFSET>,
            SetLocator::<Impl, IMPL_OFFSET>,
            ONID::<Impl, IMPL_OFFSET>,
            SetONID::<Impl, IMPL_OFFSET>,
            TSID::<Impl, IMPL_OFFSET>,
            SetTSID::<Impl, IMPL_OFFSET>,
            SID::<Impl, IMPL_OFFSET>,
            SetSID::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVBTuneRequest as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDVBTuningSpaceImpl: Sized + ITuningSpaceImpl + IDispatchImpl {
    fn SystemType();
    fn SetSystemType();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDVBTuningSpaceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVBTuningSpaceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVBTuningSpaceVtbl {
        unsafe extern "system" fn SystemType<Impl: IDVBTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, systype: *mut DVBSystemType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSystemType<Impl: IDVBTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, systype: DVBSystemType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            UniqueName::<Impl, IMPL_OFFSET>,
            SetUniqueName::<Impl, IMPL_OFFSET>,
            FriendlyName::<Impl, IMPL_OFFSET>,
            SetFriendlyName::<Impl, IMPL_OFFSET>,
            CLSID::<Impl, IMPL_OFFSET>,
            NetworkType::<Impl, IMPL_OFFSET>,
            SetNetworkType::<Impl, IMPL_OFFSET>,
            _NetworkType::<Impl, IMPL_OFFSET>,
            Set_NetworkType::<Impl, IMPL_OFFSET>,
            CreateTuneRequest::<Impl, IMPL_OFFSET>,
            EnumCategoryGUIDs::<Impl, IMPL_OFFSET>,
            EnumDeviceMonikers::<Impl, IMPL_OFFSET>,
            DefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SetDefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            FrequencyMapping::<Impl, IMPL_OFFSET>,
            SetFrequencyMapping::<Impl, IMPL_OFFSET>,
            DefaultLocator::<Impl, IMPL_OFFSET>,
            SetDefaultLocator::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            SystemType::<Impl, IMPL_OFFSET>,
            SetSystemType::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVBTuningSpace as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDVBTuningSpace2Impl: Sized + IDVBTuningSpaceImpl + ITuningSpaceImpl + IDispatchImpl {
    fn NetworkID();
    fn SetNetworkID();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDVBTuningSpace2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVBTuningSpace2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVBTuningSpace2Vtbl {
        unsafe extern "system" fn NetworkID<Impl: IDVBTuningSpace2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, networkid: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNetworkID<Impl: IDVBTuningSpace2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, networkid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            UniqueName::<Impl, IMPL_OFFSET>,
            SetUniqueName::<Impl, IMPL_OFFSET>,
            FriendlyName::<Impl, IMPL_OFFSET>,
            SetFriendlyName::<Impl, IMPL_OFFSET>,
            CLSID::<Impl, IMPL_OFFSET>,
            NetworkType::<Impl, IMPL_OFFSET>,
            SetNetworkType::<Impl, IMPL_OFFSET>,
            _NetworkType::<Impl, IMPL_OFFSET>,
            Set_NetworkType::<Impl, IMPL_OFFSET>,
            CreateTuneRequest::<Impl, IMPL_OFFSET>,
            EnumCategoryGUIDs::<Impl, IMPL_OFFSET>,
            EnumDeviceMonikers::<Impl, IMPL_OFFSET>,
            DefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SetDefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            FrequencyMapping::<Impl, IMPL_OFFSET>,
            SetFrequencyMapping::<Impl, IMPL_OFFSET>,
            DefaultLocator::<Impl, IMPL_OFFSET>,
            SetDefaultLocator::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            SystemType::<Impl, IMPL_OFFSET>,
            SetSystemType::<Impl, IMPL_OFFSET>,
            NetworkID::<Impl, IMPL_OFFSET>,
            SetNetworkID::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVBTuningSpace2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDVB_BATImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetBouquetId();
    fn GetCountOfTableDescriptors();
    fn GetTableDescriptorByIndex();
    fn GetTableDescriptorByTag();
    fn GetCountOfRecords();
    fn GetRecordTransportStreamId();
    fn GetRecordOriginalNetworkId();
    fn GetRecordCountOfDescriptors();
    fn GetRecordDescriptorByIndex();
    fn GetRecordDescriptorByTag();
    fn RegisterForNextTable();
    fn GetNextTable();
    fn RegisterForWhenCurrent();
    fn ConvertNextToCurrent();
}
#[cfg(feature = "Win32_Foundation")]
impl IDVB_BATVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVB_BATImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVB_BATVtbl {
        unsafe extern "system" fn Initialize<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBouquetId<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *const ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordTransportStreamId<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordOriginalNetworkId<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForNextTable<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextTable<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppbat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConvertNextToCurrent<Impl: IDVB_BATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetBouquetId::<Impl, IMPL_OFFSET>,
            GetCountOfTableDescriptors::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByTag::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordTransportStreamId::<Impl, IMPL_OFFSET>,
            GetRecordOriginalNetworkId::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
            RegisterForNextTable::<Impl, IMPL_OFFSET>,
            GetNextTable::<Impl, IMPL_OFFSET>,
            RegisterForWhenCurrent::<Impl, IMPL_OFFSET>,
            ConvertNextToCurrent::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVB_BAT as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDVB_DITImpl: Sized {
    fn Initialize();
    fn GetTransitionFlag();
}
#[cfg(feature = "Win32_Foundation")]
impl IDVB_DITVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVB_DITImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVB_DITVtbl {
        unsafe extern "system" fn Initialize<Impl: IDVB_DITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTransitionFlag<Impl: IDVB_DITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfval: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, GetTransitionFlag::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVB_DIT as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDVB_EITImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetServiceId();
    fn GetTransportStreamId();
    fn GetOriginalNetworkId();
    fn GetSegmentLastSectionNumber();
    fn GetLastTableId();
    fn GetCountOfRecords();
    fn GetRecordEventId();
    fn GetRecordStartTime();
    fn GetRecordDuration();
    fn GetRecordRunningStatus();
    fn GetRecordFreeCAMode();
    fn GetRecordCountOfDescriptors();
    fn GetRecordDescriptorByIndex();
    fn GetRecordDescriptorByTag();
    fn RegisterForNextTable();
    fn GetNextTable();
    fn RegisterForWhenCurrent();
    fn ConvertNextToCurrent();
    fn GetVersionHash();
}
#[cfg(feature = "Win32_Foundation")]
impl IDVB_EITVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVB_EITImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVB_EITVtbl {
        unsafe extern "system" fn Initialize<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceId<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTransportStreamId<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOriginalNetworkId<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSegmentLastSectionNumber<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastTableId<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordEventId<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordStartTime<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDuration<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdval: *mut MPEG_TIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordRunningStatus<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordFreeCAMode<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForNextTable<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextTable<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppeit: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConvertNextToCurrent<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionHash<Impl: IDVB_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetServiceId::<Impl, IMPL_OFFSET>,
            GetTransportStreamId::<Impl, IMPL_OFFSET>,
            GetOriginalNetworkId::<Impl, IMPL_OFFSET>,
            GetSegmentLastSectionNumber::<Impl, IMPL_OFFSET>,
            GetLastTableId::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordEventId::<Impl, IMPL_OFFSET>,
            GetRecordStartTime::<Impl, IMPL_OFFSET>,
            GetRecordDuration::<Impl, IMPL_OFFSET>,
            GetRecordRunningStatus::<Impl, IMPL_OFFSET>,
            GetRecordFreeCAMode::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
            RegisterForNextTable::<Impl, IMPL_OFFSET>,
            GetNextTable::<Impl, IMPL_OFFSET>,
            RegisterForWhenCurrent::<Impl, IMPL_OFFSET>,
            ConvertNextToCurrent::<Impl, IMPL_OFFSET>,
            GetVersionHash::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVB_EIT as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDVB_EIT2Impl: Sized + IDVB_EITImpl {
    fn GetSegmentInfo();
    fn GetRecordSection();
}
#[cfg(feature = "Win32_Foundation")]
impl IDVB_EIT2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVB_EIT2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVB_EIT2Vtbl {
        unsafe extern "system" fn GetSegmentInfo<Impl: IDVB_EIT2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbtid: *mut u8, pbsegment: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordSection<Impl: IDVB_EIT2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetServiceId::<Impl, IMPL_OFFSET>,
            GetTransportStreamId::<Impl, IMPL_OFFSET>,
            GetOriginalNetworkId::<Impl, IMPL_OFFSET>,
            GetSegmentLastSectionNumber::<Impl, IMPL_OFFSET>,
            GetLastTableId::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordEventId::<Impl, IMPL_OFFSET>,
            GetRecordStartTime::<Impl, IMPL_OFFSET>,
            GetRecordDuration::<Impl, IMPL_OFFSET>,
            GetRecordRunningStatus::<Impl, IMPL_OFFSET>,
            GetRecordFreeCAMode::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
            RegisterForNextTable::<Impl, IMPL_OFFSET>,
            GetNextTable::<Impl, IMPL_OFFSET>,
            RegisterForWhenCurrent::<Impl, IMPL_OFFSET>,
            ConvertNextToCurrent::<Impl, IMPL_OFFSET>,
            GetVersionHash::<Impl, IMPL_OFFSET>,
            GetSegmentInfo::<Impl, IMPL_OFFSET>,
            GetRecordSection::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVB_EIT2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDVB_NITImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetNetworkId();
    fn GetCountOfTableDescriptors();
    fn GetTableDescriptorByIndex();
    fn GetTableDescriptorByTag();
    fn GetCountOfRecords();
    fn GetRecordTransportStreamId();
    fn GetRecordOriginalNetworkId();
    fn GetRecordCountOfDescriptors();
    fn GetRecordDescriptorByIndex();
    fn GetRecordDescriptorByTag();
    fn RegisterForNextTable();
    fn GetNextTable();
    fn RegisterForWhenCurrent();
    fn ConvertNextToCurrent();
    fn GetVersionHash();
}
#[cfg(feature = "Win32_Foundation")]
impl IDVB_NITVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVB_NITImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVB_NITVtbl {
        unsafe extern "system" fn Initialize<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNetworkId<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordTransportStreamId<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordOriginalNetworkId<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForNextTable<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextTable<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppnit: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConvertNextToCurrent<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionHash<Impl: IDVB_NITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetNetworkId::<Impl, IMPL_OFFSET>,
            GetCountOfTableDescriptors::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByTag::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordTransportStreamId::<Impl, IMPL_OFFSET>,
            GetRecordOriginalNetworkId::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
            RegisterForNextTable::<Impl, IMPL_OFFSET>,
            GetNextTable::<Impl, IMPL_OFFSET>,
            RegisterForWhenCurrent::<Impl, IMPL_OFFSET>,
            ConvertNextToCurrent::<Impl, IMPL_OFFSET>,
            GetVersionHash::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVB_NIT as ::windows::core::Interface>::IID
    }
}
pub trait IDVB_RSTImpl: Sized {
    fn Initialize();
    fn GetCountOfRecords();
    fn GetRecordTransportStreamId();
    fn GetRecordOriginalNetworkId();
    fn GetRecordServiceId();
    fn GetRecordEventId();
    fn GetRecordRunningStatus();
}
impl IDVB_RSTVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVB_RSTImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVB_RSTVtbl {
        unsafe extern "system" fn Initialize<Impl: IDVB_RSTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDVB_RSTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordTransportStreamId<Impl: IDVB_RSTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordOriginalNetworkId<Impl: IDVB_RSTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordServiceId<Impl: IDVB_RSTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordEventId<Impl: IDVB_RSTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordRunningStatus<Impl: IDVB_RSTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordTransportStreamId::<Impl, IMPL_OFFSET>, GetRecordOriginalNetworkId::<Impl, IMPL_OFFSET>, GetRecordServiceId::<Impl, IMPL_OFFSET>, GetRecordEventId::<Impl, IMPL_OFFSET>, GetRecordRunningStatus::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVB_RST as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDVB_SDTImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetTransportStreamId();
    fn GetOriginalNetworkId();
    fn GetCountOfRecords();
    fn GetRecordServiceId();
    fn GetRecordEITScheduleFlag();
    fn GetRecordEITPresentFollowingFlag();
    fn GetRecordRunningStatus();
    fn GetRecordFreeCAMode();
    fn GetRecordCountOfDescriptors();
    fn GetRecordDescriptorByIndex();
    fn GetRecordDescriptorByTag();
    fn RegisterForNextTable();
    fn GetNextTable();
    fn RegisterForWhenCurrent();
    fn ConvertNextToCurrent();
    fn GetVersionHash();
}
#[cfg(feature = "Win32_Foundation")]
impl IDVB_SDTVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVB_SDTImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVB_SDTVtbl {
        unsafe extern "system" fn Initialize<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTransportStreamId<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOriginalNetworkId<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordServiceId<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordEITScheduleFlag<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordEITPresentFollowingFlag<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordRunningStatus<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordFreeCAMode<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForNextTable<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextTable<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsdt: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConvertNextToCurrent<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionHash<Impl: IDVB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetTransportStreamId::<Impl, IMPL_OFFSET>,
            GetOriginalNetworkId::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordServiceId::<Impl, IMPL_OFFSET>,
            GetRecordEITScheduleFlag::<Impl, IMPL_OFFSET>,
            GetRecordEITPresentFollowingFlag::<Impl, IMPL_OFFSET>,
            GetRecordRunningStatus::<Impl, IMPL_OFFSET>,
            GetRecordFreeCAMode::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
            RegisterForNextTable::<Impl, IMPL_OFFSET>,
            GetNextTable::<Impl, IMPL_OFFSET>,
            RegisterForWhenCurrent::<Impl, IMPL_OFFSET>,
            ConvertNextToCurrent::<Impl, IMPL_OFFSET>,
            GetVersionHash::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVB_SDT as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDVB_SITImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetCountOfTableDescriptors();
    fn GetTableDescriptorByIndex();
    fn GetTableDescriptorByTag();
    fn GetCountOfRecords();
    fn GetRecordServiceId();
    fn GetRecordRunningStatus();
    fn GetRecordCountOfDescriptors();
    fn GetRecordDescriptorByIndex();
    fn GetRecordDescriptorByTag();
    fn RegisterForNextTable();
    fn GetNextTable();
    fn RegisterForWhenCurrent();
    fn ConvertNextToCurrent();
}
#[cfg(feature = "Win32_Foundation")]
impl IDVB_SITVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVB_SITImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVB_SITVtbl {
        unsafe extern "system" fn Initialize<Impl: IDVB_SITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IDVB_SITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Impl: IDVB_SITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Impl: IDVB_SITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Impl: IDVB_SITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDVB_SITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordServiceId<Impl: IDVB_SITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordRunningStatus<Impl: IDVB_SITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Impl: IDVB_SITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Impl: IDVB_SITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Impl: IDVB_SITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForNextTable<Impl: IDVB_SITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextTable<Impl: IDVB_SITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppsit: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Impl: IDVB_SITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConvertNextToCurrent<Impl: IDVB_SITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetCountOfTableDescriptors::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByTag::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordServiceId::<Impl, IMPL_OFFSET>,
            GetRecordRunningStatus::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
            RegisterForNextTable::<Impl, IMPL_OFFSET>,
            GetNextTable::<Impl, IMPL_OFFSET>,
            RegisterForWhenCurrent::<Impl, IMPL_OFFSET>,
            ConvertNextToCurrent::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVB_SIT as ::windows::core::Interface>::IID
    }
}
pub trait IDVB_STImpl: Sized {
    fn Initialize();
    fn GetDataLength();
    fn GetData();
}
impl IDVB_STVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVB_STImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVB_STVtbl {
        unsafe extern "system" fn Initialize<Impl: IDVB_STImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDataLength<Impl: IDVB_STImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetData<Impl: IDVB_STImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdata: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, GetDataLength::<Impl, IMPL_OFFSET>, GetData::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVB_ST as ::windows::core::Interface>::IID
    }
}
pub trait IDVB_TDTImpl: Sized {
    fn Initialize();
    fn GetUTCTime();
}
impl IDVB_TDTVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVB_TDTImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVB_TDTVtbl {
        unsafe extern "system" fn Initialize<Impl: IDVB_TDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetUTCTime<Impl: IDVB_TDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, GetUTCTime::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVB_TDT as ::windows::core::Interface>::IID
    }
}
pub trait IDVB_TOTImpl: Sized {
    fn Initialize();
    fn GetUTCTime();
    fn GetCountOfTableDescriptors();
    fn GetTableDescriptorByIndex();
    fn GetTableDescriptorByTag();
}
impl IDVB_TOTVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVB_TOTImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVB_TOTVtbl {
        unsafe extern "system" fn Initialize<Impl: IDVB_TOTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetUTCTime<Impl: IDVB_TOTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Impl: IDVB_TOTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Impl: IDVB_TOTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Impl: IDVB_TOTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, GetUTCTime::<Impl, IMPL_OFFSET>, GetCountOfTableDescriptors::<Impl, IMPL_OFFSET>, GetTableDescriptorByIndex::<Impl, IMPL_OFFSET>, GetTableDescriptorByTag::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVB_TOT as ::windows::core::Interface>::IID
    }
}
pub trait IDVEncImpl: Sized {
    fn IFormatResolution();
    fn SetIFormatResolution();
}
impl IDVEncVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVEncImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVEncVtbl {
        unsafe extern "system" fn IFormatResolution<Impl: IDVEncImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, videoformat: *mut i32, dvformat: *mut i32, resolution: *mut i32, fdvinfo: u8, sdvinfo: *mut DVINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetIFormatResolution<Impl: IDVEncImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, videoformat: i32, dvformat: i32, resolution: i32, fdvinfo: u8, sdvinfo: *const DVINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, IFormatResolution::<Impl, IMPL_OFFSET>, SetIFormatResolution::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVEnc as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDVRGB219Impl: Sized {
    fn SetRGB219();
}
#[cfg(feature = "Win32_Foundation")]
impl IDVRGB219Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVRGB219Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVRGB219Vtbl {
        unsafe extern "system" fn SetRGB219<Impl: IDVRGB219Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstate: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetRGB219::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVRGB219 as ::windows::core::Interface>::IID
    }
}
pub trait IDVSplitterImpl: Sized {
    fn DiscardAlternateVideoFrames();
}
impl IDVSplitterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDVSplitterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDVSplitterVtbl {
        unsafe extern "system" fn DiscardAlternateVideoFrames<Impl: IDVSplitterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ndiscard: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, DiscardAlternateVideoFrames::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDVSplitter as ::windows::core::Interface>::IID
    }
}
pub trait IDecimateVideoImageImpl: Sized {
    fn SetDecimationImageSize();
    fn ResetDecimationImageSize();
}
impl IDecimateVideoImageVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDecimateVideoImageImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDecimateVideoImageVtbl {
        unsafe extern "system" fn SetDecimationImageSize<Impl: IDecimateVideoImageImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lwidth: i32, lheight: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResetDecimationImageSize<Impl: IDecimateVideoImageImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetDecimationImageSize::<Impl, IMPL_OFFSET>, ResetDecimationImageSize::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDecimateVideoImage as ::windows::core::Interface>::IID
    }
}
pub trait IDeferredCommandImpl: Sized {
    fn Cancel();
    fn Confidence();
    fn Postpone();
    fn GetHResult();
}
impl IDeferredCommandVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDeferredCommandImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDeferredCommandVtbl {
        unsafe extern "system" fn Cancel<Impl: IDeferredCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Confidence<Impl: IDeferredCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pconfidence: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Postpone<Impl: IDeferredCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newtime: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetHResult<Impl: IDeferredCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phrresult: *mut ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Cancel::<Impl, IMPL_OFFSET>, Confidence::<Impl, IMPL_OFFSET>, Postpone::<Impl, IMPL_OFFSET>, GetHResult::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDeferredCommand as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDigitalCableLocatorImpl: Sized + IATSCLocator2Impl + IATSCLocatorImpl + IDigitalLocatorImpl + ILocatorImpl + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDigitalCableLocatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDigitalCableLocatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDigitalCableLocatorVtbl {
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            CarrierFrequency::<Impl, IMPL_OFFSET>,
            SetCarrierFrequency::<Impl, IMPL_OFFSET>,
            InnerFEC::<Impl, IMPL_OFFSET>,
            SetInnerFEC::<Impl, IMPL_OFFSET>,
            InnerFECRate::<Impl, IMPL_OFFSET>,
            SetInnerFECRate::<Impl, IMPL_OFFSET>,
            OuterFEC::<Impl, IMPL_OFFSET>,
            SetOuterFEC::<Impl, IMPL_OFFSET>,
            OuterFECRate::<Impl, IMPL_OFFSET>,
            SetOuterFECRate::<Impl, IMPL_OFFSET>,
            Modulation::<Impl, IMPL_OFFSET>,
            SetModulation::<Impl, IMPL_OFFSET>,
            SymbolRate::<Impl, IMPL_OFFSET>,
            SetSymbolRate::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            PhysicalChannel::<Impl, IMPL_OFFSET>,
            SetPhysicalChannel::<Impl, IMPL_OFFSET>,
            TSID::<Impl, IMPL_OFFSET>,
            SetTSID::<Impl, IMPL_OFFSET>,
            ProgramNumber::<Impl, IMPL_OFFSET>,
            SetProgramNumber::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDigitalCableLocator as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDigitalCableTuneRequestImpl: Sized + IATSCChannelTuneRequestImpl + IChannelTuneRequestImpl + ITuneRequestImpl + IDispatchImpl {
    fn MajorChannel();
    fn SetMajorChannel();
    fn SourceID();
    fn SetSourceID();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDigitalCableTuneRequestVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDigitalCableTuneRequestImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDigitalCableTuneRequestVtbl {
        unsafe extern "system" fn MajorChannel<Impl: IDigitalCableTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmajorchannel: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMajorChannel<Impl: IDigitalCableTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, majorchannel: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SourceID<Impl: IDigitalCableTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psourceid: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourceID<Impl: IDigitalCableTuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sourceid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            TuningSpace::<Impl, IMPL_OFFSET>,
            Components::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            Locator::<Impl, IMPL_OFFSET>,
            SetLocator::<Impl, IMPL_OFFSET>,
            Channel::<Impl, IMPL_OFFSET>,
            SetChannel::<Impl, IMPL_OFFSET>,
            MinorChannel::<Impl, IMPL_OFFSET>,
            SetMinorChannel::<Impl, IMPL_OFFSET>,
            MajorChannel::<Impl, IMPL_OFFSET>,
            SetMajorChannel::<Impl, IMPL_OFFSET>,
            SourceID::<Impl, IMPL_OFFSET>,
            SetSourceID::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDigitalCableTuneRequest as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDigitalCableTuningSpaceImpl: Sized + IATSCTuningSpaceImpl + IAnalogTVTuningSpaceImpl + ITuningSpaceImpl + IDispatchImpl {
    fn MinMajorChannel();
    fn SetMinMajorChannel();
    fn MaxMajorChannel();
    fn SetMaxMajorChannel();
    fn MinSourceID();
    fn SetMinSourceID();
    fn MaxSourceID();
    fn SetMaxSourceID();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDigitalCableTuningSpaceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDigitalCableTuningSpaceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDigitalCableTuningSpaceVtbl {
        unsafe extern "system" fn MinMajorChannel<Impl: IDigitalCableTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, minmajorchannelval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMinMajorChannel<Impl: IDigitalCableTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newminmajorchannelval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MaxMajorChannel<Impl: IDigitalCableTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, maxmajorchannelval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMaxMajorChannel<Impl: IDigitalCableTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newmaxmajorchannelval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MinSourceID<Impl: IDigitalCableTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, minsourceidval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMinSourceID<Impl: IDigitalCableTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newminsourceidval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MaxSourceID<Impl: IDigitalCableTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, maxsourceidval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMaxSourceID<Impl: IDigitalCableTuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newmaxsourceidval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            UniqueName::<Impl, IMPL_OFFSET>,
            SetUniqueName::<Impl, IMPL_OFFSET>,
            FriendlyName::<Impl, IMPL_OFFSET>,
            SetFriendlyName::<Impl, IMPL_OFFSET>,
            CLSID::<Impl, IMPL_OFFSET>,
            NetworkType::<Impl, IMPL_OFFSET>,
            SetNetworkType::<Impl, IMPL_OFFSET>,
            _NetworkType::<Impl, IMPL_OFFSET>,
            Set_NetworkType::<Impl, IMPL_OFFSET>,
            CreateTuneRequest::<Impl, IMPL_OFFSET>,
            EnumCategoryGUIDs::<Impl, IMPL_OFFSET>,
            EnumDeviceMonikers::<Impl, IMPL_OFFSET>,
            DefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SetDefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            FrequencyMapping::<Impl, IMPL_OFFSET>,
            SetFrequencyMapping::<Impl, IMPL_OFFSET>,
            DefaultLocator::<Impl, IMPL_OFFSET>,
            SetDefaultLocator::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            MinChannel::<Impl, IMPL_OFFSET>,
            SetMinChannel::<Impl, IMPL_OFFSET>,
            MaxChannel::<Impl, IMPL_OFFSET>,
            SetMaxChannel::<Impl, IMPL_OFFSET>,
            InputType::<Impl, IMPL_OFFSET>,
            SetInputType::<Impl, IMPL_OFFSET>,
            CountryCode::<Impl, IMPL_OFFSET>,
            SetCountryCode::<Impl, IMPL_OFFSET>,
            MinMinorChannel::<Impl, IMPL_OFFSET>,
            SetMinMinorChannel::<Impl, IMPL_OFFSET>,
            MaxMinorChannel::<Impl, IMPL_OFFSET>,
            SetMaxMinorChannel::<Impl, IMPL_OFFSET>,
            MinPhysicalChannel::<Impl, IMPL_OFFSET>,
            SetMinPhysicalChannel::<Impl, IMPL_OFFSET>,
            MaxPhysicalChannel::<Impl, IMPL_OFFSET>,
            SetMaxPhysicalChannel::<Impl, IMPL_OFFSET>,
            MinMajorChannel::<Impl, IMPL_OFFSET>,
            SetMinMajorChannel::<Impl, IMPL_OFFSET>,
            MaxMajorChannel::<Impl, IMPL_OFFSET>,
            SetMaxMajorChannel::<Impl, IMPL_OFFSET>,
            MinSourceID::<Impl, IMPL_OFFSET>,
            SetMinSourceID::<Impl, IMPL_OFFSET>,
            MaxSourceID::<Impl, IMPL_OFFSET>,
            SetMaxSourceID::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDigitalCableTuningSpace as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDigitalLocatorImpl: Sized + ILocatorImpl + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDigitalLocatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDigitalLocatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDigitalLocatorVtbl {
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            CarrierFrequency::<Impl, IMPL_OFFSET>,
            SetCarrierFrequency::<Impl, IMPL_OFFSET>,
            InnerFEC::<Impl, IMPL_OFFSET>,
            SetInnerFEC::<Impl, IMPL_OFFSET>,
            InnerFECRate::<Impl, IMPL_OFFSET>,
            SetInnerFECRate::<Impl, IMPL_OFFSET>,
            OuterFEC::<Impl, IMPL_OFFSET>,
            SetOuterFEC::<Impl, IMPL_OFFSET>,
            OuterFECRate::<Impl, IMPL_OFFSET>,
            SetOuterFECRate::<Impl, IMPL_OFFSET>,
            Modulation::<Impl, IMPL_OFFSET>,
            SetModulation::<Impl, IMPL_OFFSET>,
            SymbolRate::<Impl, IMPL_OFFSET>,
            SetSymbolRate::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDigitalLocator as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
pub trait IDirectDrawMediaSampleImpl: Sized {
    fn GetSurfaceAndReleaseLock();
    fn LockMediaSamplePointer();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
impl IDirectDrawMediaSampleVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDirectDrawMediaSampleImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDirectDrawMediaSampleVtbl {
        unsafe extern "system" fn GetSurfaceAndReleaseLock<Impl: IDirectDrawMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdirectdrawsurface: *mut ::windows::core::RawPtr, prect: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LockMediaSamplePointer<Impl: IDirectDrawMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetSurfaceAndReleaseLock::<Impl, IMPL_OFFSET>, LockMediaSamplePointer::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDirectDrawMediaSample as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Graphics_DirectDraw")]
pub trait IDirectDrawMediaSampleAllocatorImpl: Sized {
    fn GetDirectDraw();
}
#[cfg(feature = "Win32_Graphics_DirectDraw")]
impl IDirectDrawMediaSampleAllocatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDirectDrawMediaSampleAllocatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDirectDrawMediaSampleAllocatorVtbl {
        unsafe extern "system" fn GetDirectDraw<Impl: IDirectDrawMediaSampleAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdirectdraw: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetDirectDraw::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDirectDrawMediaSampleAllocator as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
pub trait IDirectDrawMediaStreamImpl: Sized + IMediaStreamImpl {
    fn GetFormat();
    fn SetFormat();
    fn GetDirectDraw();
    fn SetDirectDraw();
    fn CreateSample();
    fn GetTimePerFrame();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
impl IDirectDrawMediaStreamVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDirectDrawMediaStreamImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDirectDrawMediaStreamVtbl {
        unsafe extern "system" fn GetFormat<Impl: IDirectDrawMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddsdcurrent: *mut super::super::Graphics::DirectDraw::DDSURFACEDESC, ppdirectdrawpalette: *mut ::windows::core::RawPtr, pddsddesired: *mut super::super::Graphics::DirectDraw::DDSURFACEDESC, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFormat<Impl: IDirectDrawMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddsurfacedesc: *const super::super::Graphics::DirectDraw::DDSURFACEDESC, pdirectdrawpalette: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDirectDraw<Impl: IDirectDrawMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdirectdraw: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDirectDraw<Impl: IDirectDrawMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdirectdraw: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateSample<Impl: IDirectDrawMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psurface: ::windows::core::RawPtr, prect: *const super::super::Foundation::RECT, dwflags: u32, ppsample: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTimePerFrame<Impl: IDirectDrawMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pframetime: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetMultiMediaStream::<Impl, IMPL_OFFSET>,
            GetInformation::<Impl, IMPL_OFFSET>,
            SetSameFormat::<Impl, IMPL_OFFSET>,
            AllocateSample::<Impl, IMPL_OFFSET>,
            CreateSharedSample::<Impl, IMPL_OFFSET>,
            SendEndOfStream::<Impl, IMPL_OFFSET>,
            GetFormat::<Impl, IMPL_OFFSET>,
            SetFormat::<Impl, IMPL_OFFSET>,
            GetDirectDraw::<Impl, IMPL_OFFSET>,
            SetDirectDraw::<Impl, IMPL_OFFSET>,
            CreateSample::<Impl, IMPL_OFFSET>,
            GetTimePerFrame::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDirectDrawMediaStream as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
pub trait IDirectDrawStreamSampleImpl: Sized + IStreamSampleImpl {
    fn GetSurface();
    fn SetRect();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
impl IDirectDrawStreamSampleVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDirectDrawStreamSampleImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDirectDrawStreamSampleVtbl {
        unsafe extern "system" fn GetSurface<Impl: IDirectDrawStreamSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdirectdrawsurface: *mut ::windows::core::RawPtr, prect: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRect<Impl: IDirectDrawStreamSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prect: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetMediaStream::<Impl, IMPL_OFFSET>, GetSampleTimes::<Impl, IMPL_OFFSET>, SetSampleTimes::<Impl, IMPL_OFFSET>, Update::<Impl, IMPL_OFFSET>, CompletionStatus::<Impl, IMPL_OFFSET>, GetSurface::<Impl, IMPL_OFFSET>, SetRect::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDirectDrawStreamSample as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Graphics_DirectDraw")]
pub trait IDirectDrawVideoImpl: Sized {
    fn GetSwitches();
    fn SetSwitches();
    fn GetCaps();
    fn GetEmulatedCaps();
    fn GetSurfaceDesc();
    fn GetFourCCCodes();
    fn SetDirectDraw();
    fn GetDirectDraw();
    fn GetSurfaceType();
    fn SetDefault();
    fn UseScanLine();
    fn CanUseScanLine();
    fn UseOverlayStretch();
    fn CanUseOverlayStretch();
    fn UseWhenFullScreen();
    fn WillUseFullScreen();
}
#[cfg(feature = "Win32_Graphics_DirectDraw")]
impl IDirectDrawVideoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDirectDrawVideoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDirectDrawVideoVtbl {
        unsafe extern "system" fn GetSwitches<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pswitches: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSwitches<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, switches: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCaps<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcaps: *mut super::super::Graphics::DirectDraw::DDCAPS_DX7) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEmulatedCaps<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcaps: *mut super::super::Graphics::DirectDraw::DDCAPS_DX7) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSurfaceDesc<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psurfacedesc: *mut super::super::Graphics::DirectDraw::DDSURFACEDESC) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFourCCCodes<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcount: *mut u32, pcodes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDirectDraw<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdirectdraw: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDirectDraw<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdirectdraw: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSurfaceType<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psurfacetype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefault<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UseScanLine<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, usescanline: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CanUseScanLine<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, usescanline: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UseOverlayStretch<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, useoverlaystretch: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CanUseOverlayStretch<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, useoverlaystretch: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UseWhenFullScreen<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, usewhenfullscreen: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WillUseFullScreen<Impl: IDirectDrawVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, usewhenfullscreen: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetSwitches::<Impl, IMPL_OFFSET>,
            SetSwitches::<Impl, IMPL_OFFSET>,
            GetCaps::<Impl, IMPL_OFFSET>,
            GetEmulatedCaps::<Impl, IMPL_OFFSET>,
            GetSurfaceDesc::<Impl, IMPL_OFFSET>,
            GetFourCCCodes::<Impl, IMPL_OFFSET>,
            SetDirectDraw::<Impl, IMPL_OFFSET>,
            GetDirectDraw::<Impl, IMPL_OFFSET>,
            GetSurfaceType::<Impl, IMPL_OFFSET>,
            SetDefault::<Impl, IMPL_OFFSET>,
            UseScanLine::<Impl, IMPL_OFFSET>,
            CanUseScanLine::<Impl, IMPL_OFFSET>,
            UseOverlayStretch::<Impl, IMPL_OFFSET>,
            CanUseOverlayStretch::<Impl, IMPL_OFFSET>,
            UseWhenFullScreen::<Impl, IMPL_OFFSET>,
            WillUseFullScreen::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDirectDrawVideo as ::windows::core::Interface>::IID
    }
}
pub trait IDistributorNotifyImpl: Sized {
    fn Stop();
    fn Pause();
    fn Run();
    fn SetSyncSource();
    fn NotifyGraphChange();
}
impl IDistributorNotifyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDistributorNotifyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDistributorNotifyVtbl {
        unsafe extern "system" fn Stop<Impl: IDistributorNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Pause<Impl: IDistributorNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Run<Impl: IDistributorNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tstart: i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSyncSource<Impl: IDistributorNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pclock: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NotifyGraphChange<Impl: IDistributorNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Stop::<Impl, IMPL_OFFSET>, Pause::<Impl, IMPL_OFFSET>, Run::<Impl, IMPL_OFFSET>, SetSyncSource::<Impl, IMPL_OFFSET>, NotifyGraphChange::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDistributorNotify as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IDrawVideoImageImpl: Sized {
    fn DrawVideoImageBegin();
    fn DrawVideoImageEnd();
    fn DrawVideoImageDraw();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl IDrawVideoImageVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDrawVideoImageImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDrawVideoImageVtbl {
        unsafe extern "system" fn DrawVideoImageBegin<Impl: IDrawVideoImageImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DrawVideoImageEnd<Impl: IDrawVideoImageImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DrawVideoImageDraw<Impl: IDrawVideoImageImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, lprcsrc: *const super::super::Foundation::RECT, lprcdst: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, DrawVideoImageBegin::<Impl, IMPL_OFFSET>, DrawVideoImageEnd::<Impl, IMPL_OFFSET>, DrawVideoImageDraw::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDrawVideoImage as ::windows::core::Interface>::IID
    }
}
pub trait IDvbCableDeliverySystemDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetFrequency();
    fn GetFECOuter();
    fn GetModulation();
    fn GetSymbolRate();
    fn GetFECInner();
}
impl IDvbCableDeliverySystemDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbCableDeliverySystemDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbCableDeliverySystemDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbCableDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbCableDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFrequency<Impl: IDvbCableDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFECOuter<Impl: IDvbCableDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModulation<Impl: IDvbCableDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolRate<Impl: IDvbCableDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFECInner<Impl: IDvbCableDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetFrequency::<Impl, IMPL_OFFSET>, GetFECOuter::<Impl, IMPL_OFFSET>, GetModulation::<Impl, IMPL_OFFSET>, GetSymbolRate::<Impl, IMPL_OFFSET>, GetFECInner::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbCableDeliverySystemDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDvbComponentDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetStreamContent();
    fn GetComponentType();
    fn GetComponentTag();
    fn GetLanguageCode();
    fn GetTextW();
}
#[cfg(feature = "Win32_Foundation")]
impl IDvbComponentDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbComponentDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbComponentDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStreamContent<Impl: IDvbComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetComponentType<Impl: IDvbComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetComponentTag<Impl: IDvbComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLanguageCode<Impl: IDvbComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextW<Impl: IDvbComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetStreamContent::<Impl, IMPL_OFFSET>, GetComponentType::<Impl, IMPL_OFFSET>, GetComponentTag::<Impl, IMPL_OFFSET>, GetLanguageCode::<Impl, IMPL_OFFSET>, GetTextW::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbComponentDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbContentDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCountOfRecords();
    fn GetRecordContentNibbles();
    fn GetRecordUserNibbles();
}
impl IDvbContentDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbContentDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbContentDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDvbContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordContentNibbles<Impl: IDvbContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbvallevel1: *mut u8, pbvallevel2: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordUserNibbles<Impl: IDvbContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval1: *mut u8, pbval2: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordContentNibbles::<Impl, IMPL_OFFSET>, GetRecordUserNibbles::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbContentDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbContentIdentifierDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCountOfRecords();
    fn GetRecordCrid();
}
impl IDvbContentIdentifierDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbContentIdentifierDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbContentIdentifierDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbContentIdentifierDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbContentIdentifierDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDvbContentIdentifierDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCrid<Impl: IDvbContentIdentifierDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbtype: *mut u8, pblocation: *mut u8, pblength: *mut u8, ppbbytes: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordCrid::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbContentIdentifierDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbDataBroadcastDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetDataBroadcastID();
    fn GetComponentTag();
    fn GetSelectorLength();
    fn GetSelectorBytes();
    fn GetLangID();
    fn GetTextLength();
    fn GetText();
}
impl IDvbDataBroadcastDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbDataBroadcastDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbDataBroadcastDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbDataBroadcastDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbDataBroadcastDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDataBroadcastID<Impl: IDvbDataBroadcastDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetComponentTag<Impl: IDvbDataBroadcastDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSelectorLength<Impl: IDvbDataBroadcastDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSelectorBytes<Impl: IDvbDataBroadcastDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pblen: *mut u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLangID<Impl: IDvbDataBroadcastDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextLength<Impl: IDvbDataBroadcastDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetText<Impl: IDvbDataBroadcastDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pblen: *mut u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetDataBroadcastID::<Impl, IMPL_OFFSET>, GetComponentTag::<Impl, IMPL_OFFSET>, GetSelectorLength::<Impl, IMPL_OFFSET>, GetSelectorBytes::<Impl, IMPL_OFFSET>, GetLangID::<Impl, IMPL_OFFSET>, GetTextLength::<Impl, IMPL_OFFSET>, GetText::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbDataBroadcastDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbDataBroadcastIDDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetDataBroadcastID();
    fn GetIDSelectorBytes();
}
impl IDvbDataBroadcastIDDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbDataBroadcastIDDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbDataBroadcastIDDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbDataBroadcastIDDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbDataBroadcastIDDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDataBroadcastID<Impl: IDvbDataBroadcastIDDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIDSelectorBytes<Impl: IDvbDataBroadcastIDDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pblen: *mut u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetDataBroadcastID::<Impl, IMPL_OFFSET>, GetIDSelectorBytes::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbDataBroadcastIDDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbDefaultAuthorityDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetDefaultAuthority();
}
impl IDvbDefaultAuthorityDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbDefaultAuthorityDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbDefaultAuthorityDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbDefaultAuthorityDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbDefaultAuthorityDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDefaultAuthority<Impl: IDvbDefaultAuthorityDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pblength: *mut u8, ppbbytes: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetDefaultAuthority::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbDefaultAuthorityDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDvbExtendedEventDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetDescriptorNumber();
    fn GetLastDescriptorNumber();
    fn GetLanguageCode();
    fn GetCountOfRecords();
    fn GetRecordItemW();
    fn GetConcatenatedItemW();
    fn GetTextW();
    fn GetConcatenatedTextW();
    fn GetRecordItemRawBytes();
}
#[cfg(feature = "Win32_Foundation")]
impl IDvbExtendedEventDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbExtendedEventDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbExtendedEventDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbExtendedEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbExtendedEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDescriptorNumber<Impl: IDvbExtendedEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastDescriptorNumber<Impl: IDvbExtendedEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLanguageCode<Impl: IDvbExtendedEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDvbExtendedEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordItemW<Impl: IDvbExtendedEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, convmode: DVB_STRCONV_MODE, pbstrdesc: *mut super::super::Foundation::BSTR, pbstritem: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetConcatenatedItemW<Impl: IDvbExtendedEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfollowingdescriptor: ::windows::core::RawPtr, convmode: DVB_STRCONV_MODE, pbstrdesc: *mut super::super::Foundation::BSTR, pbstritem: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextW<Impl: IDvbExtendedEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetConcatenatedTextW<Impl: IDvbExtendedEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, followingdescriptor: ::windows::core::RawPtr, convmode: DVB_STRCONV_MODE, pbstrtext: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordItemRawBytes<Impl: IDvbExtendedEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, ppbrawitem: *mut *mut u8, pbitemlength: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTag::<Impl, IMPL_OFFSET>,
            GetLength::<Impl, IMPL_OFFSET>,
            GetDescriptorNumber::<Impl, IMPL_OFFSET>,
            GetLastDescriptorNumber::<Impl, IMPL_OFFSET>,
            GetLanguageCode::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordItemW::<Impl, IMPL_OFFSET>,
            GetConcatenatedItemW::<Impl, IMPL_OFFSET>,
            GetTextW::<Impl, IMPL_OFFSET>,
            GetConcatenatedTextW::<Impl, IMPL_OFFSET>,
            GetRecordItemRawBytes::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbExtendedEventDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbFrequencyListDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCodingType();
    fn GetCountOfRecords();
    fn GetRecordCentreFrequency();
}
impl IDvbFrequencyListDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbFrequencyListDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbFrequencyListDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbFrequencyListDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbFrequencyListDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCodingType<Impl: IDvbFrequencyListDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDvbFrequencyListDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCentreFrequency<Impl: IDvbFrequencyListDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCodingType::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordCentreFrequency::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbFrequencyListDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbHDSimulcastLogicalChannelDescriptorImpl: Sized + IDvbLogicalChannelDescriptor2Impl + IDvbLogicalChannelDescriptorImpl {}
impl IDvbHDSimulcastLogicalChannelDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbHDSimulcastLogicalChannelDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbHDSimulcastLogicalChannelDescriptorVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordServiceId::<Impl, IMPL_OFFSET>, GetRecordLogicalChannelNumber::<Impl, IMPL_OFFSET>, GetRecordLogicalChannelAndVisibility::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbHDSimulcastLogicalChannelDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbLinkageDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetTSId();
    fn GetONId();
    fn GetServiceId();
    fn GetLinkageType();
    fn GetPrivateDataLength();
    fn GetPrivateData();
}
impl IDvbLinkageDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbLinkageDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbLinkageDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbLinkageDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbLinkageDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTSId<Impl: IDvbLinkageDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetONId<Impl: IDvbLinkageDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceId<Impl: IDvbLinkageDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLinkageType<Impl: IDvbLinkageDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPrivateDataLength<Impl: IDvbLinkageDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPrivateData<Impl: IDvbLinkageDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pblen: *mut u8, pbdata: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetTSId::<Impl, IMPL_OFFSET>, GetONId::<Impl, IMPL_OFFSET>, GetServiceId::<Impl, IMPL_OFFSET>, GetLinkageType::<Impl, IMPL_OFFSET>, GetPrivateDataLength::<Impl, IMPL_OFFSET>, GetPrivateData::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbLinkageDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDvbLogicalChannel2DescriptorImpl: Sized + IDvbLogicalChannelDescriptor2Impl + IDvbLogicalChannelDescriptorImpl {
    fn GetCountOfLists();
    fn GetListId();
    fn GetListNameW();
    fn GetListCountryCode();
    fn GetListCountOfRecords();
    fn GetListRecordServiceId();
    fn GetListRecordLogicalChannelNumber();
    fn GetListRecordLogicalChannelAndVisibility();
}
#[cfg(feature = "Win32_Foundation")]
impl IDvbLogicalChannel2DescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbLogicalChannel2DescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbLogicalChannel2DescriptorVtbl {
        unsafe extern "system" fn GetCountOfLists<Impl: IDvbLogicalChannel2DescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetListId<Impl: IDvbLogicalChannel2DescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, blistindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetListNameW<Impl: IDvbLogicalChannel2DescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, blistindex: u8, convmode: DVB_STRCONV_MODE, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetListCountryCode<Impl: IDvbLogicalChannel2DescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, blistindex: u8, pszcode: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetListCountOfRecords<Impl: IDvbLogicalChannel2DescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bchannellistindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetListRecordServiceId<Impl: IDvbLogicalChannel2DescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, blistindex: u8, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetListRecordLogicalChannelNumber<Impl: IDvbLogicalChannel2DescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, blistindex: u8, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetListRecordLogicalChannelAndVisibility<Impl: IDvbLogicalChannel2DescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, blistindex: u8, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTag::<Impl, IMPL_OFFSET>,
            GetLength::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordServiceId::<Impl, IMPL_OFFSET>,
            GetRecordLogicalChannelNumber::<Impl, IMPL_OFFSET>,
            GetRecordLogicalChannelAndVisibility::<Impl, IMPL_OFFSET>,
            GetCountOfLists::<Impl, IMPL_OFFSET>,
            GetListId::<Impl, IMPL_OFFSET>,
            GetListNameW::<Impl, IMPL_OFFSET>,
            GetListCountryCode::<Impl, IMPL_OFFSET>,
            GetListCountOfRecords::<Impl, IMPL_OFFSET>,
            GetListRecordServiceId::<Impl, IMPL_OFFSET>,
            GetListRecordLogicalChannelNumber::<Impl, IMPL_OFFSET>,
            GetListRecordLogicalChannelAndVisibility::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbLogicalChannel2Descriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbLogicalChannelDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCountOfRecords();
    fn GetRecordServiceId();
    fn GetRecordLogicalChannelNumber();
}
impl IDvbLogicalChannelDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbLogicalChannelDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbLogicalChannelDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbLogicalChannelDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbLogicalChannelDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDvbLogicalChannelDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordServiceId<Impl: IDvbLogicalChannelDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordLogicalChannelNumber<Impl: IDvbLogicalChannelDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordServiceId::<Impl, IMPL_OFFSET>, GetRecordLogicalChannelNumber::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbLogicalChannelDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbLogicalChannelDescriptor2Impl: Sized + IDvbLogicalChannelDescriptorImpl {
    fn GetRecordLogicalChannelAndVisibility();
}
impl IDvbLogicalChannelDescriptor2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbLogicalChannelDescriptor2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbLogicalChannelDescriptor2Vtbl {
        unsafe extern "system" fn GetRecordLogicalChannelAndVisibility<Impl: IDvbLogicalChannelDescriptor2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordServiceId::<Impl, IMPL_OFFSET>, GetRecordLogicalChannelNumber::<Impl, IMPL_OFFSET>, GetRecordLogicalChannelAndVisibility::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbLogicalChannelDescriptor2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDvbMultilingualServiceNameDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCountOfRecords();
    fn GetRecordLangId();
    fn GetRecordServiceProviderNameW();
    fn GetRecordServiceNameW();
}
#[cfg(feature = "Win32_Foundation")]
impl IDvbMultilingualServiceNameDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbMultilingualServiceNameDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbMultilingualServiceNameDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbMultilingualServiceNameDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbMultilingualServiceNameDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDvbMultilingualServiceNameDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordLangId<Impl: IDvbMultilingualServiceNameDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, ulval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordServiceProviderNameW<Impl: IDvbMultilingualServiceNameDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, convmode: DVB_STRCONV_MODE, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordServiceNameW<Impl: IDvbMultilingualServiceNameDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, convmode: DVB_STRCONV_MODE, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordLangId::<Impl, IMPL_OFFSET>, GetRecordServiceProviderNameW::<Impl, IMPL_OFFSET>, GetRecordServiceNameW::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbMultilingualServiceNameDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDvbNetworkNameDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetNetworkName();
    fn GetNetworkNameW();
}
#[cfg(feature = "Win32_Foundation")]
impl IDvbNetworkNameDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbNetworkNameDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbNetworkNameDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbNetworkNameDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbNetworkNameDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNetworkName<Impl: IDvbNetworkNameDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNetworkNameW<Impl: IDvbNetworkNameDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetNetworkName::<Impl, IMPL_OFFSET>, GetNetworkNameW::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbNetworkNameDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbParentalRatingDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCountOfRecords();
    fn GetRecordRating();
}
impl IDvbParentalRatingDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbParentalRatingDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbParentalRatingDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbParentalRatingDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbParentalRatingDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDvbParentalRatingDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordRating<Impl: IDvbParentalRatingDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pszcountrycode: *mut u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordRating::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbParentalRatingDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbPrivateDataSpecifierDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetPrivateDataSpecifier();
}
impl IDvbPrivateDataSpecifierDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbPrivateDataSpecifierDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbPrivateDataSpecifierDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbPrivateDataSpecifierDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbPrivateDataSpecifierDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPrivateDataSpecifier<Impl: IDvbPrivateDataSpecifierDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetPrivateDataSpecifier::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbPrivateDataSpecifierDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbSatelliteDeliverySystemDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetFrequency();
    fn GetOrbitalPosition();
    fn GetWestEastFlag();
    fn GetPolarization();
    fn GetModulation();
    fn GetSymbolRate();
    fn GetFECInner();
}
impl IDvbSatelliteDeliverySystemDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbSatelliteDeliverySystemDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbSatelliteDeliverySystemDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbSatelliteDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbSatelliteDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFrequency<Impl: IDvbSatelliteDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOrbitalPosition<Impl: IDvbSatelliteDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWestEastFlag<Impl: IDvbSatelliteDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPolarization<Impl: IDvbSatelliteDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModulation<Impl: IDvbSatelliteDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolRate<Impl: IDvbSatelliteDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFECInner<Impl: IDvbSatelliteDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetFrequency::<Impl, IMPL_OFFSET>, GetOrbitalPosition::<Impl, IMPL_OFFSET>, GetWestEastFlag::<Impl, IMPL_OFFSET>, GetPolarization::<Impl, IMPL_OFFSET>, GetModulation::<Impl, IMPL_OFFSET>, GetSymbolRate::<Impl, IMPL_OFFSET>, GetFECInner::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbSatelliteDeliverySystemDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDvbServiceAttributeDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCountOfRecords();
    fn GetRecordServiceId();
    fn GetRecordNumericSelectionFlag();
    fn GetRecordVisibleServiceFlag();
}
#[cfg(feature = "Win32_Foundation")]
impl IDvbServiceAttributeDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbServiceAttributeDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbServiceAttributeDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbServiceAttributeDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbServiceAttributeDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDvbServiceAttributeDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordServiceId<Impl: IDvbServiceAttributeDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordNumericSelectionFlag<Impl: IDvbServiceAttributeDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pfval: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordVisibleServiceFlag<Impl: IDvbServiceAttributeDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pfval: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordServiceId::<Impl, IMPL_OFFSET>, GetRecordNumericSelectionFlag::<Impl, IMPL_OFFSET>, GetRecordVisibleServiceFlag::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbServiceAttributeDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDvbServiceDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetServiceType();
    fn GetServiceProviderName();
    fn GetServiceProviderNameW();
    fn GetServiceName();
    fn GetProcessedServiceName();
    fn GetServiceNameEmphasized();
}
#[cfg(feature = "Win32_Foundation")]
impl IDvbServiceDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbServiceDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbServiceDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceType<Impl: IDvbServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceProviderName<Impl: IDvbServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceProviderNameW<Impl: IDvbServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceName<Impl: IDvbServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessedServiceName<Impl: IDvbServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceNameEmphasized<Impl: IDvbServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetServiceType::<Impl, IMPL_OFFSET>, GetServiceProviderName::<Impl, IMPL_OFFSET>, GetServiceProviderNameW::<Impl, IMPL_OFFSET>, GetServiceName::<Impl, IMPL_OFFSET>, GetProcessedServiceName::<Impl, IMPL_OFFSET>, GetServiceNameEmphasized::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbServiceDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDvbServiceDescriptor2Impl: Sized + IDvbServiceDescriptorImpl {
    fn GetServiceProviderNameW();
    fn GetServiceNameW();
}
#[cfg(feature = "Win32_Foundation")]
impl IDvbServiceDescriptor2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbServiceDescriptor2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbServiceDescriptor2Vtbl {
        unsafe extern "system" fn GetServiceProviderNameW<Impl: IDvbServiceDescriptor2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceNameW<Impl: IDvbServiceDescriptor2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTag::<Impl, IMPL_OFFSET>,
            GetLength::<Impl, IMPL_OFFSET>,
            GetServiceType::<Impl, IMPL_OFFSET>,
            GetServiceProviderName::<Impl, IMPL_OFFSET>,
            GetServiceProviderNameW::<Impl, IMPL_OFFSET>,
            GetServiceName::<Impl, IMPL_OFFSET>,
            GetProcessedServiceName::<Impl, IMPL_OFFSET>,
            GetServiceNameEmphasized::<Impl, IMPL_OFFSET>,
            GetServiceProviderNameW::<Impl, IMPL_OFFSET>,
            GetServiceNameW::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbServiceDescriptor2 as ::windows::core::Interface>::IID
    }
}
pub trait IDvbServiceListDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCountOfRecords();
    fn GetRecordServiceId();
    fn GetRecordServiceType();
}
impl IDvbServiceListDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbServiceListDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbServiceListDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbServiceListDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbServiceListDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDvbServiceListDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordServiceId<Impl: IDvbServiceListDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordServiceType<Impl: IDvbServiceListDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordServiceId::<Impl, IMPL_OFFSET>, GetRecordServiceType::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbServiceListDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDvbShortEventDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetLanguageCode();
    fn GetEventNameW();
    fn GetTextW();
}
#[cfg(feature = "Win32_Foundation")]
impl IDvbShortEventDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbShortEventDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbShortEventDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbShortEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbShortEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLanguageCode<Impl: IDvbShortEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventNameW<Impl: IDvbShortEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextW<Impl: IDvbShortEventDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetLanguageCode::<Impl, IMPL_OFFSET>, GetEventNameW::<Impl, IMPL_OFFSET>, GetTextW::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbShortEventDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbSiParserImpl: Sized {
    fn Initialize();
    fn GetPAT();
    fn GetCAT();
    fn GetPMT();
    fn GetTSDT();
    fn GetNIT();
    fn GetSDT();
    fn GetEIT();
    fn GetBAT();
    fn GetRST();
    fn GetST();
    fn GetTDT();
    fn GetTOT();
    fn GetDIT();
    fn GetSIT();
}
impl IDvbSiParserVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbSiParserImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbSiParserVtbl {
        unsafe extern "system" fn Initialize<Impl: IDvbSiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkmpeg2data: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPAT<Impl: IDvbSiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pppat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCAT<Impl: IDvbSiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppcat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPMT<Impl: IDvbSiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pid: u16, pwprogramnumber: *const u16, pppmt: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTSDT<Impl: IDvbSiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptsdt: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNIT<Impl: IDvbSiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tableid: u8, pwnetworkid: *const u16, ppnit: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSDT<Impl: IDvbSiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tableid: u8, pwtransportstreamid: *const u16, ppsdt: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEIT<Impl: IDvbSiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tableid: u8, pwserviceid: *const u16, ppeit: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBAT<Impl: IDvbSiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwbouquetid: *const u16, ppbat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRST<Impl: IDvbSiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtimeout: u32, pprst: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetST<Impl: IDvbSiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pid: u16, dwtimeout: u32, ppst: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTDT<Impl: IDvbSiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptdt: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTOT<Impl: IDvbSiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptot: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDIT<Impl: IDvbSiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppdit: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSIT<Impl: IDvbSiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppsit: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetPAT::<Impl, IMPL_OFFSET>,
            GetCAT::<Impl, IMPL_OFFSET>,
            GetPMT::<Impl, IMPL_OFFSET>,
            GetTSDT::<Impl, IMPL_OFFSET>,
            GetNIT::<Impl, IMPL_OFFSET>,
            GetSDT::<Impl, IMPL_OFFSET>,
            GetEIT::<Impl, IMPL_OFFSET>,
            GetBAT::<Impl, IMPL_OFFSET>,
            GetRST::<Impl, IMPL_OFFSET>,
            GetST::<Impl, IMPL_OFFSET>,
            GetTDT::<Impl, IMPL_OFFSET>,
            GetTOT::<Impl, IMPL_OFFSET>,
            GetDIT::<Impl, IMPL_OFFSET>,
            GetSIT::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbSiParser as ::windows::core::Interface>::IID
    }
}
pub trait IDvbSiParser2Impl: Sized + IDvbSiParserImpl {
    fn GetEIT2();
}
impl IDvbSiParser2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbSiParser2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbSiParser2Vtbl {
        unsafe extern "system" fn GetEIT2<Impl: IDvbSiParser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tableid: u8, pwserviceid: *const u16, pbsegment: *const u8, ppeit: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetPAT::<Impl, IMPL_OFFSET>,
            GetCAT::<Impl, IMPL_OFFSET>,
            GetPMT::<Impl, IMPL_OFFSET>,
            GetTSDT::<Impl, IMPL_OFFSET>,
            GetNIT::<Impl, IMPL_OFFSET>,
            GetSDT::<Impl, IMPL_OFFSET>,
            GetEIT::<Impl, IMPL_OFFSET>,
            GetBAT::<Impl, IMPL_OFFSET>,
            GetRST::<Impl, IMPL_OFFSET>,
            GetST::<Impl, IMPL_OFFSET>,
            GetTDT::<Impl, IMPL_OFFSET>,
            GetTOT::<Impl, IMPL_OFFSET>,
            GetDIT::<Impl, IMPL_OFFSET>,
            GetSIT::<Impl, IMPL_OFFSET>,
            GetEIT2::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbSiParser2 as ::windows::core::Interface>::IID
    }
}
pub trait IDvbSubtitlingDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCountOfRecords();
    fn GetRecordLangId();
    fn GetRecordSubtitlingType();
    fn GetRecordCompositionPageID();
    fn GetRecordAncillaryPageID();
}
impl IDvbSubtitlingDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbSubtitlingDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbSubtitlingDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbSubtitlingDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbSubtitlingDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDvbSubtitlingDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordLangId<Impl: IDvbSubtitlingDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pulval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordSubtitlingType<Impl: IDvbSubtitlingDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCompositionPageID<Impl: IDvbSubtitlingDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordAncillaryPageID<Impl: IDvbSubtitlingDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordLangId::<Impl, IMPL_OFFSET>, GetRecordSubtitlingType::<Impl, IMPL_OFFSET>, GetRecordCompositionPageID::<Impl, IMPL_OFFSET>, GetRecordAncillaryPageID::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbSubtitlingDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbTeletextDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCountOfRecords();
    fn GetRecordLangId();
    fn GetRecordTeletextType();
    fn GetRecordMagazineNumber();
    fn GetRecordPageNumber();
}
impl IDvbTeletextDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbTeletextDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbTeletextDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbTeletextDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbTeletextDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IDvbTeletextDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordLangId<Impl: IDvbTeletextDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pulval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordTeletextType<Impl: IDvbTeletextDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordMagazineNumber<Impl: IDvbTeletextDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordPageNumber<Impl: IDvbTeletextDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordLangId::<Impl, IMPL_OFFSET>, GetRecordTeletextType::<Impl, IMPL_OFFSET>, GetRecordMagazineNumber::<Impl, IMPL_OFFSET>, GetRecordPageNumber::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbTeletextDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbTerrestrial2DeliverySystemDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetTagExtension();
    fn GetCentreFrequency();
    fn GetPLPId();
    fn GetT2SystemId();
    fn GetMultipleInputMode();
    fn GetBandwidth();
    fn GetGuardInterval();
    fn GetTransmissionMode();
    fn GetCellId();
    fn GetOtherFrequencyFlag();
    fn GetTFSFlag();
}
impl IDvbTerrestrial2DeliverySystemDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbTerrestrial2DeliverySystemDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbTerrestrial2DeliverySystemDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbTerrestrial2DeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbTerrestrial2DeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTagExtension<Impl: IDvbTerrestrial2DeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCentreFrequency<Impl: IDvbTerrestrial2DeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPLPId<Impl: IDvbTerrestrial2DeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetT2SystemId<Impl: IDvbTerrestrial2DeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMultipleInputMode<Impl: IDvbTerrestrial2DeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBandwidth<Impl: IDvbTerrestrial2DeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetGuardInterval<Impl: IDvbTerrestrial2DeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTransmissionMode<Impl: IDvbTerrestrial2DeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCellId<Impl: IDvbTerrestrial2DeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOtherFrequencyFlag<Impl: IDvbTerrestrial2DeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTFSFlag<Impl: IDvbTerrestrial2DeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTag::<Impl, IMPL_OFFSET>,
            GetLength::<Impl, IMPL_OFFSET>,
            GetTagExtension::<Impl, IMPL_OFFSET>,
            GetCentreFrequency::<Impl, IMPL_OFFSET>,
            GetPLPId::<Impl, IMPL_OFFSET>,
            GetT2SystemId::<Impl, IMPL_OFFSET>,
            GetMultipleInputMode::<Impl, IMPL_OFFSET>,
            GetBandwidth::<Impl, IMPL_OFFSET>,
            GetGuardInterval::<Impl, IMPL_OFFSET>,
            GetTransmissionMode::<Impl, IMPL_OFFSET>,
            GetCellId::<Impl, IMPL_OFFSET>,
            GetOtherFrequencyFlag::<Impl, IMPL_OFFSET>,
            GetTFSFlag::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbTerrestrial2DeliverySystemDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvbTerrestrialDeliverySystemDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCentreFrequency();
    fn GetBandwidth();
    fn GetConstellation();
    fn GetHierarchyInformation();
    fn GetCodeRateHPStream();
    fn GetCodeRateLPStream();
    fn GetGuardInterval();
    fn GetTransmissionMode();
    fn GetOtherFrequencyFlag();
}
impl IDvbTerrestrialDeliverySystemDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvbTerrestrialDeliverySystemDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvbTerrestrialDeliverySystemDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IDvbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IDvbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCentreFrequency<Impl: IDvbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBandwidth<Impl: IDvbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetConstellation<Impl: IDvbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetHierarchyInformation<Impl: IDvbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCodeRateHPStream<Impl: IDvbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCodeRateLPStream<Impl: IDvbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetGuardInterval<Impl: IDvbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTransmissionMode<Impl: IDvbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOtherFrequencyFlag<Impl: IDvbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTag::<Impl, IMPL_OFFSET>,
            GetLength::<Impl, IMPL_OFFSET>,
            GetCentreFrequency::<Impl, IMPL_OFFSET>,
            GetBandwidth::<Impl, IMPL_OFFSET>,
            GetConstellation::<Impl, IMPL_OFFSET>,
            GetHierarchyInformation::<Impl, IMPL_OFFSET>,
            GetCodeRateHPStream::<Impl, IMPL_OFFSET>,
            GetCodeRateLPStream::<Impl, IMPL_OFFSET>,
            GetGuardInterval::<Impl, IMPL_OFFSET>,
            GetTransmissionMode::<Impl, IMPL_OFFSET>,
            GetOtherFrequencyFlag::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvbTerrestrialDeliverySystemDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IDvdCmdImpl: Sized {
    fn WaitForStart();
    fn WaitForEnd();
}
impl IDvdCmdVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvdCmdImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvdCmdVtbl {
        unsafe extern "system" fn WaitForStart<Impl: IDvdCmdImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForEnd<Impl: IDvdCmdImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, WaitForStart::<Impl, IMPL_OFFSET>, WaitForEnd::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvdCmd as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDvdControlImpl: Sized {
    fn TitlePlay();
    fn ChapterPlay();
    fn TimePlay();
    fn StopForResume();
    fn GoUp();
    fn TimeSearch();
    fn ChapterSearch();
    fn PrevPGSearch();
    fn TopPGSearch();
    fn NextPGSearch();
    fn ForwardScan();
    fn BackwardScan();
    fn MenuCall();
    fn Resume();
    fn UpperButtonSelect();
    fn LowerButtonSelect();
    fn LeftButtonSelect();
    fn RightButtonSelect();
    fn ButtonActivate();
    fn ButtonSelectAndActivate();
    fn StillOff();
    fn PauseOn();
    fn PauseOff();
    fn MenuLanguageSelect();
    fn AudioStreamChange();
    fn SubpictureStreamChange();
    fn AngleChange();
    fn ParentalLevelSelect();
    fn ParentalCountrySelect();
    fn KaraokeAudioPresentationModeChange();
    fn VideoModePreferrence();
    fn SetRoot();
    fn MouseActivate();
    fn MouseSelect();
    fn ChapterPlayAutoStop();
}
#[cfg(feature = "Win32_Foundation")]
impl IDvdControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvdControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvdControlVtbl {
        unsafe extern "system" fn TitlePlay<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultitle: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChapterPlay<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultitle: u32, ulchapter: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TimePlay<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultitle: u32, bcdtime: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StopForResume<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GoUp<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TimeSearch<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bcdtime: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChapterSearch<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulchapter: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PrevPGSearch<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TopPGSearch<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NextPGSearch<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ForwardScan<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwspeed: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BackwardScan<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwspeed: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MenuCall<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, menuid: DVD_MENU_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Resume<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UpperButtonSelect<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LowerButtonSelect<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LeftButtonSelect<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RightButtonSelect<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ButtonActivate<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ButtonSelectAndActivate<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulbutton: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StillOff<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PauseOn<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PauseOff<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MenuLanguageSelect<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, language: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AudioStreamChange<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulaudio: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SubpictureStreamChange<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulsubpicture: u32, bdisplay: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AngleChange<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulangle: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ParentalLevelSelect<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulparentallevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ParentalCountrySelect<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, wcountry: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn KaraokeAudioPresentationModeChange<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulmode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VideoModePreferrence<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulpreferreddisplaymode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRoot<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszpath: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MouseActivate<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, point: super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MouseSelect<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, point: super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChapterPlayAutoStop<Impl: IDvdControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultitle: u32, ulchapter: u32, ulchapterstoplay: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            TitlePlay::<Impl, IMPL_OFFSET>,
            ChapterPlay::<Impl, IMPL_OFFSET>,
            TimePlay::<Impl, IMPL_OFFSET>,
            StopForResume::<Impl, IMPL_OFFSET>,
            GoUp::<Impl, IMPL_OFFSET>,
            TimeSearch::<Impl, IMPL_OFFSET>,
            ChapterSearch::<Impl, IMPL_OFFSET>,
            PrevPGSearch::<Impl, IMPL_OFFSET>,
            TopPGSearch::<Impl, IMPL_OFFSET>,
            NextPGSearch::<Impl, IMPL_OFFSET>,
            ForwardScan::<Impl, IMPL_OFFSET>,
            BackwardScan::<Impl, IMPL_OFFSET>,
            MenuCall::<Impl, IMPL_OFFSET>,
            Resume::<Impl, IMPL_OFFSET>,
            UpperButtonSelect::<Impl, IMPL_OFFSET>,
            LowerButtonSelect::<Impl, IMPL_OFFSET>,
            LeftButtonSelect::<Impl, IMPL_OFFSET>,
            RightButtonSelect::<Impl, IMPL_OFFSET>,
            ButtonActivate::<Impl, IMPL_OFFSET>,
            ButtonSelectAndActivate::<Impl, IMPL_OFFSET>,
            StillOff::<Impl, IMPL_OFFSET>,
            PauseOn::<Impl, IMPL_OFFSET>,
            PauseOff::<Impl, IMPL_OFFSET>,
            MenuLanguageSelect::<Impl, IMPL_OFFSET>,
            AudioStreamChange::<Impl, IMPL_OFFSET>,
            SubpictureStreamChange::<Impl, IMPL_OFFSET>,
            AngleChange::<Impl, IMPL_OFFSET>,
            ParentalLevelSelect::<Impl, IMPL_OFFSET>,
            ParentalCountrySelect::<Impl, IMPL_OFFSET>,
            KaraokeAudioPresentationModeChange::<Impl, IMPL_OFFSET>,
            VideoModePreferrence::<Impl, IMPL_OFFSET>,
            SetRoot::<Impl, IMPL_OFFSET>,
            MouseActivate::<Impl, IMPL_OFFSET>,
            MouseSelect::<Impl, IMPL_OFFSET>,
            ChapterPlayAutoStop::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvdControl as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDvdControl2Impl: Sized {
    fn PlayTitle();
    fn PlayChapterInTitle();
    fn PlayAtTimeInTitle();
    fn Stop();
    fn ReturnFromSubmenu();
    fn PlayAtTime();
    fn PlayChapter();
    fn PlayPrevChapter();
    fn ReplayChapter();
    fn PlayNextChapter();
    fn PlayForwards();
    fn PlayBackwards();
    fn ShowMenu();
    fn Resume();
    fn SelectRelativeButton();
    fn ActivateButton();
    fn SelectButton();
    fn SelectAndActivateButton();
    fn StillOff();
    fn Pause();
    fn SelectAudioStream();
    fn SelectSubpictureStream();
    fn SetSubpictureState();
    fn SelectAngle();
    fn SelectParentalLevel();
    fn SelectParentalCountry();
    fn SelectKaraokeAudioPresentationMode();
    fn SelectVideoModePreference();
    fn SetDVDDirectory();
    fn ActivateAtPosition();
    fn SelectAtPosition();
    fn PlayChaptersAutoStop();
    fn AcceptParentalLevelChange();
    fn SetOption();
    fn SetState();
    fn PlayPeriodInTitleAutoStop();
    fn SetGPRM();
    fn SelectDefaultMenuLanguage();
    fn SelectDefaultAudioLanguage();
    fn SelectDefaultSubpictureLanguage();
}
#[cfg(feature = "Win32_Foundation")]
impl IDvdControl2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvdControl2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvdControl2Vtbl {
        unsafe extern "system" fn PlayTitle<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultitle: u32, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayChapterInTitle<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultitle: u32, ulchapter: u32, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayAtTimeInTitle<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultitle: u32, pstarttime: *mut DVD_HMSF_TIMECODE, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Stop<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReturnFromSubmenu<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayAtTime<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptime: *mut DVD_HMSF_TIMECODE, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayChapter<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulchapter: u32, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayPrevChapter<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReplayChapter<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayNextChapter<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayForwards<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dspeed: f64, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayBackwards<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dspeed: f64, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ShowMenu<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, menuid: DVD_MENU_ID, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Resume<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectRelativeButton<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buttondir: DVD_RELATIVE_BUTTON) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ActivateButton<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectButton<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulbutton: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectAndActivateButton<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulbutton: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StillOff<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Pause<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstate: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectAudioStream<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulaudio: u32, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectSubpictureStream<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulsubpicture: u32, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSubpictureState<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstate: super::super::Foundation::BOOL, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectAngle<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulangle: u32, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectParentalLevel<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulparentallevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectParentalCountry<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bcountry: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectKaraokeAudioPresentationMode<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulmode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectVideoModePreference<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulpreferreddisplaymode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDVDDirectory<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszwpath: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ActivateAtPosition<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, point: super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectAtPosition<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, point: super::super::Foundation::POINT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayChaptersAutoStop<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultitle: u32, ulchapter: u32, ulchapterstoplay: u32, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AcceptParentalLevelChange<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, baccept: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOption<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flag: DVD_OPTION_FLAG, fstate: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetState<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstate: ::windows::core::RawPtr, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayPeriodInTitleAutoStop<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultitle: u32, pstarttime: *mut DVD_HMSF_TIMECODE, pendtime: *mut DVD_HMSF_TIMECODE, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetGPRM<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulindex: u32, wvalue: u16, dwflags: u32, ppcmd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectDefaultMenuLanguage<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, language: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectDefaultAudioLanguage<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, language: u32, audioextension: DVD_AUDIO_LANG_EXT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectDefaultSubpictureLanguage<Impl: IDvdControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, language: u32, subpictureextension: DVD_SUBPICTURE_LANG_EXT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            PlayTitle::<Impl, IMPL_OFFSET>,
            PlayChapterInTitle::<Impl, IMPL_OFFSET>,
            PlayAtTimeInTitle::<Impl, IMPL_OFFSET>,
            Stop::<Impl, IMPL_OFFSET>,
            ReturnFromSubmenu::<Impl, IMPL_OFFSET>,
            PlayAtTime::<Impl, IMPL_OFFSET>,
            PlayChapter::<Impl, IMPL_OFFSET>,
            PlayPrevChapter::<Impl, IMPL_OFFSET>,
            ReplayChapter::<Impl, IMPL_OFFSET>,
            PlayNextChapter::<Impl, IMPL_OFFSET>,
            PlayForwards::<Impl, IMPL_OFFSET>,
            PlayBackwards::<Impl, IMPL_OFFSET>,
            ShowMenu::<Impl, IMPL_OFFSET>,
            Resume::<Impl, IMPL_OFFSET>,
            SelectRelativeButton::<Impl, IMPL_OFFSET>,
            ActivateButton::<Impl, IMPL_OFFSET>,
            SelectButton::<Impl, IMPL_OFFSET>,
            SelectAndActivateButton::<Impl, IMPL_OFFSET>,
            StillOff::<Impl, IMPL_OFFSET>,
            Pause::<Impl, IMPL_OFFSET>,
            SelectAudioStream::<Impl, IMPL_OFFSET>,
            SelectSubpictureStream::<Impl, IMPL_OFFSET>,
            SetSubpictureState::<Impl, IMPL_OFFSET>,
            SelectAngle::<Impl, IMPL_OFFSET>,
            SelectParentalLevel::<Impl, IMPL_OFFSET>,
            SelectParentalCountry::<Impl, IMPL_OFFSET>,
            SelectKaraokeAudioPresentationMode::<Impl, IMPL_OFFSET>,
            SelectVideoModePreference::<Impl, IMPL_OFFSET>,
            SetDVDDirectory::<Impl, IMPL_OFFSET>,
            ActivateAtPosition::<Impl, IMPL_OFFSET>,
            SelectAtPosition::<Impl, IMPL_OFFSET>,
            PlayChaptersAutoStop::<Impl, IMPL_OFFSET>,
            AcceptParentalLevelChange::<Impl, IMPL_OFFSET>,
            SetOption::<Impl, IMPL_OFFSET>,
            SetState::<Impl, IMPL_OFFSET>,
            PlayPeriodInTitleAutoStop::<Impl, IMPL_OFFSET>,
            SetGPRM::<Impl, IMPL_OFFSET>,
            SelectDefaultMenuLanguage::<Impl, IMPL_OFFSET>,
            SelectDefaultAudioLanguage::<Impl, IMPL_OFFSET>,
            SelectDefaultSubpictureLanguage::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvdControl2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDvdGraphBuilderImpl: Sized {
    fn GetFiltergraph();
    fn GetDvdInterface();
    fn RenderDvdVideoVolume();
}
#[cfg(feature = "Win32_Foundation")]
impl IDvdGraphBuilderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvdGraphBuilderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvdGraphBuilderVtbl {
        unsafe extern "system" fn GetFiltergraph<Impl: IDvdGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppgb: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDvdInterface<Impl: IDvdGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppvif: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RenderDvdVideoVolume<Impl: IDvdGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpcwszpathname: super::super::Foundation::PWSTR, dwflags: u32, pstatus: *mut AM_DVD_RENDERSTATUS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetFiltergraph::<Impl, IMPL_OFFSET>, GetDvdInterface::<Impl, IMPL_OFFSET>, RenderDvdVideoVolume::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvdGraphBuilder as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDvdInfoImpl: Sized {
    fn GetCurrentDomain();
    fn GetCurrentLocation();
    fn GetTotalTitleTime();
    fn GetCurrentButton();
    fn GetCurrentAngle();
    fn GetCurrentAudio();
    fn GetCurrentSubpicture();
    fn GetCurrentUOPS();
    fn GetAllSPRMs();
    fn GetAllGPRMs();
    fn GetAudioLanguage();
    fn GetSubpictureLanguage();
    fn GetTitleAttributes();
    fn GetVMGAttributes();
    fn GetCurrentVideoAttributes();
    fn GetCurrentAudioAttributes();
    fn GetCurrentSubpictureAttributes();
    fn GetCurrentVolumeInfo();
    fn GetDVDTextInfo();
    fn GetPlayerParentalLevel();
    fn GetNumberOfChapters();
    fn GetTitleParentalLevels();
    fn GetRoot();
}
#[cfg(feature = "Win32_Foundation")]
impl IDvdInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvdInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvdInfoVtbl {
        unsafe extern "system" fn GetCurrentDomain<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdomain: *mut DVD_DOMAIN) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentLocation<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plocation: *mut DVD_PLAYBACK_LOCATION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTotalTitleTime<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pultotaltime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentButton<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulbuttonsavailable: *mut u32, pulcurrentbutton: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentAngle<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulanglesavailable: *mut u32, pulcurrentangle: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentAudio<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulstreamsavailable: *mut u32, pulcurrentstream: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSubpicture<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulstreamsavailable: *mut u32, pulcurrentstream: *mut u32, pisdisabled: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentUOPS<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, puop: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAllSPRMs<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pregisterarray: *mut *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAllGPRMs<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pregisterarray: *mut *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAudioLanguage<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulstream: u32, planguage: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSubpictureLanguage<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulstream: u32, planguage: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTitleAttributes<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultitle: u32, patr: *mut DVD_ATR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVMGAttributes<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, patr: *mut DVD_ATR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentVideoAttributes<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, patr: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentAudioAttributes<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, patr: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSubpictureAttributes<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, patr: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentVolumeInfo<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulnumofvol: *mut u32, pulthisvolnum: *mut u32, pside: *mut DVD_DISC_SIDE, pulnumoftitles: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDVDTextInfo<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptextmanager: *mut u8, ulbufsize: u32, pulactualsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPlayerParentalLevel<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulparentallevel: *mut u32, pulcountrycode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberOfChapters<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultitle: u32, pulnumberofchapters: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTitleParentalLevels<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultitle: u32, pulparentallevels: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRoot<Impl: IDvdInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, proot: super::super::Foundation::PSTR, ulbufsize: u32, pulactualsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetCurrentDomain::<Impl, IMPL_OFFSET>,
            GetCurrentLocation::<Impl, IMPL_OFFSET>,
            GetTotalTitleTime::<Impl, IMPL_OFFSET>,
            GetCurrentButton::<Impl, IMPL_OFFSET>,
            GetCurrentAngle::<Impl, IMPL_OFFSET>,
            GetCurrentAudio::<Impl, IMPL_OFFSET>,
            GetCurrentSubpicture::<Impl, IMPL_OFFSET>,
            GetCurrentUOPS::<Impl, IMPL_OFFSET>,
            GetAllSPRMs::<Impl, IMPL_OFFSET>,
            GetAllGPRMs::<Impl, IMPL_OFFSET>,
            GetAudioLanguage::<Impl, IMPL_OFFSET>,
            GetSubpictureLanguage::<Impl, IMPL_OFFSET>,
            GetTitleAttributes::<Impl, IMPL_OFFSET>,
            GetVMGAttributes::<Impl, IMPL_OFFSET>,
            GetCurrentVideoAttributes::<Impl, IMPL_OFFSET>,
            GetCurrentAudioAttributes::<Impl, IMPL_OFFSET>,
            GetCurrentSubpictureAttributes::<Impl, IMPL_OFFSET>,
            GetCurrentVolumeInfo::<Impl, IMPL_OFFSET>,
            GetDVDTextInfo::<Impl, IMPL_OFFSET>,
            GetPlayerParentalLevel::<Impl, IMPL_OFFSET>,
            GetNumberOfChapters::<Impl, IMPL_OFFSET>,
            GetTitleParentalLevels::<Impl, IMPL_OFFSET>,
            GetRoot::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvdInfo as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDvdInfo2Impl: Sized {
    fn GetCurrentDomain();
    fn GetCurrentLocation();
    fn GetTotalTitleTime();
    fn GetCurrentButton();
    fn GetCurrentAngle();
    fn GetCurrentAudio();
    fn GetCurrentSubpicture();
    fn GetCurrentUOPS();
    fn GetAllSPRMs();
    fn GetAllGPRMs();
    fn GetAudioLanguage();
    fn GetSubpictureLanguage();
    fn GetTitleAttributes();
    fn GetVMGAttributes();
    fn GetCurrentVideoAttributes();
    fn GetAudioAttributes();
    fn GetKaraokeAttributes();
    fn GetSubpictureAttributes();
    fn GetDVDVolumeInfo();
    fn GetDVDTextNumberOfLanguages();
    fn GetDVDTextLanguageInfo();
    fn GetDVDTextStringAsNative();
    fn GetDVDTextStringAsUnicode();
    fn GetPlayerParentalLevel();
    fn GetNumberOfChapters();
    fn GetTitleParentalLevels();
    fn GetDVDDirectory();
    fn IsAudioStreamEnabled();
    fn GetDiscID();
    fn GetState();
    fn GetMenuLanguages();
    fn GetButtonAtPosition();
    fn GetCmdFromEvent();
    fn GetDefaultMenuLanguage();
    fn GetDefaultAudioLanguage();
    fn GetDefaultSubpictureLanguage();
    fn GetDecoderCaps();
    fn GetButtonRect();
    fn IsSubpictureStreamEnabled();
}
#[cfg(feature = "Win32_Foundation")]
impl IDvdInfo2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvdInfo2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvdInfo2Vtbl {
        unsafe extern "system" fn GetCurrentDomain<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdomain: *mut DVD_DOMAIN) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentLocation<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plocation: *mut DVD_PLAYBACK_LOCATION2) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTotalTitleTime<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptotaltime: *mut DVD_HMSF_TIMECODE, ultimecodeflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentButton<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulbuttonsavailable: *mut u32, pulcurrentbutton: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentAngle<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulanglesavailable: *mut u32, pulcurrentangle: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentAudio<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulstreamsavailable: *mut u32, pulcurrentstream: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSubpicture<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulstreamsavailable: *mut u32, pulcurrentstream: *mut u32, pbisdisabled: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentUOPS<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, puluops: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAllSPRMs<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pregisterarray: *mut *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAllGPRMs<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pregisterarray: *mut *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAudioLanguage<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulstream: u32, planguage: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSubpictureLanguage<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulstream: u32, planguage: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTitleAttributes<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultitle: u32, pmenu: *mut DVD_MenuAttributes, ptitle: *mut DVD_TitleAttributes) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVMGAttributes<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, patr: *mut DVD_MenuAttributes) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentVideoAttributes<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, patr: *mut DVD_VideoAttributes) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAudioAttributes<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulstream: u32, patr: *mut DVD_AudioAttributes) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKaraokeAttributes<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulstream: u32, pattributes: *mut DVD_KaraokeAttributes) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSubpictureAttributes<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulstream: u32, patr: *mut DVD_SubpictureAttributes) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDVDVolumeInfo<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulnumofvolumes: *mut u32, pulvolume: *mut u32, pside: *mut DVD_DISC_SIDE, pulnumoftitles: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDVDTextNumberOfLanguages<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulnumoflangs: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDVDTextLanguageInfo<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ullangindex: u32, pulnumofstrings: *mut u32, plangcode: *mut u32, pbcharacterset: *mut DVD_TextCharSet) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDVDTextStringAsNative<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ullangindex: u32, ulstringindex: u32, pbbuffer: *mut u8, ulmaxbuffersize: u32, pulactualsize: *mut u32, ptype: *mut DVD_TextStringType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDVDTextStringAsUnicode<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ullangindex: u32, ulstringindex: u32, pchwbuffer: super::super::Foundation::PWSTR, ulmaxbuffersize: u32, pulactualsize: *mut u32, ptype: *mut DVD_TextStringType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPlayerParentalLevel<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulparentallevel: *mut u32, pbcountrycode: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberOfChapters<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultitle: u32, pulnumofchapters: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTitleParentalLevels<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ultitle: u32, pulparentallevels: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDVDDirectory<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszwpath: super::super::Foundation::PWSTR, ulmaxsize: u32, pulactualsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsAudioStreamEnabled<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulstreamnum: u32, pbenabled: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDiscID<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszwpath: super::super::Foundation::PWSTR, pulldiscid: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetState<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstatedata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMenuLanguages<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, planguages: *mut u32, ulmaxlanguages: u32, pulactuallanguages: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetButtonAtPosition<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, point: super::super::Foundation::POINT, pulbuttonindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCmdFromEvent<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lparam1: isize, pcmdobj: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDefaultMenuLanguage<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, planguage: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDefaultAudioLanguage<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, planguage: *mut u32, paudioextension: *mut DVD_AUDIO_LANG_EXT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDefaultSubpictureLanguage<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, planguage: *mut u32, psubpictureextension: *mut DVD_SUBPICTURE_LANG_EXT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDecoderCaps<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcaps: *mut DVD_DECODER_CAPS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetButtonRect<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulbutton: u32, prect: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsSubpictureStreamEnabled<Impl: IDvdInfo2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulstreamnum: u32, pbenabled: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetCurrentDomain::<Impl, IMPL_OFFSET>,
            GetCurrentLocation::<Impl, IMPL_OFFSET>,
            GetTotalTitleTime::<Impl, IMPL_OFFSET>,
            GetCurrentButton::<Impl, IMPL_OFFSET>,
            GetCurrentAngle::<Impl, IMPL_OFFSET>,
            GetCurrentAudio::<Impl, IMPL_OFFSET>,
            GetCurrentSubpicture::<Impl, IMPL_OFFSET>,
            GetCurrentUOPS::<Impl, IMPL_OFFSET>,
            GetAllSPRMs::<Impl, IMPL_OFFSET>,
            GetAllGPRMs::<Impl, IMPL_OFFSET>,
            GetAudioLanguage::<Impl, IMPL_OFFSET>,
            GetSubpictureLanguage::<Impl, IMPL_OFFSET>,
            GetTitleAttributes::<Impl, IMPL_OFFSET>,
            GetVMGAttributes::<Impl, IMPL_OFFSET>,
            GetCurrentVideoAttributes::<Impl, IMPL_OFFSET>,
            GetAudioAttributes::<Impl, IMPL_OFFSET>,
            GetKaraokeAttributes::<Impl, IMPL_OFFSET>,
            GetSubpictureAttributes::<Impl, IMPL_OFFSET>,
            GetDVDVolumeInfo::<Impl, IMPL_OFFSET>,
            GetDVDTextNumberOfLanguages::<Impl, IMPL_OFFSET>,
            GetDVDTextLanguageInfo::<Impl, IMPL_OFFSET>,
            GetDVDTextStringAsNative::<Impl, IMPL_OFFSET>,
            GetDVDTextStringAsUnicode::<Impl, IMPL_OFFSET>,
            GetPlayerParentalLevel::<Impl, IMPL_OFFSET>,
            GetNumberOfChapters::<Impl, IMPL_OFFSET>,
            GetTitleParentalLevels::<Impl, IMPL_OFFSET>,
            GetDVDDirectory::<Impl, IMPL_OFFSET>,
            IsAudioStreamEnabled::<Impl, IMPL_OFFSET>,
            GetDiscID::<Impl, IMPL_OFFSET>,
            GetState::<Impl, IMPL_OFFSET>,
            GetMenuLanguages::<Impl, IMPL_OFFSET>,
            GetButtonAtPosition::<Impl, IMPL_OFFSET>,
            GetCmdFromEvent::<Impl, IMPL_OFFSET>,
            GetDefaultMenuLanguage::<Impl, IMPL_OFFSET>,
            GetDefaultAudioLanguage::<Impl, IMPL_OFFSET>,
            GetDefaultSubpictureLanguage::<Impl, IMPL_OFFSET>,
            GetDecoderCaps::<Impl, IMPL_OFFSET>,
            GetButtonRect::<Impl, IMPL_OFFSET>,
            IsSubpictureStreamEnabled::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvdInfo2 as ::windows::core::Interface>::IID
    }
}
pub trait IDvdStateImpl: Sized {
    fn GetDiscID();
    fn GetParentalLevel();
}
impl IDvdStateVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDvdStateImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDvdStateVtbl {
        unsafe extern "system" fn GetDiscID<Impl: IDvdStateImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulluniqueid: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParentalLevel<Impl: IDvdStateImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulparentallevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetDiscID::<Impl, IMPL_OFFSET>, GetParentalLevel::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDvdState as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IESCloseMmiEventImpl: Sized + IESEventImpl {
    fn GetDialogNumber();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IESCloseMmiEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IESCloseMmiEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IESCloseMmiEventVtbl {
        unsafe extern "system" fn GetDialogNumber<Impl: IESCloseMmiEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdialognumber: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetEventId::<Impl, IMPL_OFFSET>, GetEventType::<Impl, IMPL_OFFSET>, SetCompletionStatus::<Impl, IMPL_OFFSET>, GetData::<Impl, IMPL_OFFSET>, GetStringData::<Impl, IMPL_OFFSET>, GetDialogNumber::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IESCloseMmiEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IESEventImpl: Sized {
    fn GetEventId();
    fn GetEventType();
    fn SetCompletionStatus();
    fn GetData();
    fn GetStringData();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IESEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IESEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IESEventVtbl {
        unsafe extern "system" fn GetEventId<Impl: IESEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdweventid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventType<Impl: IESEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguideventtype: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCompletionStatus<Impl: IESEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwresult: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetData<Impl: IESEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbdata: *mut *mut super::super::System::Com::SAFEARRAY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStringData<Impl: IESEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrdata: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetEventId::<Impl, IMPL_OFFSET>, GetEventType::<Impl, IMPL_OFFSET>, SetCompletionStatus::<Impl, IMPL_OFFSET>, GetData::<Impl, IMPL_OFFSET>, GetStringData::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IESEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IESEventFactoryImpl: Sized {
    fn CreateESEvent();
}
#[cfg(feature = "Win32_Foundation")]
impl IESEventFactoryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IESEventFactoryImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IESEventFactoryVtbl {
        unsafe extern "system" fn CreateESEvent<Impl: IESEventFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pserviceprovider: *mut ::core::ffi::c_void, dweventid: u32, guideventtype: ::windows::core::GUID, dweventdatalength: u32, peventdata: *const u8, bstrbaseurl: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pinitcontext: *mut ::core::ffi::c_void, ppesevent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CreateESEvent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IESEventFactory as ::windows::core::Interface>::IID
    }
}
pub trait IESEventServiceImpl: Sized {
    fn FireESEvent();
}
impl IESEventServiceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IESEventServiceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IESEventServiceVtbl {
        unsafe extern "system" fn FireESEvent<Impl: IESEventServiceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pesevent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, FireESEvent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IESEventService as ::windows::core::Interface>::IID
    }
}
pub trait IESEventServiceConfigurationImpl: Sized {
    fn SetParent();
    fn RemoveParent();
    fn SetOwner();
    fn RemoveOwner();
    fn SetGraph();
    fn RemoveGraph();
}
impl IESEventServiceConfigurationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IESEventServiceConfigurationImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IESEventServiceConfigurationVtbl {
        unsafe extern "system" fn SetParent<Impl: IESEventServiceConfigurationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, peventservice: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveParent<Impl: IESEventServiceConfigurationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOwner<Impl: IESEventServiceConfigurationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pesevents: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveOwner<Impl: IESEventServiceConfigurationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetGraph<Impl: IESEventServiceConfigurationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pgraph: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveGraph<Impl: IESEventServiceConfigurationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pgraph: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetParent::<Impl, IMPL_OFFSET>, RemoveParent::<Impl, IMPL_OFFSET>, SetOwner::<Impl, IMPL_OFFSET>, RemoveOwner::<Impl, IMPL_OFFSET>, SetGraph::<Impl, IMPL_OFFSET>, RemoveGraph::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IESEventServiceConfiguration as ::windows::core::Interface>::IID
    }
}
pub trait IESEventsImpl: Sized {
    fn OnESEventReceived();
}
impl IESEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IESEventsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IESEventsVtbl {
        unsafe extern "system" fn OnESEventReceived<Impl: IESEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guideventtype: ::windows::core::GUID, pesevent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, OnESEventReceived::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IESEvents as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IESFileExpiryDateEventImpl: Sized + IESEventImpl {
    fn GetTunerId();
    fn GetExpiryDate();
    fn GetFinalExpiryDate();
    fn GetMaxRenewalCount();
    fn IsEntitlementTokenPresent();
    fn DoesExpireAfterFirstUse();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IESFileExpiryDateEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IESFileExpiryDateEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IESFileExpiryDateEventVtbl {
        unsafe extern "system" fn GetTunerId<Impl: IESFileExpiryDateEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguidtunerid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpiryDate<Impl: IESFileExpiryDateEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pqwexpirydate: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFinalExpiryDate<Impl: IESFileExpiryDateEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pqwexpirydate: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMaxRenewalCount<Impl: IESFileExpiryDateEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwmaxrenewalcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsEntitlementTokenPresent<Impl: IESFileExpiryDateEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfenttokenpresent: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DoesExpireAfterFirstUse<Impl: IESFileExpiryDateEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfexpireafterfirstuse: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetEventId::<Impl, IMPL_OFFSET>,
            GetEventType::<Impl, IMPL_OFFSET>,
            SetCompletionStatus::<Impl, IMPL_OFFSET>,
            GetData::<Impl, IMPL_OFFSET>,
            GetStringData::<Impl, IMPL_OFFSET>,
            GetTunerId::<Impl, IMPL_OFFSET>,
            GetExpiryDate::<Impl, IMPL_OFFSET>,
            GetFinalExpiryDate::<Impl, IMPL_OFFSET>,
            GetMaxRenewalCount::<Impl, IMPL_OFFSET>,
            IsEntitlementTokenPresent::<Impl, IMPL_OFFSET>,
            DoesExpireAfterFirstUse::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IESFileExpiryDateEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IESIsdbCasResponseEventImpl: Sized + IESEventImpl {
    fn GetRequestId();
    fn GetStatus();
    fn GetDataLength();
    fn GetResponseData();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IESIsdbCasResponseEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IESIsdbCasResponseEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IESIsdbCasResponseEventVtbl {
        unsafe extern "system" fn GetRequestId<Impl: IESIsdbCasResponseEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prequestid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStatus<Impl: IESIsdbCasResponseEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstatus: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDataLength<Impl: IESIsdbCasResponseEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prequestlength: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetResponseData<Impl: IESIsdbCasResponseEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbdata: *mut *mut super::super::System::Com::SAFEARRAY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetEventId::<Impl, IMPL_OFFSET>, GetEventType::<Impl, IMPL_OFFSET>, SetCompletionStatus::<Impl, IMPL_OFFSET>, GetData::<Impl, IMPL_OFFSET>, GetStringData::<Impl, IMPL_OFFSET>, GetRequestId::<Impl, IMPL_OFFSET>, GetStatus::<Impl, IMPL_OFFSET>, GetDataLength::<Impl, IMPL_OFFSET>, GetResponseData::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IESIsdbCasResponseEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IESLicenseRenewalResultEventImpl: Sized + IESEventImpl {
    fn GetCallersId();
    fn GetFileName();
    fn IsRenewalSuccessful();
    fn IsCheckEntitlementCallRequired();
    fn GetDescrambledStatus();
    fn GetRenewalResultCode();
    fn GetCASFailureCode();
    fn GetRenewalHResult();
    fn GetEntitlementTokenLength();
    fn GetEntitlementToken();
    fn GetExpiryDate();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IESLicenseRenewalResultEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IESLicenseRenewalResultEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IESLicenseRenewalResultEventVtbl {
        unsafe extern "system" fn GetCallersId<Impl: IESLicenseRenewalResultEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcallersid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFileName<Impl: IESLicenseRenewalResultEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrfilename: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsRenewalSuccessful<Impl: IESLicenseRenewalResultEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfrenewalsuccessful: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsCheckEntitlementCallRequired<Impl: IESLicenseRenewalResultEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfcheckenttokencallneeded: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDescrambledStatus<Impl: IESLicenseRenewalResultEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdescrambledstatus: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRenewalResultCode<Impl: IESLicenseRenewalResultEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwrenewalresultcode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCASFailureCode<Impl: IESLicenseRenewalResultEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcasfailurecode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRenewalHResult<Impl: IESLicenseRenewalResultEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phr: *mut ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEntitlementTokenLength<Impl: IESLicenseRenewalResultEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwlength: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEntitlementToken<Impl: IESLicenseRenewalResultEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbdata: *mut *mut super::super::System::Com::SAFEARRAY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpiryDate<Impl: IESLicenseRenewalResultEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pqwexpirydate: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetEventId::<Impl, IMPL_OFFSET>,
            GetEventType::<Impl, IMPL_OFFSET>,
            SetCompletionStatus::<Impl, IMPL_OFFSET>,
            GetData::<Impl, IMPL_OFFSET>,
            GetStringData::<Impl, IMPL_OFFSET>,
            GetCallersId::<Impl, IMPL_OFFSET>,
            GetFileName::<Impl, IMPL_OFFSET>,
            IsRenewalSuccessful::<Impl, IMPL_OFFSET>,
            IsCheckEntitlementCallRequired::<Impl, IMPL_OFFSET>,
            GetDescrambledStatus::<Impl, IMPL_OFFSET>,
            GetRenewalResultCode::<Impl, IMPL_OFFSET>,
            GetCASFailureCode::<Impl, IMPL_OFFSET>,
            GetRenewalHResult::<Impl, IMPL_OFFSET>,
            GetEntitlementTokenLength::<Impl, IMPL_OFFSET>,
            GetEntitlementToken::<Impl, IMPL_OFFSET>,
            GetExpiryDate::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IESLicenseRenewalResultEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IESOpenMmiEventImpl: Sized + IESEventImpl {
    fn GetDialogNumber();
    fn GetDialogType();
    fn GetDialogData();
    fn GetDialogStringData();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IESOpenMmiEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IESOpenMmiEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IESOpenMmiEventVtbl {
        unsafe extern "system" fn GetDialogNumber<Impl: IESOpenMmiEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdialogrequest: *mut u32, pdialognumber: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDialogType<Impl: IESOpenMmiEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guiddialogtype: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDialogData<Impl: IESOpenMmiEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbdata: *mut *mut super::super::System::Com::SAFEARRAY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDialogStringData<Impl: IESOpenMmiEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrbaseurl: *mut super::super::Foundation::BSTR, pbstrdata: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetEventId::<Impl, IMPL_OFFSET>,
            GetEventType::<Impl, IMPL_OFFSET>,
            SetCompletionStatus::<Impl, IMPL_OFFSET>,
            GetData::<Impl, IMPL_OFFSET>,
            GetStringData::<Impl, IMPL_OFFSET>,
            GetDialogNumber::<Impl, IMPL_OFFSET>,
            GetDialogType::<Impl, IMPL_OFFSET>,
            GetDialogData::<Impl, IMPL_OFFSET>,
            GetDialogStringData::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IESOpenMmiEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IESRequestTunerEventImpl: Sized + IESEventImpl {
    fn GetPriority();
    fn GetReason();
    fn GetConsequences();
    fn GetEstimatedTime();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IESRequestTunerEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IESRequestTunerEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IESRequestTunerEventVtbl {
        unsafe extern "system" fn GetPriority<Impl: IESRequestTunerEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbypriority: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetReason<Impl: IESRequestTunerEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbyreason: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetConsequences<Impl: IESRequestTunerEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbyconsequences: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEstimatedTime<Impl: IESRequestTunerEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwestimatedtime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetEventId::<Impl, IMPL_OFFSET>, GetEventType::<Impl, IMPL_OFFSET>, SetCompletionStatus::<Impl, IMPL_OFFSET>, GetData::<Impl, IMPL_OFFSET>, GetStringData::<Impl, IMPL_OFFSET>, GetPriority::<Impl, IMPL_OFFSET>, GetReason::<Impl, IMPL_OFFSET>, GetConsequences::<Impl, IMPL_OFFSET>, GetEstimatedTime::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IESRequestTunerEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IESValueUpdatedEventImpl: Sized + IESEventImpl {
    fn GetValueNames();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IESValueUpdatedEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IESValueUpdatedEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IESValueUpdatedEventVtbl {
        unsafe extern "system" fn GetValueNames<Impl: IESValueUpdatedEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrnames: *mut *mut super::super::System::Com::SAFEARRAY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetEventId::<Impl, IMPL_OFFSET>, GetEventType::<Impl, IMPL_OFFSET>, SetCompletionStatus::<Impl, IMPL_OFFSET>, GetData::<Impl, IMPL_OFFSET>, GetStringData::<Impl, IMPL_OFFSET>, GetValueNames::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IESValueUpdatedEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IETFilterImpl: Sized {
    fn EvalRatObjOK();
    fn GetCurrRating();
    fn GetCurrLicenseExpDate();
    fn GetLastErrorCode();
    fn SetRecordingOn();
}
#[cfg(feature = "Win32_Foundation")]
impl IETFilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IETFilterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IETFilterVtbl {
        unsafe extern "system" fn EvalRatObjOK<Impl: IETFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phrcocreateretval: *mut ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrRating<Impl: IETFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrLicenseExpDate<Impl: IETFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prottype: *const ProtType, lpdatetime: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastErrorCode<Impl: IETFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRecordingOn<Impl: IETFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frecstate: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, EvalRatObjOK::<Impl, IMPL_OFFSET>, GetCurrRating::<Impl, IMPL_OFFSET>, GetCurrLicenseExpDate::<Impl, IMPL_OFFSET>, GetLastErrorCode::<Impl, IMPL_OFFSET>, SetRecordingOn::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IETFilter as ::windows::core::Interface>::IID
    }
}
pub trait IETFilterConfigImpl: Sized {
    fn InitLicense();
    fn GetSecureChannelObject();
}
impl IETFilterConfigVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IETFilterConfigImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IETFilterConfigVtbl {
        unsafe extern "system" fn InitLicense<Impl: IETFilterConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, licenseid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSecureChannelObject<Impl: IETFilterConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunkdrmsecurechannel: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, InitLicense::<Impl, IMPL_OFFSET>, GetSecureChannelObject::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IETFilterConfig as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IETFilterEventsImpl: Sized + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IETFilterEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IETFilterEventsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IETFilterEventsVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IETFilterEvents as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IEncoderAPIImpl: Sized {
    fn IsSupported();
    fn IsAvailable();
    fn GetParameterRange();
    fn GetParameterValues();
    fn GetDefaultValue();
    fn GetValue();
    fn SetValue();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IEncoderAPIVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEncoderAPIImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEncoderAPIVtbl {
        unsafe extern "system" fn IsSupported<Impl: IEncoderAPIImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsAvailable<Impl: IEncoderAPIImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParameterRange<Impl: IEncoderAPIImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *const ::windows::core::GUID, valuemin: *mut super::super::System::Com::VARIANT, valuemax: *mut super::super::System::Com::VARIANT, steppingdelta: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParameterValues<Impl: IEncoderAPIImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *const ::windows::core::GUID, values: *mut *mut super::super::System::Com::VARIANT, valuescount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDefaultValue<Impl: IEncoderAPIImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *const ::windows::core::GUID, value: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetValue<Impl: IEncoderAPIImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *const ::windows::core::GUID, value: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetValue<Impl: IEncoderAPIImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *const ::windows::core::GUID, value: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, IsSupported::<Impl, IMPL_OFFSET>, IsAvailable::<Impl, IMPL_OFFSET>, GetParameterRange::<Impl, IMPL_OFFSET>, GetParameterValues::<Impl, IMPL_OFFSET>, GetDefaultValue::<Impl, IMPL_OFFSET>, GetValue::<Impl, IMPL_OFFSET>, SetValue::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEncoderAPI as ::windows::core::Interface>::IID
    }
}
pub trait IEnumComponentTypesImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl IEnumComponentTypesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumComponentTypesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumComponentTypesVtbl {
        unsafe extern "system" fn Next<Impl: IEnumComponentTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumComponentTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumComponentTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumComponentTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumComponentTypes as ::windows::core::Interface>::IID
    }
}
pub trait IEnumComponentsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl IEnumComponentsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumComponentsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumComponentsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumComponentsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumComponentsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumComponentsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumComponentsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumComponents as ::windows::core::Interface>::IID
    }
}
pub trait IEnumFiltersImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl IEnumFiltersVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumFiltersImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumFiltersVtbl {
        unsafe extern "system" fn Next<Impl: IEnumFiltersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cfilters: u32, ppfilter: *mut ::windows::core::RawPtr, pcfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumFiltersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cfilters: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumFiltersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumFiltersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumFilters as ::windows::core::Interface>::IID
    }
}
pub trait IEnumGuideDataPropertiesImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl IEnumGuideDataPropertiesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumGuideDataPropertiesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumGuideDataPropertiesVtbl {
        unsafe extern "system" fn Next<Impl: IEnumGuideDataPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, ppprop: *mut ::windows::core::RawPtr, pcelt: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumGuideDataPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumGuideDataPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumGuideDataPropertiesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumGuideDataProperties as ::windows::core::Interface>::IID
    }
}
pub trait IEnumMSVidGraphSegmentImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl IEnumMSVidGraphSegmentVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumMSVidGraphSegmentImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumMSVidGraphSegmentVtbl {
        unsafe extern "system" fn Next<Impl: IEnumMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumMSVidGraphSegment as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IEnumMediaTypesImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
#[cfg(feature = "Win32_Foundation")]
impl IEnumMediaTypesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumMediaTypesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumMediaTypesVtbl {
        unsafe extern "system" fn Next<Impl: IEnumMediaTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cmediatypes: u32, ppmediatypes: *mut *mut AM_MEDIA_TYPE, pcfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumMediaTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cmediatypes: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumMediaTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumMediaTypesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumMediaTypes as ::windows::core::Interface>::IID
    }
}
pub trait IEnumPIDMapImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl IEnumPIDMapVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumPIDMapImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumPIDMapVtbl {
        unsafe extern "system" fn Next<Impl: IEnumPIDMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, crequest: u32, ppidmap: *mut PID_MAP, pcreceived: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumPIDMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, crecords: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumPIDMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumPIDMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppienumpidmap: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumPIDMap as ::windows::core::Interface>::IID
    }
}
pub trait IEnumPinsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl IEnumPinsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumPinsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumPinsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumPinsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cpins: u32, pppins: *mut ::windows::core::RawPtr, pcfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumPinsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cpins: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumPinsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumPinsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumPins as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IEnumRegFiltersImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
#[cfg(feature = "Win32_Foundation")]
impl IEnumRegFiltersVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumRegFiltersImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumRegFiltersVtbl {
        unsafe extern "system" fn Next<Impl: IEnumRegFiltersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cfilters: u32, apregfilter: *mut *mut REGFILTER, pcfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumRegFiltersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cfilters: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumRegFiltersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumRegFiltersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumRegFilters as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IEnumStreamBufferRecordingAttribImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
#[cfg(feature = "Win32_Foundation")]
impl IEnumStreamBufferRecordingAttribVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumStreamBufferRecordingAttribImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumStreamBufferRecordingAttribVtbl {
        unsafe extern "system" fn Next<Impl: IEnumStreamBufferRecordingAttribImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, crequest: u32, pstreambufferattribute: *mut STREAMBUFFER_ATTRIBUTE, pcreceived: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumStreamBufferRecordingAttribImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, crecords: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumStreamBufferRecordingAttribImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumStreamBufferRecordingAttribImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppienumstreambufferattrib: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumStreamBufferRecordingAttrib as ::windows::core::Interface>::IID
    }
}
pub trait IEnumStreamIdMapImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl IEnumStreamIdMapVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumStreamIdMapImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumStreamIdMapVtbl {
        unsafe extern "system" fn Next<Impl: IEnumStreamIdMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, crequest: u32, pstreamidmap: *mut STREAM_ID_MAP, pcreceived: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumStreamIdMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, crecords: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumStreamIdMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumStreamIdMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppienumstreamidmap: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumStreamIdMap as ::windows::core::Interface>::IID
    }
}
pub trait IEnumTuneRequestsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl IEnumTuneRequestsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumTuneRequestsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumTuneRequestsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumTuneRequestsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, ppprop: *mut ::windows::core::RawPtr, pcelt: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumTuneRequestsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumTuneRequestsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumTuneRequestsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumTuneRequests as ::windows::core::Interface>::IID
    }
}
pub trait IEnumTuningSpacesImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl IEnumTuningSpacesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumTuningSpacesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumTuningSpacesVtbl {
        unsafe extern "system" fn Next<Impl: IEnumTuningSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumTuningSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumTuningSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumTuningSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumTuningSpaces as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IEvalRatImpl: Sized + IDispatchImpl {
    fn BlockedRatingAttributes();
    fn SetBlockedRatingAttributes();
    fn BlockUnRated();
    fn SetBlockUnRated();
    fn MostRestrictiveRating();
    fn TestRating();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IEvalRatVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEvalRatImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEvalRatVtbl {
        unsafe extern "system" fn BlockedRatingAttributes<Impl: IEvalRatImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, plbfattrs: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBlockedRatingAttributes<Impl: IEvalRatImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, lbfattrs: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BlockUnRated<Impl: IEvalRatImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfblockunratedshows: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBlockUnRated<Impl: IEvalRatImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fblockunratedshows: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MostRestrictiveRating<Impl: IEvalRatImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ensystem1: EnTvRat_System, enenlevel1: EnTvRat_GenericLevel, lbfenattr1: i32, ensystem2: EnTvRat_System, enenlevel2: EnTvRat_GenericLevel, lbfenattr2: i32, pensystem: *mut EnTvRat_System, penenlevel: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TestRating<Impl: IEvalRatImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enshowsystem: EnTvRat_System, enshowlevel: EnTvRat_GenericLevel, lbfenshowattributes: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            BlockedRatingAttributes::<Impl, IMPL_OFFSET>,
            SetBlockedRatingAttributes::<Impl, IMPL_OFFSET>,
            BlockUnRated::<Impl, IMPL_OFFSET>,
            SetBlockUnRated::<Impl, IMPL_OFFSET>,
            MostRestrictiveRating::<Impl, IMPL_OFFSET>,
            TestRating::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEvalRat as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IFileSinkFilterImpl: Sized {
    fn SetFileName();
    fn GetCurFile();
}
#[cfg(feature = "Win32_Foundation")]
impl IFileSinkFilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileSinkFilterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IFileSinkFilterVtbl {
        unsafe extern "system" fn SetFileName<Impl: IFileSinkFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfilename: super::super::Foundation::PWSTR, pmt: *const AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurFile<Impl: IFileSinkFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszfilename: *mut super::super::Foundation::PWSTR, pmt: *mut AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetFileName::<Impl, IMPL_OFFSET>, GetCurFile::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IFileSinkFilter as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IFileSinkFilter2Impl: Sized + IFileSinkFilterImpl {
    fn SetMode();
    fn GetMode();
}
#[cfg(feature = "Win32_Foundation")]
impl IFileSinkFilter2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileSinkFilter2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IFileSinkFilter2Vtbl {
        unsafe extern "system" fn SetMode<Impl: IFileSinkFilter2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMode<Impl: IFileSinkFilter2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetFileName::<Impl, IMPL_OFFSET>, GetCurFile::<Impl, IMPL_OFFSET>, SetMode::<Impl, IMPL_OFFSET>, GetMode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IFileSinkFilter2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IFileSourceFilterImpl: Sized {
    fn Load();
    fn GetCurFile();
}
#[cfg(feature = "Win32_Foundation")]
impl IFileSourceFilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFileSourceFilterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IFileSourceFilterVtbl {
        unsafe extern "system" fn Load<Impl: IFileSourceFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfilename: super::super::Foundation::PWSTR, pmt: *const AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurFile<Impl: IFileSourceFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszfilename: *mut super::super::Foundation::PWSTR, pmt: *mut AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Load::<Impl, IMPL_OFFSET>, GetCurFile::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IFileSourceFilter as ::windows::core::Interface>::IID
    }
}
pub trait IFilterChainImpl: Sized {
    fn StartChain();
    fn PauseChain();
    fn StopChain();
    fn RemoveChain();
}
impl IFilterChainVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFilterChainImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IFilterChainVtbl {
        unsafe extern "system" fn StartChain<Impl: IFilterChainImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstartfilter: ::windows::core::RawPtr, pendfilter: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PauseChain<Impl: IFilterChainImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstartfilter: ::windows::core::RawPtr, pendfilter: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StopChain<Impl: IFilterChainImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstartfilter: ::windows::core::RawPtr, pendfilter: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveChain<Impl: IFilterChainImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstartfilter: ::windows::core::RawPtr, pendfilter: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, StartChain::<Impl, IMPL_OFFSET>, PauseChain::<Impl, IMPL_OFFSET>, StopChain::<Impl, IMPL_OFFSET>, RemoveChain::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IFilterChain as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IFilterGraphImpl: Sized {
    fn AddFilter();
    fn RemoveFilter();
    fn EnumFilters();
    fn FindFilterByName();
    fn ConnectDirect();
    fn Reconnect();
    fn Disconnect();
    fn SetDefaultSyncSource();
}
#[cfg(feature = "Win32_Foundation")]
impl IFilterGraphVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFilterGraphImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IFilterGraphVtbl {
        unsafe extern "system" fn AddFilter<Impl: IFilterGraphImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfilter: ::windows::core::RawPtr, pname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveFilter<Impl: IFilterGraphImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfilter: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumFilters<Impl: IFilterGraphImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindFilterByName<Impl: IFilterGraphImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pname: super::super::Foundation::PWSTR, ppfilter: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectDirect<Impl: IFilterGraphImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppinout: ::windows::core::RawPtr, ppinin: ::windows::core::RawPtr, pmt: *const AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reconnect<Impl: IFilterGraphImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Disconnect<Impl: IFilterGraphImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefaultSyncSource<Impl: IFilterGraphImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, AddFilter::<Impl, IMPL_OFFSET>, RemoveFilter::<Impl, IMPL_OFFSET>, EnumFilters::<Impl, IMPL_OFFSET>, FindFilterByName::<Impl, IMPL_OFFSET>, ConnectDirect::<Impl, IMPL_OFFSET>, Reconnect::<Impl, IMPL_OFFSET>, Disconnect::<Impl, IMPL_OFFSET>, SetDefaultSyncSource::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IFilterGraph as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IFilterGraph2Impl: Sized + IGraphBuilderImpl + IFilterGraphImpl {
    fn AddSourceFilterForMoniker();
    fn ReconnectEx();
    fn RenderEx();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IFilterGraph2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFilterGraph2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IFilterGraph2Vtbl {
        unsafe extern "system" fn AddSourceFilterForMoniker<Impl: IFilterGraph2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmoniker: ::windows::core::RawPtr, pctx: ::windows::core::RawPtr, lpcwstrfiltername: super::super::Foundation::PWSTR, ppfilter: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReconnectEx<Impl: IFilterGraph2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: ::windows::core::RawPtr, pmt: *const AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RenderEx<Impl: IFilterGraph2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppinout: ::windows::core::RawPtr, dwflags: u32, pvcontext: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            AddFilter::<Impl, IMPL_OFFSET>,
            RemoveFilter::<Impl, IMPL_OFFSET>,
            EnumFilters::<Impl, IMPL_OFFSET>,
            FindFilterByName::<Impl, IMPL_OFFSET>,
            ConnectDirect::<Impl, IMPL_OFFSET>,
            Reconnect::<Impl, IMPL_OFFSET>,
            Disconnect::<Impl, IMPL_OFFSET>,
            SetDefaultSyncSource::<Impl, IMPL_OFFSET>,
            Connect::<Impl, IMPL_OFFSET>,
            Render::<Impl, IMPL_OFFSET>,
            RenderFile::<Impl, IMPL_OFFSET>,
            AddSourceFilter::<Impl, IMPL_OFFSET>,
            SetLogFile::<Impl, IMPL_OFFSET>,
            Abort::<Impl, IMPL_OFFSET>,
            ShouldOperationContinue::<Impl, IMPL_OFFSET>,
            AddSourceFilterForMoniker::<Impl, IMPL_OFFSET>,
            ReconnectEx::<Impl, IMPL_OFFSET>,
            RenderEx::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IFilterGraph2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IFilterGraph3Impl: Sized + IFilterGraph2Impl + IGraphBuilderImpl + IFilterGraphImpl {
    fn SetSyncSourceEx();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IFilterGraph3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFilterGraph3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IFilterGraph3Vtbl {
        unsafe extern "system" fn SetSyncSourceEx<Impl: IFilterGraph3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pclockformostoffiltergraph: ::windows::core::RawPtr, pclockforfilter: ::windows::core::RawPtr, pfilter: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            AddFilter::<Impl, IMPL_OFFSET>,
            RemoveFilter::<Impl, IMPL_OFFSET>,
            EnumFilters::<Impl, IMPL_OFFSET>,
            FindFilterByName::<Impl, IMPL_OFFSET>,
            ConnectDirect::<Impl, IMPL_OFFSET>,
            Reconnect::<Impl, IMPL_OFFSET>,
            Disconnect::<Impl, IMPL_OFFSET>,
            SetDefaultSyncSource::<Impl, IMPL_OFFSET>,
            Connect::<Impl, IMPL_OFFSET>,
            Render::<Impl, IMPL_OFFSET>,
            RenderFile::<Impl, IMPL_OFFSET>,
            AddSourceFilter::<Impl, IMPL_OFFSET>,
            SetLogFile::<Impl, IMPL_OFFSET>,
            Abort::<Impl, IMPL_OFFSET>,
            ShouldOperationContinue::<Impl, IMPL_OFFSET>,
            AddSourceFilterForMoniker::<Impl, IMPL_OFFSET>,
            ReconnectEx::<Impl, IMPL_OFFSET>,
            RenderEx::<Impl, IMPL_OFFSET>,
            SetSyncSourceEx::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IFilterGraph3 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IFilterInfoImpl: Sized + IDispatchImpl {
    fn FindPin();
    fn Name();
    fn VendorInfo();
    fn Filter();
    fn Pins();
    fn IsFileSource();
    fn Filename();
    fn SetFilename();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IFilterInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFilterInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IFilterInfoVtbl {
        unsafe extern "system" fn FindPin<Impl: IFilterInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strpinid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, ppunk: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Name<Impl: IFilterInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VendorInfo<Impl: IFilterInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strvendorinfo: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Filter<Impl: IFilterInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Pins<Impl: IFilterInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsFileSource<Impl: IFilterInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbissource: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Filename<Impl: IFilterInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrfilename: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFilename<Impl: IFilterInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strfilename: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            FindPin::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            VendorInfo::<Impl, IMPL_OFFSET>,
            Filter::<Impl, IMPL_OFFSET>,
            Pins::<Impl, IMPL_OFFSET>,
            IsFileSource::<Impl, IMPL_OFFSET>,
            Filename::<Impl, IMPL_OFFSET>,
            SetFilename::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IFilterInfo as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IFilterMapperImpl: Sized {
    fn RegisterFilter();
    fn RegisterFilterInstance();
    fn RegisterPin();
    fn RegisterPinType();
    fn UnregisterFilter();
    fn UnregisterFilterInstance();
    fn UnregisterPin();
    fn EnumMatchingFilters();
}
#[cfg(feature = "Win32_Foundation")]
impl IFilterMapperVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFilterMapperImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IFilterMapperVtbl {
        unsafe extern "system" fn RegisterFilter<Impl: IFilterMapperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsid: ::windows::core::GUID, name: super::super::Foundation::PWSTR, dwmerit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterFilterInstance<Impl: IFilterMapperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsid: ::windows::core::GUID, name: super::super::Foundation::PWSTR, mrid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterPin<Impl: IFilterMapperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filter: ::windows::core::GUID, name: super::super::Foundation::PWSTR, brendered: super::super::Foundation::BOOL, boutput: super::super::Foundation::BOOL, bzero: super::super::Foundation::BOOL, bmany: super::super::Foundation::BOOL, connectstofilter: ::windows::core::GUID, connectstopin: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterPinType<Impl: IFilterMapperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsfilter: ::windows::core::GUID, strname: super::super::Foundation::PWSTR, clsmajortype: ::windows::core::GUID, clssubtype: ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnregisterFilter<Impl: IFilterMapperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filter: ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnregisterFilterInstance<Impl: IFilterMapperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mrid: ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnregisterPin<Impl: IFilterMapperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filter: ::windows::core::GUID, name: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumMatchingFilters<Impl: IFilterMapperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr, dwmerit: u32, binputneeded: super::super::Foundation::BOOL, clsinmaj: ::windows::core::GUID, clsinsub: ::windows::core::GUID, brender: super::super::Foundation::BOOL, boututneeded: super::super::Foundation::BOOL, clsoutmaj: ::windows::core::GUID, clsoutsub: ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, RegisterFilter::<Impl, IMPL_OFFSET>, RegisterFilterInstance::<Impl, IMPL_OFFSET>, RegisterPin::<Impl, IMPL_OFFSET>, RegisterPinType::<Impl, IMPL_OFFSET>, UnregisterFilter::<Impl, IMPL_OFFSET>, UnregisterFilterInstance::<Impl, IMPL_OFFSET>, UnregisterPin::<Impl, IMPL_OFFSET>, EnumMatchingFilters::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IFilterMapper as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IFilterMapper2Impl: Sized {
    fn CreateCategory();
    fn UnregisterFilter();
    fn RegisterFilter();
    fn EnumMatchingFilters();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IFilterMapper2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFilterMapper2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IFilterMapper2Vtbl {
        unsafe extern "system" fn CreateCategory<Impl: IFilterMapper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsidcategory: *const ::windows::core::GUID, dwcategorymerit: u32, description: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnregisterFilter<Impl: IFilterMapper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pclsidcategory: *const ::windows::core::GUID, szinstance: super::super::Foundation::PWSTR, filter: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterFilter<Impl: IFilterMapper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsidfilter: *const ::windows::core::GUID, name: super::super::Foundation::PWSTR, ppmoniker: *mut ::windows::core::RawPtr, pclsidcategory: *const ::windows::core::GUID, szinstance: super::super::Foundation::PWSTR, prf2: *const REGFILTER2) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumMatchingFilters<Impl: IFilterMapper2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr, dwflags: u32, bexactmatch: super::super::Foundation::BOOL, dwmerit: u32, binputneeded: super::super::Foundation::BOOL, cinputtypes: u32, pinputtypes: *const ::windows::core::GUID, pmedin: *const REGPINMEDIUM, ppincategoryin: *const ::windows::core::GUID, brender: super::super::Foundation::BOOL, boutputneeded: super::super::Foundation::BOOL, coutputtypes: u32, poutputtypes: *const ::windows::core::GUID, pmedout: *const REGPINMEDIUM, ppincategoryout: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CreateCategory::<Impl, IMPL_OFFSET>, UnregisterFilter::<Impl, IMPL_OFFSET>, RegisterFilter::<Impl, IMPL_OFFSET>, EnumMatchingFilters::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IFilterMapper2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IFilterMapper3Impl: Sized + IFilterMapper2Impl {
    fn GetICreateDevEnum();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IFilterMapper3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFilterMapper3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IFilterMapper3Vtbl {
        unsafe extern "system" fn GetICreateDevEnum<Impl: IFilterMapper3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CreateCategory::<Impl, IMPL_OFFSET>, UnregisterFilter::<Impl, IMPL_OFFSET>, RegisterFilter::<Impl, IMPL_OFFSET>, EnumMatchingFilters::<Impl, IMPL_OFFSET>, GetICreateDevEnum::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IFilterMapper3 as ::windows::core::Interface>::IID
    }
}
pub trait IFrequencyMapImpl: Sized {
    fn FrequencyMapping();
    fn SetFrequencyMapping();
    fn CountryCode();
    fn SetCountryCode();
    fn DefaultFrequencyMapping();
    fn CountryCodeList();
}
impl IFrequencyMapVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFrequencyMapImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IFrequencyMapVtbl {
        unsafe extern "system" fn FrequencyMapping<Impl: IFrequencyMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcount: *mut u32, ppullist: *mut *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFrequencyMapping<Impl: IFrequencyMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcount: u32, plist: *const u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CountryCode<Impl: IFrequencyMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcountrycode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCountryCode<Impl: IFrequencyMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcountrycode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DefaultFrequencyMapping<Impl: IFrequencyMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcountrycode: u32, pulcount: *mut u32, ppullist: *mut *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CountryCodeList<Impl: IFrequencyMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcount: *mut u32, ppullist: *mut *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, FrequencyMapping::<Impl, IMPL_OFFSET>, SetFrequencyMapping::<Impl, IMPL_OFFSET>, CountryCode::<Impl, IMPL_OFFSET>, SetCountryCode::<Impl, IMPL_OFFSET>, DefaultFrequencyMapping::<Impl, IMPL_OFFSET>, CountryCodeList::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IFrequencyMap as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IFullScreenVideoImpl: Sized {
    fn CountModes();
    fn GetModeInfo();
    fn GetCurrentMode();
    fn IsModeAvailable();
    fn IsModeEnabled();
    fn SetEnabled();
    fn GetClipFactor();
    fn SetClipFactor();
    fn SetMessageDrain();
    fn GetMessageDrain();
    fn SetMonitor();
    fn GetMonitor();
    fn HideOnDeactivate();
    fn IsHideOnDeactivate();
    fn SetCaption();
    fn GetCaption();
    fn SetDefault();
}
#[cfg(feature = "Win32_Foundation")]
impl IFullScreenVideoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFullScreenVideoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IFullScreenVideoVtbl {
        unsafe extern "system" fn CountModes<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmodes: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModeInfo<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: i32, pwidth: *mut i32, pheight: *mut i32, pdepth: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentMode<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmode: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsModeAvailable<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsModeEnabled<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEnabled<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: i32, benabled: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetClipFactor<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pclipfactor: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetClipFactor<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clipfactor: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMessageDrain<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMessageDrain<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: *mut super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMonitor<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, monitor: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMonitor<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, monitor: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HideOnDeactivate<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hide: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsHideOnDeactivate<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCaption<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strcaption: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCaption<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcaption: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefault<Impl: IFullScreenVideoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            CountModes::<Impl, IMPL_OFFSET>,
            GetModeInfo::<Impl, IMPL_OFFSET>,
            GetCurrentMode::<Impl, IMPL_OFFSET>,
            IsModeAvailable::<Impl, IMPL_OFFSET>,
            IsModeEnabled::<Impl, IMPL_OFFSET>,
            SetEnabled::<Impl, IMPL_OFFSET>,
            GetClipFactor::<Impl, IMPL_OFFSET>,
            SetClipFactor::<Impl, IMPL_OFFSET>,
            SetMessageDrain::<Impl, IMPL_OFFSET>,
            GetMessageDrain::<Impl, IMPL_OFFSET>,
            SetMonitor::<Impl, IMPL_OFFSET>,
            GetMonitor::<Impl, IMPL_OFFSET>,
            HideOnDeactivate::<Impl, IMPL_OFFSET>,
            IsHideOnDeactivate::<Impl, IMPL_OFFSET>,
            SetCaption::<Impl, IMPL_OFFSET>,
            GetCaption::<Impl, IMPL_OFFSET>,
            SetDefault::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IFullScreenVideo as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IFullScreenVideoExImpl: Sized + IFullScreenVideoImpl {
    fn SetAcceleratorTable();
    fn GetAcceleratorTable();
    fn KeepPixelAspectRatio();
    fn IsKeepPixelAspectRatio();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl IFullScreenVideoExVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IFullScreenVideoExImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IFullScreenVideoExVtbl {
        unsafe extern "system" fn SetAcceleratorTable<Impl: IFullScreenVideoExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, haccel: super::super::UI::WindowsAndMessaging::HACCEL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAcceleratorTable<Impl: IFullScreenVideoExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::Foundation::HWND, phaccel: *mut super::super::UI::WindowsAndMessaging::HACCEL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn KeepPixelAspectRatio<Impl: IFullScreenVideoExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, keepaspect: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsKeepPixelAspectRatio<Impl: IFullScreenVideoExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pkeepaspect: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            CountModes::<Impl, IMPL_OFFSET>,
            GetModeInfo::<Impl, IMPL_OFFSET>,
            GetCurrentMode::<Impl, IMPL_OFFSET>,
            IsModeAvailable::<Impl, IMPL_OFFSET>,
            IsModeEnabled::<Impl, IMPL_OFFSET>,
            SetEnabled::<Impl, IMPL_OFFSET>,
            GetClipFactor::<Impl, IMPL_OFFSET>,
            SetClipFactor::<Impl, IMPL_OFFSET>,
            SetMessageDrain::<Impl, IMPL_OFFSET>,
            GetMessageDrain::<Impl, IMPL_OFFSET>,
            SetMonitor::<Impl, IMPL_OFFSET>,
            GetMonitor::<Impl, IMPL_OFFSET>,
            HideOnDeactivate::<Impl, IMPL_OFFSET>,
            IsHideOnDeactivate::<Impl, IMPL_OFFSET>,
            SetCaption::<Impl, IMPL_OFFSET>,
            GetCaption::<Impl, IMPL_OFFSET>,
            SetDefault::<Impl, IMPL_OFFSET>,
            SetAcceleratorTable::<Impl, IMPL_OFFSET>,
            GetAcceleratorTable::<Impl, IMPL_OFFSET>,
            KeepPixelAspectRatio::<Impl, IMPL_OFFSET>,
            IsKeepPixelAspectRatio::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IFullScreenVideoEx as ::windows::core::Interface>::IID
    }
}
pub trait IGenericDescriptorImpl: Sized {
    fn Initialize();
    fn GetTag();
    fn GetLength();
    fn GetBody();
}
impl IGenericDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IGenericDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IGenericDescriptorVtbl {
        unsafe extern "system" fn Initialize<Impl: IGenericDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbdesc: *const u8, bcount: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTag<Impl: IGenericDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IGenericDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBody<Impl: IGenericDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppbval: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetBody::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IGenericDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IGenericDescriptor2Impl: Sized + IGenericDescriptorImpl {
    fn Initialize();
    fn GetLength();
}
impl IGenericDescriptor2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IGenericDescriptor2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IGenericDescriptor2Vtbl {
        unsafe extern "system" fn Initialize<Impl: IGenericDescriptor2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbdesc: *const u8, wcount: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IGenericDescriptor2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetBody::<Impl, IMPL_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IGenericDescriptor2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_System_Registry")]
pub trait IGetCapabilitiesKeyImpl: Sized {
    fn GetCapabilitiesKey();
}
#[cfg(feature = "Win32_System_Registry")]
impl IGetCapabilitiesKeyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IGetCapabilitiesKeyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IGetCapabilitiesKeyVtbl {
        unsafe extern "system" fn GetCapabilitiesKey<Impl: IGetCapabilitiesKeyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phkey: *mut super::super::System::Registry::HKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetCapabilitiesKey::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IGetCapabilitiesKey as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IGpnvsCommonBaseImpl: Sized {
    fn GetValueUpdateName();
}
#[cfg(feature = "Win32_Foundation")]
impl IGpnvsCommonBaseVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IGpnvsCommonBaseImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IGpnvsCommonBaseVtbl {
        unsafe extern "system" fn GetValueUpdateName<Impl: IGpnvsCommonBaseImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetValueUpdateName::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IGpnvsCommonBase as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IGraphBuilderImpl: Sized + IFilterGraphImpl {
    fn Connect();
    fn Render();
    fn RenderFile();
    fn AddSourceFilter();
    fn SetLogFile();
    fn Abort();
    fn ShouldOperationContinue();
}
#[cfg(feature = "Win32_Foundation")]
impl IGraphBuilderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IGraphBuilderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IGraphBuilderVtbl {
        unsafe extern "system" fn Connect<Impl: IGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppinout: ::windows::core::RawPtr, ppinin: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Render<Impl: IGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppinout: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RenderFile<Impl: IGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpcwstrfile: super::super::Foundation::PWSTR, lpcwstrplaylist: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSourceFilter<Impl: IGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpcwstrfilename: super::super::Foundation::PWSTR, lpcwstrfiltername: super::super::Foundation::PWSTR, ppfilter: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLogFile<Impl: IGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hfile: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Abort<Impl: IGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ShouldOperationContinue<Impl: IGraphBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            AddFilter::<Impl, IMPL_OFFSET>,
            RemoveFilter::<Impl, IMPL_OFFSET>,
            EnumFilters::<Impl, IMPL_OFFSET>,
            FindFilterByName::<Impl, IMPL_OFFSET>,
            ConnectDirect::<Impl, IMPL_OFFSET>,
            Reconnect::<Impl, IMPL_OFFSET>,
            Disconnect::<Impl, IMPL_OFFSET>,
            SetDefaultSyncSource::<Impl, IMPL_OFFSET>,
            Connect::<Impl, IMPL_OFFSET>,
            Render::<Impl, IMPL_OFFSET>,
            RenderFile::<Impl, IMPL_OFFSET>,
            AddSourceFilter::<Impl, IMPL_OFFSET>,
            SetLogFile::<Impl, IMPL_OFFSET>,
            Abort::<Impl, IMPL_OFFSET>,
            ShouldOperationContinue::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IGraphBuilder as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IGraphConfigImpl: Sized {
    fn Reconnect();
    fn Reconfigure();
    fn AddFilterToCache();
    fn EnumCacheFilter();
    fn RemoveFilterFromCache();
    fn GetStartTime();
    fn PushThroughData();
    fn SetFilterFlags();
    fn GetFilterFlags();
    fn RemoveFilterEx();
}
#[cfg(feature = "Win32_Foundation")]
impl IGraphConfigVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IGraphConfigImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IGraphConfigVtbl {
        unsafe extern "system" fn Reconnect<Impl: IGraphConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, poutputpin: ::windows::core::RawPtr, pinputpin: ::windows::core::RawPtr, pmtfirstconnection: *const AM_MEDIA_TYPE, pusingfilter: ::windows::core::RawPtr, habortevent: super::super::Foundation::HANDLE, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reconfigure<Impl: IGraphConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcallback: ::windows::core::RawPtr, pvcontext: *mut ::core::ffi::c_void, dwflags: u32, habortevent: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddFilterToCache<Impl: IGraphConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfilter: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumCacheFilter<Impl: IGraphConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, penum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveFilterFromCache<Impl: IGraphConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfilter: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStartTime<Impl: IGraphConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prtstart: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PushThroughData<Impl: IGraphConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, poutputpin: ::windows::core::RawPtr, pconnection: ::windows::core::RawPtr, heventabort: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFilterFlags<Impl: IGraphConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfilter: ::windows::core::RawPtr, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFilterFlags<Impl: IGraphConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfilter: ::windows::core::RawPtr, pdwflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveFilterEx<Impl: IGraphConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfilter: ::windows::core::RawPtr, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Reconnect::<Impl, IMPL_OFFSET>,
            Reconfigure::<Impl, IMPL_OFFSET>,
            AddFilterToCache::<Impl, IMPL_OFFSET>,
            EnumCacheFilter::<Impl, IMPL_OFFSET>,
            RemoveFilterFromCache::<Impl, IMPL_OFFSET>,
            GetStartTime::<Impl, IMPL_OFFSET>,
            PushThroughData::<Impl, IMPL_OFFSET>,
            SetFilterFlags::<Impl, IMPL_OFFSET>,
            GetFilterFlags::<Impl, IMPL_OFFSET>,
            RemoveFilterEx::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IGraphConfig as ::windows::core::Interface>::IID
    }
}
pub trait IGraphConfigCallbackImpl: Sized {
    fn Reconfigure();
}
impl IGraphConfigCallbackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IGraphConfigCallbackImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IGraphConfigCallbackVtbl {
        unsafe extern "system" fn Reconfigure<Impl: IGraphConfigCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvcontext: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Reconfigure::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IGraphConfigCallback as ::windows::core::Interface>::IID
    }
}
pub trait IGraphVersionImpl: Sized {
    fn QueryVersion();
}
impl IGraphVersionVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IGraphVersionImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IGraphVersionVtbl {
        unsafe extern "system" fn QueryVersion<Impl: IGraphVersionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pversion: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, QueryVersion::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IGraphVersion as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IGuideDataImpl: Sized {
    fn GetServices();
    fn GetServiceProperties();
    fn GetGuideProgramIDs();
    fn GetProgramProperties();
    fn GetScheduleEntryIDs();
    fn GetScheduleEntryProperties();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IGuideDataVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IGuideDataImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IGuideDataVtbl {
        unsafe extern "system" fn GetServices<Impl: IGuideDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenumtunerequests: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceProperties<Impl: IGuideDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptunerequest: ::windows::core::RawPtr, ppenumproperties: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetGuideProgramIDs<Impl: IGuideDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, penumprograms: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProgramProperties<Impl: IGuideDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varprogramdescriptionid: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, ppenumproperties: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScheduleEntryIDs<Impl: IGuideDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, penumscheduleentries: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScheduleEntryProperties<Impl: IGuideDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varscheduleentrydescriptionid: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, ppenumproperties: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetServices::<Impl, IMPL_OFFSET>, GetServiceProperties::<Impl, IMPL_OFFSET>, GetGuideProgramIDs::<Impl, IMPL_OFFSET>, GetProgramProperties::<Impl, IMPL_OFFSET>, GetScheduleEntryIDs::<Impl, IMPL_OFFSET>, GetScheduleEntryProperties::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IGuideData as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IGuideDataEventImpl: Sized {
    fn GuideDataAcquired();
    fn ProgramChanged();
    fn ServiceChanged();
    fn ScheduleEntryChanged();
    fn ProgramDeleted();
    fn ServiceDeleted();
    fn ScheduleDeleted();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IGuideDataEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IGuideDataEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IGuideDataEventVtbl {
        unsafe extern "system" fn GuideDataAcquired<Impl: IGuideDataEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ProgramChanged<Impl: IGuideDataEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varprogramdescriptionid: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ServiceChanged<Impl: IGuideDataEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varservicedescriptionid: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ScheduleEntryChanged<Impl: IGuideDataEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varscheduleentrydescriptionid: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ProgramDeleted<Impl: IGuideDataEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varprogramdescriptionid: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ServiceDeleted<Impl: IGuideDataEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varservicedescriptionid: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ScheduleDeleted<Impl: IGuideDataEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varscheduleentrydescriptionid: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GuideDataAcquired::<Impl, IMPL_OFFSET>, ProgramChanged::<Impl, IMPL_OFFSET>, ServiceChanged::<Impl, IMPL_OFFSET>, ScheduleEntryChanged::<Impl, IMPL_OFFSET>, ProgramDeleted::<Impl, IMPL_OFFSET>, ServiceDeleted::<Impl, IMPL_OFFSET>, ScheduleDeleted::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IGuideDataEvent as ::windows::core::Interface>::IID
    }
}
pub trait IGuideDataLoaderImpl: Sized {
    fn Init();
    fn Terminate();
}
impl IGuideDataLoaderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IGuideDataLoaderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IGuideDataLoaderVtbl {
        unsafe extern "system" fn Init<Impl: IGuideDataLoaderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguidestore: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Terminate<Impl: IGuideDataLoaderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Init::<Impl, IMPL_OFFSET>, Terminate::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IGuideDataLoader as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IGuideDataPropertyImpl: Sized {
    fn Name();
    fn Language();
    fn Value();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IGuideDataPropertyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IGuideDataPropertyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IGuideDataPropertyVtbl {
        unsafe extern "system" fn Name<Impl: IGuideDataPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Language<Impl: IGuideDataPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idlang: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Value<Impl: IGuideDataPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvar: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Name::<Impl, IMPL_OFFSET>, Language::<Impl, IMPL_OFFSET>, Value::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IGuideDataProperty as ::windows::core::Interface>::IID
    }
}
pub trait IIPDVDecImpl: Sized {
    fn IPDisplay();
    fn SetIPDisplay();
}
impl IIPDVDecVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIPDVDecImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIPDVDecVtbl {
        unsafe extern "system" fn IPDisplay<Impl: IIPDVDecImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, displaypix: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetIPDisplay<Impl: IIPDVDecImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, displaypix: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, IPDisplay::<Impl, IMPL_OFFSET>, SetIPDisplay::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIPDVDec as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IISDBSLocatorImpl: Sized + IDVBSLocatorImpl + IDigitalLocatorImpl + ILocatorImpl + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IISDBSLocatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IISDBSLocatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IISDBSLocatorVtbl {
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            CarrierFrequency::<Impl, IMPL_OFFSET>,
            SetCarrierFrequency::<Impl, IMPL_OFFSET>,
            InnerFEC::<Impl, IMPL_OFFSET>,
            SetInnerFEC::<Impl, IMPL_OFFSET>,
            InnerFECRate::<Impl, IMPL_OFFSET>,
            SetInnerFECRate::<Impl, IMPL_OFFSET>,
            OuterFEC::<Impl, IMPL_OFFSET>,
            SetOuterFEC::<Impl, IMPL_OFFSET>,
            OuterFECRate::<Impl, IMPL_OFFSET>,
            SetOuterFECRate::<Impl, IMPL_OFFSET>,
            Modulation::<Impl, IMPL_OFFSET>,
            SetModulation::<Impl, IMPL_OFFSET>,
            SymbolRate::<Impl, IMPL_OFFSET>,
            SetSymbolRate::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            SignalPolarisation::<Impl, IMPL_OFFSET>,
            SetSignalPolarisation::<Impl, IMPL_OFFSET>,
            WestPosition::<Impl, IMPL_OFFSET>,
            SetWestPosition::<Impl, IMPL_OFFSET>,
            OrbitalPosition::<Impl, IMPL_OFFSET>,
            SetOrbitalPosition::<Impl, IMPL_OFFSET>,
            Azimuth::<Impl, IMPL_OFFSET>,
            SetAzimuth::<Impl, IMPL_OFFSET>,
            Elevation::<Impl, IMPL_OFFSET>,
            SetElevation::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IISDBSLocator as ::windows::core::Interface>::IID
    }
}
pub trait IISDB_BITImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetOriginalNetworkId();
    fn GetBroadcastViewPropriety();
    fn GetCountOfTableDescriptors();
    fn GetTableDescriptorByIndex();
    fn GetTableDescriptorByTag();
    fn GetCountOfRecords();
    fn GetRecordBroadcasterId();
    fn GetRecordCountOfDescriptors();
    fn GetRecordDescriptorByIndex();
    fn GetRecordDescriptorByTag();
    fn GetVersionHash();
}
impl IISDB_BITVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IISDB_BITImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IISDB_BITVtbl {
        unsafe extern "system" fn Initialize<Impl: IISDB_BITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IISDB_BITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOriginalNetworkId<Impl: IISDB_BITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBroadcastViewPropriety<Impl: IISDB_BITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Impl: IISDB_BITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Impl: IISDB_BITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Impl: IISDB_BITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IISDB_BITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordBroadcasterId<Impl: IISDB_BITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Impl: IISDB_BITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Impl: IISDB_BITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Impl: IISDB_BITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionHash<Impl: IISDB_BITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetOriginalNetworkId::<Impl, IMPL_OFFSET>,
            GetBroadcastViewPropriety::<Impl, IMPL_OFFSET>,
            GetCountOfTableDescriptors::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByTag::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordBroadcasterId::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
            GetVersionHash::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IISDB_BIT as ::windows::core::Interface>::IID
    }
}
pub trait IISDB_CDTImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetDownloadDataId();
    fn GetSectionNumber();
    fn GetOriginalNetworkId();
    fn GetDataType();
    fn GetCountOfTableDescriptors();
    fn GetTableDescriptorByIndex();
    fn GetTableDescriptorByTag();
    fn GetSizeOfDataModule();
    fn GetDataModule();
    fn GetVersionHash();
}
impl IISDB_CDTVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IISDB_CDTImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IISDB_CDTVtbl {
        unsafe extern "system" fn Initialize<Impl: IISDB_CDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr, bsectionnumber: u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IISDB_CDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDownloadDataId<Impl: IISDB_CDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSectionNumber<Impl: IISDB_CDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOriginalNetworkId<Impl: IISDB_CDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDataType<Impl: IISDB_CDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Impl: IISDB_CDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Impl: IISDB_CDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Impl: IISDB_CDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSizeOfDataModule<Impl: IISDB_CDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDataModule<Impl: IISDB_CDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbdata: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionHash<Impl: IISDB_CDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetDownloadDataId::<Impl, IMPL_OFFSET>,
            GetSectionNumber::<Impl, IMPL_OFFSET>,
            GetOriginalNetworkId::<Impl, IMPL_OFFSET>,
            GetDataType::<Impl, IMPL_OFFSET>,
            GetCountOfTableDescriptors::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByTag::<Impl, IMPL_OFFSET>,
            GetSizeOfDataModule::<Impl, IMPL_OFFSET>,
            GetDataModule::<Impl, IMPL_OFFSET>,
            GetVersionHash::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IISDB_CDT as ::windows::core::Interface>::IID
    }
}
pub trait IISDB_EMMImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetTableIdExtension();
    fn GetDataBytes();
    fn GetSharedEmmMessage();
    fn GetIndividualEmmMessage();
    fn GetVersionHash();
}
impl IISDB_EMMVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IISDB_EMMImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IISDB_EMMVtbl {
        unsafe extern "system" fn Initialize<Impl: IISDB_EMMImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IISDB_EMMImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableIdExtension<Impl: IISDB_EMMImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDataBytes<Impl: IISDB_EMMImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwbufferlength: *mut u16, pbbuffer: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSharedEmmMessage<Impl: IISDB_EMMImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwlength: *mut u16, ppbmessage: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIndividualEmmMessage<Impl: IISDB_EMMImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punknown: *mut ::core::ffi::c_void, pwlength: *mut u16, ppbmessage: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionHash<Impl: IISDB_EMMImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, GetVersionNumber::<Impl, IMPL_OFFSET>, GetTableIdExtension::<Impl, IMPL_OFFSET>, GetDataBytes::<Impl, IMPL_OFFSET>, GetSharedEmmMessage::<Impl, IMPL_OFFSET>, GetIndividualEmmMessage::<Impl, IMPL_OFFSET>, GetVersionHash::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IISDB_EMM as ::windows::core::Interface>::IID
    }
}
pub trait IISDB_LDTImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetOriginalServiceId();
    fn GetTransportStreamId();
    fn GetOriginalNetworkId();
    fn GetCountOfRecords();
    fn GetRecordDescriptionId();
    fn GetRecordCountOfDescriptors();
    fn GetRecordDescriptorByIndex();
    fn GetRecordDescriptorByTag();
    fn GetVersionHash();
}
impl IISDB_LDTVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IISDB_LDTImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IISDB_LDTVtbl {
        unsafe extern "system" fn Initialize<Impl: IISDB_LDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IISDB_LDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOriginalServiceId<Impl: IISDB_LDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTransportStreamId<Impl: IISDB_LDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOriginalNetworkId<Impl: IISDB_LDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IISDB_LDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptionId<Impl: IISDB_LDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Impl: IISDB_LDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Impl: IISDB_LDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Impl: IISDB_LDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionHash<Impl: IISDB_LDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetOriginalServiceId::<Impl, IMPL_OFFSET>,
            GetTransportStreamId::<Impl, IMPL_OFFSET>,
            GetOriginalNetworkId::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordDescriptionId::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
            GetVersionHash::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IISDB_LDT as ::windows::core::Interface>::IID
    }
}
pub trait IISDB_NBITImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetOriginalNetworkId();
    fn GetCountOfRecords();
    fn GetRecordInformationId();
    fn GetRecordInformationType();
    fn GetRecordDescriptionBodyLocation();
    fn GetRecordMessageSectionNumber();
    fn GetRecordUserDefined();
    fn GetRecordNumberOfKeys();
    fn GetRecordKeys();
    fn GetRecordCountOfDescriptors();
    fn GetRecordDescriptorByIndex();
    fn GetRecordDescriptorByTag();
    fn GetVersionHash();
}
impl IISDB_NBITVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IISDB_NBITImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IISDB_NBITVtbl {
        unsafe extern "system" fn Initialize<Impl: IISDB_NBITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IISDB_NBITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOriginalNetworkId<Impl: IISDB_NBITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IISDB_NBITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordInformationId<Impl: IISDB_NBITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordInformationType<Impl: IISDB_NBITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptionBodyLocation<Impl: IISDB_NBITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordMessageSectionNumber<Impl: IISDB_NBITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordUserDefined<Impl: IISDB_NBITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordNumberOfKeys<Impl: IISDB_NBITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordKeys<Impl: IISDB_NBITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbkeys: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Impl: IISDB_NBITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Impl: IISDB_NBITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Impl: IISDB_NBITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionHash<Impl: IISDB_NBITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetOriginalNetworkId::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordInformationId::<Impl, IMPL_OFFSET>,
            GetRecordInformationType::<Impl, IMPL_OFFSET>,
            GetRecordDescriptionBodyLocation::<Impl, IMPL_OFFSET>,
            GetRecordMessageSectionNumber::<Impl, IMPL_OFFSET>,
            GetRecordUserDefined::<Impl, IMPL_OFFSET>,
            GetRecordNumberOfKeys::<Impl, IMPL_OFFSET>,
            GetRecordKeys::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
            GetVersionHash::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IISDB_NBIT as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IISDB_SDTImpl: Sized + IDVB_SDTImpl {
    fn GetRecordEITUserDefinedFlags();
}
#[cfg(feature = "Win32_Foundation")]
impl IISDB_SDTVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IISDB_SDTImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IISDB_SDTVtbl {
        unsafe extern "system" fn GetRecordEITUserDefinedFlags<Impl: IISDB_SDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetTransportStreamId::<Impl, IMPL_OFFSET>,
            GetOriginalNetworkId::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordServiceId::<Impl, IMPL_OFFSET>,
            GetRecordEITScheduleFlag::<Impl, IMPL_OFFSET>,
            GetRecordEITPresentFollowingFlag::<Impl, IMPL_OFFSET>,
            GetRecordRunningStatus::<Impl, IMPL_OFFSET>,
            GetRecordFreeCAMode::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
            RegisterForNextTable::<Impl, IMPL_OFFSET>,
            GetNextTable::<Impl, IMPL_OFFSET>,
            RegisterForWhenCurrent::<Impl, IMPL_OFFSET>,
            ConvertNextToCurrent::<Impl, IMPL_OFFSET>,
            GetVersionHash::<Impl, IMPL_OFFSET>,
            GetRecordEITUserDefinedFlags::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IISDB_SDT as ::windows::core::Interface>::IID
    }
}
pub trait IISDB_SDTTImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetTableIdExt();
    fn GetTransportStreamId();
    fn GetOriginalNetworkId();
    fn GetServiceId();
    fn GetCountOfRecords();
    fn GetRecordGroup();
    fn GetRecordTargetVersion();
    fn GetRecordNewVersion();
    fn GetRecordDownloadLevel();
    fn GetRecordVersionIndicator();
    fn GetRecordScheduleTimeShiftInformation();
    fn GetRecordCountOfSchedules();
    fn GetRecordStartTimeByIndex();
    fn GetRecordDurationByIndex();
    fn GetRecordCountOfDescriptors();
    fn GetRecordDescriptorByIndex();
    fn GetRecordDescriptorByTag();
    fn GetVersionHash();
}
impl IISDB_SDTTVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IISDB_SDTTImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IISDB_SDTTVtbl {
        unsafe extern "system" fn Initialize<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableIdExt<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTransportStreamId<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOriginalNetworkId<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceId<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordGroup<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordTargetVersion<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordNewVersion<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDownloadLevel<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordVersionIndicator<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordScheduleTimeShiftInformation<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCountOfSchedules<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordStartTimeByIndex<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDurationByIndex<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, pmdval: *mut MPEG_TIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionHash<Impl: IISDB_SDTTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetTableIdExt::<Impl, IMPL_OFFSET>,
            GetTransportStreamId::<Impl, IMPL_OFFSET>,
            GetOriginalNetworkId::<Impl, IMPL_OFFSET>,
            GetServiceId::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordGroup::<Impl, IMPL_OFFSET>,
            GetRecordTargetVersion::<Impl, IMPL_OFFSET>,
            GetRecordNewVersion::<Impl, IMPL_OFFSET>,
            GetRecordDownloadLevel::<Impl, IMPL_OFFSET>,
            GetRecordVersionIndicator::<Impl, IMPL_OFFSET>,
            GetRecordScheduleTimeShiftInformation::<Impl, IMPL_OFFSET>,
            GetRecordCountOfSchedules::<Impl, IMPL_OFFSET>,
            GetRecordStartTimeByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDurationByIndex::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
            GetVersionHash::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IISDB_SDTT as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IIsdbAudioComponentDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetStreamContent();
    fn GetComponentType();
    fn GetComponentTag();
    fn GetStreamType();
    fn GetSimulcastGroupTag();
    fn GetESMultiLingualFlag();
    fn GetMainComponentFlag();
    fn GetQualityIndicator();
    fn GetSamplingRate();
    fn GetLanguageCode();
    fn GetLanguageCode2();
    fn GetTextW();
}
#[cfg(feature = "Win32_Foundation")]
impl IIsdbAudioComponentDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbAudioComponentDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbAudioComponentDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbAudioComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbAudioComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStreamContent<Impl: IIsdbAudioComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetComponentType<Impl: IIsdbAudioComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetComponentTag<Impl: IIsdbAudioComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStreamType<Impl: IIsdbAudioComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSimulcastGroupTag<Impl: IIsdbAudioComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetESMultiLingualFlag<Impl: IIsdbAudioComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfval: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMainComponentFlag<Impl: IIsdbAudioComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfval: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetQualityIndicator<Impl: IIsdbAudioComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSamplingRate<Impl: IIsdbAudioComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLanguageCode<Impl: IIsdbAudioComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLanguageCode2<Impl: IIsdbAudioComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextW<Impl: IIsdbAudioComponentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTag::<Impl, IMPL_OFFSET>,
            GetLength::<Impl, IMPL_OFFSET>,
            GetStreamContent::<Impl, IMPL_OFFSET>,
            GetComponentType::<Impl, IMPL_OFFSET>,
            GetComponentTag::<Impl, IMPL_OFFSET>,
            GetStreamType::<Impl, IMPL_OFFSET>,
            GetSimulcastGroupTag::<Impl, IMPL_OFFSET>,
            GetESMultiLingualFlag::<Impl, IMPL_OFFSET>,
            GetMainComponentFlag::<Impl, IMPL_OFFSET>,
            GetQualityIndicator::<Impl, IMPL_OFFSET>,
            GetSamplingRate::<Impl, IMPL_OFFSET>,
            GetLanguageCode::<Impl, IMPL_OFFSET>,
            GetLanguageCode2::<Impl, IMPL_OFFSET>,
            GetTextW::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbAudioComponentDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IIsdbCAContractInformationDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCASystemId();
    fn GetCAUnitId();
    fn GetCountOfRecords();
    fn GetRecordComponentTag();
    fn GetContractVerificationInfoLength();
    fn GetContractVerificationInfo();
    fn GetFeeNameW();
}
#[cfg(feature = "Win32_Foundation")]
impl IIsdbCAContractInformationDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbCAContractInformationDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbCAContractInformationDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbCAContractInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbCAContractInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCASystemId<Impl: IIsdbCAContractInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCAUnitId<Impl: IIsdbCAContractInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IIsdbCAContractInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordComponentTag<Impl: IIsdbCAContractInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContractVerificationInfoLength<Impl: IIsdbCAContractInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContractVerificationInfo<Impl: IIsdbCAContractInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bbuflength: u8, pbbuf: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFeeNameW<Impl: IIsdbCAContractInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTag::<Impl, IMPL_OFFSET>,
            GetLength::<Impl, IMPL_OFFSET>,
            GetCASystemId::<Impl, IMPL_OFFSET>,
            GetCAUnitId::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordComponentTag::<Impl, IMPL_OFFSET>,
            GetContractVerificationInfoLength::<Impl, IMPL_OFFSET>,
            GetContractVerificationInfo::<Impl, IMPL_OFFSET>,
            GetFeeNameW::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbCAContractInformationDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IIsdbCADescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCASystemId();
    fn GetReservedBits();
    fn GetCAPID();
    fn GetPrivateDataBytes();
}
impl IIsdbCADescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbCADescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbCADescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbCADescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbCADescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCASystemId<Impl: IIsdbCADescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetReservedBits<Impl: IIsdbCADescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCAPID<Impl: IIsdbCADescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPrivateDataBytes<Impl: IIsdbCADescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbbufferlength: *mut u8, pbbuffer: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCASystemId::<Impl, IMPL_OFFSET>, GetReservedBits::<Impl, IMPL_OFFSET>, GetCAPID::<Impl, IMPL_OFFSET>, GetPrivateDataBytes::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbCADescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IIsdbCAServiceDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCASystemId();
    fn GetCABroadcasterGroupId();
    fn GetMessageControl();
    fn GetServiceIds();
}
impl IIsdbCAServiceDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbCAServiceDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbCAServiceDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbCAServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbCAServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCASystemId<Impl: IIsdbCAServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCABroadcasterGroupId<Impl: IIsdbCAServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMessageControl<Impl: IIsdbCAServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceIds<Impl: IIsdbCAServiceDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbnumserviceids: *mut u8, pwserviceids: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCASystemId::<Impl, IMPL_OFFSET>, GetCABroadcasterGroupId::<Impl, IMPL_OFFSET>, GetMessageControl::<Impl, IMPL_OFFSET>, GetServiceIds::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbCAServiceDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IIsdbComponentGroupDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetComponentGroupType();
    fn GetCountOfRecords();
    fn GetRecordGroupId();
    fn GetRecordNumberOfCAUnit();
    fn GetRecordCAUnitCAUnitId();
    fn GetRecordCAUnitNumberOfComponents();
    fn GetRecordCAUnitComponentTag();
    fn GetRecordTotalBitRate();
    fn GetRecordTextW();
}
#[cfg(feature = "Win32_Foundation")]
impl IIsdbComponentGroupDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbComponentGroupDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbComponentGroupDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbComponentGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbComponentGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetComponentGroupType<Impl: IIsdbComponentGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IIsdbComponentGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordGroupId<Impl: IIsdbComponentGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordNumberOfCAUnit<Impl: IIsdbComponentGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCAUnitCAUnitId<Impl: IIsdbComponentGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, bcaunitindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCAUnitNumberOfComponents<Impl: IIsdbComponentGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, bcaunitindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCAUnitComponentTag<Impl: IIsdbComponentGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, bcaunitindex: u8, bcomponentindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordTotalBitRate<Impl: IIsdbComponentGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordTextW<Impl: IIsdbComponentGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, convmode: DVB_STRCONV_MODE, pbstrtext: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTag::<Impl, IMPL_OFFSET>,
            GetLength::<Impl, IMPL_OFFSET>,
            GetComponentGroupType::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordGroupId::<Impl, IMPL_OFFSET>,
            GetRecordNumberOfCAUnit::<Impl, IMPL_OFFSET>,
            GetRecordCAUnitCAUnitId::<Impl, IMPL_OFFSET>,
            GetRecordCAUnitNumberOfComponents::<Impl, IMPL_OFFSET>,
            GetRecordCAUnitComponentTag::<Impl, IMPL_OFFSET>,
            GetRecordTotalBitRate::<Impl, IMPL_OFFSET>,
            GetRecordTextW::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbComponentGroupDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IIsdbDataContentDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetDataComponentId();
    fn GetEntryComponent();
    fn GetSelectorLength();
    fn GetSelectorBytes();
    fn GetCountOfRecords();
    fn GetRecordComponentRef();
    fn GetLanguageCode();
    fn GetTextW();
}
#[cfg(feature = "Win32_Foundation")]
impl IIsdbDataContentDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbDataContentDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbDataContentDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbDataContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbDataContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDataComponentId<Impl: IIsdbDataContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEntryComponent<Impl: IIsdbDataContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSelectorLength<Impl: IIsdbDataContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSelectorBytes<Impl: IIsdbDataContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bbuflength: u8, pbbuf: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IIsdbDataContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordComponentRef<Impl: IIsdbDataContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLanguageCode<Impl: IIsdbDataContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextW<Impl: IIsdbDataContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTag::<Impl, IMPL_OFFSET>,
            GetLength::<Impl, IMPL_OFFSET>,
            GetDataComponentId::<Impl, IMPL_OFFSET>,
            GetEntryComponent::<Impl, IMPL_OFFSET>,
            GetSelectorLength::<Impl, IMPL_OFFSET>,
            GetSelectorBytes::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordComponentRef::<Impl, IMPL_OFFSET>,
            GetLanguageCode::<Impl, IMPL_OFFSET>,
            GetTextW::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbDataContentDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IIsdbDigitalCopyControlDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCopyControl();
    fn GetCountOfRecords();
    fn GetRecordCopyControl();
}
impl IIsdbDigitalCopyControlDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbDigitalCopyControlDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbDigitalCopyControlDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbDigitalCopyControlDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbDigitalCopyControlDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCopyControl<Impl: IIsdbDigitalCopyControlDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbdigitalrecordingcontroldata: *mut u8, pbcopycontroltype: *mut u8, pbapscontroldata: *mut u8, pbmaximumbitrate: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IIsdbDigitalCopyControlDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCopyControl<Impl: IIsdbDigitalCopyControlDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbcomponenttag: *mut u8, pbdigitalrecordingcontroldata: *mut u8, pbcopycontroltype: *mut u8, pbapscontroldata: *mut u8, pbmaximumbitrate: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCopyControl::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordCopyControl::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbDigitalCopyControlDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IIsdbDownloadContentDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetFlags();
    fn GetComponentSize();
    fn GetDownloadId();
    fn GetTimeOutValueDII();
    fn GetLeakRate();
    fn GetComponentTag();
    fn GetCompatiblityDescriptorLength();
    fn GetCompatiblityDescriptor();
    fn GetCountOfRecords();
    fn GetRecordModuleId();
    fn GetRecordModuleSize();
    fn GetRecordModuleInfoLength();
    fn GetRecordModuleInfo();
    fn GetTextLanguageCode();
    fn GetTextW();
}
#[cfg(feature = "Win32_Foundation")]
impl IIsdbDownloadContentDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbDownloadContentDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbDownloadContentDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFlags<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfreboot: *mut super::super::Foundation::BOOL, pfaddon: *mut super::super::Foundation::BOOL, pfcompatibility: *mut super::super::Foundation::BOOL, pfmoduleinfo: *mut super::super::Foundation::BOOL, pftextinfo: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetComponentSize<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDownloadId<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTimeOutValueDII<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLeakRate<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetComponentTag<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCompatiblityDescriptorLength<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwlength: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCompatiblityDescriptor<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppbdata: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordModuleId<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, wrecordindex: u16, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordModuleSize<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, wrecordindex: u16, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordModuleInfoLength<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, wrecordindex: u16, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordModuleInfo<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, wrecordindex: u16, ppbdata: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextLanguageCode<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, szcode: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextW<Impl: IIsdbDownloadContentDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTag::<Impl, IMPL_OFFSET>,
            GetLength::<Impl, IMPL_OFFSET>,
            GetFlags::<Impl, IMPL_OFFSET>,
            GetComponentSize::<Impl, IMPL_OFFSET>,
            GetDownloadId::<Impl, IMPL_OFFSET>,
            GetTimeOutValueDII::<Impl, IMPL_OFFSET>,
            GetLeakRate::<Impl, IMPL_OFFSET>,
            GetComponentTag::<Impl, IMPL_OFFSET>,
            GetCompatiblityDescriptorLength::<Impl, IMPL_OFFSET>,
            GetCompatiblityDescriptor::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordModuleId::<Impl, IMPL_OFFSET>,
            GetRecordModuleSize::<Impl, IMPL_OFFSET>,
            GetRecordModuleInfoLength::<Impl, IMPL_OFFSET>,
            GetRecordModuleInfo::<Impl, IMPL_OFFSET>,
            GetTextLanguageCode::<Impl, IMPL_OFFSET>,
            GetTextW::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbDownloadContentDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IIsdbEmergencyInformationDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetCountOfRecords();
    fn GetServiceId();
    fn GetStartEndFlag();
    fn GetSignalLevel();
    fn GetAreaCode();
}
impl IIsdbEmergencyInformationDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbEmergencyInformationDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbEmergencyInformationDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbEmergencyInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbEmergencyInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IIsdbEmergencyInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceId<Impl: IIsdbEmergencyInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStartEndFlag<Impl: IIsdbEmergencyInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSignalLevel<Impl: IIsdbEmergencyInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAreaCode<Impl: IIsdbEmergencyInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, ppwval: *mut *mut u16, pbnumareacodes: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetServiceId::<Impl, IMPL_OFFSET>, GetStartEndFlag::<Impl, IMPL_OFFSET>, GetSignalLevel::<Impl, IMPL_OFFSET>, GetAreaCode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbEmergencyInformationDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IIsdbEventGroupDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetGroupType();
    fn GetCountOfRecords();
    fn GetRecordEvent();
    fn GetCountOfRefRecords();
    fn GetRefRecordEvent();
}
impl IIsdbEventGroupDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbEventGroupDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbEventGroupDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbEventGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbEventGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetGroupType<Impl: IIsdbEventGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IIsdbEventGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordEvent<Impl: IIsdbEventGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwserviceid: *mut u16, pweventid: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRefRecords<Impl: IIsdbEventGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRefRecordEvent<Impl: IIsdbEventGroupDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pworiginalnetworkid: *mut u16, pwtransportstreamid: *mut u16, pwserviceid: *mut u16, pweventid: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetGroupType::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordEvent::<Impl, IMPL_OFFSET>, GetCountOfRefRecords::<Impl, IMPL_OFFSET>, GetRefRecordEvent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbEventGroupDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IIsdbHierarchicalTransmissionDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetFutureUse1();
    fn GetQualityLevel();
    fn GetFutureUse2();
    fn GetReferencePid();
}
impl IIsdbHierarchicalTransmissionDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbHierarchicalTransmissionDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbHierarchicalTransmissionDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbHierarchicalTransmissionDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbHierarchicalTransmissionDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFutureUse1<Impl: IIsdbHierarchicalTransmissionDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetQualityLevel<Impl: IIsdbHierarchicalTransmissionDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFutureUse2<Impl: IIsdbHierarchicalTransmissionDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetReferencePid<Impl: IIsdbHierarchicalTransmissionDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetFutureUse1::<Impl, IMPL_OFFSET>, GetQualityLevel::<Impl, IMPL_OFFSET>, GetFutureUse2::<Impl, IMPL_OFFSET>, GetReferencePid::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbHierarchicalTransmissionDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IIsdbLogoTransmissionDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetLogoTransmissionType();
    fn GetLogoId();
    fn GetLogoVersion();
    fn GetDownloadDataId();
    fn GetLogoCharW();
}
#[cfg(feature = "Win32_Foundation")]
impl IIsdbLogoTransmissionDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbLogoTransmissionDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbLogoTransmissionDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbLogoTransmissionDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbLogoTransmissionDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogoTransmissionType<Impl: IIsdbLogoTransmissionDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogoId<Impl: IIsdbLogoTransmissionDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogoVersion<Impl: IIsdbLogoTransmissionDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDownloadDataId<Impl: IIsdbLogoTransmissionDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogoCharW<Impl: IIsdbLogoTransmissionDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrchar: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetLogoTransmissionType::<Impl, IMPL_OFFSET>, GetLogoId::<Impl, IMPL_OFFSET>, GetLogoVersion::<Impl, IMPL_OFFSET>, GetDownloadDataId::<Impl, IMPL_OFFSET>, GetLogoCharW::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbLogoTransmissionDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IIsdbSIParameterDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetParameterVersion();
    fn GetUpdateTime();
    fn GetRecordNumberOfTable();
    fn GetTableId();
    fn GetTableDescriptionLength();
    fn GetTableDescriptionBytes();
}
impl IIsdbSIParameterDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbSIParameterDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbSIParameterDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbSIParameterDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbSIParameterDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParameterVersion<Impl: IIsdbSIParameterDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetUpdateTime<Impl: IIsdbSIParameterDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut MPEG_DATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordNumberOfTable<Impl: IIsdbSIParameterDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableId<Impl: IIsdbSIParameterDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptionLength<Impl: IIsdbSIParameterDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptionBytes<Impl: IIsdbSIParameterDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbbufferlength: *mut u8, pbbuffer: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetParameterVersion::<Impl, IMPL_OFFSET>, GetUpdateTime::<Impl, IMPL_OFFSET>, GetRecordNumberOfTable::<Impl, IMPL_OFFSET>, GetTableId::<Impl, IMPL_OFFSET>, GetTableDescriptionLength::<Impl, IMPL_OFFSET>, GetTableDescriptionBytes::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbSIParameterDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IIsdbSeriesDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetSeriesId();
    fn GetRepeatLabel();
    fn GetProgramPattern();
    fn GetExpireDate();
    fn GetEpisodeNumber();
    fn GetLastEpisodeNumber();
    fn GetSeriesNameW();
}
#[cfg(feature = "Win32_Foundation")]
impl IIsdbSeriesDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbSeriesDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbSeriesDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbSeriesDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbSeriesDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSeriesId<Impl: IIsdbSeriesDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRepeatLabel<Impl: IIsdbSeriesDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProgramPattern<Impl: IIsdbSeriesDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpireDate<Impl: IIsdbSeriesDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfvalid: *mut super::super::Foundation::BOOL, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEpisodeNumber<Impl: IIsdbSeriesDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastEpisodeNumber<Impl: IIsdbSeriesDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSeriesNameW<Impl: IIsdbSeriesDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTag::<Impl, IMPL_OFFSET>,
            GetLength::<Impl, IMPL_OFFSET>,
            GetSeriesId::<Impl, IMPL_OFFSET>,
            GetRepeatLabel::<Impl, IMPL_OFFSET>,
            GetProgramPattern::<Impl, IMPL_OFFSET>,
            GetExpireDate::<Impl, IMPL_OFFSET>,
            GetEpisodeNumber::<Impl, IMPL_OFFSET>,
            GetLastEpisodeNumber::<Impl, IMPL_OFFSET>,
            GetSeriesNameW::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbSeriesDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IIsdbSiParser2Impl: Sized + IDvbSiParser2Impl + IDvbSiParserImpl {
    fn GetSDT();
    fn GetBIT();
    fn GetNBIT();
    fn GetLDT();
    fn GetSDTT();
    fn GetCDT();
    fn GetEMM();
}
impl IIsdbSiParser2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbSiParser2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbSiParser2Vtbl {
        unsafe extern "system" fn GetSDT<Impl: IIsdbSiParser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tableid: u8, pwtransportstreamid: *const u16, ppsdt: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBIT<Impl: IIsdbSiParser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tableid: u8, pworiginalnetworkid: *const u16, ppbit: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNBIT<Impl: IIsdbSiParser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tableid: u8, pworiginalnetworkid: *const u16, ppnbit: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLDT<Impl: IIsdbSiParser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tableid: u8, pworiginalserviceid: *const u16, ppldt: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSDTT<Impl: IIsdbSiParser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tableid: u8, pwtableidext: *const u16, ppsdtt: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCDT<Impl: IIsdbSiParser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tableid: u8, bsectionnumber: u8, pwdownloaddataid: *const u16, ppcdt: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEMM<Impl: IIsdbSiParser2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pid: u16, wtableidext: u16, ppemm: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetPAT::<Impl, IMPL_OFFSET>,
            GetCAT::<Impl, IMPL_OFFSET>,
            GetPMT::<Impl, IMPL_OFFSET>,
            GetTSDT::<Impl, IMPL_OFFSET>,
            GetNIT::<Impl, IMPL_OFFSET>,
            GetSDT::<Impl, IMPL_OFFSET>,
            GetEIT::<Impl, IMPL_OFFSET>,
            GetBAT::<Impl, IMPL_OFFSET>,
            GetRST::<Impl, IMPL_OFFSET>,
            GetST::<Impl, IMPL_OFFSET>,
            GetTDT::<Impl, IMPL_OFFSET>,
            GetTOT::<Impl, IMPL_OFFSET>,
            GetDIT::<Impl, IMPL_OFFSET>,
            GetSIT::<Impl, IMPL_OFFSET>,
            GetEIT2::<Impl, IMPL_OFFSET>,
            GetSDT::<Impl, IMPL_OFFSET>,
            GetBIT::<Impl, IMPL_OFFSET>,
            GetNBIT::<Impl, IMPL_OFFSET>,
            GetLDT::<Impl, IMPL_OFFSET>,
            GetSDTT::<Impl, IMPL_OFFSET>,
            GetCDT::<Impl, IMPL_OFFSET>,
            GetEMM::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbSiParser2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IIsdbTSInformationDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetRemoteControlKeyId();
    fn GetTSNameW();
    fn GetCountOfRecords();
    fn GetRecordTransmissionTypeInfo();
    fn GetRecordNumberOfServices();
    fn GetRecordServiceIdByIndex();
}
#[cfg(feature = "Win32_Foundation")]
impl IIsdbTSInformationDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbTSInformationDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbTSInformationDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbTSInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbTSInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRemoteControlKeyId<Impl: IIsdbTSInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTSNameW<Impl: IIsdbTSInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IIsdbTSInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordTransmissionTypeInfo<Impl: IIsdbTSInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordNumberOfServices<Impl: IIsdbTSInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordServiceIdByIndex<Impl: IIsdbTSInformationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, bserviceindex: u8, pdwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTag::<Impl, IMPL_OFFSET>,
            GetLength::<Impl, IMPL_OFFSET>,
            GetRemoteControlKeyId::<Impl, IMPL_OFFSET>,
            GetTSNameW::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordTransmissionTypeInfo::<Impl, IMPL_OFFSET>,
            GetRecordNumberOfServices::<Impl, IMPL_OFFSET>,
            GetRecordServiceIdByIndex::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbTSInformationDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IIsdbTerrestrialDeliverySystemDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetAreaCode();
    fn GetGuardInterval();
    fn GetTransmissionMode();
    fn GetCountOfRecords();
    fn GetRecordFrequency();
}
impl IIsdbTerrestrialDeliverySystemDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIsdbTerrestrialDeliverySystemDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIsdbTerrestrialDeliverySystemDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IIsdbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IIsdbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAreaCode<Impl: IIsdbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetGuardInterval<Impl: IIsdbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTransmissionMode<Impl: IIsdbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IIsdbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordFrequency<Impl: IIsdbTerrestrialDeliverySystemDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetAreaCode::<Impl, IMPL_OFFSET>, GetGuardInterval::<Impl, IMPL_OFFSET>, GetTransmissionMode::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordFrequency::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIsdbTerrestrialDeliverySystemDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IKsNodeControlImpl: Sized {
    fn SetNodeId();
    fn SetKsControl();
}
impl IKsNodeControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IKsNodeControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IKsNodeControlVtbl {
        unsafe extern "system" fn SetNodeId<Impl: IKsNodeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwnodeid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKsControl<Impl: IKsNodeControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pkscontrol: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetNodeId::<Impl, IMPL_OFFSET>, SetKsControl::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IKsNodeControl as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_KernelStreaming"))]
pub trait IKsTopologyInfoImpl: Sized {
    fn NumCategories();
    fn Category();
    fn NumConnections();
    fn ConnectionInfo();
    fn NodeName();
    fn NumNodes();
    fn NodeType();
    fn CreateNodeInstance();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_KernelStreaming"))]
impl IKsTopologyInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IKsTopologyInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IKsTopologyInfoVtbl {
        unsafe extern "system" fn NumCategories<Impl: IKsTopologyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwnumcategories: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Category<Impl: IKsTopologyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, pcategory: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NumConnections<Impl: IKsTopologyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwnumconnections: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectionInfo<Impl: IKsTopologyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, pconnectioninfo: *mut super::KernelStreaming::KSTOPOLOGY_CONNECTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NodeName<Impl: IKsTopologyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwnodeid: u32, pwchnodename: super::super::Foundation::PWSTR, dwbufsize: u32, pdwnamelen: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NumNodes<Impl: IKsTopologyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwnumnodes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NodeType<Impl: IKsTopologyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwnodeid: u32, pnodetype: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateNodeInstance<Impl: IKsTopologyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwnodeid: u32, iid: *const ::windows::core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, NumCategories::<Impl, IMPL_OFFSET>, Category::<Impl, IMPL_OFFSET>, NumConnections::<Impl, IMPL_OFFSET>, ConnectionInfo::<Impl, IMPL_OFFSET>, NodeName::<Impl, IMPL_OFFSET>, NumNodes::<Impl, IMPL_OFFSET>, NodeType::<Impl, IMPL_OFFSET>, CreateNodeInstance::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IKsTopologyInfo as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait ILanguageComponentTypeImpl: Sized + IComponentTypeImpl + IDispatchImpl {
    fn LangID();
    fn SetLangID();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl ILanguageComponentTypeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ILanguageComponentTypeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ILanguageComponentTypeVtbl {
        unsafe extern "system" fn LangID<Impl: ILanguageComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, langid: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLangID<Impl: ILanguageComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, langid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            SetCategory::<Impl, IMPL_OFFSET>,
            MediaMajorType::<Impl, IMPL_OFFSET>,
            SetMediaMajorType::<Impl, IMPL_OFFSET>,
            _MediaMajorType::<Impl, IMPL_OFFSET>,
            Set_MediaMajorType::<Impl, IMPL_OFFSET>,
            MediaSubType::<Impl, IMPL_OFFSET>,
            SetMediaSubType::<Impl, IMPL_OFFSET>,
            _MediaSubType::<Impl, IMPL_OFFSET>,
            Set_MediaSubType::<Impl, IMPL_OFFSET>,
            MediaFormatType::<Impl, IMPL_OFFSET>,
            SetMediaFormatType::<Impl, IMPL_OFFSET>,
            _MediaFormatType::<Impl, IMPL_OFFSET>,
            Set_MediaFormatType::<Impl, IMPL_OFFSET>,
            MediaType::<Impl, IMPL_OFFSET>,
            SetMediaType::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            LangID::<Impl, IMPL_OFFSET>,
            SetLangID::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ILanguageComponentType as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait ILocatorImpl: Sized + IDispatchImpl {
    fn CarrierFrequency();
    fn SetCarrierFrequency();
    fn InnerFEC();
    fn SetInnerFEC();
    fn InnerFECRate();
    fn SetInnerFECRate();
    fn OuterFEC();
    fn SetOuterFEC();
    fn OuterFECRate();
    fn SetOuterFECRate();
    fn Modulation();
    fn SetModulation();
    fn SymbolRate();
    fn SetSymbolRate();
    fn Clone();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl ILocatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ILocatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ILocatorVtbl {
        unsafe extern "system" fn CarrierFrequency<Impl: ILocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frequency: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCarrierFrequency<Impl: ILocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frequency: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InnerFEC<Impl: ILocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fec: *mut FECMethod) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInnerFEC<Impl: ILocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fec: FECMethod) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InnerFECRate<Impl: ILocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fec: *mut BinaryConvolutionCodeRate) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInnerFECRate<Impl: ILocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fec: BinaryConvolutionCodeRate) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OuterFEC<Impl: ILocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fec: *mut FECMethod) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOuterFEC<Impl: ILocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fec: FECMethod) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OuterFECRate<Impl: ILocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fec: *mut BinaryConvolutionCodeRate) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOuterFECRate<Impl: ILocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fec: BinaryConvolutionCodeRate) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Modulation<Impl: ILocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modulation: *mut ModulationType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetModulation<Impl: ILocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modulation: ModulationType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SymbolRate<Impl: ILocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rate: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSymbolRate<Impl: ILocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rate: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: ILocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newlocator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            CarrierFrequency::<Impl, IMPL_OFFSET>,
            SetCarrierFrequency::<Impl, IMPL_OFFSET>,
            InnerFEC::<Impl, IMPL_OFFSET>,
            SetInnerFEC::<Impl, IMPL_OFFSET>,
            InnerFECRate::<Impl, IMPL_OFFSET>,
            SetInnerFECRate::<Impl, IMPL_OFFSET>,
            OuterFEC::<Impl, IMPL_OFFSET>,
            SetOuterFEC::<Impl, IMPL_OFFSET>,
            OuterFECRate::<Impl, IMPL_OFFSET>,
            SetOuterFECRate::<Impl, IMPL_OFFSET>,
            Modulation::<Impl, IMPL_OFFSET>,
            SetModulation::<Impl, IMPL_OFFSET>,
            SymbolRate::<Impl, IMPL_OFFSET>,
            SetSymbolRate::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ILocator as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMPEG2ComponentImpl: Sized + IComponentImpl + IDispatchImpl {
    fn PID();
    fn SetPID();
    fn PCRPID();
    fn SetPCRPID();
    fn ProgramNumber();
    fn SetProgramNumber();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMPEG2ComponentVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMPEG2ComponentImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMPEG2ComponentVtbl {
        unsafe extern "system" fn PID<Impl: IMPEG2ComponentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pid: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPID<Impl: IMPEG2ComponentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PCRPID<Impl: IMPEG2ComponentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcrpid: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPCRPID<Impl: IMPEG2ComponentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcrpid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ProgramNumber<Impl: IMPEG2ComponentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, programnumber: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProgramNumber<Impl: IMPEG2ComponentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, programnumber: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Type::<Impl, IMPL_OFFSET>,
            SetType::<Impl, IMPL_OFFSET>,
            DescLangID::<Impl, IMPL_OFFSET>,
            SetDescLangID::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetStatus::<Impl, IMPL_OFFSET>,
            Description::<Impl, IMPL_OFFSET>,
            SetDescription::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            PID::<Impl, IMPL_OFFSET>,
            SetPID::<Impl, IMPL_OFFSET>,
            PCRPID::<Impl, IMPL_OFFSET>,
            SetPCRPID::<Impl, IMPL_OFFSET>,
            ProgramNumber::<Impl, IMPL_OFFSET>,
            SetProgramNumber::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMPEG2Component as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMPEG2ComponentTypeImpl: Sized + ILanguageComponentTypeImpl + IComponentTypeImpl + IDispatchImpl {
    fn StreamType();
    fn SetStreamType();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMPEG2ComponentTypeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMPEG2ComponentTypeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMPEG2ComponentTypeVtbl {
        unsafe extern "system" fn StreamType<Impl: IMPEG2ComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mp2streamtype: *mut MPEG2StreamType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetStreamType<Impl: IMPEG2ComponentTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mp2streamtype: MPEG2StreamType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            SetCategory::<Impl, IMPL_OFFSET>,
            MediaMajorType::<Impl, IMPL_OFFSET>,
            SetMediaMajorType::<Impl, IMPL_OFFSET>,
            _MediaMajorType::<Impl, IMPL_OFFSET>,
            Set_MediaMajorType::<Impl, IMPL_OFFSET>,
            MediaSubType::<Impl, IMPL_OFFSET>,
            SetMediaSubType::<Impl, IMPL_OFFSET>,
            _MediaSubType::<Impl, IMPL_OFFSET>,
            Set_MediaSubType::<Impl, IMPL_OFFSET>,
            MediaFormatType::<Impl, IMPL_OFFSET>,
            SetMediaFormatType::<Impl, IMPL_OFFSET>,
            _MediaFormatType::<Impl, IMPL_OFFSET>,
            Set_MediaFormatType::<Impl, IMPL_OFFSET>,
            MediaType::<Impl, IMPL_OFFSET>,
            SetMediaType::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            LangID::<Impl, IMPL_OFFSET>,
            SetLangID::<Impl, IMPL_OFFSET>,
            StreamType::<Impl, IMPL_OFFSET>,
            SetStreamType::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMPEG2ComponentType as ::windows::core::Interface>::IID
    }
}
pub trait IMPEG2PIDMapImpl: Sized {
    fn MapPID();
    fn UnmapPID();
    fn EnumPIDMap();
}
impl IMPEG2PIDMapVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMPEG2PIDMapImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMPEG2PIDMapVtbl {
        unsafe extern "system" fn MapPID<Impl: IMPEG2PIDMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, culpid: u32, pulpid: *const u32, mediasamplecontent: MEDIA_SAMPLE_CONTENT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnmapPID<Impl: IMPEG2PIDMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, culpid: u32, pulpid: *const u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumPIDMap<Impl: IMPEG2PIDMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pienumpidmap: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, MapPID::<Impl, IMPL_OFFSET>, UnmapPID::<Impl, IMPL_OFFSET>, EnumPIDMap::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMPEG2PIDMap as ::windows::core::Interface>::IID
    }
}
pub trait IMPEG2StreamIdMapImpl: Sized {
    fn MapStreamId();
    fn UnmapStreamId();
    fn EnumStreamIdMap();
}
impl IMPEG2StreamIdMapVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMPEG2StreamIdMapImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMPEG2StreamIdMapVtbl {
        unsafe extern "system" fn MapStreamId<Impl: IMPEG2StreamIdMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulstreamid: u32, mediasamplecontent: u32, ulsubstreamfiltervalue: u32, idataoffset: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnmapStreamId<Impl: IMPEG2StreamIdMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, culstreamid: u32, pulstreamid: *const u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumStreamIdMap<Impl: IMPEG2StreamIdMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppienumstreamidmap: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, MapStreamId::<Impl, IMPL_OFFSET>, UnmapStreamId::<Impl, IMPL_OFFSET>, EnumStreamIdMap::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMPEG2StreamIdMap as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMPEG2TuneRequestImpl: Sized + ITuneRequestImpl + IDispatchImpl {
    fn TSID();
    fn SetTSID();
    fn ProgNo();
    fn SetProgNo();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMPEG2TuneRequestVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMPEG2TuneRequestImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMPEG2TuneRequestVtbl {
        unsafe extern "system" fn TSID<Impl: IMPEG2TuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tsid: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTSID<Impl: IMPEG2TuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tsid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ProgNo<Impl: IMPEG2TuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, progno: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProgNo<Impl: IMPEG2TuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, progno: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            TuningSpace::<Impl, IMPL_OFFSET>,
            Components::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
            Locator::<Impl, IMPL_OFFSET>,
            SetLocator::<Impl, IMPL_OFFSET>,
            TSID::<Impl, IMPL_OFFSET>,
            SetTSID::<Impl, IMPL_OFFSET>,
            ProgNo::<Impl, IMPL_OFFSET>,
            SetProgNo::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMPEG2TuneRequest as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMPEG2TuneRequestFactoryImpl: Sized + IDispatchImpl {
    fn CreateTuneRequest();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMPEG2TuneRequestFactoryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMPEG2TuneRequestFactoryImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMPEG2TuneRequestFactoryVtbl {
        unsafe extern "system" fn CreateTuneRequest<Impl: IMPEG2TuneRequestFactoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tuningspace: ::windows::core::RawPtr, tunerequest: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, CreateTuneRequest::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMPEG2TuneRequestFactory as ::windows::core::Interface>::IID
    }
}
pub trait IMPEG2TuneRequestSupportImpl: Sized {}
impl IMPEG2TuneRequestSupportVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMPEG2TuneRequestSupportImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMPEG2TuneRequestSupportVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMPEG2TuneRequestSupport as ::windows::core::Interface>::IID
    }
}
pub trait IMPEG2_TIF_CONTROLImpl: Sized {
    fn RegisterTIF();
    fn UnregisterTIF();
    fn AddPIDs();
    fn DeletePIDs();
    fn GetPIDCount();
    fn GetPIDs();
}
impl IMPEG2_TIF_CONTROLVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMPEG2_TIF_CONTROLImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMPEG2_TIF_CONTROLVtbl {
        unsafe extern "system" fn RegisterTIF<Impl: IMPEG2_TIF_CONTROLImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punktif: *mut ::core::ffi::c_void, ppvregistrationcontext: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnregisterTIF<Impl: IMPEG2_TIF_CONTROLImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvregistrationcontext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddPIDs<Impl: IMPEG2_TIF_CONTROLImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcpids: u32, pulpids: *const u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DeletePIDs<Impl: IMPEG2_TIF_CONTROLImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcpids: u32, pulpids: *const u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPIDCount<Impl: IMPEG2_TIF_CONTROLImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcpids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPIDs<Impl: IMPEG2_TIF_CONTROLImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcpids: *mut u32, pulpids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, RegisterTIF::<Impl, IMPL_OFFSET>, UnregisterTIF::<Impl, IMPL_OFFSET>, AddPIDs::<Impl, IMPL_OFFSET>, DeletePIDs::<Impl, IMPL_OFFSET>, GetPIDCount::<Impl, IMPL_OFFSET>, GetPIDs::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMPEG2_TIF_CONTROL as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSEventBinderImpl: Sized + IDispatchImpl {
    fn Bind();
    fn Unbind();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSEventBinderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSEventBinderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSEventBinderVtbl {
        unsafe extern "system" fn Bind<Impl: IMSEventBinderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, peventobject: ::windows::core::RawPtr, eventname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, eventhandler: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, cancelid: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Unbind<Impl: IMSEventBinderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cancelcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, Bind::<Impl, IMPL_OFFSET>, Unbind::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSEventBinder as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidAnalogTunerImpl: Sized + IMSVidTunerImpl + IMSVidVideoInputDeviceImpl + IMSVidInputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn Channel();
    fn SetChannel();
    fn VideoFrequency();
    fn AudioFrequency();
    fn CountryCode();
    fn SetCountryCode();
    fn SAP();
    fn SetSAP();
    fn ChannelAvailable();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidAnalogTunerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidAnalogTunerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidAnalogTunerVtbl {
        unsafe extern "system" fn Channel<Impl: IMSVidAnalogTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, channel: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetChannel<Impl: IMSVidAnalogTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, channel: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VideoFrequency<Impl: IMSVidAnalogTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcc: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AudioFrequency<Impl: IMSVidAnalogTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcc: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CountryCode<Impl: IMSVidAnalogTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcc: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCountryCode<Impl: IMSVidAnalogTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcc: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SAP<Impl: IMSVidAnalogTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfsapon: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSAP<Impl: IMSVidAnalogTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fsapon: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChannelAvailable<Impl: IMSVidAnalogTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, nchannel: i32, signalstrength: *mut i32, fsignalpresent: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            IsViewable::<Impl, IMPL_OFFSET>,
            View::<Impl, IMPL_OFFSET>,
            Tune::<Impl, IMPL_OFFSET>,
            SetTune::<Impl, IMPL_OFFSET>,
            TuningSpace::<Impl, IMPL_OFFSET>,
            SetTuningSpace::<Impl, IMPL_OFFSET>,
            Channel::<Impl, IMPL_OFFSET>,
            SetChannel::<Impl, IMPL_OFFSET>,
            VideoFrequency::<Impl, IMPL_OFFSET>,
            AudioFrequency::<Impl, IMPL_OFFSET>,
            CountryCode::<Impl, IMPL_OFFSET>,
            SetCountryCode::<Impl, IMPL_OFFSET>,
            SAP::<Impl, IMPL_OFFSET>,
            SetSAP::<Impl, IMPL_OFFSET>,
            ChannelAvailable::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidAnalogTuner as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidAnalogTuner2Impl: Sized + IMSVidAnalogTunerImpl + IMSVidTunerImpl + IMSVidVideoInputDeviceImpl + IMSVidInputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn TVFormats();
    fn TunerModes();
    fn NumAuxInputs();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidAnalogTuner2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidAnalogTuner2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidAnalogTuner2Vtbl {
        unsafe extern "system" fn TVFormats<Impl: IMSVidAnalogTuner2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, formats: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TunerModes<Impl: IMSVidAnalogTuner2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modes: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NumAuxInputs<Impl: IMSVidAnalogTuner2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, inputs: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            IsViewable::<Impl, IMPL_OFFSET>,
            View::<Impl, IMPL_OFFSET>,
            Tune::<Impl, IMPL_OFFSET>,
            SetTune::<Impl, IMPL_OFFSET>,
            TuningSpace::<Impl, IMPL_OFFSET>,
            SetTuningSpace::<Impl, IMPL_OFFSET>,
            Channel::<Impl, IMPL_OFFSET>,
            SetChannel::<Impl, IMPL_OFFSET>,
            VideoFrequency::<Impl, IMPL_OFFSET>,
            AudioFrequency::<Impl, IMPL_OFFSET>,
            CountryCode::<Impl, IMPL_OFFSET>,
            SetCountryCode::<Impl, IMPL_OFFSET>,
            SAP::<Impl, IMPL_OFFSET>,
            SetSAP::<Impl, IMPL_OFFSET>,
            ChannelAvailable::<Impl, IMPL_OFFSET>,
            TVFormats::<Impl, IMPL_OFFSET>,
            TunerModes::<Impl, IMPL_OFFSET>,
            NumAuxInputs::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidAnalogTuner2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidAnalogTunerEventImpl: Sized + IMSVidTunerEventImpl + IMSVidInputDeviceEventImpl + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidAnalogTunerEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidAnalogTunerEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidAnalogTunerEventVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, TuneChanged::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidAnalogTunerEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidAudioRendererImpl: Sized + IMSVidOutputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn SetVolume();
    fn Volume();
    fn SetBalance();
    fn Balance();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidAudioRendererVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidAudioRendererImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidAudioRendererVtbl {
        unsafe extern "system" fn SetVolume<Impl: IMSVidAudioRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lvol: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Volume<Impl: IMSVidAudioRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lvol: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBalance<Impl: IMSVidAudioRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lbal: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Balance<Impl: IMSVidAudioRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lbal: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            SetVolume::<Impl, IMPL_OFFSET>,
            Volume::<Impl, IMPL_OFFSET>,
            SetBalance::<Impl, IMPL_OFFSET>,
            Balance::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidAudioRenderer as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidAudioRendererDevicesImpl: Sized + IDispatchImpl {
    fn Count();
    fn _NewEnum();
    fn Item();
    fn Add();
    fn Remove();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidAudioRendererDevicesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidAudioRendererDevicesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidAudioRendererDevicesVtbl {
        unsafe extern "system" fn Count<Impl: IMSVidAudioRendererDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _NewEnum<Impl: IMSVidAudioRendererDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Item<Impl: IMSVidAudioRendererDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, v: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, pdb: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Add<Impl: IMSVidAudioRendererDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Remove<Impl: IMSVidAudioRendererDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, v: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, Count::<Impl, IMPL_OFFSET>, _NewEnum::<Impl, IMPL_OFFSET>, Item::<Impl, IMPL_OFFSET>, Add::<Impl, IMPL_OFFSET>, Remove::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidAudioRendererDevices as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidAudioRendererEventImpl: Sized + IMSVidOutputDeviceEventImpl + IMSVidDeviceEventImpl + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidAudioRendererEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidAudioRendererEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidAudioRendererEventVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, StateChange::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidAudioRendererEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidAudioRendererEvent2Impl: Sized + IMSVidAudioRendererEventImpl + IMSVidOutputDeviceEventImpl + IMSVidDeviceEventImpl + IDispatchImpl {
    fn AVDecAudioDualMono();
    fn AVAudioSampleRate();
    fn AVAudioChannelConfig();
    fn AVAudioChannelCount();
    fn AVDecCommonMeanBitRate();
    fn AVDDSurroundMode();
    fn AVDecCommonInputFormat();
    fn AVDecCommonOutputFormat();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidAudioRendererEvent2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidAudioRendererEvent2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidAudioRendererEvent2Vtbl {
        unsafe extern "system" fn AVDecAudioDualMono<Impl: IMSVidAudioRendererEvent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AVAudioSampleRate<Impl: IMSVidAudioRendererEvent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AVAudioChannelConfig<Impl: IMSVidAudioRendererEvent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AVAudioChannelCount<Impl: IMSVidAudioRendererEvent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AVDecCommonMeanBitRate<Impl: IMSVidAudioRendererEvent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AVDDSurroundMode<Impl: IMSVidAudioRendererEvent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AVDecCommonInputFormat<Impl: IMSVidAudioRendererEvent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AVDecCommonOutputFormat<Impl: IMSVidAudioRendererEvent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            StateChange::<Impl, IMPL_OFFSET>,
            AVDecAudioDualMono::<Impl, IMPL_OFFSET>,
            AVAudioSampleRate::<Impl, IMPL_OFFSET>,
            AVAudioChannelConfig::<Impl, IMPL_OFFSET>,
            AVAudioChannelCount::<Impl, IMPL_OFFSET>,
            AVDecCommonMeanBitRate::<Impl, IMPL_OFFSET>,
            AVDDSurroundMode::<Impl, IMPL_OFFSET>,
            AVDecCommonInputFormat::<Impl, IMPL_OFFSET>,
            AVDecCommonOutputFormat::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidAudioRendererEvent2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidClosedCaptioningImpl: Sized + IMSVidFeatureImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn Enable();
    fn SetEnable();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidClosedCaptioningVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidClosedCaptioningImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidClosedCaptioningVtbl {
        unsafe extern "system" fn Enable<Impl: IMSVidClosedCaptioningImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, on: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEnable<Impl: IMSVidClosedCaptioningImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, on: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            Enable::<Impl, IMPL_OFFSET>,
            SetEnable::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidClosedCaptioning as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidClosedCaptioning2Impl: Sized + IMSVidClosedCaptioningImpl + IMSVidFeatureImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn Service();
    fn SetService();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidClosedCaptioning2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidClosedCaptioning2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidClosedCaptioning2Vtbl {
        unsafe extern "system" fn Service<Impl: IMSVidClosedCaptioning2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, on: *mut MSVidCCService) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetService<Impl: IMSVidClosedCaptioning2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, on: MSVidCCService) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            Enable::<Impl, IMPL_OFFSET>,
            SetEnable::<Impl, IMPL_OFFSET>,
            Service::<Impl, IMPL_OFFSET>,
            SetService::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidClosedCaptioning2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidClosedCaptioning3Impl: Sized + IMSVidClosedCaptioning2Impl + IMSVidClosedCaptioningImpl + IMSVidFeatureImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn TeleTextFilter();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidClosedCaptioning3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidClosedCaptioning3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidClosedCaptioning3Vtbl {
        unsafe extern "system" fn TeleTextFilter<Impl: IMSVidClosedCaptioning3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkttfilter: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            Enable::<Impl, IMPL_OFFSET>,
            SetEnable::<Impl, IMPL_OFFSET>,
            Service::<Impl, IMPL_OFFSET>,
            SetService::<Impl, IMPL_OFFSET>,
            TeleTextFilter::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidClosedCaptioning3 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IMSVidCompositionSegmentImpl: Sized + IMSVidGraphSegmentImpl + IPersistImpl {
    fn Compose();
    fn Up();
    fn Down();
}
#[cfg(feature = "Win32_System_Com")]
impl IMSVidCompositionSegmentVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidCompositionSegmentImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidCompositionSegmentVtbl {
        unsafe extern "system" fn Compose<Impl: IMSVidCompositionSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, upstream: ::windows::core::RawPtr, downstream: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Up<Impl: IMSVidCompositionSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, upstream: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Down<Impl: IMSVidCompositionSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, downstream: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetClassID::<Impl, IMPL_OFFSET>,
            Init::<Impl, IMPL_OFFSET>,
            SetInit::<Impl, IMPL_OFFSET>,
            EnumFilters::<Impl, IMPL_OFFSET>,
            Container::<Impl, IMPL_OFFSET>,
            SetContainer::<Impl, IMPL_OFFSET>,
            Type::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            Build::<Impl, IMPL_OFFSET>,
            PostBuild::<Impl, IMPL_OFFSET>,
            PreRun::<Impl, IMPL_OFFSET>,
            PostRun::<Impl, IMPL_OFFSET>,
            PreStop::<Impl, IMPL_OFFSET>,
            PostStop::<Impl, IMPL_OFFSET>,
            OnEventNotify::<Impl, IMPL_OFFSET>,
            Decompose::<Impl, IMPL_OFFSET>,
            Compose::<Impl, IMPL_OFFSET>,
            Up::<Impl, IMPL_OFFSET>,
            Down::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidCompositionSegment as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidCtlImpl: Sized + IDispatchImpl {
    fn AutoSize();
    fn SetAutoSize();
    fn BackColor();
    fn SetBackColor();
    fn Enabled();
    fn SetEnabled();
    fn TabStop();
    fn SetTabStop();
    fn Window();
    fn Refresh();
    fn DisplaySize();
    fn SetDisplaySize();
    fn MaintainAspectRatio();
    fn SetMaintainAspectRatio();
    fn ColorKey();
    fn SetColorKey();
    fn InputsAvailable();
    fn OutputsAvailable();
    fn _InputsAvailable();
    fn _OutputsAvailable();
    fn VideoRenderersAvailable();
    fn AudioRenderersAvailable();
    fn FeaturesAvailable();
    fn InputActive();
    fn SetInputActive();
    fn OutputsActive();
    fn SetOutputsActive();
    fn VideoRendererActive();
    fn SetVideoRendererActive();
    fn AudioRendererActive();
    fn SetAudioRendererActive();
    fn FeaturesActive();
    fn SetFeaturesActive();
    fn State();
    fn View();
    fn Build();
    fn Pause();
    fn Run();
    fn Stop();
    fn Decompose();
    fn DisableVideo();
    fn DisableAudio();
    fn ViewNext();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidCtlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidCtlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidCtlVtbl {
        unsafe extern "system" fn AutoSize<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbool: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAutoSize<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vbool: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BackColor<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, backcolor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBackColor<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, backcolor: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Enabled<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbool: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEnabled<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vbool: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TabStop<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbool: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTabStop<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vbool: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Window<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Refresh<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisplaySize<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentvalue: *mut DisplaySizeList) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDisplaySize<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newvalue: DisplaySizeList) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MaintainAspectRatio<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentvalue: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMaintainAspectRatio<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newvalue: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ColorKey<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentvalue: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetColorKey<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newvalue: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InputsAvailable<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, categoryguid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pval: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputsAvailable<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, categoryguid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pval: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _InputsAvailable<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, categoryguid: *const ::windows::core::GUID, pval: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _OutputsAvailable<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, categoryguid: *const ::windows::core::GUID, pval: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VideoRenderersAvailable<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AudioRenderersAvailable<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FeaturesAvailable<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InputActive<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInputActive<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputsActive<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputsActive<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VideoRendererActive<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetVideoRendererActive<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AudioRendererActive<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAudioRendererActive<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FeaturesActive<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFeaturesActive<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn State<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lstate: *mut MSVidCtlStateList) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn View<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, v: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Build<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Pause<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Run<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Stop<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Decompose<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisableVideo<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisableAudio<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ViewNext<Impl: IMSVidCtlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, v: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            AutoSize::<Impl, IMPL_OFFSET>,
            SetAutoSize::<Impl, IMPL_OFFSET>,
            BackColor::<Impl, IMPL_OFFSET>,
            SetBackColor::<Impl, IMPL_OFFSET>,
            Enabled::<Impl, IMPL_OFFSET>,
            SetEnabled::<Impl, IMPL_OFFSET>,
            TabStop::<Impl, IMPL_OFFSET>,
            SetTabStop::<Impl, IMPL_OFFSET>,
            Window::<Impl, IMPL_OFFSET>,
            Refresh::<Impl, IMPL_OFFSET>,
            DisplaySize::<Impl, IMPL_OFFSET>,
            SetDisplaySize::<Impl, IMPL_OFFSET>,
            MaintainAspectRatio::<Impl, IMPL_OFFSET>,
            SetMaintainAspectRatio::<Impl, IMPL_OFFSET>,
            ColorKey::<Impl, IMPL_OFFSET>,
            SetColorKey::<Impl, IMPL_OFFSET>,
            InputsAvailable::<Impl, IMPL_OFFSET>,
            OutputsAvailable::<Impl, IMPL_OFFSET>,
            _InputsAvailable::<Impl, IMPL_OFFSET>,
            _OutputsAvailable::<Impl, IMPL_OFFSET>,
            VideoRenderersAvailable::<Impl, IMPL_OFFSET>,
            AudioRenderersAvailable::<Impl, IMPL_OFFSET>,
            FeaturesAvailable::<Impl, IMPL_OFFSET>,
            InputActive::<Impl, IMPL_OFFSET>,
            SetInputActive::<Impl, IMPL_OFFSET>,
            OutputsActive::<Impl, IMPL_OFFSET>,
            SetOutputsActive::<Impl, IMPL_OFFSET>,
            VideoRendererActive::<Impl, IMPL_OFFSET>,
            SetVideoRendererActive::<Impl, IMPL_OFFSET>,
            AudioRendererActive::<Impl, IMPL_OFFSET>,
            SetAudioRendererActive::<Impl, IMPL_OFFSET>,
            FeaturesActive::<Impl, IMPL_OFFSET>,
            SetFeaturesActive::<Impl, IMPL_OFFSET>,
            State::<Impl, IMPL_OFFSET>,
            View::<Impl, IMPL_OFFSET>,
            Build::<Impl, IMPL_OFFSET>,
            Pause::<Impl, IMPL_OFFSET>,
            Run::<Impl, IMPL_OFFSET>,
            Stop::<Impl, IMPL_OFFSET>,
            Decompose::<Impl, IMPL_OFFSET>,
            DisableVideo::<Impl, IMPL_OFFSET>,
            DisableAudio::<Impl, IMPL_OFFSET>,
            ViewNext::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidCtl as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidDataServicesImpl: Sized + IMSVidFeatureImpl + IMSVidDeviceImpl + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidDataServicesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidDataServicesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidDataServicesVtbl {
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidDataServices as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidDataServicesEventImpl: Sized + IMSVidDeviceEventImpl + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidDataServicesEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidDataServicesEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidDataServicesEventVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, StateChange::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidDataServicesEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidDeviceImpl: Sized + IDispatchImpl {
    fn Name();
    fn Status();
    fn SetPower();
    fn Power();
    fn Category();
    fn ClassID();
    fn _Category();
    fn _ClassID();
    fn IsEqualDevice();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidDeviceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidDeviceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidDeviceVtbl {
        unsafe extern "system" fn Name<Impl: IMSVidDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Status<Impl: IMSVidDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPower<Impl: IMSVidDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, power: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Power<Impl: IMSVidDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, power: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Category<Impl: IMSVidDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ClassID<Impl: IMSVidDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsid: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _Category<Impl: IMSVidDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _ClassID<Impl: IMSVidDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsEqualDevice<Impl: IMSVidDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, device: ::windows::core::RawPtr, isequal: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidDevice as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IMSVidDevice2Impl: Sized {
    fn DevicePath();
}
#[cfg(feature = "Win32_Foundation")]
impl IMSVidDevice2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidDevice2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidDevice2Vtbl {
        unsafe extern "system" fn DevicePath<Impl: IMSVidDevice2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, devpath: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, DevicePath::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidDevice2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidDeviceEventImpl: Sized + IDispatchImpl {
    fn StateChange();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidDeviceEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidDeviceEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidDeviceEventVtbl {
        unsafe extern "system" fn StateChange<Impl: IMSVidDeviceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpd: ::windows::core::RawPtr, oldstate: i32, newstate: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, StateChange::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidDeviceEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidEVRImpl: Sized + IMSVidVideoRendererImpl + IMSVidOutputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn Presenter();
    fn SetPresenter();
    fn SetSuppressEffects();
    fn SuppressEffects();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidEVRVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidEVRImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidEVRVtbl {
        unsafe extern "system" fn Presenter<Impl: IMSVidEVRImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppallocpresent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPresenter<Impl: IMSVidEVRImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pallocpresent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSuppressEffects<Impl: IMSVidEVRImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bsuppress: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SuppressEffects<Impl: IMSVidEVRImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bsuppress: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            CustomCompositorClass::<Impl, IMPL_OFFSET>,
            SetCustomCompositorClass::<Impl, IMPL_OFFSET>,
            _CustomCompositorClass::<Impl, IMPL_OFFSET>,
            Set_CustomCompositorClass::<Impl, IMPL_OFFSET>,
            _CustomCompositor::<Impl, IMPL_OFFSET>,
            Set_CustomCompositor::<Impl, IMPL_OFFSET>,
            MixerBitmap::<Impl, IMPL_OFFSET>,
            _MixerBitmap::<Impl, IMPL_OFFSET>,
            SetMixerBitmap::<Impl, IMPL_OFFSET>,
            Set_MixerBitmap::<Impl, IMPL_OFFSET>,
            MixerBitmapPositionRect::<Impl, IMPL_OFFSET>,
            SetMixerBitmapPositionRect::<Impl, IMPL_OFFSET>,
            MixerBitmapOpacity::<Impl, IMPL_OFFSET>,
            SetMixerBitmapOpacity::<Impl, IMPL_OFFSET>,
            SetupMixerBitmap::<Impl, IMPL_OFFSET>,
            SourceSize::<Impl, IMPL_OFFSET>,
            SetSourceSize::<Impl, IMPL_OFFSET>,
            OverScan::<Impl, IMPL_OFFSET>,
            SetOverScan::<Impl, IMPL_OFFSET>,
            AvailableSourceRect::<Impl, IMPL_OFFSET>,
            MaxVidRect::<Impl, IMPL_OFFSET>,
            MinVidRect::<Impl, IMPL_OFFSET>,
            ClippedSourceRect::<Impl, IMPL_OFFSET>,
            SetClippedSourceRect::<Impl, IMPL_OFFSET>,
            UsingOverlay::<Impl, IMPL_OFFSET>,
            SetUsingOverlay::<Impl, IMPL_OFFSET>,
            Capture::<Impl, IMPL_OFFSET>,
            FramesPerSecond::<Impl, IMPL_OFFSET>,
            DecimateInput::<Impl, IMPL_OFFSET>,
            SetDecimateInput::<Impl, IMPL_OFFSET>,
            Presenter::<Impl, IMPL_OFFSET>,
            SetPresenter::<Impl, IMPL_OFFSET>,
            SetSuppressEffects::<Impl, IMPL_OFFSET>,
            SuppressEffects::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidEVR as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidEVREventImpl: Sized + IMSVidOutputDeviceEventImpl + IMSVidDeviceEventImpl + IDispatchImpl {
    fn OnUserEvent();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidEVREventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidEVREventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidEVREventVtbl {
        unsafe extern "system" fn OnUserEvent<Impl: IMSVidEVREventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, leventcode: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, StateChange::<Impl, IMPL_OFFSET>, OnUserEvent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidEVREvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidEncoderImpl: Sized + IMSVidFeatureImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn VideoEncoderInterface();
    fn AudioEncoderInterface();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidEncoderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidEncoderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidEncoderVtbl {
        unsafe extern "system" fn VideoEncoderInterface<Impl: IMSVidEncoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppencint: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AudioEncoderInterface<Impl: IMSVidEncoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppencint: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            VideoEncoderInterface::<Impl, IMPL_OFFSET>,
            AudioEncoderInterface::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidEncoder as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidFeatureImpl: Sized + IMSVidDeviceImpl + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidFeatureVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidFeatureImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidFeatureVtbl {
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidFeature as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidFeatureEventImpl: Sized + IMSVidDeviceEventImpl + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidFeatureEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidFeatureEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidFeatureEventVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, StateChange::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidFeatureEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidFeaturesImpl: Sized + IDispatchImpl {
    fn Count();
    fn _NewEnum();
    fn Item();
    fn Add();
    fn Remove();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidFeaturesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidFeaturesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidFeaturesVtbl {
        unsafe extern "system" fn Count<Impl: IMSVidFeaturesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _NewEnum<Impl: IMSVidFeaturesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Item<Impl: IMSVidFeaturesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, v: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, pdb: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Add<Impl: IMSVidFeaturesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Remove<Impl: IMSVidFeaturesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, v: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, Count::<Impl, IMPL_OFFSET>, _NewEnum::<Impl, IMPL_OFFSET>, Item::<Impl, IMPL_OFFSET>, Add::<Impl, IMPL_OFFSET>, Remove::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidFeatures as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidFilePlaybackImpl: Sized + IMSVidPlaybackImpl + IMSVidInputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn FileName();
    fn SetFileName();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidFilePlaybackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidFilePlaybackImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidFilePlaybackVtbl {
        unsafe extern "system" fn FileName<Impl: IMSVidFilePlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFileName<Impl: IMSVidFilePlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            IsViewable::<Impl, IMPL_OFFSET>,
            View::<Impl, IMPL_OFFSET>,
            EnableResetOnStop::<Impl, IMPL_OFFSET>,
            SetEnableResetOnStop::<Impl, IMPL_OFFSET>,
            Run::<Impl, IMPL_OFFSET>,
            Pause::<Impl, IMPL_OFFSET>,
            Stop::<Impl, IMPL_OFFSET>,
            CanStep::<Impl, IMPL_OFFSET>,
            Step::<Impl, IMPL_OFFSET>,
            SetRate::<Impl, IMPL_OFFSET>,
            Rate::<Impl, IMPL_OFFSET>,
            SetCurrentPosition::<Impl, IMPL_OFFSET>,
            CurrentPosition::<Impl, IMPL_OFFSET>,
            SetPositionMode::<Impl, IMPL_OFFSET>,
            PositionMode::<Impl, IMPL_OFFSET>,
            Length::<Impl, IMPL_OFFSET>,
            FileName::<Impl, IMPL_OFFSET>,
            SetFileName::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidFilePlayback as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidFilePlayback2Impl: Sized + IMSVidFilePlaybackImpl + IMSVidPlaybackImpl + IMSVidInputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn Set_SourceFilter();
    fn Set__SourceFilter();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidFilePlayback2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidFilePlayback2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidFilePlayback2Vtbl {
        unsafe extern "system" fn Set_SourceFilter<Impl: IMSVidFilePlayback2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Set__SourceFilter<Impl: IMSVidFilePlayback2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            IsViewable::<Impl, IMPL_OFFSET>,
            View::<Impl, IMPL_OFFSET>,
            EnableResetOnStop::<Impl, IMPL_OFFSET>,
            SetEnableResetOnStop::<Impl, IMPL_OFFSET>,
            Run::<Impl, IMPL_OFFSET>,
            Pause::<Impl, IMPL_OFFSET>,
            Stop::<Impl, IMPL_OFFSET>,
            CanStep::<Impl, IMPL_OFFSET>,
            Step::<Impl, IMPL_OFFSET>,
            SetRate::<Impl, IMPL_OFFSET>,
            Rate::<Impl, IMPL_OFFSET>,
            SetCurrentPosition::<Impl, IMPL_OFFSET>,
            CurrentPosition::<Impl, IMPL_OFFSET>,
            SetPositionMode::<Impl, IMPL_OFFSET>,
            PositionMode::<Impl, IMPL_OFFSET>,
            Length::<Impl, IMPL_OFFSET>,
            FileName::<Impl, IMPL_OFFSET>,
            SetFileName::<Impl, IMPL_OFFSET>,
            Set_SourceFilter::<Impl, IMPL_OFFSET>,
            Set__SourceFilter::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidFilePlayback2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidFilePlaybackEventImpl: Sized + IMSVidPlaybackEventImpl + IMSVidInputDeviceEventImpl + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidFilePlaybackEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidFilePlaybackEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidFilePlaybackEventVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, EndOfMedia::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidFilePlaybackEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidGenericSinkImpl: Sized + IMSVidOutputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn SetSinkFilter();
    fn SinkStreams();
    fn SetSinkStreams();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidGenericSinkVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidGenericSinkImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidGenericSinkVtbl {
        unsafe extern "system" fn SetSinkFilter<Impl: IMSVidGenericSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SinkStreams<Impl: IMSVidGenericSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstreams: *mut MSVidSinkStreams) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSinkStreams<Impl: IMSVidGenericSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, streams: MSVidSinkStreams) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            SetSinkFilter::<Impl, IMPL_OFFSET>,
            SinkStreams::<Impl, IMPL_OFFSET>,
            SetSinkStreams::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidGenericSink as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidGenericSink2Impl: Sized + IMSVidGenericSinkImpl + IMSVidOutputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn AddFilter();
    fn ResetFilterList();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidGenericSink2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidGenericSink2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidGenericSink2Vtbl {
        unsafe extern "system" fn AddFilter<Impl: IMSVidGenericSink2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrname: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResetFilterList<Impl: IMSVidGenericSink2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            SetSinkFilter::<Impl, IMPL_OFFSET>,
            SinkStreams::<Impl, IMPL_OFFSET>,
            SetSinkStreams::<Impl, IMPL_OFFSET>,
            AddFilter::<Impl, IMPL_OFFSET>,
            ResetFilterList::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidGenericSink2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IMSVidGraphSegmentImpl: Sized + IPersistImpl {
    fn Init();
    fn SetInit();
    fn EnumFilters();
    fn Container();
    fn SetContainer();
    fn Type();
    fn Category();
    fn Build();
    fn PostBuild();
    fn PreRun();
    fn PostRun();
    fn PreStop();
    fn PostStop();
    fn OnEventNotify();
    fn Decompose();
}
#[cfg(feature = "Win32_System_Com")]
impl IMSVidGraphSegmentVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidGraphSegmentImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidGraphSegmentVtbl {
        unsafe extern "system" fn Init<Impl: IMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pinit: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInit<Impl: IMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pinit: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumFilters<Impl: IMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnewenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Container<Impl: IMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppctl: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetContainer<Impl: IMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pctl: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Type<Impl: IMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptype: *mut MSVidSegmentType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Category<Impl: IMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Build<Impl: IMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PostBuild<Impl: IMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PreRun<Impl: IMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PostRun<Impl: IMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PreStop<Impl: IMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PostStop<Impl: IMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnEventNotify<Impl: IMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, leventcode: i32, leventparm1: isize, leventparm2: isize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Decompose<Impl: IMSVidGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetClassID::<Impl, IMPL_OFFSET>,
            Init::<Impl, IMPL_OFFSET>,
            SetInit::<Impl, IMPL_OFFSET>,
            EnumFilters::<Impl, IMPL_OFFSET>,
            Container::<Impl, IMPL_OFFSET>,
            SetContainer::<Impl, IMPL_OFFSET>,
            Type::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            Build::<Impl, IMPL_OFFSET>,
            PostBuild::<Impl, IMPL_OFFSET>,
            PreRun::<Impl, IMPL_OFFSET>,
            PostRun::<Impl, IMPL_OFFSET>,
            PreStop::<Impl, IMPL_OFFSET>,
            PostStop::<Impl, IMPL_OFFSET>,
            OnEventNotify::<Impl, IMPL_OFFSET>,
            Decompose::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidGraphSegment as ::windows::core::Interface>::IID
    }
}
pub trait IMSVidGraphSegmentContainerImpl: Sized {
    fn Graph();
    fn Input();
    fn Outputs();
    fn VideoRenderer();
    fn AudioRenderer();
    fn Features();
    fn Composites();
    fn ParentContainer();
    fn Decompose();
    fn IsWindowless();
    fn GetFocus();
}
impl IMSVidGraphSegmentContainerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidGraphSegmentContainerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidGraphSegmentContainerVtbl {
        unsafe extern "system" fn Graph<Impl: IMSVidGraphSegmentContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppgraph: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Input<Impl: IMSVidGraphSegmentContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppinput: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Outputs<Impl: IMSVidGraphSegmentContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppoutputs: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VideoRenderer<Impl: IMSVidGraphSegmentContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppvr: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AudioRenderer<Impl: IMSVidGraphSegmentContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppar: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Features<Impl: IMSVidGraphSegmentContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppfeatures: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Composites<Impl: IMSVidGraphSegmentContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppcomposites: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ParentContainer<Impl: IMSVidGraphSegmentContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppcontainer: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Decompose<Impl: IMSVidGraphSegmentContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psegment: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsWindowless<Impl: IMSVidGraphSegmentContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFocus<Impl: IMSVidGraphSegmentContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Graph::<Impl, IMPL_OFFSET>,
            Input::<Impl, IMPL_OFFSET>,
            Outputs::<Impl, IMPL_OFFSET>,
            VideoRenderer::<Impl, IMPL_OFFSET>,
            AudioRenderer::<Impl, IMPL_OFFSET>,
            Features::<Impl, IMPL_OFFSET>,
            Composites::<Impl, IMPL_OFFSET>,
            ParentContainer::<Impl, IMPL_OFFSET>,
            Decompose::<Impl, IMPL_OFFSET>,
            IsWindowless::<Impl, IMPL_OFFSET>,
            GetFocus::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidGraphSegmentContainer as ::windows::core::Interface>::IID
    }
}
pub trait IMSVidGraphSegmentUserInputImpl: Sized {
    fn Click();
    fn DblClick();
    fn KeyDown();
    fn KeyPress();
    fn KeyUp();
    fn MouseDown();
    fn MouseMove();
    fn MouseUp();
}
impl IMSVidGraphSegmentUserInputVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidGraphSegmentUserInputImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidGraphSegmentUserInputVtbl {
        unsafe extern "system" fn Click<Impl: IMSVidGraphSegmentUserInputImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DblClick<Impl: IMSVidGraphSegmentUserInputImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn KeyDown<Impl: IMSVidGraphSegmentUserInputImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, keycode: *const i16, shiftstate: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn KeyPress<Impl: IMSVidGraphSegmentUserInputImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, keyascii: *const i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn KeyUp<Impl: IMSVidGraphSegmentUserInputImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, keycode: *const i16, shiftstate: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MouseDown<Impl: IMSVidGraphSegmentUserInputImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buttonstate: i16, shiftstate: i16, x: i32, y: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MouseMove<Impl: IMSVidGraphSegmentUserInputImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buttonstate: i16, shiftstate: i16, x: i32, y: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MouseUp<Impl: IMSVidGraphSegmentUserInputImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buttonstate: i16, shiftstate: i16, x: i32, y: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Click::<Impl, IMPL_OFFSET>, DblClick::<Impl, IMPL_OFFSET>, KeyDown::<Impl, IMPL_OFFSET>, KeyPress::<Impl, IMPL_OFFSET>, KeyUp::<Impl, IMPL_OFFSET>, MouseDown::<Impl, IMPL_OFFSET>, MouseMove::<Impl, IMPL_OFFSET>, MouseUp::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidGraphSegmentUserInput as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidInputDeviceImpl: Sized + IMSVidDeviceImpl + IDispatchImpl {
    fn IsViewable();
    fn View();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidInputDeviceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidInputDeviceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidInputDeviceVtbl {
        unsafe extern "system" fn IsViewable<Impl: IMSVidInputDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, v: *const super::super::System::Com::VARIANT, pfviewable: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn View<Impl: IMSVidInputDeviceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, v: *const super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            IsViewable::<Impl, IMPL_OFFSET>,
            View::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidInputDevice as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidInputDeviceEventImpl: Sized + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidInputDeviceEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidInputDeviceEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidInputDeviceEventVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidInputDeviceEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidInputDevicesImpl: Sized + IDispatchImpl {
    fn Count();
    fn _NewEnum();
    fn Item();
    fn Add();
    fn Remove();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidInputDevicesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidInputDevicesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidInputDevicesVtbl {
        unsafe extern "system" fn Count<Impl: IMSVidInputDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _NewEnum<Impl: IMSVidInputDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Item<Impl: IMSVidInputDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, v: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, pdb: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Add<Impl: IMSVidInputDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Remove<Impl: IMSVidInputDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, v: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, Count::<Impl, IMPL_OFFSET>, _NewEnum::<Impl, IMPL_OFFSET>, Item::<Impl, IMPL_OFFSET>, Add::<Impl, IMPL_OFFSET>, Remove::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidInputDevices as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidOutputDeviceImpl: Sized + IMSVidDeviceImpl + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidOutputDeviceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidOutputDeviceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidOutputDeviceVtbl {
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidOutputDevice as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidOutputDeviceEventImpl: Sized + IMSVidDeviceEventImpl + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidOutputDeviceEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidOutputDeviceEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidOutputDeviceEventVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, StateChange::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidOutputDeviceEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidOutputDevicesImpl: Sized + IDispatchImpl {
    fn Count();
    fn _NewEnum();
    fn Item();
    fn Add();
    fn Remove();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidOutputDevicesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidOutputDevicesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidOutputDevicesVtbl {
        unsafe extern "system" fn Count<Impl: IMSVidOutputDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _NewEnum<Impl: IMSVidOutputDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Item<Impl: IMSVidOutputDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, v: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, pdb: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Add<Impl: IMSVidOutputDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Remove<Impl: IMSVidOutputDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, v: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, Count::<Impl, IMPL_OFFSET>, _NewEnum::<Impl, IMPL_OFFSET>, Item::<Impl, IMPL_OFFSET>, Add::<Impl, IMPL_OFFSET>, Remove::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidOutputDevices as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidPlaybackImpl: Sized + IMSVidInputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn EnableResetOnStop();
    fn SetEnableResetOnStop();
    fn Run();
    fn Pause();
    fn Stop();
    fn CanStep();
    fn Step();
    fn SetRate();
    fn Rate();
    fn SetCurrentPosition();
    fn CurrentPosition();
    fn SetPositionMode();
    fn PositionMode();
    fn Length();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidPlaybackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidPlaybackImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidPlaybackVtbl {
        unsafe extern "system" fn EnableResetOnStop<Impl: IMSVidPlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEnableResetOnStop<Impl: IMSVidPlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newval: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Run<Impl: IMSVidPlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Pause<Impl: IMSVidPlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Stop<Impl: IMSVidPlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CanStep<Impl: IMSVidPlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fbackwards: i16, pfcan: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Step<Impl: IMSVidPlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lstep: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRate<Impl: IMSVidPlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plrate: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Rate<Impl: IMSVidPlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plrate: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentPosition<Impl: IMSVidPlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lposition: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CurrentPosition<Impl: IMSVidPlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lposition: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPositionMode<Impl: IMSVidPlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpositionmode: PositionModeList) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PositionMode<Impl: IMSVidPlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpositionmode: *mut PositionModeList) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Length<Impl: IMSVidPlaybackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, llength: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            IsViewable::<Impl, IMPL_OFFSET>,
            View::<Impl, IMPL_OFFSET>,
            EnableResetOnStop::<Impl, IMPL_OFFSET>,
            SetEnableResetOnStop::<Impl, IMPL_OFFSET>,
            Run::<Impl, IMPL_OFFSET>,
            Pause::<Impl, IMPL_OFFSET>,
            Stop::<Impl, IMPL_OFFSET>,
            CanStep::<Impl, IMPL_OFFSET>,
            Step::<Impl, IMPL_OFFSET>,
            SetRate::<Impl, IMPL_OFFSET>,
            Rate::<Impl, IMPL_OFFSET>,
            SetCurrentPosition::<Impl, IMPL_OFFSET>,
            CurrentPosition::<Impl, IMPL_OFFSET>,
            SetPositionMode::<Impl, IMPL_OFFSET>,
            PositionMode::<Impl, IMPL_OFFSET>,
            Length::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidPlayback as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidPlaybackEventImpl: Sized + IMSVidInputDeviceEventImpl + IDispatchImpl {
    fn EndOfMedia();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidPlaybackEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidPlaybackEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidPlaybackEventVtbl {
        unsafe extern "system" fn EndOfMedia<Impl: IMSVidPlaybackEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpd: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, EndOfMedia::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidPlaybackEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidRectImpl: Sized + IDispatchImpl {
    fn Top();
    fn SetTop();
    fn Left();
    fn SetLeft();
    fn Width();
    fn SetWidth();
    fn Height();
    fn SetHeight();
    fn HWnd();
    fn SetHWnd();
    fn SetRect();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidRectVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidRectImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidRectVtbl {
        unsafe extern "system" fn Top<Impl: IMSVidRectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, topval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTop<Impl: IMSVidRectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, topval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Left<Impl: IMSVidRectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, leftval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLeft<Impl: IMSVidRectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, leftval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Width<Impl: IMSVidRectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, widthval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetWidth<Impl: IMSVidRectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, widthval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Height<Impl: IMSVidRectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, heightval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetHeight<Impl: IMSVidRectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, heightval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HWnd<Impl: IMSVidRectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndval: *mut super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetHWnd<Impl: IMSVidRectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwndval: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRect<Impl: IMSVidRectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rectval: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Top::<Impl, IMPL_OFFSET>,
            SetTop::<Impl, IMPL_OFFSET>,
            Left::<Impl, IMPL_OFFSET>,
            SetLeft::<Impl, IMPL_OFFSET>,
            Width::<Impl, IMPL_OFFSET>,
            SetWidth::<Impl, IMPL_OFFSET>,
            Height::<Impl, IMPL_OFFSET>,
            SetHeight::<Impl, IMPL_OFFSET>,
            HWnd::<Impl, IMPL_OFFSET>,
            SetHWnd::<Impl, IMPL_OFFSET>,
            SetRect::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidRect as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidStreamBufferRecordingControlImpl: Sized + IDispatchImpl {
    fn StartTime();
    fn SetStartTime();
    fn StopTime();
    fn SetStopTime();
    fn RecordingStopped();
    fn RecordingStarted();
    fn RecordingType();
    fn RecordingAttribute();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidStreamBufferRecordingControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidStreamBufferRecordingControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidStreamBufferRecordingControlVtbl {
        unsafe extern "system" fn StartTime<Impl: IMSVidStreamBufferRecordingControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rtstart: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetStartTime<Impl: IMSVidStreamBufferRecordingControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rtstart: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StopTime<Impl: IMSVidStreamBufferRecordingControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rtstop: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetStopTime<Impl: IMSVidStreamBufferRecordingControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rtstop: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RecordingStopped<Impl: IMSVidStreamBufferRecordingControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phresult: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RecordingStarted<Impl: IMSVidStreamBufferRecordingControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phresult: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RecordingType<Impl: IMSVidStreamBufferRecordingControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtype: *mut RecordingType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RecordingAttribute<Impl: IMSVidStreamBufferRecordingControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, precordingattribute: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            StartTime::<Impl, IMPL_OFFSET>,
            SetStartTime::<Impl, IMPL_OFFSET>,
            StopTime::<Impl, IMPL_OFFSET>,
            SetStopTime::<Impl, IMPL_OFFSET>,
            RecordingStopped::<Impl, IMPL_OFFSET>,
            RecordingStarted::<Impl, IMPL_OFFSET>,
            RecordingType::<Impl, IMPL_OFFSET>,
            RecordingAttribute::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidStreamBufferRecordingControl as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidStreamBufferSinkImpl: Sized + IMSVidOutputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn ContentRecorder();
    fn ReferenceRecorder();
    fn SinkName();
    fn SetSinkName();
    fn NameSetLock();
    fn SBESink();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidStreamBufferSinkVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidStreamBufferSinkImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidStreamBufferSinkVtbl {
        unsafe extern "system" fn ContentRecorder<Impl: IMSVidStreamBufferSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfilename: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, precordingiunknown: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReferenceRecorder<Impl: IMSVidStreamBufferSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfilename: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, precordingiunknown: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SinkName<Impl: IMSVidStreamBufferSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSinkName<Impl: IMSVidStreamBufferSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NameSetLock<Impl: IMSVidStreamBufferSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SBESink<Impl: IMSVidStreamBufferSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sbeconfig: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            ContentRecorder::<Impl, IMPL_OFFSET>,
            ReferenceRecorder::<Impl, IMPL_OFFSET>,
            SinkName::<Impl, IMPL_OFFSET>,
            SetSinkName::<Impl, IMPL_OFFSET>,
            NameSetLock::<Impl, IMPL_OFFSET>,
            SBESink::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidStreamBufferSink as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidStreamBufferSink2Impl: Sized + IMSVidStreamBufferSinkImpl + IMSVidOutputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn UnlockProfile();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidStreamBufferSink2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidStreamBufferSink2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidStreamBufferSink2Vtbl {
        unsafe extern "system" fn UnlockProfile<Impl: IMSVidStreamBufferSink2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            ContentRecorder::<Impl, IMPL_OFFSET>,
            ReferenceRecorder::<Impl, IMPL_OFFSET>,
            SinkName::<Impl, IMPL_OFFSET>,
            SetSinkName::<Impl, IMPL_OFFSET>,
            NameSetLock::<Impl, IMPL_OFFSET>,
            SBESink::<Impl, IMPL_OFFSET>,
            UnlockProfile::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidStreamBufferSink2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidStreamBufferSink3Impl: Sized + IMSVidStreamBufferSink2Impl + IMSVidStreamBufferSinkImpl + IMSVidOutputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn SetMinSeek();
    fn AudioCounter();
    fn VideoCounter();
    fn CCCounter();
    fn WSTCounter();
    fn SetAudioAnalysisFilter();
    fn AudioAnalysisFilter();
    fn Set_AudioAnalysisFilter();
    fn _AudioAnalysisFilter();
    fn SetVideoAnalysisFilter();
    fn VideoAnalysisFilter();
    fn Set_VideoAnalysisFilter();
    fn _VideoAnalysisFilter();
    fn SetDataAnalysisFilter();
    fn DataAnalysisFilter();
    fn Set_DataAnalysisFilter();
    fn _DataAnalysisFilter();
    fn LicenseErrorCode();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidStreamBufferSink3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidStreamBufferSink3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidStreamBufferSink3Vtbl {
        unsafe extern "system" fn SetMinSeek<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwmin: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AudioCounter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VideoCounter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CCCounter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WSTCounter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAudioAnalysisFilter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, szclsid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AudioAnalysisFilter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszclsid: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Set_AudioAnalysisFilter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _AudioAnalysisFilter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetVideoAnalysisFilter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, szclsid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VideoAnalysisFilter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszclsid: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Set_VideoAnalysisFilter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _VideoAnalysisFilter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDataAnalysisFilter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, szclsid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DataAnalysisFilter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszclsid: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Set_DataAnalysisFilter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _DataAnalysisFilter<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LicenseErrorCode<Impl: IMSVidStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hres: *mut ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            ContentRecorder::<Impl, IMPL_OFFSET>,
            ReferenceRecorder::<Impl, IMPL_OFFSET>,
            SinkName::<Impl, IMPL_OFFSET>,
            SetSinkName::<Impl, IMPL_OFFSET>,
            NameSetLock::<Impl, IMPL_OFFSET>,
            SBESink::<Impl, IMPL_OFFSET>,
            UnlockProfile::<Impl, IMPL_OFFSET>,
            SetMinSeek::<Impl, IMPL_OFFSET>,
            AudioCounter::<Impl, IMPL_OFFSET>,
            VideoCounter::<Impl, IMPL_OFFSET>,
            CCCounter::<Impl, IMPL_OFFSET>,
            WSTCounter::<Impl, IMPL_OFFSET>,
            SetAudioAnalysisFilter::<Impl, IMPL_OFFSET>,
            AudioAnalysisFilter::<Impl, IMPL_OFFSET>,
            Set_AudioAnalysisFilter::<Impl, IMPL_OFFSET>,
            _AudioAnalysisFilter::<Impl, IMPL_OFFSET>,
            SetVideoAnalysisFilter::<Impl, IMPL_OFFSET>,
            VideoAnalysisFilter::<Impl, IMPL_OFFSET>,
            Set_VideoAnalysisFilter::<Impl, IMPL_OFFSET>,
            _VideoAnalysisFilter::<Impl, IMPL_OFFSET>,
            SetDataAnalysisFilter::<Impl, IMPL_OFFSET>,
            DataAnalysisFilter::<Impl, IMPL_OFFSET>,
            Set_DataAnalysisFilter::<Impl, IMPL_OFFSET>,
            _DataAnalysisFilter::<Impl, IMPL_OFFSET>,
            LicenseErrorCode::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidStreamBufferSink3 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidStreamBufferSinkEventImpl: Sized + IMSVidOutputDeviceEventImpl + IMSVidDeviceEventImpl + IDispatchImpl {
    fn CertificateFailure();
    fn CertificateSuccess();
    fn WriteFailure();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidStreamBufferSinkEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidStreamBufferSinkEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidStreamBufferSinkEventVtbl {
        unsafe extern "system" fn CertificateFailure<Impl: IMSVidStreamBufferSinkEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CertificateSuccess<Impl: IMSVidStreamBufferSinkEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteFailure<Impl: IMSVidStreamBufferSinkEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, StateChange::<Impl, IMPL_OFFSET>, CertificateFailure::<Impl, IMPL_OFFSET>, CertificateSuccess::<Impl, IMPL_OFFSET>, WriteFailure::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidStreamBufferSinkEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidStreamBufferSinkEvent2Impl: Sized + IMSVidStreamBufferSinkEventImpl + IMSVidOutputDeviceEventImpl + IMSVidDeviceEventImpl + IDispatchImpl {
    fn EncryptionOn();
    fn EncryptionOff();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidStreamBufferSinkEvent2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidStreamBufferSinkEvent2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidStreamBufferSinkEvent2Vtbl {
        unsafe extern "system" fn EncryptionOn<Impl: IMSVidStreamBufferSinkEvent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EncryptionOff<Impl: IMSVidStreamBufferSinkEvent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            StateChange::<Impl, IMPL_OFFSET>,
            CertificateFailure::<Impl, IMPL_OFFSET>,
            CertificateSuccess::<Impl, IMPL_OFFSET>,
            WriteFailure::<Impl, IMPL_OFFSET>,
            EncryptionOn::<Impl, IMPL_OFFSET>,
            EncryptionOff::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidStreamBufferSinkEvent2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidStreamBufferSinkEvent3Impl: Sized + IMSVidStreamBufferSinkEvent2Impl + IMSVidStreamBufferSinkEventImpl + IMSVidOutputDeviceEventImpl + IMSVidDeviceEventImpl + IDispatchImpl {
    fn LicenseChange();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidStreamBufferSinkEvent3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidStreamBufferSinkEvent3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidStreamBufferSinkEvent3Vtbl {
        unsafe extern "system" fn LicenseChange<Impl: IMSVidStreamBufferSinkEvent3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwprot: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            StateChange::<Impl, IMPL_OFFSET>,
            CertificateFailure::<Impl, IMPL_OFFSET>,
            CertificateSuccess::<Impl, IMPL_OFFSET>,
            WriteFailure::<Impl, IMPL_OFFSET>,
            EncryptionOn::<Impl, IMPL_OFFSET>,
            EncryptionOff::<Impl, IMPL_OFFSET>,
            LicenseChange::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidStreamBufferSinkEvent3 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidStreamBufferSinkEvent4Impl: Sized + IMSVidStreamBufferSinkEvent3Impl + IMSVidStreamBufferSinkEvent2Impl + IMSVidStreamBufferSinkEventImpl + IMSVidOutputDeviceEventImpl + IMSVidDeviceEventImpl + IDispatchImpl {
    fn WriteFailureClear();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidStreamBufferSinkEvent4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidStreamBufferSinkEvent4Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidStreamBufferSinkEvent4Vtbl {
        unsafe extern "system" fn WriteFailureClear<Impl: IMSVidStreamBufferSinkEvent4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            StateChange::<Impl, IMPL_OFFSET>,
            CertificateFailure::<Impl, IMPL_OFFSET>,
            CertificateSuccess::<Impl, IMPL_OFFSET>,
            WriteFailure::<Impl, IMPL_OFFSET>,
            EncryptionOn::<Impl, IMPL_OFFSET>,
            EncryptionOff::<Impl, IMPL_OFFSET>,
            LicenseChange::<Impl, IMPL_OFFSET>,
            WriteFailureClear::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidStreamBufferSinkEvent4 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidStreamBufferSourceImpl: Sized + IMSVidFilePlaybackImpl + IMSVidPlaybackImpl + IMSVidInputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn Start();
    fn RecordingAttribute();
    fn CurrentRatings();
    fn MaxRatingsLevel();
    fn SetBlockUnrated();
    fn SetUnratedDelay();
    fn SBESource();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidStreamBufferSourceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidStreamBufferSourceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidStreamBufferSourceVtbl {
        unsafe extern "system" fn Start<Impl: IMSVidStreamBufferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lstart: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RecordingAttribute<Impl: IMSVidStreamBufferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, precordingattribute: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CurrentRatings<Impl: IMSVidStreamBufferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, pbfenattr: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MaxRatingsLevel<Impl: IMSVidStreamBufferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ensystem: EnTvRat_System, enrating: EnTvRat_GenericLevel, lbfenattr: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBlockUnrated<Impl: IMSVidStreamBufferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bblock: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetUnratedDelay<Impl: IMSVidStreamBufferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwdelay: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SBESource<Impl: IMSVidStreamBufferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sbefilter: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            IsViewable::<Impl, IMPL_OFFSET>,
            View::<Impl, IMPL_OFFSET>,
            EnableResetOnStop::<Impl, IMPL_OFFSET>,
            SetEnableResetOnStop::<Impl, IMPL_OFFSET>,
            Run::<Impl, IMPL_OFFSET>,
            Pause::<Impl, IMPL_OFFSET>,
            Stop::<Impl, IMPL_OFFSET>,
            CanStep::<Impl, IMPL_OFFSET>,
            Step::<Impl, IMPL_OFFSET>,
            SetRate::<Impl, IMPL_OFFSET>,
            Rate::<Impl, IMPL_OFFSET>,
            SetCurrentPosition::<Impl, IMPL_OFFSET>,
            CurrentPosition::<Impl, IMPL_OFFSET>,
            SetPositionMode::<Impl, IMPL_OFFSET>,
            PositionMode::<Impl, IMPL_OFFSET>,
            Length::<Impl, IMPL_OFFSET>,
            FileName::<Impl, IMPL_OFFSET>,
            SetFileName::<Impl, IMPL_OFFSET>,
            Start::<Impl, IMPL_OFFSET>,
            RecordingAttribute::<Impl, IMPL_OFFSET>,
            CurrentRatings::<Impl, IMPL_OFFSET>,
            MaxRatingsLevel::<Impl, IMPL_OFFSET>,
            SetBlockUnrated::<Impl, IMPL_OFFSET>,
            SetUnratedDelay::<Impl, IMPL_OFFSET>,
            SBESource::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidStreamBufferSource as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidStreamBufferSource2Impl: Sized + IMSVidStreamBufferSourceImpl + IMSVidFilePlaybackImpl + IMSVidPlaybackImpl + IMSVidInputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn SetRateEx();
    fn AudioCounter();
    fn VideoCounter();
    fn CCCounter();
    fn WSTCounter();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidStreamBufferSource2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidStreamBufferSource2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidStreamBufferSource2Vtbl {
        unsafe extern "system" fn SetRateEx<Impl: IMSVidStreamBufferSource2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrate: f64, dwframespersecond: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AudioCounter<Impl: IMSVidStreamBufferSource2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VideoCounter<Impl: IMSVidStreamBufferSource2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CCCounter<Impl: IMSVidStreamBufferSource2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WSTCounter<Impl: IMSVidStreamBufferSource2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            IsViewable::<Impl, IMPL_OFFSET>,
            View::<Impl, IMPL_OFFSET>,
            EnableResetOnStop::<Impl, IMPL_OFFSET>,
            SetEnableResetOnStop::<Impl, IMPL_OFFSET>,
            Run::<Impl, IMPL_OFFSET>,
            Pause::<Impl, IMPL_OFFSET>,
            Stop::<Impl, IMPL_OFFSET>,
            CanStep::<Impl, IMPL_OFFSET>,
            Step::<Impl, IMPL_OFFSET>,
            SetRate::<Impl, IMPL_OFFSET>,
            Rate::<Impl, IMPL_OFFSET>,
            SetCurrentPosition::<Impl, IMPL_OFFSET>,
            CurrentPosition::<Impl, IMPL_OFFSET>,
            SetPositionMode::<Impl, IMPL_OFFSET>,
            PositionMode::<Impl, IMPL_OFFSET>,
            Length::<Impl, IMPL_OFFSET>,
            FileName::<Impl, IMPL_OFFSET>,
            SetFileName::<Impl, IMPL_OFFSET>,
            Start::<Impl, IMPL_OFFSET>,
            RecordingAttribute::<Impl, IMPL_OFFSET>,
            CurrentRatings::<Impl, IMPL_OFFSET>,
            MaxRatingsLevel::<Impl, IMPL_OFFSET>,
            SetBlockUnrated::<Impl, IMPL_OFFSET>,
            SetUnratedDelay::<Impl, IMPL_OFFSET>,
            SBESource::<Impl, IMPL_OFFSET>,
            SetRateEx::<Impl, IMPL_OFFSET>,
            AudioCounter::<Impl, IMPL_OFFSET>,
            VideoCounter::<Impl, IMPL_OFFSET>,
            CCCounter::<Impl, IMPL_OFFSET>,
            WSTCounter::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidStreamBufferSource2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidStreamBufferSourceEventImpl: Sized + IMSVidFilePlaybackEventImpl + IMSVidPlaybackEventImpl + IMSVidInputDeviceEventImpl + IDispatchImpl {
    fn CertificateFailure();
    fn CertificateSuccess();
    fn RatingsBlocked();
    fn RatingsUnblocked();
    fn RatingsChanged();
    fn TimeHole();
    fn StaleDataRead();
    fn ContentBecomingStale();
    fn StaleFileDeleted();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidStreamBufferSourceEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidStreamBufferSourceEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidStreamBufferSourceEventVtbl {
        unsafe extern "system" fn CertificateFailure<Impl: IMSVidStreamBufferSourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CertificateSuccess<Impl: IMSVidStreamBufferSourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RatingsBlocked<Impl: IMSVidStreamBufferSourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RatingsUnblocked<Impl: IMSVidStreamBufferSourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RatingsChanged<Impl: IMSVidStreamBufferSourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TimeHole<Impl: IMSVidStreamBufferSourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, streamoffsetms: i32, sizems: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StaleDataRead<Impl: IMSVidStreamBufferSourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ContentBecomingStale<Impl: IMSVidStreamBufferSourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StaleFileDeleted<Impl: IMSVidStreamBufferSourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            EndOfMedia::<Impl, IMPL_OFFSET>,
            CertificateFailure::<Impl, IMPL_OFFSET>,
            CertificateSuccess::<Impl, IMPL_OFFSET>,
            RatingsBlocked::<Impl, IMPL_OFFSET>,
            RatingsUnblocked::<Impl, IMPL_OFFSET>,
            RatingsChanged::<Impl, IMPL_OFFSET>,
            TimeHole::<Impl, IMPL_OFFSET>,
            StaleDataRead::<Impl, IMPL_OFFSET>,
            ContentBecomingStale::<Impl, IMPL_OFFSET>,
            StaleFileDeleted::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidStreamBufferSourceEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidStreamBufferSourceEvent2Impl: Sized + IMSVidStreamBufferSourceEventImpl + IMSVidFilePlaybackEventImpl + IMSVidPlaybackEventImpl + IMSVidInputDeviceEventImpl + IDispatchImpl {
    fn RateChange();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidStreamBufferSourceEvent2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidStreamBufferSourceEvent2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidStreamBufferSourceEvent2Vtbl {
        unsafe extern "system" fn RateChange<Impl: IMSVidStreamBufferSourceEvent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, qwnewrate: f64, qwoldrate: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            EndOfMedia::<Impl, IMPL_OFFSET>,
            CertificateFailure::<Impl, IMPL_OFFSET>,
            CertificateSuccess::<Impl, IMPL_OFFSET>,
            RatingsBlocked::<Impl, IMPL_OFFSET>,
            RatingsUnblocked::<Impl, IMPL_OFFSET>,
            RatingsChanged::<Impl, IMPL_OFFSET>,
            TimeHole::<Impl, IMPL_OFFSET>,
            StaleDataRead::<Impl, IMPL_OFFSET>,
            ContentBecomingStale::<Impl, IMPL_OFFSET>,
            StaleFileDeleted::<Impl, IMPL_OFFSET>,
            RateChange::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidStreamBufferSourceEvent2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidStreamBufferSourceEvent3Impl: Sized + IMSVidStreamBufferSourceEvent2Impl + IMSVidStreamBufferSourceEventImpl + IMSVidFilePlaybackEventImpl + IMSVidPlaybackEventImpl + IMSVidInputDeviceEventImpl + IDispatchImpl {
    fn BroadcastEvent();
    fn BroadcastEventEx();
    fn COPPBlocked();
    fn COPPUnblocked();
    fn ContentPrimarilyAudio();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidStreamBufferSourceEvent3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidStreamBufferSourceEvent3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidStreamBufferSourceEvent3Vtbl {
        unsafe extern "system" fn BroadcastEvent<Impl: IMSVidStreamBufferSourceEvent3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BroadcastEventEx<Impl: IMSVidStreamBufferSourceEvent3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, param1: u32, param2: u32, param3: u32, param4: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn COPPBlocked<Impl: IMSVidStreamBufferSourceEvent3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn COPPUnblocked<Impl: IMSVidStreamBufferSourceEvent3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ContentPrimarilyAudio<Impl: IMSVidStreamBufferSourceEvent3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            EndOfMedia::<Impl, IMPL_OFFSET>,
            CertificateFailure::<Impl, IMPL_OFFSET>,
            CertificateSuccess::<Impl, IMPL_OFFSET>,
            RatingsBlocked::<Impl, IMPL_OFFSET>,
            RatingsUnblocked::<Impl, IMPL_OFFSET>,
            RatingsChanged::<Impl, IMPL_OFFSET>,
            TimeHole::<Impl, IMPL_OFFSET>,
            StaleDataRead::<Impl, IMPL_OFFSET>,
            ContentBecomingStale::<Impl, IMPL_OFFSET>,
            StaleFileDeleted::<Impl, IMPL_OFFSET>,
            RateChange::<Impl, IMPL_OFFSET>,
            BroadcastEvent::<Impl, IMPL_OFFSET>,
            BroadcastEventEx::<Impl, IMPL_OFFSET>,
            COPPBlocked::<Impl, IMPL_OFFSET>,
            COPPUnblocked::<Impl, IMPL_OFFSET>,
            ContentPrimarilyAudio::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidStreamBufferSourceEvent3 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidStreamBufferV2SourceEventImpl: Sized + IMSVidFilePlaybackEventImpl + IMSVidPlaybackEventImpl + IMSVidInputDeviceEventImpl + IDispatchImpl {
    fn RatingsChanged();
    fn TimeHole();
    fn StaleDataRead();
    fn ContentBecomingStale();
    fn StaleFileDeleted();
    fn RateChange();
    fn BroadcastEvent();
    fn BroadcastEventEx();
    fn ContentPrimarilyAudio();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidStreamBufferV2SourceEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidStreamBufferV2SourceEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidStreamBufferV2SourceEventVtbl {
        unsafe extern "system" fn RatingsChanged<Impl: IMSVidStreamBufferV2SourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TimeHole<Impl: IMSVidStreamBufferV2SourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, streamoffsetms: i32, sizems: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StaleDataRead<Impl: IMSVidStreamBufferV2SourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ContentBecomingStale<Impl: IMSVidStreamBufferV2SourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StaleFileDeleted<Impl: IMSVidStreamBufferV2SourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RateChange<Impl: IMSVidStreamBufferV2SourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, qwnewrate: f64, qwoldrate: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BroadcastEvent<Impl: IMSVidStreamBufferV2SourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BroadcastEventEx<Impl: IMSVidStreamBufferV2SourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, param1: u32, param2: u32, param3: u32, param4: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ContentPrimarilyAudio<Impl: IMSVidStreamBufferV2SourceEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            EndOfMedia::<Impl, IMPL_OFFSET>,
            RatingsChanged::<Impl, IMPL_OFFSET>,
            TimeHole::<Impl, IMPL_OFFSET>,
            StaleDataRead::<Impl, IMPL_OFFSET>,
            ContentBecomingStale::<Impl, IMPL_OFFSET>,
            StaleFileDeleted::<Impl, IMPL_OFFSET>,
            RateChange::<Impl, IMPL_OFFSET>,
            BroadcastEvent::<Impl, IMPL_OFFSET>,
            BroadcastEventEx::<Impl, IMPL_OFFSET>,
            ContentPrimarilyAudio::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidStreamBufferV2SourceEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidTunerImpl: Sized + IMSVidVideoInputDeviceImpl + IMSVidInputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn Tune();
    fn SetTune();
    fn TuningSpace();
    fn SetTuningSpace();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidTunerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidTunerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidTunerVtbl {
        unsafe extern "system" fn Tune<Impl: IMSVidTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptr: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTune<Impl: IMSVidTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptr: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TuningSpace<Impl: IMSVidTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plts: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTuningSpace<Impl: IMSVidTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plts: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            IsViewable::<Impl, IMPL_OFFSET>,
            View::<Impl, IMPL_OFFSET>,
            Tune::<Impl, IMPL_OFFSET>,
            SetTune::<Impl, IMPL_OFFSET>,
            TuningSpace::<Impl, IMPL_OFFSET>,
            SetTuningSpace::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidTuner as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidTunerEventImpl: Sized + IMSVidInputDeviceEventImpl + IDispatchImpl {
    fn TuneChanged();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidTunerEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidTunerEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidTunerEventVtbl {
        unsafe extern "system" fn TuneChanged<Impl: IMSVidTunerEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpd: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, TuneChanged::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidTunerEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidVMR9Impl: Sized + IMSVidVideoRendererImpl + IMSVidOutputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn Allocator_ID();
    fn SetAllocator();
    fn SetSuppressEffects();
    fn SuppressEffects();
    fn Allocator();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidVMR9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidVMR9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidVMR9Vtbl {
        unsafe extern "system" fn Allocator_ID<Impl: IMSVidVMR9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAllocator<Impl: IMSVidVMR9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, allocpresent: *mut ::core::ffi::c_void, id: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSuppressEffects<Impl: IMSVidVMR9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bsuppress: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SuppressEffects<Impl: IMSVidVMR9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bsuppress: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Allocator<Impl: IMSVidVMR9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, allocpresent: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            CustomCompositorClass::<Impl, IMPL_OFFSET>,
            SetCustomCompositorClass::<Impl, IMPL_OFFSET>,
            _CustomCompositorClass::<Impl, IMPL_OFFSET>,
            Set_CustomCompositorClass::<Impl, IMPL_OFFSET>,
            _CustomCompositor::<Impl, IMPL_OFFSET>,
            Set_CustomCompositor::<Impl, IMPL_OFFSET>,
            MixerBitmap::<Impl, IMPL_OFFSET>,
            _MixerBitmap::<Impl, IMPL_OFFSET>,
            SetMixerBitmap::<Impl, IMPL_OFFSET>,
            Set_MixerBitmap::<Impl, IMPL_OFFSET>,
            MixerBitmapPositionRect::<Impl, IMPL_OFFSET>,
            SetMixerBitmapPositionRect::<Impl, IMPL_OFFSET>,
            MixerBitmapOpacity::<Impl, IMPL_OFFSET>,
            SetMixerBitmapOpacity::<Impl, IMPL_OFFSET>,
            SetupMixerBitmap::<Impl, IMPL_OFFSET>,
            SourceSize::<Impl, IMPL_OFFSET>,
            SetSourceSize::<Impl, IMPL_OFFSET>,
            OverScan::<Impl, IMPL_OFFSET>,
            SetOverScan::<Impl, IMPL_OFFSET>,
            AvailableSourceRect::<Impl, IMPL_OFFSET>,
            MaxVidRect::<Impl, IMPL_OFFSET>,
            MinVidRect::<Impl, IMPL_OFFSET>,
            ClippedSourceRect::<Impl, IMPL_OFFSET>,
            SetClippedSourceRect::<Impl, IMPL_OFFSET>,
            UsingOverlay::<Impl, IMPL_OFFSET>,
            SetUsingOverlay::<Impl, IMPL_OFFSET>,
            Capture::<Impl, IMPL_OFFSET>,
            FramesPerSecond::<Impl, IMPL_OFFSET>,
            DecimateInput::<Impl, IMPL_OFFSET>,
            SetDecimateInput::<Impl, IMPL_OFFSET>,
            Allocator_ID::<Impl, IMPL_OFFSET>,
            SetAllocator::<Impl, IMPL_OFFSET>,
            SetSuppressEffects::<Impl, IMPL_OFFSET>,
            SuppressEffects::<Impl, IMPL_OFFSET>,
            Allocator::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidVMR9 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com"))]
pub trait IMSVidVRGraphSegmentImpl: Sized + IMSVidGraphSegmentImpl + IPersistImpl {
    fn Set_VMRendererMode();
    fn SetOwner();
    fn Owner();
    fn UseOverlay();
    fn SetUseOverlay();
    fn Visible();
    fn SetVisible();
    fn ColorKey();
    fn SetColorKey();
    fn Source();
    fn SetSource();
    fn Destination();
    fn SetDestination();
    fn NativeSize();
    fn BorderColor();
    fn SetBorderColor();
    fn MaintainAspectRatio();
    fn SetMaintainAspectRatio();
    fn Refresh();
    fn DisplayChange();
    fn RePaint();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com"))]
impl IMSVidVRGraphSegmentVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidVRGraphSegmentImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidVRGraphSegmentVtbl {
        unsafe extern "system" fn Set_VMRendererMode<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwmode: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOwner<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, window: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Owner<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, window: *mut super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UseOverlay<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, useoverlayval: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetUseOverlay<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, useoverlayval: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Visible<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, visible: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetVisible<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, visible: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ColorKey<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, colorkey: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetColorKey<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, colorkey: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Source<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSource<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r: super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Destination<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDestination<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r: super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NativeSize<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sizeval: *mut super::super::Foundation::SIZE, aspectratio: *mut super::super::Foundation::SIZE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BorderColor<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, color: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBorderColor<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, color: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MaintainAspectRatio<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fmaintain: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMaintainAspectRatio<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fmaintain: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Refresh<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisplayChange<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RePaint<Impl: IMSVidVRGraphSegmentImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetClassID::<Impl, IMPL_OFFSET>,
            Init::<Impl, IMPL_OFFSET>,
            SetInit::<Impl, IMPL_OFFSET>,
            EnumFilters::<Impl, IMPL_OFFSET>,
            Container::<Impl, IMPL_OFFSET>,
            SetContainer::<Impl, IMPL_OFFSET>,
            Type::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            Build::<Impl, IMPL_OFFSET>,
            PostBuild::<Impl, IMPL_OFFSET>,
            PreRun::<Impl, IMPL_OFFSET>,
            PostRun::<Impl, IMPL_OFFSET>,
            PreStop::<Impl, IMPL_OFFSET>,
            PostStop::<Impl, IMPL_OFFSET>,
            OnEventNotify::<Impl, IMPL_OFFSET>,
            Decompose::<Impl, IMPL_OFFSET>,
            Set_VMRendererMode::<Impl, IMPL_OFFSET>,
            SetOwner::<Impl, IMPL_OFFSET>,
            Owner::<Impl, IMPL_OFFSET>,
            UseOverlay::<Impl, IMPL_OFFSET>,
            SetUseOverlay::<Impl, IMPL_OFFSET>,
            Visible::<Impl, IMPL_OFFSET>,
            SetVisible::<Impl, IMPL_OFFSET>,
            ColorKey::<Impl, IMPL_OFFSET>,
            SetColorKey::<Impl, IMPL_OFFSET>,
            Source::<Impl, IMPL_OFFSET>,
            SetSource::<Impl, IMPL_OFFSET>,
            Destination::<Impl, IMPL_OFFSET>,
            SetDestination::<Impl, IMPL_OFFSET>,
            NativeSize::<Impl, IMPL_OFFSET>,
            BorderColor::<Impl, IMPL_OFFSET>,
            SetBorderColor::<Impl, IMPL_OFFSET>,
            MaintainAspectRatio::<Impl, IMPL_OFFSET>,
            SetMaintainAspectRatio::<Impl, IMPL_OFFSET>,
            Refresh::<Impl, IMPL_OFFSET>,
            DisplayChange::<Impl, IMPL_OFFSET>,
            RePaint::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidVRGraphSegment as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidVideoInputDeviceImpl: Sized + IMSVidInputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidVideoInputDeviceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidVideoInputDeviceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidVideoInputDeviceVtbl {
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            IsViewable::<Impl, IMPL_OFFSET>,
            View::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidVideoInputDevice as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidVideoRendererImpl: Sized + IMSVidOutputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn CustomCompositorClass();
    fn SetCustomCompositorClass();
    fn _CustomCompositorClass();
    fn Set_CustomCompositorClass();
    fn _CustomCompositor();
    fn Set_CustomCompositor();
    fn MixerBitmap();
    fn _MixerBitmap();
    fn SetMixerBitmap();
    fn Set_MixerBitmap();
    fn MixerBitmapPositionRect();
    fn SetMixerBitmapPositionRect();
    fn MixerBitmapOpacity();
    fn SetMixerBitmapOpacity();
    fn SetupMixerBitmap();
    fn SourceSize();
    fn SetSourceSize();
    fn OverScan();
    fn SetOverScan();
    fn AvailableSourceRect();
    fn MaxVidRect();
    fn MinVidRect();
    fn ClippedSourceRect();
    fn SetClippedSourceRect();
    fn UsingOverlay();
    fn SetUsingOverlay();
    fn Capture();
    fn FramesPerSecond();
    fn DecimateInput();
    fn SetDecimateInput();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidVideoRendererVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidVideoRendererImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidVideoRendererVtbl {
        unsafe extern "system" fn CustomCompositorClass<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, compositorclsid: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCustomCompositorClass<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, compositorclsid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _CustomCompositorClass<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, compositorclsid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Set_CustomCompositorClass<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, compositorclsid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _CustomCompositor<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, compositor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Set_CustomCompositor<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, compositor: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MixerBitmap<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mixerpicturedisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _MixerBitmap<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mixerpicture: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMixerBitmap<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mixerpicturedisp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Set_MixerBitmap<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mixerpicture: *const VMRALPHABITMAP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MixerBitmapPositionRect<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rdest: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMixerBitmapPositionRect<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rdest: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MixerBitmapOpacity<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, opacity: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMixerBitmapOpacity<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, opacity: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetupMixerBitmap<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mixerpicturedisp: ::windows::core::RawPtr, opacity: i32, rdest: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SourceSize<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentsize: *mut SourceSizeList) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourceSize<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newsize: SourceSizeList) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OverScan<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plpercent: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOverScan<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpercent: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AvailableSourceRect<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prect: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MaxVidRect<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppvidrect: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MinVidRect<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppvidrect: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ClippedSourceRect<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prect: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetClippedSourceRect<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prect: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UsingOverlay<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, useoverlayval: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetUsingOverlay<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, useoverlayval: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Capture<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentimage: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FramesPerSecond<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DecimateInput<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdeci: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDecimateInput<Impl: IMSVidVideoRendererImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdeci: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            CustomCompositorClass::<Impl, IMPL_OFFSET>,
            SetCustomCompositorClass::<Impl, IMPL_OFFSET>,
            _CustomCompositorClass::<Impl, IMPL_OFFSET>,
            Set_CustomCompositorClass::<Impl, IMPL_OFFSET>,
            _CustomCompositor::<Impl, IMPL_OFFSET>,
            Set_CustomCompositor::<Impl, IMPL_OFFSET>,
            MixerBitmap::<Impl, IMPL_OFFSET>,
            _MixerBitmap::<Impl, IMPL_OFFSET>,
            SetMixerBitmap::<Impl, IMPL_OFFSET>,
            Set_MixerBitmap::<Impl, IMPL_OFFSET>,
            MixerBitmapPositionRect::<Impl, IMPL_OFFSET>,
            SetMixerBitmapPositionRect::<Impl, IMPL_OFFSET>,
            MixerBitmapOpacity::<Impl, IMPL_OFFSET>,
            SetMixerBitmapOpacity::<Impl, IMPL_OFFSET>,
            SetupMixerBitmap::<Impl, IMPL_OFFSET>,
            SourceSize::<Impl, IMPL_OFFSET>,
            SetSourceSize::<Impl, IMPL_OFFSET>,
            OverScan::<Impl, IMPL_OFFSET>,
            SetOverScan::<Impl, IMPL_OFFSET>,
            AvailableSourceRect::<Impl, IMPL_OFFSET>,
            MaxVidRect::<Impl, IMPL_OFFSET>,
            MinVidRect::<Impl, IMPL_OFFSET>,
            ClippedSourceRect::<Impl, IMPL_OFFSET>,
            SetClippedSourceRect::<Impl, IMPL_OFFSET>,
            UsingOverlay::<Impl, IMPL_OFFSET>,
            SetUsingOverlay::<Impl, IMPL_OFFSET>,
            Capture::<Impl, IMPL_OFFSET>,
            FramesPerSecond::<Impl, IMPL_OFFSET>,
            DecimateInput::<Impl, IMPL_OFFSET>,
            SetDecimateInput::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidVideoRenderer as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidVideoRenderer2Impl: Sized + IMSVidVideoRendererImpl + IMSVidOutputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn Allocator();
    fn _Allocator();
    fn Allocator_ID();
    fn SetAllocator();
    fn _SetAllocator2();
    fn SetSuppressEffects();
    fn SuppressEffects();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidVideoRenderer2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidVideoRenderer2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidVideoRenderer2Vtbl {
        unsafe extern "system" fn Allocator<Impl: IMSVidVideoRenderer2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, allocpresent: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _Allocator<Impl: IMSVidVideoRenderer2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, allocpresent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Allocator_ID<Impl: IMSVidVideoRenderer2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAllocator<Impl: IMSVidVideoRenderer2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, allocpresent: *mut ::core::ffi::c_void, id: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _SetAllocator2<Impl: IMSVidVideoRenderer2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, allocpresent: ::windows::core::RawPtr, id: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSuppressEffects<Impl: IMSVidVideoRenderer2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bsuppress: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SuppressEffects<Impl: IMSVidVideoRenderer2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bsuppress: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            CustomCompositorClass::<Impl, IMPL_OFFSET>,
            SetCustomCompositorClass::<Impl, IMPL_OFFSET>,
            _CustomCompositorClass::<Impl, IMPL_OFFSET>,
            Set_CustomCompositorClass::<Impl, IMPL_OFFSET>,
            _CustomCompositor::<Impl, IMPL_OFFSET>,
            Set_CustomCompositor::<Impl, IMPL_OFFSET>,
            MixerBitmap::<Impl, IMPL_OFFSET>,
            _MixerBitmap::<Impl, IMPL_OFFSET>,
            SetMixerBitmap::<Impl, IMPL_OFFSET>,
            Set_MixerBitmap::<Impl, IMPL_OFFSET>,
            MixerBitmapPositionRect::<Impl, IMPL_OFFSET>,
            SetMixerBitmapPositionRect::<Impl, IMPL_OFFSET>,
            MixerBitmapOpacity::<Impl, IMPL_OFFSET>,
            SetMixerBitmapOpacity::<Impl, IMPL_OFFSET>,
            SetupMixerBitmap::<Impl, IMPL_OFFSET>,
            SourceSize::<Impl, IMPL_OFFSET>,
            SetSourceSize::<Impl, IMPL_OFFSET>,
            OverScan::<Impl, IMPL_OFFSET>,
            SetOverScan::<Impl, IMPL_OFFSET>,
            AvailableSourceRect::<Impl, IMPL_OFFSET>,
            MaxVidRect::<Impl, IMPL_OFFSET>,
            MinVidRect::<Impl, IMPL_OFFSET>,
            ClippedSourceRect::<Impl, IMPL_OFFSET>,
            SetClippedSourceRect::<Impl, IMPL_OFFSET>,
            UsingOverlay::<Impl, IMPL_OFFSET>,
            SetUsingOverlay::<Impl, IMPL_OFFSET>,
            Capture::<Impl, IMPL_OFFSET>,
            FramesPerSecond::<Impl, IMPL_OFFSET>,
            DecimateInput::<Impl, IMPL_OFFSET>,
            SetDecimateInput::<Impl, IMPL_OFFSET>,
            Allocator::<Impl, IMPL_OFFSET>,
            _Allocator::<Impl, IMPL_OFFSET>,
            Allocator_ID::<Impl, IMPL_OFFSET>,
            SetAllocator::<Impl, IMPL_OFFSET>,
            _SetAllocator2::<Impl, IMPL_OFFSET>,
            SetSuppressEffects::<Impl, IMPL_OFFSET>,
            SuppressEffects::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidVideoRenderer2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidVideoRendererDevicesImpl: Sized + IDispatchImpl {
    fn Count();
    fn _NewEnum();
    fn Item();
    fn Add();
    fn Remove();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidVideoRendererDevicesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidVideoRendererDevicesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidVideoRendererDevicesVtbl {
        unsafe extern "system" fn Count<Impl: IMSVidVideoRendererDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _NewEnum<Impl: IMSVidVideoRendererDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Item<Impl: IMSVidVideoRendererDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, v: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, pdb: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Add<Impl: IMSVidVideoRendererDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Remove<Impl: IMSVidVideoRendererDevicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, v: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, Count::<Impl, IMPL_OFFSET>, _NewEnum::<Impl, IMPL_OFFSET>, Item::<Impl, IMPL_OFFSET>, Add::<Impl, IMPL_OFFSET>, Remove::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidVideoRendererDevices as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidVideoRendererEventImpl: Sized + IMSVidOutputDeviceEventImpl + IMSVidDeviceEventImpl + IDispatchImpl {
    fn OverlayUnavailable();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidVideoRendererEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidVideoRendererEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidVideoRendererEventVtbl {
        unsafe extern "system" fn OverlayUnavailable<Impl: IMSVidVideoRendererEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, StateChange::<Impl, IMPL_OFFSET>, OverlayUnavailable::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidVideoRendererEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidVideoRendererEvent2Impl: Sized + IMSVidOutputDeviceEventImpl + IMSVidDeviceEventImpl + IDispatchImpl {
    fn OverlayUnavailable();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidVideoRendererEvent2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidVideoRendererEvent2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidVideoRendererEvent2Vtbl {
        unsafe extern "system" fn OverlayUnavailable<Impl: IMSVidVideoRendererEvent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, StateChange::<Impl, IMPL_OFFSET>, OverlayUnavailable::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidVideoRendererEvent2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidWebDVDImpl: Sized + IMSVidPlaybackImpl + IMSVidInputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn OnDVDEvent();
    fn PlayTitle();
    fn PlayChapterInTitle();
    fn PlayChapter();
    fn PlayChaptersAutoStop();
    fn PlayAtTime();
    fn PlayAtTimeInTitle();
    fn PlayPeriodInTitleAutoStop();
    fn ReplayChapter();
    fn PlayPrevChapter();
    fn PlayNextChapter();
    fn StillOff();
    fn AudioLanguage();
    fn ShowMenu();
    fn Resume();
    fn ReturnFromSubmenu();
    fn ButtonsAvailable();
    fn CurrentButton();
    fn SelectAndActivateButton();
    fn ActivateButton();
    fn SelectRightButton();
    fn SelectLeftButton();
    fn SelectLowerButton();
    fn SelectUpperButton();
    fn ActivateAtPosition();
    fn SelectAtPosition();
    fn ButtonAtPosition();
    fn NumberOfChapters();
    fn TotalTitleTime();
    fn TitlesAvailable();
    fn VolumesAvailable();
    fn CurrentVolume();
    fn CurrentDiscSide();
    fn CurrentDomain();
    fn CurrentChapter();
    fn CurrentTitle();
    fn CurrentTime();
    fn DVDTimeCode2bstr();
    fn DVDDirectory();
    fn SetDVDDirectory();
    fn IsSubpictureStreamEnabled();
    fn IsAudioStreamEnabled();
    fn CurrentSubpictureStream();
    fn SetCurrentSubpictureStream();
    fn SubpictureLanguage();
    fn CurrentAudioStream();
    fn SetCurrentAudioStream();
    fn AudioStreamsAvailable();
    fn AnglesAvailable();
    fn CurrentAngle();
    fn SetCurrentAngle();
    fn SubpictureStreamsAvailable();
    fn SubpictureOn();
    fn SetSubpictureOn();
    fn DVDUniqueID();
    fn AcceptParentalLevelChange();
    fn NotifyParentalLevelChange();
    fn SelectParentalCountry();
    fn SelectParentalLevel();
    fn TitleParentalLevels();
    fn PlayerParentalCountry();
    fn PlayerParentalLevel();
    fn Eject();
    fn UOPValid();
    fn SPRM();
    fn GPRM();
    fn SetGPRM();
    fn DVDTextStringType();
    fn DVDTextString();
    fn DVDTextNumberOfStrings();
    fn DVDTextNumberOfLanguages();
    fn DVDTextLanguageLCID();
    fn RegionChange();
    fn DVDAdm();
    fn DeleteBookmark();
    fn RestoreBookmark();
    fn SaveBookmark();
    fn SelectDefaultAudioLanguage();
    fn SelectDefaultSubpictureLanguage();
    fn PreferredSubpictureStream();
    fn DefaultMenuLanguage();
    fn SetDefaultMenuLanguage();
    fn DefaultSubpictureLanguage();
    fn DefaultAudioLanguage();
    fn DefaultSubpictureLanguageExt();
    fn DefaultAudioLanguageExt();
    fn LanguageFromLCID();
    fn KaraokeAudioPresentationMode();
    fn SetKaraokeAudioPresentationMode();
    fn KaraokeChannelContent();
    fn KaraokeChannelAssignment();
    fn RestorePreferredSettings();
    fn ButtonRect();
    fn DVDScreenInMouseCoordinates();
    fn SetDVDScreenInMouseCoordinates();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidWebDVDVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidWebDVDImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidWebDVDVtbl {
        unsafe extern "system" fn OnDVDEvent<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, levent: i32, lparam1: isize, lparam2: isize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayTitle<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ltitle: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayChapterInTitle<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ltitle: i32, lchapter: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayChapter<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lchapter: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayChaptersAutoStop<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ltitle: i32, lstrchapter: i32, lchaptercount: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayAtTime<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strtime: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayAtTimeInTitle<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ltitle: i32, strtime: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayPeriodInTitleAutoStop<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ltitle: i32, strstarttime: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, strendtime: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReplayChapter<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayPrevChapter<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayNextChapter<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StillOff<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AudioLanguage<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lstream: i32, fformat: i16, straudiolang: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ShowMenu<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, menuid: DVDMenuIDConstants) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Resume<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReturnFromSubmenu<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ButtonsAvailable<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CurrentButton<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectAndActivateButton<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lbutton: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ActivateButton<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectRightButton<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectLeftButton<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectLowerButton<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectUpperButton<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ActivateAtPosition<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, xpos: i32, ypos: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectAtPosition<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, xpos: i32, ypos: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ButtonAtPosition<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, xpos: i32, ypos: i32, plbutton: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NumberOfChapters<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ltitle: i32, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TotalTitleTime<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TitlesAvailable<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VolumesAvailable<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CurrentVolume<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CurrentDiscSide<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CurrentDomain<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CurrentChapter<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CurrentTitle<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CurrentTime<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DVDTimeCode2bstr<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timecode: i32, ptimestr: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DVDDirectory<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDVDDirectory<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newval: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsSubpictureStreamEnabled<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lstream: i32, fenabled: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsAudioStreamEnabled<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lstream: i32, fenabled: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CurrentSubpictureStream<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentSubpictureStream<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SubpictureLanguage<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lstream: i32, strlanguage: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CurrentAudioStream<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentAudioStream<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AudioStreamsAvailable<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AnglesAvailable<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CurrentAngle<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentAngle<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SubpictureStreamsAvailable<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SubpictureOn<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSubpictureOn<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newval: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DVDUniqueID<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AcceptParentalLevelChange<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, faccept: i16, strusername: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, strpassword: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NotifyParentalLevelChange<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newval: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectParentalCountry<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcountry: i32, strusername: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, strpassword: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectParentalLevel<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lparentallevel: i32, strusername: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, strpassword: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TitleParentalLevels<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ltitle: i32, plparentallevels: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayerParentalCountry<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plcountrycode: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayerParentalLevel<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plparentallevel: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Eject<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UOPValid<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, luop: i32, pfvalid: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SPRM<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lindex: i32, pssprm: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GPRM<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lindex: i32, pssprm: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetGPRM<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lindex: i32, svalue: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DVDTextStringType<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, llangindex: i32, lstringindex: i32, ptype: *mut DVDTextStringType) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DVDTextString<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, llangindex: i32, lstringindex: i32, pstrtext: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DVDTextNumberOfStrings<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, llangindex: i32, plnumofstrings: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DVDTextNumberOfLanguages<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plnumoflangs: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DVDTextLanguageLCID<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, llangindex: i32, lcid: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegionChange<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DVDAdm<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DeleteBookmark<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RestoreBookmark<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SaveBookmark<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectDefaultAudioLanguage<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lang: i32, ext: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectDefaultSubpictureLanguage<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lang: i32, ext: DVDSPExt) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PreferredSubpictureStream<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DefaultMenuLanguage<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lang: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefaultMenuLanguage<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lang: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DefaultSubpictureLanguage<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lang: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DefaultAudioLanguage<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lang: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DefaultSubpictureLanguageExt<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ext: *mut DVDSPExt) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DefaultAudioLanguageExt<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ext: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LanguageFromLCID<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcid: i32, lang: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn KaraokeAudioPresentationMode<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKaraokeAudioPresentationMode<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn KaraokeChannelContent<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lstream: i32, lchan: i32, lcontent: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn KaraokeChannelAssignment<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lstream: i32, lchannelassignment: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RestorePreferredSettings<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ButtonRect<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lbutton: i32, prect: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DVDScreenInMouseCoordinates<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pprect: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDVDScreenInMouseCoordinates<Impl: IMSVidWebDVDImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prect: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            IsViewable::<Impl, IMPL_OFFSET>,
            View::<Impl, IMPL_OFFSET>,
            EnableResetOnStop::<Impl, IMPL_OFFSET>,
            SetEnableResetOnStop::<Impl, IMPL_OFFSET>,
            Run::<Impl, IMPL_OFFSET>,
            Pause::<Impl, IMPL_OFFSET>,
            Stop::<Impl, IMPL_OFFSET>,
            CanStep::<Impl, IMPL_OFFSET>,
            Step::<Impl, IMPL_OFFSET>,
            SetRate::<Impl, IMPL_OFFSET>,
            Rate::<Impl, IMPL_OFFSET>,
            SetCurrentPosition::<Impl, IMPL_OFFSET>,
            CurrentPosition::<Impl, IMPL_OFFSET>,
            SetPositionMode::<Impl, IMPL_OFFSET>,
            PositionMode::<Impl, IMPL_OFFSET>,
            Length::<Impl, IMPL_OFFSET>,
            OnDVDEvent::<Impl, IMPL_OFFSET>,
            PlayTitle::<Impl, IMPL_OFFSET>,
            PlayChapterInTitle::<Impl, IMPL_OFFSET>,
            PlayChapter::<Impl, IMPL_OFFSET>,
            PlayChaptersAutoStop::<Impl, IMPL_OFFSET>,
            PlayAtTime::<Impl, IMPL_OFFSET>,
            PlayAtTimeInTitle::<Impl, IMPL_OFFSET>,
            PlayPeriodInTitleAutoStop::<Impl, IMPL_OFFSET>,
            ReplayChapter::<Impl, IMPL_OFFSET>,
            PlayPrevChapter::<Impl, IMPL_OFFSET>,
            PlayNextChapter::<Impl, IMPL_OFFSET>,
            StillOff::<Impl, IMPL_OFFSET>,
            AudioLanguage::<Impl, IMPL_OFFSET>,
            ShowMenu::<Impl, IMPL_OFFSET>,
            Resume::<Impl, IMPL_OFFSET>,
            ReturnFromSubmenu::<Impl, IMPL_OFFSET>,
            ButtonsAvailable::<Impl, IMPL_OFFSET>,
            CurrentButton::<Impl, IMPL_OFFSET>,
            SelectAndActivateButton::<Impl, IMPL_OFFSET>,
            ActivateButton::<Impl, IMPL_OFFSET>,
            SelectRightButton::<Impl, IMPL_OFFSET>,
            SelectLeftButton::<Impl, IMPL_OFFSET>,
            SelectLowerButton::<Impl, IMPL_OFFSET>,
            SelectUpperButton::<Impl, IMPL_OFFSET>,
            ActivateAtPosition::<Impl, IMPL_OFFSET>,
            SelectAtPosition::<Impl, IMPL_OFFSET>,
            ButtonAtPosition::<Impl, IMPL_OFFSET>,
            NumberOfChapters::<Impl, IMPL_OFFSET>,
            TotalTitleTime::<Impl, IMPL_OFFSET>,
            TitlesAvailable::<Impl, IMPL_OFFSET>,
            VolumesAvailable::<Impl, IMPL_OFFSET>,
            CurrentVolume::<Impl, IMPL_OFFSET>,
            CurrentDiscSide::<Impl, IMPL_OFFSET>,
            CurrentDomain::<Impl, IMPL_OFFSET>,
            CurrentChapter::<Impl, IMPL_OFFSET>,
            CurrentTitle::<Impl, IMPL_OFFSET>,
            CurrentTime::<Impl, IMPL_OFFSET>,
            DVDTimeCode2bstr::<Impl, IMPL_OFFSET>,
            DVDDirectory::<Impl, IMPL_OFFSET>,
            SetDVDDirectory::<Impl, IMPL_OFFSET>,
            IsSubpictureStreamEnabled::<Impl, IMPL_OFFSET>,
            IsAudioStreamEnabled::<Impl, IMPL_OFFSET>,
            CurrentSubpictureStream::<Impl, IMPL_OFFSET>,
            SetCurrentSubpictureStream::<Impl, IMPL_OFFSET>,
            SubpictureLanguage::<Impl, IMPL_OFFSET>,
            CurrentAudioStream::<Impl, IMPL_OFFSET>,
            SetCurrentAudioStream::<Impl, IMPL_OFFSET>,
            AudioStreamsAvailable::<Impl, IMPL_OFFSET>,
            AnglesAvailable::<Impl, IMPL_OFFSET>,
            CurrentAngle::<Impl, IMPL_OFFSET>,
            SetCurrentAngle::<Impl, IMPL_OFFSET>,
            SubpictureStreamsAvailable::<Impl, IMPL_OFFSET>,
            SubpictureOn::<Impl, IMPL_OFFSET>,
            SetSubpictureOn::<Impl, IMPL_OFFSET>,
            DVDUniqueID::<Impl, IMPL_OFFSET>,
            AcceptParentalLevelChange::<Impl, IMPL_OFFSET>,
            NotifyParentalLevelChange::<Impl, IMPL_OFFSET>,
            SelectParentalCountry::<Impl, IMPL_OFFSET>,
            SelectParentalLevel::<Impl, IMPL_OFFSET>,
            TitleParentalLevels::<Impl, IMPL_OFFSET>,
            PlayerParentalCountry::<Impl, IMPL_OFFSET>,
            PlayerParentalLevel::<Impl, IMPL_OFFSET>,
            Eject::<Impl, IMPL_OFFSET>,
            UOPValid::<Impl, IMPL_OFFSET>,
            SPRM::<Impl, IMPL_OFFSET>,
            GPRM::<Impl, IMPL_OFFSET>,
            SetGPRM::<Impl, IMPL_OFFSET>,
            DVDTextStringType::<Impl, IMPL_OFFSET>,
            DVDTextString::<Impl, IMPL_OFFSET>,
            DVDTextNumberOfStrings::<Impl, IMPL_OFFSET>,
            DVDTextNumberOfLanguages::<Impl, IMPL_OFFSET>,
            DVDTextLanguageLCID::<Impl, IMPL_OFFSET>,
            RegionChange::<Impl, IMPL_OFFSET>,
            DVDAdm::<Impl, IMPL_OFFSET>,
            DeleteBookmark::<Impl, IMPL_OFFSET>,
            RestoreBookmark::<Impl, IMPL_OFFSET>,
            SaveBookmark::<Impl, IMPL_OFFSET>,
            SelectDefaultAudioLanguage::<Impl, IMPL_OFFSET>,
            SelectDefaultSubpictureLanguage::<Impl, IMPL_OFFSET>,
            PreferredSubpictureStream::<Impl, IMPL_OFFSET>,
            DefaultMenuLanguage::<Impl, IMPL_OFFSET>,
            SetDefaultMenuLanguage::<Impl, IMPL_OFFSET>,
            DefaultSubpictureLanguage::<Impl, IMPL_OFFSET>,
            DefaultAudioLanguage::<Impl, IMPL_OFFSET>,
            DefaultSubpictureLanguageExt::<Impl, IMPL_OFFSET>,
            DefaultAudioLanguageExt::<Impl, IMPL_OFFSET>,
            LanguageFromLCID::<Impl, IMPL_OFFSET>,
            KaraokeAudioPresentationMode::<Impl, IMPL_OFFSET>,
            SetKaraokeAudioPresentationMode::<Impl, IMPL_OFFSET>,
            KaraokeChannelContent::<Impl, IMPL_OFFSET>,
            KaraokeChannelAssignment::<Impl, IMPL_OFFSET>,
            RestorePreferredSettings::<Impl, IMPL_OFFSET>,
            ButtonRect::<Impl, IMPL_OFFSET>,
            DVDScreenInMouseCoordinates::<Impl, IMPL_OFFSET>,
            SetDVDScreenInMouseCoordinates::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidWebDVD as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidWebDVD2Impl: Sized + IMSVidWebDVDImpl + IMSVidPlaybackImpl + IMSVidInputDeviceImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn Bookmark();
    fn SetBookmark();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidWebDVD2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidWebDVD2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidWebDVD2Vtbl {
        unsafe extern "system" fn Bookmark<Impl: IMSVidWebDVD2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdata: *mut *mut u8, pdatalength: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBookmark<Impl: IMSVidWebDVD2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdata: *const u8, dwdatalength: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            IsViewable::<Impl, IMPL_OFFSET>,
            View::<Impl, IMPL_OFFSET>,
            EnableResetOnStop::<Impl, IMPL_OFFSET>,
            SetEnableResetOnStop::<Impl, IMPL_OFFSET>,
            Run::<Impl, IMPL_OFFSET>,
            Pause::<Impl, IMPL_OFFSET>,
            Stop::<Impl, IMPL_OFFSET>,
            CanStep::<Impl, IMPL_OFFSET>,
            Step::<Impl, IMPL_OFFSET>,
            SetRate::<Impl, IMPL_OFFSET>,
            Rate::<Impl, IMPL_OFFSET>,
            SetCurrentPosition::<Impl, IMPL_OFFSET>,
            CurrentPosition::<Impl, IMPL_OFFSET>,
            SetPositionMode::<Impl, IMPL_OFFSET>,
            PositionMode::<Impl, IMPL_OFFSET>,
            Length::<Impl, IMPL_OFFSET>,
            OnDVDEvent::<Impl, IMPL_OFFSET>,
            PlayTitle::<Impl, IMPL_OFFSET>,
            PlayChapterInTitle::<Impl, IMPL_OFFSET>,
            PlayChapter::<Impl, IMPL_OFFSET>,
            PlayChaptersAutoStop::<Impl, IMPL_OFFSET>,
            PlayAtTime::<Impl, IMPL_OFFSET>,
            PlayAtTimeInTitle::<Impl, IMPL_OFFSET>,
            PlayPeriodInTitleAutoStop::<Impl, IMPL_OFFSET>,
            ReplayChapter::<Impl, IMPL_OFFSET>,
            PlayPrevChapter::<Impl, IMPL_OFFSET>,
            PlayNextChapter::<Impl, IMPL_OFFSET>,
            StillOff::<Impl, IMPL_OFFSET>,
            AudioLanguage::<Impl, IMPL_OFFSET>,
            ShowMenu::<Impl, IMPL_OFFSET>,
            Resume::<Impl, IMPL_OFFSET>,
            ReturnFromSubmenu::<Impl, IMPL_OFFSET>,
            ButtonsAvailable::<Impl, IMPL_OFFSET>,
            CurrentButton::<Impl, IMPL_OFFSET>,
            SelectAndActivateButton::<Impl, IMPL_OFFSET>,
            ActivateButton::<Impl, IMPL_OFFSET>,
            SelectRightButton::<Impl, IMPL_OFFSET>,
            SelectLeftButton::<Impl, IMPL_OFFSET>,
            SelectLowerButton::<Impl, IMPL_OFFSET>,
            SelectUpperButton::<Impl, IMPL_OFFSET>,
            ActivateAtPosition::<Impl, IMPL_OFFSET>,
            SelectAtPosition::<Impl, IMPL_OFFSET>,
            ButtonAtPosition::<Impl, IMPL_OFFSET>,
            NumberOfChapters::<Impl, IMPL_OFFSET>,
            TotalTitleTime::<Impl, IMPL_OFFSET>,
            TitlesAvailable::<Impl, IMPL_OFFSET>,
            VolumesAvailable::<Impl, IMPL_OFFSET>,
            CurrentVolume::<Impl, IMPL_OFFSET>,
            CurrentDiscSide::<Impl, IMPL_OFFSET>,
            CurrentDomain::<Impl, IMPL_OFFSET>,
            CurrentChapter::<Impl, IMPL_OFFSET>,
            CurrentTitle::<Impl, IMPL_OFFSET>,
            CurrentTime::<Impl, IMPL_OFFSET>,
            DVDTimeCode2bstr::<Impl, IMPL_OFFSET>,
            DVDDirectory::<Impl, IMPL_OFFSET>,
            SetDVDDirectory::<Impl, IMPL_OFFSET>,
            IsSubpictureStreamEnabled::<Impl, IMPL_OFFSET>,
            IsAudioStreamEnabled::<Impl, IMPL_OFFSET>,
            CurrentSubpictureStream::<Impl, IMPL_OFFSET>,
            SetCurrentSubpictureStream::<Impl, IMPL_OFFSET>,
            SubpictureLanguage::<Impl, IMPL_OFFSET>,
            CurrentAudioStream::<Impl, IMPL_OFFSET>,
            SetCurrentAudioStream::<Impl, IMPL_OFFSET>,
            AudioStreamsAvailable::<Impl, IMPL_OFFSET>,
            AnglesAvailable::<Impl, IMPL_OFFSET>,
            CurrentAngle::<Impl, IMPL_OFFSET>,
            SetCurrentAngle::<Impl, IMPL_OFFSET>,
            SubpictureStreamsAvailable::<Impl, IMPL_OFFSET>,
            SubpictureOn::<Impl, IMPL_OFFSET>,
            SetSubpictureOn::<Impl, IMPL_OFFSET>,
            DVDUniqueID::<Impl, IMPL_OFFSET>,
            AcceptParentalLevelChange::<Impl, IMPL_OFFSET>,
            NotifyParentalLevelChange::<Impl, IMPL_OFFSET>,
            SelectParentalCountry::<Impl, IMPL_OFFSET>,
            SelectParentalLevel::<Impl, IMPL_OFFSET>,
            TitleParentalLevels::<Impl, IMPL_OFFSET>,
            PlayerParentalCountry::<Impl, IMPL_OFFSET>,
            PlayerParentalLevel::<Impl, IMPL_OFFSET>,
            Eject::<Impl, IMPL_OFFSET>,
            UOPValid::<Impl, IMPL_OFFSET>,
            SPRM::<Impl, IMPL_OFFSET>,
            GPRM::<Impl, IMPL_OFFSET>,
            SetGPRM::<Impl, IMPL_OFFSET>,
            DVDTextStringType::<Impl, IMPL_OFFSET>,
            DVDTextString::<Impl, IMPL_OFFSET>,
            DVDTextNumberOfStrings::<Impl, IMPL_OFFSET>,
            DVDTextNumberOfLanguages::<Impl, IMPL_OFFSET>,
            DVDTextLanguageLCID::<Impl, IMPL_OFFSET>,
            RegionChange::<Impl, IMPL_OFFSET>,
            DVDAdm::<Impl, IMPL_OFFSET>,
            DeleteBookmark::<Impl, IMPL_OFFSET>,
            RestoreBookmark::<Impl, IMPL_OFFSET>,
            SaveBookmark::<Impl, IMPL_OFFSET>,
            SelectDefaultAudioLanguage::<Impl, IMPL_OFFSET>,
            SelectDefaultSubpictureLanguage::<Impl, IMPL_OFFSET>,
            PreferredSubpictureStream::<Impl, IMPL_OFFSET>,
            DefaultMenuLanguage::<Impl, IMPL_OFFSET>,
            SetDefaultMenuLanguage::<Impl, IMPL_OFFSET>,
            DefaultSubpictureLanguage::<Impl, IMPL_OFFSET>,
            DefaultAudioLanguage::<Impl, IMPL_OFFSET>,
            DefaultSubpictureLanguageExt::<Impl, IMPL_OFFSET>,
            DefaultAudioLanguageExt::<Impl, IMPL_OFFSET>,
            LanguageFromLCID::<Impl, IMPL_OFFSET>,
            KaraokeAudioPresentationMode::<Impl, IMPL_OFFSET>,
            SetKaraokeAudioPresentationMode::<Impl, IMPL_OFFSET>,
            KaraokeChannelContent::<Impl, IMPL_OFFSET>,
            KaraokeChannelAssignment::<Impl, IMPL_OFFSET>,
            RestorePreferredSettings::<Impl, IMPL_OFFSET>,
            ButtonRect::<Impl, IMPL_OFFSET>,
            DVDScreenInMouseCoordinates::<Impl, IMPL_OFFSET>,
            SetDVDScreenInMouseCoordinates::<Impl, IMPL_OFFSET>,
            Bookmark::<Impl, IMPL_OFFSET>,
            SetBookmark::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidWebDVD2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidWebDVDAdmImpl: Sized + IDispatchImpl {
    fn ChangePassword();
    fn SaveParentalLevel();
    fn SaveParentalCountry();
    fn ConfirmPassword();
    fn GetParentalLevel();
    fn GetParentalCountry();
    fn DefaultAudioLCID();
    fn SetDefaultAudioLCID();
    fn DefaultSubpictureLCID();
    fn SetDefaultSubpictureLCID();
    fn DefaultMenuLCID();
    fn SetDefaultMenuLCID();
    fn BookmarkOnStop();
    fn SetBookmarkOnStop();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidWebDVDAdmVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidWebDVDAdmImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidWebDVDAdmVtbl {
        unsafe extern "system" fn ChangePassword<Impl: IMSVidWebDVDAdmImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strusername: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, strold: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, strnew: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SaveParentalLevel<Impl: IMSVidWebDVDAdmImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: i32, strusername: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, strpassword: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SaveParentalCountry<Impl: IMSVidWebDVDAdmImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, country: i32, strusername: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, strpassword: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConfirmPassword<Impl: IMSVidWebDVDAdmImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strusername: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, strpassword: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pval: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParentalLevel<Impl: IMSVidWebDVDAdmImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, llevel: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParentalCountry<Impl: IMSVidWebDVDAdmImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lcountry: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DefaultAudioLCID<Impl: IMSVidWebDVDAdmImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefaultAudioLCID<Impl: IMSVidWebDVDAdmImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DefaultSubpictureLCID<Impl: IMSVidWebDVDAdmImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefaultSubpictureLCID<Impl: IMSVidWebDVDAdmImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DefaultMenuLCID<Impl: IMSVidWebDVDAdmImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefaultMenuLCID<Impl: IMSVidWebDVDAdmImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BookmarkOnStop<Impl: IMSVidWebDVDAdmImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pval: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBookmarkOnStop<Impl: IMSVidWebDVDAdmImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newval: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            ChangePassword::<Impl, IMPL_OFFSET>,
            SaveParentalLevel::<Impl, IMPL_OFFSET>,
            SaveParentalCountry::<Impl, IMPL_OFFSET>,
            ConfirmPassword::<Impl, IMPL_OFFSET>,
            GetParentalLevel::<Impl, IMPL_OFFSET>,
            GetParentalCountry::<Impl, IMPL_OFFSET>,
            DefaultAudioLCID::<Impl, IMPL_OFFSET>,
            SetDefaultAudioLCID::<Impl, IMPL_OFFSET>,
            DefaultSubpictureLCID::<Impl, IMPL_OFFSET>,
            SetDefaultSubpictureLCID::<Impl, IMPL_OFFSET>,
            DefaultMenuLCID::<Impl, IMPL_OFFSET>,
            SetDefaultMenuLCID::<Impl, IMPL_OFFSET>,
            BookmarkOnStop::<Impl, IMPL_OFFSET>,
            SetBookmarkOnStop::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidWebDVDAdm as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidWebDVDEventImpl: Sized + IMSVidPlaybackEventImpl + IMSVidInputDeviceEventImpl + IDispatchImpl {
    fn DVDNotify();
    fn PlayForwards();
    fn PlayBackwards();
    fn ShowMenu();
    fn Resume();
    fn SelectOrActivateButton();
    fn StillOff();
    fn PauseOn();
    fn ChangeCurrentAudioStream();
    fn ChangeCurrentSubpictureStream();
    fn ChangeCurrentAngle();
    fn PlayAtTimeInTitle();
    fn PlayAtTime();
    fn PlayChapterInTitle();
    fn PlayChapter();
    fn ReplayChapter();
    fn PlayNextChapter();
    fn Stop();
    fn ReturnFromSubmenu();
    fn PlayTitle();
    fn PlayPrevChapter();
    fn ChangeKaraokePresMode();
    fn ChangeVideoPresMode();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidWebDVDEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidWebDVDEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidWebDVDEventVtbl {
        unsafe extern "system" fn DVDNotify<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, leventcode: i32, lparam1: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, lparam2: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayForwards<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayBackwards<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ShowMenu<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, menuid: DVDMenuIDConstants, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Resume<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SelectOrActivateButton<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StillOff<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PauseOn<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeCurrentAudioStream<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeCurrentSubpictureStream<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeCurrentAngle<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayAtTimeInTitle<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayAtTime<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayChapterInTitle<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayChapter<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReplayChapter<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayNextChapter<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Stop<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReturnFromSubmenu<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayTitle<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PlayPrevChapter<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeKaraokePresMode<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeVideoPresMode<Impl: IMSVidWebDVDEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, benabled: i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            EndOfMedia::<Impl, IMPL_OFFSET>,
            DVDNotify::<Impl, IMPL_OFFSET>,
            PlayForwards::<Impl, IMPL_OFFSET>,
            PlayBackwards::<Impl, IMPL_OFFSET>,
            ShowMenu::<Impl, IMPL_OFFSET>,
            Resume::<Impl, IMPL_OFFSET>,
            SelectOrActivateButton::<Impl, IMPL_OFFSET>,
            StillOff::<Impl, IMPL_OFFSET>,
            PauseOn::<Impl, IMPL_OFFSET>,
            ChangeCurrentAudioStream::<Impl, IMPL_OFFSET>,
            ChangeCurrentSubpictureStream::<Impl, IMPL_OFFSET>,
            ChangeCurrentAngle::<Impl, IMPL_OFFSET>,
            PlayAtTimeInTitle::<Impl, IMPL_OFFSET>,
            PlayAtTime::<Impl, IMPL_OFFSET>,
            PlayChapterInTitle::<Impl, IMPL_OFFSET>,
            PlayChapter::<Impl, IMPL_OFFSET>,
            ReplayChapter::<Impl, IMPL_OFFSET>,
            PlayNextChapter::<Impl, IMPL_OFFSET>,
            Stop::<Impl, IMPL_OFFSET>,
            ReturnFromSubmenu::<Impl, IMPL_OFFSET>,
            PlayTitle::<Impl, IMPL_OFFSET>,
            PlayPrevChapter::<Impl, IMPL_OFFSET>,
            ChangeKaraokePresMode::<Impl, IMPL_OFFSET>,
            ChangeVideoPresMode::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidWebDVDEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidXDSImpl: Sized + IMSVidFeatureImpl + IMSVidDeviceImpl + IDispatchImpl {
    fn ChannelChangeInterface();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidXDSVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidXDSImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidXDSVtbl {
        unsafe extern "system" fn ChannelChangeInterface<Impl: IMSVidXDSImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkcc: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Status::<Impl, IMPL_OFFSET>,
            SetPower::<Impl, IMPL_OFFSET>,
            Power::<Impl, IMPL_OFFSET>,
            Category::<Impl, IMPL_OFFSET>,
            ClassID::<Impl, IMPL_OFFSET>,
            _Category::<Impl, IMPL_OFFSET>,
            _ClassID::<Impl, IMPL_OFFSET>,
            IsEqualDevice::<Impl, IMPL_OFFSET>,
            ChannelChangeInterface::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidXDS as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMSVidXDSEventImpl: Sized + IMSVidFeatureEventImpl + IMSVidDeviceEventImpl + IDispatchImpl {
    fn RatingChange();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMSVidXDSEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMSVidXDSEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMSVidXDSEventVtbl {
        unsafe extern "system" fn RatingChange<Impl: IMSVidXDSEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prevratingsystem: EnTvRat_System, prevlevel: EnTvRat_GenericLevel, prevattributes: BfEnTvRat_GenericAttributes, newratingsystem: EnTvRat_System, newlevel: EnTvRat_GenericLevel, newattributes: BfEnTvRat_GenericAttributes) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, StateChange::<Impl, IMPL_OFFSET>, RatingChange::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMSVidXDSEvent as ::windows::core::Interface>::IID
    }
}
pub trait IMceBurnerControlImpl: Sized {
    fn GetBurnerNoDecryption();
}
impl IMceBurnerControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMceBurnerControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMceBurnerControlVtbl {
        unsafe extern "system" fn GetBurnerNoDecryption<Impl: IMceBurnerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetBurnerNoDecryption::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMceBurnerControl as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMediaControlImpl: Sized + IDispatchImpl {
    fn Run();
    fn Pause();
    fn Stop();
    fn GetState();
    fn RenderFile();
    fn AddSourceFilter();
    fn FilterCollection();
    fn RegFilterCollection();
    fn StopWhenReady();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMediaControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaControlVtbl {
        unsafe extern "system" fn Run<Impl: IMediaControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Pause<Impl: IMediaControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Stop<Impl: IMediaControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetState<Impl: IMediaControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mstimeout: i32, pfs: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RenderFile<Impl: IMediaControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strfilename: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSourceFilter<Impl: IMediaControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strfilename: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, ppunk: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FilterCollection<Impl: IMediaControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegFilterCollection<Impl: IMediaControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StopWhenReady<Impl: IMediaControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Run::<Impl, IMPL_OFFSET>,
            Pause::<Impl, IMPL_OFFSET>,
            Stop::<Impl, IMPL_OFFSET>,
            GetState::<Impl, IMPL_OFFSET>,
            RenderFile::<Impl, IMPL_OFFSET>,
            AddSourceFilter::<Impl, IMPL_OFFSET>,
            FilterCollection::<Impl, IMPL_OFFSET>,
            RegFilterCollection::<Impl, IMPL_OFFSET>,
            StopWhenReady::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaControl as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMediaEventImpl: Sized + IDispatchImpl {
    fn GetEventHandle();
    fn GetEvent();
    fn WaitForCompletion();
    fn CancelDefaultHandling();
    fn RestoreDefaultHandling();
    fn FreeEventParams();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMediaEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaEventVtbl {
        unsafe extern "system" fn GetEventHandle<Impl: IMediaEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hevent: *mut isize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEvent<Impl: IMediaEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, leventcode: *mut i32, lparam1: *mut isize, lparam2: *mut isize, mstimeout: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForCompletion<Impl: IMediaEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mstimeout: i32, pevcode: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CancelDefaultHandling<Impl: IMediaEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, levcode: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RestoreDefaultHandling<Impl: IMediaEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, levcode: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FreeEventParams<Impl: IMediaEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, levcode: i32, lparam1: isize, lparam2: isize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            GetEventHandle::<Impl, IMPL_OFFSET>,
            GetEvent::<Impl, IMPL_OFFSET>,
            WaitForCompletion::<Impl, IMPL_OFFSET>,
            CancelDefaultHandling::<Impl, IMPL_OFFSET>,
            RestoreDefaultHandling::<Impl, IMPL_OFFSET>,
            FreeEventParams::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMediaEventExImpl: Sized + IMediaEventImpl + IDispatchImpl {
    fn SetNotifyWindow();
    fn SetNotifyFlags();
    fn GetNotifyFlags();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMediaEventExVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaEventExImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaEventExVtbl {
        unsafe extern "system" fn SetNotifyWindow<Impl: IMediaEventExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: isize, lmsg: i32, linstancedata: isize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNotifyFlags<Impl: IMediaEventExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lnonotifyflags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNotifyFlags<Impl: IMediaEventExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lplnonotifyflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            GetEventHandle::<Impl, IMPL_OFFSET>,
            GetEvent::<Impl, IMPL_OFFSET>,
            WaitForCompletion::<Impl, IMPL_OFFSET>,
            CancelDefaultHandling::<Impl, IMPL_OFFSET>,
            RestoreDefaultHandling::<Impl, IMPL_OFFSET>,
            FreeEventParams::<Impl, IMPL_OFFSET>,
            SetNotifyWindow::<Impl, IMPL_OFFSET>,
            SetNotifyFlags::<Impl, IMPL_OFFSET>,
            GetNotifyFlags::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaEventEx as ::windows::core::Interface>::IID
    }
}
pub trait IMediaEventSinkImpl: Sized {
    fn Notify();
}
impl IMediaEventSinkVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaEventSinkImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaEventSinkVtbl {
        unsafe extern "system" fn Notify<Impl: IMediaEventSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventcode: i32, eventparam1: isize, eventparam2: isize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Notify::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaEventSink as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_System_Com")]
pub trait IMediaFilterImpl: Sized + IPersistImpl {
    fn Stop();
    fn Pause();
    fn Run();
    fn GetState();
    fn SetSyncSource();
    fn GetSyncSource();
}
#[cfg(feature = "Win32_System_Com")]
impl IMediaFilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaFilterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaFilterVtbl {
        unsafe extern "system" fn Stop<Impl: IMediaFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Pause<Impl: IMediaFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Run<Impl: IMediaFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tstart: i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetState<Impl: IMediaFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwmillisecstimeout: u32, state: *mut FILTER_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSyncSource<Impl: IMediaFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pclock: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSyncSource<Impl: IMediaFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pclock: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetClassID::<Impl, IMPL_OFFSET>, Stop::<Impl, IMPL_OFFSET>, Pause::<Impl, IMPL_OFFSET>, Run::<Impl, IMPL_OFFSET>, GetState::<Impl, IMPL_OFFSET>, SetSyncSource::<Impl, IMPL_OFFSET>, GetSyncSource::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaFilter as ::windows::core::Interface>::IID
    }
}
pub trait IMediaParamInfoImpl: Sized {
    fn GetParamCount();
    fn GetParamInfo();
    fn GetParamText();
    fn GetNumTimeFormats();
    fn GetSupportedTimeFormat();
    fn GetCurrentTimeFormat();
}
impl IMediaParamInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaParamInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaParamInfoVtbl {
        unsafe extern "system" fn GetParamCount<Impl: IMediaParamInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwparams: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParamInfo<Impl: IMediaParamInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwparamindex: u32, pinfo: *mut MP_PARAMINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParamText<Impl: IMediaParamInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwparamindex: u32, ppwchtext: *mut *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumTimeFormats<Impl: IMediaParamInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwnumtimeformats: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSupportedTimeFormat<Impl: IMediaParamInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwformatindex: u32, pguidtimeformat: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentTimeFormat<Impl: IMediaParamInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguidtimeformat: *mut ::windows::core::GUID, ptimedata: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetParamCount::<Impl, IMPL_OFFSET>, GetParamInfo::<Impl, IMPL_OFFSET>, GetParamText::<Impl, IMPL_OFFSET>, GetNumTimeFormats::<Impl, IMPL_OFFSET>, GetSupportedTimeFormat::<Impl, IMPL_OFFSET>, GetCurrentTimeFormat::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaParamInfo as ::windows::core::Interface>::IID
    }
}
pub trait IMediaParamsImpl: Sized {
    fn GetParam();
    fn SetParam();
    fn AddEnvelope();
    fn FlushEnvelope();
    fn SetTimeFormat();
}
impl IMediaParamsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaParamsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaParamsVtbl {
        unsafe extern "system" fn GetParam<Impl: IMediaParamsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwparamindex: u32, pvalue: *mut f32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetParam<Impl: IMediaParamsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwparamindex: u32, value: f32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddEnvelope<Impl: IMediaParamsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwparamindex: u32, csegments: u32, penvelopesegments: *const MP_ENVELOPE_SEGMENT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FlushEnvelope<Impl: IMediaParamsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwparamindex: u32, reftimestart: i64, reftimeend: i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTimeFormat<Impl: IMediaParamsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guidtimeformat: ::windows::core::GUID, mptimedata: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetParam::<Impl, IMPL_OFFSET>, SetParam::<Impl, IMPL_OFFSET>, AddEnvelope::<Impl, IMPL_OFFSET>, FlushEnvelope::<Impl, IMPL_OFFSET>, SetTimeFormat::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaParams as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMediaPositionImpl: Sized + IDispatchImpl {
    fn Duration();
    fn SetCurrentPosition();
    fn CurrentPosition();
    fn StopTime();
    fn SetStopTime();
    fn PrerollTime();
    fn SetPrerollTime();
    fn SetRate();
    fn Rate();
    fn CanSeekForward();
    fn CanSeekBackward();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMediaPositionVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaPositionImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaPositionVtbl {
        unsafe extern "system" fn Duration<Impl: IMediaPositionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plength: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentPosition<Impl: IMediaPositionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lltime: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CurrentPosition<Impl: IMediaPositionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plltime: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StopTime<Impl: IMediaPositionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plltime: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetStopTime<Impl: IMediaPositionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lltime: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PrerollTime<Impl: IMediaPositionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plltime: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPrerollTime<Impl: IMediaPositionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lltime: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRate<Impl: IMediaPositionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, drate: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Rate<Impl: IMediaPositionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdrate: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CanSeekForward<Impl: IMediaPositionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcanseekforward: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CanSeekBackward<Impl: IMediaPositionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcanseekbackward: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Duration::<Impl, IMPL_OFFSET>,
            SetCurrentPosition::<Impl, IMPL_OFFSET>,
            CurrentPosition::<Impl, IMPL_OFFSET>,
            StopTime::<Impl, IMPL_OFFSET>,
            SetStopTime::<Impl, IMPL_OFFSET>,
            PrerollTime::<Impl, IMPL_OFFSET>,
            SetPrerollTime::<Impl, IMPL_OFFSET>,
            SetRate::<Impl, IMPL_OFFSET>,
            Rate::<Impl, IMPL_OFFSET>,
            CanSeekForward::<Impl, IMPL_OFFSET>,
            CanSeekBackward::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaPosition as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole"))]
pub trait IMediaPropertyBagImpl: Sized + IPropertyBagImpl {
    fn EnumProperty();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole"))]
impl IMediaPropertyBagVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaPropertyBagImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaPropertyBagVtbl {
        unsafe extern "system" fn EnumProperty<Impl: IMediaPropertyBagImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, iproperty: u32, pvarpropertyname: *mut super::super::System::Com::VARIANT, pvarpropertyvalue: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Read::<Impl, IMPL_OFFSET>, Write::<Impl, IMPL_OFFSET>, EnumProperty::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaPropertyBag as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IMediaSampleImpl: Sized {
    fn GetPointer();
    fn GetSize();
    fn GetTime();
    fn SetTime();
    fn IsSyncPoint();
    fn SetSyncPoint();
    fn IsPreroll();
    fn SetPreroll();
    fn GetActualDataLength();
    fn SetActualDataLength();
    fn GetMediaType();
    fn SetMediaType();
    fn IsDiscontinuity();
    fn SetDiscontinuity();
    fn GetMediaTime();
    fn SetMediaTime();
}
#[cfg(feature = "Win32_Foundation")]
impl IMediaSampleVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaSampleImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaSampleVtbl {
        unsafe extern "system" fn GetPointer<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppbuffer: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSize<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> i32 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTime<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptimestart: *mut i64, ptimeend: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTime<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptimestart: *const i64, ptimeend: *const i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsSyncPoint<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSyncPoint<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bissyncpoint: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsPreroll<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPreroll<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bispreroll: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetActualDataLength<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> i32 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetActualDataLength<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, __midl__imediasample0000: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMediaType<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppmediatype: *mut *mut AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMediaType<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmediatype: *const AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsDiscontinuity<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDiscontinuity<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bdiscontinuity: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMediaTime<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptimestart: *mut i64, ptimeend: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMediaTime<Impl: IMediaSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptimestart: *const i64, ptimeend: *const i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetPointer::<Impl, IMPL_OFFSET>,
            GetSize::<Impl, IMPL_OFFSET>,
            GetTime::<Impl, IMPL_OFFSET>,
            SetTime::<Impl, IMPL_OFFSET>,
            IsSyncPoint::<Impl, IMPL_OFFSET>,
            SetSyncPoint::<Impl, IMPL_OFFSET>,
            IsPreroll::<Impl, IMPL_OFFSET>,
            SetPreroll::<Impl, IMPL_OFFSET>,
            GetActualDataLength::<Impl, IMPL_OFFSET>,
            SetActualDataLength::<Impl, IMPL_OFFSET>,
            GetMediaType::<Impl, IMPL_OFFSET>,
            SetMediaType::<Impl, IMPL_OFFSET>,
            IsDiscontinuity::<Impl, IMPL_OFFSET>,
            SetDiscontinuity::<Impl, IMPL_OFFSET>,
            GetMediaTime::<Impl, IMPL_OFFSET>,
            SetMediaTime::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaSample as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IMediaSample2Impl: Sized + IMediaSampleImpl {
    fn GetProperties();
    fn SetProperties();
}
#[cfg(feature = "Win32_Foundation")]
impl IMediaSample2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaSample2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaSample2Vtbl {
        unsafe extern "system" fn GetProperties<Impl: IMediaSample2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cbproperties: u32, pbproperties: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProperties<Impl: IMediaSample2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cbproperties: u32, pbproperties: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetPointer::<Impl, IMPL_OFFSET>,
            GetSize::<Impl, IMPL_OFFSET>,
            GetTime::<Impl, IMPL_OFFSET>,
            SetTime::<Impl, IMPL_OFFSET>,
            IsSyncPoint::<Impl, IMPL_OFFSET>,
            SetSyncPoint::<Impl, IMPL_OFFSET>,
            IsPreroll::<Impl, IMPL_OFFSET>,
            SetPreroll::<Impl, IMPL_OFFSET>,
            GetActualDataLength::<Impl, IMPL_OFFSET>,
            SetActualDataLength::<Impl, IMPL_OFFSET>,
            GetMediaType::<Impl, IMPL_OFFSET>,
            SetMediaType::<Impl, IMPL_OFFSET>,
            IsDiscontinuity::<Impl, IMPL_OFFSET>,
            SetDiscontinuity::<Impl, IMPL_OFFSET>,
            GetMediaTime::<Impl, IMPL_OFFSET>,
            SetMediaTime::<Impl, IMPL_OFFSET>,
            GetProperties::<Impl, IMPL_OFFSET>,
            SetProperties::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaSample2 as ::windows::core::Interface>::IID
    }
}
pub trait IMediaSample2ConfigImpl: Sized {
    fn GetSurface();
}
impl IMediaSample2ConfigVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaSample2ConfigImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaSample2ConfigVtbl {
        unsafe extern "system" fn GetSurface<Impl: IMediaSample2ConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdirect3dsurface9: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetSurface::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaSample2Config as ::windows::core::Interface>::IID
    }
}
pub trait IMediaSeekingImpl: Sized {
    fn GetCapabilities();
    fn CheckCapabilities();
    fn IsFormatSupported();
    fn QueryPreferredFormat();
    fn GetTimeFormat();
    fn IsUsingTimeFormat();
    fn SetTimeFormat();
    fn GetDuration();
    fn GetStopPosition();
    fn GetCurrentPosition();
    fn ConvertTimeFormat();
    fn SetPositions();
    fn GetPositions();
    fn GetAvailable();
    fn SetRate();
    fn GetRate();
    fn GetPreroll();
}
impl IMediaSeekingVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaSeekingImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaSeekingVtbl {
        unsafe extern "system" fn GetCapabilities<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcapabilities: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CheckCapabilities<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcapabilities: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsFormatSupported<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pformat: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryPreferredFormat<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pformat: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTimeFormat<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pformat: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsUsingTimeFormat<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pformat: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTimeFormat<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pformat: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDuration<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pduration: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStopPosition<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstop: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentPosition<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcurrent: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConvertTimeFormat<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptarget: *mut i64, ptargetformat: *const ::windows::core::GUID, source: i64, psourceformat: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPositions<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcurrent: *mut i64, dwcurrentflags: u32, pstop: *mut i64, dwstopflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPositions<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcurrent: *mut i64, pstop: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAvailable<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pearliest: *mut i64, platest: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRate<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, drate: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRate<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdrate: *mut f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPreroll<Impl: IMediaSeekingImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pllpreroll: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetCapabilities::<Impl, IMPL_OFFSET>,
            CheckCapabilities::<Impl, IMPL_OFFSET>,
            IsFormatSupported::<Impl, IMPL_OFFSET>,
            QueryPreferredFormat::<Impl, IMPL_OFFSET>,
            GetTimeFormat::<Impl, IMPL_OFFSET>,
            IsUsingTimeFormat::<Impl, IMPL_OFFSET>,
            SetTimeFormat::<Impl, IMPL_OFFSET>,
            GetDuration::<Impl, IMPL_OFFSET>,
            GetStopPosition::<Impl, IMPL_OFFSET>,
            GetCurrentPosition::<Impl, IMPL_OFFSET>,
            ConvertTimeFormat::<Impl, IMPL_OFFSET>,
            SetPositions::<Impl, IMPL_OFFSET>,
            GetPositions::<Impl, IMPL_OFFSET>,
            GetAvailable::<Impl, IMPL_OFFSET>,
            SetRate::<Impl, IMPL_OFFSET>,
            GetRate::<Impl, IMPL_OFFSET>,
            GetPreroll::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaSeeking as ::windows::core::Interface>::IID
    }
}
pub trait IMediaStreamImpl: Sized {
    fn GetMultiMediaStream();
    fn GetInformation();
    fn SetSameFormat();
    fn AllocateSample();
    fn CreateSharedSample();
    fn SendEndOfStream();
}
impl IMediaStreamVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaStreamImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaStreamVtbl {
        unsafe extern "system" fn GetMultiMediaStream<Impl: IMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppmultimediastream: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInformation<Impl: IMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppurposeid: *mut ::windows::core::GUID, ptype: *mut STREAM_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSameFormat<Impl: IMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstreamthathasdesiredformat: ::windows::core::RawPtr, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AllocateSample<Impl: IMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, ppsample: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateSharedSample<Impl: IMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pexistingsample: ::windows::core::RawPtr, dwflags: u32, ppnewsample: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SendEndOfStream<Impl: IMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetMultiMediaStream::<Impl, IMPL_OFFSET>, GetInformation::<Impl, IMPL_OFFSET>, SetSameFormat::<Impl, IMPL_OFFSET>, AllocateSample::<Impl, IMPL_OFFSET>, CreateSharedSample::<Impl, IMPL_OFFSET>, SendEndOfStream::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaStream as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IMediaStreamFilterImpl: Sized + IBaseFilterImpl + IMediaFilterImpl + IPersistImpl {
    fn AddMediaStream();
    fn GetMediaStream();
    fn EnumMediaStreams();
    fn SupportSeeking();
    fn ReferenceTimeToStreamTime();
    fn GetCurrentStreamTime();
    fn WaitUntil();
    fn Flush();
    fn EndOfStream();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IMediaStreamFilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaStreamFilterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaStreamFilterVtbl {
        unsafe extern "system" fn AddMediaStream<Impl: IMediaStreamFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pammediastream: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMediaStream<Impl: IMediaStreamFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idpurpose: *const ::windows::core::GUID, ppmediastream: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumMediaStreams<Impl: IMediaStreamFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: i32, ppmediastream: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SupportSeeking<Impl: IMediaStreamFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brenderer: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReferenceTimeToStreamTime<Impl: IMediaStreamFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptime: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentStreamTime<Impl: IMediaStreamFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcurrentstreamtime: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitUntil<Impl: IMediaStreamFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, waitstreamtime: i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Flush<Impl: IMediaStreamFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bcanceleos: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndOfStream<Impl: IMediaStreamFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetClassID::<Impl, IMPL_OFFSET>,
            Stop::<Impl, IMPL_OFFSET>,
            Pause::<Impl, IMPL_OFFSET>,
            Run::<Impl, IMPL_OFFSET>,
            GetState::<Impl, IMPL_OFFSET>,
            SetSyncSource::<Impl, IMPL_OFFSET>,
            GetSyncSource::<Impl, IMPL_OFFSET>,
            EnumPins::<Impl, IMPL_OFFSET>,
            FindPin::<Impl, IMPL_OFFSET>,
            QueryFilterInfo::<Impl, IMPL_OFFSET>,
            JoinFilterGraph::<Impl, IMPL_OFFSET>,
            QueryVendorInfo::<Impl, IMPL_OFFSET>,
            AddMediaStream::<Impl, IMPL_OFFSET>,
            GetMediaStream::<Impl, IMPL_OFFSET>,
            EnumMediaStreams::<Impl, IMPL_OFFSET>,
            SupportSeeking::<Impl, IMPL_OFFSET>,
            ReferenceTimeToStreamTime::<Impl, IMPL_OFFSET>,
            GetCurrentStreamTime::<Impl, IMPL_OFFSET>,
            WaitUntil::<Impl, IMPL_OFFSET>,
            Flush::<Impl, IMPL_OFFSET>,
            EndOfStream::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaStreamFilter as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IMediaTypeInfoImpl: Sized + IDispatchImpl {
    fn Type();
    fn Subtype();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IMediaTypeInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMediaTypeInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMediaTypeInfoVtbl {
        unsafe extern "system" fn Type<Impl: IMediaTypeInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strtype: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Subtype<Impl: IMediaTypeInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strtype: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, Type::<Impl, IMPL_OFFSET>, Subtype::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMediaTypeInfo as ::windows::core::Interface>::IID
    }
}
pub trait IMemAllocatorImpl: Sized {
    fn SetProperties();
    fn GetProperties();
    fn Commit();
    fn Decommit();
    fn GetBuffer();
    fn ReleaseBuffer();
}
impl IMemAllocatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMemAllocatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMemAllocatorVtbl {
        unsafe extern "system" fn SetProperties<Impl: IMemAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prequest: *const ALLOCATOR_PROPERTIES, pactual: *mut ALLOCATOR_PROPERTIES) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProperties<Impl: IMemAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pprops: *mut ALLOCATOR_PROPERTIES) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Commit<Impl: IMemAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Decommit<Impl: IMemAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBuffer<Impl: IMemAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppbuffer: *mut ::windows::core::RawPtr, pstarttime: *const i64, pendtime: *const i64, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReleaseBuffer<Impl: IMemAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbuffer: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetProperties::<Impl, IMPL_OFFSET>, GetProperties::<Impl, IMPL_OFFSET>, Commit::<Impl, IMPL_OFFSET>, Decommit::<Impl, IMPL_OFFSET>, GetBuffer::<Impl, IMPL_OFFSET>, ReleaseBuffer::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMemAllocator as ::windows::core::Interface>::IID
    }
}
pub trait IMemAllocatorCallbackTempImpl: Sized + IMemAllocatorImpl {
    fn SetNotify();
    fn GetFreeCount();
}
impl IMemAllocatorCallbackTempVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMemAllocatorCallbackTempImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMemAllocatorCallbackTempVtbl {
        unsafe extern "system" fn SetNotify<Impl: IMemAllocatorCallbackTempImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnotify: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFreeCount<Impl: IMemAllocatorCallbackTempImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plbuffersfree: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetProperties::<Impl, IMPL_OFFSET>, GetProperties::<Impl, IMPL_OFFSET>, Commit::<Impl, IMPL_OFFSET>, Decommit::<Impl, IMPL_OFFSET>, GetBuffer::<Impl, IMPL_OFFSET>, ReleaseBuffer::<Impl, IMPL_OFFSET>, SetNotify::<Impl, IMPL_OFFSET>, GetFreeCount::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMemAllocatorCallbackTemp as ::windows::core::Interface>::IID
    }
}
pub trait IMemAllocatorNotifyCallbackTempImpl: Sized {
    fn NotifyRelease();
}
impl IMemAllocatorNotifyCallbackTempVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMemAllocatorNotifyCallbackTempImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMemAllocatorNotifyCallbackTempVtbl {
        unsafe extern "system" fn NotifyRelease<Impl: IMemAllocatorNotifyCallbackTempImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, NotifyRelease::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMemAllocatorNotifyCallbackTemp as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IMemInputPinImpl: Sized {
    fn GetAllocator();
    fn NotifyAllocator();
    fn GetAllocatorRequirements();
    fn Receive();
    fn ReceiveMultiple();
    fn ReceiveCanBlock();
}
#[cfg(feature = "Win32_Foundation")]
impl IMemInputPinVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMemInputPinImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMemInputPinVtbl {
        unsafe extern "system" fn GetAllocator<Impl: IMemInputPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppallocator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NotifyAllocator<Impl: IMemInputPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pallocator: ::windows::core::RawPtr, breadonly: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAllocatorRequirements<Impl: IMemInputPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pprops: *mut ALLOCATOR_PROPERTIES) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Receive<Impl: IMemInputPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psample: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReceiveMultiple<Impl: IMemInputPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psamples: *const ::windows::core::RawPtr, nsamples: i32, nsamplesprocessed: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReceiveCanBlock<Impl: IMemInputPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetAllocator::<Impl, IMPL_OFFSET>, NotifyAllocator::<Impl, IMPL_OFFSET>, GetAllocatorRequirements::<Impl, IMPL_OFFSET>, Receive::<Impl, IMPL_OFFSET>, ReceiveMultiple::<Impl, IMPL_OFFSET>, ReceiveCanBlock::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMemInputPin as ::windows::core::Interface>::IID
    }
}
pub trait IMemoryDataImpl: Sized {
    fn SetBuffer();
    fn GetInfo();
    fn SetActual();
}
impl IMemoryDataVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMemoryDataImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMemoryDataVtbl {
        unsafe extern "system" fn SetBuffer<Impl: IMemoryDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cbsize: u32, pbdata: *const u8, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInfo<Impl: IMemoryDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwlength: *mut u32, ppbdata: *mut *mut u8, pcbactualdata: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetActual<Impl: IMemoryDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cbdatavalid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetBuffer::<Impl, IMPL_OFFSET>, GetInfo::<Impl, IMPL_OFFSET>, SetActual::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMemoryData as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IMixerOCXImpl: Sized {
    fn OnDisplayChange();
    fn GetAspectRatio();
    fn GetVideoSize();
    fn GetStatus();
    fn OnDraw();
    fn SetDrawRegion();
    fn Advise();
    fn UnAdvise();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl IMixerOCXVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMixerOCXImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMixerOCXVtbl {
        unsafe extern "system" fn OnDisplayChange<Impl: IMixerOCXImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulbitsperpixel: u32, ulscreenwidth: u32, ulscreenheight: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAspectRatio<Impl: IMixerOCXImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwpictaspectratiox: *mut u32, pdwpictaspectratioy: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVideoSize<Impl: IMixerOCXImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwvideowidth: *mut u32, pdwvideoheight: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStatus<Impl: IMixerOCXImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwstatus: *mut *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnDraw<Impl: IMixerOCXImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hdcdraw: super::super::Graphics::Gdi::HDC, prcdraw: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDrawRegion<Impl: IMixerOCXImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lppttopleftsc: *const super::super::Foundation::POINT, prcdrawcc: *const super::super::Foundation::RECT, lprcclip: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Advise<Impl: IMixerOCXImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmdns: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnAdvise<Impl: IMixerOCXImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, OnDisplayChange::<Impl, IMPL_OFFSET>, GetAspectRatio::<Impl, IMPL_OFFSET>, GetVideoSize::<Impl, IMPL_OFFSET>, GetStatus::<Impl, IMPL_OFFSET>, OnDraw::<Impl, IMPL_OFFSET>, SetDrawRegion::<Impl, IMPL_OFFSET>, Advise::<Impl, IMPL_OFFSET>, UnAdvise::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMixerOCX as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IMixerOCXNotifyImpl: Sized {
    fn OnInvalidateRect();
    fn OnStatusChange();
    fn OnDataChange();
}
#[cfg(feature = "Win32_Foundation")]
impl IMixerOCXNotifyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMixerOCXNotifyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMixerOCXNotifyVtbl {
        unsafe extern "system" fn OnInvalidateRect<Impl: IMixerOCXNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpcrect: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnStatusChange<Impl: IMixerOCXNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulstatusflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnDataChange<Impl: IMixerOCXNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uldataflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, OnInvalidateRect::<Impl, IMPL_OFFSET>, OnStatusChange::<Impl, IMPL_OFFSET>, OnDataChange::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMixerOCXNotify as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IMixerPinConfigImpl: Sized {
    fn SetRelativePosition();
    fn GetRelativePosition();
    fn SetZOrder();
    fn GetZOrder();
    fn SetColorKey();
    fn GetColorKey();
    fn SetBlendingParameter();
    fn GetBlendingParameter();
    fn SetAspectRatioMode();
    fn GetAspectRatioMode();
    fn SetStreamTransparent();
    fn GetStreamTransparent();
}
#[cfg(feature = "Win32_Foundation")]
impl IMixerPinConfigVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMixerPinConfigImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMixerPinConfigVtbl {
        unsafe extern "system" fn SetRelativePosition<Impl: IMixerPinConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwleft: u32, dwtop: u32, dwright: u32, dwbottom: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRelativePosition<Impl: IMixerPinConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwleft: *mut u32, pdwtop: *mut u32, pdwright: *mut u32, pdwbottom: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetZOrder<Impl: IMixerPinConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwzorder: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetZOrder<Impl: IMixerPinConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwzorder: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetColorKey<Impl: IMixerPinConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcolorkey: *mut COLORKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetColorKey<Impl: IMixerPinConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcolorkey: *mut COLORKEY, pcolor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBlendingParameter<Impl: IMixerPinConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwblendingparameter: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBlendingParameter<Impl: IMixerPinConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwblendingparameter: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAspectRatioMode<Impl: IMixerPinConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, amaspectratiomode: AM_ASPECT_RATIO_MODE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAspectRatioMode<Impl: IMixerPinConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pamaspectratiomode: *mut AM_ASPECT_RATIO_MODE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetStreamTransparent<Impl: IMixerPinConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstreamtransparent: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStreamTransparent<Impl: IMixerPinConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstreamtransparent: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetRelativePosition::<Impl, IMPL_OFFSET>,
            GetRelativePosition::<Impl, IMPL_OFFSET>,
            SetZOrder::<Impl, IMPL_OFFSET>,
            GetZOrder::<Impl, IMPL_OFFSET>,
            SetColorKey::<Impl, IMPL_OFFSET>,
            GetColorKey::<Impl, IMPL_OFFSET>,
            SetBlendingParameter::<Impl, IMPL_OFFSET>,
            GetBlendingParameter::<Impl, IMPL_OFFSET>,
            SetAspectRatioMode::<Impl, IMPL_OFFSET>,
            GetAspectRatioMode::<Impl, IMPL_OFFSET>,
            SetStreamTransparent::<Impl, IMPL_OFFSET>,
            GetStreamTransparent::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMixerPinConfig as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
pub trait IMixerPinConfig2Impl: Sized + IMixerPinConfigImpl {
    fn SetOverlaySurfaceColorControls();
    fn GetOverlaySurfaceColorControls();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
impl IMixerPinConfig2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMixerPinConfig2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMixerPinConfig2Vtbl {
        unsafe extern "system" fn SetOverlaySurfaceColorControls<Impl: IMixerPinConfig2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcolorcontrol: *mut super::super::Graphics::DirectDraw::DDCOLORCONTROL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOverlaySurfaceColorControls<Impl: IMixerPinConfig2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcolorcontrol: *mut super::super::Graphics::DirectDraw::DDCOLORCONTROL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetRelativePosition::<Impl, IMPL_OFFSET>,
            GetRelativePosition::<Impl, IMPL_OFFSET>,
            SetZOrder::<Impl, IMPL_OFFSET>,
            GetZOrder::<Impl, IMPL_OFFSET>,
            SetColorKey::<Impl, IMPL_OFFSET>,
            GetColorKey::<Impl, IMPL_OFFSET>,
            SetBlendingParameter::<Impl, IMPL_OFFSET>,
            GetBlendingParameter::<Impl, IMPL_OFFSET>,
            SetAspectRatioMode::<Impl, IMPL_OFFSET>,
            GetAspectRatioMode::<Impl, IMPL_OFFSET>,
            SetStreamTransparent::<Impl, IMPL_OFFSET>,
            GetStreamTransparent::<Impl, IMPL_OFFSET>,
            SetOverlaySurfaceColorControls::<Impl, IMPL_OFFSET>,
            GetOverlaySurfaceColorControls::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMixerPinConfig2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IMpeg2DataImpl: Sized {
    fn GetSection();
    fn GetTable();
    fn GetStreamOfSections();
}
#[cfg(feature = "Win32_Foundation")]
impl IMpeg2DataVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMpeg2DataImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMpeg2DataVtbl {
        unsafe extern "system" fn GetSection<Impl: IMpeg2DataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, dwtimeout: u32, ppsectionlist: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTable<Impl: IMpeg2DataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, dwtimeout: u32, ppsectionlist: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStreamOfSections<Impl: IMpeg2DataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, hdatareadyevent: super::super::Foundation::HANDLE, ppmpegstream: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetSection::<Impl, IMPL_OFFSET>, GetTable::<Impl, IMPL_OFFSET>, GetStreamOfSections::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMpeg2Data as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IMpeg2DemultiplexerImpl: Sized {
    fn CreateOutputPin();
    fn SetOutputPinMediaType();
    fn DeleteOutputPin();
}
#[cfg(feature = "Win32_Foundation")]
impl IMpeg2DemultiplexerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMpeg2DemultiplexerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMpeg2DemultiplexerVtbl {
        unsafe extern "system" fn CreateOutputPin<Impl: IMpeg2DemultiplexerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmediatype: *mut AM_MEDIA_TYPE, pszpinname: super::super::Foundation::PWSTR, ppipin: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputPinMediaType<Impl: IMpeg2DemultiplexerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszpinname: super::super::Foundation::PWSTR, pmediatype: *const AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DeleteOutputPin<Impl: IMpeg2DemultiplexerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszpinname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CreateOutputPin::<Impl, IMPL_OFFSET>, SetOutputPinMediaType::<Impl, IMPL_OFFSET>, DeleteOutputPin::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMpeg2Demultiplexer as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IMpeg2StreamImpl: Sized {
    fn Initialize();
    fn SupplyDataBuffer();
}
#[cfg(feature = "Win32_Foundation")]
impl IMpeg2StreamVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMpeg2StreamImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMpeg2StreamVtbl {
        unsafe extern "system" fn Initialize<Impl: IMpeg2StreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, requesttype: MPEG_REQUEST_TYPE, pmpeg2data: ::windows::core::RawPtr, pcontext: *const MPEG_CONTEXT, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, hdatareadyevent: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SupplyDataBuffer<Impl: IMpeg2StreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstreambuffer: *const MPEG_STREAM_BUFFER) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, SupplyDataBuffer::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMpeg2Stream as ::windows::core::Interface>::IID
    }
}
pub trait IMpeg2TableFilterImpl: Sized {
    fn AddPID();
    fn AddTable();
    fn AddExtension();
    fn RemovePID();
    fn RemoveTable();
    fn RemoveExtension();
}
impl IMpeg2TableFilterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMpeg2TableFilterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMpeg2TableFilterVtbl {
        unsafe extern "system" fn AddPID<Impl: IMpeg2TableFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, p: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddTable<Impl: IMpeg2TableFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, p: u16, t: u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddExtension<Impl: IMpeg2TableFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, p: u16, t: u8, e: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemovePID<Impl: IMpeg2TableFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, p: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveTable<Impl: IMpeg2TableFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, p: u16, t: u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveExtension<Impl: IMpeg2TableFilterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, p: u16, t: u8, e: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, AddPID::<Impl, IMPL_OFFSET>, AddTable::<Impl, IMPL_OFFSET>, AddExtension::<Impl, IMPL_OFFSET>, RemovePID::<Impl, IMPL_OFFSET>, RemoveTable::<Impl, IMPL_OFFSET>, RemoveExtension::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMpeg2TableFilter as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Media_Audio")]
pub trait IMpegAudioDecoderImpl: Sized {
    fn FrequencyDivider();
    fn SetFrequencyDivider();
    fn DecoderAccuracy();
    fn SetDecoderAccuracy();
    fn Stereo();
    fn SetStereo();
    fn DecoderWordSize();
    fn SetDecoderWordSize();
    fn IntegerDecode();
    fn SetIntegerDecode();
    fn DualMode();
    fn SetDualMode();
    fn AudioFormat();
}
#[cfg(feature = "Win32_Media_Audio")]
impl IMpegAudioDecoderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMpegAudioDecoderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMpegAudioDecoderVtbl {
        unsafe extern "system" fn FrequencyDivider<Impl: IMpegAudioDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdivider: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFrequencyDivider<Impl: IMpegAudioDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, divider: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DecoderAccuracy<Impl: IMpegAudioDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, paccuracy: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDecoderAccuracy<Impl: IMpegAudioDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, accuracy: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Stereo<Impl: IMpegAudioDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstereo: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetStereo<Impl: IMpegAudioDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, stereo: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DecoderWordSize<Impl: IMpegAudioDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwordsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDecoderWordSize<Impl: IMpegAudioDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, wordsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IntegerDecode<Impl: IMpegAudioDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pintdecode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetIntegerDecode<Impl: IMpegAudioDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, intdecode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DualMode<Impl: IMpegAudioDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pintdecode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDualMode<Impl: IMpegAudioDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, intdecode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AudioFormat<Impl: IMpegAudioDecoderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpfmt: *mut MPEG1WAVEFORMAT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            FrequencyDivider::<Impl, IMPL_OFFSET>,
            SetFrequencyDivider::<Impl, IMPL_OFFSET>,
            DecoderAccuracy::<Impl, IMPL_OFFSET>,
            SetDecoderAccuracy::<Impl, IMPL_OFFSET>,
            Stereo::<Impl, IMPL_OFFSET>,
            SetStereo::<Impl, IMPL_OFFSET>,
            DecoderWordSize::<Impl, IMPL_OFFSET>,
            SetDecoderWordSize::<Impl, IMPL_OFFSET>,
            IntegerDecode::<Impl, IMPL_OFFSET>,
            SetIntegerDecode::<Impl, IMPL_OFFSET>,
            DualMode::<Impl, IMPL_OFFSET>,
            SetDualMode::<Impl, IMPL_OFFSET>,
            AudioFormat::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMpegAudioDecoder as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IMultiMediaStreamImpl: Sized {
    fn GetInformation();
    fn GetMediaStream();
    fn EnumMediaStreams();
    fn GetState();
    fn SetState();
    fn GetTime();
    fn GetDuration();
    fn Seek();
    fn GetEndOfStreamEventHandle();
}
#[cfg(feature = "Win32_Foundation")]
impl IMultiMediaStreamVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMultiMediaStreamImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMultiMediaStreamVtbl {
        unsafe extern "system" fn GetInformation<Impl: IMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwflags: *mut MMSSF_GET_INFORMATION_FLAGS, pstreamtype: *mut STREAM_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMediaStream<Impl: IMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idpurpose: *const ::windows::core::GUID, ppmediastream: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumMediaStreams<Impl: IMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: i32, ppmediastream: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetState<Impl: IMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcurrentstate: *mut STREAM_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetState<Impl: IMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newstate: STREAM_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTime<Impl: IMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcurrenttime: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDuration<Impl: IMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pduration: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Seek<Impl: IMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seektime: i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEndOfStreamEventHandle<Impl: IMultiMediaStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pheos: *mut super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetInformation::<Impl, IMPL_OFFSET>, GetMediaStream::<Impl, IMPL_OFFSET>, EnumMediaStreams::<Impl, IMPL_OFFSET>, GetState::<Impl, IMPL_OFFSET>, SetState::<Impl, IMPL_OFFSET>, GetTime::<Impl, IMPL_OFFSET>, GetDuration::<Impl, IMPL_OFFSET>, Seek::<Impl, IMPL_OFFSET>, GetEndOfStreamEventHandle::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMultiMediaStream as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IOverlayImpl: Sized {
    fn GetPalette();
    fn SetPalette();
    fn GetDefaultColorKey();
    fn GetColorKey();
    fn SetColorKey();
    fn GetWindowHandle();
    fn GetClipList();
    fn GetVideoPosition();
    fn Advise();
    fn Unadvise();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl IOverlayVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IOverlayImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IOverlayVtbl {
        unsafe extern "system" fn GetPalette<Impl: IOverlayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcolors: *mut u32, pppalette: *mut *mut super::super::Graphics::Gdi::PALETTEENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPalette<Impl: IOverlayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcolors: u32, ppalette: *const super::super::Graphics::Gdi::PALETTEENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDefaultColorKey<Impl: IOverlayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcolorkey: *mut COLORKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetColorKey<Impl: IOverlayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcolorkey: *mut COLORKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetColorKey<Impl: IOverlayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcolorkey: *mut COLORKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindowHandle<Impl: IOverlayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetClipList<Impl: IOverlayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psourcerect: *mut super::super::Foundation::RECT, pdestinationrect: *mut super::super::Foundation::RECT, pprgndata: *mut *mut super::super::Graphics::Gdi::RGNDATA) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVideoPosition<Impl: IOverlayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psourcerect: *mut super::super::Foundation::RECT, pdestinationrect: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Advise<Impl: IOverlayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, poverlaynotify: ::windows::core::RawPtr, dwinterests: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Unadvise<Impl: IOverlayImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetPalette::<Impl, IMPL_OFFSET>,
            SetPalette::<Impl, IMPL_OFFSET>,
            GetDefaultColorKey::<Impl, IMPL_OFFSET>,
            GetColorKey::<Impl, IMPL_OFFSET>,
            SetColorKey::<Impl, IMPL_OFFSET>,
            GetWindowHandle::<Impl, IMPL_OFFSET>,
            GetClipList::<Impl, IMPL_OFFSET>,
            GetVideoPosition::<Impl, IMPL_OFFSET>,
            Advise::<Impl, IMPL_OFFSET>,
            Unadvise::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IOverlay as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IOverlayNotifyImpl: Sized {
    fn OnPaletteChange();
    fn OnClipChange();
    fn OnColorKeyChange();
    fn OnPositionChange();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl IOverlayNotifyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IOverlayNotifyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IOverlayNotifyVtbl {
        unsafe extern "system" fn OnPaletteChange<Impl: IOverlayNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcolors: u32, ppalette: *const super::super::Graphics::Gdi::PALETTEENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnClipChange<Impl: IOverlayNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psourcerect: *const super::super::Foundation::RECT, pdestinationrect: *const super::super::Foundation::RECT, prgndata: *const super::super::Graphics::Gdi::RGNDATA) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnColorKeyChange<Impl: IOverlayNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcolorkey: *const COLORKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnPositionChange<Impl: IOverlayNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psourcerect: *const super::super::Foundation::RECT, pdestinationrect: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, OnPaletteChange::<Impl, IMPL_OFFSET>, OnClipChange::<Impl, IMPL_OFFSET>, OnColorKeyChange::<Impl, IMPL_OFFSET>, OnPositionChange::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IOverlayNotify as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IOverlayNotify2Impl: Sized + IOverlayNotifyImpl {
    fn OnDisplayChange();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl IOverlayNotify2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IOverlayNotify2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IOverlayNotify2Vtbl {
        unsafe extern "system" fn OnDisplayChange<Impl: IOverlayNotify2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hmonitor: super::super::Graphics::Gdi::HMONITOR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, OnPaletteChange::<Impl, IMPL_OFFSET>, OnClipChange::<Impl, IMPL_OFFSET>, OnColorKeyChange::<Impl, IMPL_OFFSET>, OnPositionChange::<Impl, IMPL_OFFSET>, OnDisplayChange::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IOverlayNotify2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IPATImpl: Sized {
    fn Initialize();
    fn GetTransportStreamId();
    fn GetVersionNumber();
    fn GetCountOfRecords();
    fn GetRecordProgramNumber();
    fn GetRecordProgramMapPid();
    fn FindRecordProgramMapPid();
    fn RegisterForNextTable();
    fn GetNextTable();
    fn RegisterForWhenCurrent();
    fn ConvertNextToCurrent();
}
#[cfg(feature = "Win32_Foundation")]
impl IPATVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPATImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPATVtbl {
        unsafe extern "system" fn Initialize<Impl: IPATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTransportStreamId<Impl: IPATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IPATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IPATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordProgramNumber<Impl: IPATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordProgramMapPid<Impl: IPATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindRecordProgramMapPid<Impl: IPATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, wprogramnumber: u16, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForNextTable<Impl: IPATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextTable<Impl: IPATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pppat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Impl: IPATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConvertNextToCurrent<Impl: IPATImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetTransportStreamId::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordProgramNumber::<Impl, IMPL_OFFSET>,
            GetRecordProgramMapPid::<Impl, IMPL_OFFSET>,
            FindRecordProgramMapPid::<Impl, IMPL_OFFSET>,
            RegisterForNextTable::<Impl, IMPL_OFFSET>,
            GetNextTable::<Impl, IMPL_OFFSET>,
            RegisterForWhenCurrent::<Impl, IMPL_OFFSET>,
            ConvertNextToCurrent::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPAT as ::windows::core::Interface>::IID
    }
}
pub trait IPBDAAttributesDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetAttributePayload();
}
impl IPBDAAttributesDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPBDAAttributesDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPBDAAttributesDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IPBDAAttributesDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IPBDAAttributesDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAttributePayload<Impl: IPBDAAttributesDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppbattributebuffer: *mut *mut u8, pdwattributelength: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetAttributePayload::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPBDAAttributesDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IPBDAEntitlementDescriptorImpl: Sized {
    fn GetTag();
    fn GetLength();
    fn GetToken();
}
impl IPBDAEntitlementDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPBDAEntitlementDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPBDAEntitlementDescriptorVtbl {
        unsafe extern "system" fn GetTag<Impl: IPBDAEntitlementDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLength<Impl: IPBDAEntitlementDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetToken<Impl: IPBDAEntitlementDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppbtokenbuffer: *mut *mut u8, pdwtokenlength: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTag::<Impl, IMPL_OFFSET>, GetLength::<Impl, IMPL_OFFSET>, GetToken::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPBDAEntitlementDescriptor as ::windows::core::Interface>::IID
    }
}
pub trait IPBDASiParserImpl: Sized {
    fn Initialize();
    fn GetEIT();
    fn GetServices();
}
impl IPBDASiParserVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPBDASiParserImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPBDASiParserVtbl {
        unsafe extern "system" fn Initialize<Impl: IPBDASiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEIT<Impl: IPBDASiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsize: u32, pbuffer: *const u8, ppeit: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServices<Impl: IPBDASiParserImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsize: u32, pbuffer: *const u8, ppservices: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, GetEIT::<Impl, IMPL_OFFSET>, GetServices::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPBDASiParser as ::windows::core::Interface>::IID
    }
}
pub trait IPBDA_EITImpl: Sized {
    fn Initialize();
    fn GetTableId();
    fn GetVersionNumber();
    fn GetServiceIdx();
    fn GetCountOfRecords();
    fn GetRecordEventId();
    fn GetRecordStartTime();
    fn GetRecordDuration();
    fn GetRecordCountOfDescriptors();
    fn GetRecordDescriptorByIndex();
    fn GetRecordDescriptorByTag();
}
impl IPBDA_EITVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPBDA_EITImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPBDA_EITVtbl {
        unsafe extern "system" fn Initialize<Impl: IPBDA_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: u32, pbuffer: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableId<Impl: IPBDA_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IPBDA_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetServiceIdx<Impl: IPBDA_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plwval: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IPBDA_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordEventId<Impl: IPBDA_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, plwval: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordStartTime<Impl: IPBDA_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDuration<Impl: IPBDA_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdval: *mut MPEG_TIME) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Impl: IPBDA_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Impl: IPBDA_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Impl: IPBDA_EITImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetTableId::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetServiceIdx::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordEventId::<Impl, IMPL_OFFSET>,
            GetRecordStartTime::<Impl, IMPL_OFFSET>,
            GetRecordDuration::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPBDA_EIT as ::windows::core::Interface>::IID
    }
}
pub trait IPBDA_ServicesImpl: Sized {
    fn Initialize();
    fn GetCountOfRecords();
    fn GetRecordByIndex();
}
impl IPBDA_ServicesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPBDA_ServicesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPBDA_ServicesVtbl {
        unsafe extern "system" fn Initialize<Impl: IPBDA_ServicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: u32, pbuffer: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IPBDA_ServicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordByIndex<Impl: IPBDA_ServicesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pul64serviceidx: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, GetCountOfRecords::<Impl, IMPL_OFFSET>, GetRecordByIndex::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPBDA_Services as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IPMTImpl: Sized {
    fn Initialize();
    fn GetProgramNumber();
    fn GetVersionNumber();
    fn GetPcrPid();
    fn GetCountOfTableDescriptors();
    fn GetTableDescriptorByIndex();
    fn GetTableDescriptorByTag();
    fn GetCountOfRecords();
    fn GetRecordStreamType();
    fn GetRecordElementaryPid();
    fn GetRecordCountOfDescriptors();
    fn GetRecordDescriptorByIndex();
    fn GetRecordDescriptorByTag();
    fn QueryServiceGatewayInfo();
    fn QueryMPEInfo();
    fn RegisterForNextTable();
    fn GetNextTable();
    fn RegisterForWhenCurrent();
    fn ConvertNextToCurrent();
}
#[cfg(feature = "Win32_Foundation")]
impl IPMTVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPMTImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPMTVtbl {
        unsafe extern "system" fn Initialize<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProgramNumber<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPcrPid<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppidval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfRecords<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordStreamType<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordElementaryPid<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, ppidval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwdescindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryServiceGatewayInfo<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdsmcclist: *mut *mut DSMCC_ELEMENT, puicount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryMPEInfo<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppmpelist: *mut *mut MPE_ELEMENT, puicount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForNextTable<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextTable<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pppmt: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConvertNextToCurrent<Impl: IPMTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetProgramNumber::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetPcrPid::<Impl, IMPL_OFFSET>,
            GetCountOfTableDescriptors::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByTag::<Impl, IMPL_OFFSET>,
            GetCountOfRecords::<Impl, IMPL_OFFSET>,
            GetRecordStreamType::<Impl, IMPL_OFFSET>,
            GetRecordElementaryPid::<Impl, IMPL_OFFSET>,
            GetRecordCountOfDescriptors::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetRecordDescriptorByTag::<Impl, IMPL_OFFSET>,
            QueryServiceGatewayInfo::<Impl, IMPL_OFFSET>,
            QueryMPEInfo::<Impl, IMPL_OFFSET>,
            RegisterForNextTable::<Impl, IMPL_OFFSET>,
            GetNextTable::<Impl, IMPL_OFFSET>,
            RegisterForWhenCurrent::<Impl, IMPL_OFFSET>,
            ConvertNextToCurrent::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPMT as ::windows::core::Interface>::IID
    }
}
pub trait IPSITablesImpl: Sized {
    fn GetTable();
}
impl IPSITablesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPSITablesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPSITablesVtbl {
        unsafe extern "system" fn GetTable<Impl: IPSITablesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtsid: u32, dwtid_pid: u32, dwhashedver: u32, dwpara4: u32, ppiunknown: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTable::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPSITables as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IPTFilterLicenseRenewalImpl: Sized {
    fn RenewLicenses();
    fn CancelLicenseRenewal();
}
#[cfg(feature = "Win32_Foundation")]
impl IPTFilterLicenseRenewalVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPTFilterLicenseRenewalImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPTFilterLicenseRenewalVtbl {
        unsafe extern "system" fn RenewLicenses<Impl: IPTFilterLicenseRenewalImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, wszfilename: super::super::Foundation::PWSTR, wszexpiredkid: super::super::Foundation::PWSTR, dwcallersid: u32, bhighpriority: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CancelLicenseRenewal<Impl: IPTFilterLicenseRenewalImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, RenewLicenses::<Impl, IMPL_OFFSET>, CancelLicenseRenewal::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPTFilterLicenseRenewal as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IPersistMediaPropertyBagImpl: Sized + IPersistImpl {
    fn InitNew();
    fn Load();
    fn Save();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IPersistMediaPropertyBagVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPersistMediaPropertyBagImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPersistMediaPropertyBagVtbl {
        unsafe extern "system" fn InitNew<Impl: IPersistMediaPropertyBagImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Load<Impl: IPersistMediaPropertyBagImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppropbag: ::windows::core::RawPtr, perrorlog: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Save<Impl: IPersistMediaPropertyBagImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppropbag: ::windows::core::RawPtr, fcleardirty: super::super::Foundation::BOOL, fsaveallproperties: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetClassID::<Impl, IMPL_OFFSET>, InitNew::<Impl, IMPL_OFFSET>, Load::<Impl, IMPL_OFFSET>, Save::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPersistMediaPropertyBag as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IPersistTuneXmlImpl: Sized + IPersistImpl {
    fn InitNew();
    fn Load();
    fn Save();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IPersistTuneXmlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPersistTuneXmlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPersistTuneXmlVtbl {
        unsafe extern "system" fn InitNew<Impl: IPersistTuneXmlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Load<Impl: IPersistTuneXmlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varvalue: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Save<Impl: IPersistTuneXmlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvarfragment: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetClassID::<Impl, IMPL_OFFSET>, InitNew::<Impl, IMPL_OFFSET>, Load::<Impl, IMPL_OFFSET>, Save::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPersistTuneXml as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IPersistTuneXmlUtilityImpl: Sized {
    fn Deserialize();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IPersistTuneXmlUtilityVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPersistTuneXmlUtilityImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPersistTuneXmlUtilityVtbl {
        unsafe extern "system" fn Deserialize<Impl: IPersistTuneXmlUtilityImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varvalue: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, ppobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Deserialize::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPersistTuneXmlUtility as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IPersistTuneXmlUtility2Impl: Sized + IPersistTuneXmlUtilityImpl {
    fn Serialize();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IPersistTuneXmlUtility2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPersistTuneXmlUtility2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPersistTuneXmlUtility2Vtbl {
        unsafe extern "system" fn Serialize<Impl: IPersistTuneXmlUtility2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pitunerequest: ::windows::core::RawPtr, pstring: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Deserialize::<Impl, IMPL_OFFSET>, Serialize::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPersistTuneXmlUtility2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IPinImpl: Sized {
    fn Connect();
    fn ReceiveConnection();
    fn Disconnect();
    fn ConnectedTo();
    fn ConnectionMediaType();
    fn QueryPinInfo();
    fn QueryDirection();
    fn QueryId();
    fn QueryAccept();
    fn EnumMediaTypes();
    fn QueryInternalConnections();
    fn EndOfStream();
    fn BeginFlush();
    fn EndFlush();
    fn NewSegment();
}
#[cfg(feature = "Win32_Foundation")]
impl IPinVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPinImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPinVtbl {
        unsafe extern "system" fn Connect<Impl: IPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, preceivepin: ::windows::core::RawPtr, pmt: *const AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReceiveConnection<Impl: IPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pconnector: ::windows::core::RawPtr, pmt: *const AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Disconnect<Impl: IPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectedTo<Impl: IPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectionMediaType<Impl: IPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmt: *mut AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryPinInfo<Impl: IPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pinfo: *mut PIN_INFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryDirection<Impl: IPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppindir: *mut PIN_DIRECTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryId<Impl: IPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryAccept<Impl: IPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmt: *const AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumMediaTypes<Impl: IPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryInternalConnections<Impl: IPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, appin: *mut ::windows::core::RawPtr, npin: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndOfStream<Impl: IPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BeginFlush<Impl: IPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndFlush<Impl: IPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NewSegment<Impl: IPinImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tstart: i64, tstop: i64, drate: f64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Connect::<Impl, IMPL_OFFSET>,
            ReceiveConnection::<Impl, IMPL_OFFSET>,
            Disconnect::<Impl, IMPL_OFFSET>,
            ConnectedTo::<Impl, IMPL_OFFSET>,
            ConnectionMediaType::<Impl, IMPL_OFFSET>,
            QueryPinInfo::<Impl, IMPL_OFFSET>,
            QueryDirection::<Impl, IMPL_OFFSET>,
            QueryId::<Impl, IMPL_OFFSET>,
            QueryAccept::<Impl, IMPL_OFFSET>,
            EnumMediaTypes::<Impl, IMPL_OFFSET>,
            QueryInternalConnections::<Impl, IMPL_OFFSET>,
            EndOfStream::<Impl, IMPL_OFFSET>,
            BeginFlush::<Impl, IMPL_OFFSET>,
            EndFlush::<Impl, IMPL_OFFSET>,
            NewSegment::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPin as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IPinConnectionImpl: Sized {
    fn DynamicQueryAccept();
    fn NotifyEndOfStream();
    fn IsEndPin();
    fn DynamicDisconnect();
}
#[cfg(feature = "Win32_Foundation")]
impl IPinConnectionVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPinConnectionImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPinConnectionVtbl {
        unsafe extern "system" fn DynamicQueryAccept<Impl: IPinConnectionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmt: *const AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NotifyEndOfStream<Impl: IPinConnectionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnotifyevent: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsEndPin<Impl: IPinConnectionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DynamicDisconnect<Impl: IPinConnectionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, DynamicQueryAccept::<Impl, IMPL_OFFSET>, NotifyEndOfStream::<Impl, IMPL_OFFSET>, IsEndPin::<Impl, IMPL_OFFSET>, DynamicDisconnect::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPinConnection as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IPinFlowControlImpl: Sized {
    fn Block();
}
#[cfg(feature = "Win32_Foundation")]
impl IPinFlowControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPinFlowControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPinFlowControlVtbl {
        unsafe extern "system" fn Block<Impl: IPinFlowControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwblockflags: u32, hevent: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Block::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPinFlowControl as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IPinInfoImpl: Sized + IDispatchImpl {
    fn Pin();
    fn ConnectedTo();
    fn ConnectionMediaType();
    fn FilterInfo();
    fn Name();
    fn Direction();
    fn PinID();
    fn MediaTypes();
    fn Connect();
    fn ConnectDirect();
    fn ConnectWithType();
    fn Disconnect();
    fn Render();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IPinInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPinInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPinInfoVtbl {
        unsafe extern "system" fn Pin<Impl: IPinInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectedTo<Impl: IPinInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectionMediaType<Impl: IPinInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FilterInfo<Impl: IPinInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Name<Impl: IPinInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Direction<Impl: IPinInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdirection: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PinID<Impl: IPinInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strpinid: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MediaTypes<Impl: IPinInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Connect<Impl: IPinInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectDirect<Impl: IPinInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectWithType<Impl: IPinInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppin: *mut ::core::ffi::c_void, pmediatype: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Disconnect<Impl: IPinInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Render<Impl: IPinInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Pin::<Impl, IMPL_OFFSET>,
            ConnectedTo::<Impl, IMPL_OFFSET>,
            ConnectionMediaType::<Impl, IMPL_OFFSET>,
            FilterInfo::<Impl, IMPL_OFFSET>,
            Name::<Impl, IMPL_OFFSET>,
            Direction::<Impl, IMPL_OFFSET>,
            PinID::<Impl, IMPL_OFFSET>,
            MediaTypes::<Impl, IMPL_OFFSET>,
            Connect::<Impl, IMPL_OFFSET>,
            ConnectDirect::<Impl, IMPL_OFFSET>,
            ConnectWithType::<Impl, IMPL_OFFSET>,
            Disconnect::<Impl, IMPL_OFFSET>,
            Render::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPinInfo as ::windows::core::Interface>::IID
    }
}
pub trait IQualPropImpl: Sized {
    fn FramesDroppedInRenderer();
    fn FramesDrawn();
    fn AvgFrameRate();
    fn Jitter();
    fn AvgSyncOffset();
    fn DevSyncOffset();
}
impl IQualPropVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IQualPropImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IQualPropVtbl {
        unsafe extern "system" fn FramesDroppedInRenderer<Impl: IQualPropImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcframes: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FramesDrawn<Impl: IQualPropImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcframesdrawn: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AvgFrameRate<Impl: IQualPropImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, piavgframerate: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Jitter<Impl: IQualPropImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ijitter: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AvgSyncOffset<Impl: IQualPropImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, piavg: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DevSyncOffset<Impl: IQualPropImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidev: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, FramesDroppedInRenderer::<Impl, IMPL_OFFSET>, FramesDrawn::<Impl, IMPL_OFFSET>, AvgFrameRate::<Impl, IMPL_OFFSET>, Jitter::<Impl, IMPL_OFFSET>, AvgSyncOffset::<Impl, IMPL_OFFSET>, DevSyncOffset::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IQualProp as ::windows::core::Interface>::IID
    }
}
pub trait IQualityControlImpl: Sized {
    fn Notify();
    fn SetSink();
}
impl IQualityControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IQualityControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IQualityControlVtbl {
        unsafe extern "system" fn Notify<Impl: IQualityControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pself: ::windows::core::RawPtr, q: Quality) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSink<Impl: IQualityControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, piqc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Notify::<Impl, IMPL_OFFSET>, SetSink::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IQualityControl as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IQueueCommandImpl: Sized {
    fn InvokeAtStreamTime();
    fn InvokeAtPresentationTime();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IQueueCommandVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IQueueCommandImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IQueueCommandVtbl {
        unsafe extern "system" fn InvokeAtStreamTime<Impl: IQueueCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcmd: *mut ::windows::core::RawPtr, time: f64, iid: *const ::windows::core::GUID, dispidmethod: i32, wflags: i16, cargs: i32, pdispparams: *const super::super::System::Com::VARIANT, pvarresult: *mut super::super::System::Com::VARIANT, puargerr: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InvokeAtPresentationTime<Impl: IQueueCommandImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcmd: *mut ::windows::core::RawPtr, time: f64, iid: *const ::windows::core::GUID, dispidmethod: i32, wflags: i16, cargs: i32, pdispparams: *const super::super::System::Com::VARIANT, pvarresult: *mut super::super::System::Com::VARIANT, puargerr: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, InvokeAtStreamTime::<Impl, IMPL_OFFSET>, InvokeAtPresentationTime::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IQueueCommand as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IRegFilterInfoImpl: Sized + IDispatchImpl {
    fn Name();
    fn Filter();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IRegFilterInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRegFilterInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRegFilterInfoVtbl {
        unsafe extern "system" fn Name<Impl: IRegFilterInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strname: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Filter<Impl: IRegFilterInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunk: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, Name::<Impl, IMPL_OFFSET>, Filter::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRegFilterInfo as ::windows::core::Interface>::IID
    }
}
pub trait IRegisterServiceProviderImpl: Sized {
    fn RegisterService();
}
impl IRegisterServiceProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRegisterServiceProviderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRegisterServiceProviderVtbl {
        unsafe extern "system" fn RegisterService<Impl: IRegisterServiceProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guidservice: *const ::windows::core::GUID, punkobject: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, RegisterService::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRegisterServiceProvider as ::windows::core::Interface>::IID
    }
}
pub trait IRegisterTunerImpl: Sized {
    fn Register();
    fn Unregister();
}
impl IRegisterTunerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRegisterTunerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRegisterTunerVtbl {
        unsafe extern "system" fn Register<Impl: IRegisterTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptuner: ::windows::core::RawPtr, pgraph: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Unregister<Impl: IRegisterTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Register::<Impl, IMPL_OFFSET>, Unregister::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRegisterTuner as ::windows::core::Interface>::IID
    }
}
pub trait IResourceConsumerImpl: Sized {
    fn AcquireResource();
    fn ReleaseResource();
}
impl IResourceConsumerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IResourceConsumerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IResourceConsumerVtbl {
        unsafe extern "system" fn AcquireResource<Impl: IResourceConsumerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idresource: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReleaseResource<Impl: IResourceConsumerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idresource: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, AcquireResource::<Impl, IMPL_OFFSET>, ReleaseResource::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IResourceConsumer as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IResourceManagerImpl: Sized {
    fn Register();
    fn RegisterGroup();
    fn RequestResource();
    fn NotifyAcquire();
    fn NotifyRelease();
    fn CancelRequest();
    fn SetFocus();
    fn ReleaseFocus();
}
#[cfg(feature = "Win32_Foundation")]
impl IResourceManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IResourceManagerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IResourceManagerVtbl {
        unsafe extern "system" fn Register<Impl: IResourceManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pname: super::super::Foundation::PWSTR, cresource: i32, pltoken: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterGroup<Impl: IResourceManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pname: super::super::Foundation::PWSTR, cresource: i32, paltokens: *const i32, pltoken: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RequestResource<Impl: IResourceManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idresource: i32, pfocusobject: *mut ::core::ffi::c_void, pconsumer: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NotifyAcquire<Impl: IResourceManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idresource: i32, pconsumer: ::windows::core::RawPtr, hr: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NotifyRelease<Impl: IResourceManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idresource: i32, pconsumer: ::windows::core::RawPtr, bstillwant: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CancelRequest<Impl: IResourceManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idresource: i32, pconsumer: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFocus<Impl: IResourceManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfocusobject: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReleaseFocus<Impl: IResourceManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfocusobject: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Register::<Impl, IMPL_OFFSET>, RegisterGroup::<Impl, IMPL_OFFSET>, RequestResource::<Impl, IMPL_OFFSET>, NotifyAcquire::<Impl, IMPL_OFFSET>, NotifyRelease::<Impl, IMPL_OFFSET>, CancelRequest::<Impl, IMPL_OFFSET>, SetFocus::<Impl, IMPL_OFFSET>, ReleaseFocus::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IResourceManager as ::windows::core::Interface>::IID
    }
}
pub trait ISBE2CrossbarImpl: Sized {
    fn EnableDefaultMode();
    fn GetInitialProfile();
    fn SetOutputProfile();
    fn EnumStreams();
}
impl ISBE2CrossbarVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISBE2CrossbarImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISBE2CrossbarVtbl {
        unsafe extern "system" fn EnableDefaultMode<Impl: ISBE2CrossbarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, defaultflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInitialProfile<Impl: ISBE2CrossbarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppprofile: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputProfile<Impl: ISBE2CrossbarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pprofile: ::windows::core::RawPtr, pcoutputpins: *mut u32, ppoutputpins: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumStreams<Impl: ISBE2CrossbarImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppstreams: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, EnableDefaultMode::<Impl, IMPL_OFFSET>, GetInitialProfile::<Impl, IMPL_OFFSET>, SetOutputProfile::<Impl, IMPL_OFFSET>, EnumStreams::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISBE2Crossbar as ::windows::core::Interface>::IID
    }
}
pub trait ISBE2EnumStreamImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ISBE2EnumStreamVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISBE2EnumStreamImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISBE2EnumStreamVtbl {
        unsafe extern "system" fn Next<Impl: ISBE2EnumStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, crequest: u32, pstreamdesc: *mut SBE2_STREAM_DESC, pcreceived: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: ISBE2EnumStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, crecords: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: ISBE2EnumStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: ISBE2EnumStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppienumstream: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISBE2EnumStream as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait ISBE2FileScanImpl: Sized {
    fn RepairFile();
}
#[cfg(feature = "Win32_Foundation")]
impl ISBE2FileScanVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISBE2FileScanImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISBE2FileScanVtbl {
        unsafe extern "system" fn RepairFile<Impl: ISBE2FileScanImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, RepairFile::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISBE2FileScan as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait ISBE2GlobalEventImpl: Sized {
    fn GetEvent();
}
#[cfg(feature = "Win32_Foundation")]
impl ISBE2GlobalEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISBE2GlobalEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISBE2GlobalEventVtbl {
        unsafe extern "system" fn GetEvent<Impl: ISBE2GlobalEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idevt: *const ::windows::core::GUID, param1: u32, param2: u32, param3: u32, param4: u32, pspanning: *mut super::super::Foundation::BOOL, pcb: *mut u32, pb: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetEvent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISBE2GlobalEvent as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait ISBE2GlobalEvent2Impl: Sized + ISBE2GlobalEventImpl {
    fn GetEventEx();
}
#[cfg(feature = "Win32_Foundation")]
impl ISBE2GlobalEvent2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISBE2GlobalEvent2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISBE2GlobalEvent2Vtbl {
        unsafe extern "system" fn GetEventEx<Impl: ISBE2GlobalEvent2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idevt: *const ::windows::core::GUID, param1: u32, param2: u32, param3: u32, param4: u32, pspanning: *mut super::super::Foundation::BOOL, pcb: *mut u32, pb: *mut u8, pstreamtime: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetEvent::<Impl, IMPL_OFFSET>, GetEventEx::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISBE2GlobalEvent2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait ISBE2MediaTypeProfileImpl: Sized {
    fn GetStreamCount();
    fn GetStream();
    fn AddStream();
    fn DeleteStream();
}
#[cfg(feature = "Win32_Foundation")]
impl ISBE2MediaTypeProfileVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISBE2MediaTypeProfileImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISBE2MediaTypeProfileVtbl {
        unsafe extern "system" fn GetStreamCount<Impl: ISBE2MediaTypeProfileImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStream<Impl: ISBE2MediaTypeProfileImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, ppmediatype: *mut *mut AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddStream<Impl: ISBE2MediaTypeProfileImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmediatype: *const AM_MEDIA_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DeleteStream<Impl: ISBE2MediaTypeProfileImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetStreamCount::<Impl, IMPL_OFFSET>, GetStream::<Impl, IMPL_OFFSET>, AddStream::<Impl, IMPL_OFFSET>, DeleteStream::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISBE2MediaTypeProfile as ::windows::core::Interface>::IID
    }
}
pub trait ISBE2SpanningEventImpl: Sized {
    fn GetEvent();
}
impl ISBE2SpanningEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISBE2SpanningEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISBE2SpanningEventVtbl {
        unsafe extern "system" fn GetEvent<Impl: ISBE2SpanningEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, idevt: *const ::windows::core::GUID, streamid: u32, pcb: *mut u32, pb: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetEvent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISBE2SpanningEvent as ::windows::core::Interface>::IID
    }
}
pub trait ISBE2StreamMapImpl: Sized {
    fn MapStream();
    fn UnmapStream();
    fn EnumMappedStreams();
}
impl ISBE2StreamMapVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISBE2StreamMapImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISBE2StreamMapVtbl {
        unsafe extern "system" fn MapStream<Impl: ISBE2StreamMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, stream: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnmapStream<Impl: ISBE2StreamMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, stream: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumMappedStreams<Impl: ISBE2StreamMapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppstreams: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, MapStream::<Impl, IMPL_OFFSET>, UnmapStream::<Impl, IMPL_OFFSET>, EnumMappedStreams::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISBE2StreamMap as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait ISCTE_EASImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetSequencyNumber();
    fn GetProtocolVersion();
    fn GetEASEventID();
    fn GetOriginatorCode();
    fn GetEASEventCodeLen();
    fn GetEASEventCode();
    fn GetRawNatureOfActivationTextLen();
    fn GetRawNatureOfActivationText();
    fn GetNatureOfActivationText();
    fn GetTimeRemaining();
    fn GetStartTime();
    fn GetDuration();
    fn GetAlertPriority();
    fn GetDetailsOOBSourceID();
    fn GetDetailsMajor();
    fn GetDetailsMinor();
    fn GetDetailsAudioOOBSourceID();
    fn GetAlertText();
    fn GetRawAlertTextLen();
    fn GetRawAlertText();
    fn GetLocationCount();
    fn GetLocationCodes();
    fn GetExceptionCount();
    fn GetExceptionService();
    fn GetCountOfTableDescriptors();
    fn GetTableDescriptorByIndex();
    fn GetTableDescriptorByTag();
}
#[cfg(feature = "Win32_Foundation")]
impl ISCTE_EASVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISCTE_EASImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISCTE_EASVtbl {
        unsafe extern "system" fn Initialize<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSequencyNumber<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProtocolVersion<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEASEventID<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOriginatorCode<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEASEventCodeLen<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEASEventCode<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRawNatureOfActivationTextLen<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRawNatureOfActivationText<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNatureOfActivationText<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstris0639code: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pbstrstring: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTimeRemaining<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStartTime<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDuration<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAlertPriority<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDetailsOOBSourceID<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDetailsMajor<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDetailsMinor<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDetailsAudioOOBSourceID<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAlertText<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstris0639code: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, pbstrstring: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRawAlertTextLen<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRawAlertText<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLocationCount<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLocationCodes<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindex: u8, pbstate: *mut u8, pbcountysubdivision: *mut u8, pwcounty: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionCount<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionService<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindex: u8, pbibref: *mut u8, pwfirst: *mut u16, pwsecond: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Impl: ISCTE_EASImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetSequencyNumber::<Impl, IMPL_OFFSET>,
            GetProtocolVersion::<Impl, IMPL_OFFSET>,
            GetEASEventID::<Impl, IMPL_OFFSET>,
            GetOriginatorCode::<Impl, IMPL_OFFSET>,
            GetEASEventCodeLen::<Impl, IMPL_OFFSET>,
            GetEASEventCode::<Impl, IMPL_OFFSET>,
            GetRawNatureOfActivationTextLen::<Impl, IMPL_OFFSET>,
            GetRawNatureOfActivationText::<Impl, IMPL_OFFSET>,
            GetNatureOfActivationText::<Impl, IMPL_OFFSET>,
            GetTimeRemaining::<Impl, IMPL_OFFSET>,
            GetStartTime::<Impl, IMPL_OFFSET>,
            GetDuration::<Impl, IMPL_OFFSET>,
            GetAlertPriority::<Impl, IMPL_OFFSET>,
            GetDetailsOOBSourceID::<Impl, IMPL_OFFSET>,
            GetDetailsMajor::<Impl, IMPL_OFFSET>,
            GetDetailsMinor::<Impl, IMPL_OFFSET>,
            GetDetailsAudioOOBSourceID::<Impl, IMPL_OFFSET>,
            GetAlertText::<Impl, IMPL_OFFSET>,
            GetRawAlertTextLen::<Impl, IMPL_OFFSET>,
            GetRawAlertText::<Impl, IMPL_OFFSET>,
            GetLocationCount::<Impl, IMPL_OFFSET>,
            GetLocationCodes::<Impl, IMPL_OFFSET>,
            GetExceptionCount::<Impl, IMPL_OFFSET>,
            GetExceptionService::<Impl, IMPL_OFFSET>,
            GetCountOfTableDescriptors::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByTag::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISCTE_EAS as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait ISIInbandEPGImpl: Sized {
    fn StartSIEPGScan();
    fn StopSIEPGScan();
    fn IsSIEPGScanRunning();
}
#[cfg(feature = "Win32_Foundation")]
impl ISIInbandEPGVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISIInbandEPGImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISIInbandEPGVtbl {
        unsafe extern "system" fn StartSIEPGScan<Impl: ISIInbandEPGImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StopSIEPGScan<Impl: ISIInbandEPGImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsSIEPGScanRunning<Impl: ISIInbandEPGImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, brunning: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, StartSIEPGScan::<Impl, IMPL_OFFSET>, StopSIEPGScan::<Impl, IMPL_OFFSET>, IsSIEPGScanRunning::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISIInbandEPG as ::windows::core::Interface>::IID
    }
}
pub trait ISIInbandEPGEventImpl: Sized {
    fn SIObjectEvent();
}
impl ISIInbandEPGEventVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISIInbandEPGEventImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISIInbandEPGEventVtbl {
        unsafe extern "system" fn SIObjectEvent<Impl: ISIInbandEPGEventImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pidvb_eit: ::windows::core::RawPtr, dwtable_id: u32, dwservice_id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SIObjectEvent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISIInbandEPGEvent as ::windows::core::Interface>::IID
    }
}
pub trait IScanningTunerImpl: Sized + ITunerImpl {
    fn SeekUp();
    fn SeekDown();
    fn ScanUp();
    fn ScanDown();
    fn AutoProgram();
}
impl IScanningTunerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IScanningTunerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IScanningTunerVtbl {
        unsafe extern "system" fn SeekUp<Impl: IScanningTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SeekDown<Impl: IScanningTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ScanUp<Impl: IScanningTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, millisecondspause: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ScanDown<Impl: IScanningTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, millisecondspause: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AutoProgram<Impl: IScanningTunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            TuningSpace::<Impl, IMPL_OFFSET>,
            SetTuningSpace::<Impl, IMPL_OFFSET>,
            EnumTuningSpaces::<Impl, IMPL_OFFSET>,
            TuneRequest::<Impl, IMPL_OFFSET>,
            SetTuneRequest::<Impl, IMPL_OFFSET>,
            Validate::<Impl, IMPL_OFFSET>,
            PreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SetPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SignalStrength::<Impl, IMPL_OFFSET>,
            TriggerSignalEvents::<Impl, IMPL_OFFSET>,
            SeekUp::<Impl, IMPL_OFFSET>,
            SeekDown::<Impl, IMPL_OFFSET>,
            ScanUp::<Impl, IMPL_OFFSET>,
            ScanDown::<Impl, IMPL_OFFSET>,
            AutoProgram::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IScanningTuner as ::windows::core::Interface>::IID
    }
}
pub trait IScanningTunerExImpl: Sized + IScanningTunerImpl + ITunerImpl {
    fn GetCurrentLocator();
    fn PerformExhaustiveScan();
    fn TerminateCurrentScan();
    fn ResumeCurrentScan();
    fn GetTunerScanningCapability();
    fn GetTunerStatus();
    fn GetCurrentTunerStandardCapability();
    fn SetScanSignalTypeFilter();
}
impl IScanningTunerExVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IScanningTunerExImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IScanningTunerExVtbl {
        unsafe extern "system" fn GetCurrentLocator<Impl: IScanningTunerExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pilocator: *const ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PerformExhaustiveScan<Impl: IScanningTunerExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwlowerfreq: i32, dwhigherfreq: i32, bfinetune: i16, hevent: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateCurrentScan<Impl: IScanningTunerExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcurrentfreq: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResumeCurrentScan<Impl: IScanningTunerExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hevent: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTunerScanningCapability<Impl: IScanningTunerExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hardwareassistedscanning: *mut i32, numstandardssupported: *mut i32, broadcaststandards: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTunerStatus<Impl: IScanningTunerExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, secondsleft: *mut i32, currentlocktype: *mut i32, autodetect: *mut i32, currentfreq: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentTunerStandardCapability<Impl: IScanningTunerExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentbroadcaststandard: ::windows::core::GUID, settlingtime: *mut i32, tvstandardssupported: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScanSignalTypeFilter<Impl: IScanningTunerExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scanmodulationtypes: i32, analogvideostandard: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            TuningSpace::<Impl, IMPL_OFFSET>,
            SetTuningSpace::<Impl, IMPL_OFFSET>,
            EnumTuningSpaces::<Impl, IMPL_OFFSET>,
            TuneRequest::<Impl, IMPL_OFFSET>,
            SetTuneRequest::<Impl, IMPL_OFFSET>,
            Validate::<Impl, IMPL_OFFSET>,
            PreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SetPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SignalStrength::<Impl, IMPL_OFFSET>,
            TriggerSignalEvents::<Impl, IMPL_OFFSET>,
            SeekUp::<Impl, IMPL_OFFSET>,
            SeekDown::<Impl, IMPL_OFFSET>,
            ScanUp::<Impl, IMPL_OFFSET>,
            ScanDown::<Impl, IMPL_OFFSET>,
            AutoProgram::<Impl, IMPL_OFFSET>,
            GetCurrentLocator::<Impl, IMPL_OFFSET>,
            PerformExhaustiveScan::<Impl, IMPL_OFFSET>,
            TerminateCurrentScan::<Impl, IMPL_OFFSET>,
            ResumeCurrentScan::<Impl, IMPL_OFFSET>,
            GetTunerScanningCapability::<Impl, IMPL_OFFSET>,
            GetTunerStatus::<Impl, IMPL_OFFSET>,
            GetCurrentTunerStandardCapability::<Impl, IMPL_OFFSET>,
            SetScanSignalTypeFilter::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IScanningTunerEx as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait ISectionListImpl: Sized {
    fn Initialize();
    fn InitializeWithRawSections();
    fn CancelPendingRequest();
    fn GetNumberOfSections();
    fn GetSectionData();
    fn GetProgramIdentifier();
    fn GetTableIdentifier();
}
#[cfg(feature = "Win32_Foundation")]
impl ISectionListVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISectionListImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISectionListVtbl {
        unsafe extern "system" fn Initialize<Impl: ISectionListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, requesttype: MPEG_REQUEST_TYPE, pmpeg2data: ::windows::core::RawPtr, pcontext: *const MPEG_CONTEXT, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, timeout: u32, hdoneevent: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InitializeWithRawSections<Impl: ISectionListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmplsections: *const MPEG_PACKET_LIST) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CancelPendingRequest<Impl: ISectionListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberOfSections<Impl: ISectionListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcount: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSectionData<Impl: ISectionListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sectionnumber: u16, pdwrawpacketlength: *mut u32, ppsection: *mut *mut SECTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProgramIdentifier<Impl: ISectionListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppid: *const u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableIdentifier<Impl: ISectionListImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptableid: *const u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, InitializeWithRawSections::<Impl, IMPL_OFFSET>, CancelPendingRequest::<Impl, IMPL_OFFSET>, GetNumberOfSections::<Impl, IMPL_OFFSET>, GetSectionData::<Impl, IMPL_OFFSET>, GetProgramIdentifier::<Impl, IMPL_OFFSET>, GetTableIdentifier::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISectionList as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait ISeekingPassThruImpl: Sized {
    fn Init();
}
#[cfg(feature = "Win32_Foundation")]
impl ISeekingPassThruVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISeekingPassThruImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISeekingPassThruVtbl {
        unsafe extern "system" fn Init<Impl: ISeekingPassThruImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bsupportrendering: super::super::Foundation::BOOL, ppin: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Init::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISeekingPassThru as ::windows::core::Interface>::IID
    }
}
pub trait ISelectorImpl: Sized {
    fn NumSources();
    fn SourceNodeId();
    fn SetSourceNodeId();
}
impl ISelectorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISelectorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISelectorVtbl {
        unsafe extern "system" fn NumSources<Impl: ISelectorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwnumsources: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SourceNodeId<Impl: ISelectorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwpinid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourceNodeId<Impl: ISelectorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwpinid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, NumSources::<Impl, IMPL_OFFSET>, SourceNodeId::<Impl, IMPL_OFFSET>, SetSourceNodeId::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISelector as ::windows::core::Interface>::IID
    }
}
pub trait IServiceLocationDescriptorImpl: Sized {
    fn GetPCR_PID();
    fn GetNumberOfElements();
    fn GetElementStreamType();
    fn GetElementPID();
    fn GetElementLanguageCode();
}
impl IServiceLocationDescriptorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IServiceLocationDescriptorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IServiceLocationDescriptorVtbl {
        unsafe extern "system" fn GetPCR_PID<Impl: IServiceLocationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberOfElements<Impl: IServiceLocationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetElementStreamType<Impl: IServiceLocationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetElementPID<Impl: IServiceLocationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetElementLanguageCode<Impl: IServiceLocationDescriptorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bindex: u8, langcode: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetPCR_PID::<Impl, IMPL_OFFSET>, GetNumberOfElements::<Impl, IMPL_OFFSET>, GetElementStreamType::<Impl, IMPL_OFFSET>, GetElementPID::<Impl, IMPL_OFFSET>, GetElementLanguageCode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IServiceLocationDescriptor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_System_Ole")]
pub trait ISpecifyParticularPagesImpl: Sized {
    fn GetPages();
}
#[cfg(feature = "Win32_System_Ole")]
impl ISpecifyParticularPagesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISpecifyParticularPagesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISpecifyParticularPagesVtbl {
        unsafe extern "system" fn GetPages<Impl: ISpecifyParticularPagesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guidwhatpages: *const ::windows::core::GUID, ppages: *mut super::super::System::Ole::CAUUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetPages::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISpecifyParticularPages as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IStreamBufferConfigureImpl: Sized {
    fn SetDirectory();
    fn GetDirectory();
    fn SetBackingFileCount();
    fn GetBackingFileCount();
    fn SetBackingFileDuration();
    fn GetBackingFileDuration();
}
#[cfg(feature = "Win32_Foundation")]
impl IStreamBufferConfigureVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamBufferConfigureImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamBufferConfigureVtbl {
        unsafe extern "system" fn SetDirectory<Impl: IStreamBufferConfigureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdirectoryname: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDirectory<Impl: IStreamBufferConfigureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppszdirectoryname: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBackingFileCount<Impl: IStreamBufferConfigureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwmin: u32, dwmax: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBackingFileCount<Impl: IStreamBufferConfigureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwmin: *mut u32, pdwmax: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBackingFileDuration<Impl: IStreamBufferConfigureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwseconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBackingFileDuration<Impl: IStreamBufferConfigureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwseconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetDirectory::<Impl, IMPL_OFFSET>, GetDirectory::<Impl, IMPL_OFFSET>, SetBackingFileCount::<Impl, IMPL_OFFSET>, GetBackingFileCount::<Impl, IMPL_OFFSET>, SetBackingFileDuration::<Impl, IMPL_OFFSET>, GetBackingFileDuration::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamBufferConfigure as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IStreamBufferConfigure2Impl: Sized + IStreamBufferConfigureImpl {
    fn SetMultiplexedPacketSize();
    fn GetMultiplexedPacketSize();
    fn SetFFTransitionRates();
    fn GetFFTransitionRates();
}
#[cfg(feature = "Win32_Foundation")]
impl IStreamBufferConfigure2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamBufferConfigure2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamBufferConfigure2Vtbl {
        unsafe extern "system" fn SetMultiplexedPacketSize<Impl: IStreamBufferConfigure2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cbbytesperpacket: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMultiplexedPacketSize<Impl: IStreamBufferConfigure2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcbbytesperpacket: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFFTransitionRates<Impl: IStreamBufferConfigure2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwmaxfullframerate: u32, dwmaxnonskippingrate: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFFTransitionRates<Impl: IStreamBufferConfigure2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwmaxfullframerate: *mut u32, pdwmaxnonskippingrate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetDirectory::<Impl, IMPL_OFFSET>,
            GetDirectory::<Impl, IMPL_OFFSET>,
            SetBackingFileCount::<Impl, IMPL_OFFSET>,
            GetBackingFileCount::<Impl, IMPL_OFFSET>,
            SetBackingFileDuration::<Impl, IMPL_OFFSET>,
            GetBackingFileDuration::<Impl, IMPL_OFFSET>,
            SetMultiplexedPacketSize::<Impl, IMPL_OFFSET>,
            GetMultiplexedPacketSize::<Impl, IMPL_OFFSET>,
            SetFFTransitionRates::<Impl, IMPL_OFFSET>,
            GetFFTransitionRates::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamBufferConfigure2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IStreamBufferConfigure3Impl: Sized + IStreamBufferConfigure2Impl + IStreamBufferConfigureImpl {
    fn SetStartRecConfig();
    fn GetStartRecConfig();
    fn SetNamespace();
    fn GetNamespace();
}
#[cfg(feature = "Win32_Foundation")]
impl IStreamBufferConfigure3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamBufferConfigure3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamBufferConfigure3Vtbl {
        unsafe extern "system" fn SetStartRecConfig<Impl: IStreamBufferConfigure3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fstartstopscur: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStartRecConfig<Impl: IStreamBufferConfigure3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfstartstopscur: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNamespace<Impl: IStreamBufferConfigure3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psznamespace: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNamespace<Impl: IStreamBufferConfigure3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsznamespace: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetDirectory::<Impl, IMPL_OFFSET>,
            GetDirectory::<Impl, IMPL_OFFSET>,
            SetBackingFileCount::<Impl, IMPL_OFFSET>,
            GetBackingFileCount::<Impl, IMPL_OFFSET>,
            SetBackingFileDuration::<Impl, IMPL_OFFSET>,
            GetBackingFileDuration::<Impl, IMPL_OFFSET>,
            SetMultiplexedPacketSize::<Impl, IMPL_OFFSET>,
            GetMultiplexedPacketSize::<Impl, IMPL_OFFSET>,
            SetFFTransitionRates::<Impl, IMPL_OFFSET>,
            GetFFTransitionRates::<Impl, IMPL_OFFSET>,
            SetStartRecConfig::<Impl, IMPL_OFFSET>,
            GetStartRecConfig::<Impl, IMPL_OFFSET>,
            SetNamespace::<Impl, IMPL_OFFSET>,
            GetNamespace::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamBufferConfigure3 as ::windows::core::Interface>::IID
    }
}
pub trait IStreamBufferDataCountersImpl: Sized {
    fn GetData();
    fn ResetData();
}
impl IStreamBufferDataCountersVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamBufferDataCountersImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamBufferDataCountersVtbl {
        unsafe extern "system" fn GetData<Impl: IStreamBufferDataCountersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppindata: *mut SBE_PIN_DATA) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResetData<Impl: IStreamBufferDataCountersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetData::<Impl, IMPL_OFFSET>, ResetData::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamBufferDataCounters as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub trait IStreamBufferInitializeImpl: Sized {
    fn SetHKEY();
    fn SetSIDs();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl IStreamBufferInitializeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamBufferInitializeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamBufferInitializeVtbl {
        unsafe extern "system" fn SetHKEY<Impl: IStreamBufferInitializeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hkeyroot: super::super::System::Registry::HKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSIDs<Impl: IStreamBufferInitializeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, csids: u32, ppsid: *mut super::super::Foundation::PSID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetHKEY::<Impl, IMPL_OFFSET>, SetSIDs::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamBufferInitialize as ::windows::core::Interface>::IID
    }
}
pub trait IStreamBufferMediaSeekingImpl: Sized + IMediaSeekingImpl {}
impl IStreamBufferMediaSeekingVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamBufferMediaSeekingImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamBufferMediaSeekingVtbl {
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetCapabilities::<Impl, IMPL_OFFSET>,
            CheckCapabilities::<Impl, IMPL_OFFSET>,
            IsFormatSupported::<Impl, IMPL_OFFSET>,
            QueryPreferredFormat::<Impl, IMPL_OFFSET>,
            GetTimeFormat::<Impl, IMPL_OFFSET>,
            IsUsingTimeFormat::<Impl, IMPL_OFFSET>,
            SetTimeFormat::<Impl, IMPL_OFFSET>,
            GetDuration::<Impl, IMPL_OFFSET>,
            GetStopPosition::<Impl, IMPL_OFFSET>,
            GetCurrentPosition::<Impl, IMPL_OFFSET>,
            ConvertTimeFormat::<Impl, IMPL_OFFSET>,
            SetPositions::<Impl, IMPL_OFFSET>,
            GetPositions::<Impl, IMPL_OFFSET>,
            GetAvailable::<Impl, IMPL_OFFSET>,
            SetRate::<Impl, IMPL_OFFSET>,
            GetRate::<Impl, IMPL_OFFSET>,
            GetPreroll::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamBufferMediaSeeking as ::windows::core::Interface>::IID
    }
}
pub trait IStreamBufferMediaSeeking2Impl: Sized + IStreamBufferMediaSeekingImpl + IMediaSeekingImpl {
    fn SetRateEx();
}
impl IStreamBufferMediaSeeking2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamBufferMediaSeeking2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamBufferMediaSeeking2Vtbl {
        unsafe extern "system" fn SetRateEx<Impl: IStreamBufferMediaSeeking2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, drate: f64, dwframespersec: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetCapabilities::<Impl, IMPL_OFFSET>,
            CheckCapabilities::<Impl, IMPL_OFFSET>,
            IsFormatSupported::<Impl, IMPL_OFFSET>,
            QueryPreferredFormat::<Impl, IMPL_OFFSET>,
            GetTimeFormat::<Impl, IMPL_OFFSET>,
            IsUsingTimeFormat::<Impl, IMPL_OFFSET>,
            SetTimeFormat::<Impl, IMPL_OFFSET>,
            GetDuration::<Impl, IMPL_OFFSET>,
            GetStopPosition::<Impl, IMPL_OFFSET>,
            GetCurrentPosition::<Impl, IMPL_OFFSET>,
            ConvertTimeFormat::<Impl, IMPL_OFFSET>,
            SetPositions::<Impl, IMPL_OFFSET>,
            GetPositions::<Impl, IMPL_OFFSET>,
            GetAvailable::<Impl, IMPL_OFFSET>,
            SetRate::<Impl, IMPL_OFFSET>,
            GetRate::<Impl, IMPL_OFFSET>,
            GetPreroll::<Impl, IMPL_OFFSET>,
            SetRateEx::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamBufferMediaSeeking2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IStreamBufferRecCompImpl: Sized {
    fn Initialize();
    fn Append();
    fn AppendEx();
    fn GetCurrentLength();
    fn Close();
    fn Cancel();
}
#[cfg(feature = "Win32_Foundation")]
impl IStreamBufferRecCompVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamBufferRecCompImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamBufferRecCompVtbl {
        unsafe extern "system" fn Initialize<Impl: IStreamBufferRecCompImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztargetfilename: super::super::Foundation::PWSTR, pszsbrecprofileref: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Append<Impl: IStreamBufferRecCompImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszsbrecording: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendEx<Impl: IStreamBufferRecCompImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszsbrecording: super::super::Foundation::PWSTR, rtstart: i64, rtstop: i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentLength<Impl: IStreamBufferRecCompImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcseconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Close<Impl: IStreamBufferRecCompImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Cancel<Impl: IStreamBufferRecCompImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, Append::<Impl, IMPL_OFFSET>, AppendEx::<Impl, IMPL_OFFSET>, GetCurrentLength::<Impl, IMPL_OFFSET>, Close::<Impl, IMPL_OFFSET>, Cancel::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamBufferRecComp as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IStreamBufferRecordControlImpl: Sized {
    fn Start();
    fn Stop();
    fn GetRecordingStatus();
}
#[cfg(feature = "Win32_Foundation")]
impl IStreamBufferRecordControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamBufferRecordControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamBufferRecordControlVtbl {
        unsafe extern "system" fn Start<Impl: IStreamBufferRecordControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prtstart: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Stop<Impl: IStreamBufferRecordControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rtstop: i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRecordingStatus<Impl: IStreamBufferRecordControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phresult: *mut ::windows::core::HRESULT, pbstarted: *mut super::super::Foundation::BOOL, pbstopped: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Start::<Impl, IMPL_OFFSET>, Stop::<Impl, IMPL_OFFSET>, GetRecordingStatus::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamBufferRecordControl as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IStreamBufferRecordingAttributeImpl: Sized {
    fn SetAttribute();
    fn GetAttributeCount();
    fn GetAttributeByName();
    fn GetAttributeByIndex();
    fn EnumAttributes();
}
#[cfg(feature = "Win32_Foundation")]
impl IStreamBufferRecordingAttributeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamBufferRecordingAttributeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamBufferRecordingAttributeVtbl {
        unsafe extern "system" fn SetAttribute<Impl: IStreamBufferRecordingAttributeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulreserved: u32, pszattributename: super::super::Foundation::PWSTR, streambufferattributetype: STREAMBUFFER_ATTR_DATATYPE, pbattribute: *const u8, cbattributelength: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAttributeCount<Impl: IStreamBufferRecordingAttributeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulreserved: u32, pcattributes: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAttributeByName<Impl: IStreamBufferRecordingAttributeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszattributename: super::super::Foundation::PWSTR, pulreserved: *const u32, pstreambufferattributetype: *mut STREAMBUFFER_ATTR_DATATYPE, pbattribute: *mut u8, pcblength: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAttributeByIndex<Impl: IStreamBufferRecordingAttributeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, windex: u16, pulreserved: *const u32, pszattributename: super::super::Foundation::PWSTR, pcchnamelength: *mut u16, pstreambufferattributetype: *mut STREAMBUFFER_ATTR_DATATYPE, pbattribute: *mut u8, pcblength: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumAttributes<Impl: IStreamBufferRecordingAttributeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppienumstreambufferattrib: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetAttribute::<Impl, IMPL_OFFSET>, GetAttributeCount::<Impl, IMPL_OFFSET>, GetAttributeByName::<Impl, IMPL_OFFSET>, GetAttributeByIndex::<Impl, IMPL_OFFSET>, EnumAttributes::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamBufferRecordingAttribute as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IStreamBufferSinkImpl: Sized {
    fn LockProfile();
    fn CreateRecorder();
    fn IsProfileLocked();
}
#[cfg(feature = "Win32_Foundation")]
impl IStreamBufferSinkVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamBufferSinkImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamBufferSinkVtbl {
        unsafe extern "system" fn LockProfile<Impl: IStreamBufferSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszstreambufferfilename: super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateRecorder<Impl: IStreamBufferSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszfilename: super::super::Foundation::PWSTR, dwrecordtype: u32, precordingiunknown: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsProfileLocked<Impl: IStreamBufferSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, LockProfile::<Impl, IMPL_OFFSET>, CreateRecorder::<Impl, IMPL_OFFSET>, IsProfileLocked::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamBufferSink as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IStreamBufferSink2Impl: Sized + IStreamBufferSinkImpl {
    fn UnlockProfile();
}
#[cfg(feature = "Win32_Foundation")]
impl IStreamBufferSink2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamBufferSink2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamBufferSink2Vtbl {
        unsafe extern "system" fn UnlockProfile<Impl: IStreamBufferSink2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, LockProfile::<Impl, IMPL_OFFSET>, CreateRecorder::<Impl, IMPL_OFFSET>, IsProfileLocked::<Impl, IMPL_OFFSET>, UnlockProfile::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamBufferSink2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IStreamBufferSink3Impl: Sized + IStreamBufferSink2Impl + IStreamBufferSinkImpl {
    fn SetAvailableFilter();
}
#[cfg(feature = "Win32_Foundation")]
impl IStreamBufferSink3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamBufferSink3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamBufferSink3Vtbl {
        unsafe extern "system" fn SetAvailableFilter<Impl: IStreamBufferSink3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prtmin: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, LockProfile::<Impl, IMPL_OFFSET>, CreateRecorder::<Impl, IMPL_OFFSET>, IsProfileLocked::<Impl, IMPL_OFFSET>, UnlockProfile::<Impl, IMPL_OFFSET>, SetAvailableFilter::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamBufferSink3 as ::windows::core::Interface>::IID
    }
}
pub trait IStreamBufferSourceImpl: Sized {
    fn SetStreamSink();
}
impl IStreamBufferSourceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamBufferSourceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamBufferSourceVtbl {
        unsafe extern "system" fn SetStreamSink<Impl: IStreamBufferSourceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pistreambuffersink: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetStreamSink::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamBufferSource as ::windows::core::Interface>::IID
    }
}
pub trait IStreamBuilderImpl: Sized {
    fn Render();
    fn Backout();
}
impl IStreamBuilderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamBuilderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamBuilderVtbl {
        unsafe extern "system" fn Render<Impl: IStreamBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppinout: ::windows::core::RawPtr, pgraph: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Backout<Impl: IStreamBuilderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppinout: ::windows::core::RawPtr, pgraph: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Render::<Impl, IMPL_OFFSET>, Backout::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamBuilder as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IStreamSampleImpl: Sized {
    fn GetMediaStream();
    fn GetSampleTimes();
    fn SetSampleTimes();
    fn Update();
    fn CompletionStatus();
}
#[cfg(feature = "Win32_Foundation")]
impl IStreamSampleVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStreamSampleImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStreamSampleVtbl {
        unsafe extern "system" fn GetMediaStream<Impl: IStreamSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppmediastream: *const ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSampleTimes<Impl: IStreamSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstarttime: *mut i64, pendtime: *mut i64, pcurrenttime: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSampleTimes<Impl: IStreamSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstarttime: *const i64, pendtime: *const i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Update<Impl: IStreamSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, hevent: super::super::Foundation::HANDLE, pfnapc: ::windows::core::RawPtr, dwapcdata: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CompletionStatus<Impl: IStreamSampleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwflags: u32, dwmilliseconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetMediaStream::<Impl, IMPL_OFFSET>, GetSampleTimes::<Impl, IMPL_OFFSET>, SetSampleTimes::<Impl, IMPL_OFFSET>, Update::<Impl, IMPL_OFFSET>, CompletionStatus::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStreamSample as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait ITSDTImpl: Sized {
    fn Initialize();
    fn GetVersionNumber();
    fn GetCountOfTableDescriptors();
    fn GetTableDescriptorByIndex();
    fn GetTableDescriptorByTag();
    fn RegisterForNextTable();
    fn GetNextTable();
    fn RegisterForWhenCurrent();
    fn ConvertNextToCurrent();
}
#[cfg(feature = "Win32_Foundation")]
impl ITSDTVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITSDTImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ITSDTVtbl {
        unsafe extern "system" fn Initialize<Impl: ITSDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psectionlist: ::windows::core::RawPtr, pmpegdata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersionNumber<Impl: ITSDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Impl: ITSDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Impl: ITSDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Impl: ITSDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForNextTable<Impl: ITSDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextTable<Impl: ITSDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptsdt: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Impl: ITSDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::Foundation::HANDLE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConvertNextToCurrent<Impl: ITSDTImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            GetVersionNumber::<Impl, IMPL_OFFSET>,
            GetCountOfTableDescriptors::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByIndex::<Impl, IMPL_OFFSET>,
            GetTableDescriptorByTag::<Impl, IMPL_OFFSET>,
            RegisterForNextTable::<Impl, IMPL_OFFSET>,
            GetNextTable::<Impl, IMPL_OFFSET>,
            RegisterForWhenCurrent::<Impl, IMPL_OFFSET>,
            ConvertNextToCurrent::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ITSDT as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait ITuneRequestImpl: Sized + IDispatchImpl {
    fn TuningSpace();
    fn Components();
    fn Clone();
    fn Locator();
    fn SetLocator();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl ITuneRequestVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITuneRequestImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ITuneRequestVtbl {
        unsafe extern "system" fn TuningSpace<Impl: ITuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tuningspace: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Components<Impl: ITuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, components: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: ITuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newtunerequest: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Locator<Impl: ITuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, locator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLocator<Impl: ITuneRequestImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, locator: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, TuningSpace::<Impl, IMPL_OFFSET>, Components::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>, Locator::<Impl, IMPL_OFFSET>, SetLocator::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ITuneRequest as ::windows::core::Interface>::IID
    }
}
pub trait ITuneRequestInfoImpl: Sized {
    fn GetLocatorData();
    fn GetComponentData();
    fn CreateComponentList();
    fn GetNextProgram();
    fn GetPreviousProgram();
    fn GetNextLocator();
    fn GetPreviousLocator();
}
impl ITuneRequestInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITuneRequestInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ITuneRequestInfoVtbl {
        unsafe extern "system" fn GetLocatorData<Impl: ITuneRequestInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, request: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetComponentData<Impl: ITuneRequestInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentrequest: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateComponentList<Impl: ITuneRequestInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentrequest: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextProgram<Impl: ITuneRequestInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentrequest: ::windows::core::RawPtr, tunerequest: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPreviousProgram<Impl: ITuneRequestInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentrequest: ::windows::core::RawPtr, tunerequest: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextLocator<Impl: ITuneRequestInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentrequest: ::windows::core::RawPtr, tunerequest: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPreviousLocator<Impl: ITuneRequestInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentrequest: ::windows::core::RawPtr, tunerequest: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetLocatorData::<Impl, IMPL_OFFSET>, GetComponentData::<Impl, IMPL_OFFSET>, CreateComponentList::<Impl, IMPL_OFFSET>, GetNextProgram::<Impl, IMPL_OFFSET>, GetPreviousProgram::<Impl, IMPL_OFFSET>, GetNextLocator::<Impl, IMPL_OFFSET>, GetPreviousLocator::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ITuneRequestInfo as ::windows::core::Interface>::IID
    }
}
pub trait ITuneRequestInfoExImpl: Sized + ITuneRequestInfoImpl {
    fn CreateComponentListEx();
}
impl ITuneRequestInfoExVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITuneRequestInfoExImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ITuneRequestInfoExVtbl {
        unsafe extern "system" fn CreateComponentListEx<Impl: ITuneRequestInfoExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentrequest: ::windows::core::RawPtr, ppcurpmt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetLocatorData::<Impl, IMPL_OFFSET>, GetComponentData::<Impl, IMPL_OFFSET>, CreateComponentList::<Impl, IMPL_OFFSET>, GetNextProgram::<Impl, IMPL_OFFSET>, GetPreviousProgram::<Impl, IMPL_OFFSET>, GetNextLocator::<Impl, IMPL_OFFSET>, GetPreviousLocator::<Impl, IMPL_OFFSET>, CreateComponentListEx::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ITuneRequestInfoEx as ::windows::core::Interface>::IID
    }
}
pub trait ITunerImpl: Sized {
    fn TuningSpace();
    fn SetTuningSpace();
    fn EnumTuningSpaces();
    fn TuneRequest();
    fn SetTuneRequest();
    fn Validate();
    fn PreferredComponentTypes();
    fn SetPreferredComponentTypes();
    fn SignalStrength();
    fn TriggerSignalEvents();
}
impl ITunerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITunerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ITunerVtbl {
        unsafe extern "system" fn TuningSpace<Impl: ITunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tuningspace: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTuningSpace<Impl: ITunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tuningspace: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumTuningSpaces<Impl: ITunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TuneRequest<Impl: ITunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tunerequest: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTuneRequest<Impl: ITunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tunerequest: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Validate<Impl: ITunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tunerequest: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PreferredComponentTypes<Impl: ITunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, componenttypes: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPreferredComponentTypes<Impl: ITunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, componenttypes: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SignalStrength<Impl: ITunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strength: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TriggerSignalEvents<Impl: ITunerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interval: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            TuningSpace::<Impl, IMPL_OFFSET>,
            SetTuningSpace::<Impl, IMPL_OFFSET>,
            EnumTuningSpaces::<Impl, IMPL_OFFSET>,
            TuneRequest::<Impl, IMPL_OFFSET>,
            SetTuneRequest::<Impl, IMPL_OFFSET>,
            Validate::<Impl, IMPL_OFFSET>,
            PreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SetPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SignalStrength::<Impl, IMPL_OFFSET>,
            TriggerSignalEvents::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ITuner as ::windows::core::Interface>::IID
    }
}
pub trait ITunerCapImpl: Sized {
    fn SupportedNetworkTypes();
    fn SupportedVideoFormats();
    fn AuxInputCount();
}
impl ITunerCapVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITunerCapImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ITunerCapVtbl {
        unsafe extern "system" fn SupportedNetworkTypes<Impl: ITunerCapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcnetworktypesmax: u32, pulcnetworktypes: *mut u32, pguidnetworktypes: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SupportedVideoFormats<Impl: ITunerCapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulamtunermodetype: *mut u32, pulanalogvideostandard: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AuxInputCount<Impl: ITunerCapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcompositecount: *mut u32, pulsvideocount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SupportedNetworkTypes::<Impl, IMPL_OFFSET>, SupportedVideoFormats::<Impl, IMPL_OFFSET>, AuxInputCount::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ITunerCap as ::windows::core::Interface>::IID
    }
}
pub trait ITunerCapExImpl: Sized {
    fn Has608_708Caption();
}
impl ITunerCapExVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITunerCapExImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ITunerCapExVtbl {
        unsafe extern "system" fn Has608_708Caption<Impl: ITunerCapExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbhascaption: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Has608_708Caption::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ITunerCapEx as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait ITuningSpaceImpl: Sized + IDispatchImpl {
    fn UniqueName();
    fn SetUniqueName();
    fn FriendlyName();
    fn SetFriendlyName();
    fn CLSID();
    fn NetworkType();
    fn SetNetworkType();
    fn _NetworkType();
    fn Set_NetworkType();
    fn CreateTuneRequest();
    fn EnumCategoryGUIDs();
    fn EnumDeviceMonikers();
    fn DefaultPreferredComponentTypes();
    fn SetDefaultPreferredComponentTypes();
    fn FrequencyMapping();
    fn SetFrequencyMapping();
    fn DefaultLocator();
    fn SetDefaultLocator();
    fn Clone();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl ITuningSpaceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITuningSpaceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ITuningSpaceVtbl {
        unsafe extern "system" fn UniqueName<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetUniqueName<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FriendlyName<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFriendlyName<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CLSID<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, spaceclsid: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NetworkType<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, networktypeguid: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNetworkType<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, networktypeguid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _NetworkType<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, networktypeguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Set_NetworkType<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, networktypeguid: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateTuneRequest<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tunerequest: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumCategoryGUIDs<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumDeviceMonikers<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DefaultPreferredComponentTypes<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, componenttypes: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefaultPreferredComponentTypes<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newcomponenttypes: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FrequencyMapping<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmapping: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFrequencyMapping<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mapping: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DefaultLocator<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, locatorval: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefaultLocator<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, locatorval: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: ITuningSpaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newts: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            UniqueName::<Impl, IMPL_OFFSET>,
            SetUniqueName::<Impl, IMPL_OFFSET>,
            FriendlyName::<Impl, IMPL_OFFSET>,
            SetFriendlyName::<Impl, IMPL_OFFSET>,
            CLSID::<Impl, IMPL_OFFSET>,
            NetworkType::<Impl, IMPL_OFFSET>,
            SetNetworkType::<Impl, IMPL_OFFSET>,
            _NetworkType::<Impl, IMPL_OFFSET>,
            Set_NetworkType::<Impl, IMPL_OFFSET>,
            CreateTuneRequest::<Impl, IMPL_OFFSET>,
            EnumCategoryGUIDs::<Impl, IMPL_OFFSET>,
            EnumDeviceMonikers::<Impl, IMPL_OFFSET>,
            DefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            SetDefaultPreferredComponentTypes::<Impl, IMPL_OFFSET>,
            FrequencyMapping::<Impl, IMPL_OFFSET>,
            SetFrequencyMapping::<Impl, IMPL_OFFSET>,
            DefaultLocator::<Impl, IMPL_OFFSET>,
            SetDefaultLocator::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ITuningSpace as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait ITuningSpaceContainerImpl: Sized + IDispatchImpl {
    fn Count();
    fn _NewEnum();
    fn Item();
    fn SetItem();
    fn TuningSpacesForCLSID();
    fn _TuningSpacesForCLSID2();
    fn TuningSpacesForName();
    fn FindID();
    fn Add();
    fn EnumTuningSpaces();
    fn Remove();
    fn MaxCount();
    fn SetMaxCount();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl ITuningSpaceContainerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITuningSpaceContainerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ITuningSpaceContainerVtbl {
        unsafe extern "system" fn Count<Impl: ITuningSpaceContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _NewEnum<Impl: ITuningSpaceContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Item<Impl: ITuningSpaceContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varindex: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, tuningspace: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetItem<Impl: ITuningSpaceContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varindex: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, tuningspace: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TuningSpacesForCLSID<Impl: ITuningSpaceContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, spaceclsid: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, newcoll: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _TuningSpacesForCLSID2<Impl: ITuningSpaceContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, spaceclsid: *const ::windows::core::GUID, newcoll: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TuningSpacesForName<Impl: ITuningSpaceContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>, newcoll: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindID<Impl: ITuningSpaceContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tuningspace: ::windows::core::RawPtr, id: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Add<Impl: ITuningSpaceContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tuningspace: ::windows::core::RawPtr, newindex: *mut super::super::System::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumTuningSpaces<Impl: ITuningSpaceContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Remove<Impl: ITuningSpaceContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MaxCount<Impl: ITuningSpaceContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, maxcount: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMaxCount<Impl: ITuningSpaceContainerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, maxcount: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            Count::<Impl, IMPL_OFFSET>,
            _NewEnum::<Impl, IMPL_OFFSET>,
            Item::<Impl, IMPL_OFFSET>,
            SetItem::<Impl, IMPL_OFFSET>,
            TuningSpacesForCLSID::<Impl, IMPL_OFFSET>,
            _TuningSpacesForCLSID2::<Impl, IMPL_OFFSET>,
            TuningSpacesForName::<Impl, IMPL_OFFSET>,
            FindID::<Impl, IMPL_OFFSET>,
            Add::<Impl, IMPL_OFFSET>,
            EnumTuningSpaces::<Impl, IMPL_OFFSET>,
            Remove::<Impl, IMPL_OFFSET>,
            MaxCount::<Impl, IMPL_OFFSET>,
            SetMaxCount::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ITuningSpaceContainer as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait ITuningSpacesImpl: Sized + IDispatchImpl {
    fn Count();
    fn _NewEnum();
    fn Item();
    fn EnumTuningSpaces();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl ITuningSpacesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITuningSpacesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ITuningSpacesVtbl {
        unsafe extern "system" fn Count<Impl: ITuningSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn _NewEnum<Impl: ITuningSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Item<Impl: ITuningSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varindex: ::core::mem::ManuallyDrop<super::super::System::Com::VARIANT>, tuningspace: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumTuningSpaces<Impl: ITuningSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, Count::<Impl, IMPL_OFFSET>, _NewEnum::<Impl, IMPL_OFFSET>, Item::<Impl, IMPL_OFFSET>, EnumTuningSpaces::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ITuningSpaces as ::windows::core::Interface>::IID
    }
}
pub trait IVMRAspectRatioControlImpl: Sized {
    fn GetAspectRatioMode();
    fn SetAspectRatioMode();
}
impl IVMRAspectRatioControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRAspectRatioControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRAspectRatioControlVtbl {
        unsafe extern "system" fn GetAspectRatioMode<Impl: IVMRAspectRatioControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpdwarmode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAspectRatioMode<Impl: IVMRAspectRatioControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwarmode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetAspectRatioMode::<Impl, IMPL_OFFSET>, SetAspectRatioMode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRAspectRatioControl as ::windows::core::Interface>::IID
    }
}
pub trait IVMRAspectRatioControl9Impl: Sized {
    fn GetAspectRatioMode();
    fn SetAspectRatioMode();
}
impl IVMRAspectRatioControl9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRAspectRatioControl9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRAspectRatioControl9Vtbl {
        unsafe extern "system" fn GetAspectRatioMode<Impl: IVMRAspectRatioControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpdwarmode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAspectRatioMode<Impl: IVMRAspectRatioControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwarmode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetAspectRatioMode::<Impl, IMPL_OFFSET>, SetAspectRatioMode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRAspectRatioControl9 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IVMRDeinterlaceControlImpl: Sized {
    fn GetNumberOfDeinterlaceModes();
    fn GetDeinterlaceModeCaps();
    fn GetDeinterlaceMode();
    fn SetDeinterlaceMode();
    fn GetDeinterlacePrefs();
    fn SetDeinterlacePrefs();
    fn GetActualDeinterlaceMode();
}
#[cfg(feature = "Win32_Foundation")]
impl IVMRDeinterlaceControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRDeinterlaceControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRDeinterlaceControlVtbl {
        unsafe extern "system" fn GetNumberOfDeinterlaceModes<Impl: IVMRDeinterlaceControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpvideodescription: *mut VMRVideoDesc, lpdwnumdeinterlacemodes: *mut u32, lpdeinterlacemodes: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDeinterlaceModeCaps<Impl: IVMRDeinterlaceControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpdeinterlacemode: *mut ::windows::core::GUID, lpvideodescription: *mut VMRVideoDesc, lpdeinterlacecaps: *mut VMRDeinterlaceCaps) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDeinterlaceMode<Impl: IVMRDeinterlaceControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, lpdeinterlacemode: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDeinterlaceMode<Impl: IVMRDeinterlaceControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, lpdeinterlacemode: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDeinterlacePrefs<Impl: IVMRDeinterlaceControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpdwdeinterlaceprefs: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDeinterlacePrefs<Impl: IVMRDeinterlaceControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwdeinterlaceprefs: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetActualDeinterlaceMode<Impl: IVMRDeinterlaceControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, lpdeinterlacemode: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetNumberOfDeinterlaceModes::<Impl, IMPL_OFFSET>, GetDeinterlaceModeCaps::<Impl, IMPL_OFFSET>, GetDeinterlaceMode::<Impl, IMPL_OFFSET>, SetDeinterlaceMode::<Impl, IMPL_OFFSET>, GetDeinterlacePrefs::<Impl, IMPL_OFFSET>, SetDeinterlacePrefs::<Impl, IMPL_OFFSET>, GetActualDeinterlaceMode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRDeinterlaceControl as ::windows::core::Interface>::IID
    }
}
pub trait IVMRDeinterlaceControl9Impl: Sized {
    fn GetNumberOfDeinterlaceModes();
    fn GetDeinterlaceModeCaps();
    fn GetDeinterlaceMode();
    fn SetDeinterlaceMode();
    fn GetDeinterlacePrefs();
    fn SetDeinterlacePrefs();
    fn GetActualDeinterlaceMode();
}
impl IVMRDeinterlaceControl9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRDeinterlaceControl9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRDeinterlaceControl9Vtbl {
        unsafe extern "system" fn GetNumberOfDeinterlaceModes<Impl: IVMRDeinterlaceControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpvideodescription: *const VMR9VideoDesc, lpdwnumdeinterlacemodes: *mut u32, lpdeinterlacemodes: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDeinterlaceModeCaps<Impl: IVMRDeinterlaceControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpdeinterlacemode: *const ::windows::core::GUID, lpvideodescription: *const VMR9VideoDesc, lpdeinterlacecaps: *mut VMR9DeinterlaceCaps) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDeinterlaceMode<Impl: IVMRDeinterlaceControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, lpdeinterlacemode: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDeinterlaceMode<Impl: IVMRDeinterlaceControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, lpdeinterlacemode: *const ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDeinterlacePrefs<Impl: IVMRDeinterlaceControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpdwdeinterlaceprefs: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDeinterlacePrefs<Impl: IVMRDeinterlaceControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwdeinterlaceprefs: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetActualDeinterlaceMode<Impl: IVMRDeinterlaceControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, lpdeinterlacemode: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetNumberOfDeinterlaceModes::<Impl, IMPL_OFFSET>, GetDeinterlaceModeCaps::<Impl, IMPL_OFFSET>, GetDeinterlaceMode::<Impl, IMPL_OFFSET>, SetDeinterlaceMode::<Impl, IMPL_OFFSET>, GetDeinterlacePrefs::<Impl, IMPL_OFFSET>, SetDeinterlacePrefs::<Impl, IMPL_OFFSET>, GetActualDeinterlaceMode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRDeinterlaceControl9 as ::windows::core::Interface>::IID
    }
}
pub trait IVMRFilterConfigImpl: Sized {
    fn SetImageCompositor();
    fn SetNumberOfStreams();
    fn GetNumberOfStreams();
    fn SetRenderingPrefs();
    fn GetRenderingPrefs();
    fn SetRenderingMode();
    fn GetRenderingMode();
}
impl IVMRFilterConfigVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRFilterConfigImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRFilterConfigVtbl {
        unsafe extern "system" fn SetImageCompositor<Impl: IVMRFilterConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpvmrimgcompositor: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNumberOfStreams<Impl: IVMRFilterConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwmaxstreams: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberOfStreams<Impl: IVMRFilterConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwmaxstreams: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRenderingPrefs<Impl: IVMRFilterConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrenderflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRenderingPrefs<Impl: IVMRFilterConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwrenderflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRenderingMode<Impl: IVMRFilterConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRenderingMode<Impl: IVMRFilterConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetImageCompositor::<Impl, IMPL_OFFSET>, SetNumberOfStreams::<Impl, IMPL_OFFSET>, GetNumberOfStreams::<Impl, IMPL_OFFSET>, SetRenderingPrefs::<Impl, IMPL_OFFSET>, GetRenderingPrefs::<Impl, IMPL_OFFSET>, SetRenderingMode::<Impl, IMPL_OFFSET>, GetRenderingMode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRFilterConfig as ::windows::core::Interface>::IID
    }
}
pub trait IVMRFilterConfig9Impl: Sized {
    fn SetImageCompositor();
    fn SetNumberOfStreams();
    fn GetNumberOfStreams();
    fn SetRenderingPrefs();
    fn GetRenderingPrefs();
    fn SetRenderingMode();
    fn GetRenderingMode();
}
impl IVMRFilterConfig9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRFilterConfig9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRFilterConfig9Vtbl {
        unsafe extern "system" fn SetImageCompositor<Impl: IVMRFilterConfig9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpvmrimgcompositor: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNumberOfStreams<Impl: IVMRFilterConfig9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwmaxstreams: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberOfStreams<Impl: IVMRFilterConfig9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwmaxstreams: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRenderingPrefs<Impl: IVMRFilterConfig9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrenderflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRenderingPrefs<Impl: IVMRFilterConfig9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwrenderflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRenderingMode<Impl: IVMRFilterConfig9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRenderingMode<Impl: IVMRFilterConfig9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetImageCompositor::<Impl, IMPL_OFFSET>, SetNumberOfStreams::<Impl, IMPL_OFFSET>, GetNumberOfStreams::<Impl, IMPL_OFFSET>, SetRenderingPrefs::<Impl, IMPL_OFFSET>, GetRenderingPrefs::<Impl, IMPL_OFFSET>, SetRenderingMode::<Impl, IMPL_OFFSET>, GetRenderingMode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRFilterConfig9 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
pub trait IVMRImageCompositorImpl: Sized {
    fn InitCompositionTarget();
    fn TermCompositionTarget();
    fn SetStreamMediaType();
    fn CompositeImage();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
impl IVMRImageCompositorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRImageCompositorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRImageCompositorVtbl {
        unsafe extern "system" fn InitCompositionTarget<Impl: IVMRImageCompositorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pd3ddevice: *mut ::core::ffi::c_void, pddsrendertarget: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TermCompositionTarget<Impl: IVMRImageCompositorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pd3ddevice: *mut ::core::ffi::c_void, pddsrendertarget: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetStreamMediaType<Impl: IVMRImageCompositorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstrmid: u32, pmt: *mut AM_MEDIA_TYPE, ftexture: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CompositeImage<Impl: IVMRImageCompositorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pd3ddevice: *mut ::core::ffi::c_void, pddsrendertarget: ::windows::core::RawPtr, pmtrendertarget: *mut AM_MEDIA_TYPE, rtstart: i64, rtend: i64, dwclrbkgnd: u32, pvideostreaminfo: *mut VMRVIDEOSTREAMINFO, cstreams: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, InitCompositionTarget::<Impl, IMPL_OFFSET>, TermCompositionTarget::<Impl, IMPL_OFFSET>, SetStreamMediaType::<Impl, IMPL_OFFSET>, CompositeImage::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRImageCompositor as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub trait IVMRImageCompositor9Impl: Sized {
    fn InitCompositionDevice();
    fn TermCompositionDevice();
    fn SetStreamMediaType();
    fn CompositeImage();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl IVMRImageCompositor9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRImageCompositor9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRImageCompositor9Vtbl {
        unsafe extern "system" fn InitCompositionDevice<Impl: IVMRImageCompositor9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pd3ddevice: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TermCompositionDevice<Impl: IVMRImageCompositor9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pd3ddevice: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetStreamMediaType<Impl: IVMRImageCompositor9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstrmid: u32, pmt: *const AM_MEDIA_TYPE, ftexture: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CompositeImage<Impl: IVMRImageCompositor9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pd3ddevice: *mut ::core::ffi::c_void, pddsrendertarget: ::windows::core::RawPtr, pmtrendertarget: *const AM_MEDIA_TYPE, rtstart: i64, rtend: i64, dwclrbkgnd: u32, pvideostreaminfo: *const VMR9VideoStreamInfo, cstreams: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, InitCompositionDevice::<Impl, IMPL_OFFSET>, TermCompositionDevice::<Impl, IMPL_OFFSET>, SetStreamMediaType::<Impl, IMPL_OFFSET>, CompositeImage::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRImageCompositor9 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
pub trait IVMRImagePresenterImpl: Sized {
    fn StartPresenting();
    fn StopPresenting();
    fn PresentImage();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
impl IVMRImagePresenterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRImagePresenterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRImagePresenterVtbl {
        unsafe extern "system" fn StartPresenting<Impl: IVMRImagePresenterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwuserid: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StopPresenting<Impl: IVMRImagePresenterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwuserid: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PresentImage<Impl: IVMRImagePresenterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwuserid: usize, lppresinfo: *mut VMRPRESENTATIONINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, StartPresenting::<Impl, IMPL_OFFSET>, StopPresenting::<Impl, IMPL_OFFSET>, PresentImage::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRImagePresenter as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub trait IVMRImagePresenter9Impl: Sized {
    fn StartPresenting();
    fn StopPresenting();
    fn PresentImage();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl IVMRImagePresenter9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRImagePresenter9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRImagePresenter9Vtbl {
        unsafe extern "system" fn StartPresenting<Impl: IVMRImagePresenter9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwuserid: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StopPresenting<Impl: IVMRImagePresenter9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwuserid: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PresentImage<Impl: IVMRImagePresenter9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwuserid: usize, lppresinfo: *const VMR9PresentationInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, StartPresenting::<Impl, IMPL_OFFSET>, StopPresenting::<Impl, IMPL_OFFSET>, PresentImage::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRImagePresenter9 as ::windows::core::Interface>::IID
    }
}
pub trait IVMRImagePresenterConfigImpl: Sized {
    fn SetRenderingPrefs();
    fn GetRenderingPrefs();
}
impl IVMRImagePresenterConfigVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRImagePresenterConfigImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRImagePresenterConfigVtbl {
        unsafe extern "system" fn SetRenderingPrefs<Impl: IVMRImagePresenterConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrenderflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRenderingPrefs<Impl: IVMRImagePresenterConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrenderflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetRenderingPrefs::<Impl, IMPL_OFFSET>, GetRenderingPrefs::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRImagePresenterConfig as ::windows::core::Interface>::IID
    }
}
pub trait IVMRImagePresenterConfig9Impl: Sized {
    fn SetRenderingPrefs();
    fn GetRenderingPrefs();
}
impl IVMRImagePresenterConfig9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRImagePresenterConfig9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRImagePresenterConfig9Vtbl {
        unsafe extern "system" fn SetRenderingPrefs<Impl: IVMRImagePresenterConfig9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrenderflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRenderingPrefs<Impl: IVMRImagePresenterConfig9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwrenderflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetRenderingPrefs::<Impl, IMPL_OFFSET>, GetRenderingPrefs::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRImagePresenterConfig9 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Graphics_DirectDraw")]
pub trait IVMRImagePresenterExclModeConfigImpl: Sized + IVMRImagePresenterConfigImpl {
    fn SetXlcModeDDObjAndPrimarySurface();
    fn GetXlcModeDDObjAndPrimarySurface();
}
#[cfg(feature = "Win32_Graphics_DirectDraw")]
impl IVMRImagePresenterExclModeConfigVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRImagePresenterExclModeConfigImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRImagePresenterExclModeConfigVtbl {
        unsafe extern "system" fn SetXlcModeDDObjAndPrimarySurface<Impl: IVMRImagePresenterExclModeConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpddobj: ::windows::core::RawPtr, lpprimarysurf: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetXlcModeDDObjAndPrimarySurface<Impl: IVMRImagePresenterExclModeConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpddobj: *mut ::windows::core::RawPtr, lpprimarysurf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetRenderingPrefs::<Impl, IMPL_OFFSET>, GetRenderingPrefs::<Impl, IMPL_OFFSET>, SetXlcModeDDObjAndPrimarySurface::<Impl, IMPL_OFFSET>, GetXlcModeDDObjAndPrimarySurface::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRImagePresenterExclModeConfig as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi"))]
pub trait IVMRMixerBitmapImpl: Sized {
    fn SetAlphaBitmap();
    fn UpdateAlphaBitmapParameters();
    fn GetAlphaBitmapParameters();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi"))]
impl IVMRMixerBitmapVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRMixerBitmapImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRMixerBitmapVtbl {
        unsafe extern "system" fn SetAlphaBitmap<Impl: IVMRMixerBitmapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbmpparms: *const VMRALPHABITMAP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UpdateAlphaBitmapParameters<Impl: IVMRMixerBitmapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbmpparms: *mut VMRALPHABITMAP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAlphaBitmapParameters<Impl: IVMRMixerBitmapImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbmpparms: *mut VMRALPHABITMAP) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetAlphaBitmap::<Impl, IMPL_OFFSET>, UpdateAlphaBitmapParameters::<Impl, IMPL_OFFSET>, GetAlphaBitmapParameters::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRMixerBitmap as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
pub trait IVMRMixerBitmap9Impl: Sized {
    fn SetAlphaBitmap();
    fn UpdateAlphaBitmapParameters();
    fn GetAlphaBitmapParameters();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
impl IVMRMixerBitmap9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRMixerBitmap9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRMixerBitmap9Vtbl {
        unsafe extern "system" fn SetAlphaBitmap<Impl: IVMRMixerBitmap9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbmpparms: *const VMR9AlphaBitmap) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UpdateAlphaBitmapParameters<Impl: IVMRMixerBitmap9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbmpparms: *const VMR9AlphaBitmap) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAlphaBitmapParameters<Impl: IVMRMixerBitmap9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbmpparms: *mut VMR9AlphaBitmap) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetAlphaBitmap::<Impl, IMPL_OFFSET>, UpdateAlphaBitmapParameters::<Impl, IMPL_OFFSET>, GetAlphaBitmapParameters::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRMixerBitmap9 as ::windows::core::Interface>::IID
    }
}
pub trait IVMRMixerControlImpl: Sized {
    fn SetAlpha();
    fn GetAlpha();
    fn SetZOrder();
    fn GetZOrder();
    fn SetOutputRect();
    fn GetOutputRect();
    fn SetBackgroundClr();
    fn GetBackgroundClr();
    fn SetMixingPrefs();
    fn GetMixingPrefs();
}
impl IVMRMixerControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRMixerControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRMixerControlVtbl {
        unsafe extern "system" fn SetAlpha<Impl: IVMRMixerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, alpha: f32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAlpha<Impl: IVMRMixerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, palpha: *mut f32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetZOrder<Impl: IVMRMixerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, dwz: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetZOrder<Impl: IVMRMixerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, pz: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputRect<Impl: IVMRMixerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, prect: *const NORMALIZEDRECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputRect<Impl: IVMRMixerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, prect: *mut NORMALIZEDRECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBackgroundClr<Impl: IVMRMixerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clrbkg: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBackgroundClr<Impl: IVMRMixerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpclrbkg: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMixingPrefs<Impl: IVMRMixerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwmixerprefs: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMixingPrefs<Impl: IVMRMixerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwmixerprefs: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetAlpha::<Impl, IMPL_OFFSET>,
            GetAlpha::<Impl, IMPL_OFFSET>,
            SetZOrder::<Impl, IMPL_OFFSET>,
            GetZOrder::<Impl, IMPL_OFFSET>,
            SetOutputRect::<Impl, IMPL_OFFSET>,
            GetOutputRect::<Impl, IMPL_OFFSET>,
            SetBackgroundClr::<Impl, IMPL_OFFSET>,
            GetBackgroundClr::<Impl, IMPL_OFFSET>,
            SetMixingPrefs::<Impl, IMPL_OFFSET>,
            GetMixingPrefs::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRMixerControl as ::windows::core::Interface>::IID
    }
}
pub trait IVMRMixerControl9Impl: Sized {
    fn SetAlpha();
    fn GetAlpha();
    fn SetZOrder();
    fn GetZOrder();
    fn SetOutputRect();
    fn GetOutputRect();
    fn SetBackgroundClr();
    fn GetBackgroundClr();
    fn SetMixingPrefs();
    fn GetMixingPrefs();
    fn SetProcAmpControl();
    fn GetProcAmpControl();
    fn GetProcAmpControlRange();
}
impl IVMRMixerControl9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRMixerControl9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRMixerControl9Vtbl {
        unsafe extern "system" fn SetAlpha<Impl: IVMRMixerControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, alpha: f32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAlpha<Impl: IVMRMixerControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, palpha: *mut f32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetZOrder<Impl: IVMRMixerControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, dwz: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetZOrder<Impl: IVMRMixerControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, pz: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputRect<Impl: IVMRMixerControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, prect: *const VMR9NormalizedRect) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputRect<Impl: IVMRMixerControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, prect: *mut VMR9NormalizedRect) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBackgroundClr<Impl: IVMRMixerControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clrbkg: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBackgroundClr<Impl: IVMRMixerControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpclrbkg: *const u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMixingPrefs<Impl: IVMRMixerControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwmixerprefs: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMixingPrefs<Impl: IVMRMixerControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwmixerprefs: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProcAmpControl<Impl: IVMRMixerControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, lpclrcontrol: *const VMR9ProcAmpControl) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcAmpControl<Impl: IVMRMixerControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, lpclrcontrol: *mut VMR9ProcAmpControl) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcAmpControlRange<Impl: IVMRMixerControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, lpclrcontrol: *mut VMR9ProcAmpControlRange) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetAlpha::<Impl, IMPL_OFFSET>,
            GetAlpha::<Impl, IMPL_OFFSET>,
            SetZOrder::<Impl, IMPL_OFFSET>,
            GetZOrder::<Impl, IMPL_OFFSET>,
            SetOutputRect::<Impl, IMPL_OFFSET>,
            GetOutputRect::<Impl, IMPL_OFFSET>,
            SetBackgroundClr::<Impl, IMPL_OFFSET>,
            GetBackgroundClr::<Impl, IMPL_OFFSET>,
            SetMixingPrefs::<Impl, IMPL_OFFSET>,
            GetMixingPrefs::<Impl, IMPL_OFFSET>,
            SetProcAmpControl::<Impl, IMPL_OFFSET>,
            GetProcAmpControl::<Impl, IMPL_OFFSET>,
            GetProcAmpControlRange::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRMixerControl9 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IVMRMonitorConfigImpl: Sized {
    fn SetMonitor();
    fn GetMonitor();
    fn SetDefaultMonitor();
    fn GetDefaultMonitor();
    fn GetAvailableMonitors();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl IVMRMonitorConfigVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRMonitorConfigImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRMonitorConfigVtbl {
        unsafe extern "system" fn SetMonitor<Impl: IVMRMonitorConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *const VMRGUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMonitor<Impl: IVMRMonitorConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *mut VMRGUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefaultMonitor<Impl: IVMRMonitorConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *const VMRGUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDefaultMonitor<Impl: IVMRMonitorConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pguid: *mut VMRGUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAvailableMonitors<Impl: IVMRMonitorConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pinfo: *mut VMRMONITORINFO, dwmaxinfoarraysize: u32, pdwnumdevices: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetMonitor::<Impl, IMPL_OFFSET>, GetMonitor::<Impl, IMPL_OFFSET>, SetDefaultMonitor::<Impl, IMPL_OFFSET>, GetDefaultMonitor::<Impl, IMPL_OFFSET>, GetAvailableMonitors::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRMonitorConfig as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IVMRMonitorConfig9Impl: Sized {
    fn SetMonitor();
    fn GetMonitor();
    fn SetDefaultMonitor();
    fn GetDefaultMonitor();
    fn GetAvailableMonitors();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl IVMRMonitorConfig9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRMonitorConfig9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRMonitorConfig9Vtbl {
        unsafe extern "system" fn SetMonitor<Impl: IVMRMonitorConfig9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, udev: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMonitor<Impl: IVMRMonitorConfig9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pudev: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefaultMonitor<Impl: IVMRMonitorConfig9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, udev: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDefaultMonitor<Impl: IVMRMonitorConfig9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pudev: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAvailableMonitors<Impl: IVMRMonitorConfig9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pinfo: *mut VMR9MonitorInfo, dwmaxinfoarraysize: u32, pdwnumdevices: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetMonitor::<Impl, IMPL_OFFSET>, GetMonitor::<Impl, IMPL_OFFSET>, SetDefaultMonitor::<Impl, IMPL_OFFSET>, GetDefaultMonitor::<Impl, IMPL_OFFSET>, GetAvailableMonitors::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRMonitorConfig9 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Graphics_DirectDraw")]
pub trait IVMRSurfaceImpl: Sized {
    fn IsSurfaceLocked();
    fn LockSurface();
    fn UnlockSurface();
    fn GetSurface();
}
#[cfg(feature = "Win32_Graphics_DirectDraw")]
impl IVMRSurfaceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRSurfaceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRSurfaceVtbl {
        unsafe extern "system" fn IsSurfaceLocked<Impl: IVMRSurfaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LockSurface<Impl: IVMRSurfaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpsurface: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnlockSurface<Impl: IVMRSurfaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSurface<Impl: IVMRSurfaceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lplpsurface: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, IsSurfaceLocked::<Impl, IMPL_OFFSET>, LockSurface::<Impl, IMPL_OFFSET>, UnlockSurface::<Impl, IMPL_OFFSET>, GetSurface::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRSurface as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
pub trait IVMRSurface9Impl: Sized {
    fn IsSurfaceLocked();
    fn LockSurface();
    fn UnlockSurface();
    fn GetSurface();
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl IVMRSurface9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRSurface9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRSurface9Vtbl {
        unsafe extern "system" fn IsSurfaceLocked<Impl: IVMRSurface9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LockSurface<Impl: IVMRSurface9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpsurface: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnlockSurface<Impl: IVMRSurface9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSurface<Impl: IVMRSurface9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lplpsurface: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, IsSurfaceLocked::<Impl, IMPL_OFFSET>, LockSurface::<Impl, IMPL_OFFSET>, UnlockSurface::<Impl, IMPL_OFFSET>, GetSurface::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRSurface9 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi"))]
pub trait IVMRSurfaceAllocatorImpl: Sized {
    fn AllocateSurface();
    fn FreeSurface();
    fn PrepareSurface();
    fn AdviseNotify();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi"))]
impl IVMRSurfaceAllocatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRSurfaceAllocatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRSurfaceAllocatorVtbl {
        unsafe extern "system" fn AllocateSurface<Impl: IVMRSurfaceAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwuserid: usize, lpallocinfo: *mut VMRALLOCATIONINFO, lpdwactualbuffers: *mut u32, lplpsurface: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FreeSurface<Impl: IVMRSurfaceAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwid: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PrepareSurface<Impl: IVMRSurfaceAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwuserid: usize, lpsurface: ::windows::core::RawPtr, dwsurfaceflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AdviseNotify<Impl: IVMRSurfaceAllocatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpivmrsurfallocnotify: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, AllocateSurface::<Impl, IMPL_OFFSET>, FreeSurface::<Impl, IMPL_OFFSET>, PrepareSurface::<Impl, IMPL_OFFSET>, AdviseNotify::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRSurfaceAllocator as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub trait IVMRSurfaceAllocator9Impl: Sized {
    fn InitializeDevice();
    fn TerminateDevice();
    fn GetSurface();
    fn AdviseNotify();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl IVMRSurfaceAllocator9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRSurfaceAllocator9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRSurfaceAllocator9Vtbl {
        unsafe extern "system" fn InitializeDevice<Impl: IVMRSurfaceAllocator9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwuserid: usize, lpallocinfo: *const VMR9AllocationInfo, lpnumbuffers: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateDevice<Impl: IVMRSurfaceAllocator9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwid: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSurface<Impl: IVMRSurfaceAllocator9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwuserid: usize, surfaceindex: u32, surfaceflags: u32, lplpsurface: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AdviseNotify<Impl: IVMRSurfaceAllocator9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpivmrsurfallocnotify: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, InitializeDevice::<Impl, IMPL_OFFSET>, TerminateDevice::<Impl, IMPL_OFFSET>, GetSurface::<Impl, IMPL_OFFSET>, AdviseNotify::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRSurfaceAllocator9 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub trait IVMRSurfaceAllocatorEx9Impl: Sized + IVMRSurfaceAllocator9Impl {
    fn GetSurfaceEx();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl IVMRSurfaceAllocatorEx9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRSurfaceAllocatorEx9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRSurfaceAllocatorEx9Vtbl {
        unsafe extern "system" fn GetSurfaceEx<Impl: IVMRSurfaceAllocatorEx9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwuserid: usize, surfaceindex: u32, surfaceflags: u32, lplpsurface: *mut ::windows::core::RawPtr, lprcdst: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, InitializeDevice::<Impl, IMPL_OFFSET>, TerminateDevice::<Impl, IMPL_OFFSET>, GetSurface::<Impl, IMPL_OFFSET>, AdviseNotify::<Impl, IMPL_OFFSET>, GetSurfaceEx::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRSurfaceAllocatorEx9 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi"))]
pub trait IVMRSurfaceAllocatorNotifyImpl: Sized {
    fn AdviseSurfaceAllocator();
    fn SetDDrawDevice();
    fn ChangeDDrawDevice();
    fn RestoreDDrawSurfaces();
    fn NotifyEvent();
    fn SetBorderColor();
}
#[cfg(all(feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi"))]
impl IVMRSurfaceAllocatorNotifyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRSurfaceAllocatorNotifyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRSurfaceAllocatorNotifyVtbl {
        unsafe extern "system" fn AdviseSurfaceAllocator<Impl: IVMRSurfaceAllocatorNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwuserid: usize, lpivrmsurfaceallocator: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDDrawDevice<Impl: IVMRSurfaceAllocatorNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpddrawdevice: ::windows::core::RawPtr, hmonitor: super::super::Graphics::Gdi::HMONITOR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeDDrawDevice<Impl: IVMRSurfaceAllocatorNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpddrawdevice: ::windows::core::RawPtr, hmonitor: super::super::Graphics::Gdi::HMONITOR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RestoreDDrawSurfaces<Impl: IVMRSurfaceAllocatorNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NotifyEvent<Impl: IVMRSurfaceAllocatorNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventcode: i32, param1: isize, param2: isize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBorderColor<Impl: IVMRSurfaceAllocatorNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clrborder: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, AdviseSurfaceAllocator::<Impl, IMPL_OFFSET>, SetDDrawDevice::<Impl, IMPL_OFFSET>, ChangeDDrawDevice::<Impl, IMPL_OFFSET>, RestoreDDrawSurfaces::<Impl, IMPL_OFFSET>, NotifyEvent::<Impl, IMPL_OFFSET>, SetBorderColor::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRSurfaceAllocatorNotify as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
pub trait IVMRSurfaceAllocatorNotify9Impl: Sized {
    fn AdviseSurfaceAllocator();
    fn SetD3DDevice();
    fn ChangeD3DDevice();
    fn AllocateSurfaceHelper();
    fn NotifyEvent();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
impl IVMRSurfaceAllocatorNotify9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRSurfaceAllocatorNotify9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRSurfaceAllocatorNotify9Vtbl {
        unsafe extern "system" fn AdviseSurfaceAllocator<Impl: IVMRSurfaceAllocatorNotify9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwuserid: usize, lpivrmsurfaceallocator: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetD3DDevice<Impl: IVMRSurfaceAllocatorNotify9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpd3ddevice: ::windows::core::RawPtr, hmonitor: super::super::Graphics::Gdi::HMONITOR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeD3DDevice<Impl: IVMRSurfaceAllocatorNotify9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpd3ddevice: ::windows::core::RawPtr, hmonitor: super::super::Graphics::Gdi::HMONITOR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AllocateSurfaceHelper<Impl: IVMRSurfaceAllocatorNotify9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpallocinfo: *const VMR9AllocationInfo, lpnumbuffers: *mut u32, lplpsurface: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NotifyEvent<Impl: IVMRSurfaceAllocatorNotify9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventcode: i32, param1: isize, param2: isize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, AdviseSurfaceAllocator::<Impl, IMPL_OFFSET>, SetD3DDevice::<Impl, IMPL_OFFSET>, ChangeD3DDevice::<Impl, IMPL_OFFSET>, AllocateSurfaceHelper::<Impl, IMPL_OFFSET>, NotifyEvent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRSurfaceAllocatorNotify9 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
pub trait IVMRVideoStreamControlImpl: Sized {
    fn SetColorKey();
    fn GetColorKey();
    fn SetStreamActiveState();
    fn GetStreamActiveState();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
impl IVMRVideoStreamControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRVideoStreamControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRVideoStreamControlVtbl {
        unsafe extern "system" fn SetColorKey<Impl: IVMRVideoStreamControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpclrkey: *mut super::super::Graphics::DirectDraw::DDCOLORKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetColorKey<Impl: IVMRVideoStreamControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpclrkey: *mut super::super::Graphics::DirectDraw::DDCOLORKEY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetStreamActiveState<Impl: IVMRVideoStreamControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, factive: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStreamActiveState<Impl: IVMRVideoStreamControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpfactive: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetColorKey::<Impl, IMPL_OFFSET>, GetColorKey::<Impl, IMPL_OFFSET>, SetStreamActiveState::<Impl, IMPL_OFFSET>, GetStreamActiveState::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRVideoStreamControl as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IVMRVideoStreamControl9Impl: Sized {
    fn SetStreamActiveState();
    fn GetStreamActiveState();
}
#[cfg(feature = "Win32_Foundation")]
impl IVMRVideoStreamControl9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRVideoStreamControl9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRVideoStreamControl9Vtbl {
        unsafe extern "system" fn SetStreamActiveState<Impl: IVMRVideoStreamControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, factive: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStreamActiveState<Impl: IVMRVideoStreamControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpfactive: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetStreamActiveState::<Impl, IMPL_OFFSET>, GetStreamActiveState::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRVideoStreamControl9 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IVMRWindowlessControlImpl: Sized {
    fn GetNativeVideoSize();
    fn GetMinIdealVideoSize();
    fn GetMaxIdealVideoSize();
    fn SetVideoPosition();
    fn GetVideoPosition();
    fn GetAspectRatioMode();
    fn SetAspectRatioMode();
    fn SetVideoClippingWindow();
    fn RepaintVideo();
    fn DisplayModeChanged();
    fn GetCurrentImage();
    fn SetBorderColor();
    fn GetBorderColor();
    fn SetColorKey();
    fn GetColorKey();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl IVMRWindowlessControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRWindowlessControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRWindowlessControlVtbl {
        unsafe extern "system" fn GetNativeVideoSize<Impl: IVMRWindowlessControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpwidth: *mut i32, lpheight: *mut i32, lparwidth: *mut i32, lparheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMinIdealVideoSize<Impl: IVMRWindowlessControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpwidth: *mut i32, lpheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMaxIdealVideoSize<Impl: IVMRWindowlessControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpwidth: *mut i32, lpheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetVideoPosition<Impl: IVMRWindowlessControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpsrcrect: *const super::super::Foundation::RECT, lpdstrect: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVideoPosition<Impl: IVMRWindowlessControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpsrcrect: *mut super::super::Foundation::RECT, lpdstrect: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAspectRatioMode<Impl: IVMRWindowlessControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpaspectratiomode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAspectRatioMode<Impl: IVMRWindowlessControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, aspectratiomode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetVideoClippingWindow<Impl: IVMRWindowlessControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RepaintVideo<Impl: IVMRWindowlessControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, hdc: super::super::Graphics::Gdi::HDC) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisplayModeChanged<Impl: IVMRWindowlessControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentImage<Impl: IVMRWindowlessControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpdib: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBorderColor<Impl: IVMRWindowlessControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clr: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBorderColor<Impl: IVMRWindowlessControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpclr: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetColorKey<Impl: IVMRWindowlessControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clr: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetColorKey<Impl: IVMRWindowlessControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpclr: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetNativeVideoSize::<Impl, IMPL_OFFSET>,
            GetMinIdealVideoSize::<Impl, IMPL_OFFSET>,
            GetMaxIdealVideoSize::<Impl, IMPL_OFFSET>,
            SetVideoPosition::<Impl, IMPL_OFFSET>,
            GetVideoPosition::<Impl, IMPL_OFFSET>,
            GetAspectRatioMode::<Impl, IMPL_OFFSET>,
            SetAspectRatioMode::<Impl, IMPL_OFFSET>,
            SetVideoClippingWindow::<Impl, IMPL_OFFSET>,
            RepaintVideo::<Impl, IMPL_OFFSET>,
            DisplayModeChanged::<Impl, IMPL_OFFSET>,
            GetCurrentImage::<Impl, IMPL_OFFSET>,
            SetBorderColor::<Impl, IMPL_OFFSET>,
            GetBorderColor::<Impl, IMPL_OFFSET>,
            SetColorKey::<Impl, IMPL_OFFSET>,
            GetColorKey::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRWindowlessControl as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IVMRWindowlessControl9Impl: Sized {
    fn GetNativeVideoSize();
    fn GetMinIdealVideoSize();
    fn GetMaxIdealVideoSize();
    fn SetVideoPosition();
    fn GetVideoPosition();
    fn GetAspectRatioMode();
    fn SetAspectRatioMode();
    fn SetVideoClippingWindow();
    fn RepaintVideo();
    fn DisplayModeChanged();
    fn GetCurrentImage();
    fn SetBorderColor();
    fn GetBorderColor();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl IVMRWindowlessControl9Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVMRWindowlessControl9Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVMRWindowlessControl9Vtbl {
        unsafe extern "system" fn GetNativeVideoSize<Impl: IVMRWindowlessControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpwidth: *mut i32, lpheight: *mut i32, lparwidth: *mut i32, lparheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMinIdealVideoSize<Impl: IVMRWindowlessControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpwidth: *mut i32, lpheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMaxIdealVideoSize<Impl: IVMRWindowlessControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpwidth: *mut i32, lpheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetVideoPosition<Impl: IVMRWindowlessControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpsrcrect: *const super::super::Foundation::RECT, lpdstrect: *const super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVideoPosition<Impl: IVMRWindowlessControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpsrcrect: *mut super::super::Foundation::RECT, lpdstrect: *mut super::super::Foundation::RECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAspectRatioMode<Impl: IVMRWindowlessControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpaspectratiomode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAspectRatioMode<Impl: IVMRWindowlessControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, aspectratiomode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetVideoClippingWindow<Impl: IVMRWindowlessControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RepaintVideo<Impl: IVMRWindowlessControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, hdc: super::super::Graphics::Gdi::HDC) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisplayModeChanged<Impl: IVMRWindowlessControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentImage<Impl: IVMRWindowlessControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpdib: *mut *mut u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBorderColor<Impl: IVMRWindowlessControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clr: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBorderColor<Impl: IVMRWindowlessControl9Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lpclr: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetNativeVideoSize::<Impl, IMPL_OFFSET>,
            GetMinIdealVideoSize::<Impl, IMPL_OFFSET>,
            GetMaxIdealVideoSize::<Impl, IMPL_OFFSET>,
            SetVideoPosition::<Impl, IMPL_OFFSET>,
            GetVideoPosition::<Impl, IMPL_OFFSET>,
            GetAspectRatioMode::<Impl, IMPL_OFFSET>,
            SetAspectRatioMode::<Impl, IMPL_OFFSET>,
            SetVideoClippingWindow::<Impl, IMPL_OFFSET>,
            RepaintVideo::<Impl, IMPL_OFFSET>,
            DisplayModeChanged::<Impl, IMPL_OFFSET>,
            GetCurrentImage::<Impl, IMPL_OFFSET>,
            SetBorderColor::<Impl, IMPL_OFFSET>,
            GetBorderColor::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVMRWindowlessControl9 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
pub trait IVPBaseConfigImpl: Sized {
    fn GetConnectInfo();
    fn SetConnectInfo();
    fn GetVPDataInfo();
    fn GetMaxPixelRate();
    fn InformVPInputFormats();
    fn GetVideoFormats();
    fn SetVideoFormat();
    fn SetInvertPolarity();
    fn GetOverlaySurface();
    fn SetDirectDrawKernelHandle();
    fn SetVideoPortID();
    fn SetDDSurfaceKernelHandles();
    fn SetSurfaceParameters();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
impl IVPBaseConfigVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVPBaseConfigImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVPBaseConfigVtbl {
        unsafe extern "system" fn GetConnectInfo<Impl: IVPBaseConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwnumconnectinfo: *mut u32, pddvpconnectinfo: *mut super::super::Graphics::DirectDraw::DDVIDEOPORTCONNECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetConnectInfo<Impl: IVPBaseConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwchosenentry: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVPDataInfo<Impl: IVPBaseConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pamvpdatainfo: *mut AMVPDATAINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMaxPixelRate<Impl: IVPBaseConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pamvpsize: *mut AMVPSIZE, pdwmaxpixelspersecond: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InformVPInputFormats<Impl: IVPBaseConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwnumformats: u32, pddpixelformats: *mut super::super::Graphics::DirectDraw::DDPIXELFORMAT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVideoFormats<Impl: IVPBaseConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwnumformats: *mut u32, pddpixelformats: *mut super::super::Graphics::DirectDraw::DDPIXELFORMAT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetVideoFormat<Impl: IVPBaseConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwchosenentry: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInvertPolarity<Impl: IVPBaseConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOverlaySurface<Impl: IVPBaseConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppddoverlaysurface: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDirectDrawKernelHandle<Impl: IVPBaseConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwddkernelhandle: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetVideoPortID<Impl: IVPBaseConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwvideoportid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDDSurfaceKernelHandles<Impl: IVPBaseConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, chandles: u32, rgddkernelhandles: *mut usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSurfaceParameters<Impl: IVPBaseConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwpitch: u32, dwxorigin: u32, dwyorigin: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetConnectInfo::<Impl, IMPL_OFFSET>,
            SetConnectInfo::<Impl, IMPL_OFFSET>,
            GetVPDataInfo::<Impl, IMPL_OFFSET>,
            GetMaxPixelRate::<Impl, IMPL_OFFSET>,
            InformVPInputFormats::<Impl, IMPL_OFFSET>,
            GetVideoFormats::<Impl, IMPL_OFFSET>,
            SetVideoFormat::<Impl, IMPL_OFFSET>,
            SetInvertPolarity::<Impl, IMPL_OFFSET>,
            GetOverlaySurface::<Impl, IMPL_OFFSET>,
            SetDirectDrawKernelHandle::<Impl, IMPL_OFFSET>,
            SetVideoPortID::<Impl, IMPL_OFFSET>,
            SetDDSurfaceKernelHandles::<Impl, IMPL_OFFSET>,
            SetSurfaceParameters::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVPBaseConfig as ::windows::core::Interface>::IID
    }
}
pub trait IVPBaseNotifyImpl: Sized {
    fn RenegotiateVPParameters();
}
impl IVPBaseNotifyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVPBaseNotifyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVPBaseNotifyVtbl {
        unsafe extern "system" fn RenegotiateVPParameters<Impl: IVPBaseNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, RenegotiateVPParameters::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVPBaseNotify as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
pub trait IVPConfigImpl: Sized + IVPBaseConfigImpl {
    fn IsVPDecimationAllowed();
    fn SetScalingFactors();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
impl IVPConfigVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVPConfigImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVPConfigVtbl {
        unsafe extern "system" fn IsVPDecimationAllowed<Impl: IVPConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbisdecimationallowed: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScalingFactors<Impl: IVPConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pamvpsize: *mut AMVPSIZE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetConnectInfo::<Impl, IMPL_OFFSET>,
            SetConnectInfo::<Impl, IMPL_OFFSET>,
            GetVPDataInfo::<Impl, IMPL_OFFSET>,
            GetMaxPixelRate::<Impl, IMPL_OFFSET>,
            InformVPInputFormats::<Impl, IMPL_OFFSET>,
            GetVideoFormats::<Impl, IMPL_OFFSET>,
            SetVideoFormat::<Impl, IMPL_OFFSET>,
            SetInvertPolarity::<Impl, IMPL_OFFSET>,
            GetOverlaySurface::<Impl, IMPL_OFFSET>,
            SetDirectDrawKernelHandle::<Impl, IMPL_OFFSET>,
            SetVideoPortID::<Impl, IMPL_OFFSET>,
            SetDDSurfaceKernelHandles::<Impl, IMPL_OFFSET>,
            SetSurfaceParameters::<Impl, IMPL_OFFSET>,
            IsVPDecimationAllowed::<Impl, IMPL_OFFSET>,
            SetScalingFactors::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVPConfig as ::windows::core::Interface>::IID
    }
}
pub trait IVPManagerImpl: Sized {
    fn SetVideoPortIndex();
    fn GetVideoPortIndex();
}
impl IVPManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVPManagerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVPManagerVtbl {
        unsafe extern "system" fn SetVideoPortIndex<Impl: IVPManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwvideoportindex: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVideoPortIndex<Impl: IVPManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwvideoportindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetVideoPortIndex::<Impl, IMPL_OFFSET>, GetVideoPortIndex::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVPManager as ::windows::core::Interface>::IID
    }
}
pub trait IVPNotifyImpl: Sized + IVPBaseNotifyImpl {
    fn SetDeinterlaceMode();
    fn GetDeinterlaceMode();
}
impl IVPNotifyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVPNotifyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVPNotifyVtbl {
        unsafe extern "system" fn SetDeinterlaceMode<Impl: IVPNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mode: AMVP_MODE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDeinterlaceMode<Impl: IVPNotifyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmode: *mut AMVP_MODE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, RenegotiateVPParameters::<Impl, IMPL_OFFSET>, SetDeinterlaceMode::<Impl, IMPL_OFFSET>, GetDeinterlaceMode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVPNotify as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IVPNotify2Impl: Sized + IVPNotifyImpl + IVPBaseNotifyImpl {
    fn SetVPSyncMaster();
    fn GetVPSyncMaster();
}
#[cfg(feature = "Win32_Foundation")]
impl IVPNotify2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVPNotify2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVPNotify2Vtbl {
        unsafe extern "system" fn SetVPSyncMaster<Impl: IVPNotify2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bvpsyncmaster: super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVPSyncMaster<Impl: IVPNotify2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbvpsyncmaster: *mut super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, RenegotiateVPParameters::<Impl, IMPL_OFFSET>, SetDeinterlaceMode::<Impl, IMPL_OFFSET>, GetDeinterlaceMode::<Impl, IMPL_OFFSET>, SetVPSyncMaster::<Impl, IMPL_OFFSET>, GetVPSyncMaster::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVPNotify2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
pub trait IVPVBIConfigImpl: Sized + IVPBaseConfigImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw"))]
impl IVPVBIConfigVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVPVBIConfigImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVPVBIConfigVtbl {
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetConnectInfo::<Impl, IMPL_OFFSET>,
            SetConnectInfo::<Impl, IMPL_OFFSET>,
            GetVPDataInfo::<Impl, IMPL_OFFSET>,
            GetMaxPixelRate::<Impl, IMPL_OFFSET>,
            InformVPInputFormats::<Impl, IMPL_OFFSET>,
            GetVideoFormats::<Impl, IMPL_OFFSET>,
            SetVideoFormat::<Impl, IMPL_OFFSET>,
            SetInvertPolarity::<Impl, IMPL_OFFSET>,
            GetOverlaySurface::<Impl, IMPL_OFFSET>,
            SetDirectDrawKernelHandle::<Impl, IMPL_OFFSET>,
            SetVideoPortID::<Impl, IMPL_OFFSET>,
            SetDDSurfaceKernelHandles::<Impl, IMPL_OFFSET>,
            SetSurfaceParameters::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVPVBIConfig as ::windows::core::Interface>::IID
    }
}
pub trait IVPVBINotifyImpl: Sized + IVPBaseNotifyImpl {}
impl IVPVBINotifyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVPVBINotifyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVPVBINotifyVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, RenegotiateVPParameters::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVPVBINotify as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IVideoEncoderImpl: Sized + IEncoderAPIImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IVideoEncoderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVideoEncoderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVideoEncoderVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, IsSupported::<Impl, IMPL_OFFSET>, IsAvailable::<Impl, IMPL_OFFSET>, GetParameterRange::<Impl, IMPL_OFFSET>, GetParameterValues::<Impl, IMPL_OFFSET>, GetDefaultValue::<Impl, IMPL_OFFSET>, GetValue::<Impl, IMPL_OFFSET>, SetValue::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVideoEncoder as ::windows::core::Interface>::IID
    }
}
pub trait IVideoFrameStepImpl: Sized {
    fn Step();
    fn CanStep();
    fn CancelStep();
}
impl IVideoFrameStepVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVideoFrameStepImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVideoFrameStepVtbl {
        unsafe extern "system" fn Step<Impl: IVideoFrameStepImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwframes: u32, pstepobject: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CanStep<Impl: IVideoFrameStepImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bmultiple: i32, pstepobject: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CancelStep<Impl: IVideoFrameStepImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Step::<Impl, IMPL_OFFSET>, CanStep::<Impl, IMPL_OFFSET>, CancelStep::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVideoFrameStep as ::windows::core::Interface>::IID
    }
}
pub trait IVideoProcAmpImpl: Sized {
    fn BacklightCompensation();
    fn SetBacklightCompensation();
    fn getRange_BacklightCompensation();
    fn Brightness();
    fn SetBrightness();
    fn getRange_Brightness();
    fn ColorEnable();
    fn SetColorEnable();
    fn getRange_ColorEnable();
    fn Contrast();
    fn SetContrast();
    fn getRange_Contrast();
    fn Gamma();
    fn SetGamma();
    fn getRange_Gamma();
    fn Saturation();
    fn SetSaturation();
    fn getRange_Saturation();
    fn Sharpness();
    fn SetSharpness();
    fn getRange_Sharpness();
    fn WhiteBalance();
    fn SetWhiteBalance();
    fn getRange_WhiteBalance();
    fn Gain();
    fn SetGain();
    fn getRange_Gain();
    fn Hue();
    fn SetHue();
    fn getRange_Hue();
    fn DigitalMultiplier();
    fn SetDigitalMultiplier();
    fn getRange_DigitalMultiplier();
    fn PowerlineFrequency();
    fn SetPowerlineFrequency();
    fn getRange_PowerlineFrequency();
    fn WhiteBalanceComponent();
    fn SetWhiteBalanceComponent();
    fn getRange_WhiteBalanceComponent();
}
impl IVideoProcAmpVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVideoProcAmpImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVideoProcAmpVtbl {
        unsafe extern "system" fn BacklightCompensation<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBacklightCompensation<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_BacklightCompensation<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Brightness<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBrightness<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_Brightness<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ColorEnable<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetColorEnable<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_ColorEnable<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Contrast<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetContrast<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_Contrast<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Gamma<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetGamma<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_Gamma<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Saturation<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSaturation<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_Saturation<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Sharpness<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSharpness<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_Sharpness<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WhiteBalance<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetWhiteBalance<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_WhiteBalance<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Gain<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetGain<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_Gain<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Hue<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetHue<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_Hue<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DigitalMultiplier<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDigitalMultiplier<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_DigitalMultiplier<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PowerlineFrequency<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPowerlineFrequency<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_PowerlineFrequency<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WhiteBalanceComponent<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvalue1: *mut i32, pvalue2: *mut i32, pflags: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetWhiteBalanceComponent<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value1: i32, value2: i32, flags: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn getRange_WhiteBalanceComponent<Impl: IVideoProcAmpImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmin: *mut i32, pmax: *mut i32, psteppingdelta: *mut i32, pdefault: *mut i32, pcapsflag: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            BacklightCompensation::<Impl, IMPL_OFFSET>,
            SetBacklightCompensation::<Impl, IMPL_OFFSET>,
            getRange_BacklightCompensation::<Impl, IMPL_OFFSET>,
            Brightness::<Impl, IMPL_OFFSET>,
            SetBrightness::<Impl, IMPL_OFFSET>,
            getRange_Brightness::<Impl, IMPL_OFFSET>,
            ColorEnable::<Impl, IMPL_OFFSET>,
            SetColorEnable::<Impl, IMPL_OFFSET>,
            getRange_ColorEnable::<Impl, IMPL_OFFSET>,
            Contrast::<Impl, IMPL_OFFSET>,
            SetContrast::<Impl, IMPL_OFFSET>,
            getRange_Contrast::<Impl, IMPL_OFFSET>,
            Gamma::<Impl, IMPL_OFFSET>,
            SetGamma::<Impl, IMPL_OFFSET>,
            getRange_Gamma::<Impl, IMPL_OFFSET>,
            Saturation::<Impl, IMPL_OFFSET>,
            SetSaturation::<Impl, IMPL_OFFSET>,
            getRange_Saturation::<Impl, IMPL_OFFSET>,
            Sharpness::<Impl, IMPL_OFFSET>,
            SetSharpness::<Impl, IMPL_OFFSET>,
            getRange_Sharpness::<Impl, IMPL_OFFSET>,
            WhiteBalance::<Impl, IMPL_OFFSET>,
            SetWhiteBalance::<Impl, IMPL_OFFSET>,
            getRange_WhiteBalance::<Impl, IMPL_OFFSET>,
            Gain::<Impl, IMPL_OFFSET>,
            SetGain::<Impl, IMPL_OFFSET>,
            getRange_Gain::<Impl, IMPL_OFFSET>,
            Hue::<Impl, IMPL_OFFSET>,
            SetHue::<Impl, IMPL_OFFSET>,
            getRange_Hue::<Impl, IMPL_OFFSET>,
            DigitalMultiplier::<Impl, IMPL_OFFSET>,
            SetDigitalMultiplier::<Impl, IMPL_OFFSET>,
            getRange_DigitalMultiplier::<Impl, IMPL_OFFSET>,
            PowerlineFrequency::<Impl, IMPL_OFFSET>,
            SetPowerlineFrequency::<Impl, IMPL_OFFSET>,
            getRange_PowerlineFrequency::<Impl, IMPL_OFFSET>,
            WhiteBalanceComponent::<Impl, IMPL_OFFSET>,
            SetWhiteBalanceComponent::<Impl, IMPL_OFFSET>,
            getRange_WhiteBalanceComponent::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVideoProcAmp as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IVideoWindowImpl: Sized + IDispatchImpl {
    fn SetCaption();
    fn Caption();
    fn SetWindowStyle();
    fn WindowStyle();
    fn SetWindowStyleEx();
    fn WindowStyleEx();
    fn SetAutoShow();
    fn AutoShow();
    fn SetWindowState();
    fn WindowState();
    fn SetBackgroundPalette();
    fn BackgroundPalette();
    fn SetVisible();
    fn Visible();
    fn SetLeft();
    fn Left();
    fn SetWidth();
    fn Width();
    fn SetTop();
    fn Top();
    fn SetHeight();
    fn Height();
    fn SetOwner();
    fn Owner();
    fn SetMessageDrain();
    fn MessageDrain();
    fn BorderColor();
    fn SetBorderColor();
    fn FullScreenMode();
    fn SetFullScreenMode();
    fn SetWindowForeground();
    fn NotifyOwnerMessage();
    fn SetWindowPosition();
    fn GetWindowPosition();
    fn GetMinIdealImageSize();
    fn GetMaxIdealImageSize();
    fn GetRestorePosition();
    fn HideCursor();
    fn IsCursorHidden();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IVideoWindowVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IVideoWindowImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IVideoWindowVtbl {
        unsafe extern "system" fn SetCaption<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strcaption: ::core::mem::ManuallyDrop<super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Caption<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, strcaption: *mut super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetWindowStyle<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, windowstyle: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WindowStyle<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, windowstyle: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetWindowStyleEx<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, windowstyleex: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WindowStyleEx<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, windowstyleex: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAutoShow<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, autoshow: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AutoShow<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, autoshow: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetWindowState<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, windowstate: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WindowState<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, windowstate: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBackgroundPalette<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, backgroundpalette: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BackgroundPalette<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbackgroundpalette: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetVisible<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, visible: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Visible<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvisible: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLeft<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, left: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Left<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pleft: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetWidth<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, width: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Width<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwidth: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTop<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, top: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Top<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptop: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetHeight<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, height: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Height<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOwner<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, owner: isize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Owner<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, owner: *mut isize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMessageDrain<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, drain: isize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MessageDrain<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, drain: *mut isize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BorderColor<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, color: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBorderColor<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, color: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FullScreenMode<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fullscreenmode: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFullScreenMode<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fullscreenmode: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetWindowForeground<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, focus: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NotifyOwnerMessage<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hwnd: isize, umsg: i32, wparam: isize, lparam: isize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetWindowPosition<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, left: i32, top: i32, width: i32, height: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindowPosition<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pleft: *mut i32, ptop: *mut i32, pwidth: *mut i32, pheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMinIdealImageSize<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwidth: *mut i32, pheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMaxIdealImageSize<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwidth: *mut i32, pheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRestorePosition<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pleft: *mut i32, ptop: *mut i32, pwidth: *mut i32, pheight: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HideCursor<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hidecursor: OA_BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsCursorHidden<Impl: IVideoWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cursorhidden: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetTypeInfoCount::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetIDsOfNames::<Impl, IMPL_OFFSET>,
            Invoke::<Impl, IMPL_OFFSET>,
            SetCaption::<Impl, IMPL_OFFSET>,
            Caption::<Impl, IMPL_OFFSET>,
            SetWindowStyle::<Impl, IMPL_OFFSET>,
            WindowStyle::<Impl, IMPL_OFFSET>,
            SetWindowStyleEx::<Impl, IMPL_OFFSET>,
            WindowStyleEx::<Impl, IMPL_OFFSET>,
            SetAutoShow::<Impl, IMPL_OFFSET>,
            AutoShow::<Impl, IMPL_OFFSET>,
            SetWindowState::<Impl, IMPL_OFFSET>,
            WindowState::<Impl, IMPL_OFFSET>,
            SetBackgroundPalette::<Impl, IMPL_OFFSET>,
            BackgroundPalette::<Impl, IMPL_OFFSET>,
            SetVisible::<Impl, IMPL_OFFSET>,
            Visible::<Impl, IMPL_OFFSET>,
            SetLeft::<Impl, IMPL_OFFSET>,
            Left::<Impl, IMPL_OFFSET>,
            SetWidth::<Impl, IMPL_OFFSET>,
            Width::<Impl, IMPL_OFFSET>,
            SetTop::<Impl, IMPL_OFFSET>,
            Top::<Impl, IMPL_OFFSET>,
            SetHeight::<Impl, IMPL_OFFSET>,
            Height::<Impl, IMPL_OFFSET>,
            SetOwner::<Impl, IMPL_OFFSET>,
            Owner::<Impl, IMPL_OFFSET>,
            SetMessageDrain::<Impl, IMPL_OFFSET>,
            MessageDrain::<Impl, IMPL_OFFSET>,
            BorderColor::<Impl, IMPL_OFFSET>,
            SetBorderColor::<Impl, IMPL_OFFSET>,
            FullScreenMode::<Impl, IMPL_OFFSET>,
            SetFullScreenMode::<Impl, IMPL_OFFSET>,
            SetWindowForeground::<Impl, IMPL_OFFSET>,
            NotifyOwnerMessage::<Impl, IMPL_OFFSET>,
            SetWindowPosition::<Impl, IMPL_OFFSET>,
            GetWindowPosition::<Impl, IMPL_OFFSET>,
            GetMinIdealImageSize::<Impl, IMPL_OFFSET>,
            GetMaxIdealImageSize::<Impl, IMPL_OFFSET>,
            GetRestorePosition::<Impl, IMPL_OFFSET>,
            HideCursor::<Impl, IMPL_OFFSET>,
            IsCursorHidden::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IVideoWindow as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IXDSCodecImpl: Sized {
    fn XDSToRatObjOK();
    fn SetCCSubstreamService();
    fn CCSubstreamService();
    fn GetContentAdvisoryRating();
    fn GetXDSPacket();
    fn GetCurrLicenseExpDate();
    fn GetLastErrorCode();
}
#[cfg(feature = "Win32_Foundation")]
impl IXDSCodecVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IXDSCodecImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IXDSCodecVtbl {
        unsafe extern "system" fn XDSToRatObjOK<Impl: IXDSCodecImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phrcocreateretval: *mut ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCCSubstreamService<Impl: IXDSCodecImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, substreammask: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CCSubstreamService<Impl: IXDSCodecImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psubstreammask: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContentAdvisoryRating<Impl: IXDSCodecImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prat: *mut i32, ppktseqid: *mut i32, pcallseqid: *mut i32, ptimestart: *mut i64, ptimeend: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetXDSPacket<Impl: IXDSCodecImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pxdsclasspkt: *mut i32, pxdstypepkt: *mut i32, pbstrxdspkt: *mut super::super::Foundation::BSTR, ppktseqid: *mut i32, pcallseqid: *mut i32, ptimestart: *mut i64, ptimeend: *mut i64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrLicenseExpDate<Impl: IXDSCodecImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prottype: *const ProtType, lpdatetime: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastErrorCode<Impl: IXDSCodecImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, XDSToRatObjOK::<Impl, IMPL_OFFSET>, SetCCSubstreamService::<Impl, IMPL_OFFSET>, CCSubstreamService::<Impl, IMPL_OFFSET>, GetContentAdvisoryRating::<Impl, IMPL_OFFSET>, GetXDSPacket::<Impl, IMPL_OFFSET>, GetCurrLicenseExpDate::<Impl, IMPL_OFFSET>, GetLastErrorCode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IXDSCodec as ::windows::core::Interface>::IID
    }
}
pub trait IXDSCodecConfigImpl: Sized {
    fn GetSecureChannelObject();
    fn SetPauseBufferTime();
}
impl IXDSCodecConfigVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IXDSCodecConfigImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IXDSCodecConfigVtbl {
        unsafe extern "system" fn GetSecureChannelObject<Impl: IXDSCodecConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunkdrmsecurechannel: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPauseBufferTime<Impl: IXDSCodecConfigImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwpausebuffertime: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetSecureChannelObject::<Impl, IMPL_OFFSET>, SetPauseBufferTime::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IXDSCodecConfig as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IXDSCodecEventsImpl: Sized + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IXDSCodecEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IXDSCodecEventsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IXDSCodecEventsVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IXDSCodecEvents as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IXDSToRatImpl: Sized + IDispatchImpl {
    fn Init();
    fn ParseXDSBytePair();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IXDSToRatVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IXDSToRatImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IXDSToRatVtbl {
        unsafe extern "system" fn Init<Impl: IXDSToRatImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ParseXDSBytePair<Impl: IXDSToRatImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, byte1: u8, byte2: u8, pensystem: *mut EnTvRat_System, penlevel: *mut EnTvRat_GenericLevel, plbfenattributes: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>, Init::<Impl, IMPL_OFFSET>, ParseXDSBytePair::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IXDSToRat as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait _IMSVidCtlEventsImpl: Sized + IDispatchImpl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl _IMSVidCtlEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: _IMSVidCtlEventsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> _IMSVidCtlEventsVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTypeInfoCount::<Impl, IMPL_OFFSET>, GetTypeInfo::<Impl, IMPL_OFFSET>, GetIDsOfNames::<Impl, IMPL_OFFSET>, Invoke::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<_IMSVidCtlEvents as ::windows::core::Interface>::IID
    }
}
