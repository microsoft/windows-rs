#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IATSCChannelTuneRequest(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IATSCChannelTuneRequest {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuningSpace(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.base__.TuningSpace)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Components(&self) -> ::windows::core::Result<IComponents> {
        let mut result__ = ::windows::core::zeroed::<IComponents>();
        (::windows::core::Interface::vtable(self).base__.base__.Components)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Locator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.Locator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetLocator<P0>(&self, locator: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetLocator)(::windows::core::Interface::as_raw(self), locator.into_param().abi()).ok()
    }
    pub unsafe fn Channel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.Channel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetChannel(&self, channel: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetChannel)(::windows::core::Interface::as_raw(self), channel).ok()
    }
    pub unsafe fn MinorChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MinorChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMinorChannel(&self, minorchannel: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMinorChannel)(::windows::core::Interface::as_raw(self), minorchannel).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IATSCChannelTuneRequest, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuneRequest, IChannelTuneRequest);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IATSCChannelTuneRequest {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IATSCChannelTuneRequest {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IATSCChannelTuneRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IATSCChannelTuneRequest").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IATSCChannelTuneRequest {
    type Vtable = IATSCChannelTuneRequest_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IATSCChannelTuneRequest {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IATSCChannelTuneRequest {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0369b4e1_45b6_11d3_b650_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IATSCChannelTuneRequest_Vtbl {
    pub base__: IChannelTuneRequest_Vtbl,
    pub MinorChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, minorchannel: *mut i32) -> ::windows::core::HRESULT,
    pub SetMinorChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, minorchannel: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IATSCComponentType(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IATSCComponentType {
    pub unsafe fn Category(&self) -> ::windows::core::Result<super::ComponentCategory> {
        let mut result__ = ::windows::core::zeroed::<super::ComponentCategory>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCategory(&self, category: super::ComponentCategory) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetCategory)(::windows::core::Interface::as_raw(self), category).ok()
    }
    pub unsafe fn MediaMajorType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.MediaMajorType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMediaMajorType<P0>(&self, mediamajortype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetMediaMajorType)(::windows::core::Interface::as_raw(self), mediamajortype.into_param().abi()).ok()
    }
    pub unsafe fn _MediaMajorType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._MediaMajorType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_MediaMajorType(&self, mediamajortypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.Set_MediaMajorType)(::windows::core::Interface::as_raw(self), mediamajortypeguid).ok()
    }
    pub unsafe fn MediaSubType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.MediaSubType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMediaSubType<P0>(&self, mediasubtype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetMediaSubType)(::windows::core::Interface::as_raw(self), mediasubtype.into_param().abi()).ok()
    }
    pub unsafe fn _MediaSubType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._MediaSubType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_MediaSubType(&self, mediasubtypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.Set_MediaSubType)(::windows::core::Interface::as_raw(self), mediasubtypeguid).ok()
    }
    pub unsafe fn MediaFormatType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.MediaFormatType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMediaFormatType<P0>(&self, mediaformattype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetMediaFormatType)(::windows::core::Interface::as_raw(self), mediaformattype.into_param().abi()).ok()
    }
    pub unsafe fn _MediaFormatType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._MediaFormatType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_MediaFormatType(&self, mediaformattypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.Set_MediaFormatType)(::windows::core::Interface::as_raw(self), mediaformattypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub unsafe fn MediaType(&self) -> ::windows::core::Result<super::super::MediaFoundation::AM_MEDIA_TYPE> {
        let mut result__ = ::windows::core::zeroed::<super::super::MediaFoundation::AM_MEDIA_TYPE>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.MediaType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub unsafe fn SetMediaType(&self, mediatype: *const super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetMediaType)(::windows::core::Interface::as_raw(self), mediatype).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IComponentType> {
        let mut result__ = ::windows::core::zeroed::<IComponentType>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn LangID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.LangID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetLangID(&self, langid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetLangID)(::windows::core::Interface::as_raw(self), langid).ok()
    }
    pub unsafe fn StreamType(&self) -> ::windows::core::Result<super::MPEG2StreamType> {
        let mut result__ = ::windows::core::zeroed::<super::MPEG2StreamType>();
        (::windows::core::Interface::vtable(self).base__.StreamType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetStreamType(&self, mp2streamtype: super::MPEG2StreamType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetStreamType)(::windows::core::Interface::as_raw(self), mp2streamtype).ok()
    }
    pub unsafe fn Flags(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Flags)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFlags(&self, flags: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetFlags)(::windows::core::Interface::as_raw(self), flags).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IATSCComponentType, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IComponentType, ILanguageComponentType, IMPEG2ComponentType);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IATSCComponentType {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IATSCComponentType {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IATSCComponentType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IATSCComponentType").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IATSCComponentType {
    type Vtable = IATSCComponentType_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IATSCComponentType {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IATSCComponentType {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xfc189e4d_7bd4_4125_b3b3_3a76a332cc96);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IATSCComponentType_Vtbl {
    pub base__: IMPEG2ComponentType_Vtbl,
    pub Flags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, flags: *mut i32) -> ::windows::core::HRESULT,
    pub SetFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, flags: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IATSCLocator(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IATSCLocator {
    pub unsafe fn CarrierFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.CarrierFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCarrierFrequency(&self, frequency: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetCarrierFrequency)(::windows::core::Interface::as_raw(self), frequency).ok()
    }
    pub unsafe fn InnerFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.InnerFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetInnerFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn InnerFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.InnerFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetInnerFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.OuterFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetOuterFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.OuterFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetOuterFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn Modulation(&self) -> ::windows::core::Result<super::ModulationType> {
        let mut result__ = ::windows::core::zeroed::<super::ModulationType>();
        (::windows::core::Interface::vtable(self).base__.base__.Modulation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetModulation(&self, modulation: super::ModulationType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetModulation)(::windows::core::Interface::as_raw(self), modulation).ok()
    }
    pub unsafe fn SymbolRate(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.SymbolRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSymbolRate(&self, rate: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetSymbolRate)(::windows::core::Interface::as_raw(self), rate).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn PhysicalChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).PhysicalChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPhysicalChannel(&self, physicalchannel: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPhysicalChannel)(::windows::core::Interface::as_raw(self), physicalchannel).ok()
    }
    pub unsafe fn TSID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).TSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetTSID(&self, tsid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetTSID)(::windows::core::Interface::as_raw(self), tsid).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IATSCLocator, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ILocator, IDigitalLocator);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IATSCLocator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IATSCLocator {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IATSCLocator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IATSCLocator").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IATSCLocator {
    type Vtable = IATSCLocator_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IATSCLocator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IATSCLocator {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xbf8d986f_8c2b_4131_94d7_4d3d9fcc21ef);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IATSCLocator_Vtbl {
    pub base__: IDigitalLocator_Vtbl,
    pub PhysicalChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, physicalchannel: *mut i32) -> ::windows::core::HRESULT,
    pub SetPhysicalChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, physicalchannel: i32) -> ::windows::core::HRESULT,
    pub TSID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tsid: *mut i32) -> ::windows::core::HRESULT,
    pub SetTSID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tsid: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IATSCLocator2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IATSCLocator2 {
    pub unsafe fn CarrierFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.CarrierFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCarrierFrequency(&self, frequency: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetCarrierFrequency)(::windows::core::Interface::as_raw(self), frequency).ok()
    }
    pub unsafe fn InnerFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.InnerFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetInnerFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn InnerFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.InnerFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetInnerFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.OuterFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetOuterFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.OuterFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetOuterFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn Modulation(&self) -> ::windows::core::Result<super::ModulationType> {
        let mut result__ = ::windows::core::zeroed::<super::ModulationType>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Modulation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetModulation(&self, modulation: super::ModulationType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetModulation)(::windows::core::Interface::as_raw(self), modulation).ok()
    }
    pub unsafe fn SymbolRate(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.SymbolRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSymbolRate(&self, rate: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetSymbolRate)(::windows::core::Interface::as_raw(self), rate).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn PhysicalChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.PhysicalChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPhysicalChannel(&self, physicalchannel: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetPhysicalChannel)(::windows::core::Interface::as_raw(self), physicalchannel).ok()
    }
    pub unsafe fn TSID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.TSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetTSID(&self, tsid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetTSID)(::windows::core::Interface::as_raw(self), tsid).ok()
    }
    pub unsafe fn ProgramNumber(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).ProgramNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetProgramNumber(&self, programnumber: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetProgramNumber)(::windows::core::Interface::as_raw(self), programnumber).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IATSCLocator2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ILocator, IDigitalLocator, IATSCLocator);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IATSCLocator2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IATSCLocator2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IATSCLocator2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IATSCLocator2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IATSCLocator2 {
    type Vtable = IATSCLocator2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IATSCLocator2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IATSCLocator2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x612aa885_66cf_4090_ba0a_566f5312e4ca);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IATSCLocator2_Vtbl {
    pub base__: IATSCLocator_Vtbl,
    pub ProgramNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, programnumber: *mut i32) -> ::windows::core::HRESULT,
    pub SetProgramNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, programnumber: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IATSCTuningSpace(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IATSCTuningSpace {
    pub unsafe fn UniqueName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.UniqueName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetUniqueName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetUniqueName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn FriendlyName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.FriendlyName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFriendlyName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetFriendlyName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn CLSID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.CLSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn NetworkType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetNetworkType<P0>(&self, networktypeguid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetNetworkType)(::windows::core::Interface::as_raw(self), networktypeguid.into_param().abi()).ok()
    }
    pub unsafe fn _NetworkType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_NetworkType(&self, networktypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Set_NetworkType)(::windows::core::Interface::as_raw(self), networktypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateTuneRequest(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.base__.CreateTuneRequest)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumCategoryGUIDs(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumGUID> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumGUID>();
        (::windows::core::Interface::vtable(self).base__.base__.EnumCategoryGUIDs)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumDeviceMonikers(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumMoniker> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumMoniker>();
        (::windows::core::Interface::vtable(self).base__.base__.EnumDeviceMonikers)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultPreferredComponentTypes(&self) -> ::windows::core::Result<IComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IComponentTypes>();
        (::windows::core::Interface::vtable(self).base__.base__.DefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultPreferredComponentTypes<P0>(&self, newcomponenttypes: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentTypes>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetDefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), newcomponenttypes.into_param().abi()).ok()
    }
    pub unsafe fn FrequencyMapping(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.FrequencyMapping)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFrequencyMapping<P0>(&self, mapping: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetFrequencyMapping)(::windows::core::Interface::as_raw(self), mapping.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultLocator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.DefaultLocator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultLocator<P0>(&self, locatorval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetDefaultLocator)(::windows::core::Interface::as_raw(self), locatorval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn MinChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.MinChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMinChannel(&self, newminchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMinChannel)(::windows::core::Interface::as_raw(self), newminchannelval).ok()
    }
    pub unsafe fn MaxChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.MaxChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMaxChannel(&self, newmaxchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMaxChannel)(::windows::core::Interface::as_raw(self), newmaxchannelval).ok()
    }
    pub unsafe fn InputType(&self) -> ::windows::core::Result<super::TunerInputType> {
        let mut result__ = ::windows::core::zeroed::<super::TunerInputType>();
        (::windows::core::Interface::vtable(self).base__.InputType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInputType(&self, newinputtypeval: super::TunerInputType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetInputType)(::windows::core::Interface::as_raw(self), newinputtypeval).ok()
    }
    pub unsafe fn CountryCode(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.CountryCode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCountryCode(&self, newcountrycodeval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCountryCode)(::windows::core::Interface::as_raw(self), newcountrycodeval).ok()
    }
    pub unsafe fn MinMinorChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MinMinorChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMinMinorChannel(&self, newminminorchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMinMinorChannel)(::windows::core::Interface::as_raw(self), newminminorchannelval).ok()
    }
    pub unsafe fn MaxMinorChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MaxMinorChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMaxMinorChannel(&self, newmaxminorchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMaxMinorChannel)(::windows::core::Interface::as_raw(self), newmaxminorchannelval).ok()
    }
    pub unsafe fn MinPhysicalChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MinPhysicalChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMinPhysicalChannel(&self, newminphysicalchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMinPhysicalChannel)(::windows::core::Interface::as_raw(self), newminphysicalchannelval).ok()
    }
    pub unsafe fn MaxPhysicalChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MaxPhysicalChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMaxPhysicalChannel(&self, newmaxphysicalchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMaxPhysicalChannel)(::windows::core::Interface::as_raw(self), newmaxphysicalchannelval).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IATSCTuningSpace, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuningSpace, IAnalogTVTuningSpace);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IATSCTuningSpace {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IATSCTuningSpace {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IATSCTuningSpace {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IATSCTuningSpace").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IATSCTuningSpace {
    type Vtable = IATSCTuningSpace_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IATSCTuningSpace {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IATSCTuningSpace {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0369b4e2_45b6_11d3_b650_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IATSCTuningSpace_Vtbl {
    pub base__: IAnalogTVTuningSpace_Vtbl,
    pub MinMinorChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, minminorchannelval: *mut i32) -> ::windows::core::HRESULT,
    pub SetMinMinorChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newminminorchannelval: i32) -> ::windows::core::HRESULT,
    pub MaxMinorChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, maxminorchannelval: *mut i32) -> ::windows::core::HRESULT,
    pub SetMaxMinorChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newmaxminorchannelval: i32) -> ::windows::core::HRESULT,
    pub MinPhysicalChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, minphysicalchannelval: *mut i32) -> ::windows::core::HRESULT,
    pub SetMinPhysicalChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newminphysicalchannelval: i32) -> ::windows::core::HRESULT,
    pub MaxPhysicalChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, maxphysicalchannelval: *mut i32) -> ::windows::core::HRESULT,
    pub SetMaxPhysicalChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newmaxphysicalchannelval: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IATSC_EIT(::windows::core::IUnknown);
impl IATSC_EIT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSourceId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetSourceId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetProtocolVersion(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetProtocolVersion)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordEventId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordEventId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordStartTime(&self, dwrecordindex: u32) -> ::windows::core::Result<MPEG_DATE_AND_TIME> {
        let mut result__ = ::windows::core::zeroed::<MPEG_DATE_AND_TIME>();
        (::windows::core::Interface::vtable(self).GetRecordStartTime)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordEtmLocation(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordEtmLocation)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDuration(&self, dwrecordindex: u32) -> ::windows::core::Result<MPEG_TIME> {
        let mut result__ = ::windows::core::zeroed::<MPEG_TIME>();
        (::windows::core::Interface::vtable(self).GetRecordDuration)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordTitleText(&self, dwrecordindex: u32, pdwlength: *mut u32, pptext: *mut *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordTitleText)(::windows::core::Interface::as_raw(self), dwrecordindex, pdwlength, pptext).ok()
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, pdwcookie, ::core::mem::transmute(ppdescriptor)).ok()
    }
}
::windows::imp::interface_hierarchy!(IATSC_EIT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IATSC_EIT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IATSC_EIT {}
impl ::core::fmt::Debug for IATSC_EIT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IATSC_EIT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IATSC_EIT {
    type Vtable = IATSC_EIT_Vtbl;
}
impl ::core::clone::Clone for IATSC_EIT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IATSC_EIT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd7c212d7_76a2_4b4b_aa56_846879a80096);
}
#[repr(C)]
#[doc(hidden)]
pub struct IATSC_EIT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetSourceId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetProtocolVersion: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordEventId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordStartTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT,
    pub GetRecordEtmLocation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordDuration: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdval: *mut MPEG_TIME) -> ::windows::core::HRESULT,
    pub GetRecordTitleText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwlength: *mut u32, pptext: *mut *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordCountOfDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IATSC_ETT(::windows::core::IUnknown);
impl IATSC_ETT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetProtocolVersion(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetProtocolVersion)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEtmId(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetEtmId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetExtendedMessageText(&self, pdwlength: *mut u32, pptext: *mut *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetExtendedMessageText)(::windows::core::Interface::as_raw(self), pdwlength, pptext).ok()
    }
}
::windows::imp::interface_hierarchy!(IATSC_ETT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IATSC_ETT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IATSC_ETT {}
impl ::core::fmt::Debug for IATSC_ETT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IATSC_ETT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IATSC_ETT {
    type Vtable = IATSC_ETT_Vtbl;
}
impl ::core::clone::Clone for IATSC_ETT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IATSC_ETT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5a142cc9_b8cf_4a86_a040_e9cadf3ef3e7);
}
#[repr(C)]
#[doc(hidden)]
pub struct IATSC_ETT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetProtocolVersion: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetEtmId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetExtendedMessageText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwlength: *mut u32, pptext: *mut *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IATSC_MGT(::windows::core::IUnknown);
impl IATSC_MGT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetProtocolVersion(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetProtocolVersion)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordType(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordType)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordTypePid(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordTypePid)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordVersionNumber(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordVersionNumber)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, pdwcookie, ::core::mem::transmute(ppdescriptor)).ok()
    }
    pub unsafe fn GetCountOfTableDescriptors(&self, pdwval: *const u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetCountOfTableDescriptors)(::windows::core::Interface::as_raw(self), pdwval).ok()
    }
    pub unsafe fn GetTableDescriptorByIndex(&self, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetTableDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByTag(&self, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableDescriptorByTag)(::windows::core::Interface::as_raw(self), btag, pdwcookie, ::core::mem::transmute(ppdescriptor)).ok()
    }
}
::windows::imp::interface_hierarchy!(IATSC_MGT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IATSC_MGT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IATSC_MGT {}
impl ::core::fmt::Debug for IATSC_MGT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IATSC_MGT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IATSC_MGT {
    type Vtable = IATSC_MGT_Vtbl;
}
impl ::core::clone::Clone for IATSC_MGT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IATSC_MGT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8877dabd_c137_4073_97e3_779407a5d87a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IATSC_MGT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetProtocolVersion: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordTypePid: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, ppidval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordCountOfDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetCountOfTableDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *const u32) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IATSC_STT(::windows::core::IUnknown);
impl IATSC_STT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetProtocolVersion(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetProtocolVersion)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSystemTime(&self) -> ::windows::core::Result<MPEG_DATE_AND_TIME> {
        let mut result__ = ::windows::core::zeroed::<MPEG_DATE_AND_TIME>();
        (::windows::core::Interface::vtable(self).GetSystemTime)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetGpsUtcOffset(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetGpsUtcOffset)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDaylightSavings(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetDaylightSavings)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfTableDescriptors(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfTableDescriptors)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByIndex(&self, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetTableDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByTag(&self, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableDescriptorByTag)(::windows::core::Interface::as_raw(self), btag, pdwcookie, ::core::mem::transmute(ppdescriptor)).ok()
    }
}
::windows::imp::interface_hierarchy!(IATSC_STT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IATSC_STT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IATSC_STT {}
impl ::core::fmt::Debug for IATSC_STT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IATSC_STT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IATSC_STT {
    type Vtable = IATSC_STT_Vtbl;
}
impl ::core::clone::Clone for IATSC_STT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IATSC_STT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6bf42423_217d_4d6f_81e1_3a7b360ec896);
}
#[repr(C)]
#[doc(hidden)]
pub struct IATSC_STT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetProtocolVersion: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetSystemTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmdtsystemtime: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT,
    pub GetGpsUtcOffset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetDaylightSavings: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetCountOfTableDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IATSC_VCT(::windows::core::IUnknown);
impl IATSC_VCT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTransportStreamId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetTransportStreamId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetProtocolVersion(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetProtocolVersion)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordName(&self, dwrecordindex: u32) -> ::windows::core::Result<::windows::core::PWSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::PWSTR>();
        (::windows::core::Interface::vtable(self).GetRecordName)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordMajorChannelNumber(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordMajorChannelNumber)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordMinorChannelNumber(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordMinorChannelNumber)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordModulationMode(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordModulationMode)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCarrierFrequency(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCarrierFrequency)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordTransportStreamId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordTransportStreamId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordProgramNumber(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordProgramNumber)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordEtmLocation(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordEtmLocation)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordIsAccessControlledBitSet(&self, dwrecordindex: u32) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).GetRecordIsAccessControlledBitSet)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordIsHiddenBitSet(&self, dwrecordindex: u32) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).GetRecordIsHiddenBitSet)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordIsPathSelectBitSet(&self, dwrecordindex: u32) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).GetRecordIsPathSelectBitSet)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordIsOutOfBandBitSet(&self, dwrecordindex: u32) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).GetRecordIsOutOfBandBitSet)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordIsHideGuideBitSet(&self, dwrecordindex: u32) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).GetRecordIsHideGuideBitSet)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordServiceType(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordServiceType)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordSourceId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordSourceId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, pdwcookie, ::core::mem::transmute(ppdescriptor)).ok()
    }
    pub unsafe fn GetCountOfTableDescriptors(&self, pdwval: *const u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetCountOfTableDescriptors)(::windows::core::Interface::as_raw(self), pdwval).ok()
    }
    pub unsafe fn GetTableDescriptorByIndex(&self, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetTableDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByTag(&self, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableDescriptorByTag)(::windows::core::Interface::as_raw(self), btag, pdwcookie, ::core::mem::transmute(ppdescriptor)).ok()
    }
}
::windows::imp::interface_hierarchy!(IATSC_VCT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IATSC_VCT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IATSC_VCT {}
impl ::core::fmt::Debug for IATSC_VCT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IATSC_VCT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IATSC_VCT {
    type Vtable = IATSC_VCT_Vtbl;
}
impl ::core::clone::Clone for IATSC_VCT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IATSC_VCT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x26879a18_32f9_46c6_91f0_fb6479270e8c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IATSC_VCT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetTransportStreamId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetProtocolVersion: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwsname: *mut ::windows::core::PWSTR) -> ::windows::core::HRESULT,
    pub GetRecordMajorChannelNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordMinorChannelNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordModulationMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordCarrierFrequency: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordTransportStreamId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordProgramNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordEtmLocation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetRecordIsAccessControlledBitSet: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetRecordIsAccessControlledBitSet: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetRecordIsHiddenBitSet: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetRecordIsHiddenBitSet: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetRecordIsPathSelectBitSet: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetRecordIsPathSelectBitSet: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetRecordIsOutOfBandBitSet: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetRecordIsOutOfBandBitSet: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetRecordIsHideGuideBitSet: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetRecordIsHideGuideBitSet: usize,
    pub GetRecordServiceType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordSourceId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordCountOfDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetCountOfTableDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *const u32) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IAnalogAudioComponentType(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IAnalogAudioComponentType {
    pub unsafe fn Category(&self) -> ::windows::core::Result<super::ComponentCategory> {
        let mut result__ = ::windows::core::zeroed::<super::ComponentCategory>();
        (::windows::core::Interface::vtable(self).base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCategory(&self, category: super::ComponentCategory) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCategory)(::windows::core::Interface::as_raw(self), category).ok()
    }
    pub unsafe fn MediaMajorType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.MediaMajorType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMediaMajorType<P0>(&self, mediamajortype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetMediaMajorType)(::windows::core::Interface::as_raw(self), mediamajortype.into_param().abi()).ok()
    }
    pub unsafe fn _MediaMajorType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._MediaMajorType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_MediaMajorType(&self, mediamajortypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_MediaMajorType)(::windows::core::Interface::as_raw(self), mediamajortypeguid).ok()
    }
    pub unsafe fn MediaSubType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.MediaSubType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMediaSubType<P0>(&self, mediasubtype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetMediaSubType)(::windows::core::Interface::as_raw(self), mediasubtype.into_param().abi()).ok()
    }
    pub unsafe fn _MediaSubType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._MediaSubType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_MediaSubType(&self, mediasubtypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_MediaSubType)(::windows::core::Interface::as_raw(self), mediasubtypeguid).ok()
    }
    pub unsafe fn MediaFormatType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.MediaFormatType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMediaFormatType<P0>(&self, mediaformattype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetMediaFormatType)(::windows::core::Interface::as_raw(self), mediaformattype.into_param().abi()).ok()
    }
    pub unsafe fn _MediaFormatType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._MediaFormatType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_MediaFormatType(&self, mediaformattypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_MediaFormatType)(::windows::core::Interface::as_raw(self), mediaformattypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub unsafe fn MediaType(&self) -> ::windows::core::Result<super::super::MediaFoundation::AM_MEDIA_TYPE> {
        let mut result__ = ::windows::core::zeroed::<super::super::MediaFoundation::AM_MEDIA_TYPE>();
        (::windows::core::Interface::vtable(self).base__.MediaType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub unsafe fn SetMediaType(&self, mediatype: *const super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMediaType)(::windows::core::Interface::as_raw(self), mediatype).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IComponentType> {
        let mut result__ = ::windows::core::zeroed::<IComponentType>();
        (::windows::core::Interface::vtable(self).base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AnalogAudioMode(&self) -> ::windows::core::Result<super::TVAudioMode> {
        let mut result__ = ::windows::core::zeroed::<super::TVAudioMode>();
        (::windows::core::Interface::vtable(self).AnalogAudioMode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetAnalogAudioMode(&self, mode: super::TVAudioMode) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetAnalogAudioMode)(::windows::core::Interface::as_raw(self), mode).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IAnalogAudioComponentType, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IComponentType);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IAnalogAudioComponentType {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IAnalogAudioComponentType {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IAnalogAudioComponentType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAnalogAudioComponentType").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IAnalogAudioComponentType {
    type Vtable = IAnalogAudioComponentType_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IAnalogAudioComponentType {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IAnalogAudioComponentType {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2cfeb2a8_1787_4a24_a941_c6eaec39c842);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IAnalogAudioComponentType_Vtbl {
    pub base__: IComponentType_Vtbl,
    pub AnalogAudioMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mode: *mut super::TVAudioMode) -> ::windows::core::HRESULT,
    pub SetAnalogAudioMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mode: super::TVAudioMode) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IAnalogLocator(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IAnalogLocator {
    pub unsafe fn CarrierFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.CarrierFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCarrierFrequency(&self, frequency: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCarrierFrequency)(::windows::core::Interface::as_raw(self), frequency).ok()
    }
    pub unsafe fn InnerFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.InnerFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetInnerFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn InnerFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.InnerFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetInnerFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.OuterFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetOuterFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.OuterFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetOuterFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn Modulation(&self) -> ::windows::core::Result<super::ModulationType> {
        let mut result__ = ::windows::core::zeroed::<super::ModulationType>();
        (::windows::core::Interface::vtable(self).base__.Modulation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetModulation(&self, modulation: super::ModulationType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetModulation)(::windows::core::Interface::as_raw(self), modulation).ok()
    }
    pub unsafe fn SymbolRate(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.SymbolRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSymbolRate(&self, rate: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetSymbolRate)(::windows::core::Interface::as_raw(self), rate).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn VideoStandard(&self) -> ::windows::core::Result<super::AnalogVideoStandard> {
        let mut result__ = ::windows::core::zeroed::<super::AnalogVideoStandard>();
        (::windows::core::Interface::vtable(self).VideoStandard)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetVideoStandard(&self, avs: super::AnalogVideoStandard) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetVideoStandard)(::windows::core::Interface::as_raw(self), avs).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IAnalogLocator, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ILocator);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IAnalogLocator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IAnalogLocator {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IAnalogLocator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAnalogLocator").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IAnalogLocator {
    type Vtable = IAnalogLocator_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IAnalogLocator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IAnalogLocator {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x34d1f26b_e339_430d_abce_738cb48984dc);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IAnalogLocator_Vtbl {
    pub base__: ILocator_Vtbl,
    pub VideoStandard: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, avs: *mut super::AnalogVideoStandard) -> ::windows::core::HRESULT,
    pub SetVideoStandard: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, avs: super::AnalogVideoStandard) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IAnalogRadioTuningSpace(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IAnalogRadioTuningSpace {
    pub unsafe fn UniqueName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.UniqueName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetUniqueName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetUniqueName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn FriendlyName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.FriendlyName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFriendlyName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetFriendlyName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn CLSID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.CLSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn NetworkType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetNetworkType<P0>(&self, networktypeguid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetNetworkType)(::windows::core::Interface::as_raw(self), networktypeguid.into_param().abi()).ok()
    }
    pub unsafe fn _NetworkType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_NetworkType(&self, networktypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_NetworkType)(::windows::core::Interface::as_raw(self), networktypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateTuneRequest(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.CreateTuneRequest)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumCategoryGUIDs(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumGUID> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumGUID>();
        (::windows::core::Interface::vtable(self).base__.EnumCategoryGUIDs)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumDeviceMonikers(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumMoniker> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumMoniker>();
        (::windows::core::Interface::vtable(self).base__.EnumDeviceMonikers)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultPreferredComponentTypes(&self) -> ::windows::core::Result<IComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IComponentTypes>();
        (::windows::core::Interface::vtable(self).base__.DefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultPreferredComponentTypes<P0>(&self, newcomponenttypes: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentTypes>,
    {
        (::windows::core::Interface::vtable(self).base__.SetDefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), newcomponenttypes.into_param().abi()).ok()
    }
    pub unsafe fn FrequencyMapping(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.FrequencyMapping)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFrequencyMapping<P0>(&self, mapping: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetFrequencyMapping)(::windows::core::Interface::as_raw(self), mapping.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultLocator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.DefaultLocator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultLocator<P0>(&self, locatorval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.SetDefaultLocator)(::windows::core::Interface::as_raw(self), locatorval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn MinFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MinFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMinFrequency(&self, newminfrequencyval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMinFrequency)(::windows::core::Interface::as_raw(self), newminfrequencyval).ok()
    }
    pub unsafe fn MaxFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MaxFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMaxFrequency(&self, newmaxfrequencyval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMaxFrequency)(::windows::core::Interface::as_raw(self), newmaxfrequencyval).ok()
    }
    pub unsafe fn Step(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Step)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetStep(&self, newstepval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetStep)(::windows::core::Interface::as_raw(self), newstepval).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IAnalogRadioTuningSpace, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuningSpace);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IAnalogRadioTuningSpace {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IAnalogRadioTuningSpace {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IAnalogRadioTuningSpace {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAnalogRadioTuningSpace").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IAnalogRadioTuningSpace {
    type Vtable = IAnalogRadioTuningSpace_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IAnalogRadioTuningSpace {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IAnalogRadioTuningSpace {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2a6e293b_2595_11d3_b64c_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IAnalogRadioTuningSpace_Vtbl {
    pub base__: ITuningSpace_Vtbl,
    pub MinFrequency: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, minfrequencyval: *mut i32) -> ::windows::core::HRESULT,
    pub SetMinFrequency: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newminfrequencyval: i32) -> ::windows::core::HRESULT,
    pub MaxFrequency: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, maxfrequencyval: *mut i32) -> ::windows::core::HRESULT,
    pub SetMaxFrequency: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newmaxfrequencyval: i32) -> ::windows::core::HRESULT,
    pub Step: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, stepval: *mut i32) -> ::windows::core::HRESULT,
    pub SetStep: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newstepval: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IAnalogRadioTuningSpace2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IAnalogRadioTuningSpace2 {
    pub unsafe fn UniqueName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.UniqueName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetUniqueName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetUniqueName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn FriendlyName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.FriendlyName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFriendlyName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetFriendlyName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn CLSID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.CLSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn NetworkType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetNetworkType<P0>(&self, networktypeguid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetNetworkType)(::windows::core::Interface::as_raw(self), networktypeguid.into_param().abi()).ok()
    }
    pub unsafe fn _NetworkType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_NetworkType(&self, networktypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Set_NetworkType)(::windows::core::Interface::as_raw(self), networktypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateTuneRequest(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.base__.CreateTuneRequest)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumCategoryGUIDs(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumGUID> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumGUID>();
        (::windows::core::Interface::vtable(self).base__.base__.EnumCategoryGUIDs)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumDeviceMonikers(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumMoniker> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumMoniker>();
        (::windows::core::Interface::vtable(self).base__.base__.EnumDeviceMonikers)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultPreferredComponentTypes(&self) -> ::windows::core::Result<IComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IComponentTypes>();
        (::windows::core::Interface::vtable(self).base__.base__.DefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultPreferredComponentTypes<P0>(&self, newcomponenttypes: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentTypes>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetDefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), newcomponenttypes.into_param().abi()).ok()
    }
    pub unsafe fn FrequencyMapping(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.FrequencyMapping)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFrequencyMapping<P0>(&self, mapping: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetFrequencyMapping)(::windows::core::Interface::as_raw(self), mapping.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultLocator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.DefaultLocator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultLocator<P0>(&self, locatorval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetDefaultLocator)(::windows::core::Interface::as_raw(self), locatorval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn MinFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.MinFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMinFrequency(&self, newminfrequencyval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMinFrequency)(::windows::core::Interface::as_raw(self), newminfrequencyval).ok()
    }
    pub unsafe fn MaxFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.MaxFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMaxFrequency(&self, newmaxfrequencyval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMaxFrequency)(::windows::core::Interface::as_raw(self), newmaxfrequencyval).ok()
    }
    pub unsafe fn Step(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.Step)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetStep(&self, newstepval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetStep)(::windows::core::Interface::as_raw(self), newstepval).ok()
    }
    pub unsafe fn CountryCode(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CountryCode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCountryCode(&self, newcountrycodeval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetCountryCode)(::windows::core::Interface::as_raw(self), newcountrycodeval).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IAnalogRadioTuningSpace2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuningSpace, IAnalogRadioTuningSpace);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IAnalogRadioTuningSpace2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IAnalogRadioTuningSpace2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IAnalogRadioTuningSpace2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAnalogRadioTuningSpace2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IAnalogRadioTuningSpace2 {
    type Vtable = IAnalogRadioTuningSpace2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IAnalogRadioTuningSpace2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IAnalogRadioTuningSpace2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x39dd45da_2da8_46ba_8a8a_87e2b73d983a);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IAnalogRadioTuningSpace2_Vtbl {
    pub base__: IAnalogRadioTuningSpace_Vtbl,
    pub CountryCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, countrycodeval: *mut i32) -> ::windows::core::HRESULT,
    pub SetCountryCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newcountrycodeval: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IAnalogTVTuningSpace(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IAnalogTVTuningSpace {
    pub unsafe fn UniqueName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.UniqueName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetUniqueName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetUniqueName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn FriendlyName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.FriendlyName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFriendlyName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetFriendlyName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn CLSID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.CLSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn NetworkType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetNetworkType<P0>(&self, networktypeguid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetNetworkType)(::windows::core::Interface::as_raw(self), networktypeguid.into_param().abi()).ok()
    }
    pub unsafe fn _NetworkType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_NetworkType(&self, networktypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_NetworkType)(::windows::core::Interface::as_raw(self), networktypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateTuneRequest(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.CreateTuneRequest)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumCategoryGUIDs(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumGUID> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumGUID>();
        (::windows::core::Interface::vtable(self).base__.EnumCategoryGUIDs)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumDeviceMonikers(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumMoniker> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumMoniker>();
        (::windows::core::Interface::vtable(self).base__.EnumDeviceMonikers)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultPreferredComponentTypes(&self) -> ::windows::core::Result<IComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IComponentTypes>();
        (::windows::core::Interface::vtable(self).base__.DefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultPreferredComponentTypes<P0>(&self, newcomponenttypes: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentTypes>,
    {
        (::windows::core::Interface::vtable(self).base__.SetDefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), newcomponenttypes.into_param().abi()).ok()
    }
    pub unsafe fn FrequencyMapping(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.FrequencyMapping)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFrequencyMapping<P0>(&self, mapping: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetFrequencyMapping)(::windows::core::Interface::as_raw(self), mapping.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultLocator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.DefaultLocator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultLocator<P0>(&self, locatorval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.SetDefaultLocator)(::windows::core::Interface::as_raw(self), locatorval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn MinChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MinChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMinChannel(&self, newminchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMinChannel)(::windows::core::Interface::as_raw(self), newminchannelval).ok()
    }
    pub unsafe fn MaxChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MaxChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMaxChannel(&self, newmaxchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMaxChannel)(::windows::core::Interface::as_raw(self), newmaxchannelval).ok()
    }
    pub unsafe fn InputType(&self) -> ::windows::core::Result<super::TunerInputType> {
        let mut result__ = ::windows::core::zeroed::<super::TunerInputType>();
        (::windows::core::Interface::vtable(self).InputType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInputType(&self, newinputtypeval: super::TunerInputType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetInputType)(::windows::core::Interface::as_raw(self), newinputtypeval).ok()
    }
    pub unsafe fn CountryCode(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CountryCode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCountryCode(&self, newcountrycodeval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetCountryCode)(::windows::core::Interface::as_raw(self), newcountrycodeval).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IAnalogTVTuningSpace, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuningSpace);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IAnalogTVTuningSpace {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IAnalogTVTuningSpace {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IAnalogTVTuningSpace {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAnalogTVTuningSpace").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IAnalogTVTuningSpace {
    type Vtable = IAnalogTVTuningSpace_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IAnalogTVTuningSpace {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IAnalogTVTuningSpace {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2a6e293c_2595_11d3_b64c_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IAnalogTVTuningSpace_Vtbl {
    pub base__: ITuningSpace_Vtbl,
    pub MinChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, minchannelval: *mut i32) -> ::windows::core::HRESULT,
    pub SetMinChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newminchannelval: i32) -> ::windows::core::HRESULT,
    pub MaxChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, maxchannelval: *mut i32) -> ::windows::core::HRESULT,
    pub SetMaxChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newmaxchannelval: i32) -> ::windows::core::HRESULT,
    pub InputType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, inputtypeval: *mut super::TunerInputType) -> ::windows::core::HRESULT,
    pub SetInputType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newinputtypeval: super::TunerInputType) -> ::windows::core::HRESULT,
    pub CountryCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, countrycodeval: *mut i32) -> ::windows::core::HRESULT,
    pub SetCountryCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newcountrycodeval: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IAtscContentAdvisoryDescriptor(::windows::core::IUnknown);
impl IAtscContentAdvisoryDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRatingRegionCount(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRatingRegionCount)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordRatingRegion(&self, bindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordRatingRegion)(::windows::core::Interface::as_raw(self), bindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordRatedDimensions(&self, bindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordRatedDimensions)(::windows::core::Interface::as_raw(self), bindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordRatingDimension(&self, bindexouter: u8, bindexinner: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordRatingDimension)(::windows::core::Interface::as_raw(self), bindexouter, bindexinner, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordRatingValue(&self, bindexouter: u8, bindexinner: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordRatingValue)(::windows::core::Interface::as_raw(self), bindexouter, bindexinner, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordRatingDescriptionText(&self, bindex: u8, pblength: *mut u8, pptext: *mut *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordRatingDescriptionText)(::windows::core::Interface::as_raw(self), bindex, pblength, pptext).ok()
    }
}
::windows::imp::interface_hierarchy!(IAtscContentAdvisoryDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IAtscContentAdvisoryDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAtscContentAdvisoryDescriptor {}
impl ::core::fmt::Debug for IAtscContentAdvisoryDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAtscContentAdvisoryDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IAtscContentAdvisoryDescriptor {
    type Vtable = IAtscContentAdvisoryDescriptor_Vtbl;
}
impl ::core::clone::Clone for IAtscContentAdvisoryDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IAtscContentAdvisoryDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xff76e60c_0283_43ea_ba32_b422238547ee);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAtscContentAdvisoryDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRatingRegionCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordRatingRegion: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordRatedDimensions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordRatingDimension: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bindexouter: u8, bindexinner: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordRatingValue: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bindexouter: u8, bindexinner: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordRatingDescriptionText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bindex: u8, pblength: *mut u8, pptext: *mut *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IAtscPsipParser(::windows::core::IUnknown);
impl IAtscPsipParser {
    pub unsafe fn Initialize<P0>(&self, punkmpeg2data: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::IUnknown>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), punkmpeg2data.into_param().abi()).ok()
    }
    pub unsafe fn GetPAT(&self) -> ::windows::core::Result<IPAT> {
        let mut result__ = ::windows::core::zeroed::<IPAT>();
        (::windows::core::Interface::vtable(self).GetPAT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCAT(&self, dwtimeout: u32) -> ::windows::core::Result<ICAT> {
        let mut result__ = ::windows::core::zeroed::<ICAT>();
        (::windows::core::Interface::vtable(self).GetCAT)(::windows::core::Interface::as_raw(self), dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPMT(&self, pid: u16, pwprogramnumber: *const u16) -> ::windows::core::Result<IPMT> {
        let mut result__ = ::windows::core::zeroed::<IPMT>();
        (::windows::core::Interface::vtable(self).GetPMT)(::windows::core::Interface::as_raw(self), pid, pwprogramnumber, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTSDT(&self) -> ::windows::core::Result<ITSDT> {
        let mut result__ = ::windows::core::zeroed::<ITSDT>();
        (::windows::core::Interface::vtable(self).GetTSDT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetMGT(&self) -> ::windows::core::Result<IATSC_MGT> {
        let mut result__ = ::windows::core::zeroed::<IATSC_MGT>();
        (::windows::core::Interface::vtable(self).GetMGT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetVCT<P0>(&self, tableid: u8, fgetnexttable: P0) -> ::windows::core::Result<IATSC_VCT>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::BOOL>,
    {
        let mut result__ = ::windows::core::zeroed::<IATSC_VCT>();
        (::windows::core::Interface::vtable(self).GetVCT)(::windows::core::Interface::as_raw(self), tableid, fgetnexttable.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEIT(&self, pid: u16, pwsourceid: *const u16, dwtimeout: u32) -> ::windows::core::Result<IATSC_EIT> {
        let mut result__ = ::windows::core::zeroed::<IATSC_EIT>();
        (::windows::core::Interface::vtable(self).GetEIT)(::windows::core::Interface::as_raw(self), pid, pwsourceid, dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetETT(&self, pid: u16, wsourceid: *const u16, pweventid: *const u16) -> ::windows::core::Result<IATSC_ETT> {
        let mut result__ = ::windows::core::zeroed::<IATSC_ETT>();
        (::windows::core::Interface::vtable(self).GetETT)(::windows::core::Interface::as_raw(self), pid, wsourceid, pweventid, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSTT(&self) -> ::windows::core::Result<IATSC_STT> {
        let mut result__ = ::windows::core::zeroed::<IATSC_STT>();
        (::windows::core::Interface::vtable(self).GetSTT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEAS(&self, pid: u16) -> ::windows::core::Result<ISCTE_EAS> {
        let mut result__ = ::windows::core::zeroed::<ISCTE_EAS>();
        (::windows::core::Interface::vtable(self).GetEAS)(::windows::core::Interface::as_raw(self), pid, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IAtscPsipParser, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IAtscPsipParser {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAtscPsipParser {}
impl ::core::fmt::Debug for IAtscPsipParser {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAtscPsipParser").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IAtscPsipParser {
    type Vtable = IAtscPsipParser_Vtbl;
}
impl ::core::clone::Clone for IAtscPsipParser {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IAtscPsipParser {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb2c98995_5eb2_4fb1_b406_f3e8e2026a9a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAtscPsipParser_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkmpeg2data: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetPAT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pppat: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetCAT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppcat: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetPMT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pid: u16, pwprogramnumber: *const u16, pppmt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTSDT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pptsdt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetMGT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppmgt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetVCT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tableid: u8, fgetnexttable: super::super::super::Foundation::BOOL, ppvct: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetVCT: usize,
    pub GetEIT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pid: u16, pwsourceid: *const u16, dwtimeout: u32, ppeit: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetETT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pid: u16, wsourceid: *const u16, pweventid: *const u16, ppett: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetSTT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppstt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetEAS: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pid: u16, ppeas: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IAttributeGet(::windows::core::IUnknown);
impl IAttributeGet {
    pub unsafe fn GetCount(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).GetCount)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetAttribIndexed(&self, lindex: i32, pguidattribute: *mut ::windows::core::GUID, pbattribute: *mut u8, pdwattributelength: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetAttribIndexed)(::windows::core::Interface::as_raw(self), lindex, pguidattribute, pbattribute, pdwattributelength).ok()
    }
    pub unsafe fn GetAttrib(&self, guidattribute: ::windows::core::GUID, pbattribute: *mut u8, pdwattributelength: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetAttrib)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(guidattribute), pbattribute, pdwattributelength).ok()
    }
}
::windows::imp::interface_hierarchy!(IAttributeGet, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IAttributeGet {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAttributeGet {}
impl ::core::fmt::Debug for IAttributeGet {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAttributeGet").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IAttributeGet {
    type Vtable = IAttributeGet_Vtbl;
}
impl ::core::clone::Clone for IAttributeGet {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IAttributeGet {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x52dbd1ec_e48f_4528_9232_f442a68f0ae1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAttributeGet_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plcount: *mut i32) -> ::windows::core::HRESULT,
    pub GetAttribIndexed: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lindex: i32, pguidattribute: *mut ::windows::core::GUID, pbattribute: *mut u8, pdwattributelength: *mut u32) -> ::windows::core::HRESULT,
    pub GetAttrib: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guidattribute: ::windows::core::GUID, pbattribute: *mut u8, pdwattributelength: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IAttributeSet(::windows::core::IUnknown);
impl IAttributeSet {
    pub unsafe fn SetAttrib(&self, guidattribute: ::windows::core::GUID, pbattribute: *const u8, dwattributelength: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetAttrib)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(guidattribute), pbattribute, dwattributelength).ok()
    }
}
::windows::imp::interface_hierarchy!(IAttributeSet, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IAttributeSet {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAttributeSet {}
impl ::core::fmt::Debug for IAttributeSet {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAttributeSet").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IAttributeSet {
    type Vtable = IAttributeSet_Vtbl;
}
impl ::core::clone::Clone for IAttributeSet {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IAttributeSet {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x583ec3cc_4960_4857_982b_41a33ea0a006);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAttributeSet_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub SetAttrib: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guidattribute: ::windows::core::GUID, pbattribute: *const u8, dwattributelength: u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IAuxInTuningSpace(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IAuxInTuningSpace {
    pub unsafe fn UniqueName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.UniqueName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetUniqueName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetUniqueName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn FriendlyName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.FriendlyName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFriendlyName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetFriendlyName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn CLSID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.CLSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn NetworkType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetNetworkType<P0>(&self, networktypeguid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetNetworkType)(::windows::core::Interface::as_raw(self), networktypeguid.into_param().abi()).ok()
    }
    pub unsafe fn _NetworkType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_NetworkType(&self, networktypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_NetworkType)(::windows::core::Interface::as_raw(self), networktypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateTuneRequest(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.CreateTuneRequest)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumCategoryGUIDs(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumGUID> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumGUID>();
        (::windows::core::Interface::vtable(self).base__.EnumCategoryGUIDs)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumDeviceMonikers(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumMoniker> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumMoniker>();
        (::windows::core::Interface::vtable(self).base__.EnumDeviceMonikers)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultPreferredComponentTypes(&self) -> ::windows::core::Result<IComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IComponentTypes>();
        (::windows::core::Interface::vtable(self).base__.DefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultPreferredComponentTypes<P0>(&self, newcomponenttypes: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentTypes>,
    {
        (::windows::core::Interface::vtable(self).base__.SetDefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), newcomponenttypes.into_param().abi()).ok()
    }
    pub unsafe fn FrequencyMapping(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.FrequencyMapping)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFrequencyMapping<P0>(&self, mapping: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetFrequencyMapping)(::windows::core::Interface::as_raw(self), mapping.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultLocator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.DefaultLocator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultLocator<P0>(&self, locatorval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.SetDefaultLocator)(::windows::core::Interface::as_raw(self), locatorval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IAuxInTuningSpace, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuningSpace);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IAuxInTuningSpace {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IAuxInTuningSpace {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IAuxInTuningSpace {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAuxInTuningSpace").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IAuxInTuningSpace {
    type Vtable = IAuxInTuningSpace_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IAuxInTuningSpace {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IAuxInTuningSpace {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xe48244b8_7e17_4f76_a763_5090ff1e2f30);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IAuxInTuningSpace_Vtbl {
    pub base__: ITuningSpace_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IAuxInTuningSpace2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IAuxInTuningSpace2 {
    pub unsafe fn UniqueName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.UniqueName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetUniqueName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetUniqueName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn FriendlyName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.FriendlyName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFriendlyName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetFriendlyName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn CLSID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.CLSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn NetworkType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetNetworkType<P0>(&self, networktypeguid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetNetworkType)(::windows::core::Interface::as_raw(self), networktypeguid.into_param().abi()).ok()
    }
    pub unsafe fn _NetworkType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_NetworkType(&self, networktypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Set_NetworkType)(::windows::core::Interface::as_raw(self), networktypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateTuneRequest(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.base__.CreateTuneRequest)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumCategoryGUIDs(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumGUID> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumGUID>();
        (::windows::core::Interface::vtable(self).base__.base__.EnumCategoryGUIDs)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumDeviceMonikers(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumMoniker> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumMoniker>();
        (::windows::core::Interface::vtable(self).base__.base__.EnumDeviceMonikers)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultPreferredComponentTypes(&self) -> ::windows::core::Result<IComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IComponentTypes>();
        (::windows::core::Interface::vtable(self).base__.base__.DefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultPreferredComponentTypes<P0>(&self, newcomponenttypes: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentTypes>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetDefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), newcomponenttypes.into_param().abi()).ok()
    }
    pub unsafe fn FrequencyMapping(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.FrequencyMapping)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFrequencyMapping<P0>(&self, mapping: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetFrequencyMapping)(::windows::core::Interface::as_raw(self), mapping.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultLocator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.DefaultLocator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultLocator<P0>(&self, locatorval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetDefaultLocator)(::windows::core::Interface::as_raw(self), locatorval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CountryCode(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CountryCode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCountryCode(&self, newcountrycodeval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetCountryCode)(::windows::core::Interface::as_raw(self), newcountrycodeval).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IAuxInTuningSpace2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuningSpace, IAuxInTuningSpace);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IAuxInTuningSpace2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IAuxInTuningSpace2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IAuxInTuningSpace2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAuxInTuningSpace2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IAuxInTuningSpace2 {
    type Vtable = IAuxInTuningSpace2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IAuxInTuningSpace2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IAuxInTuningSpace2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb10931ed_8bfe_4ab0_9dce_e469c29a9729);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IAuxInTuningSpace2_Vtbl {
    pub base__: IAuxInTuningSpace_Vtbl,
    pub CountryCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, countrycodeval: *mut i32) -> ::windows::core::HRESULT,
    pub SetCountryCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newcountrycodeval: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IBDAComparable(::windows::core::IUnknown);
impl IBDAComparable {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CompareExact<P0>(&self, compareto: P0) -> ::windows::core::Result<i32>
    where
        P0: ::windows::core::IntoParam<super::super::super::System::Com::IDispatch>,
    {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CompareExact)(::windows::core::Interface::as_raw(self), compareto.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CompareEquivalent<P0>(&self, compareto: P0, dwflags: u32) -> ::windows::core::Result<i32>
    where
        P0: ::windows::core::IntoParam<super::super::super::System::Com::IDispatch>,
    {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CompareEquivalent)(::windows::core::Interface::as_raw(self), compareto.into_param().abi(), dwflags, &mut result__).from_abi(result__)
    }
    pub unsafe fn HashExact(&self) -> ::windows::core::Result<i64> {
        let mut result__ = ::windows::core::zeroed::<i64>();
        (::windows::core::Interface::vtable(self).HashExact)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn HashExactIncremental(&self, partialresult: i64) -> ::windows::core::Result<i64> {
        let mut result__ = ::windows::core::zeroed::<i64>();
        (::windows::core::Interface::vtable(self).HashExactIncremental)(::windows::core::Interface::as_raw(self), partialresult, &mut result__).from_abi(result__)
    }
    pub unsafe fn HashEquivalent(&self, dwflags: u32) -> ::windows::core::Result<i64> {
        let mut result__ = ::windows::core::zeroed::<i64>();
        (::windows::core::Interface::vtable(self).HashEquivalent)(::windows::core::Interface::as_raw(self), dwflags, &mut result__).from_abi(result__)
    }
    pub unsafe fn HashEquivalentIncremental(&self, partialresult: i64, dwflags: u32) -> ::windows::core::Result<i64> {
        let mut result__ = ::windows::core::zeroed::<i64>();
        (::windows::core::Interface::vtable(self).HashEquivalentIncremental)(::windows::core::Interface::as_raw(self), partialresult, dwflags, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IBDAComparable, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IBDAComparable {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IBDAComparable {}
impl ::core::fmt::Debug for IBDAComparable {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IBDAComparable").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IBDAComparable {
    type Vtable = IBDAComparable_Vtbl;
}
impl ::core::clone::Clone for IBDAComparable {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IBDAComparable {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb34505e0_2f0e_497b_80bc_d43f3b24ed7f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBDAComparable_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub CompareExact: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, compareto: *mut ::core::ffi::c_void, result: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    CompareExact: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub CompareEquivalent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, compareto: *mut ::core::ffi::c_void, dwflags: u32, result: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    CompareEquivalent: usize,
    pub HashExact: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, result: *mut i64) -> ::windows::core::HRESULT,
    pub HashExactIncremental: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, partialresult: i64, result: *mut i64) -> ::windows::core::HRESULT,
    pub HashEquivalent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, result: *mut i64) -> ::windows::core::HRESULT,
    pub HashEquivalentIncremental: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, partialresult: i64, dwflags: u32, result: *mut i64) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IBDACreateTuneRequestEx(::windows::core::IUnknown);
impl IBDACreateTuneRequestEx {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateTuneRequestEx(&self, tunerequestiid: *const ::windows::core::GUID) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).CreateTuneRequestEx)(::windows::core::Interface::as_raw(self), tunerequestiid, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IBDACreateTuneRequestEx, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IBDACreateTuneRequestEx {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IBDACreateTuneRequestEx {}
impl ::core::fmt::Debug for IBDACreateTuneRequestEx {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IBDACreateTuneRequestEx").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IBDACreateTuneRequestEx {
    type Vtable = IBDACreateTuneRequestEx_Vtbl;
}
impl ::core::clone::Clone for IBDACreateTuneRequestEx {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IBDACreateTuneRequestEx {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc0a4a1d4_2b3c_491a_ba22_499fbadd4d12);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBDACreateTuneRequestEx_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub CreateTuneRequestEx: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tunerequestiid: *const ::windows::core::GUID, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    CreateTuneRequestEx: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IBDA_TIF_REGISTRATION(::windows::core::IUnknown);
impl IBDA_TIF_REGISTRATION {
    pub unsafe fn RegisterTIFEx<P0>(&self, ptifinputpin: P0, ppvregistrationcontext: *mut u32, ppmpeg2datacontrol: *mut ::core::option::Option<::windows::core::IUnknown>) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::IPin>,
    {
        (::windows::core::Interface::vtable(self).RegisterTIFEx)(::windows::core::Interface::as_raw(self), ptifinputpin.into_param().abi(), ppvregistrationcontext, ::core::mem::transmute(ppmpeg2datacontrol)).ok()
    }
    pub unsafe fn UnregisterTIF(&self, pvregistrationcontext: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).UnregisterTIF)(::windows::core::Interface::as_raw(self), pvregistrationcontext).ok()
    }
}
::windows::imp::interface_hierarchy!(IBDA_TIF_REGISTRATION, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IBDA_TIF_REGISTRATION {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IBDA_TIF_REGISTRATION {}
impl ::core::fmt::Debug for IBDA_TIF_REGISTRATION {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IBDA_TIF_REGISTRATION").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IBDA_TIF_REGISTRATION {
    type Vtable = IBDA_TIF_REGISTRATION_Vtbl;
}
impl ::core::clone::Clone for IBDA_TIF_REGISTRATION {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IBDA_TIF_REGISTRATION {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xdfef4a68_ee61_415f_9ccb_cd95f2f98a3a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBDA_TIF_REGISTRATION_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub RegisterTIFEx: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ptifinputpin: *mut ::core::ffi::c_void, ppvregistrationcontext: *mut u32, ppmpeg2datacontrol: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub UnregisterTIF: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pvregistrationcontext: u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ICAT(::windows::core::IUnknown);
impl ICAT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfTableDescriptors(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfTableDescriptors)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByIndex(&self, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetTableDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByTag(&self, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableDescriptorByTag)(::windows::core::Interface::as_raw(self), btag, pdwcookie, ::core::mem::transmute(ppdescriptor)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForNextTable<P0>(&self, hnexttableavailable: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForNextTable)(::windows::core::Interface::as_raw(self), hnexttableavailable.into_param().abi()).ok()
    }
    pub unsafe fn GetNextTable(&self, dwtimeout: u32) -> ::windows::core::Result<ICAT> {
        let mut result__ = ::windows::core::zeroed::<ICAT>();
        (::windows::core::Interface::vtable(self).GetNextTable)(::windows::core::Interface::as_raw(self), dwtimeout, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForWhenCurrent<P0>(&self, hnexttableiscurrent: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForWhenCurrent)(::windows::core::Interface::as_raw(self), hnexttableiscurrent.into_param().abi()).ok()
    }
    pub unsafe fn ConvertNextToCurrent(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ConvertNextToCurrent)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(ICAT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ICAT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICAT {}
impl ::core::fmt::Debug for ICAT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICAT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ICAT {
    type Vtable = ICAT_Vtbl;
}
impl ::core::clone::Clone for ICAT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ICAT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x7c6995fb_2a31_4bd7_953e_b1ad7fb7d31c);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICAT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfTableDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForNextTable: usize,
    pub GetNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppcat: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForWhenCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForWhenCurrent: usize,
    pub ConvertNextToCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ICaptionServiceDescriptor(::windows::core::IUnknown);
impl ICaptionServiceDescriptor {
    pub unsafe fn GetNumberOfServices(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetNumberOfServices)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLanguageCode(&self, bindex: u8, langcode: &mut [u8; 3]) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetLanguageCode)(::windows::core::Interface::as_raw(self), bindex, ::core::mem::transmute(langcode.as_ptr())).ok()
    }
    pub unsafe fn GetCaptionServiceNumber(&self, bindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCaptionServiceNumber)(::windows::core::Interface::as_raw(self), bindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCCType(&self, bindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCCType)(::windows::core::Interface::as_raw(self), bindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEasyReader(&self, bindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetEasyReader)(::windows::core::Interface::as_raw(self), bindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetWideAspectRatio(&self, bindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetWideAspectRatio)(::windows::core::Interface::as_raw(self), bindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(ICaptionServiceDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ICaptionServiceDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICaptionServiceDescriptor {}
impl ::core::fmt::Debug for ICaptionServiceDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICaptionServiceDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ICaptionServiceDescriptor {
    type Vtable = ICaptionServiceDescriptor_Vtbl;
}
impl ::core::clone::Clone for ICaptionServiceDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ICaptionServiceDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x40834007_6834_46f0_bd45_d5f6a6be258c);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICaptionServiceDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetNumberOfServices: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLanguageCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bindex: u8, langcode: *mut u8) -> ::windows::core::HRESULT,
    pub GetCaptionServiceNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCCType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetEasyReader: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetWideAspectRatio: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IChannelIDTuneRequest(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IChannelIDTuneRequest {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuningSpace(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.TuningSpace)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Components(&self) -> ::windows::core::Result<IComponents> {
        let mut result__ = ::windows::core::zeroed::<IComponents>();
        (::windows::core::Interface::vtable(self).base__.Components)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Locator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.Locator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetLocator<P0>(&self, locator: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.SetLocator)(::windows::core::Interface::as_raw(self), locator.into_param().abi()).ok()
    }
    pub unsafe fn ChannelID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).ChannelID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetChannelID<P0>(&self, channelid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetChannelID)(::windows::core::Interface::as_raw(self), channelid.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IChannelIDTuneRequest, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuneRequest);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IChannelIDTuneRequest {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IChannelIDTuneRequest {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IChannelIDTuneRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IChannelIDTuneRequest").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IChannelIDTuneRequest {
    type Vtable = IChannelIDTuneRequest_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IChannelIDTuneRequest {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IChannelIDTuneRequest {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x156eff60_86f4_4e28_89fc_109799fd57ee);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IChannelIDTuneRequest_Vtbl {
    pub base__: ITuneRequest_Vtbl,
    pub ChannelID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, channelid: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SetChannelID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, channelid: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IChannelTuneRequest(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IChannelTuneRequest {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuningSpace(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.TuningSpace)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Components(&self) -> ::windows::core::Result<IComponents> {
        let mut result__ = ::windows::core::zeroed::<IComponents>();
        (::windows::core::Interface::vtable(self).base__.Components)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Locator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.Locator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetLocator<P0>(&self, locator: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.SetLocator)(::windows::core::Interface::as_raw(self), locator.into_param().abi()).ok()
    }
    pub unsafe fn Channel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Channel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetChannel(&self, channel: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetChannel)(::windows::core::Interface::as_raw(self), channel).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IChannelTuneRequest, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuneRequest);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IChannelTuneRequest {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IChannelTuneRequest {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IChannelTuneRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IChannelTuneRequest").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IChannelTuneRequest {
    type Vtable = IChannelTuneRequest_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IChannelTuneRequest {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IChannelTuneRequest {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0369b4e0_45b6_11d3_b650_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IChannelTuneRequest_Vtbl {
    pub base__: ITuneRequest_Vtbl,
    pub Channel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, channel: *mut i32) -> ::windows::core::HRESULT,
    pub SetChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, channel: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IComponent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IComponent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Type(&self) -> ::windows::core::Result<IComponentType> {
        let mut result__ = ::windows::core::zeroed::<IComponentType>();
        (::windows::core::Interface::vtable(self).Type)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetType<P0>(&self, ct: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentType>,
    {
        (::windows::core::Interface::vtable(self).SetType)(::windows::core::Interface::as_raw(self), ct.into_param().abi()).ok()
    }
    pub unsafe fn DescLangID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).DescLangID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDescLangID(&self, langid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetDescLangID)(::windows::core::Interface::as_raw(self), langid).ok()
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<super::ComponentStatus> {
        let mut result__ = ::windows::core::zeroed::<super::ComponentStatus>();
        (::windows::core::Interface::vtable(self).Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetStatus(&self, status: super::ComponentStatus) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetStatus)(::windows::core::Interface::as_raw(self), status).ok()
    }
    pub unsafe fn Description(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).Description)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDescription<P0>(&self, description: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetDescription)(::windows::core::Interface::as_raw(self), description.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IComponent> {
        let mut result__ = ::windows::core::zeroed::<IComponent>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IComponent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IComponent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IComponent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IComponent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IComponent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IComponent {
    type Vtable = IComponent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IComponent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IComponent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1a5576fc_0e19_11d3_9d8e_00c04f72d980);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IComponent_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Type: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ct: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Type: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ct: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetType: usize,
    pub DescLangID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, langid: *mut i32) -> ::windows::core::HRESULT,
    pub SetDescLangID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, langid: i32) -> ::windows::core::HRESULT,
    pub Status: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, status: *mut super::ComponentStatus) -> ::windows::core::HRESULT,
    pub SetStatus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, status: super::ComponentStatus) -> ::windows::core::HRESULT,
    pub Description: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, description: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SetDescription: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, description: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newcomponent: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Clone: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IComponentType(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IComponentType {
    pub unsafe fn Category(&self) -> ::windows::core::Result<super::ComponentCategory> {
        let mut result__ = ::windows::core::zeroed::<super::ComponentCategory>();
        (::windows::core::Interface::vtable(self).Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCategory(&self, category: super::ComponentCategory) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetCategory)(::windows::core::Interface::as_raw(self), category).ok()
    }
    pub unsafe fn MediaMajorType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).MediaMajorType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMediaMajorType<P0>(&self, mediamajortype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetMediaMajorType)(::windows::core::Interface::as_raw(self), mediamajortype.into_param().abi()).ok()
    }
    pub unsafe fn _MediaMajorType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self)._MediaMajorType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_MediaMajorType(&self, mediamajortypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Set_MediaMajorType)(::windows::core::Interface::as_raw(self), mediamajortypeguid).ok()
    }
    pub unsafe fn MediaSubType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).MediaSubType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMediaSubType<P0>(&self, mediasubtype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetMediaSubType)(::windows::core::Interface::as_raw(self), mediasubtype.into_param().abi()).ok()
    }
    pub unsafe fn _MediaSubType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self)._MediaSubType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_MediaSubType(&self, mediasubtypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Set_MediaSubType)(::windows::core::Interface::as_raw(self), mediasubtypeguid).ok()
    }
    pub unsafe fn MediaFormatType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).MediaFormatType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMediaFormatType<P0>(&self, mediaformattype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetMediaFormatType)(::windows::core::Interface::as_raw(self), mediaformattype.into_param().abi()).ok()
    }
    pub unsafe fn _MediaFormatType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self)._MediaFormatType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_MediaFormatType(&self, mediaformattypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Set_MediaFormatType)(::windows::core::Interface::as_raw(self), mediaformattypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub unsafe fn MediaType(&self) -> ::windows::core::Result<super::super::MediaFoundation::AM_MEDIA_TYPE> {
        let mut result__ = ::windows::core::zeroed::<super::super::MediaFoundation::AM_MEDIA_TYPE>();
        (::windows::core::Interface::vtable(self).MediaType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub unsafe fn SetMediaType(&self, mediatype: *const super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMediaType)(::windows::core::Interface::as_raw(self), mediatype).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IComponentType> {
        let mut result__ = ::windows::core::zeroed::<IComponentType>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IComponentType, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IComponentType {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IComponentType {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IComponentType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IComponentType").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IComponentType {
    type Vtable = IComponentType_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IComponentType {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IComponentType {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6a340dc0_0311_11d3_9d8e_00c04f72d980);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IComponentType_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub Category: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, category: *mut super::ComponentCategory) -> ::windows::core::HRESULT,
    pub SetCategory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, category: super::ComponentCategory) -> ::windows::core::HRESULT,
    pub MediaMajorType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mediamajortype: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SetMediaMajorType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mediamajortype: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub _MediaMajorType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mediamajortypeguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub Set_MediaMajorType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mediamajortypeguid: *const ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub MediaSubType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mediasubtype: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SetMediaSubType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mediasubtype: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub _MediaSubType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mediasubtypeguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub Set_MediaSubType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mediasubtypeguid: *const ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub MediaFormatType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mediaformattype: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SetMediaFormatType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mediaformattype: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub _MediaFormatType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mediaformattypeguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub Set_MediaFormatType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mediaformattypeguid: *const ::windows::core::GUID) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub MediaType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mediatype: *mut super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation")))]
    MediaType: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub SetMediaType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mediatype: *const super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation")))]
    SetMediaType: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newct: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Clone: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IComponentTypes(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IComponentTypes {
    pub unsafe fn Count(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Count)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn _NewEnum(&self) -> ::windows::core::Result<super::super::super::System::Ole::IEnumVARIANT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IEnumVARIANT>();
        (::windows::core::Interface::vtable(self)._NewEnum)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn EnumComponentTypes(&self) -> ::windows::core::Result<IEnumComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IEnumComponentTypes>();
        (::windows::core::Interface::vtable(self).EnumComponentTypes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn get_Item(&self, index: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<IComponentType> {
        let mut result__ = ::windows::core::zeroed::<IComponentType>();
        (::windows::core::Interface::vtable(self).get_Item)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(index), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn put_Item<P0>(&self, index: super::super::super::System::Com::VARIANT, componenttype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentType>,
    {
        (::windows::core::Interface::vtable(self).put_Item)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(index), componenttype.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Add<P0>(&self, componenttype: P0) -> ::windows::core::Result<super::super::super::System::Com::VARIANT>
    where
        P0: ::windows::core::IntoParam<IComponentType>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::VARIANT>();
        (::windows::core::Interface::vtable(self).Add)(::windows::core::Interface::as_raw(self), componenttype.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Remove(&self, index: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Remove)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(index)).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IComponentTypes>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IComponentTypes, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IComponentTypes {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IComponentTypes {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IComponentTypes {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IComponentTypes").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IComponentTypes {
    type Vtable = IComponentTypes_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IComponentTypes {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IComponentTypes {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0dc13d4a_0313_11d3_9d8e_00c04f72d980);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IComponentTypes_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub Count: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Ole")]
    pub _NewEnum: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppnewenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    _NewEnum: usize,
    pub EnumComponentTypes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppnewenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub get_Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, index: super::super::super::System::Com::VARIANT, componenttype: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    get_Item: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub put_Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, index: super::super::super::System::Com::VARIANT, componenttype: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    put_Item: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Add: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, componenttype: *mut ::core::ffi::c_void, newindex: *mut super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Add: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Remove: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, index: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Remove: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newlist: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Clone: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IComponents(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IComponents {
    pub unsafe fn Count(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Count)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn _NewEnum(&self) -> ::windows::core::Result<super::super::super::System::Ole::IEnumVARIANT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IEnumVARIANT>();
        (::windows::core::Interface::vtable(self)._NewEnum)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn EnumComponents(&self) -> ::windows::core::Result<IEnumComponents> {
        let mut result__ = ::windows::core::zeroed::<IEnumComponents>();
        (::windows::core::Interface::vtable(self).EnumComponents)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn get_Item(&self, index: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<IComponent> {
        let mut result__ = ::windows::core::zeroed::<IComponent>();
        (::windows::core::Interface::vtable(self).get_Item)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(index), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Add<P0>(&self, component: P0) -> ::windows::core::Result<super::super::super::System::Com::VARIANT>
    where
        P0: ::windows::core::IntoParam<IComponent>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::VARIANT>();
        (::windows::core::Interface::vtable(self).Add)(::windows::core::Interface::as_raw(self), component.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Remove(&self, index: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Remove)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(index)).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IComponents> {
        let mut result__ = ::windows::core::zeroed::<IComponents>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn put_Item<P0>(&self, index: super::super::super::System::Com::VARIANT, ppcomponent: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponent>,
    {
        (::windows::core::Interface::vtable(self).put_Item)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(index), ppcomponent.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IComponents, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IComponents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IComponents {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IComponents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IComponents").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IComponents {
    type Vtable = IComponents_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IComponents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IComponents {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x39a48091_fffe_4182_a161_3ff802640e26);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IComponents_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub Count: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Ole")]
    pub _NewEnum: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppnewenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    _NewEnum: usize,
    pub EnumComponents: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppnewenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub get_Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, index: super::super::super::System::Com::VARIANT, ppcomponent: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    get_Item: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Add: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, component: *mut ::core::ffi::c_void, newindex: *mut super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Add: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Remove: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, index: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Remove: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newlist: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Clone: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub put_Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, index: super::super::super::System::Com::VARIANT, ppcomponent: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    put_Item: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IComponentsOld(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IComponentsOld {
    pub unsafe fn Count(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Count)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn _NewEnum(&self) -> ::windows::core::Result<super::super::super::System::Ole::IEnumVARIANT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IEnumVARIANT>();
        (::windows::core::Interface::vtable(self)._NewEnum)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn EnumComponents(&self) -> ::windows::core::Result<IEnumComponents> {
        let mut result__ = ::windows::core::zeroed::<IEnumComponents>();
        (::windows::core::Interface::vtable(self).EnumComponents)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn get_Item(&self, index: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<IComponent> {
        let mut result__ = ::windows::core::zeroed::<IComponent>();
        (::windows::core::Interface::vtable(self).get_Item)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(index), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Add<P0>(&self, component: P0) -> ::windows::core::Result<super::super::super::System::Com::VARIANT>
    where
        P0: ::windows::core::IntoParam<IComponent>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::VARIANT>();
        (::windows::core::Interface::vtable(self).Add)(::windows::core::Interface::as_raw(self), component.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Remove(&self, index: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Remove)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(index)).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IComponents> {
        let mut result__ = ::windows::core::zeroed::<IComponents>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IComponentsOld, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IComponentsOld {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IComponentsOld {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IComponentsOld {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IComponentsOld").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IComponentsOld {
    type Vtable = IComponentsOld_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IComponentsOld {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IComponentsOld {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xfcd01846_0e19_11d3_9d8e_00c04f72d980);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IComponentsOld_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub Count: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Ole")]
    pub _NewEnum: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppnewenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    _NewEnum: usize,
    pub EnumComponents: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppnewenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub get_Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, index: super::super::super::System::Com::VARIANT, ppcomponent: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    get_Item: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Add: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, component: *mut ::core::ffi::c_void, newindex: *mut super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Add: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Remove: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, index: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Remove: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newlist: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Clone: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ICreatePropBagOnRegKey(::windows::core::IUnknown);
impl ICreatePropBagOnRegKey {
    #[doc = "*Required features: `\"Win32_System_Registry\"`*"]
    #[cfg(feature = "Win32_System_Registry")]
    pub unsafe fn Create<P0, P1>(&self, hkey: P0, subkey: P1, uloptions: u32, samdesired: u32, iid: *const ::windows::core::GUID, ppbag: *mut *mut ::core::ffi::c_void) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::System::Registry::HKEY>,
        P1: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        (::windows::core::Interface::vtable(self).Create)(::windows::core::Interface::as_raw(self), hkey.into_param().abi(), subkey.into_param().abi(), uloptions, samdesired, iid, ppbag).ok()
    }
}
::windows::imp::interface_hierarchy!(ICreatePropBagOnRegKey, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ICreatePropBagOnRegKey {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICreatePropBagOnRegKey {}
impl ::core::fmt::Debug for ICreatePropBagOnRegKey {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICreatePropBagOnRegKey").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ICreatePropBagOnRegKey {
    type Vtable = ICreatePropBagOnRegKey_Vtbl;
}
impl ::core::clone::Clone for ICreatePropBagOnRegKey {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ICreatePropBagOnRegKey {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8a674b48_1f63_11d3_b64c_00c04f79498e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICreatePropBagOnRegKey_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Registry")]
    pub Create: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hkey: super::super::super::System::Registry::HKEY, subkey: ::windows::core::PCWSTR, uloptions: u32, samdesired: u32, iid: *const ::windows::core::GUID, ppbag: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Registry"))]
    Create: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDTFilter(::windows::core::IUnknown);
impl IDTFilter {
    pub unsafe fn EvalRatObjOK(&self) -> ::windows::core::Result<::windows::core::HRESULT> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::HRESULT>();
        (::windows::core::Interface::vtable(self).EvalRatObjOK)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCurrRating(&self, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetCurrRating)(::windows::core::Interface::as_raw(self), pensystem, penrating, plbfenattr).ok()
    }
    pub unsafe fn get_BlockedRatingAttributes(&self, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).get_BlockedRatingAttributes)(::windows::core::Interface::as_raw(self), ensystem, enlevel, &mut result__).from_abi(result__)
    }
    pub unsafe fn put_BlockedRatingAttributes(&self, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, lbfattrs: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).put_BlockedRatingAttributes)(::windows::core::Interface::as_raw(self), ensystem, enlevel, lbfattrs).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn BlockUnRated(&self) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).BlockUnRated)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBlockUnRated<P0>(&self, fblockunratedshows: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetBlockUnRated)(::windows::core::Interface::as_raw(self), fblockunratedshows.into_param().abi()).ok()
    }
    pub unsafe fn BlockUnRatedDelay(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).BlockUnRatedDelay)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetBlockUnRatedDelay(&self, msecsdelaybeforeblock: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetBlockUnRatedDelay)(::windows::core::Interface::as_raw(self), msecsdelaybeforeblock).ok()
    }
}
::windows::imp::interface_hierarchy!(IDTFilter, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDTFilter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDTFilter {}
impl ::core::fmt::Debug for IDTFilter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDTFilter").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDTFilter {
    type Vtable = IDTFilter_Vtbl;
}
impl ::core::clone::Clone for IDTFilter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDTFilter {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4b2_0049_4e2b_98fb_9537f6ce516d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDTFilter_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub EvalRatObjOK: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phrcocreateretval: *mut ::windows::core::HRESULT) -> ::windows::core::HRESULT,
    pub GetCurrRating: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows::core::HRESULT,
    pub get_BlockedRatingAttributes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows::core::HRESULT,
    pub put_BlockedRatingAttributes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, lbfattrs: i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub BlockUnRated: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfblockunratedshows: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    BlockUnRated: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetBlockUnRated: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fblockunratedshows: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetBlockUnRated: usize,
    pub BlockUnRatedDelay: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmsecsdelaybeforeblock: *mut i32) -> ::windows::core::HRESULT,
    pub SetBlockUnRatedDelay: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, msecsdelaybeforeblock: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDTFilter2(::windows::core::IUnknown);
impl IDTFilter2 {
    pub unsafe fn EvalRatObjOK(&self) -> ::windows::core::Result<::windows::core::HRESULT> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::HRESULT>();
        (::windows::core::Interface::vtable(self).base__.EvalRatObjOK)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCurrRating(&self, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.GetCurrRating)(::windows::core::Interface::as_raw(self), pensystem, penrating, plbfenattr).ok()
    }
    pub unsafe fn get_BlockedRatingAttributes(&self, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.get_BlockedRatingAttributes)(::windows::core::Interface::as_raw(self), ensystem, enlevel, &mut result__).from_abi(result__)
    }
    pub unsafe fn put_BlockedRatingAttributes(&self, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, lbfattrs: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.put_BlockedRatingAttributes)(::windows::core::Interface::as_raw(self), ensystem, enlevel, lbfattrs).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn BlockUnRated(&self) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).base__.BlockUnRated)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBlockUnRated<P0>(&self, fblockunratedshows: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetBlockUnRated)(::windows::core::Interface::as_raw(self), fblockunratedshows.into_param().abi()).ok()
    }
    pub unsafe fn BlockUnRatedDelay(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.BlockUnRatedDelay)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetBlockUnRatedDelay(&self, msecsdelaybeforeblock: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetBlockUnRatedDelay)(::windows::core::Interface::as_raw(self), msecsdelaybeforeblock).ok()
    }
    pub unsafe fn ChallengeUrl(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).ChallengeUrl)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCurrLicenseExpDate(&self, prottype: *const ProtType) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).GetCurrLicenseExpDate)(::windows::core::Interface::as_raw(self), prottype, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLastErrorCode(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetLastErrorCode)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IDTFilter2, ::windows::core::IUnknown, IDTFilter);
impl ::core::cmp::PartialEq for IDTFilter2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDTFilter2 {}
impl ::core::fmt::Debug for IDTFilter2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDTFilter2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDTFilter2 {
    type Vtable = IDTFilter2_Vtbl;
}
impl ::core::clone::Clone for IDTFilter2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDTFilter2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4b4_0049_4e2b_98fb_9537f6ce516d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDTFilter2_Vtbl {
    pub base__: IDTFilter_Vtbl,
    pub ChallengeUrl: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrchallengeurl: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub GetCurrLicenseExpDate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prottype: *const ProtType, lpdatetime: *mut i32) -> ::windows::core::HRESULT,
    pub GetLastErrorCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDTFilter3(::windows::core::IUnknown);
impl IDTFilter3 {
    pub unsafe fn EvalRatObjOK(&self) -> ::windows::core::Result<::windows::core::HRESULT> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::HRESULT>();
        (::windows::core::Interface::vtable(self).base__.base__.EvalRatObjOK)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCurrRating(&self, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.GetCurrRating)(::windows::core::Interface::as_raw(self), pensystem, penrating, plbfenattr).ok()
    }
    pub unsafe fn get_BlockedRatingAttributes(&self, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.get_BlockedRatingAttributes)(::windows::core::Interface::as_raw(self), ensystem, enlevel, &mut result__).from_abi(result__)
    }
    pub unsafe fn put_BlockedRatingAttributes(&self, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, lbfattrs: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.put_BlockedRatingAttributes)(::windows::core::Interface::as_raw(self), ensystem, enlevel, lbfattrs).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn BlockUnRated(&self) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.BlockUnRated)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBlockUnRated<P0>(&self, fblockunratedshows: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetBlockUnRated)(::windows::core::Interface::as_raw(self), fblockunratedshows.into_param().abi()).ok()
    }
    pub unsafe fn BlockUnRatedDelay(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.BlockUnRatedDelay)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetBlockUnRatedDelay(&self, msecsdelaybeforeblock: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetBlockUnRatedDelay)(::windows::core::Interface::as_raw(self), msecsdelaybeforeblock).ok()
    }
    pub unsafe fn ChallengeUrl(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.ChallengeUrl)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCurrLicenseExpDate(&self, prottype: *const ProtType) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.GetCurrLicenseExpDate)(::windows::core::Interface::as_raw(self), prottype, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLastErrorCode(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.GetLastErrorCode)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetProtectionType(&self) -> ::windows::core::Result<ProtType> {
        let mut result__ = ::windows::core::zeroed::<ProtType>();
        (::windows::core::Interface::vtable(self).GetProtectionType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn LicenseHasExpirationDate(&self) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).LicenseHasExpirationDate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetRights<P0>(&self, bstrrights: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetRights)(::windows::core::Interface::as_raw(self), bstrrights.into_param().abi()).ok()
    }
}
::windows::imp::interface_hierarchy!(IDTFilter3, ::windows::core::IUnknown, IDTFilter, IDTFilter2);
impl ::core::cmp::PartialEq for IDTFilter3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDTFilter3 {}
impl ::core::fmt::Debug for IDTFilter3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDTFilter3").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDTFilter3 {
    type Vtable = IDTFilter3_Vtbl;
}
impl ::core::clone::Clone for IDTFilter3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDTFilter3 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x513998cc_e929_4cdf_9fbd_bad1e0314866);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDTFilter3_Vtbl {
    pub base__: IDTFilter2_Vtbl,
    pub GetProtectionType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pprotectiontype: *mut ProtType) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub LicenseHasExpirationDate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pflicensehasexpirationdate: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    LicenseHasExpirationDate: usize,
    pub SetRights: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrrights: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDTFilterConfig(::windows::core::IUnknown);
impl IDTFilterConfig {
    pub unsafe fn GetSecureChannelObject(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).GetSecureChannelObject)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDTFilterConfig, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDTFilterConfig {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDTFilterConfig {}
impl ::core::fmt::Debug for IDTFilterConfig {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDTFilterConfig").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDTFilterConfig {
    type Vtable = IDTFilterConfig_Vtbl;
}
impl ::core::clone::Clone for IDTFilterConfig {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDTFilterConfig {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4d2_0049_4e2b_98fb_9537f6ce516d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDTFilterConfig_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetSecureChannelObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppunkdrmsecurechannel: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IDTFilterEvents(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IDTFilterEvents {}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IDTFilterEvents, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IDTFilterEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IDTFilterEvents {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IDTFilterEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDTFilterEvents").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IDTFilterEvents {
    type Vtable = IDTFilterEvents_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IDTFilterEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IDTFilterEvents {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4c2_0049_4e2b_98fb_9537f6ce516d);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IDTFilterEvents_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDTFilterLicenseRenewal(::windows::core::IUnknown);
impl IDTFilterLicenseRenewal {
    pub unsafe fn GetLicenseRenewalData(&self, ppwszfilename: *mut ::windows::core::PWSTR, ppwszexpiredkid: *mut ::windows::core::PWSTR, ppwsztunerid: *mut ::windows::core::PWSTR) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetLicenseRenewalData)(::windows::core::Interface::as_raw(self), ppwszfilename, ppwszexpiredkid, ppwsztunerid).ok()
    }
}
::windows::imp::interface_hierarchy!(IDTFilterLicenseRenewal, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDTFilterLicenseRenewal {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDTFilterLicenseRenewal {}
impl ::core::fmt::Debug for IDTFilterLicenseRenewal {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDTFilterLicenseRenewal").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDTFilterLicenseRenewal {
    type Vtable = IDTFilterLicenseRenewal_Vtbl;
}
impl ::core::clone::Clone for IDTFilterLicenseRenewal {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDTFilterLicenseRenewal {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8a78b317_e405_4a43_994a_620d8f5ce25e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDTFilterLicenseRenewal_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetLicenseRenewalData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppwszfilename: *mut ::windows::core::PWSTR, ppwszexpiredkid: *mut ::windows::core::PWSTR, ppwsztunerid: *mut ::windows::core::PWSTR) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IDVBCLocator(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IDVBCLocator {
    pub unsafe fn CarrierFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.CarrierFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCarrierFrequency(&self, frequency: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetCarrierFrequency)(::windows::core::Interface::as_raw(self), frequency).ok()
    }
    pub unsafe fn InnerFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.InnerFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetInnerFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn InnerFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.InnerFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetInnerFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.OuterFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetOuterFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.OuterFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetOuterFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn Modulation(&self) -> ::windows::core::Result<super::ModulationType> {
        let mut result__ = ::windows::core::zeroed::<super::ModulationType>();
        (::windows::core::Interface::vtable(self).base__.base__.Modulation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetModulation(&self, modulation: super::ModulationType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetModulation)(::windows::core::Interface::as_raw(self), modulation).ok()
    }
    pub unsafe fn SymbolRate(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.SymbolRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSymbolRate(&self, rate: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetSymbolRate)(::windows::core::Interface::as_raw(self), rate).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IDVBCLocator, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ILocator, IDigitalLocator);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IDVBCLocator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IDVBCLocator {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IDVBCLocator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVBCLocator").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IDVBCLocator {
    type Vtable = IDVBCLocator_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IDVBCLocator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IDVBCLocator {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6e42f36e_1dd2_43c4_9f78_69d25ae39034);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IDVBCLocator_Vtbl {
    pub base__: IDigitalLocator_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IDVBSLocator(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IDVBSLocator {
    pub unsafe fn CarrierFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.CarrierFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCarrierFrequency(&self, frequency: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetCarrierFrequency)(::windows::core::Interface::as_raw(self), frequency).ok()
    }
    pub unsafe fn InnerFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.InnerFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetInnerFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn InnerFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.InnerFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetInnerFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.OuterFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetOuterFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.OuterFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetOuterFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn Modulation(&self) -> ::windows::core::Result<super::ModulationType> {
        let mut result__ = ::windows::core::zeroed::<super::ModulationType>();
        (::windows::core::Interface::vtable(self).base__.base__.Modulation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetModulation(&self, modulation: super::ModulationType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetModulation)(::windows::core::Interface::as_raw(self), modulation).ok()
    }
    pub unsafe fn SymbolRate(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.SymbolRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSymbolRate(&self, rate: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetSymbolRate)(::windows::core::Interface::as_raw(self), rate).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SignalPolarisation(&self) -> ::windows::core::Result<super::Polarisation> {
        let mut result__ = ::windows::core::zeroed::<super::Polarisation>();
        (::windows::core::Interface::vtable(self).SignalPolarisation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSignalPolarisation(&self, polarisationval: super::Polarisation) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetSignalPolarisation)(::windows::core::Interface::as_raw(self), polarisationval).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn WestPosition(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).WestPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetWestPosition<P0>(&self, westlongitude: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetWestPosition)(::windows::core::Interface::as_raw(self), westlongitude.into_param().abi()).ok()
    }
    pub unsafe fn OrbitalPosition(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).OrbitalPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOrbitalPosition(&self, longitude: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetOrbitalPosition)(::windows::core::Interface::as_raw(self), longitude).ok()
    }
    pub unsafe fn Azimuth(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Azimuth)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetAzimuth(&self, azimuth: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetAzimuth)(::windows::core::Interface::as_raw(self), azimuth).ok()
    }
    pub unsafe fn Elevation(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Elevation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetElevation(&self, elevation: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetElevation)(::windows::core::Interface::as_raw(self), elevation).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IDVBSLocator, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ILocator, IDigitalLocator);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IDVBSLocator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IDVBSLocator {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IDVBSLocator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVBSLocator").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IDVBSLocator {
    type Vtable = IDVBSLocator_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IDVBSLocator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IDVBSLocator {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3d7c353c_0d04_45f1_a742_f97cc1188dc8);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IDVBSLocator_Vtbl {
    pub base__: IDigitalLocator_Vtbl,
    pub SignalPolarisation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, polarisationval: *mut super::Polarisation) -> ::windows::core::HRESULT,
    pub SetSignalPolarisation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, polarisationval: super::Polarisation) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub WestPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, westlongitude: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    WestPosition: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetWestPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, westlongitude: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetWestPosition: usize,
    pub OrbitalPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, longitude: *mut i32) -> ::windows::core::HRESULT,
    pub SetOrbitalPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, longitude: i32) -> ::windows::core::HRESULT,
    pub Azimuth: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, azimuth: *mut i32) -> ::windows::core::HRESULT,
    pub SetAzimuth: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, azimuth: i32) -> ::windows::core::HRESULT,
    pub Elevation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, elevation: *mut i32) -> ::windows::core::HRESULT,
    pub SetElevation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, elevation: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IDVBSLocator2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IDVBSLocator2 {
    pub unsafe fn CarrierFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.CarrierFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCarrierFrequency(&self, frequency: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetCarrierFrequency)(::windows::core::Interface::as_raw(self), frequency).ok()
    }
    pub unsafe fn InnerFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.InnerFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetInnerFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn InnerFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.InnerFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetInnerFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.OuterFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetOuterFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.OuterFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetOuterFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn Modulation(&self) -> ::windows::core::Result<super::ModulationType> {
        let mut result__ = ::windows::core::zeroed::<super::ModulationType>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Modulation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetModulation(&self, modulation: super::ModulationType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetModulation)(::windows::core::Interface::as_raw(self), modulation).ok()
    }
    pub unsafe fn SymbolRate(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.SymbolRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSymbolRate(&self, rate: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetSymbolRate)(::windows::core::Interface::as_raw(self), rate).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SignalPolarisation(&self) -> ::windows::core::Result<super::Polarisation> {
        let mut result__ = ::windows::core::zeroed::<super::Polarisation>();
        (::windows::core::Interface::vtable(self).base__.SignalPolarisation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSignalPolarisation(&self, polarisationval: super::Polarisation) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetSignalPolarisation)(::windows::core::Interface::as_raw(self), polarisationval).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn WestPosition(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.WestPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetWestPosition<P0>(&self, westlongitude: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetWestPosition)(::windows::core::Interface::as_raw(self), westlongitude.into_param().abi()).ok()
    }
    pub unsafe fn OrbitalPosition(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.OrbitalPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOrbitalPosition(&self, longitude: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetOrbitalPosition)(::windows::core::Interface::as_raw(self), longitude).ok()
    }
    pub unsafe fn Azimuth(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.Azimuth)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetAzimuth(&self, azimuth: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetAzimuth)(::windows::core::Interface::as_raw(self), azimuth).ok()
    }
    pub unsafe fn Elevation(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.Elevation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetElevation(&self, elevation: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetElevation)(::windows::core::Interface::as_raw(self), elevation).ok()
    }
    pub unsafe fn DiseqLNBSource(&self) -> ::windows::core::Result<super::LNB_Source> {
        let mut result__ = ::windows::core::zeroed::<super::LNB_Source>();
        (::windows::core::Interface::vtable(self).DiseqLNBSource)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDiseqLNBSource(&self, diseqlnbsourceval: super::LNB_Source) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetDiseqLNBSource)(::windows::core::Interface::as_raw(self), diseqlnbsourceval).ok()
    }
    pub unsafe fn LocalOscillatorOverrideLow(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).LocalOscillatorOverrideLow)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetLocalOscillatorOverrideLow(&self, localoscillatoroverridelowval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetLocalOscillatorOverrideLow)(::windows::core::Interface::as_raw(self), localoscillatoroverridelowval).ok()
    }
    pub unsafe fn LocalOscillatorOverrideHigh(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).LocalOscillatorOverrideHigh)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetLocalOscillatorOverrideHigh(&self, localoscillatoroverridehighval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetLocalOscillatorOverrideHigh)(::windows::core::Interface::as_raw(self), localoscillatoroverridehighval).ok()
    }
    pub unsafe fn LocalLNBSwitchOverride(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).LocalLNBSwitchOverride)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetLocalLNBSwitchOverride(&self, locallnbswitchoverrideval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetLocalLNBSwitchOverride)(::windows::core::Interface::as_raw(self), locallnbswitchoverrideval).ok()
    }
    pub unsafe fn LocalSpectralInversionOverride(&self) -> ::windows::core::Result<super::SpectralInversion> {
        let mut result__ = ::windows::core::zeroed::<super::SpectralInversion>();
        (::windows::core::Interface::vtable(self).LocalSpectralInversionOverride)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetLocalSpectralInversionOverride(&self, localspectralinversionoverrideval: super::SpectralInversion) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetLocalSpectralInversionOverride)(::windows::core::Interface::as_raw(self), localspectralinversionoverrideval).ok()
    }
    pub unsafe fn SignalRollOff(&self) -> ::windows::core::Result<super::RollOff> {
        let mut result__ = ::windows::core::zeroed::<super::RollOff>();
        (::windows::core::Interface::vtable(self).SignalRollOff)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSignalRollOff(&self, rolloffval: super::RollOff) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetSignalRollOff)(::windows::core::Interface::as_raw(self), rolloffval).ok()
    }
    pub unsafe fn SignalPilot(&self) -> ::windows::core::Result<super::Pilot> {
        let mut result__ = ::windows::core::zeroed::<super::Pilot>();
        (::windows::core::Interface::vtable(self).SignalPilot)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSignalPilot(&self, pilotval: super::Pilot) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetSignalPilot)(::windows::core::Interface::as_raw(self), pilotval).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IDVBSLocator2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ILocator, IDigitalLocator, IDVBSLocator);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IDVBSLocator2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IDVBSLocator2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IDVBSLocator2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVBSLocator2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IDVBSLocator2 {
    type Vtable = IDVBSLocator2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IDVBSLocator2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IDVBSLocator2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6044634a_1733_4f99_b982_5fb12afce4f0);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IDVBSLocator2_Vtbl {
    pub base__: IDVBSLocator_Vtbl,
    pub DiseqLNBSource: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, diseqlnbsourceval: *mut super::LNB_Source) -> ::windows::core::HRESULT,
    pub SetDiseqLNBSource: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, diseqlnbsourceval: super::LNB_Source) -> ::windows::core::HRESULT,
    pub LocalOscillatorOverrideLow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, localoscillatoroverridelowval: *mut i32) -> ::windows::core::HRESULT,
    pub SetLocalOscillatorOverrideLow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, localoscillatoroverridelowval: i32) -> ::windows::core::HRESULT,
    pub LocalOscillatorOverrideHigh: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, localoscillatoroverridehighval: *mut i32) -> ::windows::core::HRESULT,
    pub SetLocalOscillatorOverrideHigh: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, localoscillatoroverridehighval: i32) -> ::windows::core::HRESULT,
    pub LocalLNBSwitchOverride: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, locallnbswitchoverrideval: *mut i32) -> ::windows::core::HRESULT,
    pub SetLocalLNBSwitchOverride: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, locallnbswitchoverrideval: i32) -> ::windows::core::HRESULT,
    pub LocalSpectralInversionOverride: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, localspectralinversionoverrideval: *mut super::SpectralInversion) -> ::windows::core::HRESULT,
    pub SetLocalSpectralInversionOverride: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, localspectralinversionoverrideval: super::SpectralInversion) -> ::windows::core::HRESULT,
    pub SignalRollOff: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rolloffval: *mut super::RollOff) -> ::windows::core::HRESULT,
    pub SetSignalRollOff: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rolloffval: super::RollOff) -> ::windows::core::HRESULT,
    pub SignalPilot: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pilotval: *mut super::Pilot) -> ::windows::core::HRESULT,
    pub SetSignalPilot: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pilotval: super::Pilot) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IDVBSTuningSpace(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IDVBSTuningSpace {
    pub unsafe fn UniqueName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.UniqueName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetUniqueName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetUniqueName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn FriendlyName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.FriendlyName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFriendlyName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetFriendlyName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn CLSID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.CLSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn NetworkType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetNetworkType<P0>(&self, networktypeguid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetNetworkType)(::windows::core::Interface::as_raw(self), networktypeguid.into_param().abi()).ok()
    }
    pub unsafe fn _NetworkType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_NetworkType(&self, networktypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.Set_NetworkType)(::windows::core::Interface::as_raw(self), networktypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateTuneRequest(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.CreateTuneRequest)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumCategoryGUIDs(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumGUID> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumGUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.EnumCategoryGUIDs)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumDeviceMonikers(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumMoniker> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumMoniker>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.EnumDeviceMonikers)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultPreferredComponentTypes(&self) -> ::windows::core::Result<IComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IComponentTypes>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.DefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultPreferredComponentTypes<P0>(&self, newcomponenttypes: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentTypes>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetDefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), newcomponenttypes.into_param().abi()).ok()
    }
    pub unsafe fn FrequencyMapping(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.FrequencyMapping)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFrequencyMapping<P0>(&self, mapping: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetFrequencyMapping)(::windows::core::Interface::as_raw(self), mapping.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultLocator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.DefaultLocator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultLocator<P0>(&self, locatorval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetDefaultLocator)(::windows::core::Interface::as_raw(self), locatorval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SystemType(&self) -> ::windows::core::Result<super::DVBSystemType> {
        let mut result__ = ::windows::core::zeroed::<super::DVBSystemType>();
        (::windows::core::Interface::vtable(self).base__.base__.SystemType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSystemType(&self, systype: super::DVBSystemType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetSystemType)(::windows::core::Interface::as_raw(self), systype).ok()
    }
    pub unsafe fn NetworkID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.NetworkID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetNetworkID(&self, networkid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetNetworkID)(::windows::core::Interface::as_raw(self), networkid).ok()
    }
    pub unsafe fn LowOscillator(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).LowOscillator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetLowOscillator(&self, lowoscillator: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetLowOscillator)(::windows::core::Interface::as_raw(self), lowoscillator).ok()
    }
    pub unsafe fn HighOscillator(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).HighOscillator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetHighOscillator(&self, highoscillator: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetHighOscillator)(::windows::core::Interface::as_raw(self), highoscillator).ok()
    }
    pub unsafe fn LNBSwitch(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).LNBSwitch)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetLNBSwitch(&self, lnbswitch: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetLNBSwitch)(::windows::core::Interface::as_raw(self), lnbswitch).ok()
    }
    pub unsafe fn InputRange(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).InputRange)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInputRange<P0>(&self, inputrange: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetInputRange)(::windows::core::Interface::as_raw(self), inputrange.into_param().abi()).ok()
    }
    pub unsafe fn SpectralInversion(&self) -> ::windows::core::Result<super::SpectralInversion> {
        let mut result__ = ::windows::core::zeroed::<super::SpectralInversion>();
        (::windows::core::Interface::vtable(self).SpectralInversion)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSpectralInversion(&self, spectralinversionval: super::SpectralInversion) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetSpectralInversion)(::windows::core::Interface::as_raw(self), spectralinversionval).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IDVBSTuningSpace, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuningSpace, IDVBTuningSpace, IDVBTuningSpace2);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IDVBSTuningSpace {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IDVBSTuningSpace {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IDVBSTuningSpace {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVBSTuningSpace").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IDVBSTuningSpace {
    type Vtable = IDVBSTuningSpace_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IDVBSTuningSpace {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IDVBSTuningSpace {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xcdf7be60_d954_42fd_a972_78971958e470);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IDVBSTuningSpace_Vtbl {
    pub base__: IDVBTuningSpace2_Vtbl,
    pub LowOscillator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lowoscillator: *mut i32) -> ::windows::core::HRESULT,
    pub SetLowOscillator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lowoscillator: i32) -> ::windows::core::HRESULT,
    pub HighOscillator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, highoscillator: *mut i32) -> ::windows::core::HRESULT,
    pub SetHighOscillator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, highoscillator: i32) -> ::windows::core::HRESULT,
    pub LNBSwitch: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lnbswitch: *mut i32) -> ::windows::core::HRESULT,
    pub SetLNBSwitch: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lnbswitch: i32) -> ::windows::core::HRESULT,
    pub InputRange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, inputrange: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SetInputRange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, inputrange: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SpectralInversion: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, spectralinversionval: *mut super::SpectralInversion) -> ::windows::core::HRESULT,
    pub SetSpectralInversion: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, spectralinversionval: super::SpectralInversion) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IDVBTLocator(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IDVBTLocator {
    pub unsafe fn CarrierFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.CarrierFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCarrierFrequency(&self, frequency: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetCarrierFrequency)(::windows::core::Interface::as_raw(self), frequency).ok()
    }
    pub unsafe fn InnerFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.InnerFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetInnerFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn InnerFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.InnerFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetInnerFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.OuterFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetOuterFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.OuterFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetOuterFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn Modulation(&self) -> ::windows::core::Result<super::ModulationType> {
        let mut result__ = ::windows::core::zeroed::<super::ModulationType>();
        (::windows::core::Interface::vtable(self).base__.base__.Modulation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetModulation(&self, modulation: super::ModulationType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetModulation)(::windows::core::Interface::as_raw(self), modulation).ok()
    }
    pub unsafe fn SymbolRate(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.SymbolRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSymbolRate(&self, rate: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetSymbolRate)(::windows::core::Interface::as_raw(self), rate).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Bandwidth(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Bandwidth)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetBandwidth(&self, bandwidthval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetBandwidth)(::windows::core::Interface::as_raw(self), bandwidthval).ok()
    }
    pub unsafe fn LPInnerFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).LPInnerFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetLPInnerFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetLPInnerFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn LPInnerFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).LPInnerFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetLPInnerFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetLPInnerFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn HAlpha(&self) -> ::windows::core::Result<super::HierarchyAlpha> {
        let mut result__ = ::windows::core::zeroed::<super::HierarchyAlpha>();
        (::windows::core::Interface::vtable(self).HAlpha)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetHAlpha(&self, alpha: super::HierarchyAlpha) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetHAlpha)(::windows::core::Interface::as_raw(self), alpha).ok()
    }
    pub unsafe fn Guard(&self) -> ::windows::core::Result<super::GuardInterval> {
        let mut result__ = ::windows::core::zeroed::<super::GuardInterval>();
        (::windows::core::Interface::vtable(self).Guard)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetGuard(&self, gi: super::GuardInterval) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetGuard)(::windows::core::Interface::as_raw(self), gi).ok()
    }
    pub unsafe fn Mode(&self) -> ::windows::core::Result<super::TransmissionMode> {
        let mut result__ = ::windows::core::zeroed::<super::TransmissionMode>();
        (::windows::core::Interface::vtable(self).Mode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMode(&self, mode: super::TransmissionMode) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMode)(::windows::core::Interface::as_raw(self), mode).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OtherFrequencyInUse(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).OtherFrequencyInUse)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetOtherFrequencyInUse<P0>(&self, otherfrequencyinuseval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetOtherFrequencyInUse)(::windows::core::Interface::as_raw(self), otherfrequencyinuseval.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IDVBTLocator, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ILocator, IDigitalLocator);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IDVBTLocator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IDVBTLocator {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IDVBTLocator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVBTLocator").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IDVBTLocator {
    type Vtable = IDVBTLocator_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IDVBTLocator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IDVBTLocator {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8664da16_dda2_42ac_926a_c18f9127c302);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IDVBTLocator_Vtbl {
    pub base__: IDigitalLocator_Vtbl,
    pub Bandwidth: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bandwidthval: *mut i32) -> ::windows::core::HRESULT,
    pub SetBandwidth: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bandwidthval: i32) -> ::windows::core::HRESULT,
    pub LPInnerFEC: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fec: *mut super::FECMethod) -> ::windows::core::HRESULT,
    pub SetLPInnerFEC: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fec: super::FECMethod) -> ::windows::core::HRESULT,
    pub LPInnerFECRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fec: *mut super::BinaryConvolutionCodeRate) -> ::windows::core::HRESULT,
    pub SetLPInnerFECRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::HRESULT,
    pub HAlpha: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, alpha: *mut super::HierarchyAlpha) -> ::windows::core::HRESULT,
    pub SetHAlpha: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, alpha: super::HierarchyAlpha) -> ::windows::core::HRESULT,
    pub Guard: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, gi: *mut super::GuardInterval) -> ::windows::core::HRESULT,
    pub SetGuard: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, gi: super::GuardInterval) -> ::windows::core::HRESULT,
    pub Mode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mode: *mut super::TransmissionMode) -> ::windows::core::HRESULT,
    pub SetMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mode: super::TransmissionMode) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub OtherFrequencyInUse: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, otherfrequencyinuseval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    OtherFrequencyInUse: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetOtherFrequencyInUse: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, otherfrequencyinuseval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetOtherFrequencyInUse: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IDVBTLocator2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IDVBTLocator2 {
    pub unsafe fn CarrierFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.CarrierFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCarrierFrequency(&self, frequency: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetCarrierFrequency)(::windows::core::Interface::as_raw(self), frequency).ok()
    }
    pub unsafe fn InnerFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.InnerFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetInnerFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn InnerFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.InnerFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetInnerFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.OuterFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetOuterFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.OuterFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetOuterFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn Modulation(&self) -> ::windows::core::Result<super::ModulationType> {
        let mut result__ = ::windows::core::zeroed::<super::ModulationType>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Modulation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetModulation(&self, modulation: super::ModulationType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetModulation)(::windows::core::Interface::as_raw(self), modulation).ok()
    }
    pub unsafe fn SymbolRate(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.SymbolRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSymbolRate(&self, rate: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetSymbolRate)(::windows::core::Interface::as_raw(self), rate).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Bandwidth(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.Bandwidth)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetBandwidth(&self, bandwidthval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetBandwidth)(::windows::core::Interface::as_raw(self), bandwidthval).ok()
    }
    pub unsafe fn LPInnerFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.LPInnerFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetLPInnerFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetLPInnerFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn LPInnerFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.LPInnerFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetLPInnerFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetLPInnerFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn HAlpha(&self) -> ::windows::core::Result<super::HierarchyAlpha> {
        let mut result__ = ::windows::core::zeroed::<super::HierarchyAlpha>();
        (::windows::core::Interface::vtable(self).base__.HAlpha)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetHAlpha(&self, alpha: super::HierarchyAlpha) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetHAlpha)(::windows::core::Interface::as_raw(self), alpha).ok()
    }
    pub unsafe fn Guard(&self) -> ::windows::core::Result<super::GuardInterval> {
        let mut result__ = ::windows::core::zeroed::<super::GuardInterval>();
        (::windows::core::Interface::vtable(self).base__.Guard)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetGuard(&self, gi: super::GuardInterval) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetGuard)(::windows::core::Interface::as_raw(self), gi).ok()
    }
    pub unsafe fn Mode(&self) -> ::windows::core::Result<super::TransmissionMode> {
        let mut result__ = ::windows::core::zeroed::<super::TransmissionMode>();
        (::windows::core::Interface::vtable(self).base__.Mode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMode(&self, mode: super::TransmissionMode) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMode)(::windows::core::Interface::as_raw(self), mode).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OtherFrequencyInUse(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.OtherFrequencyInUse)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetOtherFrequencyInUse<P0>(&self, otherfrequencyinuseval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetOtherFrequencyInUse)(::windows::core::Interface::as_raw(self), otherfrequencyinuseval.into_param().abi()).ok()
    }
    pub unsafe fn PhysicalLayerPipeId(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).PhysicalLayerPipeId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPhysicalLayerPipeId(&self, physicallayerpipeidval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPhysicalLayerPipeId)(::windows::core::Interface::as_raw(self), physicallayerpipeidval).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IDVBTLocator2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ILocator, IDigitalLocator, IDVBTLocator);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IDVBTLocator2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IDVBTLocator2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IDVBTLocator2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVBTLocator2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IDVBTLocator2 {
    type Vtable = IDVBTLocator2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IDVBTLocator2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IDVBTLocator2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x448a2edf_ae95_4b43_a3cc_747843c453d4);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IDVBTLocator2_Vtbl {
    pub base__: IDVBTLocator_Vtbl,
    pub PhysicalLayerPipeId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, physicallayerpipeidval: *mut i32) -> ::windows::core::HRESULT,
    pub SetPhysicalLayerPipeId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, physicallayerpipeidval: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IDVBTuneRequest(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IDVBTuneRequest {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuningSpace(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.TuningSpace)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Components(&self) -> ::windows::core::Result<IComponents> {
        let mut result__ = ::windows::core::zeroed::<IComponents>();
        (::windows::core::Interface::vtable(self).base__.Components)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Locator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.Locator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetLocator<P0>(&self, locator: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.SetLocator)(::windows::core::Interface::as_raw(self), locator.into_param().abi()).ok()
    }
    pub unsafe fn ONID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).ONID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetONID(&self, onid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetONID)(::windows::core::Interface::as_raw(self), onid).ok()
    }
    pub unsafe fn TSID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).TSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetTSID(&self, tsid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetTSID)(::windows::core::Interface::as_raw(self), tsid).ok()
    }
    pub unsafe fn SID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).SID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSID(&self, sid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetSID)(::windows::core::Interface::as_raw(self), sid).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IDVBTuneRequest, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuneRequest);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IDVBTuneRequest {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IDVBTuneRequest {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IDVBTuneRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVBTuneRequest").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IDVBTuneRequest {
    type Vtable = IDVBTuneRequest_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IDVBTuneRequest {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IDVBTuneRequest {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0d6f567e_a636_42bb_83ba_ce4c1704afa2);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IDVBTuneRequest_Vtbl {
    pub base__: ITuneRequest_Vtbl,
    pub ONID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, onid: *mut i32) -> ::windows::core::HRESULT,
    pub SetONID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, onid: i32) -> ::windows::core::HRESULT,
    pub TSID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tsid: *mut i32) -> ::windows::core::HRESULT,
    pub SetTSID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tsid: i32) -> ::windows::core::HRESULT,
    pub SID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, sid: *mut i32) -> ::windows::core::HRESULT,
    pub SetSID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, sid: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IDVBTuningSpace(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IDVBTuningSpace {
    pub unsafe fn UniqueName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.UniqueName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetUniqueName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetUniqueName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn FriendlyName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.FriendlyName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFriendlyName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetFriendlyName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn CLSID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.CLSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn NetworkType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetNetworkType<P0>(&self, networktypeguid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetNetworkType)(::windows::core::Interface::as_raw(self), networktypeguid.into_param().abi()).ok()
    }
    pub unsafe fn _NetworkType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_NetworkType(&self, networktypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_NetworkType)(::windows::core::Interface::as_raw(self), networktypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateTuneRequest(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.CreateTuneRequest)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumCategoryGUIDs(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumGUID> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumGUID>();
        (::windows::core::Interface::vtable(self).base__.EnumCategoryGUIDs)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumDeviceMonikers(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumMoniker> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumMoniker>();
        (::windows::core::Interface::vtable(self).base__.EnumDeviceMonikers)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultPreferredComponentTypes(&self) -> ::windows::core::Result<IComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IComponentTypes>();
        (::windows::core::Interface::vtable(self).base__.DefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultPreferredComponentTypes<P0>(&self, newcomponenttypes: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentTypes>,
    {
        (::windows::core::Interface::vtable(self).base__.SetDefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), newcomponenttypes.into_param().abi()).ok()
    }
    pub unsafe fn FrequencyMapping(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.FrequencyMapping)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFrequencyMapping<P0>(&self, mapping: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetFrequencyMapping)(::windows::core::Interface::as_raw(self), mapping.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultLocator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.DefaultLocator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultLocator<P0>(&self, locatorval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.SetDefaultLocator)(::windows::core::Interface::as_raw(self), locatorval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SystemType(&self) -> ::windows::core::Result<super::DVBSystemType> {
        let mut result__ = ::windows::core::zeroed::<super::DVBSystemType>();
        (::windows::core::Interface::vtable(self).SystemType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSystemType(&self, systype: super::DVBSystemType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetSystemType)(::windows::core::Interface::as_raw(self), systype).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IDVBTuningSpace, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuningSpace);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IDVBTuningSpace {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IDVBTuningSpace {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IDVBTuningSpace {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVBTuningSpace").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IDVBTuningSpace {
    type Vtable = IDVBTuningSpace_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IDVBTuningSpace {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IDVBTuningSpace {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xada0b268_3b19_4e5b_acc4_49f852be13ba);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IDVBTuningSpace_Vtbl {
    pub base__: ITuningSpace_Vtbl,
    pub SystemType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, systype: *mut super::DVBSystemType) -> ::windows::core::HRESULT,
    pub SetSystemType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, systype: super::DVBSystemType) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IDVBTuningSpace2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IDVBTuningSpace2 {
    pub unsafe fn UniqueName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.UniqueName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetUniqueName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetUniqueName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn FriendlyName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.FriendlyName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFriendlyName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetFriendlyName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn CLSID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.CLSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn NetworkType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetNetworkType<P0>(&self, networktypeguid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetNetworkType)(::windows::core::Interface::as_raw(self), networktypeguid.into_param().abi()).ok()
    }
    pub unsafe fn _NetworkType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_NetworkType(&self, networktypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Set_NetworkType)(::windows::core::Interface::as_raw(self), networktypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateTuneRequest(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.base__.CreateTuneRequest)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumCategoryGUIDs(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumGUID> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumGUID>();
        (::windows::core::Interface::vtable(self).base__.base__.EnumCategoryGUIDs)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumDeviceMonikers(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumMoniker> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumMoniker>();
        (::windows::core::Interface::vtable(self).base__.base__.EnumDeviceMonikers)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultPreferredComponentTypes(&self) -> ::windows::core::Result<IComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IComponentTypes>();
        (::windows::core::Interface::vtable(self).base__.base__.DefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultPreferredComponentTypes<P0>(&self, newcomponenttypes: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentTypes>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetDefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), newcomponenttypes.into_param().abi()).ok()
    }
    pub unsafe fn FrequencyMapping(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.FrequencyMapping)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFrequencyMapping<P0>(&self, mapping: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetFrequencyMapping)(::windows::core::Interface::as_raw(self), mapping.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultLocator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.DefaultLocator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultLocator<P0>(&self, locatorval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetDefaultLocator)(::windows::core::Interface::as_raw(self), locatorval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SystemType(&self) -> ::windows::core::Result<super::DVBSystemType> {
        let mut result__ = ::windows::core::zeroed::<super::DVBSystemType>();
        (::windows::core::Interface::vtable(self).base__.SystemType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSystemType(&self, systype: super::DVBSystemType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetSystemType)(::windows::core::Interface::as_raw(self), systype).ok()
    }
    pub unsafe fn NetworkID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).NetworkID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetNetworkID(&self, networkid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetNetworkID)(::windows::core::Interface::as_raw(self), networkid).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IDVBTuningSpace2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuningSpace, IDVBTuningSpace);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IDVBTuningSpace2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IDVBTuningSpace2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IDVBTuningSpace2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVBTuningSpace2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IDVBTuningSpace2 {
    type Vtable = IDVBTuningSpace2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IDVBTuningSpace2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IDVBTuningSpace2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x843188b4_ce62_43db_966b_8145a094e040);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IDVBTuningSpace2_Vtbl {
    pub base__: IDVBTuningSpace_Vtbl,
    pub NetworkID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, networkid: *mut i32) -> ::windows::core::HRESULT,
    pub SetNetworkID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, networkid: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDVB_BAT(::windows::core::IUnknown);
impl IDVB_BAT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetBouquetId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetBouquetId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfTableDescriptors(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfTableDescriptors)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByIndex(&self, dwindex: u32, ppdescriptor: *const ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwindex, ::core::mem::transmute(ppdescriptor)).ok()
    }
    pub unsafe fn GetTableDescriptorByTag(&self, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableDescriptorByTag)(::windows::core::Interface::as_raw(self), btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordTransportStreamId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordTransportStreamId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordOriginalNetworkId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordOriginalNetworkId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForNextTable<P0>(&self, hnexttableavailable: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForNextTable)(::windows::core::Interface::as_raw(self), hnexttableavailable.into_param().abi()).ok()
    }
    pub unsafe fn GetNextTable(&self) -> ::windows::core::Result<IDVB_BAT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_BAT>();
        (::windows::core::Interface::vtable(self).GetNextTable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForWhenCurrent<P0>(&self, hnexttableiscurrent: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForWhenCurrent)(::windows::core::Interface::as_raw(self), hnexttableiscurrent.into_param().abi()).ok()
    }
    pub unsafe fn ConvertNextToCurrent(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ConvertNextToCurrent)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IDVB_BAT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDVB_BAT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDVB_BAT {}
impl ::core::fmt::Debug for IDVB_BAT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVB_BAT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDVB_BAT {
    type Vtable = IDVB_BAT_Vtbl;
}
impl ::core::clone::Clone for IDVB_BAT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDVB_BAT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xece9bb0c_43b6_4558_a0ec_1812c34cd6ca);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDVB_BAT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetBouquetId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetCountOfTableDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *const *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordTransportStreamId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordOriginalNetworkId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordCountOfDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForNextTable: usize,
    pub GetNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppbat: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForWhenCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForWhenCurrent: usize,
    pub ConvertNextToCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDVB_DIT(::windows::core::IUnknown);
impl IDVB_DIT {
    pub unsafe fn Initialize<P0>(&self, psectionlist: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetTransitionFlag(&self) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).GetTransitionFlag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDVB_DIT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDVB_DIT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDVB_DIT {}
impl ::core::fmt::Debug for IDVB_DIT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVB_DIT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDVB_DIT {
    type Vtable = IDVB_DIT_Vtbl;
}
impl ::core::clone::Clone for IDVB_DIT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDVB_DIT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x91bffdf9_9432_410f_86ef_1c228ed0ad70);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDVB_DIT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetTransitionFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetTransitionFlag: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDVB_EIT(::windows::core::IUnknown);
impl IDVB_EIT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetServiceId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTransportStreamId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetTransportStreamId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetOriginalNetworkId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetOriginalNetworkId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSegmentLastSectionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetSegmentLastSectionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLastTableId(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLastTableId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordEventId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordEventId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordStartTime(&self, dwrecordindex: u32) -> ::windows::core::Result<MPEG_DATE_AND_TIME> {
        let mut result__ = ::windows::core::zeroed::<MPEG_DATE_AND_TIME>();
        (::windows::core::Interface::vtable(self).GetRecordStartTime)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDuration(&self, dwrecordindex: u32) -> ::windows::core::Result<MPEG_TIME> {
        let mut result__ = ::windows::core::zeroed::<MPEG_TIME>();
        (::windows::core::Interface::vtable(self).GetRecordDuration)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordRunningStatus(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordRunningStatus)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordFreeCAMode(&self, dwrecordindex: u32) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).GetRecordFreeCAMode)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForNextTable<P0>(&self, hnexttableavailable: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForNextTable)(::windows::core::Interface::as_raw(self), hnexttableavailable.into_param().abi()).ok()
    }
    pub unsafe fn GetNextTable(&self) -> ::windows::core::Result<IDVB_EIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_EIT>();
        (::windows::core::Interface::vtable(self).GetNextTable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForWhenCurrent<P0>(&self, hnexttableiscurrent: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForWhenCurrent)(::windows::core::Interface::as_raw(self), hnexttableiscurrent.into_param().abi()).ok()
    }
    pub unsafe fn ConvertNextToCurrent(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ConvertNextToCurrent)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetVersionHash(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetVersionHash)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDVB_EIT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDVB_EIT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDVB_EIT {}
impl ::core::fmt::Debug for IDVB_EIT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVB_EIT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDVB_EIT {
    type Vtable = IDVB_EIT_Vtbl;
}
impl ::core::clone::Clone for IDVB_EIT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDVB_EIT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x442db029_02cb_4495_8b92_1c13375bce99);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDVB_EIT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetServiceId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetTransportStreamId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetOriginalNetworkId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetSegmentLastSectionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLastTableId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordEventId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordStartTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT,
    pub GetRecordDuration: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdval: *mut MPEG_TIME) -> ::windows::core::HRESULT,
    pub GetRecordRunningStatus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetRecordFreeCAMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetRecordFreeCAMode: usize,
    pub GetRecordCountOfDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForNextTable: usize,
    pub GetNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppeit: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForWhenCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForWhenCurrent: usize,
    pub ConvertNextToCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionHash: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDVB_EIT2(::windows::core::IUnknown);
impl IDVB_EIT2 {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).base__.Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).base__.GetServiceId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTransportStreamId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).base__.GetTransportStreamId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetOriginalNetworkId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).base__.GetOriginalNetworkId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSegmentLastSectionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.GetSegmentLastSectionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLastTableId(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.GetLastTableId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordEventId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).base__.GetRecordEventId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordStartTime(&self, dwrecordindex: u32) -> ::windows::core::Result<MPEG_DATE_AND_TIME> {
        let mut result__ = ::windows::core::zeroed::<MPEG_DATE_AND_TIME>();
        (::windows::core::Interface::vtable(self).base__.GetRecordStartTime)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDuration(&self, dwrecordindex: u32) -> ::windows::core::Result<MPEG_TIME> {
        let mut result__ = ::windows::core::zeroed::<MPEG_TIME>();
        (::windows::core::Interface::vtable(self).base__.GetRecordDuration)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordRunningStatus(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.GetRecordRunningStatus)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordFreeCAMode(&self, dwrecordindex: u32) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).base__.GetRecordFreeCAMode)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).base__.GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForNextTable<P0>(&self, hnexttableavailable: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).base__.RegisterForNextTable)(::windows::core::Interface::as_raw(self), hnexttableavailable.into_param().abi()).ok()
    }
    pub unsafe fn GetNextTable(&self) -> ::windows::core::Result<IDVB_EIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_EIT>();
        (::windows::core::Interface::vtable(self).base__.GetNextTable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForWhenCurrent<P0>(&self, hnexttableiscurrent: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).base__.RegisterForWhenCurrent)(::windows::core::Interface::as_raw(self), hnexttableiscurrent.into_param().abi()).ok()
    }
    pub unsafe fn ConvertNextToCurrent(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.ConvertNextToCurrent)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetVersionHash(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetVersionHash)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSegmentInfo(&self, pbtid: *mut u8, pbsegment: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetSegmentInfo)(::windows::core::Interface::as_raw(self), pbtid, pbsegment).ok()
    }
    pub unsafe fn GetRecordSection(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordSection)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDVB_EIT2, ::windows::core::IUnknown, IDVB_EIT);
impl ::core::cmp::PartialEq for IDVB_EIT2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDVB_EIT2 {}
impl ::core::fmt::Debug for IDVB_EIT2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVB_EIT2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDVB_EIT2 {
    type Vtable = IDVB_EIT2_Vtbl;
}
impl ::core::clone::Clone for IDVB_EIT2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDVB_EIT2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x61a389e0_9b9e_4ba0_aeea_5ddd159820ea);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDVB_EIT2_Vtbl {
    pub base__: IDVB_EIT_Vtbl,
    pub GetSegmentInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbtid: *mut u8, pbsegment: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordSection: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDVB_NIT(::windows::core::IUnknown);
impl IDVB_NIT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetNetworkId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetNetworkId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfTableDescriptors(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfTableDescriptors)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByIndex(&self, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetTableDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByTag(&self, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableDescriptorByTag)(::windows::core::Interface::as_raw(self), btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordTransportStreamId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordTransportStreamId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordOriginalNetworkId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordOriginalNetworkId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForNextTable<P0>(&self, hnexttableavailable: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForNextTable)(::windows::core::Interface::as_raw(self), hnexttableavailable.into_param().abi()).ok()
    }
    pub unsafe fn GetNextTable(&self) -> ::windows::core::Result<IDVB_NIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_NIT>();
        (::windows::core::Interface::vtable(self).GetNextTable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForWhenCurrent<P0>(&self, hnexttableiscurrent: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForWhenCurrent)(::windows::core::Interface::as_raw(self), hnexttableiscurrent.into_param().abi()).ok()
    }
    pub unsafe fn ConvertNextToCurrent(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ConvertNextToCurrent)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetVersionHash(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetVersionHash)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDVB_NIT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDVB_NIT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDVB_NIT {}
impl ::core::fmt::Debug for IDVB_NIT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVB_NIT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDVB_NIT {
    type Vtable = IDVB_NIT_Vtbl;
}
impl ::core::clone::Clone for IDVB_NIT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDVB_NIT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc64935f4_29e4_4e22_911a_63f7f55cb097);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDVB_NIT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetNetworkId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetCountOfTableDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordTransportStreamId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordOriginalNetworkId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordCountOfDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForNextTable: usize,
    pub GetNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppnit: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForWhenCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForWhenCurrent: usize,
    pub ConvertNextToCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionHash: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDVB_RST(::windows::core::IUnknown);
impl IDVB_RST {
    pub unsafe fn Initialize<P0>(&self, psectionlist: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi()).ok()
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordTransportStreamId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordTransportStreamId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordOriginalNetworkId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordOriginalNetworkId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordServiceId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordServiceId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordEventId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordEventId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordRunningStatus(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordRunningStatus)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDVB_RST, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDVB_RST {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDVB_RST {}
impl ::core::fmt::Debug for IDVB_RST {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVB_RST").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDVB_RST {
    type Vtable = IDVB_RST_Vtbl;
}
impl ::core::clone::Clone for IDVB_RST {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDVB_RST {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf47dcd04_1e23_4fb7_9f96_b40eead10b2b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDVB_RST_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordTransportStreamId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordOriginalNetworkId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordServiceId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordEventId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordRunningStatus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDVB_SDT(::windows::core::IUnknown);
impl IDVB_SDT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTransportStreamId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetTransportStreamId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetOriginalNetworkId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetOriginalNetworkId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordServiceId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordServiceId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordEITScheduleFlag(&self, dwrecordindex: u32) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).GetRecordEITScheduleFlag)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordEITPresentFollowingFlag(&self, dwrecordindex: u32) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).GetRecordEITPresentFollowingFlag)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordRunningStatus(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordRunningStatus)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordFreeCAMode(&self, dwrecordindex: u32) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).GetRecordFreeCAMode)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForNextTable<P0>(&self, hnexttableavailable: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForNextTable)(::windows::core::Interface::as_raw(self), hnexttableavailable.into_param().abi()).ok()
    }
    pub unsafe fn GetNextTable(&self) -> ::windows::core::Result<IDVB_SDT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_SDT>();
        (::windows::core::Interface::vtable(self).GetNextTable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForWhenCurrent<P0>(&self, hnexttableiscurrent: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForWhenCurrent)(::windows::core::Interface::as_raw(self), hnexttableiscurrent.into_param().abi()).ok()
    }
    pub unsafe fn ConvertNextToCurrent(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ConvertNextToCurrent)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetVersionHash(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetVersionHash)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDVB_SDT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDVB_SDT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDVB_SDT {}
impl ::core::fmt::Debug for IDVB_SDT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVB_SDT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDVB_SDT {
    type Vtable = IDVB_SDT_Vtbl;
}
impl ::core::clone::Clone for IDVB_SDT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDVB_SDT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x02cad8d3_fe43_48e2_90bd_450ed9a8a5fd);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDVB_SDT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetTransportStreamId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetOriginalNetworkId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordServiceId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetRecordEITScheduleFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetRecordEITScheduleFlag: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetRecordEITPresentFollowingFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetRecordEITPresentFollowingFlag: usize,
    pub GetRecordRunningStatus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetRecordFreeCAMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetRecordFreeCAMode: usize,
    pub GetRecordCountOfDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForNextTable: usize,
    pub GetNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppsdt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForWhenCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForWhenCurrent: usize,
    pub ConvertNextToCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionHash: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDVB_SIT(::windows::core::IUnknown);
impl IDVB_SIT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfTableDescriptors(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfTableDescriptors)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByIndex(&self, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetTableDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByTag(&self, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableDescriptorByTag)(::windows::core::Interface::as_raw(self), btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordServiceId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordServiceId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordRunningStatus(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordRunningStatus)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForNextTable<P0>(&self, hnexttableavailable: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForNextTable)(::windows::core::Interface::as_raw(self), hnexttableavailable.into_param().abi()).ok()
    }
    pub unsafe fn GetNextTable(&self, dwtimeout: u32) -> ::windows::core::Result<IDVB_SIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_SIT>();
        (::windows::core::Interface::vtable(self).GetNextTable)(::windows::core::Interface::as_raw(self), dwtimeout, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForWhenCurrent<P0>(&self, hnexttableiscurrent: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForWhenCurrent)(::windows::core::Interface::as_raw(self), hnexttableiscurrent.into_param().abi()).ok()
    }
    pub unsafe fn ConvertNextToCurrent(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ConvertNextToCurrent)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IDVB_SIT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDVB_SIT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDVB_SIT {}
impl ::core::fmt::Debug for IDVB_SIT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVB_SIT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDVB_SIT {
    type Vtable = IDVB_SIT_Vtbl;
}
impl ::core::clone::Clone for IDVB_SIT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDVB_SIT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x68cdce53_8bea_45c2_9d9d_acf575a089b5);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDVB_SIT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfTableDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordServiceId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordRunningStatus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordCountOfDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForNextTable: usize,
    pub GetNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppsit: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForWhenCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForWhenCurrent: usize,
    pub ConvertNextToCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDVB_ST(::windows::core::IUnknown);
impl IDVB_ST {
    pub unsafe fn Initialize<P0>(&self, psectionlist: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi()).ok()
    }
    pub unsafe fn GetDataLength(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetDataLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetData(&self) -> ::windows::core::Result<*mut u8> {
        let mut result__ = ::windows::core::zeroed::<*mut u8>();
        (::windows::core::Interface::vtable(self).GetData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDVB_ST, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDVB_ST {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDVB_ST {}
impl ::core::fmt::Debug for IDVB_ST {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVB_ST").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDVB_ST {
    type Vtable = IDVB_ST_Vtbl;
}
impl ::core::clone::Clone for IDVB_ST {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDVB_ST {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x4d5b9f23_2a02_45de_bcda_5d5dbfbfbe62);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDVB_ST_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetDataLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppdata: *mut *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDVB_TDT(::windows::core::IUnknown);
impl IDVB_TDT {
    pub unsafe fn Initialize<P0>(&self, psectionlist: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi()).ok()
    }
    pub unsafe fn GetUTCTime(&self) -> ::windows::core::Result<MPEG_DATE_AND_TIME> {
        let mut result__ = ::windows::core::zeroed::<MPEG_DATE_AND_TIME>();
        (::windows::core::Interface::vtable(self).GetUTCTime)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDVB_TDT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDVB_TDT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDVB_TDT {}
impl ::core::fmt::Debug for IDVB_TDT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVB_TDT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDVB_TDT {
    type Vtable = IDVB_TDT_Vtbl;
}
impl ::core::clone::Clone for IDVB_TDT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDVB_TDT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0780dc7d_d55c_4aef_97e6_6b75906e2796);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDVB_TDT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetUTCTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDVB_TOT(::windows::core::IUnknown);
impl IDVB_TOT {
    pub unsafe fn Initialize<P0>(&self, psectionlist: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi()).ok()
    }
    pub unsafe fn GetUTCTime(&self) -> ::windows::core::Result<MPEG_DATE_AND_TIME> {
        let mut result__ = ::windows::core::zeroed::<MPEG_DATE_AND_TIME>();
        (::windows::core::Interface::vtable(self).GetUTCTime)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfTableDescriptors(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfTableDescriptors)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByIndex(&self, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetTableDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByTag(&self, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableDescriptorByTag)(::windows::core::Interface::as_raw(self), btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
}
::windows::imp::interface_hierarchy!(IDVB_TOT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDVB_TOT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDVB_TOT {}
impl ::core::fmt::Debug for IDVB_TOT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDVB_TOT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDVB_TOT {
    type Vtable = IDVB_TOT_Vtbl;
}
impl ::core::clone::Clone for IDVB_TOT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDVB_TOT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x83295d6a_faba_4ee1_9b15_8067696910ae);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDVB_TOT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetUTCTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT,
    pub GetCountOfTableDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IDigitalCableLocator(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IDigitalCableLocator {
    pub unsafe fn CarrierFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.CarrierFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCarrierFrequency(&self, frequency: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.SetCarrierFrequency)(::windows::core::Interface::as_raw(self), frequency).ok()
    }
    pub unsafe fn InnerFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.InnerFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.SetInnerFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn InnerFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.InnerFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.SetInnerFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.OuterFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.SetOuterFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.OuterFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.SetOuterFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn Modulation(&self) -> ::windows::core::Result<super::ModulationType> {
        let mut result__ = ::windows::core::zeroed::<super::ModulationType>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Modulation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetModulation(&self, modulation: super::ModulationType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.SetModulation)(::windows::core::Interface::as_raw(self), modulation).ok()
    }
    pub unsafe fn SymbolRate(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.SymbolRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSymbolRate(&self, rate: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.SetSymbolRate)(::windows::core::Interface::as_raw(self), rate).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn PhysicalChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.PhysicalChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPhysicalChannel(&self, physicalchannel: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetPhysicalChannel)(::windows::core::Interface::as_raw(self), physicalchannel).ok()
    }
    pub unsafe fn TSID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.TSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetTSID(&self, tsid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetTSID)(::windows::core::Interface::as_raw(self), tsid).ok()
    }
    pub unsafe fn ProgramNumber(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.ProgramNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetProgramNumber(&self, programnumber: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetProgramNumber)(::windows::core::Interface::as_raw(self), programnumber).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IDigitalCableLocator, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ILocator, IDigitalLocator, IATSCLocator, IATSCLocator2);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IDigitalCableLocator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IDigitalCableLocator {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IDigitalCableLocator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDigitalCableLocator").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IDigitalCableLocator {
    type Vtable = IDigitalCableLocator_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IDigitalCableLocator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IDigitalCableLocator {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x48f66a11_171a_419a_9525_beeecd51584c);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IDigitalCableLocator_Vtbl {
    pub base__: IATSCLocator2_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IDigitalCableTuneRequest(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IDigitalCableTuneRequest {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuningSpace(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.TuningSpace)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Components(&self) -> ::windows::core::Result<IComponents> {
        let mut result__ = ::windows::core::zeroed::<IComponents>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Components)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Locator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Locator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetLocator<P0>(&self, locator: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetLocator)(::windows::core::Interface::as_raw(self), locator.into_param().abi()).ok()
    }
    pub unsafe fn Channel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.Channel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetChannel(&self, channel: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetChannel)(::windows::core::Interface::as_raw(self), channel).ok()
    }
    pub unsafe fn MinorChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.MinorChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMinorChannel(&self, minorchannel: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMinorChannel)(::windows::core::Interface::as_raw(self), minorchannel).ok()
    }
    pub unsafe fn MajorChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MajorChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMajorChannel(&self, majorchannel: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMajorChannel)(::windows::core::Interface::as_raw(self), majorchannel).ok()
    }
    pub unsafe fn SourceID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).SourceID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSourceID(&self, sourceid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetSourceID)(::windows::core::Interface::as_raw(self), sourceid).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IDigitalCableTuneRequest, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuneRequest, IChannelTuneRequest, IATSCChannelTuneRequest);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IDigitalCableTuneRequest {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IDigitalCableTuneRequest {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IDigitalCableTuneRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDigitalCableTuneRequest").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IDigitalCableTuneRequest {
    type Vtable = IDigitalCableTuneRequest_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IDigitalCableTuneRequest {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IDigitalCableTuneRequest {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xbad7753b_6b37_4810_ae57_3ce0c4a9e6cb);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IDigitalCableTuneRequest_Vtbl {
    pub base__: IATSCChannelTuneRequest_Vtbl,
    pub MajorChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmajorchannel: *mut i32) -> ::windows::core::HRESULT,
    pub SetMajorChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, majorchannel: i32) -> ::windows::core::HRESULT,
    pub SourceID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psourceid: *mut i32) -> ::windows::core::HRESULT,
    pub SetSourceID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, sourceid: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IDigitalCableTuningSpace(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IDigitalCableTuningSpace {
    pub unsafe fn UniqueName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.UniqueName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetUniqueName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetUniqueName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn FriendlyName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.FriendlyName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFriendlyName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetFriendlyName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn CLSID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.CLSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn NetworkType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetNetworkType<P0>(&self, networktypeguid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetNetworkType)(::windows::core::Interface::as_raw(self), networktypeguid.into_param().abi()).ok()
    }
    pub unsafe fn _NetworkType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_NetworkType(&self, networktypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.Set_NetworkType)(::windows::core::Interface::as_raw(self), networktypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateTuneRequest(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.CreateTuneRequest)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumCategoryGUIDs(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumGUID> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumGUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.EnumCategoryGUIDs)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumDeviceMonikers(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumMoniker> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumMoniker>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.EnumDeviceMonikers)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultPreferredComponentTypes(&self) -> ::windows::core::Result<IComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IComponentTypes>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.DefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultPreferredComponentTypes<P0>(&self, newcomponenttypes: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentTypes>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetDefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), newcomponenttypes.into_param().abi()).ok()
    }
    pub unsafe fn FrequencyMapping(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.FrequencyMapping)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFrequencyMapping<P0>(&self, mapping: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetFrequencyMapping)(::windows::core::Interface::as_raw(self), mapping.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultLocator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.DefaultLocator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultLocator<P0>(&self, locatorval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetDefaultLocator)(::windows::core::Interface::as_raw(self), locatorval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn MinChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.MinChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMinChannel(&self, newminchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetMinChannel)(::windows::core::Interface::as_raw(self), newminchannelval).ok()
    }
    pub unsafe fn MaxChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.MaxChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMaxChannel(&self, newmaxchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetMaxChannel)(::windows::core::Interface::as_raw(self), newmaxchannelval).ok()
    }
    pub unsafe fn InputType(&self) -> ::windows::core::Result<super::TunerInputType> {
        let mut result__ = ::windows::core::zeroed::<super::TunerInputType>();
        (::windows::core::Interface::vtable(self).base__.base__.InputType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInputType(&self, newinputtypeval: super::TunerInputType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetInputType)(::windows::core::Interface::as_raw(self), newinputtypeval).ok()
    }
    pub unsafe fn CountryCode(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.CountryCode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCountryCode(&self, newcountrycodeval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetCountryCode)(::windows::core::Interface::as_raw(self), newcountrycodeval).ok()
    }
    pub unsafe fn MinMinorChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.MinMinorChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMinMinorChannel(&self, newminminorchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMinMinorChannel)(::windows::core::Interface::as_raw(self), newminminorchannelval).ok()
    }
    pub unsafe fn MaxMinorChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.MaxMinorChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMaxMinorChannel(&self, newmaxminorchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMaxMinorChannel)(::windows::core::Interface::as_raw(self), newmaxminorchannelval).ok()
    }
    pub unsafe fn MinPhysicalChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.MinPhysicalChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMinPhysicalChannel(&self, newminphysicalchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMinPhysicalChannel)(::windows::core::Interface::as_raw(self), newminphysicalchannelval).ok()
    }
    pub unsafe fn MaxPhysicalChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.MaxPhysicalChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMaxPhysicalChannel(&self, newmaxphysicalchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMaxPhysicalChannel)(::windows::core::Interface::as_raw(self), newmaxphysicalchannelval).ok()
    }
    pub unsafe fn MinMajorChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MinMajorChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMinMajorChannel(&self, newminmajorchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMinMajorChannel)(::windows::core::Interface::as_raw(self), newminmajorchannelval).ok()
    }
    pub unsafe fn MaxMajorChannel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MaxMajorChannel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMaxMajorChannel(&self, newmaxmajorchannelval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMaxMajorChannel)(::windows::core::Interface::as_raw(self), newmaxmajorchannelval).ok()
    }
    pub unsafe fn MinSourceID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MinSourceID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMinSourceID(&self, newminsourceidval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMinSourceID)(::windows::core::Interface::as_raw(self), newminsourceidval).ok()
    }
    pub unsafe fn MaxSourceID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MaxSourceID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMaxSourceID(&self, newmaxsourceidval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMaxSourceID)(::windows::core::Interface::as_raw(self), newmaxsourceidval).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IDigitalCableTuningSpace, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuningSpace, IAnalogTVTuningSpace, IATSCTuningSpace);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IDigitalCableTuningSpace {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IDigitalCableTuningSpace {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IDigitalCableTuningSpace {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDigitalCableTuningSpace").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IDigitalCableTuningSpace {
    type Vtable = IDigitalCableTuningSpace_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IDigitalCableTuningSpace {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IDigitalCableTuningSpace {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x013f9f9c_b449_4ec7_a6d2_9d4f2fc70ae5);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IDigitalCableTuningSpace_Vtbl {
    pub base__: IATSCTuningSpace_Vtbl,
    pub MinMajorChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, minmajorchannelval: *mut i32) -> ::windows::core::HRESULT,
    pub SetMinMajorChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newminmajorchannelval: i32) -> ::windows::core::HRESULT,
    pub MaxMajorChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, maxmajorchannelval: *mut i32) -> ::windows::core::HRESULT,
    pub SetMaxMajorChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newmaxmajorchannelval: i32) -> ::windows::core::HRESULT,
    pub MinSourceID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, minsourceidval: *mut i32) -> ::windows::core::HRESULT,
    pub SetMinSourceID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newminsourceidval: i32) -> ::windows::core::HRESULT,
    pub MaxSourceID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, maxsourceidval: *mut i32) -> ::windows::core::HRESULT,
    pub SetMaxSourceID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newmaxsourceidval: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IDigitalLocator(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IDigitalLocator {
    pub unsafe fn CarrierFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.CarrierFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCarrierFrequency(&self, frequency: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCarrierFrequency)(::windows::core::Interface::as_raw(self), frequency).ok()
    }
    pub unsafe fn InnerFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.InnerFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetInnerFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn InnerFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.InnerFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetInnerFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.OuterFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetOuterFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.OuterFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetOuterFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn Modulation(&self) -> ::windows::core::Result<super::ModulationType> {
        let mut result__ = ::windows::core::zeroed::<super::ModulationType>();
        (::windows::core::Interface::vtable(self).base__.Modulation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetModulation(&self, modulation: super::ModulationType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetModulation)(::windows::core::Interface::as_raw(self), modulation).ok()
    }
    pub unsafe fn SymbolRate(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.SymbolRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSymbolRate(&self, rate: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetSymbolRate)(::windows::core::Interface::as_raw(self), rate).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IDigitalLocator, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ILocator);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IDigitalLocator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IDigitalLocator {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IDigitalLocator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDigitalLocator").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IDigitalLocator {
    type Vtable = IDigitalLocator_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IDigitalLocator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IDigitalLocator {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x19b595d8_839a_47f0_96df_4f194f3c768c);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IDigitalLocator_Vtbl {
    pub base__: ILocator_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbCableDeliverySystemDescriptor(::windows::core::IUnknown);
impl IDvbCableDeliverySystemDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFrequency(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFECOuter(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetFECOuter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetModulation(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetModulation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSymbolRate(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetSymbolRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFECInner(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetFECInner)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbCableDeliverySystemDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbCableDeliverySystemDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbCableDeliverySystemDescriptor {}
impl ::core::fmt::Debug for IDvbCableDeliverySystemDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbCableDeliverySystemDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbCableDeliverySystemDescriptor {
    type Vtable = IDvbCableDeliverySystemDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbCableDeliverySystemDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbCableDeliverySystemDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xdfb98e36_9e1a_4862_9946_993a4e59017b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbCableDeliverySystemDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetFrequency: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetFECOuter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetModulation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetSymbolRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetFECInner: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbComponentDescriptor(::windows::core::IUnknown);
impl IDvbComponentDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetStreamContent(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetStreamContent)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetComponentType(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetComponentType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetComponentTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetComponentTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLanguageCode(&self, pszcode: &mut [u8; 4]) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetLanguageCode)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pszcode.as_ptr())).ok()
    }
    pub unsafe fn GetTextW(&self, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetTextW)(::windows::core::Interface::as_raw(self), convmode, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbComponentDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbComponentDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbComponentDescriptor {}
impl ::core::fmt::Debug for IDvbComponentDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbComponentDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbComponentDescriptor {
    type Vtable = IDvbComponentDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbComponentDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbComponentDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x91e405cf_80e7_457f_9096_1b9d1ce32141);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbComponentDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetStreamContent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetComponentType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetComponentTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLanguageCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows::core::HRESULT,
    pub GetTextW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbContentDescriptor(::windows::core::IUnknown);
impl IDvbContentDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordContentNibbles(&self, brecordindex: u8, pbvallevel1: *mut u8, pbvallevel2: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordContentNibbles)(::windows::core::Interface::as_raw(self), brecordindex, pbvallevel1, pbvallevel2).ok()
    }
    pub unsafe fn GetRecordUserNibbles(&self, brecordindex: u8, pbval1: *mut u8, pbval2: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordUserNibbles)(::windows::core::Interface::as_raw(self), brecordindex, pbval1, pbval2).ok()
    }
}
::windows::imp::interface_hierarchy!(IDvbContentDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbContentDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbContentDescriptor {}
impl ::core::fmt::Debug for IDvbContentDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbContentDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbContentDescriptor {
    type Vtable = IDvbContentDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbContentDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbContentDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2e883881_a467_412a_9d63_6f2b6da05bf0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbContentDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordContentNibbles: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbvallevel1: *mut u8, pbvallevel2: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordUserNibbles: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval1: *mut u8, pbval2: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbContentIdentifierDescriptor(::windows::core::IUnknown);
impl IDvbContentIdentifierDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCrid(&self, brecordindex: u8, pbtype: *mut u8, pblocation: *mut u8, pblength: *mut u8, ppbbytes: *mut *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordCrid)(::windows::core::Interface::as_raw(self), brecordindex, pbtype, pblocation, pblength, ppbbytes).ok()
    }
}
::windows::imp::interface_hierarchy!(IDvbContentIdentifierDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbContentIdentifierDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbContentIdentifierDescriptor {}
impl ::core::fmt::Debug for IDvbContentIdentifierDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbContentIdentifierDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbContentIdentifierDescriptor {
    type Vtable = IDvbContentIdentifierDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbContentIdentifierDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbContentIdentifierDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x05e0c1ea_f661_4053_9fbf_d93b28359838);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbContentIdentifierDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordCrid: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbtype: *mut u8, pblocation: *mut u8, pblength: *mut u8, ppbbytes: *mut *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbDataBroadcastDescriptor(::windows::core::IUnknown);
impl IDvbDataBroadcastDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDataBroadcastID(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetDataBroadcastID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetComponentTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetComponentTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSelectorLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetSelectorLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSelectorBytes(&self, pblen: *mut u8, pbval: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetSelectorBytes)(::windows::core::Interface::as_raw(self), pblen, pbval).ok()
    }
    pub unsafe fn GetLangID(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetLangID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTextLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTextLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetText(&self, pblen: *mut u8, pbval: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetText)(::windows::core::Interface::as_raw(self), pblen, pbval).ok()
    }
}
::windows::imp::interface_hierarchy!(IDvbDataBroadcastDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbDataBroadcastDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbDataBroadcastDescriptor {}
impl ::core::fmt::Debug for IDvbDataBroadcastDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbDataBroadcastDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbDataBroadcastDescriptor {
    type Vtable = IDvbDataBroadcastDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbDataBroadcastDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbDataBroadcastDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd1ebc1d6_8b60_4c20_9caf_e59382e7c400);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbDataBroadcastDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetDataBroadcastID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetComponentTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetSelectorLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetSelectorBytes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pblen: *mut u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLangID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pulval: *mut u32) -> ::windows::core::HRESULT,
    pub GetTextLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pblen: *mut u8, pbval: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbDataBroadcastIDDescriptor(::windows::core::IUnknown);
impl IDvbDataBroadcastIDDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDataBroadcastID(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetDataBroadcastID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetIDSelectorBytes(&self, pblen: *mut u8, pbval: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetIDSelectorBytes)(::windows::core::Interface::as_raw(self), pblen, pbval).ok()
    }
}
::windows::imp::interface_hierarchy!(IDvbDataBroadcastIDDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbDataBroadcastIDDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbDataBroadcastIDDescriptor {}
impl ::core::fmt::Debug for IDvbDataBroadcastIDDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbDataBroadcastIDDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbDataBroadcastIDDescriptor {
    type Vtable = IDvbDataBroadcastIDDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbDataBroadcastIDDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbDataBroadcastIDDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5f26f518_65c8_4048_91f2_9290f59f7b90);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbDataBroadcastIDDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetDataBroadcastID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetIDSelectorBytes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pblen: *mut u8, pbval: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbDefaultAuthorityDescriptor(::windows::core::IUnknown);
impl IDvbDefaultAuthorityDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDefaultAuthority(&self, pblength: *mut u8, ppbbytes: *mut *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetDefaultAuthority)(::windows::core::Interface::as_raw(self), pblength, ppbbytes).ok()
    }
}
::windows::imp::interface_hierarchy!(IDvbDefaultAuthorityDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbDefaultAuthorityDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbDefaultAuthorityDescriptor {}
impl ::core::fmt::Debug for IDvbDefaultAuthorityDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbDefaultAuthorityDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbDefaultAuthorityDescriptor {
    type Vtable = IDvbDefaultAuthorityDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbDefaultAuthorityDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbDefaultAuthorityDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x05ec24d1_3a31_44e7_b408_67c60a352276);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbDefaultAuthorityDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetDefaultAuthority: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pblength: *mut u8, ppbbytes: *mut *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbExtendedEventDescriptor(::windows::core::IUnknown);
impl IDvbExtendedEventDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDescriptorNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetDescriptorNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLastDescriptorNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLastDescriptorNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLanguageCode(&self, pszcode: &mut [u8; 4]) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetLanguageCode)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pszcode.as_ptr())).ok()
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordItemW(&self, brecordindex: u8, convmode: DVB_STRCONV_MODE, pbstrdesc: *mut ::windows::core::BSTR, pbstritem: *mut ::windows::core::BSTR) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordItemW)(::windows::core::Interface::as_raw(self), brecordindex, convmode, ::core::mem::transmute(pbstrdesc), ::core::mem::transmute(pbstritem)).ok()
    }
    pub unsafe fn GetConcatenatedItemW<P0>(&self, pfollowingdescriptor: P0, convmode: DVB_STRCONV_MODE, pbstrdesc: *mut ::windows::core::BSTR, pbstritem: *mut ::windows::core::BSTR) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IDvbExtendedEventDescriptor>,
    {
        (::windows::core::Interface::vtable(self).GetConcatenatedItemW)(::windows::core::Interface::as_raw(self), pfollowingdescriptor.into_param().abi(), convmode, ::core::mem::transmute(pbstrdesc), ::core::mem::transmute(pbstritem)).ok()
    }
    pub unsafe fn GetTextW(&self, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetTextW)(::windows::core::Interface::as_raw(self), convmode, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetConcatenatedTextW<P0>(&self, followingdescriptor: P0, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR>
    where
        P0: ::windows::core::IntoParam<IDvbExtendedEventDescriptor>,
    {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetConcatenatedTextW)(::windows::core::Interface::as_raw(self), followingdescriptor.into_param().abi(), convmode, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordItemRawBytes(&self, brecordindex: u8, ppbrawitem: *mut *mut u8, pbitemlength: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordItemRawBytes)(::windows::core::Interface::as_raw(self), brecordindex, ppbrawitem, pbitemlength).ok()
    }
}
::windows::imp::interface_hierarchy!(IDvbExtendedEventDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbExtendedEventDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbExtendedEventDescriptor {}
impl ::core::fmt::Debug for IDvbExtendedEventDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbExtendedEventDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbExtendedEventDescriptor {
    type Vtable = IDvbExtendedEventDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbExtendedEventDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbExtendedEventDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc9b22eca_85f4_499f_b1db_efa93a91ee57);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbExtendedEventDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetDescriptorNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLastDescriptorNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLanguageCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordItemW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, convmode: DVB_STRCONV_MODE, pbstrdesc: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>, pbstritem: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub GetConcatenatedItemW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfollowingdescriptor: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrdesc: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>, pbstritem: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub GetTextW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub GetConcatenatedTextW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, followingdescriptor: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub GetRecordItemRawBytes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, ppbrawitem: *mut *mut u8, pbitemlength: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbFrequencyListDescriptor(::windows::core::IUnknown);
impl IDvbFrequencyListDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCodingType(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCodingType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCentreFrequency(&self, brecordindex: u8) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCentreFrequency)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbFrequencyListDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbFrequencyListDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbFrequencyListDescriptor {}
impl ::core::fmt::Debug for IDvbFrequencyListDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbFrequencyListDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbFrequencyListDescriptor {
    type Vtable = IDvbFrequencyListDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbFrequencyListDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbFrequencyListDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1cadb613_e1dd_4512_afa8_bb7a007ef8b1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbFrequencyListDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCodingType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordCentreFrequency: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pdwval: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbHDSimulcastLogicalChannelDescriptor(::windows::core::IUnknown);
impl IDvbHDSimulcastLogicalChannelDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.base__.GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.base__.GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.base__.GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordServiceId(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).base__.base__.GetRecordServiceId)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordLogicalChannelNumber(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).base__.base__.GetRecordLogicalChannelNumber)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordLogicalChannelAndVisibility(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).base__.GetRecordLogicalChannelAndVisibility)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbHDSimulcastLogicalChannelDescriptor, ::windows::core::IUnknown, IDvbLogicalChannelDescriptor, IDvbLogicalChannelDescriptor2);
impl ::core::cmp::PartialEq for IDvbHDSimulcastLogicalChannelDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbHDSimulcastLogicalChannelDescriptor {}
impl ::core::fmt::Debug for IDvbHDSimulcastLogicalChannelDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbHDSimulcastLogicalChannelDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbHDSimulcastLogicalChannelDescriptor {
    type Vtable = IDvbHDSimulcastLogicalChannelDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbHDSimulcastLogicalChannelDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbHDSimulcastLogicalChannelDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1ea8b738_a307_4680_9e26_d0a908c824f4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbHDSimulcastLogicalChannelDescriptor_Vtbl {
    pub base__: IDvbLogicalChannelDescriptor2_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbLinkageDescriptor(::windows::core::IUnknown);
impl IDvbLinkageDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTSId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetTSId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetONId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetONId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetServiceId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLinkageType(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLinkageType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPrivateDataLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetPrivateDataLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPrivateData(&self, pblen: *mut u8, pbdata: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetPrivateData)(::windows::core::Interface::as_raw(self), pblen, pbdata).ok()
    }
}
::windows::imp::interface_hierarchy!(IDvbLinkageDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbLinkageDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbLinkageDescriptor {}
impl ::core::fmt::Debug for IDvbLinkageDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbLinkageDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbLinkageDescriptor {
    type Vtable = IDvbLinkageDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbLinkageDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbLinkageDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1cdf8b31_994a_46fc_acfd_6a6be8934dd5);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbLinkageDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetTSId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetONId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetServiceId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetLinkageType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetPrivateDataLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetPrivateData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pblen: *mut u8, pbdata: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbLogicalChannel2Descriptor(::windows::core::IUnknown);
impl IDvbLogicalChannel2Descriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.base__.GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.base__.GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.base__.GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordServiceId(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).base__.base__.GetRecordServiceId)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordLogicalChannelNumber(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).base__.base__.GetRecordLogicalChannelNumber)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordLogicalChannelAndVisibility(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).base__.GetRecordLogicalChannelAndVisibility)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfLists(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfLists)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetListId(&self, blistindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetListId)(::windows::core::Interface::as_raw(self), blistindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetListNameW(&self, blistindex: u8, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetListNameW)(::windows::core::Interface::as_raw(self), blistindex, convmode, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetListCountryCode(&self, blistindex: u8, pszcode: &mut [u8; 4]) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetListCountryCode)(::windows::core::Interface::as_raw(self), blistindex, ::core::mem::transmute(pszcode.as_ptr())).ok()
    }
    pub unsafe fn GetListCountOfRecords(&self, bchannellistindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetListCountOfRecords)(::windows::core::Interface::as_raw(self), bchannellistindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetListRecordServiceId(&self, blistindex: u8, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetListRecordServiceId)(::windows::core::Interface::as_raw(self), blistindex, brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetListRecordLogicalChannelNumber(&self, blistindex: u8, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetListRecordLogicalChannelNumber)(::windows::core::Interface::as_raw(self), blistindex, brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetListRecordLogicalChannelAndVisibility(&self, blistindex: u8, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetListRecordLogicalChannelAndVisibility)(::windows::core::Interface::as_raw(self), blistindex, brecordindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbLogicalChannel2Descriptor, ::windows::core::IUnknown, IDvbLogicalChannelDescriptor, IDvbLogicalChannelDescriptor2);
impl ::core::cmp::PartialEq for IDvbLogicalChannel2Descriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbLogicalChannel2Descriptor {}
impl ::core::fmt::Debug for IDvbLogicalChannel2Descriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbLogicalChannel2Descriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbLogicalChannel2Descriptor {
    type Vtable = IDvbLogicalChannel2Descriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbLogicalChannel2Descriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbLogicalChannel2Descriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf69c3747_8a30_4980_998c_01fe7f0ba35a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbLogicalChannel2Descriptor_Vtbl {
    pub base__: IDvbLogicalChannelDescriptor2_Vtbl,
    pub GetCountOfLists: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetListId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, blistindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetListNameW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, blistindex: u8, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub GetListCountryCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, blistindex: u8, pszcode: *mut u8) -> ::windows::core::HRESULT,
    pub GetListCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bchannellistindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetListRecordServiceId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, blistindex: u8, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetListRecordLogicalChannelNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, blistindex: u8, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetListRecordLogicalChannelAndVisibility: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, blistindex: u8, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbLogicalChannelDescriptor(::windows::core::IUnknown);
impl IDvbLogicalChannelDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordServiceId(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordServiceId)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordLogicalChannelNumber(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordLogicalChannelNumber)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbLogicalChannelDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbLogicalChannelDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbLogicalChannelDescriptor {}
impl ::core::fmt::Debug for IDvbLogicalChannelDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbLogicalChannelDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbLogicalChannelDescriptor {
    type Vtable = IDvbLogicalChannelDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbLogicalChannelDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbLogicalChannelDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xcf1edaff_3ffd_4cf7_8201_35756acbf85f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbLogicalChannelDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordServiceId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordLogicalChannelNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbLogicalChannelDescriptor2(::windows::core::IUnknown);
impl IDvbLogicalChannelDescriptor2 {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordServiceId(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).base__.GetRecordServiceId)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordLogicalChannelNumber(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).base__.GetRecordLogicalChannelNumber)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordLogicalChannelAndVisibility(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordLogicalChannelAndVisibility)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbLogicalChannelDescriptor2, ::windows::core::IUnknown, IDvbLogicalChannelDescriptor);
impl ::core::cmp::PartialEq for IDvbLogicalChannelDescriptor2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbLogicalChannelDescriptor2 {}
impl ::core::fmt::Debug for IDvbLogicalChannelDescriptor2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbLogicalChannelDescriptor2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbLogicalChannelDescriptor2 {
    type Vtable = IDvbLogicalChannelDescriptor2_Vtbl;
}
impl ::core::clone::Clone for IDvbLogicalChannelDescriptor2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbLogicalChannelDescriptor2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x43aca974_4be8_4b98_bc17_9eafd788b1d7);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbLogicalChannelDescriptor2_Vtbl {
    pub base__: IDvbLogicalChannelDescriptor_Vtbl,
    pub GetRecordLogicalChannelAndVisibility: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbMultilingualServiceNameDescriptor(::windows::core::IUnknown);
impl IDvbMultilingualServiceNameDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordLangId(&self, brecordindex: u8) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordLangId)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordServiceProviderNameW(&self, brecordindex: u8, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetRecordServiceProviderNameW)(::windows::core::Interface::as_raw(self), brecordindex, convmode, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordServiceNameW(&self, brecordindex: u8, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetRecordServiceNameW)(::windows::core::Interface::as_raw(self), brecordindex, convmode, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbMultilingualServiceNameDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbMultilingualServiceNameDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbMultilingualServiceNameDescriptor {}
impl ::core::fmt::Debug for IDvbMultilingualServiceNameDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbMultilingualServiceNameDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbMultilingualServiceNameDescriptor {
    type Vtable = IDvbMultilingualServiceNameDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbMultilingualServiceNameDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbMultilingualServiceNameDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2d80433b_b32c_47ef_987f_e78ebb773e34);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbMultilingualServiceNameDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordLangId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, ulval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordServiceProviderNameW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub GetRecordServiceNameW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbNetworkNameDescriptor(::windows::core::IUnknown);
impl IDvbNetworkNameDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetNetworkName(&self) -> ::windows::core::Result<*mut u8> {
        let mut result__ = ::windows::core::zeroed::<*mut u8>();
        (::windows::core::Interface::vtable(self).GetNetworkName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetNetworkNameW(&self, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetNetworkNameW)(::windows::core::Interface::as_raw(self), convmode, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbNetworkNameDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbNetworkNameDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbNetworkNameDescriptor {}
impl ::core::fmt::Debug for IDvbNetworkNameDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbNetworkNameDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbNetworkNameDescriptor {
    type Vtable = IDvbNetworkNameDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbNetworkNameDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbNetworkNameDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5b2a80cf_35b9_446c_b3e4_048b761dbc51);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbNetworkNameDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetNetworkName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: *mut *mut u8) -> ::windows::core::HRESULT,
    pub GetNetworkNameW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbParentalRatingDescriptor(::windows::core::IUnknown);
impl IDvbParentalRatingDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordRating(&self, brecordindex: u8, pszcountrycode: &mut [u8; 4], pbval: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordRating)(::windows::core::Interface::as_raw(self), brecordindex, ::core::mem::transmute(pszcountrycode.as_ptr()), pbval).ok()
    }
}
::windows::imp::interface_hierarchy!(IDvbParentalRatingDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbParentalRatingDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbParentalRatingDescriptor {}
impl ::core::fmt::Debug for IDvbParentalRatingDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbParentalRatingDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbParentalRatingDescriptor {
    type Vtable = IDvbParentalRatingDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbParentalRatingDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbParentalRatingDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3ad9dde1_fb1b_4186_937f_22e6b5a72a10);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbParentalRatingDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordRating: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pszcountrycode: *mut u8, pbval: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbPrivateDataSpecifierDescriptor(::windows::core::IUnknown);
impl IDvbPrivateDataSpecifierDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPrivateDataSpecifier(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetPrivateDataSpecifier)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbPrivateDataSpecifierDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbPrivateDataSpecifierDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbPrivateDataSpecifierDescriptor {}
impl ::core::fmt::Debug for IDvbPrivateDataSpecifierDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbPrivateDataSpecifierDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbPrivateDataSpecifierDescriptor {
    type Vtable = IDvbPrivateDataSpecifierDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbPrivateDataSpecifierDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbPrivateDataSpecifierDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5660a019_e75a_4b82_9b4c_ed2256d165a2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbPrivateDataSpecifierDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetPrivateDataSpecifier: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbSatelliteDeliverySystemDescriptor(::windows::core::IUnknown);
impl IDvbSatelliteDeliverySystemDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFrequency(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetOrbitalPosition(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetOrbitalPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetWestEastFlag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetWestEastFlag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPolarization(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetPolarization)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetModulation(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetModulation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSymbolRate(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetSymbolRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFECInner(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetFECInner)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbSatelliteDeliverySystemDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbSatelliteDeliverySystemDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbSatelliteDeliverySystemDescriptor {}
impl ::core::fmt::Debug for IDvbSatelliteDeliverySystemDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbSatelliteDeliverySystemDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbSatelliteDeliverySystemDescriptor {
    type Vtable = IDvbSatelliteDeliverySystemDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbSatelliteDeliverySystemDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbSatelliteDeliverySystemDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x02f2225a_805b_4ec5_a9a6_f9b5913cd470);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbSatelliteDeliverySystemDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetFrequency: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetOrbitalPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetWestEastFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetPolarization: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetModulation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetSymbolRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetFECInner: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbServiceAttributeDescriptor(::windows::core::IUnknown);
impl IDvbServiceAttributeDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordServiceId(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordServiceId)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordNumericSelectionFlag(&self, brecordindex: u8) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).GetRecordNumericSelectionFlag)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordVisibleServiceFlag(&self, brecordindex: u8) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).GetRecordVisibleServiceFlag)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbServiceAttributeDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbServiceAttributeDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbServiceAttributeDescriptor {}
impl ::core::fmt::Debug for IDvbServiceAttributeDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbServiceAttributeDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbServiceAttributeDescriptor {
    type Vtable = IDvbServiceAttributeDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbServiceAttributeDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbServiceAttributeDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0f37bd92_d6a1_4854_b950_3a969d27f30e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbServiceAttributeDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordServiceId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetRecordNumericSelectionFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetRecordNumericSelectionFlag: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetRecordVisibleServiceFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetRecordVisibleServiceFlag: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbServiceDescriptor(::windows::core::IUnknown);
impl IDvbServiceDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceType(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetServiceType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceProviderName(&self) -> ::windows::core::Result<*mut u8> {
        let mut result__ = ::windows::core::zeroed::<*mut u8>();
        (::windows::core::Interface::vtable(self).GetServiceProviderName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceProviderNameW(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetServiceProviderNameW)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceName(&self) -> ::windows::core::Result<*mut u8> {
        let mut result__ = ::windows::core::zeroed::<*mut u8>();
        (::windows::core::Interface::vtable(self).GetServiceName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetProcessedServiceName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetProcessedServiceName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceNameEmphasized(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetServiceNameEmphasized)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbServiceDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbServiceDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbServiceDescriptor {}
impl ::core::fmt::Debug for IDvbServiceDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbServiceDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbServiceDescriptor {
    type Vtable = IDvbServiceDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbServiceDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbServiceDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf9c7fbcf_e2d6_464d_b32d_2ef526e49290);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbServiceDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetServiceType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetServiceProviderName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: *mut *mut u8) -> ::windows::core::HRESULT,
    pub GetServiceProviderNameW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub GetServiceName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: *mut *mut u8) -> ::windows::core::HRESULT,
    pub GetProcessedServiceName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub GetServiceNameEmphasized: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbServiceDescriptor2(::windows::core::IUnknown);
impl IDvbServiceDescriptor2 {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceType(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.GetServiceType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceProviderName(&self) -> ::windows::core::Result<*mut u8> {
        let mut result__ = ::windows::core::zeroed::<*mut u8>();
        (::windows::core::Interface::vtable(self).base__.GetServiceProviderName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceProviderNameW(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.GetServiceProviderNameW)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceName(&self) -> ::windows::core::Result<*mut u8> {
        let mut result__ = ::windows::core::zeroed::<*mut u8>();
        (::windows::core::Interface::vtable(self).base__.GetServiceName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetProcessedServiceName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.GetProcessedServiceName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceNameEmphasized(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.GetServiceNameEmphasized)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceProviderNameW2(&self, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetServiceProviderNameW2)(::windows::core::Interface::as_raw(self), convmode, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceNameW(&self, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetServiceNameW)(::windows::core::Interface::as_raw(self), convmode, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbServiceDescriptor2, ::windows::core::IUnknown, IDvbServiceDescriptor);
impl ::core::cmp::PartialEq for IDvbServiceDescriptor2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbServiceDescriptor2 {}
impl ::core::fmt::Debug for IDvbServiceDescriptor2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbServiceDescriptor2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbServiceDescriptor2 {
    type Vtable = IDvbServiceDescriptor2_Vtbl;
}
impl ::core::clone::Clone for IDvbServiceDescriptor2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbServiceDescriptor2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd6c76506_85ab_487c_9b2b_36416511e4a2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbServiceDescriptor2_Vtbl {
    pub base__: IDvbServiceDescriptor_Vtbl,
    pub GetServiceProviderNameW2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub GetServiceNameW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbServiceListDescriptor(::windows::core::IUnknown);
impl IDvbServiceListDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordServiceId(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordServiceId)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordServiceType(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordServiceType)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbServiceListDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbServiceListDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbServiceListDescriptor {}
impl ::core::fmt::Debug for IDvbServiceListDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbServiceListDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbServiceListDescriptor {
    type Vtable = IDvbServiceListDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbServiceListDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbServiceListDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x05db0d8f_6008_491a_acd3_7090952707d0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbServiceListDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordServiceId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordServiceType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbShortEventDescriptor(::windows::core::IUnknown);
impl IDvbShortEventDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLanguageCode(&self, pszcode: &mut [u8; 4]) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetLanguageCode)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pszcode.as_ptr())).ok()
    }
    pub unsafe fn GetEventNameW(&self, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetEventNameW)(::windows::core::Interface::as_raw(self), convmode, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTextW(&self, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetTextW)(::windows::core::Interface::as_raw(self), convmode, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbShortEventDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbShortEventDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbShortEventDescriptor {}
impl ::core::fmt::Debug for IDvbShortEventDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbShortEventDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbShortEventDescriptor {
    type Vtable = IDvbShortEventDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbShortEventDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbShortEventDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb170be92_5b75_458e_9c6e_b0008231491a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbShortEventDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLanguageCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows::core::HRESULT,
    pub GetEventNameW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub GetTextW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbSiParser(::windows::core::IUnknown);
impl IDvbSiParser {
    pub unsafe fn Initialize<P0>(&self, punkmpeg2data: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::IUnknown>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), punkmpeg2data.into_param().abi()).ok()
    }
    pub unsafe fn GetPAT(&self) -> ::windows::core::Result<IPAT> {
        let mut result__ = ::windows::core::zeroed::<IPAT>();
        (::windows::core::Interface::vtable(self).GetPAT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCAT(&self, dwtimeout: u32) -> ::windows::core::Result<ICAT> {
        let mut result__ = ::windows::core::zeroed::<ICAT>();
        (::windows::core::Interface::vtable(self).GetCAT)(::windows::core::Interface::as_raw(self), dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPMT(&self, pid: u16, pwprogramnumber: ::core::option::Option<*const u16>) -> ::windows::core::Result<IPMT> {
        let mut result__ = ::windows::core::zeroed::<IPMT>();
        (::windows::core::Interface::vtable(self).GetPMT)(::windows::core::Interface::as_raw(self), pid, ::core::mem::transmute(pwprogramnumber.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTSDT(&self) -> ::windows::core::Result<ITSDT> {
        let mut result__ = ::windows::core::zeroed::<ITSDT>();
        (::windows::core::Interface::vtable(self).GetTSDT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetNIT(&self, tableid: u8, pwnetworkid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IDVB_NIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_NIT>();
        (::windows::core::Interface::vtable(self).GetNIT)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pwnetworkid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSDT(&self, tableid: u8, pwtransportstreamid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IDVB_SDT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_SDT>();
        (::windows::core::Interface::vtable(self).GetSDT)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pwtransportstreamid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEIT(&self, tableid: u8, pwserviceid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IDVB_EIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_EIT>();
        (::windows::core::Interface::vtable(self).GetEIT)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pwserviceid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetBAT(&self, pwbouquetid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IDVB_BAT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_BAT>();
        (::windows::core::Interface::vtable(self).GetBAT)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pwbouquetid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRST(&self, dwtimeout: u32) -> ::windows::core::Result<IDVB_RST> {
        let mut result__ = ::windows::core::zeroed::<IDVB_RST>();
        (::windows::core::Interface::vtable(self).GetRST)(::windows::core::Interface::as_raw(self), dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetST(&self, pid: u16, dwtimeout: u32) -> ::windows::core::Result<IDVB_ST> {
        let mut result__ = ::windows::core::zeroed::<IDVB_ST>();
        (::windows::core::Interface::vtable(self).GetST)(::windows::core::Interface::as_raw(self), pid, dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTDT(&self) -> ::windows::core::Result<IDVB_TDT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_TDT>();
        (::windows::core::Interface::vtable(self).GetTDT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTOT(&self) -> ::windows::core::Result<IDVB_TOT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_TOT>();
        (::windows::core::Interface::vtable(self).GetTOT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDIT(&self, dwtimeout: u32) -> ::windows::core::Result<IDVB_DIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_DIT>();
        (::windows::core::Interface::vtable(self).GetDIT)(::windows::core::Interface::as_raw(self), dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSIT(&self, dwtimeout: u32) -> ::windows::core::Result<IDVB_SIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_SIT>();
        (::windows::core::Interface::vtable(self).GetSIT)(::windows::core::Interface::as_raw(self), dwtimeout, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbSiParser, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbSiParser {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbSiParser {}
impl ::core::fmt::Debug for IDvbSiParser {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbSiParser").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbSiParser {
    type Vtable = IDvbSiParser_Vtbl;
}
impl ::core::clone::Clone for IDvbSiParser {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbSiParser {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb758a7bd_14dc_449d_b828_35909acb3b1e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbSiParser_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkmpeg2data: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetPAT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pppat: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetCAT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppcat: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetPMT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pid: u16, pwprogramnumber: *const u16, pppmt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTSDT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pptsdt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetNIT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tableid: u8, pwnetworkid: *const u16, ppnit: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetSDT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tableid: u8, pwtransportstreamid: *const u16, ppsdt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetEIT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tableid: u8, pwserviceid: *const u16, ppeit: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetBAT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwbouquetid: *const u16, ppbat: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetRST: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwtimeout: u32, pprst: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetST: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pid: u16, dwtimeout: u32, ppst: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTDT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pptdt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTOT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pptot: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetDIT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppdit: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetSIT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppsit: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbSiParser2(::windows::core::IUnknown);
impl IDvbSiParser2 {
    pub unsafe fn Initialize<P0>(&self, punkmpeg2data: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::IUnknown>,
    {
        (::windows::core::Interface::vtable(self).base__.Initialize)(::windows::core::Interface::as_raw(self), punkmpeg2data.into_param().abi()).ok()
    }
    pub unsafe fn GetPAT(&self) -> ::windows::core::Result<IPAT> {
        let mut result__ = ::windows::core::zeroed::<IPAT>();
        (::windows::core::Interface::vtable(self).base__.GetPAT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCAT(&self, dwtimeout: u32) -> ::windows::core::Result<ICAT> {
        let mut result__ = ::windows::core::zeroed::<ICAT>();
        (::windows::core::Interface::vtable(self).base__.GetCAT)(::windows::core::Interface::as_raw(self), dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPMT(&self, pid: u16, pwprogramnumber: ::core::option::Option<*const u16>) -> ::windows::core::Result<IPMT> {
        let mut result__ = ::windows::core::zeroed::<IPMT>();
        (::windows::core::Interface::vtable(self).base__.GetPMT)(::windows::core::Interface::as_raw(self), pid, ::core::mem::transmute(pwprogramnumber.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTSDT(&self) -> ::windows::core::Result<ITSDT> {
        let mut result__ = ::windows::core::zeroed::<ITSDT>();
        (::windows::core::Interface::vtable(self).base__.GetTSDT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetNIT(&self, tableid: u8, pwnetworkid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IDVB_NIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_NIT>();
        (::windows::core::Interface::vtable(self).base__.GetNIT)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pwnetworkid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSDT(&self, tableid: u8, pwtransportstreamid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IDVB_SDT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_SDT>();
        (::windows::core::Interface::vtable(self).base__.GetSDT)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pwtransportstreamid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEIT(&self, tableid: u8, pwserviceid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IDVB_EIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_EIT>();
        (::windows::core::Interface::vtable(self).base__.GetEIT)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pwserviceid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetBAT(&self, pwbouquetid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IDVB_BAT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_BAT>();
        (::windows::core::Interface::vtable(self).base__.GetBAT)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pwbouquetid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRST(&self, dwtimeout: u32) -> ::windows::core::Result<IDVB_RST> {
        let mut result__ = ::windows::core::zeroed::<IDVB_RST>();
        (::windows::core::Interface::vtable(self).base__.GetRST)(::windows::core::Interface::as_raw(self), dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetST(&self, pid: u16, dwtimeout: u32) -> ::windows::core::Result<IDVB_ST> {
        let mut result__ = ::windows::core::zeroed::<IDVB_ST>();
        (::windows::core::Interface::vtable(self).base__.GetST)(::windows::core::Interface::as_raw(self), pid, dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTDT(&self) -> ::windows::core::Result<IDVB_TDT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_TDT>();
        (::windows::core::Interface::vtable(self).base__.GetTDT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTOT(&self) -> ::windows::core::Result<IDVB_TOT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_TOT>();
        (::windows::core::Interface::vtable(self).base__.GetTOT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDIT(&self, dwtimeout: u32) -> ::windows::core::Result<IDVB_DIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_DIT>();
        (::windows::core::Interface::vtable(self).base__.GetDIT)(::windows::core::Interface::as_raw(self), dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSIT(&self, dwtimeout: u32) -> ::windows::core::Result<IDVB_SIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_SIT>();
        (::windows::core::Interface::vtable(self).base__.GetSIT)(::windows::core::Interface::as_raw(self), dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEIT2(&self, tableid: u8, pwserviceid: ::core::option::Option<*const u16>, pbsegment: ::core::option::Option<*const u8>) -> ::windows::core::Result<IDVB_EIT2> {
        let mut result__ = ::windows::core::zeroed::<IDVB_EIT2>();
        (::windows::core::Interface::vtable(self).GetEIT2)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pwserviceid.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pbsegment.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbSiParser2, ::windows::core::IUnknown, IDvbSiParser);
impl ::core::cmp::PartialEq for IDvbSiParser2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbSiParser2 {}
impl ::core::fmt::Debug for IDvbSiParser2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbSiParser2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbSiParser2 {
    type Vtable = IDvbSiParser2_Vtbl;
}
impl ::core::clone::Clone for IDvbSiParser2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbSiParser2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0ac5525f_f816_42f4_93ba_4c0f32f46e54);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbSiParser2_Vtbl {
    pub base__: IDvbSiParser_Vtbl,
    pub GetEIT2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tableid: u8, pwserviceid: *const u16, pbsegment: *const u8, ppeit: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbSubtitlingDescriptor(::windows::core::IUnknown);
impl IDvbSubtitlingDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordLangId(&self, brecordindex: u8) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordLangId)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordSubtitlingType(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordSubtitlingType)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCompositionPageID(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordCompositionPageID)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordAncillaryPageID(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordAncillaryPageID)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbSubtitlingDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbSubtitlingDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbSubtitlingDescriptor {}
impl ::core::fmt::Debug for IDvbSubtitlingDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbSubtitlingDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbSubtitlingDescriptor {
    type Vtable = IDvbSubtitlingDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbSubtitlingDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbSubtitlingDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9b25fe1d_fa23_4e50_9784_6df8b26f8a49);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbSubtitlingDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordLangId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pulval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordSubtitlingType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordCompositionPageID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordAncillaryPageID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbTeletextDescriptor(::windows::core::IUnknown);
impl IDvbTeletextDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordLangId(&self, brecordindex: u8) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordLangId)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordTeletextType(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordTeletextType)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordMagazineNumber(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordMagazineNumber)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordPageNumber(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordPageNumber)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbTeletextDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbTeletextDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbTeletextDescriptor {}
impl ::core::fmt::Debug for IDvbTeletextDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbTeletextDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbTeletextDescriptor {
    type Vtable = IDvbTeletextDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbTeletextDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbTeletextDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9cd29d47_69c6_4f92_98a9_210af1b7303a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbTeletextDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordLangId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pulval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordTeletextType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordMagazineNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordPageNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbTerrestrial2DeliverySystemDescriptor(::windows::core::IUnknown);
impl IDvbTerrestrial2DeliverySystemDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTagExtension(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTagExtension)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCentreFrequency(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCentreFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPLPId(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetPLPId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetT2SystemId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetT2SystemId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetMultipleInputMode(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetMultipleInputMode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetBandwidth(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetBandwidth)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetGuardInterval(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetGuardInterval)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTransmissionMode(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTransmissionMode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCellId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetCellId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetOtherFrequencyFlag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetOtherFrequencyFlag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTFSFlag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTFSFlag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbTerrestrial2DeliverySystemDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbTerrestrial2DeliverySystemDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbTerrestrial2DeliverySystemDescriptor {}
impl ::core::fmt::Debug for IDvbTerrestrial2DeliverySystemDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbTerrestrial2DeliverySystemDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbTerrestrial2DeliverySystemDescriptor {
    type Vtable = IDvbTerrestrial2DeliverySystemDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbTerrestrial2DeliverySystemDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbTerrestrial2DeliverySystemDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x20ee9be9_cd57_49ab_8f6e_1d07aeb8e482);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbTerrestrial2DeliverySystemDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetTagExtension: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCentreFrequency: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetPLPId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetT2SystemId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetMultipleInputMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetBandwidth: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetGuardInterval: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetTransmissionMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCellId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetOtherFrequencyFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetTFSFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IDvbTerrestrialDeliverySystemDescriptor(::windows::core::IUnknown);
impl IDvbTerrestrialDeliverySystemDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCentreFrequency(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCentreFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetBandwidth(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetBandwidth)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetConstellation(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetConstellation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetHierarchyInformation(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetHierarchyInformation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCodeRateHPStream(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCodeRateHPStream)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCodeRateLPStream(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCodeRateLPStream)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetGuardInterval(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetGuardInterval)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTransmissionMode(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTransmissionMode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetOtherFrequencyFlag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetOtherFrequencyFlag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IDvbTerrestrialDeliverySystemDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IDvbTerrestrialDeliverySystemDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDvbTerrestrialDeliverySystemDescriptor {}
impl ::core::fmt::Debug for IDvbTerrestrialDeliverySystemDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDvbTerrestrialDeliverySystemDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IDvbTerrestrialDeliverySystemDescriptor {
    type Vtable = IDvbTerrestrialDeliverySystemDescriptor_Vtbl;
}
impl ::core::clone::Clone for IDvbTerrestrialDeliverySystemDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IDvbTerrestrialDeliverySystemDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xed7e1b91_d12e_420c_b41d_a49d84fe1823);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDvbTerrestrialDeliverySystemDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCentreFrequency: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetBandwidth: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetConstellation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetHierarchyInformation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCodeRateHPStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCodeRateLPStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetGuardInterval: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetTransmissionMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetOtherFrequencyFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IESCloseMmiEvent(::windows::core::IUnknown);
impl IESCloseMmiEvent {
    pub unsafe fn GetEventId(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetEventId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEventType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.GetEventType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCompletionStatus(&self, dwresult: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCompletionStatus)(::windows::core::Interface::as_raw(self), dwresult).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetData(&self) -> ::windows::core::Result<*mut super::super::super::System::Com::SAFEARRAY> {
        let mut result__ = ::windows::core::zeroed::<*mut super::super::super::System::Com::SAFEARRAY>();
        (::windows::core::Interface::vtable(self).base__.GetData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetStringData(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.GetStringData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDialogNumber(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetDialogNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IESCloseMmiEvent, ::windows::core::IUnknown, super::IESEvent);
impl ::core::cmp::PartialEq for IESCloseMmiEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IESCloseMmiEvent {}
impl ::core::fmt::Debug for IESCloseMmiEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IESCloseMmiEvent").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IESCloseMmiEvent {
    type Vtable = IESCloseMmiEvent_Vtbl;
}
impl ::core::clone::Clone for IESCloseMmiEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IESCloseMmiEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6b80e96f_55e2_45aa_b754_0c23c8e7d5c1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IESCloseMmiEvent_Vtbl {
    pub base__: super::IESEvent_Vtbl,
    pub GetDialogNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdialognumber: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IESEventFactory(::windows::core::IUnknown);
impl IESEventFactory {
    pub unsafe fn CreateESEvent<P0, P1, P2>(&self, pserviceprovider: P0, dweventid: u32, guideventtype: ::windows::core::GUID, peventdata: &[u8], bstrbaseurl: P1, pinitcontext: P2) -> ::windows::core::Result<super::IESEvent>
    where
        P0: ::windows::core::IntoParam<::windows::core::IUnknown>,
        P1: ::windows::core::IntoParam<::windows::core::BSTR>,
        P2: ::windows::core::IntoParam<::windows::core::IUnknown>,
    {
        let mut result__ = ::windows::core::zeroed::<super::IESEvent>();
        (::windows::core::Interface::vtable(self).CreateESEvent)(::windows::core::Interface::as_raw(self), pserviceprovider.into_param().abi(), dweventid, ::core::mem::transmute(guideventtype), peventdata.len() as _, ::core::mem::transmute(peventdata.as_ptr()), bstrbaseurl.into_param().abi(), pinitcontext.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IESEventFactory, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IESEventFactory {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IESEventFactory {}
impl ::core::fmt::Debug for IESEventFactory {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IESEventFactory").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IESEventFactory {
    type Vtable = IESEventFactory_Vtbl;
}
impl ::core::clone::Clone for IESEventFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IESEventFactory {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x506a09b8_7f86_4e04_ac05_3303bfe8fc49);
}
#[repr(C)]
#[doc(hidden)]
pub struct IESEventFactory_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub CreateESEvent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pserviceprovider: *mut ::core::ffi::c_void, dweventid: u32, guideventtype: ::windows::core::GUID, dweventdatalength: u32, peventdata: *const u8, bstrbaseurl: ::std::mem::MaybeUninit<::windows::core::BSTR>, pinitcontext: *mut ::core::ffi::c_void, ppesevent: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IESEventService(::windows::core::IUnknown);
impl IESEventService {
    pub unsafe fn FireESEvent<P0>(&self, pesevent: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::IESEvent>,
    {
        (::windows::core::Interface::vtable(self).FireESEvent)(::windows::core::Interface::as_raw(self), pesevent.into_param().abi()).ok()
    }
}
::windows::imp::interface_hierarchy!(IESEventService, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IESEventService {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IESEventService {}
impl ::core::fmt::Debug for IESEventService {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IESEventService").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IESEventService {
    type Vtable = IESEventService_Vtbl;
}
impl ::core::clone::Clone for IESEventService {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IESEventService {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xed89a619_4c06_4b2f_99eb_c7669b13047c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IESEventService_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub FireESEvent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pesevent: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IESEventServiceConfiguration(::windows::core::IUnknown);
impl IESEventServiceConfiguration {
    pub unsafe fn SetParent<P0>(&self, peventservice: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IESEventService>,
    {
        (::windows::core::Interface::vtable(self).SetParent)(::windows::core::Interface::as_raw(self), peventservice.into_param().abi()).ok()
    }
    pub unsafe fn RemoveParent(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveParent)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetOwner<P0>(&self, pesevents: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::IESEvents>,
    {
        (::windows::core::Interface::vtable(self).SetOwner)(::windows::core::Interface::as_raw(self), pesevents.into_param().abi()).ok()
    }
    pub unsafe fn RemoveOwner(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveOwner)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetGraph<P0>(&self, pgraph: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::IFilterGraph>,
    {
        (::windows::core::Interface::vtable(self).SetGraph)(::windows::core::Interface::as_raw(self), pgraph.into_param().abi()).ok()
    }
    pub unsafe fn RemoveGraph<P0>(&self, pgraph: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::IFilterGraph>,
    {
        (::windows::core::Interface::vtable(self).RemoveGraph)(::windows::core::Interface::as_raw(self), pgraph.into_param().abi()).ok()
    }
}
::windows::imp::interface_hierarchy!(IESEventServiceConfiguration, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IESEventServiceConfiguration {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IESEventServiceConfiguration {}
impl ::core::fmt::Debug for IESEventServiceConfiguration {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IESEventServiceConfiguration").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IESEventServiceConfiguration {
    type Vtable = IESEventServiceConfiguration_Vtbl;
}
impl ::core::clone::Clone for IESEventServiceConfiguration {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IESEventServiceConfiguration {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x33b9daae_9309_491d_a051_bcad2a70cd66);
}
#[repr(C)]
#[doc(hidden)]
pub struct IESEventServiceConfiguration_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub SetParent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, peventservice: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub RemoveParent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub SetOwner: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pesevents: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub RemoveOwner: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub SetGraph: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pgraph: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub RemoveGraph: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pgraph: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IESFileExpiryDateEvent(::windows::core::IUnknown);
impl IESFileExpiryDateEvent {
    pub unsafe fn GetEventId(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetEventId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEventType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.GetEventType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCompletionStatus(&self, dwresult: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCompletionStatus)(::windows::core::Interface::as_raw(self), dwresult).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetData(&self) -> ::windows::core::Result<*mut super::super::super::System::Com::SAFEARRAY> {
        let mut result__ = ::windows::core::zeroed::<*mut super::super::super::System::Com::SAFEARRAY>();
        (::windows::core::Interface::vtable(self).base__.GetData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetStringData(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.GetStringData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTunerId(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).GetTunerId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetExpiryDate(&self) -> ::windows::core::Result<u64> {
        let mut result__ = ::windows::core::zeroed::<u64>();
        (::windows::core::Interface::vtable(self).GetExpiryDate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFinalExpiryDate(&self) -> ::windows::core::Result<u64> {
        let mut result__ = ::windows::core::zeroed::<u64>();
        (::windows::core::Interface::vtable(self).GetFinalExpiryDate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetMaxRenewalCount(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetMaxRenewalCount)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsEntitlementTokenPresent(&self) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).IsEntitlementTokenPresent)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn DoesExpireAfterFirstUse(&self) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).DoesExpireAfterFirstUse)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IESFileExpiryDateEvent, ::windows::core::IUnknown, super::IESEvent);
impl ::core::cmp::PartialEq for IESFileExpiryDateEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IESFileExpiryDateEvent {}
impl ::core::fmt::Debug for IESFileExpiryDateEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IESFileExpiryDateEvent").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IESFileExpiryDateEvent {
    type Vtable = IESFileExpiryDateEvent_Vtbl;
}
impl ::core::clone::Clone for IESFileExpiryDateEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IESFileExpiryDateEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xba9edcb6_4d36_4cfe_8c56_87a6b0ca48e1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IESFileExpiryDateEvent_Vtbl {
    pub base__: super::IESEvent_Vtbl,
    pub GetTunerId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pguidtunerid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub GetExpiryDate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pqwexpirydate: *mut u64) -> ::windows::core::HRESULT,
    pub GetFinalExpiryDate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pqwexpirydate: *mut u64) -> ::windows::core::HRESULT,
    pub GetMaxRenewalCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwmaxrenewalcount: *mut u32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub IsEntitlementTokenPresent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfenttokenpresent: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsEntitlementTokenPresent: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub DoesExpireAfterFirstUse: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfexpireafterfirstuse: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    DoesExpireAfterFirstUse: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IESIsdbCasResponseEvent(::windows::core::IUnknown);
impl IESIsdbCasResponseEvent {
    pub unsafe fn GetEventId(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetEventId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEventType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.GetEventType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCompletionStatus(&self, dwresult: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCompletionStatus)(::windows::core::Interface::as_raw(self), dwresult).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetData(&self) -> ::windows::core::Result<*mut super::super::super::System::Com::SAFEARRAY> {
        let mut result__ = ::windows::core::zeroed::<*mut super::super::super::System::Com::SAFEARRAY>();
        (::windows::core::Interface::vtable(self).base__.GetData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetStringData(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.GetStringData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRequestId(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRequestId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetStatus(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetStatus)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDataLength(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetDataLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetResponseData(&self) -> ::windows::core::Result<*mut super::super::super::System::Com::SAFEARRAY> {
        let mut result__ = ::windows::core::zeroed::<*mut super::super::super::System::Com::SAFEARRAY>();
        (::windows::core::Interface::vtable(self).GetResponseData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IESIsdbCasResponseEvent, ::windows::core::IUnknown, super::IESEvent);
impl ::core::cmp::PartialEq for IESIsdbCasResponseEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IESIsdbCasResponseEvent {}
impl ::core::fmt::Debug for IESIsdbCasResponseEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IESIsdbCasResponseEvent").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IESIsdbCasResponseEvent {
    type Vtable = IESIsdbCasResponseEvent_Vtbl;
}
impl ::core::clone::Clone for IESIsdbCasResponseEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IESIsdbCasResponseEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2017cb03_dc0f_4c24_83ca_36307b2cd19f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IESIsdbCasResponseEvent_Vtbl {
    pub base__: super::IESEvent_Vtbl,
    pub GetRequestId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prequestid: *mut u32) -> ::windows::core::HRESULT,
    pub GetStatus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pstatus: *mut u32) -> ::windows::core::HRESULT,
    pub GetDataLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prequestlength: *mut u32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub GetResponseData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbdata: *mut *mut super::super::super::System::Com::SAFEARRAY) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetResponseData: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IESLicenseRenewalResultEvent(::windows::core::IUnknown);
impl IESLicenseRenewalResultEvent {
    pub unsafe fn GetEventId(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetEventId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEventType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.GetEventType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCompletionStatus(&self, dwresult: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCompletionStatus)(::windows::core::Interface::as_raw(self), dwresult).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetData(&self) -> ::windows::core::Result<*mut super::super::super::System::Com::SAFEARRAY> {
        let mut result__ = ::windows::core::zeroed::<*mut super::super::super::System::Com::SAFEARRAY>();
        (::windows::core::Interface::vtable(self).base__.GetData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetStringData(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.GetStringData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCallersId(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCallersId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFileName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetFileName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsRenewalSuccessful(&self) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).IsRenewalSuccessful)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsCheckEntitlementCallRequired(&self) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).IsCheckEntitlementCallRequired)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDescrambledStatus(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetDescrambledStatus)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRenewalResultCode(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRenewalResultCode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCASFailureCode(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCASFailureCode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRenewalHResult(&self) -> ::windows::core::Result<::windows::core::HRESULT> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::HRESULT>();
        (::windows::core::Interface::vtable(self).GetRenewalHResult)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEntitlementTokenLength(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetEntitlementTokenLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetEntitlementToken(&self) -> ::windows::core::Result<*mut super::super::super::System::Com::SAFEARRAY> {
        let mut result__ = ::windows::core::zeroed::<*mut super::super::super::System::Com::SAFEARRAY>();
        (::windows::core::Interface::vtable(self).GetEntitlementToken)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetExpiryDate(&self) -> ::windows::core::Result<u64> {
        let mut result__ = ::windows::core::zeroed::<u64>();
        (::windows::core::Interface::vtable(self).GetExpiryDate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IESLicenseRenewalResultEvent, ::windows::core::IUnknown, super::IESEvent);
impl ::core::cmp::PartialEq for IESLicenseRenewalResultEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IESLicenseRenewalResultEvent {}
impl ::core::fmt::Debug for IESLicenseRenewalResultEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IESLicenseRenewalResultEvent").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IESLicenseRenewalResultEvent {
    type Vtable = IESLicenseRenewalResultEvent_Vtbl;
}
impl ::core::clone::Clone for IESLicenseRenewalResultEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IESLicenseRenewalResultEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd5a48ef5_a81b_4df0_acaa_5e35e7ea45d4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IESLicenseRenewalResultEvent_Vtbl {
    pub base__: super::IESEvent_Vtbl,
    pub GetCallersId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwcallersid: *mut u32) -> ::windows::core::HRESULT,
    pub GetFileName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrfilename: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub IsRenewalSuccessful: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfrenewalsuccessful: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsRenewalSuccessful: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub IsCheckEntitlementCallRequired: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfcheckenttokencallneeded: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsCheckEntitlementCallRequired: usize,
    pub GetDescrambledStatus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdescrambledstatus: *mut u32) -> ::windows::core::HRESULT,
    pub GetRenewalResultCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwrenewalresultcode: *mut u32) -> ::windows::core::HRESULT,
    pub GetCASFailureCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwcasfailurecode: *mut u32) -> ::windows::core::HRESULT,
    pub GetRenewalHResult: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phr: *mut ::windows::core::HRESULT) -> ::windows::core::HRESULT,
    pub GetEntitlementTokenLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwlength: *mut u32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub GetEntitlementToken: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbdata: *mut *mut super::super::super::System::Com::SAFEARRAY) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetEntitlementToken: usize,
    pub GetExpiryDate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pqwexpirydate: *mut u64) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IESOpenMmiEvent(::windows::core::IUnknown);
impl IESOpenMmiEvent {
    pub unsafe fn GetEventId(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetEventId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEventType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.GetEventType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCompletionStatus(&self, dwresult: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCompletionStatus)(::windows::core::Interface::as_raw(self), dwresult).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetData(&self) -> ::windows::core::Result<*mut super::super::super::System::Com::SAFEARRAY> {
        let mut result__ = ::windows::core::zeroed::<*mut super::super::super::System::Com::SAFEARRAY>();
        (::windows::core::Interface::vtable(self).base__.GetData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetStringData(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.GetStringData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDialogNumber(&self, pdialogrequest: *mut u32, pdialognumber: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetDialogNumber)(::windows::core::Interface::as_raw(self), pdialogrequest, pdialognumber).ok()
    }
    pub unsafe fn GetDialogType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).GetDialogType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetDialogData(&self) -> ::windows::core::Result<*mut super::super::super::System::Com::SAFEARRAY> {
        let mut result__ = ::windows::core::zeroed::<*mut super::super::super::System::Com::SAFEARRAY>();
        (::windows::core::Interface::vtable(self).GetDialogData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDialogStringData(&self, pbstrbaseurl: *mut ::windows::core::BSTR, pbstrdata: *mut ::windows::core::BSTR) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetDialogStringData)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pbstrbaseurl), ::core::mem::transmute(pbstrdata)).ok()
    }
}
::windows::imp::interface_hierarchy!(IESOpenMmiEvent, ::windows::core::IUnknown, super::IESEvent);
impl ::core::cmp::PartialEq for IESOpenMmiEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IESOpenMmiEvent {}
impl ::core::fmt::Debug for IESOpenMmiEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IESOpenMmiEvent").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IESOpenMmiEvent {
    type Vtable = IESOpenMmiEvent_Vtbl;
}
impl ::core::clone::Clone for IESOpenMmiEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IESOpenMmiEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xba4b6526_1a35_4635_8b56_3ec612746a8c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IESOpenMmiEvent_Vtbl {
    pub base__: super::IESEvent_Vtbl,
    pub GetDialogNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdialogrequest: *mut u32, pdialognumber: *mut u32) -> ::windows::core::HRESULT,
    pub GetDialogType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guiddialogtype: *mut ::windows::core::GUID) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub GetDialogData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbdata: *mut *mut super::super::super::System::Com::SAFEARRAY) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetDialogData: usize,
    pub GetDialogStringData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrbaseurl: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>, pbstrdata: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IESRequestTunerEvent(::windows::core::IUnknown);
impl IESRequestTunerEvent {
    pub unsafe fn GetEventId(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetEventId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEventType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.GetEventType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCompletionStatus(&self, dwresult: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCompletionStatus)(::windows::core::Interface::as_raw(self), dwresult).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetData(&self) -> ::windows::core::Result<*mut super::super::super::System::Com::SAFEARRAY> {
        let mut result__ = ::windows::core::zeroed::<*mut super::super::super::System::Com::SAFEARRAY>();
        (::windows::core::Interface::vtable(self).base__.GetData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetStringData(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.GetStringData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPriority(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetPriority)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetReason(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetReason)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetConsequences(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetConsequences)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEstimatedTime(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetEstimatedTime)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IESRequestTunerEvent, ::windows::core::IUnknown, super::IESEvent);
impl ::core::cmp::PartialEq for IESRequestTunerEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IESRequestTunerEvent {}
impl ::core::fmt::Debug for IESRequestTunerEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IESRequestTunerEvent").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IESRequestTunerEvent {
    type Vtable = IESRequestTunerEvent_Vtbl;
}
impl ::core::clone::Clone for IESRequestTunerEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IESRequestTunerEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x54c7a5e8_c3bb_4f51_af14_e0e2c0e34c6d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IESRequestTunerEvent_Vtbl {
    pub base__: super::IESEvent_Vtbl,
    pub GetPriority: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbypriority: *mut u8) -> ::windows::core::HRESULT,
    pub GetReason: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbyreason: *mut u8) -> ::windows::core::HRESULT,
    pub GetConsequences: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbyconsequences: *mut u8) -> ::windows::core::HRESULT,
    pub GetEstimatedTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwestimatedtime: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IESValueUpdatedEvent(::windows::core::IUnknown);
impl IESValueUpdatedEvent {
    pub unsafe fn GetEventId(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetEventId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEventType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.GetEventType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCompletionStatus(&self, dwresult: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCompletionStatus)(::windows::core::Interface::as_raw(self), dwresult).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetData(&self) -> ::windows::core::Result<*mut super::super::super::System::Com::SAFEARRAY> {
        let mut result__ = ::windows::core::zeroed::<*mut super::super::super::System::Com::SAFEARRAY>();
        (::windows::core::Interface::vtable(self).base__.GetData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetStringData(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.GetStringData)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetValueNames(&self) -> ::windows::core::Result<*mut super::super::super::System::Com::SAFEARRAY> {
        let mut result__ = ::windows::core::zeroed::<*mut super::super::super::System::Com::SAFEARRAY>();
        (::windows::core::Interface::vtable(self).GetValueNames)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IESValueUpdatedEvent, ::windows::core::IUnknown, super::IESEvent);
impl ::core::cmp::PartialEq for IESValueUpdatedEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IESValueUpdatedEvent {}
impl ::core::fmt::Debug for IESValueUpdatedEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IESValueUpdatedEvent").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IESValueUpdatedEvent {
    type Vtable = IESValueUpdatedEvent_Vtbl;
}
impl ::core::clone::Clone for IESValueUpdatedEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IESValueUpdatedEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8a24c46e_bb63_4664_8602_5d9c718c146d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IESValueUpdatedEvent_Vtbl {
    pub base__: super::IESEvent_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub GetValueNames: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrnames: *mut *mut super::super::super::System::Com::SAFEARRAY) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetValueNames: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IETFilter(::windows::core::IUnknown);
impl IETFilter {
    pub unsafe fn EvalRatObjOK(&self) -> ::windows::core::Result<::windows::core::HRESULT> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::HRESULT>();
        (::windows::core::Interface::vtable(self).EvalRatObjOK)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCurrRating(&self, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetCurrRating)(::windows::core::Interface::as_raw(self), pensystem, penrating, plbfenattr).ok()
    }
    pub unsafe fn GetCurrLicenseExpDate(&self, prottype: *const ProtType) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).GetCurrLicenseExpDate)(::windows::core::Interface::as_raw(self), prottype, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLastErrorCode(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetLastErrorCode)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetRecordingOn<P0>(&self, frecstate: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetRecordingOn)(::windows::core::Interface::as_raw(self), frecstate.into_param().abi()).ok()
    }
}
::windows::imp::interface_hierarchy!(IETFilter, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IETFilter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IETFilter {}
impl ::core::fmt::Debug for IETFilter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IETFilter").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IETFilter {
    type Vtable = IETFilter_Vtbl;
}
impl ::core::clone::Clone for IETFilter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IETFilter {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4b1_0049_4e2b_98fb_9537f6ce516d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IETFilter_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub EvalRatObjOK: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phrcocreateretval: *mut ::windows::core::HRESULT) -> ::windows::core::HRESULT,
    pub GetCurrRating: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows::core::HRESULT,
    pub GetCurrLicenseExpDate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prottype: *const ProtType, lpdatetime: *mut i32) -> ::windows::core::HRESULT,
    pub GetLastErrorCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetRecordingOn: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, frecstate: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetRecordingOn: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IETFilterConfig(::windows::core::IUnknown);
impl IETFilterConfig {
    pub unsafe fn InitLicense(&self, licenseid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).InitLicense)(::windows::core::Interface::as_raw(self), licenseid).ok()
    }
    pub unsafe fn GetSecureChannelObject(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).GetSecureChannelObject)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IETFilterConfig, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IETFilterConfig {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IETFilterConfig {}
impl ::core::fmt::Debug for IETFilterConfig {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IETFilterConfig").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IETFilterConfig {
    type Vtable = IETFilterConfig_Vtbl;
}
impl ::core::clone::Clone for IETFilterConfig {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IETFilterConfig {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4d1_0049_4e2b_98fb_9537f6ce516d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IETFilterConfig_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub InitLicense: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, licenseid: i32) -> ::windows::core::HRESULT,
    pub GetSecureChannelObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppunkdrmsecurechannel: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IETFilterEvents(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IETFilterEvents {}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IETFilterEvents, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IETFilterEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IETFilterEvents {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IETFilterEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IETFilterEvents").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IETFilterEvents {
    type Vtable = IETFilterEvents_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IETFilterEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IETFilterEvents {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4c1_0049_4e2b_98fb_9537f6ce516d);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IETFilterEvents_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IEnumComponentTypes(::windows::core::IUnknown);
impl IEnumComponentTypes {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Next(&self, rgelt: &mut [::core::option::Option<IComponentType>], pceltfetched: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Next)(::windows::core::Interface::as_raw(self), rgelt.len() as _, ::core::mem::transmute(rgelt.as_ptr()), pceltfetched).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Skip)(::windows::core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Reset)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IEnumComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IEnumComponentTypes>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IEnumComponentTypes, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IEnumComponentTypes {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumComponentTypes {}
impl ::core::fmt::Debug for IEnumComponentTypes {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumComponentTypes").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IEnumComponentTypes {
    type Vtable = IEnumComponentTypes_Vtbl;
}
impl ::core::clone::Clone for IEnumComponentTypes {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IEnumComponentTypes {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8a674b4a_1f63_11d3_b64c_00c04f79498e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumComponentTypes_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Next: usize,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IEnumComponents(::windows::core::IUnknown);
impl IEnumComponents {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Next(&self, rgelt: &mut [::core::option::Option<IComponent>], pceltfetched: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Next)(::windows::core::Interface::as_raw(self), rgelt.len() as _, ::core::mem::transmute(rgelt.as_ptr()), pceltfetched).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Skip)(::windows::core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Reset)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IEnumComponents> {
        let mut result__ = ::windows::core::zeroed::<IEnumComponents>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IEnumComponents, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IEnumComponents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumComponents {}
impl ::core::fmt::Debug for IEnumComponents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumComponents").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IEnumComponents {
    type Vtable = IEnumComponents_Vtbl;
}
impl ::core::clone::Clone for IEnumComponents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IEnumComponents {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2a6e2939_2595_11d3_b64c_00c04f79498e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumComponents_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Next: usize,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IEnumGuideDataProperties(::windows::core::IUnknown);
impl IEnumGuideDataProperties {
    pub unsafe fn Next(&self, celt: u32, ppprop: *mut ::core::option::Option<IGuideDataProperty>, pcelt: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Next)(::windows::core::Interface::as_raw(self), celt, ::core::mem::transmute(ppprop), pcelt).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Skip)(::windows::core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Reset)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IEnumGuideDataProperties> {
        let mut result__ = ::windows::core::zeroed::<IEnumGuideDataProperties>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IEnumGuideDataProperties, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IEnumGuideDataProperties {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumGuideDataProperties {}
impl ::core::fmt::Debug for IEnumGuideDataProperties {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumGuideDataProperties").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IEnumGuideDataProperties {
    type Vtable = IEnumGuideDataProperties_Vtbl;
}
impl ::core::clone::Clone for IEnumGuideDataProperties {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IEnumGuideDataProperties {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xae44423b_4571_475c_ad2c_f40a771d80ef);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumGuideDataProperties_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, ppprop: *mut *mut ::core::ffi::c_void, pcelt: *mut u32) -> ::windows::core::HRESULT,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IEnumMSVidGraphSegment(::windows::core::IUnknown);
impl IEnumMSVidGraphSegment {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Next(&self, celt: u32, rgelt: *mut ::core::option::Option<IMSVidGraphSegment>, pceltfetched: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Next)(::windows::core::Interface::as_raw(self), celt, ::core::mem::transmute(rgelt), pceltfetched).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Skip)(::windows::core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Reset)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IEnumMSVidGraphSegment> {
        let mut result__ = ::windows::core::zeroed::<IEnumMSVidGraphSegment>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IEnumMSVidGraphSegment, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IEnumMSVidGraphSegment {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumMSVidGraphSegment {}
impl ::core::fmt::Debug for IEnumMSVidGraphSegment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumMSVidGraphSegment").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IEnumMSVidGraphSegment {
    type Vtable = IEnumMSVidGraphSegment_Vtbl;
}
impl ::core::clone::Clone for IEnumMSVidGraphSegment {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IEnumMSVidGraphSegment {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3dd2903e_e0aa_11d2_b63a_00c04f79498e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumMSVidGraphSegment_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Next: usize,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IEnumStreamBufferRecordingAttrib(::windows::core::IUnknown);
impl IEnumStreamBufferRecordingAttrib {
    pub unsafe fn Next(&self, pstreambufferattribute: &mut [STREAMBUFFER_ATTRIBUTE], pcreceived: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Next)(::windows::core::Interface::as_raw(self), pstreambufferattribute.len() as _, ::core::mem::transmute(pstreambufferattribute.as_ptr()), pcreceived).ok()
    }
    pub unsafe fn Skip(&self, crecords: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Skip)(::windows::core::Interface::as_raw(self), crecords).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Reset)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IEnumStreamBufferRecordingAttrib> {
        let mut result__ = ::windows::core::zeroed::<IEnumStreamBufferRecordingAttrib>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IEnumStreamBufferRecordingAttrib, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IEnumStreamBufferRecordingAttrib {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumStreamBufferRecordingAttrib {}
impl ::core::fmt::Debug for IEnumStreamBufferRecordingAttrib {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumStreamBufferRecordingAttrib").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IEnumStreamBufferRecordingAttrib {
    type Vtable = IEnumStreamBufferRecordingAttrib_Vtbl;
}
impl ::core::clone::Clone for IEnumStreamBufferRecordingAttrib {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IEnumStreamBufferRecordingAttrib {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc18a9162_1e82_4142_8c73_5690fa62fe33);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumStreamBufferRecordingAttrib_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, crequest: u32, pstreambufferattribute: *mut STREAMBUFFER_ATTRIBUTE, pcreceived: *mut u32) -> ::windows::core::HRESULT,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, crecords: u32) -> ::windows::core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppienumstreambufferattrib: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IEnumTuneRequests(::windows::core::IUnknown);
impl IEnumTuneRequests {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Next(&self, celt: u32, ppprop: *mut ::core::option::Option<ITuneRequest>, pcelt: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Next)(::windows::core::Interface::as_raw(self), celt, ::core::mem::transmute(ppprop), pcelt).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Skip)(::windows::core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Reset)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IEnumTuneRequests> {
        let mut result__ = ::windows::core::zeroed::<IEnumTuneRequests>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IEnumTuneRequests, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IEnumTuneRequests {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumTuneRequests {}
impl ::core::fmt::Debug for IEnumTuneRequests {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumTuneRequests").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IEnumTuneRequests {
    type Vtable = IEnumTuneRequests_Vtbl;
}
impl ::core::clone::Clone for IEnumTuneRequests {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IEnumTuneRequests {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1993299c_ced6_4788_87a3_420067dce0c7);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumTuneRequests_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, ppprop: *mut *mut ::core::ffi::c_void, pcelt: *mut u32) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Next: usize,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IEnumTuningSpaces(::windows::core::IUnknown);
impl IEnumTuningSpaces {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Next(&self, rgelt: &mut [::core::option::Option<ITuningSpace>], pceltfetched: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Next)(::windows::core::Interface::as_raw(self), rgelt.len() as _, ::core::mem::transmute(rgelt.as_ptr()), pceltfetched).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Skip)(::windows::core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Reset)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IEnumTuningSpaces> {
        let mut result__ = ::windows::core::zeroed::<IEnumTuningSpaces>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IEnumTuningSpaces, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IEnumTuningSpaces {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumTuningSpaces {}
impl ::core::fmt::Debug for IEnumTuningSpaces {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumTuningSpaces").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IEnumTuningSpaces {
    type Vtable = IEnumTuningSpaces_Vtbl;
}
impl ::core::clone::Clone for IEnumTuningSpaces {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IEnumTuningSpaces {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8b8eb248_fc2b_11d2_9d8c_00c04f72d980);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumTuningSpaces_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Next: usize,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IEvalRat(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IEvalRat {
    pub unsafe fn get_BlockedRatingAttributes(&self, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).get_BlockedRatingAttributes)(::windows::core::Interface::as_raw(self), ensystem, enlevel, &mut result__).from_abi(result__)
    }
    pub unsafe fn put_BlockedRatingAttributes(&self, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, lbfattrs: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).put_BlockedRatingAttributes)(::windows::core::Interface::as_raw(self), ensystem, enlevel, lbfattrs).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn BlockUnRated(&self) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).BlockUnRated)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBlockUnRated<P0>(&self, fblockunratedshows: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetBlockUnRated)(::windows::core::Interface::as_raw(self), fblockunratedshows.into_param().abi()).ok()
    }
    pub unsafe fn MostRestrictiveRating(&self, ensystem1: EnTvRat_System, enenlevel1: EnTvRat_GenericLevel, lbfenattr1: i32, ensystem2: EnTvRat_System, enenlevel2: EnTvRat_GenericLevel, lbfenattr2: i32, pensystem: *mut EnTvRat_System, penenlevel: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).MostRestrictiveRating)(::windows::core::Interface::as_raw(self), ensystem1, enenlevel1, lbfenattr1, ensystem2, enenlevel2, lbfenattr2, pensystem, penenlevel, plbfenattr).ok()
    }
    pub unsafe fn TestRating(&self, enshowsystem: EnTvRat_System, enshowlevel: EnTvRat_GenericLevel, lbfenshowattributes: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).TestRating)(::windows::core::Interface::as_raw(self), enshowsystem, enshowlevel, lbfenshowattributes).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IEvalRat, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IEvalRat {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IEvalRat {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IEvalRat {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEvalRat").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IEvalRat {
    type Vtable = IEvalRat_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IEvalRat {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IEvalRat {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc5c5c5b1_3abc_11d6_b25b_00c04fa0c026);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IEvalRat_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub get_BlockedRatingAttributes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, plbfattrs: *mut i32) -> ::windows::core::HRESULT,
    pub put_BlockedRatingAttributes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, lbfattrs: i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub BlockUnRated: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfblockunratedshows: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    BlockUnRated: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetBlockUnRated: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fblockunratedshows: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetBlockUnRated: usize,
    pub MostRestrictiveRating: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ensystem1: EnTvRat_System, enenlevel1: EnTvRat_GenericLevel, lbfenattr1: i32, ensystem2: EnTvRat_System, enenlevel2: EnTvRat_GenericLevel, lbfenattr2: i32, pensystem: *mut EnTvRat_System, penenlevel: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows::core::HRESULT,
    pub TestRating: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, enshowsystem: EnTvRat_System, enshowlevel: EnTvRat_GenericLevel, lbfenshowattributes: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IGenericDescriptor(::windows::core::IUnknown);
impl IGenericDescriptor {
    pub unsafe fn Initialize(&self, pbdesc: *const u8, bcount: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), pbdesc, bcount).ok()
    }
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetBody(&self) -> ::windows::core::Result<*mut u8> {
        let mut result__ = ::windows::core::zeroed::<*mut u8>();
        (::windows::core::Interface::vtable(self).GetBody)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IGenericDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IGenericDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IGenericDescriptor {}
impl ::core::fmt::Debug for IGenericDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IGenericDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IGenericDescriptor {
    type Vtable = IGenericDescriptor_Vtbl;
}
impl ::core::clone::Clone for IGenericDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IGenericDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6a5918f8_a77a_4f61_aed0_5702bdcda3e6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IGenericDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbdesc: *const u8, bcount: i32) -> ::windows::core::HRESULT,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetBody: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppbval: *mut *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IGenericDescriptor2(::windows::core::IUnknown);
impl IGenericDescriptor2 {
    pub unsafe fn Initialize(&self, pbdesc: *const u8, bcount: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Initialize)(::windows::core::Interface::as_raw(self), pbdesc, bcount).ok()
    }
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetBody(&self) -> ::windows::core::Result<*mut u8> {
        let mut result__ = ::windows::core::zeroed::<*mut u8>();
        (::windows::core::Interface::vtable(self).base__.GetBody)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Initialize2(&self, pbdesc: *const u8, wcount: u16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Initialize2)(::windows::core::Interface::as_raw(self), pbdesc, wcount).ok()
    }
    pub unsafe fn GetLength2(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetLength2)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IGenericDescriptor2, ::windows::core::IUnknown, IGenericDescriptor);
impl ::core::cmp::PartialEq for IGenericDescriptor2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IGenericDescriptor2 {}
impl ::core::fmt::Debug for IGenericDescriptor2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IGenericDescriptor2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IGenericDescriptor2 {
    type Vtable = IGenericDescriptor2_Vtbl;
}
impl ::core::clone::Clone for IGenericDescriptor2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IGenericDescriptor2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xbf02fb7e_9792_4e10_a68d_033a2cc246a5);
}
#[repr(C)]
#[doc(hidden)]
pub struct IGenericDescriptor2_Vtbl {
    pub base__: IGenericDescriptor_Vtbl,
    pub Initialize2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbdesc: *const u8, wcount: u16) -> ::windows::core::HRESULT,
    pub GetLength2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IGpnvsCommonBase(::windows::core::IUnknown);
impl IGpnvsCommonBase {
    pub unsafe fn GetValueUpdateName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetValueUpdateName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IGpnvsCommonBase, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IGpnvsCommonBase {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IGpnvsCommonBase {}
impl ::core::fmt::Debug for IGpnvsCommonBase {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IGpnvsCommonBase").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IGpnvsCommonBase {
    type Vtable = IGpnvsCommonBase_Vtbl;
}
impl ::core::clone::Clone for IGpnvsCommonBase {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IGpnvsCommonBase {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x907e0b5c_e42d_4f04_91f0_26f401f36907);
}
#[repr(C)]
#[doc(hidden)]
pub struct IGpnvsCommonBase_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetValueUpdateName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IGuideData(::windows::core::IUnknown);
impl IGuideData {
    pub unsafe fn GetServices(&self) -> ::windows::core::Result<IEnumTuneRequests> {
        let mut result__ = ::windows::core::zeroed::<IEnumTuneRequests>();
        (::windows::core::Interface::vtable(self).GetServices)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetServiceProperties<P0>(&self, ptunerequest: P0) -> ::windows::core::Result<IEnumGuideDataProperties>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        let mut result__ = ::windows::core::zeroed::<IEnumGuideDataProperties>();
        (::windows::core::Interface::vtable(self).GetServiceProperties)(::windows::core::Interface::as_raw(self), ptunerequest.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetGuideProgramIDs(&self) -> ::windows::core::Result<super::super::super::System::Ole::IEnumVARIANT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IEnumVARIANT>();
        (::windows::core::Interface::vtable(self).GetGuideProgramIDs)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn GetProgramProperties(&self, varprogramdescriptionid: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<IEnumGuideDataProperties> {
        let mut result__ = ::windows::core::zeroed::<IEnumGuideDataProperties>();
        (::windows::core::Interface::vtable(self).GetProgramProperties)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(varprogramdescriptionid), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetScheduleEntryIDs(&self) -> ::windows::core::Result<super::super::super::System::Ole::IEnumVARIANT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IEnumVARIANT>();
        (::windows::core::Interface::vtable(self).GetScheduleEntryIDs)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn GetScheduleEntryProperties(&self, varscheduleentrydescriptionid: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<IEnumGuideDataProperties> {
        let mut result__ = ::windows::core::zeroed::<IEnumGuideDataProperties>();
        (::windows::core::Interface::vtable(self).GetScheduleEntryProperties)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(varscheduleentrydescriptionid), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IGuideData, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IGuideData {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IGuideData {}
impl ::core::fmt::Debug for IGuideData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IGuideData").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IGuideData {
    type Vtable = IGuideData_Vtbl;
}
impl ::core::clone::Clone for IGuideData {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IGuideData {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x61571138_5b01_43cd_aeaf_60b784a0bf93);
}
#[repr(C)]
#[doc(hidden)]
pub struct IGuideData_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetServices: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenumtunerequests: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub GetServiceProperties: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ptunerequest: *mut ::core::ffi::c_void, ppenumproperties: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetServiceProperties: usize,
    #[cfg(feature = "Win32_System_Ole")]
    pub GetGuideProgramIDs: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, penumprograms: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    GetGuideProgramIDs: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub GetProgramProperties: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, varprogramdescriptionid: super::super::super::System::Com::VARIANT, ppenumproperties: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    GetProgramProperties: usize,
    #[cfg(feature = "Win32_System_Ole")]
    pub GetScheduleEntryIDs: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, penumscheduleentries: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    GetScheduleEntryIDs: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub GetScheduleEntryProperties: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, varscheduleentrydescriptionid: super::super::super::System::Com::VARIANT, ppenumproperties: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    GetScheduleEntryProperties: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IGuideDataEvent(::windows::core::IUnknown);
impl IGuideDataEvent {
    pub unsafe fn GuideDataAcquired(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GuideDataAcquired)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn ProgramChanged(&self, varprogramdescriptionid: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ProgramChanged)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(varprogramdescriptionid)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn ServiceChanged(&self, varservicedescriptionid: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ServiceChanged)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(varservicedescriptionid)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn ScheduleEntryChanged(&self, varscheduleentrydescriptionid: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ScheduleEntryChanged)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(varscheduleentrydescriptionid)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn ProgramDeleted(&self, varprogramdescriptionid: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ProgramDeleted)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(varprogramdescriptionid)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn ServiceDeleted(&self, varservicedescriptionid: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ServiceDeleted)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(varservicedescriptionid)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn ScheduleDeleted(&self, varscheduleentrydescriptionid: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ScheduleDeleted)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(varscheduleentrydescriptionid)).ok()
    }
}
::windows::imp::interface_hierarchy!(IGuideDataEvent, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IGuideDataEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IGuideDataEvent {}
impl ::core::fmt::Debug for IGuideDataEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IGuideDataEvent").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IGuideDataEvent {
    type Vtable = IGuideDataEvent_Vtbl;
}
impl ::core::clone::Clone for IGuideDataEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IGuideDataEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xefda0c80_f395_42c3_9b3c_56b37dec7bb7);
}
#[repr(C)]
#[doc(hidden)]
pub struct IGuideDataEvent_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GuideDataAcquired: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub ProgramChanged: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, varprogramdescriptionid: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    ProgramChanged: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub ServiceChanged: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, varservicedescriptionid: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    ServiceChanged: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub ScheduleEntryChanged: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, varscheduleentrydescriptionid: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    ScheduleEntryChanged: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub ProgramDeleted: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, varprogramdescriptionid: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    ProgramDeleted: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub ServiceDeleted: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, varservicedescriptionid: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    ServiceDeleted: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub ScheduleDeleted: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, varscheduleentrydescriptionid: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    ScheduleDeleted: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IGuideDataLoader(::windows::core::IUnknown);
impl IGuideDataLoader {
    pub unsafe fn Init<P0>(&self, pguidestore: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IGuideData>,
    {
        (::windows::core::Interface::vtable(self).Init)(::windows::core::Interface::as_raw(self), pguidestore.into_param().abi()).ok()
    }
    pub unsafe fn Terminate(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Terminate)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IGuideDataLoader, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IGuideDataLoader {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IGuideDataLoader {}
impl ::core::fmt::Debug for IGuideDataLoader {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IGuideDataLoader").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IGuideDataLoader {
    type Vtable = IGuideDataLoader_Vtbl;
}
impl ::core::clone::Clone for IGuideDataLoader {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IGuideDataLoader {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x4764ff7c_fa95_4525_af4d_d32236db9e38);
}
#[repr(C)]
#[doc(hidden)]
pub struct IGuideDataLoader_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Init: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pguidestore: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Terminate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IGuideDataProperty(::windows::core::IUnknown);
impl IGuideDataProperty {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Language(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Language)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Value(&self) -> ::windows::core::Result<super::super::super::System::Com::VARIANT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::VARIANT>();
        (::windows::core::Interface::vtable(self).Value)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IGuideDataProperty, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IGuideDataProperty {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IGuideDataProperty {}
impl ::core::fmt::Debug for IGuideDataProperty {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IGuideDataProperty").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IGuideDataProperty {
    type Vtable = IGuideDataProperty_Vtbl;
}
impl ::core::clone::Clone for IGuideDataProperty {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IGuideDataProperty {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x88ec5e58_bb73_41d6_99ce_66c524b8b591);
}
#[repr(C)]
#[doc(hidden)]
pub struct IGuideDataProperty_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Name: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub Language: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, idlang: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Value: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pvar: *mut super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Value: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IISDBSLocator(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IISDBSLocator {
    pub unsafe fn CarrierFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.CarrierFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCarrierFrequency(&self, frequency: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetCarrierFrequency)(::windows::core::Interface::as_raw(self), frequency).ok()
    }
    pub unsafe fn InnerFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.InnerFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetInnerFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn InnerFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.InnerFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetInnerFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.OuterFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetOuterFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.OuterFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetOuterFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn Modulation(&self) -> ::windows::core::Result<super::ModulationType> {
        let mut result__ = ::windows::core::zeroed::<super::ModulationType>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Modulation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetModulation(&self, modulation: super::ModulationType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetModulation)(::windows::core::Interface::as_raw(self), modulation).ok()
    }
    pub unsafe fn SymbolRate(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.SymbolRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSymbolRate(&self, rate: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetSymbolRate)(::windows::core::Interface::as_raw(self), rate).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SignalPolarisation(&self) -> ::windows::core::Result<super::Polarisation> {
        let mut result__ = ::windows::core::zeroed::<super::Polarisation>();
        (::windows::core::Interface::vtable(self).base__.SignalPolarisation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSignalPolarisation(&self, polarisationval: super::Polarisation) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetSignalPolarisation)(::windows::core::Interface::as_raw(self), polarisationval).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn WestPosition(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.WestPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetWestPosition<P0>(&self, westlongitude: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetWestPosition)(::windows::core::Interface::as_raw(self), westlongitude.into_param().abi()).ok()
    }
    pub unsafe fn OrbitalPosition(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.OrbitalPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOrbitalPosition(&self, longitude: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetOrbitalPosition)(::windows::core::Interface::as_raw(self), longitude).ok()
    }
    pub unsafe fn Azimuth(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.Azimuth)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetAzimuth(&self, azimuth: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetAzimuth)(::windows::core::Interface::as_raw(self), azimuth).ok()
    }
    pub unsafe fn Elevation(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.Elevation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetElevation(&self, elevation: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetElevation)(::windows::core::Interface::as_raw(self), elevation).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IISDBSLocator, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ILocator, IDigitalLocator, IDVBSLocator);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IISDBSLocator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IISDBSLocator {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IISDBSLocator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IISDBSLocator").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IISDBSLocator {
    type Vtable = IISDBSLocator_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IISDBSLocator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IISDBSLocator {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc9897087_e29c_473f_9e4b_7072123dea14);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IISDBSLocator_Vtbl {
    pub base__: IDVBSLocator_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IISDB_BIT(::windows::core::IUnknown);
impl IISDB_BIT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetOriginalNetworkId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetOriginalNetworkId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetBroadcastViewPropriety(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetBroadcastViewPropriety)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfTableDescriptors(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfTableDescriptors)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByIndex(&self, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetTableDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByTag(&self, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableDescriptorByTag)(::windows::core::Interface::as_raw(self), btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordBroadcasterId(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordBroadcasterId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    pub unsafe fn GetVersionHash(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetVersionHash)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IISDB_BIT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IISDB_BIT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IISDB_BIT {}
impl ::core::fmt::Debug for IISDB_BIT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IISDB_BIT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IISDB_BIT {
    type Vtable = IISDB_BIT_Vtbl;
}
impl ::core::clone::Clone for IISDB_BIT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IISDB_BIT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x537cd71e_0e46_4173_9001_ba043f3e49e2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IISDB_BIT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetOriginalNetworkId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetBroadcastViewPropriety: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfTableDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordBroadcasterId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordCountOfDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionHash: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IISDB_CDT(::windows::core::IUnknown);
impl IISDB_CDT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1, bsectionnumber: u8) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi(), bsectionnumber).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDownloadDataId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetDownloadDataId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSectionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetSectionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetOriginalNetworkId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetOriginalNetworkId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDataType(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetDataType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfTableDescriptors(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfTableDescriptors)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByIndex(&self, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetTableDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByTag(&self, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableDescriptorByTag)(::windows::core::Interface::as_raw(self), btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    pub unsafe fn GetSizeOfDataModule(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetSizeOfDataModule)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDataModule(&self) -> ::windows::core::Result<*mut u8> {
        let mut result__ = ::windows::core::zeroed::<*mut u8>();
        (::windows::core::Interface::vtable(self).GetDataModule)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetVersionHash(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetVersionHash)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IISDB_CDT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IISDB_CDT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IISDB_CDT {}
impl ::core::fmt::Debug for IISDB_CDT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IISDB_CDT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IISDB_CDT {
    type Vtable = IISDB_CDT_Vtbl;
}
impl ::core::clone::Clone for IISDB_CDT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IISDB_CDT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x25fa92c2_8b80_4787_a841_3a0e8f17984b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IISDB_CDT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void, bsectionnumber: u8) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetDownloadDataId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetSectionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetOriginalNetworkId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetDataType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfTableDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetSizeOfDataModule: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetDataModule: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbdata: *mut *mut u8) -> ::windows::core::HRESULT,
    pub GetVersionHash: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IISDB_EMM(::windows::core::IUnknown);
impl IISDB_EMM {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableIdExtension(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetTableIdExtension)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDataBytes(&self, pwbufferlength: *mut u16, pbbuffer: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetDataBytes)(::windows::core::Interface::as_raw(self), pwbufferlength, pbbuffer).ok()
    }
    pub unsafe fn GetSharedEmmMessage(&self, pwlength: *mut u16, ppbmessage: *mut *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetSharedEmmMessage)(::windows::core::Interface::as_raw(self), pwlength, ppbmessage).ok()
    }
    pub unsafe fn GetIndividualEmmMessage<P0>(&self, punknown: P0, pwlength: *mut u16, ppbmessage: *mut *mut u8) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::IUnknown>,
    {
        (::windows::core::Interface::vtable(self).GetIndividualEmmMessage)(::windows::core::Interface::as_raw(self), punknown.into_param().abi(), pwlength, ppbmessage).ok()
    }
    pub unsafe fn GetVersionHash(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetVersionHash)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IISDB_EMM, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IISDB_EMM {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IISDB_EMM {}
impl ::core::fmt::Debug for IISDB_EMM {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IISDB_EMM").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IISDB_EMM {
    type Vtable = IISDB_EMM_Vtbl;
}
impl ::core::clone::Clone for IISDB_EMM {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IISDB_EMM {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0edb556d_43ad_4938_9668_321b2ffecfd3);
}
#[repr(C)]
#[doc(hidden)]
pub struct IISDB_EMM_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetTableIdExtension: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetDataBytes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwbufferlength: *mut u16, pbbuffer: *mut u8) -> ::windows::core::HRESULT,
    pub GetSharedEmmMessage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwlength: *mut u16, ppbmessage: *mut *mut u8) -> ::windows::core::HRESULT,
    pub GetIndividualEmmMessage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punknown: *mut ::core::ffi::c_void, pwlength: *mut u16, ppbmessage: *mut *mut u8) -> ::windows::core::HRESULT,
    pub GetVersionHash: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IISDB_LDT(::windows::core::IUnknown);
impl IISDB_LDT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetOriginalServiceId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetOriginalServiceId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTransportStreamId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetTransportStreamId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetOriginalNetworkId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetOriginalNetworkId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptionId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptionId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    pub unsafe fn GetVersionHash(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetVersionHash)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IISDB_LDT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IISDB_LDT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IISDB_LDT {}
impl ::core::fmt::Debug for IISDB_LDT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IISDB_LDT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IISDB_LDT {
    type Vtable = IISDB_LDT_Vtbl;
}
impl ::core::clone::Clone for IISDB_LDT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IISDB_LDT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x141a546b_02ff_4fb9_a3a3_2f074b74a9a9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IISDB_LDT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetOriginalServiceId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetTransportStreamId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetOriginalNetworkId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordDescriptionId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordCountOfDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionHash: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IISDB_NBIT(::windows::core::IUnknown);
impl IISDB_NBIT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetOriginalNetworkId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetOriginalNetworkId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordInformationId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordInformationId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordInformationType(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordInformationType)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptionBodyLocation(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptionBodyLocation)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordMessageSectionNumber(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordMessageSectionNumber)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordUserDefined(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordUserDefined)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordNumberOfKeys(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordNumberOfKeys)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordKeys(&self, dwrecordindex: u32) -> ::windows::core::Result<*mut u8> {
        let mut result__ = ::windows::core::zeroed::<*mut u8>();
        (::windows::core::Interface::vtable(self).GetRecordKeys)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    pub unsafe fn GetVersionHash(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetVersionHash)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IISDB_NBIT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IISDB_NBIT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IISDB_NBIT {}
impl ::core::fmt::Debug for IISDB_NBIT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IISDB_NBIT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IISDB_NBIT {
    type Vtable = IISDB_NBIT_Vtbl;
}
impl ::core::clone::Clone for IISDB_NBIT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IISDB_NBIT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1b1863ef_08f1_40b7_a559_3b1eff8cafa6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IISDB_NBIT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetOriginalNetworkId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordInformationId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordInformationType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordDescriptionBodyLocation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordMessageSectionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordUserDefined: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordNumberOfKeys: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordKeys: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbkeys: *mut *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordCountOfDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionHash: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IISDB_SDT(::windows::core::IUnknown);
impl IISDB_SDT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).base__.Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTransportStreamId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).base__.GetTransportStreamId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetOriginalNetworkId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).base__.GetOriginalNetworkId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordServiceId(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).base__.GetRecordServiceId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordEITScheduleFlag(&self, dwrecordindex: u32) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).base__.GetRecordEITScheduleFlag)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordEITPresentFollowingFlag(&self, dwrecordindex: u32) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).base__.GetRecordEITPresentFollowingFlag)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordRunningStatus(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).base__.GetRecordRunningStatus)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordFreeCAMode(&self, dwrecordindex: u32) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).base__.GetRecordFreeCAMode)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).base__.GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForNextTable<P0>(&self, hnexttableavailable: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).base__.RegisterForNextTable)(::windows::core::Interface::as_raw(self), hnexttableavailable.into_param().abi()).ok()
    }
    pub unsafe fn GetNextTable(&self) -> ::windows::core::Result<IDVB_SDT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_SDT>();
        (::windows::core::Interface::vtable(self).base__.GetNextTable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForWhenCurrent<P0>(&self, hnexttableiscurrent: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).base__.RegisterForWhenCurrent)(::windows::core::Interface::as_raw(self), hnexttableiscurrent.into_param().abi()).ok()
    }
    pub unsafe fn ConvertNextToCurrent(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.ConvertNextToCurrent)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetVersionHash(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetVersionHash)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordEITUserDefinedFlags(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordEITUserDefinedFlags)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IISDB_SDT, ::windows::core::IUnknown, IDVB_SDT);
impl ::core::cmp::PartialEq for IISDB_SDT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IISDB_SDT {}
impl ::core::fmt::Debug for IISDB_SDT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IISDB_SDT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IISDB_SDT {
    type Vtable = IISDB_SDT_Vtbl;
}
impl ::core::clone::Clone for IISDB_SDT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IISDB_SDT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3f3dc9a2_bb32_4fb9_ae9e_d856848927a3);
}
#[repr(C)]
#[doc(hidden)]
pub struct IISDB_SDT_Vtbl {
    pub base__: IDVB_SDT_Vtbl,
    pub GetRecordEITUserDefinedFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IISDB_SDTT(::windows::core::IUnknown);
impl IISDB_SDTT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableIdExt(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetTableIdExt)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTransportStreamId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetTransportStreamId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetOriginalNetworkId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetOriginalNetworkId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetServiceId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordGroup(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordGroup)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordTargetVersion(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordTargetVersion)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordNewVersion(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordNewVersion)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDownloadLevel(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordDownloadLevel)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordVersionIndicator(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordVersionIndicator)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordScheduleTimeShiftInformation(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordScheduleTimeShiftInformation)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfSchedules(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCountOfSchedules)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordStartTimeByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<MPEG_DATE_AND_TIME> {
        let mut result__ = ::windows::core::zeroed::<MPEG_DATE_AND_TIME>();
        (::windows::core::Interface::vtable(self).GetRecordStartTimeByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDurationByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<MPEG_TIME> {
        let mut result__ = ::windows::core::zeroed::<MPEG_TIME>();
        (::windows::core::Interface::vtable(self).GetRecordDurationByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: ::core::option::Option<*mut u32>, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, ::core::mem::transmute(pdwcookie.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppdescriptor)).ok()
    }
    pub unsafe fn GetVersionHash(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetVersionHash)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IISDB_SDTT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IISDB_SDTT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IISDB_SDTT {}
impl ::core::fmt::Debug for IISDB_SDTT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IISDB_SDTT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IISDB_SDTT {
    type Vtable = IISDB_SDTT_Vtbl;
}
impl ::core::clone::Clone for IISDB_SDTT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IISDB_SDTT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xee60ef2d_813a_4dc7_bf92_ea13dac85313);
}
#[repr(C)]
#[doc(hidden)]
pub struct IISDB_SDTT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetTableIdExt: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetTransportStreamId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetOriginalNetworkId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetServiceId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordGroup: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordTargetVersion: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordNewVersion: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordDownloadLevel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordVersionIndicator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordScheduleTimeShiftInformation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordCountOfSchedules: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordStartTimeByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT,
    pub GetRecordDurationByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, pmdval: *mut MPEG_TIME) -> ::windows::core::HRESULT,
    pub GetRecordCountOfDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionHash: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbAudioComponentDescriptor(::windows::core::IUnknown);
impl IIsdbAudioComponentDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetStreamContent(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetStreamContent)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetComponentType(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetComponentType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetComponentTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetComponentTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetStreamType(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetStreamType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSimulcastGroupTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetSimulcastGroupTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetESMultiLingualFlag(&self) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).GetESMultiLingualFlag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetMainComponentFlag(&self) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).GetMainComponentFlag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetQualityIndicator(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetQualityIndicator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSamplingRate(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetSamplingRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLanguageCode(&self, pszcode: &mut [u8; 4]) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetLanguageCode)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pszcode.as_ptr())).ok()
    }
    pub unsafe fn GetLanguageCode2(&self, pszcode: &mut [u8; 4]) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetLanguageCode2)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pszcode.as_ptr())).ok()
    }
    pub unsafe fn GetTextW(&self, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetTextW)(::windows::core::Interface::as_raw(self), convmode, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IIsdbAudioComponentDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbAudioComponentDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbAudioComponentDescriptor {}
impl ::core::fmt::Debug for IIsdbAudioComponentDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbAudioComponentDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbAudioComponentDescriptor {
    type Vtable = IIsdbAudioComponentDescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbAudioComponentDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbAudioComponentDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x679d2002_2425_4be4_a4c7_d6632a574f4d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbAudioComponentDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetStreamContent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetComponentType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetComponentTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetStreamType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetSimulcastGroupTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetESMultiLingualFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetESMultiLingualFlag: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetMainComponentFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetMainComponentFlag: usize,
    pub GetQualityIndicator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetSamplingRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLanguageCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows::core::HRESULT,
    pub GetLanguageCode2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows::core::HRESULT,
    pub GetTextW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbCAContractInformationDescriptor(::windows::core::IUnknown);
impl IIsdbCAContractInformationDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCASystemId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetCASystemId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCAUnitId(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCAUnitId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordComponentTag(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordComponentTag)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetContractVerificationInfoLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetContractVerificationInfoLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetContractVerificationInfo(&self, bbuflength: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetContractVerificationInfo)(::windows::core::Interface::as_raw(self), bbuflength, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFeeNameW(&self, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetFeeNameW)(::windows::core::Interface::as_raw(self), convmode, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IIsdbCAContractInformationDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbCAContractInformationDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbCAContractInformationDescriptor {}
impl ::core::fmt::Debug for IIsdbCAContractInformationDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbCAContractInformationDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbCAContractInformationDescriptor {
    type Vtable = IIsdbCAContractInformationDescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbCAContractInformationDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbCAContractInformationDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x08e18b25_a28f_4e92_821e_4fced5cc2291);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbCAContractInformationDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCASystemId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetCAUnitId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordComponentTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetContractVerificationInfoLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetContractVerificationInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bbuflength: u8, pbbuf: *mut u8) -> ::windows::core::HRESULT,
    pub GetFeeNameW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbCADescriptor(::windows::core::IUnknown);
impl IIsdbCADescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCASystemId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetCASystemId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetReservedBits(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetReservedBits)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCAPID(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetCAPID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPrivateDataBytes(&self, pbbufferlength: *mut u8, pbbuffer: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetPrivateDataBytes)(::windows::core::Interface::as_raw(self), pbbufferlength, pbbuffer).ok()
    }
}
::windows::imp::interface_hierarchy!(IIsdbCADescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbCADescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbCADescriptor {}
impl ::core::fmt::Debug for IIsdbCADescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbCADescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbCADescriptor {
    type Vtable = IIsdbCADescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbCADescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbCADescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0570aa47_52bc_42ae_8ca5_969f41e81aea);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbCADescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCASystemId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetReservedBits: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCAPID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetPrivateDataBytes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbbufferlength: *mut u8, pbbuffer: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbCAServiceDescriptor(::windows::core::IUnknown);
impl IIsdbCAServiceDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCASystemId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetCASystemId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCABroadcasterGroupId(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCABroadcasterGroupId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetMessageControl(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetMessageControl)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceIds(&self, pbnumserviceids: *mut u8, pwserviceids: *mut u16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetServiceIds)(::windows::core::Interface::as_raw(self), pbnumserviceids, pwserviceids).ok()
    }
}
::windows::imp::interface_hierarchy!(IIsdbCAServiceDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbCAServiceDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbCAServiceDescriptor {}
impl ::core::fmt::Debug for IIsdbCAServiceDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbCAServiceDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbCAServiceDescriptor {
    type Vtable = IIsdbCAServiceDescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbCAServiceDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbCAServiceDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x39cbeb97_ff0b_42a7_9ab9_7b9cfe70a77a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbCAServiceDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCASystemId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetCABroadcasterGroupId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetMessageControl: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetServiceIds: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbnumserviceids: *mut u8, pwserviceids: *mut u16) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbComponentGroupDescriptor(::windows::core::IUnknown);
impl IIsdbComponentGroupDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetComponentGroupType(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetComponentGroupType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordGroupId(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordGroupId)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordNumberOfCAUnit(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordNumberOfCAUnit)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCAUnitCAUnitId(&self, brecordindex: u8, bcaunitindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordCAUnitCAUnitId)(::windows::core::Interface::as_raw(self), brecordindex, bcaunitindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCAUnitNumberOfComponents(&self, brecordindex: u8, bcaunitindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordCAUnitNumberOfComponents)(::windows::core::Interface::as_raw(self), brecordindex, bcaunitindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCAUnitComponentTag(&self, brecordindex: u8, bcaunitindex: u8, bcomponentindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordCAUnitComponentTag)(::windows::core::Interface::as_raw(self), brecordindex, bcaunitindex, bcomponentindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordTotalBitRate(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordTotalBitRate)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordTextW(&self, brecordindex: u8, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetRecordTextW)(::windows::core::Interface::as_raw(self), brecordindex, convmode, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IIsdbComponentGroupDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbComponentGroupDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbComponentGroupDescriptor {}
impl ::core::fmt::Debug for IIsdbComponentGroupDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbComponentGroupDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbComponentGroupDescriptor {
    type Vtable = IIsdbComponentGroupDescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbComponentGroupDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbComponentGroupDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa494f17f_c592_47d8_8943_64c9a34be7b9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbComponentGroupDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetComponentGroupType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordGroupId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordNumberOfCAUnit: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordCAUnitCAUnitId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, bcaunitindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordCAUnitNumberOfComponents: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, bcaunitindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordCAUnitComponentTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, bcaunitindex: u8, bcomponentindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordTotalBitRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordTextW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, convmode: DVB_STRCONV_MODE, pbstrtext: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbDataContentDescriptor(::windows::core::IUnknown);
impl IIsdbDataContentDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDataComponentId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetDataComponentId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEntryComponent(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetEntryComponent)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSelectorLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetSelectorLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSelectorBytes(&self, bbuflength: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetSelectorBytes)(::windows::core::Interface::as_raw(self), bbuflength, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordComponentRef(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordComponentRef)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLanguageCode(&self, pszcode: &mut [u8; 4]) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetLanguageCode)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pszcode.as_ptr())).ok()
    }
    pub unsafe fn GetTextW(&self, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetTextW)(::windows::core::Interface::as_raw(self), convmode, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IIsdbDataContentDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbDataContentDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbDataContentDescriptor {}
impl ::core::fmt::Debug for IIsdbDataContentDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbDataContentDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbDataContentDescriptor {
    type Vtable = IIsdbDataContentDescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbDataContentDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbDataContentDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa428100a_e646_4bd6_aa14_6087bdc08cd5);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbDataContentDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetDataComponentId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetEntryComponent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetSelectorLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetSelectorBytes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bbuflength: u8, pbbuf: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordComponentRef: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLanguageCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows::core::HRESULT,
    pub GetTextW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbDigitalCopyControlDescriptor(::windows::core::IUnknown);
impl IIsdbDigitalCopyControlDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCopyControl(&self, pbdigitalrecordingcontroldata: *mut u8, pbcopycontroltype: *mut u8, pbapscontroldata: *mut u8, pbmaximumbitrate: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetCopyControl)(::windows::core::Interface::as_raw(self), pbdigitalrecordingcontroldata, pbcopycontroltype, pbapscontroldata, pbmaximumbitrate).ok()
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCopyControl(&self, brecordindex: u8, pbcomponenttag: *mut u8, pbdigitalrecordingcontroldata: *mut u8, pbcopycontroltype: *mut u8, pbapscontroldata: *mut u8, pbmaximumbitrate: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordCopyControl)(::windows::core::Interface::as_raw(self), brecordindex, pbcomponenttag, pbdigitalrecordingcontroldata, pbcopycontroltype, pbapscontroldata, pbmaximumbitrate).ok()
    }
}
::windows::imp::interface_hierarchy!(IIsdbDigitalCopyControlDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbDigitalCopyControlDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbDigitalCopyControlDescriptor {}
impl ::core::fmt::Debug for IIsdbDigitalCopyControlDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbDigitalCopyControlDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbDigitalCopyControlDescriptor {
    type Vtable = IIsdbDigitalCopyControlDescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbDigitalCopyControlDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbDigitalCopyControlDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1a28417e_266a_4bb8_a4bd_d782bcfb8161);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbDigitalCopyControlDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCopyControl: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbdigitalrecordingcontroldata: *mut u8, pbcopycontroltype: *mut u8, pbapscontroldata: *mut u8, pbmaximumbitrate: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordCopyControl: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbcomponenttag: *mut u8, pbdigitalrecordingcontroldata: *mut u8, pbcopycontroltype: *mut u8, pbapscontroldata: *mut u8, pbmaximumbitrate: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbDownloadContentDescriptor(::windows::core::IUnknown);
impl IIsdbDownloadContentDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetFlags(&self, pfreboot: *mut super::super::super::Foundation::BOOL, pfaddon: *mut super::super::super::Foundation::BOOL, pfcompatibility: *mut super::super::super::Foundation::BOOL, pfmoduleinfo: *mut super::super::super::Foundation::BOOL, pftextinfo: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetFlags)(::windows::core::Interface::as_raw(self), pfreboot, pfaddon, pfcompatibility, pfmoduleinfo, pftextinfo).ok()
    }
    pub unsafe fn GetComponentSize(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetComponentSize)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDownloadId(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetDownloadId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTimeOutValueDII(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetTimeOutValueDII)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLeakRate(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetLeakRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetComponentTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetComponentTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCompatiblityDescriptorLength(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetCompatiblityDescriptorLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCompatiblityDescriptor(&self) -> ::windows::core::Result<*mut u8> {
        let mut result__ = ::windows::core::zeroed::<*mut u8>();
        (::windows::core::Interface::vtable(self).GetCompatiblityDescriptor)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordModuleId(&self, wrecordindex: u16) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordModuleId)(::windows::core::Interface::as_raw(self), wrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordModuleSize(&self, wrecordindex: u16) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordModuleSize)(::windows::core::Interface::as_raw(self), wrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordModuleInfoLength(&self, wrecordindex: u16) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordModuleInfoLength)(::windows::core::Interface::as_raw(self), wrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordModuleInfo(&self, wrecordindex: u16) -> ::windows::core::Result<*mut u8> {
        let mut result__ = ::windows::core::zeroed::<*mut u8>();
        (::windows::core::Interface::vtable(self).GetRecordModuleInfo)(::windows::core::Interface::as_raw(self), wrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTextLanguageCode(&self, szcode: &mut [u8; 4]) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTextLanguageCode)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(szcode.as_ptr())).ok()
    }
    pub unsafe fn GetTextW(&self, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetTextW)(::windows::core::Interface::as_raw(self), convmode, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IIsdbDownloadContentDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbDownloadContentDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbDownloadContentDescriptor {}
impl ::core::fmt::Debug for IIsdbDownloadContentDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbDownloadContentDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbDownloadContentDescriptor {
    type Vtable = IIsdbDownloadContentDescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbDownloadContentDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbDownloadContentDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5298661e_cb88_4f5f_a1de_5f440c185b92);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbDownloadContentDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfreboot: *mut super::super::super::Foundation::BOOL, pfaddon: *mut super::super::super::Foundation::BOOL, pfcompatibility: *mut super::super::super::Foundation::BOOL, pfmoduleinfo: *mut super::super::super::Foundation::BOOL, pftextinfo: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetFlags: usize,
    pub GetComponentSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetDownloadId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetTimeOutValueDII: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetLeakRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetComponentTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCompatiblityDescriptorLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwlength: *mut u16) -> ::windows::core::HRESULT,
    pub GetCompatiblityDescriptor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppbdata: *mut *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordModuleId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, wrecordindex: u16, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordModuleSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, wrecordindex: u16, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordModuleInfoLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, wrecordindex: u16, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordModuleInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, wrecordindex: u16, ppbdata: *mut *mut u8) -> ::windows::core::HRESULT,
    pub GetTextLanguageCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, szcode: *mut u8) -> ::windows::core::HRESULT,
    pub GetTextW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbEmergencyInformationDescriptor(::windows::core::IUnknown);
impl IIsdbEmergencyInformationDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceId(&self, brecordindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetServiceId)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetStartEndFlag(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetStartEndFlag)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSignalLevel(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetSignalLevel)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetAreaCode(&self, brecordindex: u8, ppwval: *mut *mut u16, pbnumareacodes: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetAreaCode)(::windows::core::Interface::as_raw(self), brecordindex, ppwval, pbnumareacodes).ok()
    }
}
::windows::imp::interface_hierarchy!(IIsdbEmergencyInformationDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbEmergencyInformationDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbEmergencyInformationDescriptor {}
impl ::core::fmt::Debug for IIsdbEmergencyInformationDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbEmergencyInformationDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbEmergencyInformationDescriptor {
    type Vtable = IIsdbEmergencyInformationDescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbEmergencyInformationDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbEmergencyInformationDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xba6fa681_b973_4da1_9207_ac3e7f0341eb);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbEmergencyInformationDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetServiceId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetStartEndFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pval: *mut u8) -> ::windows::core::HRESULT,
    pub GetSignalLevel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetAreaCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, ppwval: *mut *mut u16, pbnumareacodes: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbEventGroupDescriptor(::windows::core::IUnknown);
impl IIsdbEventGroupDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetGroupType(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetGroupType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordEvent(&self, brecordindex: u8, pwserviceid: *mut u16, pweventid: *mut u16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordEvent)(::windows::core::Interface::as_raw(self), brecordindex, pwserviceid, pweventid).ok()
    }
    pub unsafe fn GetCountOfRefRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRefRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRefRecordEvent(&self, brecordindex: u8, pworiginalnetworkid: *mut u16, pwtransportstreamid: *mut u16, pwserviceid: *mut u16, pweventid: *mut u16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRefRecordEvent)(::windows::core::Interface::as_raw(self), brecordindex, pworiginalnetworkid, pwtransportstreamid, pwserviceid, pweventid).ok()
    }
}
::windows::imp::interface_hierarchy!(IIsdbEventGroupDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbEventGroupDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbEventGroupDescriptor {}
impl ::core::fmt::Debug for IIsdbEventGroupDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbEventGroupDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbEventGroupDescriptor {
    type Vtable = IIsdbEventGroupDescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbEventGroupDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbEventGroupDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x94b06780_2e2a_44dc_a966_cc56fdabc6c2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbEventGroupDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetGroupType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordEvent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pwserviceid: *mut u16, pweventid: *mut u16) -> ::windows::core::HRESULT,
    pub GetCountOfRefRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRefRecordEvent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pworiginalnetworkid: *mut u16, pwtransportstreamid: *mut u16, pwserviceid: *mut u16, pweventid: *mut u16) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbHierarchicalTransmissionDescriptor(::windows::core::IUnknown);
impl IIsdbHierarchicalTransmissionDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFutureUse1(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetFutureUse1)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetQualityLevel(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetQualityLevel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFutureUse2(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetFutureUse2)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetReferencePid(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetReferencePid)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IIsdbHierarchicalTransmissionDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbHierarchicalTransmissionDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbHierarchicalTransmissionDescriptor {}
impl ::core::fmt::Debug for IIsdbHierarchicalTransmissionDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbHierarchicalTransmissionDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbHierarchicalTransmissionDescriptor {
    type Vtable = IIsdbHierarchicalTransmissionDescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbHierarchicalTransmissionDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbHierarchicalTransmissionDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb7b3ae90_ee0b_446d_8769_f7e2aa266aa6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbHierarchicalTransmissionDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetFutureUse1: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetQualityLevel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetFutureUse2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetReferencePid: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbLogoTransmissionDescriptor(::windows::core::IUnknown);
impl IIsdbLogoTransmissionDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLogoTransmissionType(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLogoTransmissionType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLogoId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetLogoId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLogoVersion(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetLogoVersion)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDownloadDataId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetDownloadDataId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLogoCharW(&self, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetLogoCharW)(::windows::core::Interface::as_raw(self), convmode, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IIsdbLogoTransmissionDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbLogoTransmissionDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbLogoTransmissionDescriptor {}
impl ::core::fmt::Debug for IIsdbLogoTransmissionDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbLogoTransmissionDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbLogoTransmissionDescriptor {
    type Vtable = IIsdbLogoTransmissionDescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbLogoTransmissionDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbLogoTransmissionDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xe0103f49_4ae1_4f07_9098_756db1fa88cd);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbLogoTransmissionDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLogoTransmissionType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLogoId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetLogoVersion: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetDownloadDataId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetLogoCharW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrchar: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbSIParameterDescriptor(::windows::core::IUnknown);
impl IIsdbSIParameterDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetParameterVersion(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetParameterVersion)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetUpdateTime(&self) -> ::windows::core::Result<MPEG_DATE> {
        let mut result__ = ::windows::core::zeroed::<MPEG_DATE>();
        (::windows::core::Interface::vtable(self).GetUpdateTime)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordNumberOfTable(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordNumberOfTable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableId(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTableId)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptionLength(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTableDescriptionLength)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptionBytes(&self, brecordindex: u8, pbbufferlength: *mut u8, pbbuffer: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableDescriptionBytes)(::windows::core::Interface::as_raw(self), brecordindex, pbbufferlength, pbbuffer).ok()
    }
}
::windows::imp::interface_hierarchy!(IIsdbSIParameterDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbSIParameterDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbSIParameterDescriptor {}
impl ::core::fmt::Debug for IIsdbSIParameterDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbSIParameterDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbSIParameterDescriptor {
    type Vtable = IIsdbSIParameterDescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbSIParameterDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbSIParameterDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf837dc36_867c_426a_9111_f62093951a45);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbSIParameterDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetParameterVersion: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetUpdateTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut MPEG_DATE) -> ::windows::core::HRESULT,
    pub GetRecordNumberOfTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetTableId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetTableDescriptionLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetTableDescriptionBytes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbbufferlength: *mut u8, pbbuffer: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbSeriesDescriptor(::windows::core::IUnknown);
impl IIsdbSeriesDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSeriesId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetSeriesId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRepeatLabel(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRepeatLabel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetProgramPattern(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetProgramPattern)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetExpireDate(&self, pfvalid: *mut super::super::super::Foundation::BOOL, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetExpireDate)(::windows::core::Interface::as_raw(self), pfvalid, pmdtval).ok()
    }
    pub unsafe fn GetEpisodeNumber(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetEpisodeNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLastEpisodeNumber(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetLastEpisodeNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSeriesNameW(&self, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetSeriesNameW)(::windows::core::Interface::as_raw(self), convmode, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IIsdbSeriesDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbSeriesDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbSeriesDescriptor {}
impl ::core::fmt::Debug for IIsdbSeriesDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbSeriesDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbSeriesDescriptor {
    type Vtable = IIsdbSeriesDescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbSeriesDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbSeriesDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x07ef6370_1660_4f26_87fc_614adab24b11);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbSeriesDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetSeriesId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRepeatLabel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetProgramPattern: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetExpireDate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfvalid: *mut super::super::super::Foundation::BOOL, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetExpireDate: usize,
    pub GetEpisodeNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetLastEpisodeNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetSeriesNameW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbSiParser2(::windows::core::IUnknown);
impl IIsdbSiParser2 {
    pub unsafe fn Initialize<P0>(&self, punkmpeg2data: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::IUnknown>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.Initialize)(::windows::core::Interface::as_raw(self), punkmpeg2data.into_param().abi()).ok()
    }
    pub unsafe fn GetPAT(&self) -> ::windows::core::Result<IPAT> {
        let mut result__ = ::windows::core::zeroed::<IPAT>();
        (::windows::core::Interface::vtable(self).base__.base__.GetPAT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCAT(&self, dwtimeout: u32) -> ::windows::core::Result<ICAT> {
        let mut result__ = ::windows::core::zeroed::<ICAT>();
        (::windows::core::Interface::vtable(self).base__.base__.GetCAT)(::windows::core::Interface::as_raw(self), dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPMT(&self, pid: u16, pwprogramnumber: ::core::option::Option<*const u16>) -> ::windows::core::Result<IPMT> {
        let mut result__ = ::windows::core::zeroed::<IPMT>();
        (::windows::core::Interface::vtable(self).base__.base__.GetPMT)(::windows::core::Interface::as_raw(self), pid, ::core::mem::transmute(pwprogramnumber.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTSDT(&self) -> ::windows::core::Result<ITSDT> {
        let mut result__ = ::windows::core::zeroed::<ITSDT>();
        (::windows::core::Interface::vtable(self).base__.base__.GetTSDT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetNIT(&self, tableid: u8, pwnetworkid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IDVB_NIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_NIT>();
        (::windows::core::Interface::vtable(self).base__.base__.GetNIT)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pwnetworkid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSDT(&self, tableid: u8, pwtransportstreamid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IDVB_SDT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_SDT>();
        (::windows::core::Interface::vtable(self).base__.base__.GetSDT)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pwtransportstreamid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEIT(&self, tableid: u8, pwserviceid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IDVB_EIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_EIT>();
        (::windows::core::Interface::vtable(self).base__.base__.GetEIT)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pwserviceid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetBAT(&self, pwbouquetid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IDVB_BAT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_BAT>();
        (::windows::core::Interface::vtable(self).base__.base__.GetBAT)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pwbouquetid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRST(&self, dwtimeout: u32) -> ::windows::core::Result<IDVB_RST> {
        let mut result__ = ::windows::core::zeroed::<IDVB_RST>();
        (::windows::core::Interface::vtable(self).base__.base__.GetRST)(::windows::core::Interface::as_raw(self), dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetST(&self, pid: u16, dwtimeout: u32) -> ::windows::core::Result<IDVB_ST> {
        let mut result__ = ::windows::core::zeroed::<IDVB_ST>();
        (::windows::core::Interface::vtable(self).base__.base__.GetST)(::windows::core::Interface::as_raw(self), pid, dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTDT(&self) -> ::windows::core::Result<IDVB_TDT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_TDT>();
        (::windows::core::Interface::vtable(self).base__.base__.GetTDT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTOT(&self) -> ::windows::core::Result<IDVB_TOT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_TOT>();
        (::windows::core::Interface::vtable(self).base__.base__.GetTOT)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDIT(&self, dwtimeout: u32) -> ::windows::core::Result<IDVB_DIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_DIT>();
        (::windows::core::Interface::vtable(self).base__.base__.GetDIT)(::windows::core::Interface::as_raw(self), dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSIT(&self, dwtimeout: u32) -> ::windows::core::Result<IDVB_SIT> {
        let mut result__ = ::windows::core::zeroed::<IDVB_SIT>();
        (::windows::core::Interface::vtable(self).base__.base__.GetSIT)(::windows::core::Interface::as_raw(self), dwtimeout, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEIT2(&self, tableid: u8, pwserviceid: ::core::option::Option<*const u16>, pbsegment: ::core::option::Option<*const u8>) -> ::windows::core::Result<IDVB_EIT2> {
        let mut result__ = ::windows::core::zeroed::<IDVB_EIT2>();
        (::windows::core::Interface::vtable(self).base__.GetEIT2)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pwserviceid.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pbsegment.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSDT2(&self, tableid: u8, pwtransportstreamid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IISDB_SDT> {
        let mut result__ = ::windows::core::zeroed::<IISDB_SDT>();
        (::windows::core::Interface::vtable(self).GetSDT2)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pwtransportstreamid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetBIT(&self, tableid: u8, pworiginalnetworkid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IISDB_BIT> {
        let mut result__ = ::windows::core::zeroed::<IISDB_BIT>();
        (::windows::core::Interface::vtable(self).GetBIT)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pworiginalnetworkid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetNBIT(&self, tableid: u8, pworiginalnetworkid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IISDB_NBIT> {
        let mut result__ = ::windows::core::zeroed::<IISDB_NBIT>();
        (::windows::core::Interface::vtable(self).GetNBIT)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pworiginalnetworkid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLDT(&self, tableid: u8, pworiginalserviceid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IISDB_LDT> {
        let mut result__ = ::windows::core::zeroed::<IISDB_LDT>();
        (::windows::core::Interface::vtable(self).GetLDT)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pworiginalserviceid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSDTT(&self, tableid: u8, pwtableidext: ::core::option::Option<*const u16>) -> ::windows::core::Result<IISDB_SDTT> {
        let mut result__ = ::windows::core::zeroed::<IISDB_SDTT>();
        (::windows::core::Interface::vtable(self).GetSDTT)(::windows::core::Interface::as_raw(self), tableid, ::core::mem::transmute(pwtableidext.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCDT(&self, tableid: u8, bsectionnumber: u8, pwdownloaddataid: ::core::option::Option<*const u16>) -> ::windows::core::Result<IISDB_CDT> {
        let mut result__ = ::windows::core::zeroed::<IISDB_CDT>();
        (::windows::core::Interface::vtable(self).GetCDT)(::windows::core::Interface::as_raw(self), tableid, bsectionnumber, ::core::mem::transmute(pwdownloaddataid.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEMM(&self, pid: u16, wtableidext: u16) -> ::windows::core::Result<IISDB_EMM> {
        let mut result__ = ::windows::core::zeroed::<IISDB_EMM>();
        (::windows::core::Interface::vtable(self).GetEMM)(::windows::core::Interface::as_raw(self), pid, wtableidext, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IIsdbSiParser2, ::windows::core::IUnknown, IDvbSiParser, IDvbSiParser2);
impl ::core::cmp::PartialEq for IIsdbSiParser2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbSiParser2 {}
impl ::core::fmt::Debug for IIsdbSiParser2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbSiParser2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbSiParser2 {
    type Vtable = IIsdbSiParser2_Vtbl;
}
impl ::core::clone::Clone for IIsdbSiParser2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbSiParser2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x900e4bb7_18cd_453f_98be_3be6aa211772);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbSiParser2_Vtbl {
    pub base__: IDvbSiParser2_Vtbl,
    pub GetSDT2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tableid: u8, pwtransportstreamid: *const u16, ppsdt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetBIT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tableid: u8, pworiginalnetworkid: *const u16, ppbit: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetNBIT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tableid: u8, pworiginalnetworkid: *const u16, ppnbit: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetLDT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tableid: u8, pworiginalserviceid: *const u16, ppldt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetSDTT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tableid: u8, pwtableidext: *const u16, ppsdtt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetCDT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tableid: u8, bsectionnumber: u8, pwdownloaddataid: *const u16, ppcdt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetEMM: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pid: u16, wtableidext: u16, ppemm: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbTSInformationDescriptor(::windows::core::IUnknown);
impl IIsdbTSInformationDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRemoteControlKeyId(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRemoteControlKeyId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTSNameW(&self, convmode: DVB_STRCONV_MODE) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetTSNameW)(::windows::core::Interface::as_raw(self), convmode, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordTransmissionTypeInfo(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordTransmissionTypeInfo)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordNumberOfServices(&self, brecordindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordNumberOfServices)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordServiceIdByIndex(&self, brecordindex: u8, bserviceindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordServiceIdByIndex)(::windows::core::Interface::as_raw(self), brecordindex, bserviceindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IIsdbTSInformationDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbTSInformationDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbTSInformationDescriptor {}
impl ::core::fmt::Debug for IIsdbTSInformationDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbTSInformationDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbTSInformationDescriptor {
    type Vtable = IIsdbTSInformationDescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbTSInformationDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbTSInformationDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd7ad183e_38f5_4210_b55f_ec8d601bbd47);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbTSInformationDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRemoteControlKeyId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetTSNameW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordTransmissionTypeInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordNumberOfServices: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordServiceIdByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, bserviceindex: u8, pdwval: *mut u16) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IIsdbTerrestrialDeliverySystemDescriptor(::windows::core::IUnknown);
impl IIsdbTerrestrialDeliverySystemDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetAreaCode(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetAreaCode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetGuardInterval(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetGuardInterval)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTransmissionMode(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTransmissionMode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordFrequency(&self, brecordindex: u8) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordFrequency)(::windows::core::Interface::as_raw(self), brecordindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IIsdbTerrestrialDeliverySystemDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IIsdbTerrestrialDeliverySystemDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIsdbTerrestrialDeliverySystemDescriptor {}
impl ::core::fmt::Debug for IIsdbTerrestrialDeliverySystemDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIsdbTerrestrialDeliverySystemDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IIsdbTerrestrialDeliverySystemDescriptor {
    type Vtable = IIsdbTerrestrialDeliverySystemDescriptor_Vtbl;
}
impl ::core::clone::Clone for IIsdbTerrestrialDeliverySystemDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IIsdbTerrestrialDeliverySystemDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x39fae0a6_d151_44dd_a28a_765de5991670);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIsdbTerrestrialDeliverySystemDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetAreaCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetGuardInterval: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetTransmissionMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordFrequency: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brecordindex: u8, pdwval: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct ILanguageComponentType(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl ILanguageComponentType {
    pub unsafe fn Category(&self) -> ::windows::core::Result<super::ComponentCategory> {
        let mut result__ = ::windows::core::zeroed::<super::ComponentCategory>();
        (::windows::core::Interface::vtable(self).base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCategory(&self, category: super::ComponentCategory) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCategory)(::windows::core::Interface::as_raw(self), category).ok()
    }
    pub unsafe fn MediaMajorType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.MediaMajorType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMediaMajorType<P0>(&self, mediamajortype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetMediaMajorType)(::windows::core::Interface::as_raw(self), mediamajortype.into_param().abi()).ok()
    }
    pub unsafe fn _MediaMajorType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._MediaMajorType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_MediaMajorType(&self, mediamajortypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_MediaMajorType)(::windows::core::Interface::as_raw(self), mediamajortypeguid).ok()
    }
    pub unsafe fn MediaSubType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.MediaSubType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMediaSubType<P0>(&self, mediasubtype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetMediaSubType)(::windows::core::Interface::as_raw(self), mediasubtype.into_param().abi()).ok()
    }
    pub unsafe fn _MediaSubType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._MediaSubType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_MediaSubType(&self, mediasubtypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_MediaSubType)(::windows::core::Interface::as_raw(self), mediasubtypeguid).ok()
    }
    pub unsafe fn MediaFormatType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.MediaFormatType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMediaFormatType<P0>(&self, mediaformattype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetMediaFormatType)(::windows::core::Interface::as_raw(self), mediaformattype.into_param().abi()).ok()
    }
    pub unsafe fn _MediaFormatType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._MediaFormatType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_MediaFormatType(&self, mediaformattypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_MediaFormatType)(::windows::core::Interface::as_raw(self), mediaformattypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub unsafe fn MediaType(&self) -> ::windows::core::Result<super::super::MediaFoundation::AM_MEDIA_TYPE> {
        let mut result__ = ::windows::core::zeroed::<super::super::MediaFoundation::AM_MEDIA_TYPE>();
        (::windows::core::Interface::vtable(self).base__.MediaType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub unsafe fn SetMediaType(&self, mediatype: *const super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMediaType)(::windows::core::Interface::as_raw(self), mediatype).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IComponentType> {
        let mut result__ = ::windows::core::zeroed::<IComponentType>();
        (::windows::core::Interface::vtable(self).base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn LangID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).LangID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetLangID(&self, langid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetLangID)(::windows::core::Interface::as_raw(self), langid).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(ILanguageComponentType, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IComponentType);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for ILanguageComponentType {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for ILanguageComponentType {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for ILanguageComponentType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ILanguageComponentType").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for ILanguageComponentType {
    type Vtable = ILanguageComponentType_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for ILanguageComponentType {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for ILanguageComponentType {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb874c8ba_0fa2_11d3_9d8e_00c04f72d980);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct ILanguageComponentType_Vtbl {
    pub base__: IComponentType_Vtbl,
    pub LangID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, langid: *mut i32) -> ::windows::core::HRESULT,
    pub SetLangID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, langid: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct ILocator(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl ILocator {
    pub unsafe fn CarrierFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CarrierFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCarrierFrequency(&self, frequency: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetCarrierFrequency)(::windows::core::Interface::as_raw(self), frequency).ok()
    }
    pub unsafe fn InnerFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).InnerFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetInnerFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn InnerFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).InnerFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInnerFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetInnerFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFEC(&self) -> ::windows::core::Result<super::FECMethod> {
        let mut result__ = ::windows::core::zeroed::<super::FECMethod>();
        (::windows::core::Interface::vtable(self).OuterFEC)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFEC(&self, fec: super::FECMethod) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetOuterFEC)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn OuterFECRate(&self) -> ::windows::core::Result<super::BinaryConvolutionCodeRate> {
        let mut result__ = ::windows::core::zeroed::<super::BinaryConvolutionCodeRate>();
        (::windows::core::Interface::vtable(self).OuterFECRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOuterFECRate(&self, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetOuterFECRate)(::windows::core::Interface::as_raw(self), fec).ok()
    }
    pub unsafe fn Modulation(&self) -> ::windows::core::Result<super::ModulationType> {
        let mut result__ = ::windows::core::zeroed::<super::ModulationType>();
        (::windows::core::Interface::vtable(self).Modulation)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetModulation(&self, modulation: super::ModulationType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetModulation)(::windows::core::Interface::as_raw(self), modulation).ok()
    }
    pub unsafe fn SymbolRate(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).SymbolRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSymbolRate(&self, rate: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetSymbolRate)(::windows::core::Interface::as_raw(self), rate).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(ILocator, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for ILocator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for ILocator {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for ILocator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ILocator").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for ILocator {
    type Vtable = ILocator_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for ILocator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for ILocator {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x286d7f89_760c_4f89_80c4_66841d2507aa);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct ILocator_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub CarrierFrequency: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, frequency: *mut i32) -> ::windows::core::HRESULT,
    pub SetCarrierFrequency: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, frequency: i32) -> ::windows::core::HRESULT,
    pub InnerFEC: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fec: *mut super::FECMethod) -> ::windows::core::HRESULT,
    pub SetInnerFEC: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fec: super::FECMethod) -> ::windows::core::HRESULT,
    pub InnerFECRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fec: *mut super::BinaryConvolutionCodeRate) -> ::windows::core::HRESULT,
    pub SetInnerFECRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::HRESULT,
    pub OuterFEC: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fec: *mut super::FECMethod) -> ::windows::core::HRESULT,
    pub SetOuterFEC: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fec: super::FECMethod) -> ::windows::core::HRESULT,
    pub OuterFECRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fec: *mut super::BinaryConvolutionCodeRate) -> ::windows::core::HRESULT,
    pub SetOuterFECRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fec: super::BinaryConvolutionCodeRate) -> ::windows::core::HRESULT,
    pub Modulation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, modulation: *mut super::ModulationType) -> ::windows::core::HRESULT,
    pub SetModulation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, modulation: super::ModulationType) -> ::windows::core::HRESULT,
    pub SymbolRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rate: *mut i32) -> ::windows::core::HRESULT,
    pub SetSymbolRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rate: i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newlocator: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Clone: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMPEG2Component(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMPEG2Component {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Type(&self) -> ::windows::core::Result<IComponentType> {
        let mut result__ = ::windows::core::zeroed::<IComponentType>();
        (::windows::core::Interface::vtable(self).base__.Type)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetType<P0>(&self, ct: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentType>,
    {
        (::windows::core::Interface::vtable(self).base__.SetType)(::windows::core::Interface::as_raw(self), ct.into_param().abi()).ok()
    }
    pub unsafe fn DescLangID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.DescLangID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDescLangID(&self, langid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetDescLangID)(::windows::core::Interface::as_raw(self), langid).ok()
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<super::ComponentStatus> {
        let mut result__ = ::windows::core::zeroed::<super::ComponentStatus>();
        (::windows::core::Interface::vtable(self).base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetStatus(&self, status: super::ComponentStatus) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetStatus)(::windows::core::Interface::as_raw(self), status).ok()
    }
    pub unsafe fn Description(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.Description)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDescription<P0>(&self, description: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetDescription)(::windows::core::Interface::as_raw(self), description.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IComponent> {
        let mut result__ = ::windows::core::zeroed::<IComponent>();
        (::windows::core::Interface::vtable(self).base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn PID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).PID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPID(&self, pid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPID)(::windows::core::Interface::as_raw(self), pid).ok()
    }
    pub unsafe fn PCRPID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).PCRPID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPCRPID(&self, pcrpid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPCRPID)(::windows::core::Interface::as_raw(self), pcrpid).ok()
    }
    pub unsafe fn ProgramNumber(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).ProgramNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetProgramNumber(&self, programnumber: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetProgramNumber)(::windows::core::Interface::as_raw(self), programnumber).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMPEG2Component, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IComponent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMPEG2Component {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMPEG2Component {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMPEG2Component {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMPEG2Component").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMPEG2Component {
    type Vtable = IMPEG2Component_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMPEG2Component {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMPEG2Component {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1493e353_1eb6_473c_802d_8e6b8ec9d2a9);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMPEG2Component_Vtbl {
    pub base__: IComponent_Vtbl,
    pub PID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pid: *mut i32) -> ::windows::core::HRESULT,
    pub SetPID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pid: i32) -> ::windows::core::HRESULT,
    pub PCRPID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcrpid: *mut i32) -> ::windows::core::HRESULT,
    pub SetPCRPID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcrpid: i32) -> ::windows::core::HRESULT,
    pub ProgramNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, programnumber: *mut i32) -> ::windows::core::HRESULT,
    pub SetProgramNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, programnumber: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMPEG2ComponentType(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMPEG2ComponentType {
    pub unsafe fn Category(&self) -> ::windows::core::Result<super::ComponentCategory> {
        let mut result__ = ::windows::core::zeroed::<super::ComponentCategory>();
        (::windows::core::Interface::vtable(self).base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCategory(&self, category: super::ComponentCategory) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetCategory)(::windows::core::Interface::as_raw(self), category).ok()
    }
    pub unsafe fn MediaMajorType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.MediaMajorType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMediaMajorType<P0>(&self, mediamajortype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetMediaMajorType)(::windows::core::Interface::as_raw(self), mediamajortype.into_param().abi()).ok()
    }
    pub unsafe fn _MediaMajorType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._MediaMajorType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_MediaMajorType(&self, mediamajortypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Set_MediaMajorType)(::windows::core::Interface::as_raw(self), mediamajortypeguid).ok()
    }
    pub unsafe fn MediaSubType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.MediaSubType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMediaSubType<P0>(&self, mediasubtype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetMediaSubType)(::windows::core::Interface::as_raw(self), mediasubtype.into_param().abi()).ok()
    }
    pub unsafe fn _MediaSubType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._MediaSubType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_MediaSubType(&self, mediasubtypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Set_MediaSubType)(::windows::core::Interface::as_raw(self), mediasubtypeguid).ok()
    }
    pub unsafe fn MediaFormatType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.MediaFormatType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMediaFormatType<P0>(&self, mediaformattype: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetMediaFormatType)(::windows::core::Interface::as_raw(self), mediaformattype.into_param().abi()).ok()
    }
    pub unsafe fn _MediaFormatType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._MediaFormatType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_MediaFormatType(&self, mediaformattypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Set_MediaFormatType)(::windows::core::Interface::as_raw(self), mediaformattypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub unsafe fn MediaType(&self) -> ::windows::core::Result<super::super::MediaFoundation::AM_MEDIA_TYPE> {
        let mut result__ = ::windows::core::zeroed::<super::super::MediaFoundation::AM_MEDIA_TYPE>();
        (::windows::core::Interface::vtable(self).base__.base__.MediaType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub unsafe fn SetMediaType(&self, mediatype: *const super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetMediaType)(::windows::core::Interface::as_raw(self), mediatype).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<IComponentType> {
        let mut result__ = ::windows::core::zeroed::<IComponentType>();
        (::windows::core::Interface::vtable(self).base__.base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn LangID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.LangID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetLangID(&self, langid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetLangID)(::windows::core::Interface::as_raw(self), langid).ok()
    }
    pub unsafe fn StreamType(&self) -> ::windows::core::Result<super::MPEG2StreamType> {
        let mut result__ = ::windows::core::zeroed::<super::MPEG2StreamType>();
        (::windows::core::Interface::vtable(self).StreamType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetStreamType(&self, mp2streamtype: super::MPEG2StreamType) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetStreamType)(::windows::core::Interface::as_raw(self), mp2streamtype).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMPEG2ComponentType, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IComponentType, ILanguageComponentType);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMPEG2ComponentType {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMPEG2ComponentType {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMPEG2ComponentType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMPEG2ComponentType").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMPEG2ComponentType {
    type Vtable = IMPEG2ComponentType_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMPEG2ComponentType {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMPEG2ComponentType {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2c073d84_b51c_48c9_aa9f_68971e1f6e38);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMPEG2ComponentType_Vtbl {
    pub base__: ILanguageComponentType_Vtbl,
    pub StreamType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mp2streamtype: *mut super::MPEG2StreamType) -> ::windows::core::HRESULT,
    pub SetStreamType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mp2streamtype: super::MPEG2StreamType) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMPEG2TuneRequest(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMPEG2TuneRequest {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuningSpace(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.TuningSpace)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Components(&self) -> ::windows::core::Result<IComponents> {
        let mut result__ = ::windows::core::zeroed::<IComponents>();
        (::windows::core::Interface::vtable(self).base__.Components)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Locator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).base__.Locator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetLocator<P0>(&self, locator: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).base__.SetLocator)(::windows::core::Interface::as_raw(self), locator.into_param().abi()).ok()
    }
    pub unsafe fn TSID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).TSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetTSID(&self, tsid: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetTSID)(::windows::core::Interface::as_raw(self), tsid).ok()
    }
    pub unsafe fn ProgNo(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).ProgNo)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetProgNo(&self, progno: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetProgNo)(::windows::core::Interface::as_raw(self), progno).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMPEG2TuneRequest, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, ITuneRequest);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMPEG2TuneRequest {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMPEG2TuneRequest {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMPEG2TuneRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMPEG2TuneRequest").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMPEG2TuneRequest {
    type Vtable = IMPEG2TuneRequest_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMPEG2TuneRequest {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMPEG2TuneRequest {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xeb7d987f_8a01_42ad_b8ae_574deee44d1a);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMPEG2TuneRequest_Vtbl {
    pub base__: ITuneRequest_Vtbl,
    pub TSID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tsid: *mut i32) -> ::windows::core::HRESULT,
    pub SetTSID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tsid: i32) -> ::windows::core::HRESULT,
    pub ProgNo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, progno: *mut i32) -> ::windows::core::HRESULT,
    pub SetProgNo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, progno: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMPEG2TuneRequestFactory(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMPEG2TuneRequestFactory {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateTuneRequest<P0>(&self, tuningspace: P0) -> ::windows::core::Result<IMPEG2TuneRequest>
    where
        P0: ::windows::core::IntoParam<ITuningSpace>,
    {
        let mut result__ = ::windows::core::zeroed::<IMPEG2TuneRequest>();
        (::windows::core::Interface::vtable(self).CreateTuneRequest)(::windows::core::Interface::as_raw(self), tuningspace.into_param().abi(), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMPEG2TuneRequestFactory, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMPEG2TuneRequestFactory {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMPEG2TuneRequestFactory {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMPEG2TuneRequestFactory {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMPEG2TuneRequestFactory").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMPEG2TuneRequestFactory {
    type Vtable = IMPEG2TuneRequestFactory_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMPEG2TuneRequestFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMPEG2TuneRequestFactory {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x14e11abd_ee37_4893_9ea1_6964de933e39);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMPEG2TuneRequestFactory_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub CreateTuneRequest: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tuningspace: *mut ::core::ffi::c_void, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    CreateTuneRequest: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IMPEG2TuneRequestSupport(::windows::core::IUnknown);
impl IMPEG2TuneRequestSupport {}
::windows::imp::interface_hierarchy!(IMPEG2TuneRequestSupport, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IMPEG2TuneRequestSupport {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IMPEG2TuneRequestSupport {}
impl ::core::fmt::Debug for IMPEG2TuneRequestSupport {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMPEG2TuneRequestSupport").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IMPEG2TuneRequestSupport {
    type Vtable = IMPEG2TuneRequestSupport_Vtbl;
}
impl ::core::clone::Clone for IMPEG2TuneRequestSupport {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IMPEG2TuneRequestSupport {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1b9d5fc3_5bbc_4b6c_bb18_b9d10e3eeebf);
}
#[repr(C)]
#[doc(hidden)]
pub struct IMPEG2TuneRequestSupport_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IMPEG2_TIF_CONTROL(::windows::core::IUnknown);
impl IMPEG2_TIF_CONTROL {
    pub unsafe fn RegisterTIF<P0>(&self, punktif: P0, ppvregistrationcontext: *mut u32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::IUnknown>,
    {
        (::windows::core::Interface::vtable(self).RegisterTIF)(::windows::core::Interface::as_raw(self), punktif.into_param().abi(), ppvregistrationcontext).ok()
    }
    pub unsafe fn UnregisterTIF(&self, pvregistrationcontext: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).UnregisterTIF)(::windows::core::Interface::as_raw(self), pvregistrationcontext).ok()
    }
    pub unsafe fn AddPIDs(&self, ulcpids: u32, pulpids: *const u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AddPIDs)(::windows::core::Interface::as_raw(self), ulcpids, pulpids).ok()
    }
    pub unsafe fn DeletePIDs(&self, ulcpids: u32, pulpids: *const u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DeletePIDs)(::windows::core::Interface::as_raw(self), ulcpids, pulpids).ok()
    }
    pub unsafe fn GetPIDCount(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetPIDCount)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPIDs(&self, pulcpids: *mut u32, pulpids: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetPIDs)(::windows::core::Interface::as_raw(self), pulcpids, pulpids).ok()
    }
}
::windows::imp::interface_hierarchy!(IMPEG2_TIF_CONTROL, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IMPEG2_TIF_CONTROL {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IMPEG2_TIF_CONTROL {}
impl ::core::fmt::Debug for IMPEG2_TIF_CONTROL {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMPEG2_TIF_CONTROL").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IMPEG2_TIF_CONTROL {
    type Vtable = IMPEG2_TIF_CONTROL_Vtbl;
}
impl ::core::clone::Clone for IMPEG2_TIF_CONTROL {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IMPEG2_TIF_CONTROL {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf9bac2f9_4149_4916_b2ef_faa202326862);
}
#[repr(C)]
#[doc(hidden)]
pub struct IMPEG2_TIF_CONTROL_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub RegisterTIF: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punktif: *mut ::core::ffi::c_void, ppvregistrationcontext: *mut u32) -> ::windows::core::HRESULT,
    pub UnregisterTIF: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pvregistrationcontext: u32) -> ::windows::core::HRESULT,
    pub AddPIDs: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ulcpids: u32, pulpids: *const u32) -> ::windows::core::HRESULT,
    pub DeletePIDs: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ulcpids: u32, pulpids: *const u32) -> ::windows::core::HRESULT,
    pub GetPIDCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pulcpids: *mut u32) -> ::windows::core::HRESULT,
    pub GetPIDs: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pulcpids: *mut u32, pulpids: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSEventBinder(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSEventBinder {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Bind<P0, P1, P2>(&self, peventobject: P0, eventname: P1, eventhandler: P2) -> ::windows::core::Result<i32>
    where
        P0: ::windows::core::IntoParam<super::super::super::System::Com::IDispatch>,
        P1: ::windows::core::IntoParam<::windows::core::BSTR>,
        P2: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Bind)(::windows::core::Interface::as_raw(self), peventobject.into_param().abi(), eventname.into_param().abi(), eventhandler.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Unbind(&self, cancelcookie: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Unbind)(::windows::core::Interface::as_raw(self), cancelcookie).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSEventBinder, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSEventBinder {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSEventBinder {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSEventBinder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSEventBinder").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSEventBinder {
    type Vtable = IMSEventBinder_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSEventBinder {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSEventBinder {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc3a9f406_2222_436d_86d5_ba3229279efb);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSEventBinder_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Bind: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, peventobject: *mut ::core::ffi::c_void, eventname: ::std::mem::MaybeUninit<::windows::core::BSTR>, eventhandler: ::std::mem::MaybeUninit<::windows::core::BSTR>, cancelid: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Bind: usize,
    pub Unbind: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, cancelcookie: u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidAnalogTuner(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidAnalogTuner {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn IsViewable(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.IsViewable)(::windows::core::Interface::as_raw(self), v, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn View(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.View)(::windows::core::Interface::as_raw(self), v).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Tune(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.Tune)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetTune<P0>(&self, ptr: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        (::windows::core::Interface::vtable(self).base__.SetTune)(::windows::core::Interface::as_raw(self), ptr.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuningSpace(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.TuningSpace)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetTuningSpace<P0>(&self, plts: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuningSpace>,
    {
        (::windows::core::Interface::vtable(self).base__.SetTuningSpace)(::windows::core::Interface::as_raw(self), plts.into_param().abi()).ok()
    }
    pub unsafe fn Channel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Channel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetChannel(&self, channel: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetChannel)(::windows::core::Interface::as_raw(self), channel).ok()
    }
    pub unsafe fn VideoFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).VideoFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AudioFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).AudioFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CountryCode(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CountryCode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCountryCode(&self, lcc: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetCountryCode)(::windows::core::Interface::as_raw(self), lcc).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SAP(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).SAP)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetSAP<P0>(&self, fsapon: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetSAP)(::windows::core::Interface::as_raw(self), fsapon.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ChannelAvailable(&self, nchannel: i32, signalstrength: *mut i32, fsignalpresent: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ChannelAvailable)(::windows::core::Interface::as_raw(self), nchannel, signalstrength, fsignalpresent).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidAnalogTuner, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidInputDevice, IMSVidVideoInputDevice, IMSVidTuner);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidAnalogTuner {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidAnalogTuner {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidAnalogTuner {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidAnalogTuner").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidAnalogTuner {
    type Vtable = IMSVidAnalogTuner_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidAnalogTuner {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidAnalogTuner {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1c15d47e_911d_11d2_b632_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidAnalogTuner_Vtbl {
    pub base__: IMSVidTuner_Vtbl,
    pub Channel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, channel: *mut i32) -> ::windows::core::HRESULT,
    pub SetChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, channel: i32) -> ::windows::core::HRESULT,
    pub VideoFrequency: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lcc: *mut i32) -> ::windows::core::HRESULT,
    pub AudioFrequency: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lcc: *mut i32) -> ::windows::core::HRESULT,
    pub CountryCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lcc: *mut i32) -> ::windows::core::HRESULT,
    pub SetCountryCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lcc: i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SAP: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfsapon: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SAP: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetSAP: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fsapon: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetSAP: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub ChannelAvailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, nchannel: i32, signalstrength: *mut i32, fsignalpresent: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ChannelAvailable: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidAnalogTuner2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidAnalogTuner2 {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn IsViewable(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.IsViewable)(::windows::core::Interface::as_raw(self), v, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn View(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.View)(::windows::core::Interface::as_raw(self), v).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Tune(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.base__.Tune)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetTune<P0>(&self, ptr: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetTune)(::windows::core::Interface::as_raw(self), ptr.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuningSpace(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.base__.TuningSpace)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetTuningSpace<P0>(&self, plts: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuningSpace>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetTuningSpace)(::windows::core::Interface::as_raw(self), plts.into_param().abi()).ok()
    }
    pub unsafe fn Channel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.Channel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetChannel(&self, channel: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetChannel)(::windows::core::Interface::as_raw(self), channel).ok()
    }
    pub unsafe fn VideoFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.VideoFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AudioFrequency(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.AudioFrequency)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CountryCode(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.CountryCode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCountryCode(&self, lcc: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCountryCode)(::windows::core::Interface::as_raw(self), lcc).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SAP(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.SAP)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetSAP<P0>(&self, fsapon: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetSAP)(::windows::core::Interface::as_raw(self), fsapon.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ChannelAvailable(&self, nchannel: i32, signalstrength: *mut i32, fsignalpresent: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.ChannelAvailable)(::windows::core::Interface::as_raw(self), nchannel, signalstrength, fsignalpresent).ok()
    }
    pub unsafe fn TVFormats(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).TVFormats)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn TunerModes(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).TunerModes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn NumAuxInputs(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).NumAuxInputs)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidAnalogTuner2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidInputDevice, IMSVidVideoInputDevice, IMSVidTuner, IMSVidAnalogTuner);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidAnalogTuner2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidAnalogTuner2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidAnalogTuner2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidAnalogTuner2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidAnalogTuner2 {
    type Vtable = IMSVidAnalogTuner2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidAnalogTuner2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidAnalogTuner2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37647bf7_3dde_4cc8_a4dc_0d534d3d0037);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidAnalogTuner2_Vtbl {
    pub base__: IMSVidAnalogTuner_Vtbl,
    pub TVFormats: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, formats: *mut i32) -> ::windows::core::HRESULT,
    pub TunerModes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, modes: *mut i32) -> ::windows::core::HRESULT,
    pub NumAuxInputs: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, inputs: *mut i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidAnalogTunerEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidAnalogTunerEvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuneChanged<P0>(&self, lpd: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidTuner>,
    {
        (::windows::core::Interface::vtable(self).base__.TuneChanged)(::windows::core::Interface::as_raw(self), lpd.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidAnalogTunerEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidInputDeviceEvent, IMSVidTunerEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidAnalogTunerEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidAnalogTunerEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidAnalogTunerEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidAnalogTunerEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidAnalogTunerEvent {
    type Vtable = IMSVidAnalogTunerEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidAnalogTunerEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidAnalogTunerEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1c15d486_911d_11d2_b632_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidAnalogTunerEvent_Vtbl {
    pub base__: IMSVidTunerEvent_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidAudioRenderer(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidAudioRenderer {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetVolume(&self, lvol: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetVolume)(::windows::core::Interface::as_raw(self), lvol).ok()
    }
    pub unsafe fn Volume(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Volume)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetBalance(&self, lbal: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetBalance)(::windows::core::Interface::as_raw(self), lbal).ok()
    }
    pub unsafe fn Balance(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Balance)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidAudioRenderer, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidOutputDevice);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidAudioRenderer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidAudioRenderer {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidAudioRenderer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidAudioRenderer").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidAudioRenderer {
    type Vtable = IMSVidAudioRenderer_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidAudioRenderer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidAudioRenderer {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37b0353f_a4c8_11d2_b634_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidAudioRenderer_Vtbl {
    pub base__: IMSVidOutputDevice_Vtbl,
    pub SetVolume: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lvol: i32) -> ::windows::core::HRESULT,
    pub Volume: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lvol: *mut i32) -> ::windows::core::HRESULT,
    pub SetBalance: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lbal: i32) -> ::windows::core::HRESULT,
    pub Balance: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lbal: *mut i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidAudioRendererDevices(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidAudioRendererDevices {
    pub unsafe fn Count(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Count)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn _NewEnum(&self) -> ::windows::core::Result<super::super::super::System::Ole::IEnumVARIANT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IEnumVARIANT>();
        (::windows::core::Interface::vtable(self)._NewEnum)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn get_Item(&self, v: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<IMSVidAudioRenderer> {
        let mut result__ = ::windows::core::zeroed::<IMSVidAudioRenderer>();
        (::windows::core::Interface::vtable(self).get_Item)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(v), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Add<P0>(&self, pdb: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidAudioRenderer>,
    {
        (::windows::core::Interface::vtable(self).Add)(::windows::core::Interface::as_raw(self), pdb.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Remove(&self, v: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Remove)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(v)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidAudioRendererDevices, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidAudioRendererDevices {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidAudioRendererDevices {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidAudioRendererDevices {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidAudioRendererDevices").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidAudioRendererDevices {
    type Vtable = IMSVidAudioRendererDevices_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidAudioRendererDevices {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidAudioRendererDevices {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc5702cd4_9b79_11d3_b654_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidAudioRendererDevices_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub Count: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lcount: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Ole")]
    pub _NewEnum: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pd: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    _NewEnum: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub get_Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, v: super::super::super::System::Com::VARIANT, pdb: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    get_Item: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Add: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdb: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Add: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Remove: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, v: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Remove: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidAudioRendererEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidAudioRendererEvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn StateChange<P0>(&self, lpd: P0, oldstate: i32, newstate: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.StateChange)(::windows::core::Interface::as_raw(self), lpd.into_param().abi(), oldstate, newstate).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidAudioRendererEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDeviceEvent, IMSVidOutputDeviceEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidAudioRendererEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidAudioRendererEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidAudioRendererEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidAudioRendererEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidAudioRendererEvent {
    type Vtable = IMSVidAudioRendererEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidAudioRendererEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidAudioRendererEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37b03541_a4c8_11d2_b634_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidAudioRendererEvent_Vtbl {
    pub base__: IMSVidOutputDeviceEvent_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidAudioRendererEvent2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidAudioRendererEvent2 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn StateChange<P0>(&self, lpd: P0, oldstate: i32, newstate: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.StateChange)(::windows::core::Interface::as_raw(self), lpd.into_param().abi(), oldstate, newstate).ok()
    }
    pub unsafe fn AVDecAudioDualMono(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AVDecAudioDualMono)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn AVAudioSampleRate(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AVAudioSampleRate)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn AVAudioChannelConfig(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AVAudioChannelConfig)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn AVAudioChannelCount(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AVAudioChannelCount)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn AVDecCommonMeanBitRate(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AVDecCommonMeanBitRate)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn AVDDSurroundMode(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AVDDSurroundMode)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn AVDecCommonInputFormat(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AVDecCommonInputFormat)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn AVDecCommonOutputFormat(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AVDecCommonOutputFormat)(::windows::core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidAudioRendererEvent2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDeviceEvent, IMSVidOutputDeviceEvent, IMSVidAudioRendererEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidAudioRendererEvent2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidAudioRendererEvent2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidAudioRendererEvent2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidAudioRendererEvent2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidAudioRendererEvent2 {
    type Vtable = IMSVidAudioRendererEvent2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidAudioRendererEvent2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidAudioRendererEvent2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xe3f55729_353b_4c43_a028_50f79aa9a907);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidAudioRendererEvent2_Vtbl {
    pub base__: IMSVidAudioRendererEvent_Vtbl,
    pub AVDecAudioDualMono: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub AVAudioSampleRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub AVAudioChannelConfig: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub AVAudioChannelCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub AVDecCommonMeanBitRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub AVDDSurroundMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub AVDecCommonInputFormat: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub AVDecCommonOutputFormat: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidClosedCaptioning(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidClosedCaptioning {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Enable(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).Enable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetEnable<P0>(&self, on: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetEnable)(::windows::core::Interface::as_raw(self), on.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidClosedCaptioning, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidFeature);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidClosedCaptioning {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidClosedCaptioning {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidClosedCaptioning {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidClosedCaptioning").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidClosedCaptioning {
    type Vtable = IMSVidClosedCaptioning_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidClosedCaptioning {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidClosedCaptioning {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x99652ea1_c1f7_414f_bb7b_1c967de75983);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidClosedCaptioning_Vtbl {
    pub base__: IMSVidFeature_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Enable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, on: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Enable: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetEnable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, on: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetEnable: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidClosedCaptioning2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidClosedCaptioning2 {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Enable(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.Enable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetEnable<P0>(&self, on: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetEnable)(::windows::core::Interface::as_raw(self), on.into_param().abi()).ok()
    }
    pub unsafe fn Service(&self) -> ::windows::core::Result<MSVidCCService> {
        let mut result__ = ::windows::core::zeroed::<MSVidCCService>();
        (::windows::core::Interface::vtable(self).Service)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetService(&self, on: MSVidCCService) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetService)(::windows::core::Interface::as_raw(self), on).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidClosedCaptioning2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidFeature, IMSVidClosedCaptioning);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidClosedCaptioning2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidClosedCaptioning2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidClosedCaptioning2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidClosedCaptioning2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidClosedCaptioning2 {
    type Vtable = IMSVidClosedCaptioning2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidClosedCaptioning2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidClosedCaptioning2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xe00cb864_a029_4310_9987_a873f5887d97);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidClosedCaptioning2_Vtbl {
    pub base__: IMSVidClosedCaptioning_Vtbl,
    pub Service: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, on: *mut MSVidCCService) -> ::windows::core::HRESULT,
    pub SetService: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, on: MSVidCCService) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidClosedCaptioning3(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidClosedCaptioning3 {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Enable(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.Enable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetEnable<P0>(&self, on: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetEnable)(::windows::core::Interface::as_raw(self), on.into_param().abi()).ok()
    }
    pub unsafe fn Service(&self) -> ::windows::core::Result<MSVidCCService> {
        let mut result__ = ::windows::core::zeroed::<MSVidCCService>();
        (::windows::core::Interface::vtable(self).base__.Service)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetService(&self, on: MSVidCCService) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetService)(::windows::core::Interface::as_raw(self), on).ok()
    }
    pub unsafe fn TeleTextFilter(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).TeleTextFilter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidClosedCaptioning3, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidFeature, IMSVidClosedCaptioning, IMSVidClosedCaptioning2);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidClosedCaptioning3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidClosedCaptioning3 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidClosedCaptioning3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidClosedCaptioning3").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidClosedCaptioning3 {
    type Vtable = IMSVidClosedCaptioning3_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidClosedCaptioning3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidClosedCaptioning3 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc8638e8a_7625_4c51_9366_2f40a9831fc0);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidClosedCaptioning3_Vtbl {
    pub base__: IMSVidClosedCaptioning2_Vtbl,
    pub TeleTextFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkttfilter: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidCompositionSegment(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidCompositionSegment {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.GetClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Init(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).base__.Init)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInit<P0>(&self, pinit: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::IUnknown>,
    {
        (::windows::core::Interface::vtable(self).base__.SetInit)(::windows::core::Interface::as_raw(self), pinit.into_param().abi()).ok()
    }
    pub unsafe fn EnumFilters(&self) -> ::windows::core::Result<super::IEnumFilters> {
        let mut result__ = ::windows::core::zeroed::<super::IEnumFilters>();
        (::windows::core::Interface::vtable(self).base__.EnumFilters)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Container(&self) -> ::windows::core::Result<IMSVidGraphSegmentContainer> {
        let mut result__ = ::windows::core::zeroed::<IMSVidGraphSegmentContainer>();
        (::windows::core::Interface::vtable(self).base__.Container)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetContainer<P0>(&self, pctl: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidGraphSegmentContainer>,
    {
        (::windows::core::Interface::vtable(self).base__.SetContainer)(::windows::core::Interface::as_raw(self), pctl.into_param().abi()).ok()
    }
    pub unsafe fn Type(&self) -> ::windows::core::Result<MSVidSegmentType> {
        let mut result__ = ::windows::core::zeroed::<MSVidSegmentType>();
        (::windows::core::Interface::vtable(self).base__.Type)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Build(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Build)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PostBuild(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PostBuild)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PreRun(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PreRun)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PostRun(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PostRun)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PreStop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PreStop)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PostStop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PostStop)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn OnEventNotify(&self, leventcode: i32, leventparm1: isize, leventparm2: isize) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.OnEventNotify)(::windows::core::Interface::as_raw(self), leventcode, leventparm1, leventparm2).ok()
    }
    pub unsafe fn Decompose(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Decompose)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Compose<P0, P1>(&self, upstream: P0, downstream: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidGraphSegment>,
        P1: ::windows::core::IntoParam<IMSVidGraphSegment>,
    {
        (::windows::core::Interface::vtable(self).Compose)(::windows::core::Interface::as_raw(self), upstream.into_param().abi(), downstream.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Up(&self) -> ::windows::core::Result<IMSVidGraphSegment> {
        let mut result__ = ::windows::core::zeroed::<IMSVidGraphSegment>();
        (::windows::core::Interface::vtable(self).Up)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Down(&self) -> ::windows::core::Result<IMSVidGraphSegment> {
        let mut result__ = ::windows::core::zeroed::<IMSVidGraphSegment>();
        (::windows::core::Interface::vtable(self).Down)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidCompositionSegment, ::windows::core::IUnknown, super::super::super::System::Com::IPersist, IMSVidGraphSegment);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidCompositionSegment {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidCompositionSegment {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidCompositionSegment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidCompositionSegment").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidCompositionSegment {
    type Vtable = IMSVidCompositionSegment_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidCompositionSegment {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidCompositionSegment {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1c15d483_911d_11d2_b632_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidCompositionSegment_Vtbl {
    pub base__: IMSVidGraphSegment_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Compose: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, upstream: *mut ::core::ffi::c_void, downstream: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Compose: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Up: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, upstream: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Up: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Down: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, downstream: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Down: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidCtl(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidCtl {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AutoSize(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).AutoSize)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetAutoSize<P0>(&self, vbool: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetAutoSize)(::windows::core::Interface::as_raw(self), vbool.into_param().abi()).ok()
    }
    pub unsafe fn BackColor(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).BackColor)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetBackColor(&self, backcolor: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetBackColor)(::windows::core::Interface::as_raw(self), backcolor).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Enabled(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).Enabled)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetEnabled<P0>(&self, vbool: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetEnabled)(::windows::core::Interface::as_raw(self), vbool.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn TabStop(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).TabStop)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetTabStop<P0>(&self, vbool: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetTabStop)(::windows::core::Interface::as_raw(self), vbool.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Window(&self) -> ::windows::core::Result<super::super::super::Foundation::HWND> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::HWND>();
        (::windows::core::Interface::vtable(self).Window)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Refresh(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Refresh)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn DisplaySize(&self) -> ::windows::core::Result<DisplaySizeList> {
        let mut result__ = ::windows::core::zeroed::<DisplaySizeList>();
        (::windows::core::Interface::vtable(self).DisplaySize)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDisplaySize(&self, newvalue: DisplaySizeList) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetDisplaySize)(::windows::core::Interface::as_raw(self), newvalue).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn MaintainAspectRatio(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).MaintainAspectRatio)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetMaintainAspectRatio<P0>(&self, newvalue: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetMaintainAspectRatio)(::windows::core::Interface::as_raw(self), newvalue.into_param().abi()).ok()
    }
    pub unsafe fn ColorKey(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).ColorKey)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetColorKey(&self, newvalue: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetColorKey)(::windows::core::Interface::as_raw(self), newvalue).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn get_InputsAvailable<P0>(&self, categoryguid: P0) -> ::windows::core::Result<IMSVidInputDevices>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<IMSVidInputDevices>();
        (::windows::core::Interface::vtable(self).get_InputsAvailable)(::windows::core::Interface::as_raw(self), categoryguid.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn get_OutputsAvailable<P0>(&self, categoryguid: P0) -> ::windows::core::Result<IMSVidOutputDevices>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<IMSVidOutputDevices>();
        (::windows::core::Interface::vtable(self).get_OutputsAvailable)(::windows::core::Interface::as_raw(self), categoryguid.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn get__InputsAvailable(&self, categoryguid: *const ::windows::core::GUID) -> ::windows::core::Result<IMSVidInputDevices> {
        let mut result__ = ::windows::core::zeroed::<IMSVidInputDevices>();
        (::windows::core::Interface::vtable(self).get__InputsAvailable)(::windows::core::Interface::as_raw(self), categoryguid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn get__OutputsAvailable(&self, categoryguid: *const ::windows::core::GUID) -> ::windows::core::Result<IMSVidOutputDevices> {
        let mut result__ = ::windows::core::zeroed::<IMSVidOutputDevices>();
        (::windows::core::Interface::vtable(self).get__OutputsAvailable)(::windows::core::Interface::as_raw(self), categoryguid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn VideoRenderersAvailable(&self) -> ::windows::core::Result<IMSVidVideoRendererDevices> {
        let mut result__ = ::windows::core::zeroed::<IMSVidVideoRendererDevices>();
        (::windows::core::Interface::vtable(self).VideoRenderersAvailable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn AudioRenderersAvailable(&self) -> ::windows::core::Result<IMSVidAudioRendererDevices> {
        let mut result__ = ::windows::core::zeroed::<IMSVidAudioRendererDevices>();
        (::windows::core::Interface::vtable(self).AudioRenderersAvailable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn FeaturesAvailable(&self) -> ::windows::core::Result<IMSVidFeatures> {
        let mut result__ = ::windows::core::zeroed::<IMSVidFeatures>();
        (::windows::core::Interface::vtable(self).FeaturesAvailable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn InputActive(&self) -> ::windows::core::Result<IMSVidInputDevice> {
        let mut result__ = ::windows::core::zeroed::<IMSVidInputDevice>();
        (::windows::core::Interface::vtable(self).InputActive)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetInputActive<P0>(&self, pval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidInputDevice>,
    {
        (::windows::core::Interface::vtable(self).SetInputActive)(::windows::core::Interface::as_raw(self), pval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn OutputsActive(&self) -> ::windows::core::Result<IMSVidOutputDevices> {
        let mut result__ = ::windows::core::zeroed::<IMSVidOutputDevices>();
        (::windows::core::Interface::vtable(self).OutputsActive)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetOutputsActive<P0>(&self, pval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidOutputDevices>,
    {
        (::windows::core::Interface::vtable(self).SetOutputsActive)(::windows::core::Interface::as_raw(self), pval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn VideoRendererActive(&self) -> ::windows::core::Result<IMSVidVideoRenderer> {
        let mut result__ = ::windows::core::zeroed::<IMSVidVideoRenderer>();
        (::windows::core::Interface::vtable(self).VideoRendererActive)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetVideoRendererActive<P0>(&self, pval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidVideoRenderer>,
    {
        (::windows::core::Interface::vtable(self).SetVideoRendererActive)(::windows::core::Interface::as_raw(self), pval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn AudioRendererActive(&self) -> ::windows::core::Result<IMSVidAudioRenderer> {
        let mut result__ = ::windows::core::zeroed::<IMSVidAudioRenderer>();
        (::windows::core::Interface::vtable(self).AudioRendererActive)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetAudioRendererActive<P0>(&self, pval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidAudioRenderer>,
    {
        (::windows::core::Interface::vtable(self).SetAudioRendererActive)(::windows::core::Interface::as_raw(self), pval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn FeaturesActive(&self) -> ::windows::core::Result<IMSVidFeatures> {
        let mut result__ = ::windows::core::zeroed::<IMSVidFeatures>();
        (::windows::core::Interface::vtable(self).FeaturesActive)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetFeaturesActive<P0>(&self, pval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidFeatures>,
    {
        (::windows::core::Interface::vtable(self).SetFeaturesActive)(::windows::core::Interface::as_raw(self), pval.into_param().abi()).ok()
    }
    pub unsafe fn State(&self) -> ::windows::core::Result<MSVidCtlStateList> {
        let mut result__ = ::windows::core::zeroed::<MSVidCtlStateList>();
        (::windows::core::Interface::vtable(self).State)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn View(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).View)(::windows::core::Interface::as_raw(self), v).ok()
    }
    pub unsafe fn Build(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Build)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Pause(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Pause)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Run(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Run)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Stop)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Decompose(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Decompose)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn DisableVideo(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DisableVideo)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn DisableAudio(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DisableAudio)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn ViewNext(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ViewNext)(::windows::core::Interface::as_raw(self), v).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidCtl, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidCtl {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidCtl {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidCtl {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidCtl").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidCtl {
    type Vtable = IMSVidCtl_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidCtl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidCtl {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb0edf162_910a_11d2_b632_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidCtl_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub AutoSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbool: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    AutoSize: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetAutoSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, vbool: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetAutoSize: usize,
    pub BackColor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, backcolor: *mut u32) -> ::windows::core::HRESULT,
    pub SetBackColor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, backcolor: u32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub Enabled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbool: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Enabled: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetEnabled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, vbool: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetEnabled: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub TabStop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbool: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    TabStop: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetTabStop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, vbool: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetTabStop: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub Window: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::super::Foundation::HWND) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Window: usize,
    pub Refresh: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub DisplaySize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, currentvalue: *mut DisplaySizeList) -> ::windows::core::HRESULT,
    pub SetDisplaySize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newvalue: DisplaySizeList) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub MaintainAspectRatio: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, currentvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    MaintainAspectRatio: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetMaintainAspectRatio: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newvalue: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetMaintainAspectRatio: usize,
    pub ColorKey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, currentvalue: *mut u32) -> ::windows::core::HRESULT,
    pub SetColorKey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newvalue: u32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub get_InputsAvailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, categoryguid: ::std::mem::MaybeUninit<::windows::core::BSTR>, pval: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    get_InputsAvailable: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub get_OutputsAvailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, categoryguid: ::std::mem::MaybeUninit<::windows::core::BSTR>, pval: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    get_OutputsAvailable: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub get__InputsAvailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, categoryguid: *const ::windows::core::GUID, pval: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    get__InputsAvailable: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub get__OutputsAvailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, categoryguid: *const ::windows::core::GUID, pval: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    get__OutputsAvailable: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub VideoRenderersAvailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    VideoRenderersAvailable: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub AudioRenderersAvailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    AudioRenderersAvailable: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub FeaturesAvailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    FeaturesAvailable: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub InputActive: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    InputActive: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetInputActive: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetInputActive: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub OutputsActive: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    OutputsActive: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetOutputsActive: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetOutputsActive: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub VideoRendererActive: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    VideoRendererActive: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetVideoRendererActive: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetVideoRendererActive: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub AudioRendererActive: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    AudioRendererActive: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetAudioRendererActive: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetAudioRendererActive: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub FeaturesActive: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    FeaturesActive: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetFeaturesActive: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetFeaturesActive: usize,
    pub State: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lstate: *mut MSVidCtlStateList) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub View: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    View: usize,
    pub Build: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Pause: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Run: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Stop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Decompose: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub DisableVideo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub DisableAudio: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub ViewNext: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    ViewNext: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidDataServices(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidDataServices {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidDataServices, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidFeature);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidDataServices {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidDataServices {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidDataServices {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidDataServices").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidDataServices {
    type Vtable = IMSVidDataServices_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidDataServices {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidDataServices {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x334125c1_77e5_11d3_b653_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidDataServices_Vtbl {
    pub base__: IMSVidFeature_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidDataServicesEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidDataServicesEvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn StateChange<P0>(&self, lpd: P0, oldstate: i32, newstate: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        (::windows::core::Interface::vtable(self).base__.StateChange)(::windows::core::Interface::as_raw(self), lpd.into_param().abi(), oldstate, newstate).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidDataServicesEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDeviceEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidDataServicesEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidDataServicesEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidDataServicesEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidDataServicesEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidDataServicesEvent {
    type Vtable = IMSVidDataServicesEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidDataServicesEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidDataServicesEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x334125c2_77e5_11d3_b653_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidDataServicesEvent_Vtbl {
    pub base__: IMSVidDeviceEvent_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidDevice(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidDevice {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self)._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self)._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidDevice, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidDevice {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidDevice {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidDevice {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidDevice").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidDevice {
    type Vtable = IMSVidDevice_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidDevice {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidDevice {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1c15d47c_911d_11d2_b632_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidDevice_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub Name: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, name: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub Status: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, status: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetPower: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, power: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetPower: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub Power: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, power: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Power: usize,
    pub Category: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guid: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub ClassID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, clsid: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub _Category: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub _ClassID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, clsid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub IsEqualDevice: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, device: *mut ::core::ffi::c_void, isequal: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com")))]
    IsEqualDevice: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IMSVidDevice2(::windows::core::IUnknown);
impl IMSVidDevice2 {
    pub unsafe fn DevicePath(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).DevicePath)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IMSVidDevice2, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IMSVidDevice2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IMSVidDevice2 {}
impl ::core::fmt::Debug for IMSVidDevice2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidDevice2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IMSVidDevice2 {
    type Vtable = IMSVidDevice2_Vtbl;
}
impl ::core::clone::Clone for IMSVidDevice2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IMSVidDevice2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x87bd2783_ebc0_478c_b4a0_e8e7f43ab78e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidDevice2_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub DevicePath: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, devpath: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidDeviceEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidDeviceEvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn StateChange<P0>(&self, lpd: P0, oldstate: i32, newstate: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        (::windows::core::Interface::vtable(self).StateChange)(::windows::core::Interface::as_raw(self), lpd.into_param().abi(), oldstate, newstate).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidDeviceEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidDeviceEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidDeviceEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidDeviceEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidDeviceEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidDeviceEvent {
    type Vtable = IMSVidDeviceEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidDeviceEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidDeviceEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1c15d480_911d_11d2_b632_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidDeviceEvent_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub StateChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lpd: *mut ::core::ffi::c_void, oldstate: i32, newstate: i32) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    StateChange: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidEVR(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidEVR {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn CustomCompositorClass(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.CustomCompositorClass)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCustomCompositorClass<P0>(&self, compositorclsid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetCustomCompositorClass)(::windows::core::Interface::as_raw(self), compositorclsid.into_param().abi()).ok()
    }
    pub unsafe fn _CustomCompositorClass(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._CustomCompositorClass)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_CustomCompositorClass(&self, compositorclsid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_CustomCompositorClass)(::windows::core::Interface::as_raw(self), compositorclsid).ok()
    }
    pub unsafe fn _CustomCompositor(&self) -> ::windows::core::Result<super::IVMRImageCompositor> {
        let mut result__ = ::windows::core::zeroed::<super::IVMRImageCompositor>();
        (::windows::core::Interface::vtable(self).base__._CustomCompositor)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_CustomCompositor<P0>(&self, compositor: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::IVMRImageCompositor>,
    {
        (::windows::core::Interface::vtable(self).base__.Set_CustomCompositor)(::windows::core::Interface::as_raw(self), compositor.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn MixerBitmap(&self) -> ::windows::core::Result<super::super::super::System::Ole::IPictureDisp> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IPictureDisp>();
        (::windows::core::Interface::vtable(self).base__.MixerBitmap)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _MixerBitmap(&self) -> ::windows::core::Result<super::IVMRMixerBitmap> {
        let mut result__ = ::windows::core::zeroed::<super::IVMRMixerBitmap>();
        (::windows::core::Interface::vtable(self).base__._MixerBitmap)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn SetMixerBitmap<P0>(&self, mixerpicturedisp: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::System::Ole::IPictureDisp>,
    {
        (::windows::core::Interface::vtable(self).base__.SetMixerBitmap)(::windows::core::Interface::as_raw(self), mixerpicturedisp.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_DirectDraw\"`, `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn Set_MixerBitmap(&self, mixerpicture: *const super::VMRALPHABITMAP) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_MixerBitmap)(::windows::core::Interface::as_raw(self), mixerpicture).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn MixerBitmapPositionRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.MixerBitmapPositionRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetMixerBitmapPositionRect<P0>(&self, rdest: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidRect>,
    {
        (::windows::core::Interface::vtable(self).base__.SetMixerBitmapPositionRect)(::windows::core::Interface::as_raw(self), rdest.into_param().abi()).ok()
    }
    pub unsafe fn MixerBitmapOpacity(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.MixerBitmapOpacity)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMixerBitmapOpacity(&self, opacity: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMixerBitmapOpacity)(::windows::core::Interface::as_raw(self), opacity).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn SetupMixerBitmap<P0, P1>(&self, mixerpicturedisp: P0, opacity: i32, rdest: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::System::Ole::IPictureDisp>,
        P1: ::windows::core::IntoParam<IMSVidRect>,
    {
        (::windows::core::Interface::vtable(self).base__.SetupMixerBitmap)(::windows::core::Interface::as_raw(self), mixerpicturedisp.into_param().abi(), opacity, rdest.into_param().abi()).ok()
    }
    pub unsafe fn SourceSize(&self) -> ::windows::core::Result<SourceSizeList> {
        let mut result__ = ::windows::core::zeroed::<SourceSizeList>();
        (::windows::core::Interface::vtable(self).base__.SourceSize)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSourceSize(&self, newsize: SourceSizeList) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetSourceSize)(::windows::core::Interface::as_raw(self), newsize).ok()
    }
    pub unsafe fn OverScan(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.OverScan)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOverScan(&self, lpercent: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetOverScan)(::windows::core::Interface::as_raw(self), lpercent).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn AvailableSourceRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.AvailableSourceRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn MaxVidRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.MaxVidRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn MinVidRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.MinVidRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn ClippedSourceRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.ClippedSourceRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetClippedSourceRect<P0>(&self, prect: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidRect>,
    {
        (::windows::core::Interface::vtable(self).base__.SetClippedSourceRect)(::windows::core::Interface::as_raw(self), prect.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UsingOverlay(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.UsingOverlay)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetUsingOverlay<P0>(&self, useoverlayval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetUsingOverlay)(::windows::core::Interface::as_raw(self), useoverlayval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Capture(&self) -> ::windows::core::Result<super::super::super::System::Ole::IPictureDisp> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IPictureDisp>();
        (::windows::core::Interface::vtable(self).base__.Capture)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn FramesPerSecond(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.FramesPerSecond)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn DecimateInput(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.DecimateInput)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetDecimateInput<P0>(&self, pdeci: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetDecimateInput)(::windows::core::Interface::as_raw(self), pdeci.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Media_MediaFoundation\"`*"]
    #[cfg(feature = "Win32_Media_MediaFoundation")]
    pub unsafe fn Presenter(&self) -> ::windows::core::Result<super::super::MediaFoundation::IMFVideoPresenter> {
        let mut result__ = ::windows::core::zeroed::<super::super::MediaFoundation::IMFVideoPresenter>();
        (::windows::core::Interface::vtable(self).Presenter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Media_MediaFoundation\"`*"]
    #[cfg(feature = "Win32_Media_MediaFoundation")]
    pub unsafe fn SetPresenter<P0>(&self, pallocpresent: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::MediaFoundation::IMFVideoPresenter>,
    {
        (::windows::core::Interface::vtable(self).SetPresenter)(::windows::core::Interface::as_raw(self), pallocpresent.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetSuppressEffects<P0>(&self, bsuppress: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetSuppressEffects)(::windows::core::Interface::as_raw(self), bsuppress.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SuppressEffects(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).SuppressEffects)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidEVR, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidOutputDevice, IMSVidVideoRenderer);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidEVR {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidEVR {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidEVR {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidEVR").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidEVR {
    type Vtable = IMSVidEVR_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidEVR {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidEVR {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x15e496ae_82a8_4cf9_a6b6_c561dc60398f);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidEVR_Vtbl {
    pub base__: IMSVidVideoRenderer_Vtbl,
    #[cfg(feature = "Win32_Media_MediaFoundation")]
    pub Presenter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppallocpresent: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Media_MediaFoundation"))]
    Presenter: usize,
    #[cfg(feature = "Win32_Media_MediaFoundation")]
    pub SetPresenter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pallocpresent: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Media_MediaFoundation"))]
    SetPresenter: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetSuppressEffects: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bsuppress: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetSuppressEffects: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SuppressEffects: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bsuppress: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SuppressEffects: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidEVREvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidEVREvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn StateChange<P0>(&self, lpd: P0, oldstate: i32, newstate: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.StateChange)(::windows::core::Interface::as_raw(self), lpd.into_param().abi(), oldstate, newstate).ok()
    }
    pub unsafe fn OnUserEvent(&self, leventcode: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).OnUserEvent)(::windows::core::Interface::as_raw(self), leventcode).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidEVREvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDeviceEvent, IMSVidOutputDeviceEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidEVREvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidEVREvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidEVREvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidEVREvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidEVREvent {
    type Vtable = IMSVidEVREvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidEVREvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidEVREvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x349abb10_883c_4f22_8714_cecaeee45d62);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidEVREvent_Vtbl {
    pub base__: IMSVidOutputDeviceEvent_Vtbl,
    pub OnUserEvent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, leventcode: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidEncoder(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidEncoder {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn VideoEncoderInterface(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).VideoEncoderInterface)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AudioEncoderInterface(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).AudioEncoderInterface)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidEncoder, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidFeature);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidEncoder {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidEncoder {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidEncoder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidEncoder").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidEncoder {
    type Vtable = IMSVidEncoder_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidEncoder {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidEncoder {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc0020fd4_bee7_43d9_a495_9f213117103d);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidEncoder_Vtbl {
    pub base__: IMSVidFeature_Vtbl,
    pub VideoEncoderInterface: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppencint: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub AudioEncoderInterface: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppencint: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidFeature(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidFeature {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidFeature, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidFeature {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidFeature {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidFeature {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidFeature").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidFeature {
    type Vtable = IMSVidFeature_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidFeature {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidFeature {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37b03547_a4c8_11d2_b634_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidFeature_Vtbl {
    pub base__: IMSVidDevice_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidFeatureEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidFeatureEvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn StateChange<P0>(&self, lpd: P0, oldstate: i32, newstate: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        (::windows::core::Interface::vtable(self).base__.StateChange)(::windows::core::Interface::as_raw(self), lpd.into_param().abi(), oldstate, newstate).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidFeatureEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDeviceEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidFeatureEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidFeatureEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidFeatureEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidFeatureEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidFeatureEvent {
    type Vtable = IMSVidFeatureEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidFeatureEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidFeatureEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3dd2903c_e0aa_11d2_b63a_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidFeatureEvent_Vtbl {
    pub base__: IMSVidDeviceEvent_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidFeatures(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidFeatures {
    pub unsafe fn Count(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Count)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn _NewEnum(&self) -> ::windows::core::Result<super::super::super::System::Ole::IEnumVARIANT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IEnumVARIANT>();
        (::windows::core::Interface::vtable(self)._NewEnum)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn get_Item(&self, v: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<IMSVidFeature> {
        let mut result__ = ::windows::core::zeroed::<IMSVidFeature>();
        (::windows::core::Interface::vtable(self).get_Item)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(v), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Add<P0>(&self, pdb: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidFeature>,
    {
        (::windows::core::Interface::vtable(self).Add)(::windows::core::Interface::as_raw(self), pdb.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Remove(&self, v: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Remove)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(v)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidFeatures, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidFeatures {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidFeatures {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidFeatures {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidFeatures").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidFeatures {
    type Vtable = IMSVidFeatures_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidFeatures {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidFeatures {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc5702cd5_9b79_11d3_b654_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidFeatures_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub Count: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lcount: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Ole")]
    pub _NewEnum: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pd: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    _NewEnum: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub get_Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, v: super::super::super::System::Com::VARIANT, pdb: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    get_Item: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Add: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdb: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Add: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Remove: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, v: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Remove: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidFilePlayback(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidFilePlayback {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn IsViewable(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.IsViewable)(::windows::core::Interface::as_raw(self), v, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn View(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.View)(::windows::core::Interface::as_raw(self), v).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableResetOnStop(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.EnableResetOnStop)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetEnableResetOnStop<P0>(&self, newval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetEnableResetOnStop)(::windows::core::Interface::as_raw(self), newval.into_param().abi()).ok()
    }
    pub unsafe fn Run(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Run)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Pause(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Pause)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Stop)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn get_CanStep<P0>(&self, fbackwards: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.get_CanStep)(::windows::core::Interface::as_raw(self), fbackwards.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Step(&self, lstep: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Step)(::windows::core::Interface::as_raw(self), lstep).ok()
    }
    pub unsafe fn SetRate(&self, plrate: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetRate)(::windows::core::Interface::as_raw(self), plrate).ok()
    }
    pub unsafe fn Rate(&self) -> ::windows::core::Result<f64> {
        let mut result__ = ::windows::core::zeroed::<f64>();
        (::windows::core::Interface::vtable(self).base__.Rate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentPosition(&self, lposition: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCurrentPosition)(::windows::core::Interface::as_raw(self), lposition).ok()
    }
    pub unsafe fn CurrentPosition(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.CurrentPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPositionMode(&self, lpositionmode: PositionModeList) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetPositionMode)(::windows::core::Interface::as_raw(self), lpositionmode).ok()
    }
    pub unsafe fn PositionMode(&self) -> ::windows::core::Result<PositionModeList> {
        let mut result__ = ::windows::core::zeroed::<PositionModeList>();
        (::windows::core::Interface::vtable(self).base__.PositionMode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Length(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.Length)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn FileName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).FileName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFileName<P0>(&self, filename: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetFileName)(::windows::core::Interface::as_raw(self), filename.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidFilePlayback, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidInputDevice, IMSVidPlayback);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidFilePlayback {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidFilePlayback {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidFilePlayback {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidFilePlayback").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidFilePlayback {
    type Vtable = IMSVidFilePlayback_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidFilePlayback {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidFilePlayback {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37b03539_a4c8_11d2_b634_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidFilePlayback_Vtbl {
    pub base__: IMSVidPlayback_Vtbl,
    pub FileName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, filename: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SetFileName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, filename: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidFilePlayback2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidFilePlayback2 {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn IsViewable(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.IsViewable)(::windows::core::Interface::as_raw(self), v, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn View(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.View)(::windows::core::Interface::as_raw(self), v).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableResetOnStop(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.EnableResetOnStop)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetEnableResetOnStop<P0>(&self, newval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetEnableResetOnStop)(::windows::core::Interface::as_raw(self), newval.into_param().abi()).ok()
    }
    pub unsafe fn Run(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Run)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Pause(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Pause)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Stop)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn get_CanStep<P0>(&self, fbackwards: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.get_CanStep)(::windows::core::Interface::as_raw(self), fbackwards.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Step(&self, lstep: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Step)(::windows::core::Interface::as_raw(self), lstep).ok()
    }
    pub unsafe fn SetRate(&self, plrate: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetRate)(::windows::core::Interface::as_raw(self), plrate).ok()
    }
    pub unsafe fn Rate(&self) -> ::windows::core::Result<f64> {
        let mut result__ = ::windows::core::zeroed::<f64>();
        (::windows::core::Interface::vtable(self).base__.base__.Rate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentPosition(&self, lposition: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetCurrentPosition)(::windows::core::Interface::as_raw(self), lposition).ok()
    }
    pub unsafe fn CurrentPosition(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.CurrentPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPositionMode(&self, lpositionmode: PositionModeList) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetPositionMode)(::windows::core::Interface::as_raw(self), lpositionmode).ok()
    }
    pub unsafe fn PositionMode(&self) -> ::windows::core::Result<PositionModeList> {
        let mut result__ = ::windows::core::zeroed::<PositionModeList>();
        (::windows::core::Interface::vtable(self).base__.base__.PositionMode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Length(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.Length)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn FileName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.FileName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFileName<P0>(&self, filename: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetFileName)(::windows::core::Interface::as_raw(self), filename.into_param().abi()).ok()
    }
    pub unsafe fn Set_SourceFilter<P0>(&self, filename: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).Set_SourceFilter)(::windows::core::Interface::as_raw(self), filename.into_param().abi()).ok()
    }
    pub unsafe fn Set__SourceFilter(&self, filename: ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Set__SourceFilter)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(filename)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidFilePlayback2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidInputDevice, IMSVidPlayback, IMSVidFilePlayback);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidFilePlayback2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidFilePlayback2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidFilePlayback2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidFilePlayback2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidFilePlayback2 {
    type Vtable = IMSVidFilePlayback2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidFilePlayback2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidFilePlayback2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2f7e44af_6e52_4660_bc08_d8d542587d72);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidFilePlayback2_Vtbl {
    pub base__: IMSVidFilePlayback_Vtbl,
    pub Set_SourceFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, filename: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub Set__SourceFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, filename: ::windows::core::GUID) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidFilePlaybackEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidFilePlaybackEvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EndOfMedia<P0>(&self, lpd: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidPlayback>,
    {
        (::windows::core::Interface::vtable(self).base__.EndOfMedia)(::windows::core::Interface::as_raw(self), lpd.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidFilePlaybackEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidInputDeviceEvent, IMSVidPlaybackEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidFilePlaybackEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidFilePlaybackEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidFilePlaybackEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidFilePlaybackEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidFilePlaybackEvent {
    type Vtable = IMSVidFilePlaybackEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidFilePlaybackEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidFilePlaybackEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37b0353a_a4c8_11d2_b634_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidFilePlaybackEvent_Vtbl {
    pub base__: IMSVidPlaybackEvent_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidGenericSink(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidGenericSink {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSinkFilter<P0>(&self, bstrname: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetSinkFilter)(::windows::core::Interface::as_raw(self), bstrname.into_param().abi()).ok()
    }
    pub unsafe fn SinkStreams(&self) -> ::windows::core::Result<MSVidSinkStreams> {
        let mut result__ = ::windows::core::zeroed::<MSVidSinkStreams>();
        (::windows::core::Interface::vtable(self).SinkStreams)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSinkStreams(&self, streams: MSVidSinkStreams) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetSinkStreams)(::windows::core::Interface::as_raw(self), streams).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidGenericSink, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidOutputDevice);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidGenericSink {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidGenericSink {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidGenericSink {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidGenericSink").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidGenericSink {
    type Vtable = IMSVidGenericSink_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidGenericSink {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidGenericSink {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6c29b41d_455b_4c33_963a_0d28e5e555ea);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidGenericSink_Vtbl {
    pub base__: IMSVidOutputDevice_Vtbl,
    pub SetSinkFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrname: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SinkStreams: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pstreams: *mut MSVidSinkStreams) -> ::windows::core::HRESULT,
    pub SetSinkStreams: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, streams: MSVidSinkStreams) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidGenericSink2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidGenericSink2 {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSinkFilter<P0>(&self, bstrname: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetSinkFilter)(::windows::core::Interface::as_raw(self), bstrname.into_param().abi()).ok()
    }
    pub unsafe fn SinkStreams(&self) -> ::windows::core::Result<MSVidSinkStreams> {
        let mut result__ = ::windows::core::zeroed::<MSVidSinkStreams>();
        (::windows::core::Interface::vtable(self).base__.SinkStreams)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSinkStreams(&self, streams: MSVidSinkStreams) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetSinkStreams)(::windows::core::Interface::as_raw(self), streams).ok()
    }
    pub unsafe fn AddFilter<P0>(&self, bstrname: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).AddFilter)(::windows::core::Interface::as_raw(self), bstrname.into_param().abi()).ok()
    }
    pub unsafe fn ResetFilterList(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ResetFilterList)(::windows::core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidGenericSink2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidOutputDevice, IMSVidGenericSink);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidGenericSink2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidGenericSink2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidGenericSink2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidGenericSink2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidGenericSink2 {
    type Vtable = IMSVidGenericSink2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidGenericSink2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidGenericSink2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6b5a28f3_47f1_4092_b168_60cabec08f1c);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidGenericSink2_Vtbl {
    pub base__: IMSVidGenericSink_Vtbl,
    pub AddFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrname: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub ResetFilterList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidGraphSegment(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidGraphSegment {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.GetClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Init(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).Init)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInit<P0>(&self, pinit: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::IUnknown>,
    {
        (::windows::core::Interface::vtable(self).SetInit)(::windows::core::Interface::as_raw(self), pinit.into_param().abi()).ok()
    }
    pub unsafe fn EnumFilters(&self) -> ::windows::core::Result<super::IEnumFilters> {
        let mut result__ = ::windows::core::zeroed::<super::IEnumFilters>();
        (::windows::core::Interface::vtable(self).EnumFilters)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Container(&self) -> ::windows::core::Result<IMSVidGraphSegmentContainer> {
        let mut result__ = ::windows::core::zeroed::<IMSVidGraphSegmentContainer>();
        (::windows::core::Interface::vtable(self).Container)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetContainer<P0>(&self, pctl: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidGraphSegmentContainer>,
    {
        (::windows::core::Interface::vtable(self).SetContainer)(::windows::core::Interface::as_raw(self), pctl.into_param().abi()).ok()
    }
    pub unsafe fn Type(&self) -> ::windows::core::Result<MSVidSegmentType> {
        let mut result__ = ::windows::core::zeroed::<MSVidSegmentType>();
        (::windows::core::Interface::vtable(self).Type)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Build(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Build)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PostBuild(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PostBuild)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PreRun(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PreRun)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PostRun(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PostRun)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PreStop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PreStop)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PostStop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PostStop)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn OnEventNotify(&self, leventcode: i32, leventparm1: isize, leventparm2: isize) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).OnEventNotify)(::windows::core::Interface::as_raw(self), leventcode, leventparm1, leventparm2).ok()
    }
    pub unsafe fn Decompose(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Decompose)(::windows::core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidGraphSegment, ::windows::core::IUnknown, super::super::super::System::Com::IPersist);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidGraphSegment {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidGraphSegment {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidGraphSegment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidGraphSegment").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidGraphSegment {
    type Vtable = IMSVidGraphSegment_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidGraphSegment {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidGraphSegment {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x238dec54_adeb_4005_a349_f772b9afebc4);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidGraphSegment_Vtbl {
    pub base__: super::super::super::System::Com::IPersist_Vtbl,
    pub Init: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pinit: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub SetInit: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pinit: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub EnumFilters: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pnewenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Container: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppctl: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub SetContainer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pctl: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Type: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ptype: *mut MSVidSegmentType) -> ::windows::core::HRESULT,
    pub Category: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub Build: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub PostBuild: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub PreRun: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub PostRun: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub PreStop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub PostStop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub OnEventNotify: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, leventcode: i32, leventparm1: isize, leventparm2: isize) -> ::windows::core::HRESULT,
    pub Decompose: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IMSVidGraphSegmentContainer(::windows::core::IUnknown);
impl IMSVidGraphSegmentContainer {
    pub unsafe fn Graph(&self) -> ::windows::core::Result<super::IGraphBuilder> {
        let mut result__ = ::windows::core::zeroed::<super::IGraphBuilder>();
        (::windows::core::Interface::vtable(self).Graph)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Input(&self) -> ::windows::core::Result<IMSVidGraphSegment> {
        let mut result__ = ::windows::core::zeroed::<IMSVidGraphSegment>();
        (::windows::core::Interface::vtable(self).Input)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Outputs(&self) -> ::windows::core::Result<IEnumMSVidGraphSegment> {
        let mut result__ = ::windows::core::zeroed::<IEnumMSVidGraphSegment>();
        (::windows::core::Interface::vtable(self).Outputs)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn VideoRenderer(&self) -> ::windows::core::Result<IMSVidGraphSegment> {
        let mut result__ = ::windows::core::zeroed::<IMSVidGraphSegment>();
        (::windows::core::Interface::vtable(self).VideoRenderer)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn AudioRenderer(&self) -> ::windows::core::Result<IMSVidGraphSegment> {
        let mut result__ = ::windows::core::zeroed::<IMSVidGraphSegment>();
        (::windows::core::Interface::vtable(self).AudioRenderer)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Features(&self) -> ::windows::core::Result<IEnumMSVidGraphSegment> {
        let mut result__ = ::windows::core::zeroed::<IEnumMSVidGraphSegment>();
        (::windows::core::Interface::vtable(self).Features)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Composites(&self) -> ::windows::core::Result<IEnumMSVidGraphSegment> {
        let mut result__ = ::windows::core::zeroed::<IEnumMSVidGraphSegment>();
        (::windows::core::Interface::vtable(self).Composites)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ParentContainer(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).ParentContainer)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Decompose<P0>(&self, psegment: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidGraphSegment>,
    {
        (::windows::core::Interface::vtable(self).Decompose)(::windows::core::Interface::as_raw(self), psegment.into_param().abi()).ok()
    }
    pub unsafe fn IsWindowless(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsWindowless)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetFocus(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetFocus)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IMSVidGraphSegmentContainer, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IMSVidGraphSegmentContainer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IMSVidGraphSegmentContainer {}
impl ::core::fmt::Debug for IMSVidGraphSegmentContainer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidGraphSegmentContainer").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IMSVidGraphSegmentContainer {
    type Vtable = IMSVidGraphSegmentContainer_Vtbl;
}
impl ::core::clone::Clone for IMSVidGraphSegmentContainer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IMSVidGraphSegmentContainer {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3dd2903d_e0aa_11d2_b63a_00c04f79498e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidGraphSegmentContainer_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Graph: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppgraph: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub Input: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppinput: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Input: usize,
    pub Outputs: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppoutputs: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub VideoRenderer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppvr: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    VideoRenderer: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub AudioRenderer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppar: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    AudioRenderer: usize,
    pub Features: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppfeatures: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Composites: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppcomposites: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub ParentContainer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppcontainer: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub Decompose: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psegment: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Decompose: usize,
    pub IsWindowless: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetFocus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IMSVidGraphSegmentUserInput(::windows::core::IUnknown);
impl IMSVidGraphSegmentUserInput {
    pub unsafe fn Click(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Click)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn DblClick(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DblClick)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn KeyDown(&self, keycode: *const i16, shiftstate: i16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).KeyDown)(::windows::core::Interface::as_raw(self), keycode, shiftstate).ok()
    }
    pub unsafe fn KeyPress(&self, keyascii: *const i16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).KeyPress)(::windows::core::Interface::as_raw(self), keyascii).ok()
    }
    pub unsafe fn KeyUp(&self, keycode: *const i16, shiftstate: i16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).KeyUp)(::windows::core::Interface::as_raw(self), keycode, shiftstate).ok()
    }
    pub unsafe fn MouseDown(&self, buttonstate: i16, shiftstate: i16, x: i32, y: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).MouseDown)(::windows::core::Interface::as_raw(self), buttonstate, shiftstate, x, y).ok()
    }
    pub unsafe fn MouseMove(&self, buttonstate: i16, shiftstate: i16, x: i32, y: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).MouseMove)(::windows::core::Interface::as_raw(self), buttonstate, shiftstate, x, y).ok()
    }
    pub unsafe fn MouseUp(&self, buttonstate: i16, shiftstate: i16, x: i32, y: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).MouseUp)(::windows::core::Interface::as_raw(self), buttonstate, shiftstate, x, y).ok()
    }
}
::windows::imp::interface_hierarchy!(IMSVidGraphSegmentUserInput, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IMSVidGraphSegmentUserInput {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IMSVidGraphSegmentUserInput {}
impl ::core::fmt::Debug for IMSVidGraphSegmentUserInput {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidGraphSegmentUserInput").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IMSVidGraphSegmentUserInput {
    type Vtable = IMSVidGraphSegmentUserInput_Vtbl;
}
impl ::core::clone::Clone for IMSVidGraphSegmentUserInput {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IMSVidGraphSegmentUserInput {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x301c060e_20d9_4587_9b03_f82ed9a9943c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidGraphSegmentUserInput_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Click: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub DblClick: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub KeyDown: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, keycode: *const i16, shiftstate: i16) -> ::windows::core::HRESULT,
    pub KeyPress: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, keyascii: *const i16) -> ::windows::core::HRESULT,
    pub KeyUp: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, keycode: *const i16, shiftstate: i16) -> ::windows::core::HRESULT,
    pub MouseDown: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, buttonstate: i16, shiftstate: i16, x: i32, y: i32) -> ::windows::core::HRESULT,
    pub MouseMove: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, buttonstate: i16, shiftstate: i16, x: i32, y: i32) -> ::windows::core::HRESULT,
    pub MouseUp: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, buttonstate: i16, shiftstate: i16, x: i32, y: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidInputDevice(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidInputDevice {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn IsViewable(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).IsViewable)(::windows::core::Interface::as_raw(self), v, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn View(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).View)(::windows::core::Interface::as_raw(self), v).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidInputDevice, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidInputDevice {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidInputDevice {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidInputDevice {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidInputDevice").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidInputDevice {
    type Vtable = IMSVidInputDevice_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidInputDevice {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidInputDevice {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37b0353d_a4c8_11d2_b634_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidInputDevice_Vtbl {
    pub base__: IMSVidDevice_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub IsViewable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, v: *const super::super::super::System::Com::VARIANT, pfviewable: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    IsViewable: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub View: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    View: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidInputDeviceEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidInputDeviceEvent {}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidInputDeviceEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidInputDeviceEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidInputDeviceEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidInputDeviceEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidInputDeviceEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidInputDeviceEvent {
    type Vtable = IMSVidInputDeviceEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidInputDeviceEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidInputDeviceEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37b0353e_a4c8_11d2_b634_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidInputDeviceEvent_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidInputDevices(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidInputDevices {
    pub unsafe fn Count(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Count)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn _NewEnum(&self) -> ::windows::core::Result<super::super::super::System::Ole::IEnumVARIANT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IEnumVARIANT>();
        (::windows::core::Interface::vtable(self)._NewEnum)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn get_Item(&self, v: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<IMSVidInputDevice> {
        let mut result__ = ::windows::core::zeroed::<IMSVidInputDevice>();
        (::windows::core::Interface::vtable(self).get_Item)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(v), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Add<P0>(&self, pdb: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidInputDevice>,
    {
        (::windows::core::Interface::vtable(self).Add)(::windows::core::Interface::as_raw(self), pdb.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Remove(&self, v: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Remove)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(v)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidInputDevices, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidInputDevices {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidInputDevices {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidInputDevices {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidInputDevices").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidInputDevices {
    type Vtable = IMSVidInputDevices_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidInputDevices {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidInputDevices {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc5702cd1_9b79_11d3_b654_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidInputDevices_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub Count: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lcount: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Ole")]
    pub _NewEnum: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pd: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    _NewEnum: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub get_Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, v: super::super::super::System::Com::VARIANT, pdb: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    get_Item: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Add: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdb: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Add: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Remove: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, v: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Remove: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidOutputDevice(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidOutputDevice {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidOutputDevice, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidOutputDevice {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidOutputDevice {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidOutputDevice {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidOutputDevice").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidOutputDevice {
    type Vtable = IMSVidOutputDevice_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidOutputDevice {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidOutputDevice {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37b03546_a4c8_11d2_b634_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidOutputDevice_Vtbl {
    pub base__: IMSVidDevice_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidOutputDeviceEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidOutputDeviceEvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn StateChange<P0>(&self, lpd: P0, oldstate: i32, newstate: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        (::windows::core::Interface::vtable(self).base__.StateChange)(::windows::core::Interface::as_raw(self), lpd.into_param().abi(), oldstate, newstate).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidOutputDeviceEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDeviceEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidOutputDeviceEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidOutputDeviceEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidOutputDeviceEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidOutputDeviceEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidOutputDeviceEvent {
    type Vtable = IMSVidOutputDeviceEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidOutputDeviceEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidOutputDeviceEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2e6a14e2_571c_11d3_b652_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidOutputDeviceEvent_Vtbl {
    pub base__: IMSVidDeviceEvent_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidOutputDevices(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidOutputDevices {
    pub unsafe fn Count(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Count)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn _NewEnum(&self) -> ::windows::core::Result<super::super::super::System::Ole::IEnumVARIANT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IEnumVARIANT>();
        (::windows::core::Interface::vtable(self)._NewEnum)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn get_Item(&self, v: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<IMSVidOutputDevice> {
        let mut result__ = ::windows::core::zeroed::<IMSVidOutputDevice>();
        (::windows::core::Interface::vtable(self).get_Item)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(v), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Add<P0>(&self, pdb: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidOutputDevice>,
    {
        (::windows::core::Interface::vtable(self).Add)(::windows::core::Interface::as_raw(self), pdb.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Remove(&self, v: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Remove)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(v)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidOutputDevices, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidOutputDevices {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidOutputDevices {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidOutputDevices {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidOutputDevices").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidOutputDevices {
    type Vtable = IMSVidOutputDevices_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidOutputDevices {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidOutputDevices {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc5702cd2_9b79_11d3_b654_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidOutputDevices_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub Count: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lcount: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Ole")]
    pub _NewEnum: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pd: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    _NewEnum: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub get_Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, v: super::super::super::System::Com::VARIANT, pdb: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    get_Item: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Add: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdb: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Add: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Remove: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, v: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Remove: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidPlayback(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidPlayback {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn IsViewable(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.IsViewable)(::windows::core::Interface::as_raw(self), v, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn View(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.View)(::windows::core::Interface::as_raw(self), v).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableResetOnStop(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).EnableResetOnStop)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetEnableResetOnStop<P0>(&self, newval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetEnableResetOnStop)(::windows::core::Interface::as_raw(self), newval.into_param().abi()).ok()
    }
    pub unsafe fn Run(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Run)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Pause(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Pause)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Stop)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn get_CanStep<P0>(&self, fbackwards: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).get_CanStep)(::windows::core::Interface::as_raw(self), fbackwards.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Step(&self, lstep: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Step)(::windows::core::Interface::as_raw(self), lstep).ok()
    }
    pub unsafe fn SetRate(&self, plrate: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetRate)(::windows::core::Interface::as_raw(self), plrate).ok()
    }
    pub unsafe fn Rate(&self) -> ::windows::core::Result<f64> {
        let mut result__ = ::windows::core::zeroed::<f64>();
        (::windows::core::Interface::vtable(self).Rate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentPosition(&self, lposition: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetCurrentPosition)(::windows::core::Interface::as_raw(self), lposition).ok()
    }
    pub unsafe fn CurrentPosition(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CurrentPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPositionMode(&self, lpositionmode: PositionModeList) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPositionMode)(::windows::core::Interface::as_raw(self), lpositionmode).ok()
    }
    pub unsafe fn PositionMode(&self) -> ::windows::core::Result<PositionModeList> {
        let mut result__ = ::windows::core::zeroed::<PositionModeList>();
        (::windows::core::Interface::vtable(self).PositionMode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Length(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Length)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidPlayback, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidInputDevice);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidPlayback {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidPlayback {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidPlayback {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidPlayback").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidPlayback {
    type Vtable = IMSVidPlayback_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidPlayback {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidPlayback {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37b03538_a4c8_11d2_b634_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidPlayback_Vtbl {
    pub base__: IMSVidInputDevice_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub EnableResetOnStop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    EnableResetOnStop: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetEnableResetOnStop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetEnableResetOnStop: usize,
    pub Run: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Pause: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Stop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub get_CanStep: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fbackwards: super::super::super::Foundation::VARIANT_BOOL, pfcan: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    get_CanStep: usize,
    pub Step: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lstep: i32) -> ::windows::core::HRESULT,
    pub SetRate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plrate: f64) -> ::windows::core::HRESULT,
    pub Rate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plrate: *mut f64) -> ::windows::core::HRESULT,
    pub SetCurrentPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lposition: i32) -> ::windows::core::HRESULT,
    pub CurrentPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lposition: *mut i32) -> ::windows::core::HRESULT,
    pub SetPositionMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lpositionmode: PositionModeList) -> ::windows::core::HRESULT,
    pub PositionMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lpositionmode: *mut PositionModeList) -> ::windows::core::HRESULT,
    pub Length: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, llength: *mut i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidPlaybackEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidPlaybackEvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EndOfMedia<P0>(&self, lpd: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidPlayback>,
    {
        (::windows::core::Interface::vtable(self).EndOfMedia)(::windows::core::Interface::as_raw(self), lpd.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidPlaybackEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidInputDeviceEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidPlaybackEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidPlaybackEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidPlaybackEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidPlaybackEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidPlaybackEvent {
    type Vtable = IMSVidPlaybackEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidPlaybackEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidPlaybackEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37b0353b_a4c8_11d2_b634_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidPlaybackEvent_Vtbl {
    pub base__: IMSVidInputDeviceEvent_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub EndOfMedia: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lpd: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    EndOfMedia: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidRect(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidRect {
    pub unsafe fn Top(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Top)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetTop(&self, topval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetTop)(::windows::core::Interface::as_raw(self), topval).ok()
    }
    pub unsafe fn Left(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Left)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetLeft(&self, leftval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetLeft)(::windows::core::Interface::as_raw(self), leftval).ok()
    }
    pub unsafe fn Width(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Width)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetWidth(&self, widthval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetWidth)(::windows::core::Interface::as_raw(self), widthval).ok()
    }
    pub unsafe fn Height(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Height)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetHeight(&self, heightval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetHeight)(::windows::core::Interface::as_raw(self), heightval).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HWnd(&self) -> ::windows::core::Result<super::super::super::Foundation::HWND> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::HWND>();
        (::windows::core::Interface::vtable(self).HWnd)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetHWnd<P0>(&self, hwndval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HWND>,
    {
        (::windows::core::Interface::vtable(self).SetHWnd)(::windows::core::Interface::as_raw(self), hwndval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetRect<P0>(&self, rectval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidRect>,
    {
        (::windows::core::Interface::vtable(self).SetRect)(::windows::core::Interface::as_raw(self), rectval.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidRect, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidRect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidRect {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidRect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidRect").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidRect {
    type Vtable = IMSVidRect_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidRect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidRect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x7f5000a6_a440_47ca_8acc_c0e75531a2c2);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidRect_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub Top: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, topval: *mut i32) -> ::windows::core::HRESULT,
    pub SetTop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, topval: i32) -> ::windows::core::HRESULT,
    pub Left: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, leftval: *mut i32) -> ::windows::core::HRESULT,
    pub SetLeft: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, leftval: i32) -> ::windows::core::HRESULT,
    pub Width: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, widthval: *mut i32) -> ::windows::core::HRESULT,
    pub SetWidth: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, widthval: i32) -> ::windows::core::HRESULT,
    pub Height: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, heightval: *mut i32) -> ::windows::core::HRESULT,
    pub SetHeight: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, heightval: i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub HWnd: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwndval: *mut super::super::super::Foundation::HWND) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    HWnd: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetHWnd: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwndval: super::super::super::Foundation::HWND) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetHWnd: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetRect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rectval: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetRect: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidStreamBufferRecordingControl(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidStreamBufferRecordingControl {
    pub unsafe fn StartTime(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).StartTime)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetStartTime(&self, rtstart: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetStartTime)(::windows::core::Interface::as_raw(self), rtstart).ok()
    }
    pub unsafe fn StopTime(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).StopTime)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetStopTime(&self, rtstop: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetStopTime)(::windows::core::Interface::as_raw(self), rtstop).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RecordingStopped(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).RecordingStopped)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RecordingStarted(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).RecordingStarted)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn RecordingType(&self) -> ::windows::core::Result<RecordingType> {
        let mut result__ = ::windows::core::zeroed::<RecordingType>();
        (::windows::core::Interface::vtable(self).RecordingType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn RecordingAttribute(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).RecordingAttribute)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidStreamBufferRecordingControl, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidStreamBufferRecordingControl {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidStreamBufferRecordingControl {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidStreamBufferRecordingControl {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidStreamBufferRecordingControl").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidStreamBufferRecordingControl {
    type Vtable = IMSVidStreamBufferRecordingControl_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidStreamBufferRecordingControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidStreamBufferRecordingControl {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x160621aa_bbbc_4326_a824_c395aebc6e74);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidStreamBufferRecordingControl_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub StartTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rtstart: *mut i32) -> ::windows::core::HRESULT,
    pub SetStartTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rtstart: i32) -> ::windows::core::HRESULT,
    pub StopTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rtstop: *mut i32) -> ::windows::core::HRESULT,
    pub SetStopTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rtstop: i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RecordingStopped: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phresult: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RecordingStopped: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub RecordingStarted: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phresult: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RecordingStarted: usize,
    pub RecordingType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwtype: *mut RecordingType) -> ::windows::core::HRESULT,
    pub RecordingAttribute: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, precordingattribute: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidStreamBufferSink(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidStreamBufferSink {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn get_ContentRecorder<P0>(&self, pszfilename: P0) -> ::windows::core::Result<IMSVidStreamBufferRecordingControl>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<IMSVidStreamBufferRecordingControl>();
        (::windows::core::Interface::vtable(self).get_ContentRecorder)(::windows::core::Interface::as_raw(self), pszfilename.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn get_ReferenceRecorder<P0>(&self, pszfilename: P0) -> ::windows::core::Result<IMSVidStreamBufferRecordingControl>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<IMSVidStreamBufferRecordingControl>();
        (::windows::core::Interface::vtable(self).get_ReferenceRecorder)(::windows::core::Interface::as_raw(self), pszfilename.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn SinkName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).SinkName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSinkName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetSinkName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn NameSetLock(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).NameSetLock)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SBESink(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).SBESink)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidStreamBufferSink, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidOutputDevice);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidStreamBufferSink {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidStreamBufferSink {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidStreamBufferSink {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidStreamBufferSink").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidStreamBufferSink {
    type Vtable = IMSVidStreamBufferSink_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidStreamBufferSink {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidStreamBufferSink {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x159dbb45_cd1b_4dab_83ea_5cb1f4f21d07);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidStreamBufferSink_Vtbl {
    pub base__: IMSVidOutputDevice_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub get_ContentRecorder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfilename: ::std::mem::MaybeUninit<::windows::core::BSTR>, precordingiunknown: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    get_ContentRecorder: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub get_ReferenceRecorder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfilename: ::std::mem::MaybeUninit<::windows::core::BSTR>, precordingiunknown: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    get_ReferenceRecorder: usize,
    pub SinkName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pname: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SetSinkName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, name: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub NameSetLock: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub SBESink: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, sbeconfig: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidStreamBufferSink2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidStreamBufferSink2 {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn get_ContentRecorder<P0>(&self, pszfilename: P0) -> ::windows::core::Result<IMSVidStreamBufferRecordingControl>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<IMSVidStreamBufferRecordingControl>();
        (::windows::core::Interface::vtable(self).base__.get_ContentRecorder)(::windows::core::Interface::as_raw(self), pszfilename.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn get_ReferenceRecorder<P0>(&self, pszfilename: P0) -> ::windows::core::Result<IMSVidStreamBufferRecordingControl>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<IMSVidStreamBufferRecordingControl>();
        (::windows::core::Interface::vtable(self).base__.get_ReferenceRecorder)(::windows::core::Interface::as_raw(self), pszfilename.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn SinkName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.SinkName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSinkName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetSinkName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn NameSetLock(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.NameSetLock)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SBESink(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).base__.SBESink)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn UnlockProfile(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).UnlockProfile)(::windows::core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidStreamBufferSink2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidOutputDevice, IMSVidStreamBufferSink);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidStreamBufferSink2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidStreamBufferSink2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidStreamBufferSink2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidStreamBufferSink2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidStreamBufferSink2 {
    type Vtable = IMSVidStreamBufferSink2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidStreamBufferSink2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidStreamBufferSink2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2ca9fc63_c131_4e5a_955a_544a47c67146);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidStreamBufferSink2_Vtbl {
    pub base__: IMSVidStreamBufferSink_Vtbl,
    pub UnlockProfile: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidStreamBufferSink3(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidStreamBufferSink3 {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn get_ContentRecorder<P0>(&self, pszfilename: P0) -> ::windows::core::Result<IMSVidStreamBufferRecordingControl>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<IMSVidStreamBufferRecordingControl>();
        (::windows::core::Interface::vtable(self).base__.base__.get_ContentRecorder)(::windows::core::Interface::as_raw(self), pszfilename.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn get_ReferenceRecorder<P0>(&self, pszfilename: P0) -> ::windows::core::Result<IMSVidStreamBufferRecordingControl>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<IMSVidStreamBufferRecordingControl>();
        (::windows::core::Interface::vtable(self).base__.base__.get_ReferenceRecorder)(::windows::core::Interface::as_raw(self), pszfilename.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn SinkName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.SinkName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSinkName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetSinkName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn NameSetLock(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.NameSetLock)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SBESink(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).base__.base__.SBESink)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn UnlockProfile(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.UnlockProfile)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetMinSeek(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).SetMinSeek)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AudioCounter(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).AudioCounter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn VideoCounter(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).VideoCounter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CCCounter(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).CCCounter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn WSTCounter(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).WSTCounter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetAudioAnalysisFilter<P0>(&self, szclsid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetAudioAnalysisFilter)(::windows::core::Interface::as_raw(self), szclsid.into_param().abi()).ok()
    }
    pub unsafe fn AudioAnalysisFilter(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).AudioAnalysisFilter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_AudioAnalysisFilter(&self, guid: ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Set_AudioAnalysisFilter)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(guid)).ok()
    }
    pub unsafe fn _AudioAnalysisFilter(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self)._AudioAnalysisFilter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetVideoAnalysisFilter<P0>(&self, szclsid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetVideoAnalysisFilter)(::windows::core::Interface::as_raw(self), szclsid.into_param().abi()).ok()
    }
    pub unsafe fn VideoAnalysisFilter(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).VideoAnalysisFilter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_VideoAnalysisFilter(&self, guid: ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Set_VideoAnalysisFilter)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(guid)).ok()
    }
    pub unsafe fn _VideoAnalysisFilter(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self)._VideoAnalysisFilter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDataAnalysisFilter<P0>(&self, szclsid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetDataAnalysisFilter)(::windows::core::Interface::as_raw(self), szclsid.into_param().abi()).ok()
    }
    pub unsafe fn DataAnalysisFilter(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).DataAnalysisFilter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_DataAnalysisFilter(&self, guid: ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Set_DataAnalysisFilter)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(guid)).ok()
    }
    pub unsafe fn _DataAnalysisFilter(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self)._DataAnalysisFilter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn LicenseErrorCode(&self) -> ::windows::core::Result<::windows::core::HRESULT> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::HRESULT>();
        (::windows::core::Interface::vtable(self).LicenseErrorCode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidStreamBufferSink3, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidOutputDevice, IMSVidStreamBufferSink, IMSVidStreamBufferSink2);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidStreamBufferSink3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidStreamBufferSink3 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidStreamBufferSink3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidStreamBufferSink3").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidStreamBufferSink3 {
    type Vtable = IMSVidStreamBufferSink3_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidStreamBufferSink3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidStreamBufferSink3 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x4f8721d7_7d59_4d8b_99f5_a77775586bd5);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidStreamBufferSink3_Vtbl {
    pub base__: IMSVidStreamBufferSink2_Vtbl,
    pub SetMinSeek: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwmin: *mut i32) -> ::windows::core::HRESULT,
    pub AudioCounter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub VideoCounter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub CCCounter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub WSTCounter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub SetAudioAnalysisFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, szclsid: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub AudioAnalysisFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszclsid: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub Set_AudioAnalysisFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guid: ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub _AudioAnalysisFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub SetVideoAnalysisFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, szclsid: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub VideoAnalysisFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszclsid: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub Set_VideoAnalysisFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guid: ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub _VideoAnalysisFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub SetDataAnalysisFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, szclsid: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub DataAnalysisFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszclsid: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub Set_DataAnalysisFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guid: ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub _DataAnalysisFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub LicenseErrorCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hres: *mut ::windows::core::HRESULT) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidStreamBufferSinkEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidStreamBufferSinkEvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn StateChange<P0>(&self, lpd: P0, oldstate: i32, newstate: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.StateChange)(::windows::core::Interface::as_raw(self), lpd.into_param().abi(), oldstate, newstate).ok()
    }
    pub unsafe fn CertificateFailure(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CertificateFailure)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn CertificateSuccess(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CertificateSuccess)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn WriteFailure(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).WriteFailure)(::windows::core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidStreamBufferSinkEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDeviceEvent, IMSVidOutputDeviceEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidStreamBufferSinkEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidStreamBufferSinkEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidStreamBufferSinkEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidStreamBufferSinkEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidStreamBufferSinkEvent {
    type Vtable = IMSVidStreamBufferSinkEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidStreamBufferSinkEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidStreamBufferSinkEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf798a36b_b05b_4bbe_9703_eaea7d61cd51);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidStreamBufferSinkEvent_Vtbl {
    pub base__: IMSVidOutputDeviceEvent_Vtbl,
    pub CertificateFailure: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub CertificateSuccess: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub WriteFailure: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidStreamBufferSinkEvent2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidStreamBufferSinkEvent2 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn StateChange<P0>(&self, lpd: P0, oldstate: i32, newstate: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.StateChange)(::windows::core::Interface::as_raw(self), lpd.into_param().abi(), oldstate, newstate).ok()
    }
    pub unsafe fn CertificateFailure(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.CertificateFailure)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn CertificateSuccess(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.CertificateSuccess)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn WriteFailure(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.WriteFailure)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn EncryptionOn(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).EncryptionOn)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn EncryptionOff(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).EncryptionOff)(::windows::core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidStreamBufferSinkEvent2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDeviceEvent, IMSVidOutputDeviceEvent, IMSVidStreamBufferSinkEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidStreamBufferSinkEvent2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidStreamBufferSinkEvent2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidStreamBufferSinkEvent2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidStreamBufferSinkEvent2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidStreamBufferSinkEvent2 {
    type Vtable = IMSVidStreamBufferSinkEvent2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidStreamBufferSinkEvent2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidStreamBufferSinkEvent2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3d7a5166_72d7_484b_a06f_286187b80ca1);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidStreamBufferSinkEvent2_Vtbl {
    pub base__: IMSVidStreamBufferSinkEvent_Vtbl,
    pub EncryptionOn: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub EncryptionOff: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidStreamBufferSinkEvent3(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidStreamBufferSinkEvent3 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn StateChange<P0>(&self, lpd: P0, oldstate: i32, newstate: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.StateChange)(::windows::core::Interface::as_raw(self), lpd.into_param().abi(), oldstate, newstate).ok()
    }
    pub unsafe fn CertificateFailure(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.CertificateFailure)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn CertificateSuccess(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.CertificateSuccess)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn WriteFailure(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.WriteFailure)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn EncryptionOn(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.EncryptionOn)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn EncryptionOff(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.EncryptionOff)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn LicenseChange(&self, dwprot: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).LicenseChange)(::windows::core::Interface::as_raw(self), dwprot).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidStreamBufferSinkEvent3, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDeviceEvent, IMSVidOutputDeviceEvent, IMSVidStreamBufferSinkEvent, IMSVidStreamBufferSinkEvent2);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidStreamBufferSinkEvent3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidStreamBufferSinkEvent3 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidStreamBufferSinkEvent3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidStreamBufferSinkEvent3").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidStreamBufferSinkEvent3 {
    type Vtable = IMSVidStreamBufferSinkEvent3_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidStreamBufferSinkEvent3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidStreamBufferSinkEvent3 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x735ad8d5_c259_48e9_81e7_d27953665b23);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidStreamBufferSinkEvent3_Vtbl {
    pub base__: IMSVidStreamBufferSinkEvent2_Vtbl,
    pub LicenseChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwprot: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidStreamBufferSinkEvent4(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidStreamBufferSinkEvent4 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn StateChange<P0>(&self, lpd: P0, oldstate: i32, newstate: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__.StateChange)(::windows::core::Interface::as_raw(self), lpd.into_param().abi(), oldstate, newstate).ok()
    }
    pub unsafe fn CertificateFailure(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.CertificateFailure)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn CertificateSuccess(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.CertificateSuccess)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn WriteFailure(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.WriteFailure)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn EncryptionOn(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.EncryptionOn)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn EncryptionOff(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.EncryptionOff)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn LicenseChange(&self, dwprot: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.LicenseChange)(::windows::core::Interface::as_raw(self), dwprot).ok()
    }
    pub unsafe fn WriteFailureClear(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).WriteFailureClear)(::windows::core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidStreamBufferSinkEvent4, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDeviceEvent, IMSVidOutputDeviceEvent, IMSVidStreamBufferSinkEvent, IMSVidStreamBufferSinkEvent2, IMSVidStreamBufferSinkEvent3);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidStreamBufferSinkEvent4 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidStreamBufferSinkEvent4 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidStreamBufferSinkEvent4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidStreamBufferSinkEvent4").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidStreamBufferSinkEvent4 {
    type Vtable = IMSVidStreamBufferSinkEvent4_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidStreamBufferSinkEvent4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidStreamBufferSinkEvent4 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1b01dcb0_daf0_412c_a5d1_590c7f62e2b8);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidStreamBufferSinkEvent4_Vtbl {
    pub base__: IMSVidStreamBufferSinkEvent3_Vtbl,
    pub WriteFailureClear: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidStreamBufferSource(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidStreamBufferSource {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn IsViewable(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.IsViewable)(::windows::core::Interface::as_raw(self), v, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn View(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.View)(::windows::core::Interface::as_raw(self), v).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableResetOnStop(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.EnableResetOnStop)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetEnableResetOnStop<P0>(&self, newval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetEnableResetOnStop)(::windows::core::Interface::as_raw(self), newval.into_param().abi()).ok()
    }
    pub unsafe fn Run(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Run)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Pause(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Pause)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Stop)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn get_CanStep<P0>(&self, fbackwards: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.get_CanStep)(::windows::core::Interface::as_raw(self), fbackwards.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Step(&self, lstep: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Step)(::windows::core::Interface::as_raw(self), lstep).ok()
    }
    pub unsafe fn SetRate(&self, plrate: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetRate)(::windows::core::Interface::as_raw(self), plrate).ok()
    }
    pub unsafe fn Rate(&self) -> ::windows::core::Result<f64> {
        let mut result__ = ::windows::core::zeroed::<f64>();
        (::windows::core::Interface::vtable(self).base__.base__.Rate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentPosition(&self, lposition: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetCurrentPosition)(::windows::core::Interface::as_raw(self), lposition).ok()
    }
    pub unsafe fn CurrentPosition(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.CurrentPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPositionMode(&self, lpositionmode: PositionModeList) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetPositionMode)(::windows::core::Interface::as_raw(self), lpositionmode).ok()
    }
    pub unsafe fn PositionMode(&self) -> ::windows::core::Result<PositionModeList> {
        let mut result__ = ::windows::core::zeroed::<PositionModeList>();
        (::windows::core::Interface::vtable(self).base__.base__.PositionMode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Length(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.Length)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn FileName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.FileName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFileName<P0>(&self, filename: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetFileName)(::windows::core::Interface::as_raw(self), filename.into_param().abi()).ok()
    }
    pub unsafe fn Start(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Start)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn RecordingAttribute(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).RecordingAttribute)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentRatings(&self, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, pbfenattr: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CurrentRatings)(::windows::core::Interface::as_raw(self), pensystem, penrating, pbfenattr).ok()
    }
    pub unsafe fn MaxRatingsLevel(&self, ensystem: EnTvRat_System, enrating: EnTvRat_GenericLevel, lbfenattr: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).MaxRatingsLevel)(::windows::core::Interface::as_raw(self), ensystem, enrating, lbfenattr).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBlockUnrated<P0>(&self, bblock: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetBlockUnrated)(::windows::core::Interface::as_raw(self), bblock.into_param().abi()).ok()
    }
    pub unsafe fn SetUnratedDelay(&self, dwdelay: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetUnratedDelay)(::windows::core::Interface::as_raw(self), dwdelay).ok()
    }
    pub unsafe fn SBESource(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).SBESource)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidStreamBufferSource, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidInputDevice, IMSVidPlayback, IMSVidFilePlayback);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidStreamBufferSource {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidStreamBufferSource {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidStreamBufferSource {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidStreamBufferSource").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidStreamBufferSource {
    type Vtable = IMSVidStreamBufferSource_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidStreamBufferSource {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidStreamBufferSource {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xeb0c8cf9_6950_4772_87b1_47d11cf3a02f);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidStreamBufferSource_Vtbl {
    pub base__: IMSVidFilePlayback_Vtbl,
    pub Start: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lstart: *mut i32) -> ::windows::core::HRESULT,
    pub RecordingAttribute: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, precordingattribute: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub CurrentRatings: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, pbfenattr: *mut i32) -> ::windows::core::HRESULT,
    pub MaxRatingsLevel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ensystem: EnTvRat_System, enrating: EnTvRat_GenericLevel, lbfenattr: i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetBlockUnrated: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bblock: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetBlockUnrated: usize,
    pub SetUnratedDelay: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwdelay: i32) -> ::windows::core::HRESULT,
    pub SBESource: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, sbefilter: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidStreamBufferSource2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidStreamBufferSource2 {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn IsViewable(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.IsViewable)(::windows::core::Interface::as_raw(self), v, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn View(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.View)(::windows::core::Interface::as_raw(self), v).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableResetOnStop(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.EnableResetOnStop)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetEnableResetOnStop<P0>(&self, newval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetEnableResetOnStop)(::windows::core::Interface::as_raw(self), newval.into_param().abi()).ok()
    }
    pub unsafe fn Run(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.Run)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Pause(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.Pause)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.Stop)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn get_CanStep<P0>(&self, fbackwards: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.get_CanStep)(::windows::core::Interface::as_raw(self), fbackwards.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Step(&self, lstep: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.Step)(::windows::core::Interface::as_raw(self), lstep).ok()
    }
    pub unsafe fn SetRate(&self, plrate: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetRate)(::windows::core::Interface::as_raw(self), plrate).ok()
    }
    pub unsafe fn Rate(&self) -> ::windows::core::Result<f64> {
        let mut result__ = ::windows::core::zeroed::<f64>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Rate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentPosition(&self, lposition: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetCurrentPosition)(::windows::core::Interface::as_raw(self), lposition).ok()
    }
    pub unsafe fn CurrentPosition(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.CurrentPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPositionMode(&self, lpositionmode: PositionModeList) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetPositionMode)(::windows::core::Interface::as_raw(self), lpositionmode).ok()
    }
    pub unsafe fn PositionMode(&self) -> ::windows::core::Result<PositionModeList> {
        let mut result__ = ::windows::core::zeroed::<PositionModeList>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.PositionMode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Length(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Length)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn FileName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.FileName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFileName<P0>(&self, filename: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetFileName)(::windows::core::Interface::as_raw(self), filename.into_param().abi()).ok()
    }
    pub unsafe fn Start(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.Start)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn RecordingAttribute(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).base__.RecordingAttribute)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentRatings(&self, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, pbfenattr: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.CurrentRatings)(::windows::core::Interface::as_raw(self), pensystem, penrating, pbfenattr).ok()
    }
    pub unsafe fn MaxRatingsLevel(&self, ensystem: EnTvRat_System, enrating: EnTvRat_GenericLevel, lbfenattr: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.MaxRatingsLevel)(::windows::core::Interface::as_raw(self), ensystem, enrating, lbfenattr).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBlockUnrated<P0>(&self, bblock: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetBlockUnrated)(::windows::core::Interface::as_raw(self), bblock.into_param().abi()).ok()
    }
    pub unsafe fn SetUnratedDelay(&self, dwdelay: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetUnratedDelay)(::windows::core::Interface::as_raw(self), dwdelay).ok()
    }
    pub unsafe fn SBESource(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).base__.SBESource)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn put_RateEx(&self, dwrate: f64, dwframespersecond: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).put_RateEx)(::windows::core::Interface::as_raw(self), dwrate, dwframespersecond).ok()
    }
    pub unsafe fn AudioCounter(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).AudioCounter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn VideoCounter(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).VideoCounter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CCCounter(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).CCCounter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn WSTCounter(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).WSTCounter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidStreamBufferSource2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidInputDevice, IMSVidPlayback, IMSVidFilePlayback, IMSVidStreamBufferSource);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidStreamBufferSource2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidStreamBufferSource2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidStreamBufferSource2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidStreamBufferSource2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidStreamBufferSource2 {
    type Vtable = IMSVidStreamBufferSource2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidStreamBufferSource2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidStreamBufferSource2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xe4ba9059_b1ce_40d8_b9a0_d4ea4a9989d3);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidStreamBufferSource2_Vtbl {
    pub base__: IMSVidStreamBufferSource_Vtbl,
    pub put_RateEx: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrate: f64, dwframespersecond: u32) -> ::windows::core::HRESULT,
    pub AudioCounter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub VideoCounter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub CCCounter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub WSTCounter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidStreamBufferSourceEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidStreamBufferSourceEvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EndOfMedia<P0>(&self, lpd: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidPlayback>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.EndOfMedia)(::windows::core::Interface::as_raw(self), lpd.into_param().abi()).ok()
    }
    pub unsafe fn CertificateFailure(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CertificateFailure)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn CertificateSuccess(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CertificateSuccess)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RatingsBlocked(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RatingsBlocked)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RatingsUnblocked(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RatingsUnblocked)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RatingsChanged(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RatingsChanged)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TimeHole(&self, streamoffsetms: i32, sizems: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).TimeHole)(::windows::core::Interface::as_raw(self), streamoffsetms, sizems).ok()
    }
    pub unsafe fn StaleDataRead(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).StaleDataRead)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ContentBecomingStale(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ContentBecomingStale)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn StaleFileDeleted(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).StaleFileDeleted)(::windows::core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidStreamBufferSourceEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidInputDeviceEvent, IMSVidPlaybackEvent, IMSVidFilePlaybackEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidStreamBufferSourceEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidStreamBufferSourceEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidStreamBufferSourceEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidStreamBufferSourceEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidStreamBufferSourceEvent {
    type Vtable = IMSVidStreamBufferSourceEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidStreamBufferSourceEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidStreamBufferSourceEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x50ce8a7d_9c28_4da8_9042_cdfa7116f979);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidStreamBufferSourceEvent_Vtbl {
    pub base__: IMSVidFilePlaybackEvent_Vtbl,
    pub CertificateFailure: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub CertificateSuccess: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub RatingsBlocked: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub RatingsUnblocked: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub RatingsChanged: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub TimeHole: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, streamoffsetms: i32, sizems: i32) -> ::windows::core::HRESULT,
    pub StaleDataRead: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub ContentBecomingStale: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub StaleFileDeleted: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidStreamBufferSourceEvent2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidStreamBufferSourceEvent2 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EndOfMedia<P0>(&self, lpd: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidPlayback>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.EndOfMedia)(::windows::core::Interface::as_raw(self), lpd.into_param().abi()).ok()
    }
    pub unsafe fn CertificateFailure(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.CertificateFailure)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn CertificateSuccess(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.CertificateSuccess)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RatingsBlocked(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.RatingsBlocked)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RatingsUnblocked(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.RatingsUnblocked)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RatingsChanged(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.RatingsChanged)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TimeHole(&self, streamoffsetms: i32, sizems: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.TimeHole)(::windows::core::Interface::as_raw(self), streamoffsetms, sizems).ok()
    }
    pub unsafe fn StaleDataRead(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.StaleDataRead)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ContentBecomingStale(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.ContentBecomingStale)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn StaleFileDeleted(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.StaleFileDeleted)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RateChange(&self, qwnewrate: f64, qwoldrate: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RateChange)(::windows::core::Interface::as_raw(self), qwnewrate, qwoldrate).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidStreamBufferSourceEvent2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidInputDeviceEvent, IMSVidPlaybackEvent, IMSVidFilePlaybackEvent, IMSVidStreamBufferSourceEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidStreamBufferSourceEvent2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidStreamBufferSourceEvent2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidStreamBufferSourceEvent2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidStreamBufferSourceEvent2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidStreamBufferSourceEvent2 {
    type Vtable = IMSVidStreamBufferSourceEvent2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidStreamBufferSourceEvent2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidStreamBufferSourceEvent2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x7aef50ce_8e22_4ba8_bc06_a92a458b4ef2);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidStreamBufferSourceEvent2_Vtbl {
    pub base__: IMSVidStreamBufferSourceEvent_Vtbl,
    pub RateChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, qwnewrate: f64, qwoldrate: f64) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidStreamBufferSourceEvent3(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidStreamBufferSourceEvent3 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EndOfMedia<P0>(&self, lpd: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidPlayback>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.EndOfMedia)(::windows::core::Interface::as_raw(self), lpd.into_param().abi()).ok()
    }
    pub unsafe fn CertificateFailure(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.CertificateFailure)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn CertificateSuccess(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.CertificateSuccess)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RatingsBlocked(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.RatingsBlocked)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RatingsUnblocked(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.RatingsUnblocked)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RatingsChanged(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.RatingsChanged)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TimeHole(&self, streamoffsetms: i32, sizems: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.TimeHole)(::windows::core::Interface::as_raw(self), streamoffsetms, sizems).ok()
    }
    pub unsafe fn StaleDataRead(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.StaleDataRead)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ContentBecomingStale(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.ContentBecomingStale)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn StaleFileDeleted(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.StaleFileDeleted)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RateChange(&self, qwnewrate: f64, qwoldrate: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.RateChange)(::windows::core::Interface::as_raw(self), qwnewrate, qwoldrate).ok()
    }
    pub unsafe fn BroadcastEvent<P0>(&self, guid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).BroadcastEvent)(::windows::core::Interface::as_raw(self), guid.into_param().abi()).ok()
    }
    pub unsafe fn BroadcastEventEx<P0>(&self, guid: P0, param1: u32, param2: u32, param3: u32, param4: u32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).BroadcastEventEx)(::windows::core::Interface::as_raw(self), guid.into_param().abi(), param1, param2, param3, param4).ok()
    }
    pub unsafe fn COPPBlocked(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).COPPBlocked)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn COPPUnblocked(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).COPPUnblocked)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ContentPrimarilyAudio(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ContentPrimarilyAudio)(::windows::core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidStreamBufferSourceEvent3, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidInputDeviceEvent, IMSVidPlaybackEvent, IMSVidFilePlaybackEvent, IMSVidStreamBufferSourceEvent, IMSVidStreamBufferSourceEvent2);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidStreamBufferSourceEvent3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidStreamBufferSourceEvent3 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidStreamBufferSourceEvent3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidStreamBufferSourceEvent3").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidStreamBufferSourceEvent3 {
    type Vtable = IMSVidStreamBufferSourceEvent3_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidStreamBufferSourceEvent3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidStreamBufferSourceEvent3 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xceabd6ab_9b90_4570_adf1_3ce76e00a763);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidStreamBufferSourceEvent3_Vtbl {
    pub base__: IMSVidStreamBufferSourceEvent2_Vtbl,
    pub BroadcastEvent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guid: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub BroadcastEventEx: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guid: ::std::mem::MaybeUninit<::windows::core::BSTR>, param1: u32, param2: u32, param3: u32, param4: u32) -> ::windows::core::HRESULT,
    pub COPPBlocked: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub COPPUnblocked: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub ContentPrimarilyAudio: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidStreamBufferV2SourceEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidStreamBufferV2SourceEvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EndOfMedia<P0>(&self, lpd: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidPlayback>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.EndOfMedia)(::windows::core::Interface::as_raw(self), lpd.into_param().abi()).ok()
    }
    pub unsafe fn RatingsChanged(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RatingsChanged)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TimeHole(&self, streamoffsetms: i32, sizems: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).TimeHole)(::windows::core::Interface::as_raw(self), streamoffsetms, sizems).ok()
    }
    pub unsafe fn StaleDataRead(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).StaleDataRead)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ContentBecomingStale(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ContentBecomingStale)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn StaleFileDeleted(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).StaleFileDeleted)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RateChange(&self, qwnewrate: f64, qwoldrate: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RateChange)(::windows::core::Interface::as_raw(self), qwnewrate, qwoldrate).ok()
    }
    pub unsafe fn BroadcastEvent<P0>(&self, guid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).BroadcastEvent)(::windows::core::Interface::as_raw(self), guid.into_param().abi()).ok()
    }
    pub unsafe fn BroadcastEventEx<P0>(&self, guid: P0, param1: u32, param2: u32, param3: u32, param4: u32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).BroadcastEventEx)(::windows::core::Interface::as_raw(self), guid.into_param().abi(), param1, param2, param3, param4).ok()
    }
    pub unsafe fn ContentPrimarilyAudio(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ContentPrimarilyAudio)(::windows::core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidStreamBufferV2SourceEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidInputDeviceEvent, IMSVidPlaybackEvent, IMSVidFilePlaybackEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidStreamBufferV2SourceEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidStreamBufferV2SourceEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidStreamBufferV2SourceEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidStreamBufferV2SourceEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidStreamBufferV2SourceEvent {
    type Vtable = IMSVidStreamBufferV2SourceEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidStreamBufferV2SourceEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidStreamBufferV2SourceEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x49c771f9_41b2_4cf7_9f9a_a313a8f6027e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidStreamBufferV2SourceEvent_Vtbl {
    pub base__: IMSVidFilePlaybackEvent_Vtbl,
    pub RatingsChanged: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub TimeHole: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, streamoffsetms: i32, sizems: i32) -> ::windows::core::HRESULT,
    pub StaleDataRead: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub ContentBecomingStale: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub StaleFileDeleted: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub RateChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, qwnewrate: f64, qwoldrate: f64) -> ::windows::core::HRESULT,
    pub BroadcastEvent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guid: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub BroadcastEventEx: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guid: ::std::mem::MaybeUninit<::windows::core::BSTR>, param1: u32, param2: u32, param3: u32, param4: u32) -> ::windows::core::HRESULT,
    pub ContentPrimarilyAudio: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidTuner(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidTuner {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn IsViewable(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.IsViewable)(::windows::core::Interface::as_raw(self), v, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn View(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.View)(::windows::core::Interface::as_raw(self), v).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Tune(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).Tune)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetTune<P0>(&self, ptr: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        (::windows::core::Interface::vtable(self).SetTune)(::windows::core::Interface::as_raw(self), ptr.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuningSpace(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).TuningSpace)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetTuningSpace<P0>(&self, plts: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuningSpace>,
    {
        (::windows::core::Interface::vtable(self).SetTuningSpace)(::windows::core::Interface::as_raw(self), plts.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidTuner, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidInputDevice, IMSVidVideoInputDevice);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidTuner {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidTuner {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidTuner {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidTuner").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidTuner {
    type Vtable = IMSVidTuner_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidTuner {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidTuner {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1c15d47d_911d_11d2_b632_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidTuner_Vtbl {
    pub base__: IMSVidVideoInputDevice_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Tune: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pptr: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Tune: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetTune: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ptr: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetTune: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub TuningSpace: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plts: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    TuningSpace: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetTuningSpace: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plts: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetTuningSpace: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidTunerEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidTunerEvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuneChanged<P0>(&self, lpd: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidTuner>,
    {
        (::windows::core::Interface::vtable(self).TuneChanged)(::windows::core::Interface::as_raw(self), lpd.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidTunerEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidInputDeviceEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidTunerEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidTunerEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidTunerEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidTunerEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidTunerEvent {
    type Vtable = IMSVidTunerEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidTunerEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidTunerEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1c15d485_911d_11d2_b632_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidTunerEvent_Vtbl {
    pub base__: IMSVidInputDeviceEvent_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub TuneChanged: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lpd: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    TuneChanged: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidVMR9(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidVMR9 {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn CustomCompositorClass(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.CustomCompositorClass)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCustomCompositorClass<P0>(&self, compositorclsid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetCustomCompositorClass)(::windows::core::Interface::as_raw(self), compositorclsid.into_param().abi()).ok()
    }
    pub unsafe fn _CustomCompositorClass(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._CustomCompositorClass)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_CustomCompositorClass(&self, compositorclsid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_CustomCompositorClass)(::windows::core::Interface::as_raw(self), compositorclsid).ok()
    }
    pub unsafe fn _CustomCompositor(&self) -> ::windows::core::Result<super::IVMRImageCompositor> {
        let mut result__ = ::windows::core::zeroed::<super::IVMRImageCompositor>();
        (::windows::core::Interface::vtable(self).base__._CustomCompositor)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_CustomCompositor<P0>(&self, compositor: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::IVMRImageCompositor>,
    {
        (::windows::core::Interface::vtable(self).base__.Set_CustomCompositor)(::windows::core::Interface::as_raw(self), compositor.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn MixerBitmap(&self) -> ::windows::core::Result<super::super::super::System::Ole::IPictureDisp> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IPictureDisp>();
        (::windows::core::Interface::vtable(self).base__.MixerBitmap)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _MixerBitmap(&self) -> ::windows::core::Result<super::IVMRMixerBitmap> {
        let mut result__ = ::windows::core::zeroed::<super::IVMRMixerBitmap>();
        (::windows::core::Interface::vtable(self).base__._MixerBitmap)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn SetMixerBitmap<P0>(&self, mixerpicturedisp: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::System::Ole::IPictureDisp>,
    {
        (::windows::core::Interface::vtable(self).base__.SetMixerBitmap)(::windows::core::Interface::as_raw(self), mixerpicturedisp.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_DirectDraw\"`, `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn Set_MixerBitmap(&self, mixerpicture: *const super::VMRALPHABITMAP) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_MixerBitmap)(::windows::core::Interface::as_raw(self), mixerpicture).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn MixerBitmapPositionRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.MixerBitmapPositionRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetMixerBitmapPositionRect<P0>(&self, rdest: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidRect>,
    {
        (::windows::core::Interface::vtable(self).base__.SetMixerBitmapPositionRect)(::windows::core::Interface::as_raw(self), rdest.into_param().abi()).ok()
    }
    pub unsafe fn MixerBitmapOpacity(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.MixerBitmapOpacity)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMixerBitmapOpacity(&self, opacity: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMixerBitmapOpacity)(::windows::core::Interface::as_raw(self), opacity).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn SetupMixerBitmap<P0, P1>(&self, mixerpicturedisp: P0, opacity: i32, rdest: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::System::Ole::IPictureDisp>,
        P1: ::windows::core::IntoParam<IMSVidRect>,
    {
        (::windows::core::Interface::vtable(self).base__.SetupMixerBitmap)(::windows::core::Interface::as_raw(self), mixerpicturedisp.into_param().abi(), opacity, rdest.into_param().abi()).ok()
    }
    pub unsafe fn SourceSize(&self) -> ::windows::core::Result<SourceSizeList> {
        let mut result__ = ::windows::core::zeroed::<SourceSizeList>();
        (::windows::core::Interface::vtable(self).base__.SourceSize)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSourceSize(&self, newsize: SourceSizeList) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetSourceSize)(::windows::core::Interface::as_raw(self), newsize).ok()
    }
    pub unsafe fn OverScan(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.OverScan)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOverScan(&self, lpercent: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetOverScan)(::windows::core::Interface::as_raw(self), lpercent).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn AvailableSourceRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.AvailableSourceRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn MaxVidRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.MaxVidRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn MinVidRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.MinVidRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn ClippedSourceRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.ClippedSourceRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetClippedSourceRect<P0>(&self, prect: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidRect>,
    {
        (::windows::core::Interface::vtable(self).base__.SetClippedSourceRect)(::windows::core::Interface::as_raw(self), prect.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UsingOverlay(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.UsingOverlay)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetUsingOverlay<P0>(&self, useoverlayval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetUsingOverlay)(::windows::core::Interface::as_raw(self), useoverlayval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Capture(&self) -> ::windows::core::Result<super::super::super::System::Ole::IPictureDisp> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IPictureDisp>();
        (::windows::core::Interface::vtable(self).base__.Capture)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn FramesPerSecond(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.FramesPerSecond)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn DecimateInput(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.DecimateInput)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetDecimateInput<P0>(&self, pdeci: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetDecimateInput)(::windows::core::Interface::as_raw(self), pdeci.into_param().abi()).ok()
    }
    pub unsafe fn Allocator_ID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Allocator_ID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetAllocator<P0>(&self, allocpresent: P0, id: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::IUnknown>,
    {
        (::windows::core::Interface::vtable(self).SetAllocator)(::windows::core::Interface::as_raw(self), allocpresent.into_param().abi(), id).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetSuppressEffects<P0>(&self, bsuppress: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetSuppressEffects)(::windows::core::Interface::as_raw(self), bsuppress.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SuppressEffects(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).SuppressEffects)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Allocator(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).Allocator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidVMR9, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidOutputDevice, IMSVidVideoRenderer);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidVMR9 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidVMR9 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidVMR9 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidVMR9").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidVMR9 {
    type Vtable = IMSVidVMR9_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidVMR9 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidVMR9 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd58b0015_ebef_44bb_bbdd_3f3699d76ea1);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidVMR9_Vtbl {
    pub base__: IMSVidVideoRenderer_Vtbl,
    pub Allocator_ID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, id: *mut i32) -> ::windows::core::HRESULT,
    pub SetAllocator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, allocpresent: *mut ::core::ffi::c_void, id: i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetSuppressEffects: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bsuppress: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetSuppressEffects: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SuppressEffects: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bsuppress: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SuppressEffects: usize,
    pub Allocator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, allocpresent: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidVRGraphSegment(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidVRGraphSegment {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.GetClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Init(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).base__.Init)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetInit<P0>(&self, pinit: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::IUnknown>,
    {
        (::windows::core::Interface::vtable(self).base__.SetInit)(::windows::core::Interface::as_raw(self), pinit.into_param().abi()).ok()
    }
    pub unsafe fn EnumFilters(&self) -> ::windows::core::Result<super::IEnumFilters> {
        let mut result__ = ::windows::core::zeroed::<super::IEnumFilters>();
        (::windows::core::Interface::vtable(self).base__.EnumFilters)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Container(&self) -> ::windows::core::Result<IMSVidGraphSegmentContainer> {
        let mut result__ = ::windows::core::zeroed::<IMSVidGraphSegmentContainer>();
        (::windows::core::Interface::vtable(self).base__.Container)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetContainer<P0>(&self, pctl: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidGraphSegmentContainer>,
    {
        (::windows::core::Interface::vtable(self).base__.SetContainer)(::windows::core::Interface::as_raw(self), pctl.into_param().abi()).ok()
    }
    pub unsafe fn Type(&self) -> ::windows::core::Result<MSVidSegmentType> {
        let mut result__ = ::windows::core::zeroed::<MSVidSegmentType>();
        (::windows::core::Interface::vtable(self).base__.Type)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Build(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Build)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PostBuild(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PostBuild)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PreRun(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PreRun)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PostRun(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PostRun)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PreStop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PreStop)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PostStop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PostStop)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn OnEventNotify(&self, leventcode: i32, leventparm1: isize, leventparm2: isize) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.OnEventNotify)(::windows::core::Interface::as_raw(self), leventcode, leventparm1, leventparm2).ok()
    }
    pub unsafe fn Decompose(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Decompose)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Set_VMRendererMode(&self, dwmode: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Set_VMRendererMode)(::windows::core::Interface::as_raw(self), dwmode).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetOwner<P0>(&self, window: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HWND>,
    {
        (::windows::core::Interface::vtable(self).SetOwner)(::windows::core::Interface::as_raw(self), window.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Owner(&self) -> ::windows::core::Result<super::super::super::Foundation::HWND> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::HWND>();
        (::windows::core::Interface::vtable(self).Owner)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UseOverlay(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).UseOverlay)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetUseOverlay<P0>(&self, useoverlayval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetUseOverlay)(::windows::core::Interface::as_raw(self), useoverlayval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Visible(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).Visible)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetVisible<P0>(&self, visible: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetVisible)(::windows::core::Interface::as_raw(self), visible.into_param().abi()).ok()
    }
    pub unsafe fn ColorKey(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).ColorKey)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetColorKey(&self, colorkey: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetColorKey)(::windows::core::Interface::as_raw(self), colorkey).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Source(&self) -> ::windows::core::Result<super::super::super::Foundation::RECT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::RECT>();
        (::windows::core::Interface::vtable(self).Source)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetSource(&self, r: super::super::super::Foundation::RECT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetSource)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(r)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Destination(&self) -> ::windows::core::Result<super::super::super::Foundation::RECT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::RECT>();
        (::windows::core::Interface::vtable(self).Destination)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetDestination(&self, r: super::super::super::Foundation::RECT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetDestination)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(r)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn get_NativeSize(&self, sizeval: *mut super::super::super::Foundation::SIZE, aspectratio: *mut super::super::super::Foundation::SIZE) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).get_NativeSize)(::windows::core::Interface::as_raw(self), sizeval, aspectratio).ok()
    }
    pub unsafe fn BorderColor(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).BorderColor)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetBorderColor(&self, color: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetBorderColor)(::windows::core::Interface::as_raw(self), color).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn MaintainAspectRatio(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).MaintainAspectRatio)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetMaintainAspectRatio<P0>(&self, fmaintain: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetMaintainAspectRatio)(::windows::core::Interface::as_raw(self), fmaintain.into_param().abi()).ok()
    }
    pub unsafe fn Refresh(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Refresh)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn DisplayChange(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DisplayChange)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn RePaint<P0>(&self, hdc: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Graphics::Gdi::HDC>,
    {
        (::windows::core::Interface::vtable(self).RePaint)(::windows::core::Interface::as_raw(self), hdc.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidVRGraphSegment, ::windows::core::IUnknown, super::super::super::System::Com::IPersist, IMSVidGraphSegment);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidVRGraphSegment {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidVRGraphSegment {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidVRGraphSegment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidVRGraphSegment").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidVRGraphSegment {
    type Vtable = IMSVidVRGraphSegment_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidVRGraphSegment {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidVRGraphSegment {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xdd47de3f_9874_4f7b_8b22_7cb2688461e7);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidVRGraphSegment_Vtbl {
    pub base__: IMSVidGraphSegment_Vtbl,
    pub Set_VMRendererMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwmode: i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetOwner: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, window: super::super::super::Foundation::HWND) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetOwner: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub Owner: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, window: *mut super::super::super::Foundation::HWND) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Owner: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub UseOverlay: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, useoverlayval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    UseOverlay: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetUseOverlay: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, useoverlayval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetUseOverlay: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub Visible: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, visible: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Visible: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetVisible: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, visible: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetVisible: usize,
    pub ColorKey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, colorkey: *mut u32) -> ::windows::core::HRESULT,
    pub SetColorKey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, colorkey: u32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub Source: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, r: *mut super::super::super::Foundation::RECT) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Source: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetSource: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, r: super::super::super::Foundation::RECT) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetSource: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub Destination: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, r: *mut super::super::super::Foundation::RECT) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Destination: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetDestination: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, r: super::super::super::Foundation::RECT) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetDestination: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub get_NativeSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, sizeval: *mut super::super::super::Foundation::SIZE, aspectratio: *mut super::super::super::Foundation::SIZE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    get_NativeSize: usize,
    pub BorderColor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, color: *mut u32) -> ::windows::core::HRESULT,
    pub SetBorderColor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, color: u32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub MaintainAspectRatio: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fmaintain: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    MaintainAspectRatio: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetMaintainAspectRatio: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fmaintain: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetMaintainAspectRatio: usize,
    pub Refresh: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub DisplayChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub RePaint: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hdc: super::super::super::Graphics::Gdi::HDC) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    RePaint: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidVideoInputDevice(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidVideoInputDevice {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn IsViewable(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.IsViewable)(::windows::core::Interface::as_raw(self), v, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn View(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.View)(::windows::core::Interface::as_raw(self), v).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidVideoInputDevice, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidInputDevice);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidVideoInputDevice {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidVideoInputDevice {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidVideoInputDevice {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidVideoInputDevice").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidVideoInputDevice {
    type Vtable = IMSVidVideoInputDevice_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidVideoInputDevice {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidVideoInputDevice {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1c15d47f_911d_11d2_b632_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidVideoInputDevice_Vtbl {
    pub base__: IMSVidInputDevice_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidVideoRenderer(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidVideoRenderer {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn CustomCompositorClass(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).CustomCompositorClass)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCustomCompositorClass<P0>(&self, compositorclsid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetCustomCompositorClass)(::windows::core::Interface::as_raw(self), compositorclsid.into_param().abi()).ok()
    }
    pub unsafe fn _CustomCompositorClass(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self)._CustomCompositorClass)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_CustomCompositorClass(&self, compositorclsid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Set_CustomCompositorClass)(::windows::core::Interface::as_raw(self), compositorclsid).ok()
    }
    pub unsafe fn _CustomCompositor(&self) -> ::windows::core::Result<super::IVMRImageCompositor> {
        let mut result__ = ::windows::core::zeroed::<super::IVMRImageCompositor>();
        (::windows::core::Interface::vtable(self)._CustomCompositor)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_CustomCompositor<P0>(&self, compositor: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::IVMRImageCompositor>,
    {
        (::windows::core::Interface::vtable(self).Set_CustomCompositor)(::windows::core::Interface::as_raw(self), compositor.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn MixerBitmap(&self) -> ::windows::core::Result<super::super::super::System::Ole::IPictureDisp> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IPictureDisp>();
        (::windows::core::Interface::vtable(self).MixerBitmap)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _MixerBitmap(&self) -> ::windows::core::Result<super::IVMRMixerBitmap> {
        let mut result__ = ::windows::core::zeroed::<super::IVMRMixerBitmap>();
        (::windows::core::Interface::vtable(self)._MixerBitmap)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn SetMixerBitmap<P0>(&self, mixerpicturedisp: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::System::Ole::IPictureDisp>,
    {
        (::windows::core::Interface::vtable(self).SetMixerBitmap)(::windows::core::Interface::as_raw(self), mixerpicturedisp.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_DirectDraw\"`, `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn Set_MixerBitmap(&self, mixerpicture: *const super::VMRALPHABITMAP) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Set_MixerBitmap)(::windows::core::Interface::as_raw(self), mixerpicture).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn MixerBitmapPositionRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).MixerBitmapPositionRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetMixerBitmapPositionRect<P0>(&self, rdest: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidRect>,
    {
        (::windows::core::Interface::vtable(self).SetMixerBitmapPositionRect)(::windows::core::Interface::as_raw(self), rdest.into_param().abi()).ok()
    }
    pub unsafe fn MixerBitmapOpacity(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MixerBitmapOpacity)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMixerBitmapOpacity(&self, opacity: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMixerBitmapOpacity)(::windows::core::Interface::as_raw(self), opacity).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn SetupMixerBitmap<P0, P1>(&self, mixerpicturedisp: P0, opacity: i32, rdest: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::System::Ole::IPictureDisp>,
        P1: ::windows::core::IntoParam<IMSVidRect>,
    {
        (::windows::core::Interface::vtable(self).SetupMixerBitmap)(::windows::core::Interface::as_raw(self), mixerpicturedisp.into_param().abi(), opacity, rdest.into_param().abi()).ok()
    }
    pub unsafe fn SourceSize(&self) -> ::windows::core::Result<SourceSizeList> {
        let mut result__ = ::windows::core::zeroed::<SourceSizeList>();
        (::windows::core::Interface::vtable(self).SourceSize)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSourceSize(&self, newsize: SourceSizeList) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetSourceSize)(::windows::core::Interface::as_raw(self), newsize).ok()
    }
    pub unsafe fn OverScan(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).OverScan)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOverScan(&self, lpercent: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetOverScan)(::windows::core::Interface::as_raw(self), lpercent).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn AvailableSourceRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).AvailableSourceRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn MaxVidRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).MaxVidRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn MinVidRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).MinVidRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn ClippedSourceRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).ClippedSourceRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetClippedSourceRect<P0>(&self, prect: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidRect>,
    {
        (::windows::core::Interface::vtable(self).SetClippedSourceRect)(::windows::core::Interface::as_raw(self), prect.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UsingOverlay(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).UsingOverlay)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetUsingOverlay<P0>(&self, useoverlayval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetUsingOverlay)(::windows::core::Interface::as_raw(self), useoverlayval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Capture(&self) -> ::windows::core::Result<super::super::super::System::Ole::IPictureDisp> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IPictureDisp>();
        (::windows::core::Interface::vtable(self).Capture)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn FramesPerSecond(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).FramesPerSecond)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn DecimateInput(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).DecimateInput)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetDecimateInput<P0>(&self, pdeci: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetDecimateInput)(::windows::core::Interface::as_raw(self), pdeci.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidVideoRenderer, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidOutputDevice);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidVideoRenderer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidVideoRenderer {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidVideoRenderer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidVideoRenderer").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidVideoRenderer {
    type Vtable = IMSVidVideoRenderer_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidVideoRenderer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidVideoRenderer {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37b03540_a4c8_11d2_b634_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidVideoRenderer_Vtbl {
    pub base__: IMSVidOutputDevice_Vtbl,
    pub CustomCompositorClass: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, compositorclsid: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SetCustomCompositorClass: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, compositorclsid: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub _CustomCompositorClass: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, compositorclsid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub Set_CustomCompositorClass: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, compositorclsid: *const ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub _CustomCompositor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, compositor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Set_CustomCompositor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, compositor: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub MixerBitmap: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mixerpicturedisp: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    MixerBitmap: usize,
    pub _MixerBitmap: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mixerpicture: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub SetMixerBitmap: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mixerpicturedisp: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    SetMixerBitmap: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi"))]
    pub Set_MixerBitmap: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mixerpicture: *const super::VMRALPHABITMAP) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi")))]
    Set_MixerBitmap: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub MixerBitmapPositionRect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rdest: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    MixerBitmapPositionRect: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetMixerBitmapPositionRect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rdest: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetMixerBitmapPositionRect: usize,
    pub MixerBitmapOpacity: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, opacity: *mut i32) -> ::windows::core::HRESULT,
    pub SetMixerBitmapOpacity: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, opacity: i32) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub SetupMixerBitmap: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mixerpicturedisp: *mut ::core::ffi::c_void, opacity: i32, rdest: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    SetupMixerBitmap: usize,
    pub SourceSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, currentsize: *mut SourceSizeList) -> ::windows::core::HRESULT,
    pub SetSourceSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newsize: SourceSizeList) -> ::windows::core::HRESULT,
    pub OverScan: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plpercent: *mut i32) -> ::windows::core::HRESULT,
    pub SetOverScan: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lpercent: i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub AvailableSourceRect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prect: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    AvailableSourceRect: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub MaxVidRect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppvidrect: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    MaxVidRect: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub MinVidRect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppvidrect: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    MinVidRect: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub ClippedSourceRect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prect: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    ClippedSourceRect: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetClippedSourceRect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prect: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetClippedSourceRect: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub UsingOverlay: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, useoverlayval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    UsingOverlay: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetUsingOverlay: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, useoverlayval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetUsingOverlay: usize,
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Capture: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, currentimage: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Capture: usize,
    pub FramesPerSecond: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub DecimateInput: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdeci: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    DecimateInput: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetDecimateInput: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdeci: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetDecimateInput: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidVideoRenderer2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidVideoRenderer2 {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn CustomCompositorClass(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.CustomCompositorClass)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCustomCompositorClass<P0>(&self, compositorclsid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetCustomCompositorClass)(::windows::core::Interface::as_raw(self), compositorclsid.into_param().abi()).ok()
    }
    pub unsafe fn _CustomCompositorClass(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__._CustomCompositorClass)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_CustomCompositorClass(&self, compositorclsid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_CustomCompositorClass)(::windows::core::Interface::as_raw(self), compositorclsid).ok()
    }
    pub unsafe fn _CustomCompositor(&self) -> ::windows::core::Result<super::IVMRImageCompositor> {
        let mut result__ = ::windows::core::zeroed::<super::IVMRImageCompositor>();
        (::windows::core::Interface::vtable(self).base__._CustomCompositor)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_CustomCompositor<P0>(&self, compositor: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::IVMRImageCompositor>,
    {
        (::windows::core::Interface::vtable(self).base__.Set_CustomCompositor)(::windows::core::Interface::as_raw(self), compositor.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn MixerBitmap(&self) -> ::windows::core::Result<super::super::super::System::Ole::IPictureDisp> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IPictureDisp>();
        (::windows::core::Interface::vtable(self).base__.MixerBitmap)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _MixerBitmap(&self) -> ::windows::core::Result<super::IVMRMixerBitmap> {
        let mut result__ = ::windows::core::zeroed::<super::IVMRMixerBitmap>();
        (::windows::core::Interface::vtable(self).base__._MixerBitmap)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn SetMixerBitmap<P0>(&self, mixerpicturedisp: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::System::Ole::IPictureDisp>,
    {
        (::windows::core::Interface::vtable(self).base__.SetMixerBitmap)(::windows::core::Interface::as_raw(self), mixerpicturedisp.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_DirectDraw\"`, `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn Set_MixerBitmap(&self, mixerpicture: *const super::VMRALPHABITMAP) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Set_MixerBitmap)(::windows::core::Interface::as_raw(self), mixerpicture).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn MixerBitmapPositionRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.MixerBitmapPositionRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetMixerBitmapPositionRect<P0>(&self, rdest: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidRect>,
    {
        (::windows::core::Interface::vtable(self).base__.SetMixerBitmapPositionRect)(::windows::core::Interface::as_raw(self), rdest.into_param().abi()).ok()
    }
    pub unsafe fn MixerBitmapOpacity(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.MixerBitmapOpacity)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMixerBitmapOpacity(&self, opacity: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMixerBitmapOpacity)(::windows::core::Interface::as_raw(self), opacity).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn SetupMixerBitmap<P0, P1>(&self, mixerpicturedisp: P0, opacity: i32, rdest: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::System::Ole::IPictureDisp>,
        P1: ::windows::core::IntoParam<IMSVidRect>,
    {
        (::windows::core::Interface::vtable(self).base__.SetupMixerBitmap)(::windows::core::Interface::as_raw(self), mixerpicturedisp.into_param().abi(), opacity, rdest.into_param().abi()).ok()
    }
    pub unsafe fn SourceSize(&self) -> ::windows::core::Result<SourceSizeList> {
        let mut result__ = ::windows::core::zeroed::<SourceSizeList>();
        (::windows::core::Interface::vtable(self).base__.SourceSize)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSourceSize(&self, newsize: SourceSizeList) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetSourceSize)(::windows::core::Interface::as_raw(self), newsize).ok()
    }
    pub unsafe fn OverScan(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.OverScan)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOverScan(&self, lpercent: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetOverScan)(::windows::core::Interface::as_raw(self), lpercent).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn AvailableSourceRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.AvailableSourceRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn MaxVidRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.MaxVidRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn MinVidRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.MinVidRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn ClippedSourceRect(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.ClippedSourceRect)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetClippedSourceRect<P0>(&self, prect: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidRect>,
    {
        (::windows::core::Interface::vtable(self).base__.SetClippedSourceRect)(::windows::core::Interface::as_raw(self), prect.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UsingOverlay(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.UsingOverlay)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetUsingOverlay<P0>(&self, useoverlayval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetUsingOverlay)(::windows::core::Interface::as_raw(self), useoverlayval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Capture(&self) -> ::windows::core::Result<super::super::super::System::Ole::IPictureDisp> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IPictureDisp>();
        (::windows::core::Interface::vtable(self).base__.Capture)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn FramesPerSecond(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.FramesPerSecond)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn DecimateInput(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.DecimateInput)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetDecimateInput<P0>(&self, pdeci: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetDecimateInput)(::windows::core::Interface::as_raw(self), pdeci.into_param().abi()).ok()
    }
    pub unsafe fn Allocator(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).Allocator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Allocator(&self) -> ::windows::core::Result<super::IVMRSurfaceAllocator> {
        let mut result__ = ::windows::core::zeroed::<super::IVMRSurfaceAllocator>();
        (::windows::core::Interface::vtable(self)._Allocator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Allocator_ID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Allocator_ID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetAllocator<P0>(&self, allocpresent: P0, id: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::IUnknown>,
    {
        (::windows::core::Interface::vtable(self).SetAllocator)(::windows::core::Interface::as_raw(self), allocpresent.into_param().abi(), id).ok()
    }
    pub unsafe fn _SetAllocator2<P0>(&self, allocpresent: P0, id: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::IVMRSurfaceAllocator>,
    {
        (::windows::core::Interface::vtable(self)._SetAllocator2)(::windows::core::Interface::as_raw(self), allocpresent.into_param().abi(), id).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetSuppressEffects<P0>(&self, bsuppress: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetSuppressEffects)(::windows::core::Interface::as_raw(self), bsuppress.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SuppressEffects(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).SuppressEffects)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidVideoRenderer2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidOutputDevice, IMSVidVideoRenderer);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidVideoRenderer2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidVideoRenderer2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidVideoRenderer2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidVideoRenderer2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidVideoRenderer2 {
    type Vtable = IMSVidVideoRenderer2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidVideoRenderer2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidVideoRenderer2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6bdd5c1e_2810_4159_94bc_05511ae8549b);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidVideoRenderer2_Vtbl {
    pub base__: IMSVidVideoRenderer_Vtbl,
    pub Allocator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, allocpresent: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub _Allocator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, allocpresent: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Allocator_ID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, id: *mut i32) -> ::windows::core::HRESULT,
    pub SetAllocator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, allocpresent: *mut ::core::ffi::c_void, id: i32) -> ::windows::core::HRESULT,
    pub _SetAllocator2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, allocpresent: *mut ::core::ffi::c_void, id: i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetSuppressEffects: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bsuppress: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetSuppressEffects: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SuppressEffects: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bsuppress: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SuppressEffects: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidVideoRendererDevices(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidVideoRendererDevices {
    pub unsafe fn Count(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Count)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn _NewEnum(&self) -> ::windows::core::Result<super::super::super::System::Ole::IEnumVARIANT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IEnumVARIANT>();
        (::windows::core::Interface::vtable(self)._NewEnum)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn get_Item(&self, v: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<IMSVidVideoRenderer> {
        let mut result__ = ::windows::core::zeroed::<IMSVidVideoRenderer>();
        (::windows::core::Interface::vtable(self).get_Item)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(v), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Add<P0>(&self, pdb: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidVideoRenderer>,
    {
        (::windows::core::Interface::vtable(self).Add)(::windows::core::Interface::as_raw(self), pdb.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Remove(&self, v: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Remove)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(v)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidVideoRendererDevices, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidVideoRendererDevices {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidVideoRendererDevices {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidVideoRendererDevices {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidVideoRendererDevices").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidVideoRendererDevices {
    type Vtable = IMSVidVideoRendererDevices_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidVideoRendererDevices {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidVideoRendererDevices {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc5702cd3_9b79_11d3_b654_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidVideoRendererDevices_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub Count: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lcount: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Ole")]
    pub _NewEnum: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pd: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    _NewEnum: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub get_Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, v: super::super::super::System::Com::VARIANT, pdb: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    get_Item: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Add: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdb: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Add: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Remove: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, v: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Remove: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidVideoRendererEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidVideoRendererEvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn StateChange<P0>(&self, lpd: P0, oldstate: i32, newstate: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.StateChange)(::windows::core::Interface::as_raw(self), lpd.into_param().abi(), oldstate, newstate).ok()
    }
    pub unsafe fn OverlayUnavailable(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).OverlayUnavailable)(::windows::core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidVideoRendererEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDeviceEvent, IMSVidOutputDeviceEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidVideoRendererEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidVideoRendererEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidVideoRendererEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidVideoRendererEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidVideoRendererEvent {
    type Vtable = IMSVidVideoRendererEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidVideoRendererEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidVideoRendererEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37b03545_a4c8_11d2_b634_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidVideoRendererEvent_Vtbl {
    pub base__: IMSVidOutputDeviceEvent_Vtbl,
    pub OverlayUnavailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidVideoRendererEvent2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidVideoRendererEvent2 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn StateChange<P0>(&self, lpd: P0, oldstate: i32, newstate: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.StateChange)(::windows::core::Interface::as_raw(self), lpd.into_param().abi(), oldstate, newstate).ok()
    }
    pub unsafe fn OverlayUnavailable(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).OverlayUnavailable)(::windows::core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidVideoRendererEvent2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDeviceEvent, IMSVidOutputDeviceEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidVideoRendererEvent2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidVideoRendererEvent2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidVideoRendererEvent2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidVideoRendererEvent2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidVideoRendererEvent2 {
    type Vtable = IMSVidVideoRendererEvent2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidVideoRendererEvent2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidVideoRendererEvent2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x7145ed66_4730_4fdb_8a53_fde7508d3e5e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidVideoRendererEvent2_Vtbl {
    pub base__: IMSVidOutputDeviceEvent_Vtbl,
    pub OverlayUnavailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidWebDVD(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidWebDVD {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn IsViewable(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.IsViewable)(::windows::core::Interface::as_raw(self), v, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn View(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.View)(::windows::core::Interface::as_raw(self), v).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableResetOnStop(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.EnableResetOnStop)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetEnableResetOnStop<P0>(&self, newval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetEnableResetOnStop)(::windows::core::Interface::as_raw(self), newval.into_param().abi()).ok()
    }
    pub unsafe fn Run(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Run)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Pause(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Pause)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Stop)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn get_CanStep<P0>(&self, fbackwards: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.get_CanStep)(::windows::core::Interface::as_raw(self), fbackwards.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Step(&self, lstep: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Step)(::windows::core::Interface::as_raw(self), lstep).ok()
    }
    pub unsafe fn SetRate(&self, plrate: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetRate)(::windows::core::Interface::as_raw(self), plrate).ok()
    }
    pub unsafe fn Rate(&self) -> ::windows::core::Result<f64> {
        let mut result__ = ::windows::core::zeroed::<f64>();
        (::windows::core::Interface::vtable(self).base__.Rate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentPosition(&self, lposition: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCurrentPosition)(::windows::core::Interface::as_raw(self), lposition).ok()
    }
    pub unsafe fn CurrentPosition(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.CurrentPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPositionMode(&self, lpositionmode: PositionModeList) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetPositionMode)(::windows::core::Interface::as_raw(self), lpositionmode).ok()
    }
    pub unsafe fn PositionMode(&self) -> ::windows::core::Result<PositionModeList> {
        let mut result__ = ::windows::core::zeroed::<PositionModeList>();
        (::windows::core::Interface::vtable(self).base__.PositionMode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Length(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.Length)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn OnDVDEvent(&self, levent: i32, lparam1: isize, lparam2: isize) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).OnDVDEvent)(::windows::core::Interface::as_raw(self), levent, lparam1, lparam2).ok()
    }
    pub unsafe fn PlayTitle(&self, ltitle: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PlayTitle)(::windows::core::Interface::as_raw(self), ltitle).ok()
    }
    pub unsafe fn PlayChapterInTitle(&self, ltitle: i32, lchapter: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PlayChapterInTitle)(::windows::core::Interface::as_raw(self), ltitle, lchapter).ok()
    }
    pub unsafe fn PlayChapter(&self, lchapter: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PlayChapter)(::windows::core::Interface::as_raw(self), lchapter).ok()
    }
    pub unsafe fn PlayChaptersAutoStop(&self, ltitle: i32, lstrchapter: i32, lchaptercount: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PlayChaptersAutoStop)(::windows::core::Interface::as_raw(self), ltitle, lstrchapter, lchaptercount).ok()
    }
    pub unsafe fn PlayAtTime<P0>(&self, strtime: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).PlayAtTime)(::windows::core::Interface::as_raw(self), strtime.into_param().abi()).ok()
    }
    pub unsafe fn PlayAtTimeInTitle<P0>(&self, ltitle: i32, strtime: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).PlayAtTimeInTitle)(::windows::core::Interface::as_raw(self), ltitle, strtime.into_param().abi()).ok()
    }
    pub unsafe fn PlayPeriodInTitleAutoStop<P0, P1>(&self, ltitle: i32, strstarttime: P0, strendtime: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
        P1: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).PlayPeriodInTitleAutoStop)(::windows::core::Interface::as_raw(self), ltitle, strstarttime.into_param().abi(), strendtime.into_param().abi()).ok()
    }
    pub unsafe fn ReplayChapter(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ReplayChapter)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PlayPrevChapter(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PlayPrevChapter)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PlayNextChapter(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PlayNextChapter)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn StillOff(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).StillOff)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn get_AudioLanguage<P0>(&self, lstream: i32, fformat: P0) -> ::windows::core::Result<::windows::core::BSTR>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).get_AudioLanguage)(::windows::core::Interface::as_raw(self), lstream, fformat.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn ShowMenu(&self, menuid: DVDMenuIDConstants) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ShowMenu)(::windows::core::Interface::as_raw(self), menuid).ok()
    }
    pub unsafe fn Resume(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Resume)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ReturnFromSubmenu(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ReturnFromSubmenu)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ButtonsAvailable(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).ButtonsAvailable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentButton(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CurrentButton)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SelectAndActivateButton(&self, lbutton: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SelectAndActivateButton)(::windows::core::Interface::as_raw(self), lbutton).ok()
    }
    pub unsafe fn ActivateButton(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ActivateButton)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SelectRightButton(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SelectRightButton)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SelectLeftButton(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SelectLeftButton)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SelectLowerButton(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SelectLowerButton)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SelectUpperButton(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SelectUpperButton)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ActivateAtPosition(&self, xpos: i32, ypos: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ActivateAtPosition)(::windows::core::Interface::as_raw(self), xpos, ypos).ok()
    }
    pub unsafe fn SelectAtPosition(&self, xpos: i32, ypos: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SelectAtPosition)(::windows::core::Interface::as_raw(self), xpos, ypos).ok()
    }
    pub unsafe fn get_ButtonAtPosition(&self, xpos: i32, ypos: i32) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).get_ButtonAtPosition)(::windows::core::Interface::as_raw(self), xpos, ypos, &mut result__).from_abi(result__)
    }
    pub unsafe fn get_NumberOfChapters(&self, ltitle: i32) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).get_NumberOfChapters)(::windows::core::Interface::as_raw(self), ltitle, &mut result__).from_abi(result__)
    }
    pub unsafe fn TotalTitleTime(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).TotalTitleTime)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn TitlesAvailable(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).TitlesAvailable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn VolumesAvailable(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).VolumesAvailable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentVolume(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CurrentVolume)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentDiscSide(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CurrentDiscSide)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentDomain(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CurrentDomain)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentChapter(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CurrentChapter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentTitle(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CurrentTitle)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentTime(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).CurrentTime)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DVDTimeCode2bstr(&self, timecode: i32) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).DVDTimeCode2bstr)(::windows::core::Interface::as_raw(self), timecode, &mut result__).from_abi(result__)
    }
    pub unsafe fn DVDDirectory(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).DVDDirectory)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDVDDirectory<P0>(&self, newval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetDVDDirectory)(::windows::core::Interface::as_raw(self), newval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSubpictureStreamEnabled(&self, lstream: i32) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).IsSubpictureStreamEnabled)(::windows::core::Interface::as_raw(self), lstream, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsAudioStreamEnabled(&self, lstream: i32) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).IsAudioStreamEnabled)(::windows::core::Interface::as_raw(self), lstream, &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentSubpictureStream(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CurrentSubpictureStream)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentSubpictureStream(&self, newval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetCurrentSubpictureStream)(::windows::core::Interface::as_raw(self), newval).ok()
    }
    pub unsafe fn get_SubpictureLanguage(&self, lstream: i32) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).get_SubpictureLanguage)(::windows::core::Interface::as_raw(self), lstream, &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentAudioStream(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CurrentAudioStream)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentAudioStream(&self, newval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetCurrentAudioStream)(::windows::core::Interface::as_raw(self), newval).ok()
    }
    pub unsafe fn AudioStreamsAvailable(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).AudioStreamsAvailable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AnglesAvailable(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).AnglesAvailable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentAngle(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CurrentAngle)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentAngle(&self, newval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetCurrentAngle)(::windows::core::Interface::as_raw(self), newval).ok()
    }
    pub unsafe fn SubpictureStreamsAvailable(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).SubpictureStreamsAvailable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SubpictureOn(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).SubpictureOn)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetSubpictureOn<P0>(&self, newval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetSubpictureOn)(::windows::core::Interface::as_raw(self), newval.into_param().abi()).ok()
    }
    pub unsafe fn DVDUniqueID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).DVDUniqueID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AcceptParentalLevelChange<P0, P1, P2>(&self, faccept: P0, strusername: P1, strpassword: P2) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows::core::IntoParam<::windows::core::BSTR>,
        P2: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).AcceptParentalLevelChange)(::windows::core::Interface::as_raw(self), faccept.into_param().abi(), strusername.into_param().abi(), strpassword.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn NotifyParentalLevelChange<P0>(&self, newval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).NotifyParentalLevelChange)(::windows::core::Interface::as_raw(self), newval.into_param().abi()).ok()
    }
    pub unsafe fn SelectParentalCountry<P0, P1>(&self, lcountry: i32, strusername: P0, strpassword: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
        P1: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SelectParentalCountry)(::windows::core::Interface::as_raw(self), lcountry, strusername.into_param().abi(), strpassword.into_param().abi()).ok()
    }
    pub unsafe fn SelectParentalLevel<P0, P1>(&self, lparentallevel: i32, strusername: P0, strpassword: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
        P1: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SelectParentalLevel)(::windows::core::Interface::as_raw(self), lparentallevel, strusername.into_param().abi(), strpassword.into_param().abi()).ok()
    }
    pub unsafe fn get_TitleParentalLevels(&self, ltitle: i32) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).get_TitleParentalLevels)(::windows::core::Interface::as_raw(self), ltitle, &mut result__).from_abi(result__)
    }
    pub unsafe fn PlayerParentalCountry(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).PlayerParentalCountry)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn PlayerParentalLevel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).PlayerParentalLevel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Eject(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Eject)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UOPValid(&self, luop: i32) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).UOPValid)(::windows::core::Interface::as_raw(self), luop, &mut result__).from_abi(result__)
    }
    pub unsafe fn get_SPRM(&self, lindex: i32) -> ::windows::core::Result<i16> {
        let mut result__ = ::windows::core::zeroed::<i16>();
        (::windows::core::Interface::vtable(self).get_SPRM)(::windows::core::Interface::as_raw(self), lindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn get_GPRM(&self, lindex: i32) -> ::windows::core::Result<i16> {
        let mut result__ = ::windows::core::zeroed::<i16>();
        (::windows::core::Interface::vtable(self).get_GPRM)(::windows::core::Interface::as_raw(self), lindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn put_GPRM(&self, lindex: i32, svalue: i16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).put_GPRM)(::windows::core::Interface::as_raw(self), lindex, svalue).ok()
    }
    pub unsafe fn get_DVDTextStringType(&self, llangindex: i32, lstringindex: i32) -> ::windows::core::Result<DVDTextStringType> {
        let mut result__ = ::windows::core::zeroed::<DVDTextStringType>();
        (::windows::core::Interface::vtable(self).get_DVDTextStringType)(::windows::core::Interface::as_raw(self), llangindex, lstringindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn get_DVDTextString(&self, llangindex: i32, lstringindex: i32) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).get_DVDTextString)(::windows::core::Interface::as_raw(self), llangindex, lstringindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn get_DVDTextNumberOfStrings(&self, llangindex: i32) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).get_DVDTextNumberOfStrings)(::windows::core::Interface::as_raw(self), llangindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn DVDTextNumberOfLanguages(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).DVDTextNumberOfLanguages)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn get_DVDTextLanguageLCID(&self, llangindex: i32) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).get_DVDTextLanguageLCID)(::windows::core::Interface::as_raw(self), llangindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn RegionChange(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RegionChange)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DVDAdm(&self) -> ::windows::core::Result<super::super::super::System::Com::IDispatch> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IDispatch>();
        (::windows::core::Interface::vtable(self).DVDAdm)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DeleteBookmark(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DeleteBookmark)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RestoreBookmark(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RestoreBookmark)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SaveBookmark(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SaveBookmark)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SelectDefaultAudioLanguage(&self, lang: i32, ext: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SelectDefaultAudioLanguage)(::windows::core::Interface::as_raw(self), lang, ext).ok()
    }
    pub unsafe fn SelectDefaultSubpictureLanguage(&self, lang: i32, ext: DVDSPExt) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SelectDefaultSubpictureLanguage)(::windows::core::Interface::as_raw(self), lang, ext).ok()
    }
    pub unsafe fn PreferredSubpictureStream(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).PreferredSubpictureStream)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultMenuLanguage(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).DefaultMenuLanguage)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDefaultMenuLanguage(&self, lang: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetDefaultMenuLanguage)(::windows::core::Interface::as_raw(self), lang).ok()
    }
    pub unsafe fn DefaultSubpictureLanguage(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).DefaultSubpictureLanguage)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultAudioLanguage(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).DefaultAudioLanguage)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultSubpictureLanguageExt(&self) -> ::windows::core::Result<DVDSPExt> {
        let mut result__ = ::windows::core::zeroed::<DVDSPExt>();
        (::windows::core::Interface::vtable(self).DefaultSubpictureLanguageExt)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultAudioLanguageExt(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).DefaultAudioLanguageExt)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn get_LanguageFromLCID(&self, lcid: i32) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).get_LanguageFromLCID)(::windows::core::Interface::as_raw(self), lcid, &mut result__).from_abi(result__)
    }
    pub unsafe fn KaraokeAudioPresentationMode(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).KaraokeAudioPresentationMode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetKaraokeAudioPresentationMode(&self, newval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetKaraokeAudioPresentationMode)(::windows::core::Interface::as_raw(self), newval).ok()
    }
    pub unsafe fn get_KaraokeChannelContent(&self, lstream: i32, lchan: i32) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).get_KaraokeChannelContent)(::windows::core::Interface::as_raw(self), lstream, lchan, &mut result__).from_abi(result__)
    }
    pub unsafe fn get_KaraokeChannelAssignment(&self, lstream: i32) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).get_KaraokeChannelAssignment)(::windows::core::Interface::as_raw(self), lstream, &mut result__).from_abi(result__)
    }
    pub unsafe fn RestorePreferredSettings(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RestorePreferredSettings)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn get_ButtonRect(&self, lbutton: i32) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).get_ButtonRect)(::windows::core::Interface::as_raw(self), lbutton, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DVDScreenInMouseCoordinates(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).DVDScreenInMouseCoordinates)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDVDScreenInMouseCoordinates<P0>(&self, prect: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidRect>,
    {
        (::windows::core::Interface::vtable(self).SetDVDScreenInMouseCoordinates)(::windows::core::Interface::as_raw(self), prect.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidWebDVD, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidInputDevice, IMSVidPlayback);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidWebDVD {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidWebDVD {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidWebDVD {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidWebDVD").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidWebDVD {
    type Vtable = IMSVidWebDVD_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidWebDVD {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidWebDVD {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xcf45f88b_ac56_4ee2_a73a_ed04e2885d3c);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidWebDVD_Vtbl {
    pub base__: IMSVidPlayback_Vtbl,
    pub OnDVDEvent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, levent: i32, lparam1: isize, lparam2: isize) -> ::windows::core::HRESULT,
    pub PlayTitle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ltitle: i32) -> ::windows::core::HRESULT,
    pub PlayChapterInTitle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ltitle: i32, lchapter: i32) -> ::windows::core::HRESULT,
    pub PlayChapter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lchapter: i32) -> ::windows::core::HRESULT,
    pub PlayChaptersAutoStop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ltitle: i32, lstrchapter: i32, lchaptercount: i32) -> ::windows::core::HRESULT,
    pub PlayAtTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, strtime: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub PlayAtTimeInTitle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ltitle: i32, strtime: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub PlayPeriodInTitleAutoStop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ltitle: i32, strstarttime: ::std::mem::MaybeUninit<::windows::core::BSTR>, strendtime: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub ReplayChapter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub PlayPrevChapter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub PlayNextChapter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub StillOff: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub get_AudioLanguage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lstream: i32, fformat: super::super::super::Foundation::VARIANT_BOOL, straudiolang: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    get_AudioLanguage: usize,
    pub ShowMenu: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, menuid: DVDMenuIDConstants) -> ::windows::core::HRESULT,
    pub Resume: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub ReturnFromSubmenu: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub ButtonsAvailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub CurrentButton: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub SelectAndActivateButton: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lbutton: i32) -> ::windows::core::HRESULT,
    pub ActivateButton: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub SelectRightButton: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub SelectLeftButton: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub SelectLowerButton: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub SelectUpperButton: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub ActivateAtPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, xpos: i32, ypos: i32) -> ::windows::core::HRESULT,
    pub SelectAtPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, xpos: i32, ypos: i32) -> ::windows::core::HRESULT,
    pub get_ButtonAtPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, xpos: i32, ypos: i32, plbutton: *mut i32) -> ::windows::core::HRESULT,
    pub get_NumberOfChapters: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ltitle: i32, pval: *mut i32) -> ::windows::core::HRESULT,
    pub TotalTitleTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub TitlesAvailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub VolumesAvailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub CurrentVolume: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub CurrentDiscSide: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub CurrentDomain: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub CurrentChapter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub CurrentTitle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub CurrentTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub DVDTimeCode2bstr: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, timecode: i32, ptimestr: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub DVDDirectory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SetDVDDirectory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newval: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub IsSubpictureStreamEnabled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lstream: i32, fenabled: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsSubpictureStreamEnabled: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub IsAudioStreamEnabled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lstream: i32, fenabled: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsAudioStreamEnabled: usize,
    pub CurrentSubpictureStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub SetCurrentSubpictureStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows::core::HRESULT,
    pub get_SubpictureLanguage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lstream: i32, strlanguage: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub CurrentAudioStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub SetCurrentAudioStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows::core::HRESULT,
    pub AudioStreamsAvailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub AnglesAvailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub CurrentAngle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub SetCurrentAngle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows::core::HRESULT,
    pub SubpictureStreamsAvailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SubpictureOn: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SubpictureOn: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetSubpictureOn: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetSubpictureOn: usize,
    pub DVDUniqueID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub AcceptParentalLevelChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, faccept: super::super::super::Foundation::VARIANT_BOOL, strusername: ::std::mem::MaybeUninit<::windows::core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    AcceptParentalLevelChange: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub NotifyParentalLevelChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    NotifyParentalLevelChange: usize,
    pub SelectParentalCountry: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lcountry: i32, strusername: ::std::mem::MaybeUninit<::windows::core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SelectParentalLevel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lparentallevel: i32, strusername: ::std::mem::MaybeUninit<::windows::core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub get_TitleParentalLevels: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ltitle: i32, plparentallevels: *mut i32) -> ::windows::core::HRESULT,
    pub PlayerParentalCountry: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plcountrycode: *mut i32) -> ::windows::core::HRESULT,
    pub PlayerParentalLevel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plparentallevel: *mut i32) -> ::windows::core::HRESULT,
    pub Eject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub UOPValid: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, luop: i32, pfvalid: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    UOPValid: usize,
    pub get_SPRM: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lindex: i32, pssprm: *mut i16) -> ::windows::core::HRESULT,
    pub get_GPRM: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lindex: i32, pssprm: *mut i16) -> ::windows::core::HRESULT,
    pub put_GPRM: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lindex: i32, svalue: i16) -> ::windows::core::HRESULT,
    pub get_DVDTextStringType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, llangindex: i32, lstringindex: i32, ptype: *mut DVDTextStringType) -> ::windows::core::HRESULT,
    pub get_DVDTextString: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, llangindex: i32, lstringindex: i32, pstrtext: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub get_DVDTextNumberOfStrings: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, llangindex: i32, plnumofstrings: *mut i32) -> ::windows::core::HRESULT,
    pub DVDTextNumberOfLanguages: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plnumoflangs: *mut i32) -> ::windows::core::HRESULT,
    pub get_DVDTextLanguageLCID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, llangindex: i32, lcid: *mut i32) -> ::windows::core::HRESULT,
    pub RegionChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub DVDAdm: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    DVDAdm: usize,
    pub DeleteBookmark: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub RestoreBookmark: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub SaveBookmark: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub SelectDefaultAudioLanguage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lang: i32, ext: i32) -> ::windows::core::HRESULT,
    pub SelectDefaultSubpictureLanguage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lang: i32, ext: DVDSPExt) -> ::windows::core::HRESULT,
    pub PreferredSubpictureStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub DefaultMenuLanguage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lang: *mut i32) -> ::windows::core::HRESULT,
    pub SetDefaultMenuLanguage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lang: i32) -> ::windows::core::HRESULT,
    pub DefaultSubpictureLanguage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lang: *mut i32) -> ::windows::core::HRESULT,
    pub DefaultAudioLanguage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lang: *mut i32) -> ::windows::core::HRESULT,
    pub DefaultSubpictureLanguageExt: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ext: *mut DVDSPExt) -> ::windows::core::HRESULT,
    pub DefaultAudioLanguageExt: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ext: *mut i32) -> ::windows::core::HRESULT,
    pub get_LanguageFromLCID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lcid: i32, lang: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub KaraokeAudioPresentationMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub SetKaraokeAudioPresentationMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows::core::HRESULT,
    pub get_KaraokeChannelContent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lstream: i32, lchan: i32, lcontent: *mut i32) -> ::windows::core::HRESULT,
    pub get_KaraokeChannelAssignment: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lstream: i32, lchannelassignment: *mut i32) -> ::windows::core::HRESULT,
    pub RestorePreferredSettings: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub get_ButtonRect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lbutton: i32, prect: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    get_ButtonRect: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub DVDScreenInMouseCoordinates: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pprect: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    DVDScreenInMouseCoordinates: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetDVDScreenInMouseCoordinates: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prect: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetDVDScreenInMouseCoordinates: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidWebDVD2(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidWebDVD2 {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn IsViewable(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.base__.IsViewable)(::windows::core::Interface::as_raw(self), v, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn View(&self, v: *const super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.base__.View)(::windows::core::Interface::as_raw(self), v).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableResetOnStop(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.EnableResetOnStop)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetEnableResetOnStop<P0>(&self, newval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetEnableResetOnStop)(::windows::core::Interface::as_raw(self), newval.into_param().abi()).ok()
    }
    pub unsafe fn Run(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Run)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Pause(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Pause)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Stop)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn get_CanStep<P0>(&self, fbackwards: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.get_CanStep)(::windows::core::Interface::as_raw(self), fbackwards.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Step(&self, lstep: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.Step)(::windows::core::Interface::as_raw(self), lstep).ok()
    }
    pub unsafe fn SetRate(&self, plrate: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetRate)(::windows::core::Interface::as_raw(self), plrate).ok()
    }
    pub unsafe fn Rate(&self) -> ::windows::core::Result<f64> {
        let mut result__ = ::windows::core::zeroed::<f64>();
        (::windows::core::Interface::vtable(self).base__.base__.Rate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentPosition(&self, lposition: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetCurrentPosition)(::windows::core::Interface::as_raw(self), lposition).ok()
    }
    pub unsafe fn CurrentPosition(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.CurrentPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPositionMode(&self, lpositionmode: PositionModeList) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetPositionMode)(::windows::core::Interface::as_raw(self), lpositionmode).ok()
    }
    pub unsafe fn PositionMode(&self) -> ::windows::core::Result<PositionModeList> {
        let mut result__ = ::windows::core::zeroed::<PositionModeList>();
        (::windows::core::Interface::vtable(self).base__.base__.PositionMode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Length(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.Length)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn OnDVDEvent(&self, levent: i32, lparam1: isize, lparam2: isize) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.OnDVDEvent)(::windows::core::Interface::as_raw(self), levent, lparam1, lparam2).ok()
    }
    pub unsafe fn PlayTitle(&self, ltitle: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PlayTitle)(::windows::core::Interface::as_raw(self), ltitle).ok()
    }
    pub unsafe fn PlayChapterInTitle(&self, ltitle: i32, lchapter: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PlayChapterInTitle)(::windows::core::Interface::as_raw(self), ltitle, lchapter).ok()
    }
    pub unsafe fn PlayChapter(&self, lchapter: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PlayChapter)(::windows::core::Interface::as_raw(self), lchapter).ok()
    }
    pub unsafe fn PlayChaptersAutoStop(&self, ltitle: i32, lstrchapter: i32, lchaptercount: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PlayChaptersAutoStop)(::windows::core::Interface::as_raw(self), ltitle, lstrchapter, lchaptercount).ok()
    }
    pub unsafe fn PlayAtTime<P0>(&self, strtime: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.PlayAtTime)(::windows::core::Interface::as_raw(self), strtime.into_param().abi()).ok()
    }
    pub unsafe fn PlayAtTimeInTitle<P0>(&self, ltitle: i32, strtime: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.PlayAtTimeInTitle)(::windows::core::Interface::as_raw(self), ltitle, strtime.into_param().abi()).ok()
    }
    pub unsafe fn PlayPeriodInTitleAutoStop<P0, P1>(&self, ltitle: i32, strstarttime: P0, strendtime: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
        P1: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.PlayPeriodInTitleAutoStop)(::windows::core::Interface::as_raw(self), ltitle, strstarttime.into_param().abi(), strendtime.into_param().abi()).ok()
    }
    pub unsafe fn ReplayChapter(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.ReplayChapter)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PlayPrevChapter(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PlayPrevChapter)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PlayNextChapter(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.PlayNextChapter)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn StillOff(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.StillOff)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn get_AudioLanguage<P0>(&self, lstream: i32, fformat: P0) -> ::windows::core::Result<::windows::core::BSTR>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.get_AudioLanguage)(::windows::core::Interface::as_raw(self), lstream, fformat.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn ShowMenu(&self, menuid: DVDMenuIDConstants) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.ShowMenu)(::windows::core::Interface::as_raw(self), menuid).ok()
    }
    pub unsafe fn Resume(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Resume)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ReturnFromSubmenu(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.ReturnFromSubmenu)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ButtonsAvailable(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.ButtonsAvailable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentButton(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.CurrentButton)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SelectAndActivateButton(&self, lbutton: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SelectAndActivateButton)(::windows::core::Interface::as_raw(self), lbutton).ok()
    }
    pub unsafe fn ActivateButton(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.ActivateButton)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SelectRightButton(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SelectRightButton)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SelectLeftButton(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SelectLeftButton)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SelectLowerButton(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SelectLowerButton)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SelectUpperButton(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SelectUpperButton)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ActivateAtPosition(&self, xpos: i32, ypos: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.ActivateAtPosition)(::windows::core::Interface::as_raw(self), xpos, ypos).ok()
    }
    pub unsafe fn SelectAtPosition(&self, xpos: i32, ypos: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SelectAtPosition)(::windows::core::Interface::as_raw(self), xpos, ypos).ok()
    }
    pub unsafe fn get_ButtonAtPosition(&self, xpos: i32, ypos: i32) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.get_ButtonAtPosition)(::windows::core::Interface::as_raw(self), xpos, ypos, &mut result__).from_abi(result__)
    }
    pub unsafe fn get_NumberOfChapters(&self, ltitle: i32) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.get_NumberOfChapters)(::windows::core::Interface::as_raw(self), ltitle, &mut result__).from_abi(result__)
    }
    pub unsafe fn TotalTitleTime(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.TotalTitleTime)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn TitlesAvailable(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.TitlesAvailable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn VolumesAvailable(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.VolumesAvailable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentVolume(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.CurrentVolume)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentDiscSide(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.CurrentDiscSide)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentDomain(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.CurrentDomain)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentChapter(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.CurrentChapter)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentTitle(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.CurrentTitle)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentTime(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.CurrentTime)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DVDTimeCode2bstr(&self, timecode: i32) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.DVDTimeCode2bstr)(::windows::core::Interface::as_raw(self), timecode, &mut result__).from_abi(result__)
    }
    pub unsafe fn DVDDirectory(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.DVDDirectory)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDVDDirectory<P0>(&self, newval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetDVDDirectory)(::windows::core::Interface::as_raw(self), newval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSubpictureStreamEnabled(&self, lstream: i32) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.IsSubpictureStreamEnabled)(::windows::core::Interface::as_raw(self), lstream, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsAudioStreamEnabled(&self, lstream: i32) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.IsAudioStreamEnabled)(::windows::core::Interface::as_raw(self), lstream, &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentSubpictureStream(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.CurrentSubpictureStream)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentSubpictureStream(&self, newval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCurrentSubpictureStream)(::windows::core::Interface::as_raw(self), newval).ok()
    }
    pub unsafe fn get_SubpictureLanguage(&self, lstream: i32) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.get_SubpictureLanguage)(::windows::core::Interface::as_raw(self), lstream, &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentAudioStream(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.CurrentAudioStream)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentAudioStream(&self, newval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCurrentAudioStream)(::windows::core::Interface::as_raw(self), newval).ok()
    }
    pub unsafe fn AudioStreamsAvailable(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.AudioStreamsAvailable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AnglesAvailable(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.AnglesAvailable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentAngle(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.CurrentAngle)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentAngle(&self, newval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetCurrentAngle)(::windows::core::Interface::as_raw(self), newval).ok()
    }
    pub unsafe fn SubpictureStreamsAvailable(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.SubpictureStreamsAvailable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SubpictureOn(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.SubpictureOn)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetSubpictureOn<P0>(&self, newval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.SetSubpictureOn)(::windows::core::Interface::as_raw(self), newval.into_param().abi()).ok()
    }
    pub unsafe fn DVDUniqueID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.DVDUniqueID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AcceptParentalLevelChange<P0, P1, P2>(&self, faccept: P0, strusername: P1, strpassword: P2) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows::core::IntoParam<::windows::core::BSTR>,
        P2: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.AcceptParentalLevelChange)(::windows::core::Interface::as_raw(self), faccept.into_param().abi(), strusername.into_param().abi(), strpassword.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn NotifyParentalLevelChange<P0>(&self, newval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.NotifyParentalLevelChange)(::windows::core::Interface::as_raw(self), newval.into_param().abi()).ok()
    }
    pub unsafe fn SelectParentalCountry<P0, P1>(&self, lcountry: i32, strusername: P0, strpassword: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
        P1: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SelectParentalCountry)(::windows::core::Interface::as_raw(self), lcountry, strusername.into_param().abi(), strpassword.into_param().abi()).ok()
    }
    pub unsafe fn SelectParentalLevel<P0, P1>(&self, lparentallevel: i32, strusername: P0, strpassword: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
        P1: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SelectParentalLevel)(::windows::core::Interface::as_raw(self), lparentallevel, strusername.into_param().abi(), strpassword.into_param().abi()).ok()
    }
    pub unsafe fn get_TitleParentalLevels(&self, ltitle: i32) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.get_TitleParentalLevels)(::windows::core::Interface::as_raw(self), ltitle, &mut result__).from_abi(result__)
    }
    pub unsafe fn PlayerParentalCountry(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.PlayerParentalCountry)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn PlayerParentalLevel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.PlayerParentalLevel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Eject(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.Eject)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UOPValid(&self, luop: i32) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.UOPValid)(::windows::core::Interface::as_raw(self), luop, &mut result__).from_abi(result__)
    }
    pub unsafe fn get_SPRM(&self, lindex: i32) -> ::windows::core::Result<i16> {
        let mut result__ = ::windows::core::zeroed::<i16>();
        (::windows::core::Interface::vtable(self).base__.get_SPRM)(::windows::core::Interface::as_raw(self), lindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn get_GPRM(&self, lindex: i32) -> ::windows::core::Result<i16> {
        let mut result__ = ::windows::core::zeroed::<i16>();
        (::windows::core::Interface::vtable(self).base__.get_GPRM)(::windows::core::Interface::as_raw(self), lindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn put_GPRM(&self, lindex: i32, svalue: i16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.put_GPRM)(::windows::core::Interface::as_raw(self), lindex, svalue).ok()
    }
    pub unsafe fn get_DVDTextStringType(&self, llangindex: i32, lstringindex: i32) -> ::windows::core::Result<DVDTextStringType> {
        let mut result__ = ::windows::core::zeroed::<DVDTextStringType>();
        (::windows::core::Interface::vtable(self).base__.get_DVDTextStringType)(::windows::core::Interface::as_raw(self), llangindex, lstringindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn get_DVDTextString(&self, llangindex: i32, lstringindex: i32) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.get_DVDTextString)(::windows::core::Interface::as_raw(self), llangindex, lstringindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn get_DVDTextNumberOfStrings(&self, llangindex: i32) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.get_DVDTextNumberOfStrings)(::windows::core::Interface::as_raw(self), llangindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn DVDTextNumberOfLanguages(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.DVDTextNumberOfLanguages)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn get_DVDTextLanguageLCID(&self, llangindex: i32) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.get_DVDTextLanguageLCID)(::windows::core::Interface::as_raw(self), llangindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn RegionChange(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.RegionChange)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DVDAdm(&self) -> ::windows::core::Result<super::super::super::System::Com::IDispatch> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IDispatch>();
        (::windows::core::Interface::vtable(self).base__.DVDAdm)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DeleteBookmark(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.DeleteBookmark)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RestoreBookmark(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.RestoreBookmark)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SaveBookmark(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SaveBookmark)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SelectDefaultAudioLanguage(&self, lang: i32, ext: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SelectDefaultAudioLanguage)(::windows::core::Interface::as_raw(self), lang, ext).ok()
    }
    pub unsafe fn SelectDefaultSubpictureLanguage(&self, lang: i32, ext: DVDSPExt) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SelectDefaultSubpictureLanguage)(::windows::core::Interface::as_raw(self), lang, ext).ok()
    }
    pub unsafe fn PreferredSubpictureStream(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.PreferredSubpictureStream)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultMenuLanguage(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.DefaultMenuLanguage)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDefaultMenuLanguage(&self, lang: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetDefaultMenuLanguage)(::windows::core::Interface::as_raw(self), lang).ok()
    }
    pub unsafe fn DefaultSubpictureLanguage(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.DefaultSubpictureLanguage)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultAudioLanguage(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.DefaultAudioLanguage)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultSubpictureLanguageExt(&self) -> ::windows::core::Result<DVDSPExt> {
        let mut result__ = ::windows::core::zeroed::<DVDSPExt>();
        (::windows::core::Interface::vtable(self).base__.DefaultSubpictureLanguageExt)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultAudioLanguageExt(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.DefaultAudioLanguageExt)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn get_LanguageFromLCID(&self, lcid: i32) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.get_LanguageFromLCID)(::windows::core::Interface::as_raw(self), lcid, &mut result__).from_abi(result__)
    }
    pub unsafe fn KaraokeAudioPresentationMode(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.KaraokeAudioPresentationMode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetKaraokeAudioPresentationMode(&self, newval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetKaraokeAudioPresentationMode)(::windows::core::Interface::as_raw(self), newval).ok()
    }
    pub unsafe fn get_KaraokeChannelContent(&self, lstream: i32, lchan: i32) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.get_KaraokeChannelContent)(::windows::core::Interface::as_raw(self), lstream, lchan, &mut result__).from_abi(result__)
    }
    pub unsafe fn get_KaraokeChannelAssignment(&self, lstream: i32) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.get_KaraokeChannelAssignment)(::windows::core::Interface::as_raw(self), lstream, &mut result__).from_abi(result__)
    }
    pub unsafe fn RestorePreferredSettings(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.RestorePreferredSettings)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn get_ButtonRect(&self, lbutton: i32) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.get_ButtonRect)(::windows::core::Interface::as_raw(self), lbutton, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DVDScreenInMouseCoordinates(&self) -> ::windows::core::Result<IMSVidRect> {
        let mut result__ = ::windows::core::zeroed::<IMSVidRect>();
        (::windows::core::Interface::vtable(self).base__.DVDScreenInMouseCoordinates)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDVDScreenInMouseCoordinates<P0>(&self, prect: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidRect>,
    {
        (::windows::core::Interface::vtable(self).base__.SetDVDScreenInMouseCoordinates)(::windows::core::Interface::as_raw(self), prect.into_param().abi()).ok()
    }
    pub unsafe fn get_Bookmark(&self, ppdata: *mut *mut u8, pdatalength: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).get_Bookmark)(::windows::core::Interface::as_raw(self), ppdata, pdatalength).ok()
    }
    pub unsafe fn put_Bookmark(&self, pdata: *const u8, dwdatalength: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).put_Bookmark)(::windows::core::Interface::as_raw(self), pdata, dwdatalength).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidWebDVD2, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidInputDevice, IMSVidPlayback, IMSVidWebDVD);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidWebDVD2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidWebDVD2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidWebDVD2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidWebDVD2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidWebDVD2 {
    type Vtable = IMSVidWebDVD2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidWebDVD2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidWebDVD2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x7027212f_ee9a_4a7c_8b67_f023714cdaff);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidWebDVD2_Vtbl {
    pub base__: IMSVidWebDVD_Vtbl,
    pub get_Bookmark: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppdata: *mut *mut u8, pdatalength: *mut u32) -> ::windows::core::HRESULT,
    pub put_Bookmark: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdata: *const u8, dwdatalength: u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidWebDVDAdm(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidWebDVDAdm {
    pub unsafe fn ChangePassword<P0, P1, P2>(&self, strusername: P0, strold: P1, strnew: P2) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
        P1: ::windows::core::IntoParam<::windows::core::BSTR>,
        P2: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).ChangePassword)(::windows::core::Interface::as_raw(self), strusername.into_param().abi(), strold.into_param().abi(), strnew.into_param().abi()).ok()
    }
    pub unsafe fn SaveParentalLevel<P0, P1>(&self, level: i32, strusername: P0, strpassword: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
        P1: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SaveParentalLevel)(::windows::core::Interface::as_raw(self), level, strusername.into_param().abi(), strpassword.into_param().abi()).ok()
    }
    pub unsafe fn SaveParentalCountry<P0, P1>(&self, country: i32, strusername: P0, strpassword: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
        P1: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SaveParentalCountry)(::windows::core::Interface::as_raw(self), country, strusername.into_param().abi(), strpassword.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ConfirmPassword<P0, P1>(&self, strusername: P0, strpassword: P1) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
        P1: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).ConfirmPassword)(::windows::core::Interface::as_raw(self), strusername.into_param().abi(), strpassword.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetParentalLevel(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).GetParentalLevel)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetParentalCountry(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).GetParentalCountry)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultAudioLCID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).DefaultAudioLCID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDefaultAudioLCID(&self, newval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetDefaultAudioLCID)(::windows::core::Interface::as_raw(self), newval).ok()
    }
    pub unsafe fn DefaultSubpictureLCID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).DefaultSubpictureLCID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDefaultSubpictureLCID(&self, newval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetDefaultSubpictureLCID)(::windows::core::Interface::as_raw(self), newval).ok()
    }
    pub unsafe fn DefaultMenuLCID(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).DefaultMenuLCID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDefaultMenuLCID(&self, newval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetDefaultMenuLCID)(::windows::core::Interface::as_raw(self), newval).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn BookmarkOnStop(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).BookmarkOnStop)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBookmarkOnStop<P0>(&self, newval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetBookmarkOnStop)(::windows::core::Interface::as_raw(self), newval.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidWebDVDAdm, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidWebDVDAdm {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidWebDVDAdm {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidWebDVDAdm {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidWebDVDAdm").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidWebDVDAdm {
    type Vtable = IMSVidWebDVDAdm_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidWebDVDAdm {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidWebDVDAdm {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb8be681a_eb2c_47f0_b415_94d5452f0e05);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidWebDVDAdm_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub ChangePassword: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, strusername: ::std::mem::MaybeUninit<::windows::core::BSTR>, strold: ::std::mem::MaybeUninit<::windows::core::BSTR>, strnew: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SaveParentalLevel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, level: i32, strusername: ::std::mem::MaybeUninit<::windows::core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SaveParentalCountry: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, country: i32, strusername: ::std::mem::MaybeUninit<::windows::core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub ConfirmPassword: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, strusername: ::std::mem::MaybeUninit<::windows::core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows::core::BSTR>, pval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ConfirmPassword: usize,
    pub GetParentalLevel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, llevel: *mut i32) -> ::windows::core::HRESULT,
    pub GetParentalCountry: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lcountry: *mut i32) -> ::windows::core::HRESULT,
    pub DefaultAudioLCID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub SetDefaultAudioLCID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows::core::HRESULT,
    pub DefaultSubpictureLCID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub SetDefaultSubpictureLCID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows::core::HRESULT,
    pub DefaultMenuLCID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows::core::HRESULT,
    pub SetDefaultMenuLCID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub BookmarkOnStop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    BookmarkOnStop: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetBookmarkOnStop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetBookmarkOnStop: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidWebDVDEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidWebDVDEvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EndOfMedia<P0>(&self, lpd: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidPlayback>,
    {
        (::windows::core::Interface::vtable(self).base__.EndOfMedia)(::windows::core::Interface::as_raw(self), lpd.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn DVDNotify(&self, leventcode: i32, lparam1: super::super::super::System::Com::VARIANT, lparam2: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DVDNotify)(::windows::core::Interface::as_raw(self), leventcode, ::core::mem::transmute(lparam1), ::core::mem::transmute(lparam2)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PlayForwards<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).PlayForwards)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PlayBackwards<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).PlayBackwards)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ShowMenu<P0>(&self, menuid: DVDMenuIDConstants, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).ShowMenu)(::windows::core::Interface::as_raw(self), menuid, benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Resume<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).Resume)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SelectOrActivateButton<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).SelectOrActivateButton)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn StillOff<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).StillOff)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PauseOn<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).PauseOn)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ChangeCurrentAudioStream<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).ChangeCurrentAudioStream)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ChangeCurrentSubpictureStream<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).ChangeCurrentSubpictureStream)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ChangeCurrentAngle<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).ChangeCurrentAngle)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PlayAtTimeInTitle<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).PlayAtTimeInTitle)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PlayAtTime<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).PlayAtTime)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PlayChapterInTitle<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).PlayChapterInTitle)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PlayChapter<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).PlayChapter)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ReplayChapter<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).ReplayChapter)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PlayNextChapter<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).PlayNextChapter)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Stop<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).Stop)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ReturnFromSubmenu<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).ReturnFromSubmenu)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PlayTitle<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).PlayTitle)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PlayPrevChapter<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).PlayPrevChapter)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ChangeKaraokePresMode<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).ChangeKaraokePresMode)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ChangeVideoPresMode<P0>(&self, benabled: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).ChangeVideoPresMode)(::windows::core::Interface::as_raw(self), benabled.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidWebDVDEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidInputDeviceEvent, IMSVidPlaybackEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidWebDVDEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidWebDVDEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidWebDVDEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidWebDVDEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidWebDVDEvent {
    type Vtable = IMSVidWebDVDEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidWebDVDEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidWebDVDEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb4f7a674_9b83_49cb_a357_c63b871be958);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidWebDVDEvent_Vtbl {
    pub base__: IMSVidPlaybackEvent_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub DVDNotify: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, leventcode: i32, lparam1: super::super::super::System::Com::VARIANT, lparam2: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    DVDNotify: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub PlayForwards: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    PlayForwards: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub PlayBackwards: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    PlayBackwards: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub ShowMenu: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, menuid: DVDMenuIDConstants, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ShowMenu: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub Resume: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Resume: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SelectOrActivateButton: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SelectOrActivateButton: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub StillOff: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    StillOff: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub PauseOn: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    PauseOn: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub ChangeCurrentAudioStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ChangeCurrentAudioStream: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub ChangeCurrentSubpictureStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ChangeCurrentSubpictureStream: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub ChangeCurrentAngle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ChangeCurrentAngle: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub PlayAtTimeInTitle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    PlayAtTimeInTitle: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub PlayAtTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    PlayAtTime: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub PlayChapterInTitle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    PlayChapterInTitle: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub PlayChapter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    PlayChapter: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub ReplayChapter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ReplayChapter: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub PlayNextChapter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    PlayNextChapter: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub Stop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Stop: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub ReturnFromSubmenu: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ReturnFromSubmenu: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub PlayTitle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    PlayTitle: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub PlayPrevChapter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    PlayPrevChapter: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub ChangeKaraokePresMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ChangeKaraokePresMode: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub ChangeVideoPresMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ChangeVideoPresMode: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidXDS(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidXDS {
    pub unsafe fn Name(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Name)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Status(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.Status)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPower<P0>(&self, power: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetPower)(::windows::core::Interface::as_raw(self), power.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Power(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.Power)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Category(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ClassID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _Category(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._Category)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn _ClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__._ClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn IsEqualDevice<P0>(&self, device: P0) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).base__.base__.IsEqualDevice)(::windows::core::Interface::as_raw(self), device.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn ChannelChangeInterface(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).ChannelChangeInterface)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidXDS, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDevice, IMSVidFeature);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidXDS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidXDS {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidXDS {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidXDS").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidXDS {
    type Vtable = IMSVidXDS_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidXDS {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidXDS {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x11ebc158_e712_4d1f_8bb3_01ed5274c4ce);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidXDS_Vtbl {
    pub base__: IMSVidFeature_Vtbl,
    pub ChannelChangeInterface: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkcc: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IMSVidXDSEvent(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IMSVidXDSEvent {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn StateChange<P0>(&self, lpd: P0, oldstate: i32, newstate: i32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMSVidDevice>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.StateChange)(::windows::core::Interface::as_raw(self), lpd.into_param().abi(), oldstate, newstate).ok()
    }
    pub unsafe fn RatingChange(&self, prevratingsystem: EnTvRat_System, prevlevel: EnTvRat_GenericLevel, prevattributes: BfEnTvRat_GenericAttributes, newratingsystem: EnTvRat_System, newlevel: EnTvRat_GenericLevel, newattributes: BfEnTvRat_GenericAttributes) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RatingChange)(::windows::core::Interface::as_raw(self), prevratingsystem, prevlevel, prevattributes, newratingsystem, newlevel, newattributes).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IMSVidXDSEvent, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch, IMSVidDeviceEvent, IMSVidFeatureEvent);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IMSVidXDSEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IMSVidXDSEvent {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IMSVidXDSEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMSVidXDSEvent").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IMSVidXDSEvent {
    type Vtable = IMSVidXDSEvent_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IMSVidXDSEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IMSVidXDSEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6db2317d_3b23_41ec_ba4b_701f407eaf3a);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IMSVidXDSEvent_Vtbl {
    pub base__: IMSVidFeatureEvent_Vtbl,
    pub RatingChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prevratingsystem: EnTvRat_System, prevlevel: EnTvRat_GenericLevel, prevattributes: BfEnTvRat_GenericAttributes, newratingsystem: EnTvRat_System, newlevel: EnTvRat_GenericLevel, newattributes: BfEnTvRat_GenericAttributes) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IMceBurnerControl(::windows::core::IUnknown);
impl IMceBurnerControl {
    pub unsafe fn GetBurnerNoDecryption(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetBurnerNoDecryption)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IMceBurnerControl, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IMceBurnerControl {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IMceBurnerControl {}
impl ::core::fmt::Debug for IMceBurnerControl {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMceBurnerControl").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IMceBurnerControl {
    type Vtable = IMceBurnerControl_Vtbl;
}
impl ::core::clone::Clone for IMceBurnerControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IMceBurnerControl {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5a86b91a_e71e_46c1_88a9_9bb338710552);
}
#[repr(C)]
#[doc(hidden)]
pub struct IMceBurnerControl_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetBurnerNoDecryption: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IMpeg2Data(::windows::core::IUnknown);
impl IMpeg2Data {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSection(&self, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, dwtimeout: u32) -> ::windows::core::Result<ISectionList> {
        let mut result__ = ::windows::core::zeroed::<ISectionList>();
        (::windows::core::Interface::vtable(self).GetSection)(::windows::core::Interface::as_raw(self), pid, tid, pfilter, dwtimeout, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetTable(&self, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, dwtimeout: u32) -> ::windows::core::Result<ISectionList> {
        let mut result__ = ::windows::core::zeroed::<ISectionList>();
        (::windows::core::Interface::vtable(self).GetTable)(::windows::core::Interface::as_raw(self), pid, tid, pfilter, dwtimeout, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetStreamOfSections<P0>(&self, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, hdatareadyevent: P0) -> ::windows::core::Result<IMpeg2Stream>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        let mut result__ = ::windows::core::zeroed::<IMpeg2Stream>();
        (::windows::core::Interface::vtable(self).GetStreamOfSections)(::windows::core::Interface::as_raw(self), pid, tid, pfilter, hdatareadyevent.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IMpeg2Data, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IMpeg2Data {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IMpeg2Data {}
impl ::core::fmt::Debug for IMpeg2Data {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMpeg2Data").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IMpeg2Data {
    type Vtable = IMpeg2Data_Vtbl;
}
impl ::core::clone::Clone for IMpeg2Data {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IMpeg2Data {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9b396d40_f380_4e3c_a514_1a82bf6ebfe6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IMpeg2Data_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub GetSection: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, dwtimeout: u32, ppsectionlist: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetSection: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, dwtimeout: u32, ppsectionlist: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetTable: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetStreamOfSections: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, hdatareadyevent: super::super::super::Foundation::HANDLE, ppmpegstream: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetStreamOfSections: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IMpeg2Stream(::windows::core::IUnknown);
impl IMpeg2Stream {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Initialize<P0, P1>(&self, requesttype: MPEG_REQUEST_TYPE, pmpeg2data: P0, pcontext: *const MPEG_CONTEXT, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, hdatareadyevent: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMpeg2Data>,
        P1: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), requesttype, pmpeg2data.into_param().abi(), pcontext, pid, tid, pfilter, hdatareadyevent.into_param().abi()).ok()
    }
    pub unsafe fn SupplyDataBuffer(&self, pstreambuffer: *const MPEG_STREAM_BUFFER) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SupplyDataBuffer)(::windows::core::Interface::as_raw(self), pstreambuffer).ok()
    }
}
::windows::imp::interface_hierarchy!(IMpeg2Stream, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IMpeg2Stream {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IMpeg2Stream {}
impl ::core::fmt::Debug for IMpeg2Stream {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMpeg2Stream").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IMpeg2Stream {
    type Vtable = IMpeg2Stream_Vtbl;
}
impl ::core::clone::Clone for IMpeg2Stream {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IMpeg2Stream {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x400cc286_32a0_4ce4_9041_39571125a635);
}
#[repr(C)]
#[doc(hidden)]
pub struct IMpeg2Stream_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, requesttype: MPEG_REQUEST_TYPE, pmpeg2data: *mut ::core::ffi::c_void, pcontext: *const MPEG_CONTEXT, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, hdatareadyevent: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Initialize: usize,
    pub SupplyDataBuffer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pstreambuffer: *const MPEG_STREAM_BUFFER) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IMpeg2TableFilter(::windows::core::IUnknown);
impl IMpeg2TableFilter {
    pub unsafe fn AddPID(&self, p: u16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AddPID)(::windows::core::Interface::as_raw(self), p).ok()
    }
    pub unsafe fn AddTable(&self, p: u16, t: u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AddTable)(::windows::core::Interface::as_raw(self), p, t).ok()
    }
    pub unsafe fn AddExtension(&self, p: u16, t: u8, e: u16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AddExtension)(::windows::core::Interface::as_raw(self), p, t, e).ok()
    }
    pub unsafe fn RemovePID(&self, p: u16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemovePID)(::windows::core::Interface::as_raw(self), p).ok()
    }
    pub unsafe fn RemoveTable(&self, p: u16, t: u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveTable)(::windows::core::Interface::as_raw(self), p, t).ok()
    }
    pub unsafe fn RemoveExtension(&self, p: u16, t: u8, e: u16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveExtension)(::windows::core::Interface::as_raw(self), p, t, e).ok()
    }
}
::windows::imp::interface_hierarchy!(IMpeg2TableFilter, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IMpeg2TableFilter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IMpeg2TableFilter {}
impl ::core::fmt::Debug for IMpeg2TableFilter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMpeg2TableFilter").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IMpeg2TableFilter {
    type Vtable = IMpeg2TableFilter_Vtbl;
}
impl ::core::clone::Clone for IMpeg2TableFilter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IMpeg2TableFilter {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xbdcdd913_9ecd_4fb2_81ae_adf747ea75a5);
}
#[repr(C)]
#[doc(hidden)]
pub struct IMpeg2TableFilter_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub AddPID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, p: u16) -> ::windows::core::HRESULT,
    pub AddTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, p: u16, t: u8) -> ::windows::core::HRESULT,
    pub AddExtension: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, p: u16, t: u8, e: u16) -> ::windows::core::HRESULT,
    pub RemovePID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, p: u16) -> ::windows::core::HRESULT,
    pub RemoveTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, p: u16, t: u8) -> ::windows::core::HRESULT,
    pub RemoveExtension: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, p: u16, t: u8, e: u16) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IPAT(::windows::core::IUnknown);
impl IPAT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetTransportStreamId(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetTransportStreamId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordProgramNumber(&self, dwindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordProgramNumber)(::windows::core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordProgramMapPid(&self, dwindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordProgramMapPid)(::windows::core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn FindRecordProgramMapPid(&self, wprogramnumber: u16) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).FindRecordProgramMapPid)(::windows::core::Interface::as_raw(self), wprogramnumber, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForNextTable<P0>(&self, hnexttableavailable: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForNextTable)(::windows::core::Interface::as_raw(self), hnexttableavailable.into_param().abi()).ok()
    }
    pub unsafe fn GetNextTable(&self) -> ::windows::core::Result<IPAT> {
        let mut result__ = ::windows::core::zeroed::<IPAT>();
        (::windows::core::Interface::vtable(self).GetNextTable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForWhenCurrent<P0>(&self, hnexttableiscurrent: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForWhenCurrent)(::windows::core::Interface::as_raw(self), hnexttableiscurrent.into_param().abi()).ok()
    }
    pub unsafe fn ConvertNextToCurrent(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ConvertNextToCurrent)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IPAT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IPAT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPAT {}
impl ::core::fmt::Debug for IPAT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPAT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IPAT {
    type Vtable = IPAT_Vtbl;
}
impl ::core::clone::Clone for IPAT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IPAT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6623b511_4b5f_43c3_9a01_e8ff84188060);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPAT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTransportStreamId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordProgramNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordProgramMapPid: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub FindRecordProgramMapPid: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, wprogramnumber: u16, pwval: *mut u16) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForNextTable: usize,
    pub GetNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pppat: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForWhenCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForWhenCurrent: usize,
    pub ConvertNextToCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IPBDAAttributesDescriptor(::windows::core::IUnknown);
impl IPBDAAttributesDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetAttributePayload(&self, ppbattributebuffer: *mut *mut u8, pdwattributelength: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetAttributePayload)(::windows::core::Interface::as_raw(self), ppbattributebuffer, pdwattributelength).ok()
    }
}
::windows::imp::interface_hierarchy!(IPBDAAttributesDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IPBDAAttributesDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPBDAAttributesDescriptor {}
impl ::core::fmt::Debug for IPBDAAttributesDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPBDAAttributesDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IPBDAAttributesDescriptor {
    type Vtable = IPBDAAttributesDescriptor_Vtbl;
}
impl ::core::clone::Clone for IPBDAAttributesDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IPBDAAttributesDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x313b3620_3263_45a6_9533_968befbeac03);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPBDAAttributesDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetAttributePayload: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppbattributebuffer: *mut *mut u8, pdwattributelength: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IPBDAEntitlementDescriptor(::windows::core::IUnknown);
impl IPBDAEntitlementDescriptor {
    pub unsafe fn GetTag(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTag)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLength(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetToken(&self, ppbtokenbuffer: *mut *mut u8, pdwtokenlength: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetToken)(::windows::core::Interface::as_raw(self), ppbtokenbuffer, pdwtokenlength).ok()
    }
}
::windows::imp::interface_hierarchy!(IPBDAEntitlementDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IPBDAEntitlementDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPBDAEntitlementDescriptor {}
impl ::core::fmt::Debug for IPBDAEntitlementDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPBDAEntitlementDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IPBDAEntitlementDescriptor {
    type Vtable = IPBDAEntitlementDescriptor_Vtbl;
}
impl ::core::clone::Clone for IPBDAEntitlementDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IPBDAEntitlementDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x22632497_0de3_4587_aadc_d8d99017e760);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPBDAEntitlementDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetToken: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppbtokenbuffer: *mut *mut u8, pdwtokenlength: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IPBDASiParser(::windows::core::IUnknown);
impl IPBDASiParser {
    pub unsafe fn Initialize<P0>(&self, punk: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::IUnknown>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), punk.into_param().abi()).ok()
    }
    pub unsafe fn GetEIT(&self, dwsize: u32, pbuffer: *const u8) -> ::windows::core::Result<IPBDA_EIT> {
        let mut result__ = ::windows::core::zeroed::<IPBDA_EIT>();
        (::windows::core::Interface::vtable(self).GetEIT)(::windows::core::Interface::as_raw(self), dwsize, pbuffer, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServices(&self, dwsize: u32, pbuffer: *const u8) -> ::windows::core::Result<IPBDA_Services> {
        let mut result__ = ::windows::core::zeroed::<IPBDA_Services>();
        (::windows::core::Interface::vtable(self).GetServices)(::windows::core::Interface::as_raw(self), dwsize, pbuffer, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IPBDASiParser, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IPBDASiParser {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPBDASiParser {}
impl ::core::fmt::Debug for IPBDASiParser {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPBDASiParser").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IPBDASiParser {
    type Vtable = IPBDASiParser_Vtbl;
}
impl ::core::clone::Clone for IPBDASiParser {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IPBDASiParser {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9de49a74_aba2_4a18_93e1_21f17f95c3c3);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPBDASiParser_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetEIT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwsize: u32, pbuffer: *const u8, ppeit: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetServices: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwsize: u32, pbuffer: *const u8, ppservices: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IPBDA_EIT(::windows::core::IUnknown);
impl IPBDA_EIT {
    pub unsafe fn Initialize(&self, size: u32, pbuffer: *const u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), size, pbuffer).ok()
    }
    pub unsafe fn GetTableId(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTableId)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetServiceIdx(&self) -> ::windows::core::Result<u64> {
        let mut result__ = ::windows::core::zeroed::<u64>();
        (::windows::core::Interface::vtable(self).GetServiceIdx)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordEventId(&self, dwrecordindex: u32) -> ::windows::core::Result<u64> {
        let mut result__ = ::windows::core::zeroed::<u64>();
        (::windows::core::Interface::vtable(self).GetRecordEventId)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordStartTime(&self, dwrecordindex: u32) -> ::windows::core::Result<MPEG_DATE_AND_TIME> {
        let mut result__ = ::windows::core::zeroed::<MPEG_DATE_AND_TIME>();
        (::windows::core::Interface::vtable(self).GetRecordStartTime)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDuration(&self, dwrecordindex: u32) -> ::windows::core::Result<MPEG_TIME> {
        let mut result__ = ::windows::core::zeroed::<MPEG_TIME>();
        (::windows::core::Interface::vtable(self).GetRecordDuration)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, pdwcookie, ::core::mem::transmute(ppdescriptor)).ok()
    }
}
::windows::imp::interface_hierarchy!(IPBDA_EIT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IPBDA_EIT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPBDA_EIT {}
impl ::core::fmt::Debug for IPBDA_EIT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPBDA_EIT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IPBDA_EIT {
    type Vtable = IPBDA_EIT_Vtbl;
}
impl ::core::clone::Clone for IPBDA_EIT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IPBDA_EIT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa35f2dea_098f_4ebd_984c_2bd4c3c8ce0a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPBDA_EIT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, size: u32, pbuffer: *const u8) -> ::windows::core::HRESULT,
    pub GetTableId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetServiceIdx: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plwval: *mut u64) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordEventId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, plwval: *mut u64) -> ::windows::core::HRESULT,
    pub GetRecordStartTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows::core::HRESULT,
    pub GetRecordDuration: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdval: *mut MPEG_TIME) -> ::windows::core::HRESULT,
    pub GetRecordCountOfDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IPBDA_Services(::windows::core::IUnknown);
impl IPBDA_Services {
    pub unsafe fn Initialize(&self, size: u32, pbuffer: *const u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), size, pbuffer).ok()
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordByIndex(&self, dwrecordindex: u32) -> ::windows::core::Result<u64> {
        let mut result__ = ::windows::core::zeroed::<u64>();
        (::windows::core::Interface::vtable(self).GetRecordByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IPBDA_Services, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IPBDA_Services {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPBDA_Services {}
impl ::core::fmt::Debug for IPBDA_Services {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPBDA_Services").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IPBDA_Services {
    type Vtable = IPBDA_Services_Vtbl;
}
impl ::core::clone::Clone for IPBDA_Services {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IPBDA_Services {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x944eab37_eed4_4850_afd2_77e7efeb4427);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPBDA_Services_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, size: u32, pbuffer: *const u8) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pul64serviceidx: *mut u64) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IPMT(::windows::core::IUnknown);
impl IPMT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetProgramNumber(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetProgramNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPcrPid(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetPcrPid)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfTableDescriptors(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfTableDescriptors)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByIndex(&self, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetTableDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByTag(&self, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableDescriptorByTag)(::windows::core::Interface::as_raw(self), btag, pdwcookie, ::core::mem::transmute(ppdescriptor)).ok()
    }
    pub unsafe fn GetCountOfRecords(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetCountOfRecords)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordStreamType(&self, dwrecordindex: u32) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRecordStreamType)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordElementaryPid(&self, dwrecordindex: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRecordElementaryPid)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordCountOfDescriptors(&self, dwrecordindex: u32) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetRecordCountOfDescriptors)(::windows::core::Interface::as_raw(self), dwrecordindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByIndex(&self, dwrecordindex: u32, dwdescindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwrecordindex, dwdescindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRecordDescriptorByTag(&self, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordDescriptorByTag)(::windows::core::Interface::as_raw(self), dwrecordindex, btag, pdwcookie, ::core::mem::transmute(ppdescriptor)).ok()
    }
    pub unsafe fn QueryServiceGatewayInfo(&self, ppdsmcclist: *mut *mut DSMCC_ELEMENT, puicount: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).QueryServiceGatewayInfo)(::windows::core::Interface::as_raw(self), ppdsmcclist, puicount).ok()
    }
    pub unsafe fn QueryMPEInfo(&self, ppmpelist: *mut *mut MPE_ELEMENT, puicount: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).QueryMPEInfo)(::windows::core::Interface::as_raw(self), ppmpelist, puicount).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForNextTable<P0>(&self, hnexttableavailable: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForNextTable)(::windows::core::Interface::as_raw(self), hnexttableavailable.into_param().abi()).ok()
    }
    pub unsafe fn GetNextTable(&self) -> ::windows::core::Result<IPMT> {
        let mut result__ = ::windows::core::zeroed::<IPMT>();
        (::windows::core::Interface::vtable(self).GetNextTable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForWhenCurrent<P0>(&self, hnexttableiscurrent: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForWhenCurrent)(::windows::core::Interface::as_raw(self), hnexttableiscurrent.into_param().abi()).ok()
    }
    pub unsafe fn ConvertNextToCurrent(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ConvertNextToCurrent)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IPMT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IPMT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPMT {}
impl ::core::fmt::Debug for IPMT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPMT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IPMT {
    type Vtable = IPMT_Vtbl;
}
impl ::core::clone::Clone for IPMT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IPMT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x01f3b398_9527_4736_94db_5195878e97a8);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPMT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetProgramNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetPcrPid: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppidval: *mut u16) -> ::windows::core::HRESULT,
    pub GetCountOfTableDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetCountOfRecords: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordStreamType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRecordElementaryPid: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, ppidval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRecordCountOfDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwdescindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetRecordDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub QueryServiceGatewayInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppdsmcclist: *mut *mut DSMCC_ELEMENT, puicount: *mut u32) -> ::windows::core::HRESULT,
    pub QueryMPEInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppmpelist: *mut *mut MPE_ELEMENT, puicount: *mut u32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForNextTable: usize,
    pub GetNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pppmt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForWhenCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForWhenCurrent: usize,
    pub ConvertNextToCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IPSITables(::windows::core::IUnknown);
impl IPSITables {
    pub unsafe fn GetTable(&self, dwtsid: u32, dwtid_pid: u32, dwhashedver: u32, dwpara4: u32) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).GetTable)(::windows::core::Interface::as_raw(self), dwtsid, dwtid_pid, dwhashedver, dwpara4, &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IPSITables, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IPSITables {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPSITables {}
impl ::core::fmt::Debug for IPSITables {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPSITables").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IPSITables {
    type Vtable = IPSITables_Vtbl;
}
impl ::core::clone::Clone for IPSITables {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IPSITables {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x919f24c5_7b14_42ac_a4b0_2ae08daf00ac);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPSITables_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwtsid: u32, dwtid_pid: u32, dwhashedver: u32, dwpara4: u32, ppiunknown: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IPTFilterLicenseRenewal(::windows::core::IUnknown);
impl IPTFilterLicenseRenewal {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RenewLicenses<P0, P1, P2>(&self, wszfilename: P0, wszexpiredkid: P1, dwcallersid: u32, bhighpriority: P2) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
        P1: ::windows::core::IntoParam<::windows::core::PCWSTR>,
        P2: ::windows::core::IntoParam<super::super::super::Foundation::BOOL>,
    {
        (::windows::core::Interface::vtable(self).RenewLicenses)(::windows::core::Interface::as_raw(self), wszfilename.into_param().abi(), wszexpiredkid.into_param().abi(), dwcallersid, bhighpriority.into_param().abi()).ok()
    }
    pub unsafe fn CancelLicenseRenewal(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CancelLicenseRenewal)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IPTFilterLicenseRenewal, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IPTFilterLicenseRenewal {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPTFilterLicenseRenewal {}
impl ::core::fmt::Debug for IPTFilterLicenseRenewal {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPTFilterLicenseRenewal").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IPTFilterLicenseRenewal {
    type Vtable = IPTFilterLicenseRenewal_Vtbl;
}
impl ::core::clone::Clone for IPTFilterLicenseRenewal {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IPTFilterLicenseRenewal {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x26d836a5_0c15_44c7_ac59_b0da8728f240);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPTFilterLicenseRenewal_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub RenewLicenses: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, wszfilename: ::windows::core::PCWSTR, wszexpiredkid: ::windows::core::PCWSTR, dwcallersid: u32, bhighpriority: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RenewLicenses: usize,
    pub CancelLicenseRenewal: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IPersistTuneXml(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IPersistTuneXml {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetClassID(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.GetClassID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn InitNew(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).InitNew)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Load(&self, varvalue: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Load)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(varvalue)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Save(&self) -> ::windows::core::Result<super::super::super::System::Com::VARIANT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::VARIANT>();
        (::windows::core::Interface::vtable(self).Save)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IPersistTuneXml, ::windows::core::IUnknown, super::super::super::System::Com::IPersist);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IPersistTuneXml {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IPersistTuneXml {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IPersistTuneXml {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPersistTuneXml").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IPersistTuneXml {
    type Vtable = IPersistTuneXml_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IPersistTuneXml {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IPersistTuneXml {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0754cd31_8d15_47a9_8215_d20064157244);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IPersistTuneXml_Vtbl {
    pub base__: super::super::super::System::Com::IPersist_Vtbl,
    pub InitNew: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Load: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, varvalue: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Load: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Save: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pvarfragment: *mut super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Save: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IPersistTuneXmlUtility(::windows::core::IUnknown);
impl IPersistTuneXmlUtility {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Deserialize(&self, varvalue: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).Deserialize)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(varvalue), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IPersistTuneXmlUtility, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IPersistTuneXmlUtility {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPersistTuneXmlUtility {}
impl ::core::fmt::Debug for IPersistTuneXmlUtility {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPersistTuneXmlUtility").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IPersistTuneXmlUtility {
    type Vtable = IPersistTuneXmlUtility_Vtbl;
}
impl ::core::clone::Clone for IPersistTuneXmlUtility {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IPersistTuneXmlUtility {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x990237ae_ac11_4614_be8f_dd217a4cb4cb);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPersistTuneXmlUtility_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Deserialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, varvalue: super::super::super::System::Com::VARIANT, ppobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Deserialize: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IPersistTuneXmlUtility2(::windows::core::IUnknown);
impl IPersistTuneXmlUtility2 {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Deserialize(&self, varvalue: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).base__.Deserialize)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(varvalue), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Serialize<P0>(&self, pitunerequest: P0) -> ::windows::core::Result<::windows::core::BSTR>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).Serialize)(::windows::core::Interface::as_raw(self), pitunerequest.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IPersistTuneXmlUtility2, ::windows::core::IUnknown, IPersistTuneXmlUtility);
impl ::core::cmp::PartialEq for IPersistTuneXmlUtility2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPersistTuneXmlUtility2 {}
impl ::core::fmt::Debug for IPersistTuneXmlUtility2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPersistTuneXmlUtility2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IPersistTuneXmlUtility2 {
    type Vtable = IPersistTuneXmlUtility2_Vtbl;
}
impl ::core::clone::Clone for IPersistTuneXmlUtility2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IPersistTuneXmlUtility2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x992e165f_ea24_4b2f_9a1d_009d92120451);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPersistTuneXmlUtility2_Vtbl {
    pub base__: IPersistTuneXmlUtility_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Serialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pitunerequest: *mut ::core::ffi::c_void, pstring: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Serialize: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IRegisterTuner(::windows::core::IUnknown);
impl IRegisterTuner {
    pub unsafe fn Register<P0, P1>(&self, ptuner: P0, pgraph: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuner>,
        P1: ::windows::core::IntoParam<super::IGraphBuilder>,
    {
        (::windows::core::Interface::vtable(self).Register)(::windows::core::Interface::as_raw(self), ptuner.into_param().abi(), pgraph.into_param().abi()).ok()
    }
    pub unsafe fn Unregister(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Unregister)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IRegisterTuner, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IRegisterTuner {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IRegisterTuner {}
impl ::core::fmt::Debug for IRegisterTuner {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IRegisterTuner").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IRegisterTuner {
    type Vtable = IRegisterTuner_Vtbl;
}
impl ::core::clone::Clone for IRegisterTuner {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IRegisterTuner {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x359b3901_572c_4854_bb49_cdef66606a25);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRegisterTuner_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Register: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ptuner: *mut ::core::ffi::c_void, pgraph: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Unregister: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ISBE2Crossbar(::windows::core::IUnknown);
impl ISBE2Crossbar {
    pub unsafe fn EnableDefaultMode(&self, defaultflags: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).EnableDefaultMode)(::windows::core::Interface::as_raw(self), defaultflags).ok()
    }
    pub unsafe fn GetInitialProfile(&self) -> ::windows::core::Result<ISBE2MediaTypeProfile> {
        let mut result__ = ::windows::core::zeroed::<ISBE2MediaTypeProfile>();
        (::windows::core::Interface::vtable(self).GetInitialProfile)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOutputProfile<P0>(&self, pprofile: P0, pcoutputpins: *mut u32, ppoutputpins: *mut ::core::option::Option<super::IPin>) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISBE2MediaTypeProfile>,
    {
        (::windows::core::Interface::vtable(self).SetOutputProfile)(::windows::core::Interface::as_raw(self), pprofile.into_param().abi(), pcoutputpins, ::core::mem::transmute(ppoutputpins)).ok()
    }
    pub unsafe fn EnumStreams(&self) -> ::windows::core::Result<ISBE2EnumStream> {
        let mut result__ = ::windows::core::zeroed::<ISBE2EnumStream>();
        (::windows::core::Interface::vtable(self).EnumStreams)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(ISBE2Crossbar, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ISBE2Crossbar {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISBE2Crossbar {}
impl ::core::fmt::Debug for ISBE2Crossbar {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISBE2Crossbar").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ISBE2Crossbar {
    type Vtable = ISBE2Crossbar_Vtbl;
}
impl ::core::clone::Clone for ISBE2Crossbar {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ISBE2Crossbar {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x547b6d26_3226_487e_8253_8aa168749434);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISBE2Crossbar_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub EnableDefaultMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, defaultflags: u32) -> ::windows::core::HRESULT,
    pub GetInitialProfile: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppprofile: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub SetOutputProfile: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pprofile: *mut ::core::ffi::c_void, pcoutputpins: *mut u32, ppoutputpins: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub EnumStreams: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppstreams: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ISBE2EnumStream(::windows::core::IUnknown);
impl ISBE2EnumStream {
    pub unsafe fn Next(&self, pstreamdesc: &mut [SBE2_STREAM_DESC], pcreceived: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Next)(::windows::core::Interface::as_raw(self), pstreamdesc.len() as _, ::core::mem::transmute(pstreamdesc.as_ptr()), pcreceived).ok()
    }
    pub unsafe fn Skip(&self, crecords: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Skip)(::windows::core::Interface::as_raw(self), crecords).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Reset)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ISBE2EnumStream> {
        let mut result__ = ::windows::core::zeroed::<ISBE2EnumStream>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(ISBE2EnumStream, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ISBE2EnumStream {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISBE2EnumStream {}
impl ::core::fmt::Debug for ISBE2EnumStream {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISBE2EnumStream").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ISBE2EnumStream {
    type Vtable = ISBE2EnumStream_Vtbl;
}
impl ::core::clone::Clone for ISBE2EnumStream {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ISBE2EnumStream {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf7611092_9fbc_46ec_a7c7_548ea78b71a4);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISBE2EnumStream_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, crequest: u32, pstreamdesc: *mut SBE2_STREAM_DESC, pcreceived: *mut u32) -> ::windows::core::HRESULT,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, crecords: u32) -> ::windows::core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppienumstream: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ISBE2FileScan(::windows::core::IUnknown);
impl ISBE2FileScan {
    pub unsafe fn RepairFile<P0>(&self, filename: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        (::windows::core::Interface::vtable(self).RepairFile)(::windows::core::Interface::as_raw(self), filename.into_param().abi()).ok()
    }
}
::windows::imp::interface_hierarchy!(ISBE2FileScan, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ISBE2FileScan {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISBE2FileScan {}
impl ::core::fmt::Debug for ISBE2FileScan {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISBE2FileScan").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ISBE2FileScan {
    type Vtable = ISBE2FileScan_Vtbl;
}
impl ::core::clone::Clone for ISBE2FileScan {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ISBE2FileScan {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3e2bf5a5_4f96_4899_a1a3_75e8be9a5ac0);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISBE2FileScan_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub RepairFile: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, filename: ::windows::core::PCWSTR) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ISBE2GlobalEvent(::windows::core::IUnknown);
impl ISBE2GlobalEvent {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetEvent(&self, idevt: *const ::windows::core::GUID, param1: u32, param2: u32, param3: u32, param4: u32, pspanning: *mut super::super::super::Foundation::BOOL, pcb: *mut u32, pb: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetEvent)(::windows::core::Interface::as_raw(self), idevt, param1, param2, param3, param4, pspanning, pcb, pb).ok()
    }
}
::windows::imp::interface_hierarchy!(ISBE2GlobalEvent, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ISBE2GlobalEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISBE2GlobalEvent {}
impl ::core::fmt::Debug for ISBE2GlobalEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISBE2GlobalEvent").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ISBE2GlobalEvent {
    type Vtable = ISBE2GlobalEvent_Vtbl;
}
impl ::core::clone::Clone for ISBE2GlobalEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ISBE2GlobalEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xcaede759_b6b1_11db_a578_0018f3fa24c6);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISBE2GlobalEvent_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub GetEvent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, idevt: *const ::windows::core::GUID, param1: u32, param2: u32, param3: u32, param4: u32, pspanning: *mut super::super::super::Foundation::BOOL, pcb: *mut u32, pb: *mut u8) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetEvent: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ISBE2GlobalEvent2(::windows::core::IUnknown);
impl ISBE2GlobalEvent2 {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetEvent(&self, idevt: *const ::windows::core::GUID, param1: u32, param2: u32, param3: u32, param4: u32, pspanning: *mut super::super::super::Foundation::BOOL, pcb: *mut u32, pb: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.GetEvent)(::windows::core::Interface::as_raw(self), idevt, param1, param2, param3, param4, pspanning, pcb, pb).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetEventEx(&self, idevt: *const ::windows::core::GUID, param1: u32, param2: u32, param3: u32, param4: u32, pspanning: *mut super::super::super::Foundation::BOOL, pcb: *mut u32, pb: *mut u8, pstreamtime: *mut i64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetEventEx)(::windows::core::Interface::as_raw(self), idevt, param1, param2, param3, param4, pspanning, pcb, pb, pstreamtime).ok()
    }
}
::windows::imp::interface_hierarchy!(ISBE2GlobalEvent2, ::windows::core::IUnknown, ISBE2GlobalEvent);
impl ::core::cmp::PartialEq for ISBE2GlobalEvent2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISBE2GlobalEvent2 {}
impl ::core::fmt::Debug for ISBE2GlobalEvent2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISBE2GlobalEvent2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ISBE2GlobalEvent2 {
    type Vtable = ISBE2GlobalEvent2_Vtbl;
}
impl ::core::clone::Clone for ISBE2GlobalEvent2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ISBE2GlobalEvent2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6d8309bf_00fe_4506_8b03_f8c65b5c9b39);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISBE2GlobalEvent2_Vtbl {
    pub base__: ISBE2GlobalEvent_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub GetEventEx: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, idevt: *const ::windows::core::GUID, param1: u32, param2: u32, param3: u32, param4: u32, pspanning: *mut super::super::super::Foundation::BOOL, pcb: *mut u32, pb: *mut u8, pstreamtime: *mut i64) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetEventEx: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ISBE2MediaTypeProfile(::windows::core::IUnknown);
impl ISBE2MediaTypeProfile {
    pub unsafe fn GetStreamCount(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetStreamCount)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub unsafe fn GetStream(&self, index: u32) -> ::windows::core::Result<*mut super::super::MediaFoundation::AM_MEDIA_TYPE> {
        let mut result__ = ::windows::core::zeroed::<*mut super::super::MediaFoundation::AM_MEDIA_TYPE>();
        (::windows::core::Interface::vtable(self).GetStream)(::windows::core::Interface::as_raw(self), index, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub unsafe fn AddStream(&self, pmediatype: *const super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AddStream)(::windows::core::Interface::as_raw(self), pmediatype).ok()
    }
    pub unsafe fn DeleteStream(&self, index: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DeleteStream)(::windows::core::Interface::as_raw(self), index).ok()
    }
}
::windows::imp::interface_hierarchy!(ISBE2MediaTypeProfile, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ISBE2MediaTypeProfile {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISBE2MediaTypeProfile {}
impl ::core::fmt::Debug for ISBE2MediaTypeProfile {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISBE2MediaTypeProfile").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ISBE2MediaTypeProfile {
    type Vtable = ISBE2MediaTypeProfile_Vtbl;
}
impl ::core::clone::Clone for ISBE2MediaTypeProfile {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ISBE2MediaTypeProfile {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf238267d_4671_40d7_997e_25dc32cfed2a);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISBE2MediaTypeProfile_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetStreamCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcount: *mut u32) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub GetStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, index: u32, ppmediatype: *mut *mut super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation")))]
    GetStream: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
    pub AddStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmediatype: *const super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation")))]
    AddStream: usize,
    pub DeleteStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ISBE2SpanningEvent(::windows::core::IUnknown);
impl ISBE2SpanningEvent {
    pub unsafe fn GetEvent(&self, idevt: *const ::windows::core::GUID, streamid: u32, pcb: *mut u32, pb: *mut u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetEvent)(::windows::core::Interface::as_raw(self), idevt, streamid, pcb, pb).ok()
    }
}
::windows::imp::interface_hierarchy!(ISBE2SpanningEvent, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ISBE2SpanningEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISBE2SpanningEvent {}
impl ::core::fmt::Debug for ISBE2SpanningEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISBE2SpanningEvent").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ISBE2SpanningEvent {
    type Vtable = ISBE2SpanningEvent_Vtbl;
}
impl ::core::clone::Clone for ISBE2SpanningEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ISBE2SpanningEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xcaede760_b6b1_11db_a578_0018f3fa24c6);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISBE2SpanningEvent_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetEvent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, idevt: *const ::windows::core::GUID, streamid: u32, pcb: *mut u32, pb: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ISBE2StreamMap(::windows::core::IUnknown);
impl ISBE2StreamMap {
    pub unsafe fn MapStream(&self, stream: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).MapStream)(::windows::core::Interface::as_raw(self), stream).ok()
    }
    pub unsafe fn UnmapStream(&self, stream: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).UnmapStream)(::windows::core::Interface::as_raw(self), stream).ok()
    }
    pub unsafe fn EnumMappedStreams(&self) -> ::windows::core::Result<ISBE2EnumStream> {
        let mut result__ = ::windows::core::zeroed::<ISBE2EnumStream>();
        (::windows::core::Interface::vtable(self).EnumMappedStreams)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(ISBE2StreamMap, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ISBE2StreamMap {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISBE2StreamMap {}
impl ::core::fmt::Debug for ISBE2StreamMap {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISBE2StreamMap").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ISBE2StreamMap {
    type Vtable = ISBE2StreamMap_Vtbl;
}
impl ::core::clone::Clone for ISBE2StreamMap {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ISBE2StreamMap {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x667c7745_85b1_4c55_ae55_4e25056159fc);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISBE2StreamMap_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub MapStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, stream: u32) -> ::windows::core::HRESULT,
    pub UnmapStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, stream: u32) -> ::windows::core::HRESULT,
    pub EnumMappedStreams: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppstreams: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ISCTE_EAS(::windows::core::IUnknown);
impl ISCTE_EAS {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSequencyNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetSequencyNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetProtocolVersion(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetProtocolVersion)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEASEventID(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetEASEventID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetOriginatorCode(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetOriginatorCode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEASEventCodeLen(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetEASEventCodeLen)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEASEventCode(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetEASEventCode)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRawNatureOfActivationTextLen(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRawNatureOfActivationTextLen)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRawNatureOfActivationText(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRawNatureOfActivationText)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetNatureOfActivationText<P0>(&self, bstris0639code: P0) -> ::windows::core::Result<::windows::core::BSTR>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetNatureOfActivationText)(::windows::core::Interface::as_raw(self), bstris0639code.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTimeRemaining(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetTimeRemaining)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetStartTime(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetStartTime)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDuration(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetDuration)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetAlertPriority(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetAlertPriority)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDetailsOOBSourceID(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetDetailsOOBSourceID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDetailsMajor(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetDetailsMajor)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDetailsMinor(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetDetailsMinor)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDetailsAudioOOBSourceID(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetDetailsAudioOOBSourceID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetAlertText<P0>(&self, bstris0639code: P0) -> ::windows::core::Result<::windows::core::BSTR>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).GetAlertText)(::windows::core::Interface::as_raw(self), bstris0639code.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRawAlertTextLen(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetRawAlertTextLen)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRawAlertText(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetRawAlertText)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLocationCount(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetLocationCount)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLocationCodes(&self, bindex: u8, pbstate: *mut u8, pbcountysubdivision: *mut u8, pwcounty: *mut u16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetLocationCodes)(::windows::core::Interface::as_raw(self), bindex, pbstate, pbcountysubdivision, pwcounty).ok()
    }
    pub unsafe fn GetExceptionCount(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetExceptionCount)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetExceptionService(&self, bindex: u8, pbibref: *mut u8, pwfirst: *mut u16, pwsecond: *mut u16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetExceptionService)(::windows::core::Interface::as_raw(self), bindex, pbibref, pwfirst, pwsecond).ok()
    }
    pub unsafe fn GetCountOfTableDescriptors(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfTableDescriptors)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByIndex(&self, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetTableDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByTag(&self, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableDescriptorByTag)(::windows::core::Interface::as_raw(self), btag, pdwcookie, ::core::mem::transmute(ppdescriptor)).ok()
    }
}
::windows::imp::interface_hierarchy!(ISCTE_EAS, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ISCTE_EAS {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISCTE_EAS {}
impl ::core::fmt::Debug for ISCTE_EAS {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISCTE_EAS").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ISCTE_EAS {
    type Vtable = ISCTE_EAS_Vtbl;
}
impl ::core::clone::Clone for ISCTE_EAS {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ISCTE_EAS {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1ff544d6_161d_4fae_9faa_4f9f492ae999);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISCTE_EAS_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetSequencyNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetProtocolVersion: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetEASEventID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetOriginatorCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetEASEventCodeLen: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetEASEventCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRawNatureOfActivationTextLen: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetRawNatureOfActivationText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetNatureOfActivationText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstris0639code: ::std::mem::MaybeUninit<::windows::core::BSTR>, pbstrstring: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub GetTimeRemaining: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetStartTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetDuration: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetAlertPriority: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetDetailsOOBSourceID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetDetailsMajor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetDetailsMinor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetDetailsAudioOOBSourceID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetAlertText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstris0639code: ::std::mem::MaybeUninit<::windows::core::BSTR>, pbstrstring: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub GetRawAlertTextLen: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetRawAlertText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLocationCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetLocationCodes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bindex: u8, pbstate: *mut u8, pbcountysubdivision: *mut u8, pwcounty: *mut u16) -> ::windows::core::HRESULT,
    pub GetExceptionCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetExceptionService: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bindex: u8, pbibref: *mut u8, pwfirst: *mut u16, pwsecond: *mut u16) -> ::windows::core::HRESULT,
    pub GetCountOfTableDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ISIInbandEPG(::windows::core::IUnknown);
impl ISIInbandEPG {
    pub unsafe fn StartSIEPGScan(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).StartSIEPGScan)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn StopSIEPGScan(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).StopSIEPGScan)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSIEPGScanRunning(&self) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).IsSIEPGScanRunning)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(ISIInbandEPG, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ISIInbandEPG {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISIInbandEPG {}
impl ::core::fmt::Debug for ISIInbandEPG {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISIInbandEPG").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ISIInbandEPG {
    type Vtable = ISIInbandEPG_Vtbl;
}
impl ::core::clone::Clone for ISIInbandEPG {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ISIInbandEPG {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf90ad9d0_b854_4b68_9cc1_b2cc96119d85);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISIInbandEPG_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub StartSIEPGScan: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub StopSIEPGScan: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub IsSIEPGScanRunning: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, brunning: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsSIEPGScanRunning: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ISIInbandEPGEvent(::windows::core::IUnknown);
impl ISIInbandEPGEvent {
    pub unsafe fn SIObjectEvent<P0>(&self, pidvb_eit: P0, dwtable_id: u32, dwservice_id: u32) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IDVB_EIT2>,
    {
        (::windows::core::Interface::vtable(self).SIObjectEvent)(::windows::core::Interface::as_raw(self), pidvb_eit.into_param().abi(), dwtable_id, dwservice_id).ok()
    }
}
::windows::imp::interface_hierarchy!(ISIInbandEPGEvent, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ISIInbandEPGEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISIInbandEPGEvent {}
impl ::core::fmt::Debug for ISIInbandEPGEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISIInbandEPGEvent").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ISIInbandEPGEvent {
    type Vtable = ISIInbandEPGEvent_Vtbl;
}
impl ::core::clone::Clone for ISIInbandEPGEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ISIInbandEPGEvent {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x7e47913a_5a89_423d_9a2b_e15168858934);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISIInbandEPGEvent_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub SIObjectEvent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidvb_eit: *mut ::core::ffi::c_void, dwtable_id: u32, dwservice_id: u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IScanningTuner(::windows::core::IUnknown);
impl IScanningTuner {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuningSpace(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.TuningSpace)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetTuningSpace<P0>(&self, tuningspace: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuningSpace>,
    {
        (::windows::core::Interface::vtable(self).base__.SetTuningSpace)(::windows::core::Interface::as_raw(self), tuningspace.into_param().abi()).ok()
    }
    pub unsafe fn EnumTuningSpaces(&self) -> ::windows::core::Result<IEnumTuningSpaces> {
        let mut result__ = ::windows::core::zeroed::<IEnumTuningSpaces>();
        (::windows::core::Interface::vtable(self).base__.EnumTuningSpaces)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuneRequest(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.TuneRequest)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetTuneRequest<P0>(&self, tunerequest: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        (::windows::core::Interface::vtable(self).base__.SetTuneRequest)(::windows::core::Interface::as_raw(self), tunerequest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Validate<P0>(&self, tunerequest: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        (::windows::core::Interface::vtable(self).base__.Validate)(::windows::core::Interface::as_raw(self), tunerequest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn PreferredComponentTypes(&self) -> ::windows::core::Result<IComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IComponentTypes>();
        (::windows::core::Interface::vtable(self).base__.PreferredComponentTypes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetPreferredComponentTypes<P0>(&self, componenttypes: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentTypes>,
    {
        (::windows::core::Interface::vtable(self).base__.SetPreferredComponentTypes)(::windows::core::Interface::as_raw(self), componenttypes.into_param().abi()).ok()
    }
    pub unsafe fn SignalStrength(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.SignalStrength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn TriggerSignalEvents(&self, interval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.TriggerSignalEvents)(::windows::core::Interface::as_raw(self), interval).ok()
    }
    pub unsafe fn SeekUp(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SeekUp)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SeekDown(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SeekDown)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ScanUp(&self, millisecondspause: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ScanUp)(::windows::core::Interface::as_raw(self), millisecondspause).ok()
    }
    pub unsafe fn ScanDown(&self, millisecondspause: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ScanDown)(::windows::core::Interface::as_raw(self), millisecondspause).ok()
    }
    pub unsafe fn AutoProgram(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AutoProgram)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IScanningTuner, ::windows::core::IUnknown, ITuner);
impl ::core::cmp::PartialEq for IScanningTuner {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IScanningTuner {}
impl ::core::fmt::Debug for IScanningTuner {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IScanningTuner").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IScanningTuner {
    type Vtable = IScanningTuner_Vtbl;
}
impl ::core::clone::Clone for IScanningTuner {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IScanningTuner {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1dfd0a5c_0284_11d3_9d8e_00c04f72d980);
}
#[repr(C)]
#[doc(hidden)]
pub struct IScanningTuner_Vtbl {
    pub base__: ITuner_Vtbl,
    pub SeekUp: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub SeekDown: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub ScanUp: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, millisecondspause: i32) -> ::windows::core::HRESULT,
    pub ScanDown: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, millisecondspause: i32) -> ::windows::core::HRESULT,
    pub AutoProgram: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IScanningTunerEx(::windows::core::IUnknown);
impl IScanningTunerEx {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuningSpace(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).base__.base__.TuningSpace)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetTuningSpace<P0>(&self, tuningspace: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuningSpace>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetTuningSpace)(::windows::core::Interface::as_raw(self), tuningspace.into_param().abi()).ok()
    }
    pub unsafe fn EnumTuningSpaces(&self) -> ::windows::core::Result<IEnumTuningSpaces> {
        let mut result__ = ::windows::core::zeroed::<IEnumTuningSpaces>();
        (::windows::core::Interface::vtable(self).base__.base__.EnumTuningSpaces)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuneRequest(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.base__.TuneRequest)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetTuneRequest<P0>(&self, tunerequest: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetTuneRequest)(::windows::core::Interface::as_raw(self), tunerequest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Validate<P0>(&self, tunerequest: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.Validate)(::windows::core::Interface::as_raw(self), tunerequest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn PreferredComponentTypes(&self) -> ::windows::core::Result<IComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IComponentTypes>();
        (::windows::core::Interface::vtable(self).base__.base__.PreferredComponentTypes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetPreferredComponentTypes<P0>(&self, componenttypes: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentTypes>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetPreferredComponentTypes)(::windows::core::Interface::as_raw(self), componenttypes.into_param().abi()).ok()
    }
    pub unsafe fn SignalStrength(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).base__.base__.SignalStrength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn TriggerSignalEvents(&self, interval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.TriggerSignalEvents)(::windows::core::Interface::as_raw(self), interval).ok()
    }
    pub unsafe fn SeekUp(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SeekUp)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SeekDown(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SeekDown)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ScanUp(&self, millisecondspause: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.ScanUp)(::windows::core::Interface::as_raw(self), millisecondspause).ok()
    }
    pub unsafe fn ScanDown(&self, millisecondspause: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.ScanDown)(::windows::core::Interface::as_raw(self), millisecondspause).ok()
    }
    pub unsafe fn AutoProgram(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.AutoProgram)(::windows::core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetCurrentLocator(&self, pilocator: *const ::core::option::Option<ILocator>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetCurrentLocator)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pilocator)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PerformExhaustiveScan<P0>(&self, dwlowerfreq: i32, dwhigherfreq: i32, bfinetune: P0, hevent: usize) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows::core::Interface::vtable(self).PerformExhaustiveScan)(::windows::core::Interface::as_raw(self), dwlowerfreq, dwhigherfreq, bfinetune.into_param().abi(), hevent).ok()
    }
    pub unsafe fn TerminateCurrentScan(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).TerminateCurrentScan)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ResumeCurrentScan(&self, hevent: usize) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ResumeCurrentScan)(::windows::core::Interface::as_raw(self), hevent).ok()
    }
    pub unsafe fn GetTunerScanningCapability(&self, hardwareassistedscanning: *mut i32, numstandardssupported: *mut i32, broadcaststandards: *mut ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTunerScanningCapability)(::windows::core::Interface::as_raw(self), hardwareassistedscanning, numstandardssupported, broadcaststandards).ok()
    }
    pub unsafe fn GetTunerStatus(&self, secondsleft: *mut i32, currentlocktype: *mut i32, autodetect: *mut i32, currentfreq: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTunerStatus)(::windows::core::Interface::as_raw(self), secondsleft, currentlocktype, autodetect, currentfreq).ok()
    }
    pub unsafe fn GetCurrentTunerStandardCapability(&self, currentbroadcaststandard: ::windows::core::GUID, settlingtime: *mut i32, tvstandardssupported: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetCurrentTunerStandardCapability)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(currentbroadcaststandard), settlingtime, tvstandardssupported).ok()
    }
    pub unsafe fn SetScanSignalTypeFilter(&self, scanmodulationtypes: i32, analogvideostandard: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetScanSignalTypeFilter)(::windows::core::Interface::as_raw(self), scanmodulationtypes, analogvideostandard).ok()
    }
}
::windows::imp::interface_hierarchy!(IScanningTunerEx, ::windows::core::IUnknown, ITuner, IScanningTuner);
impl ::core::cmp::PartialEq for IScanningTunerEx {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IScanningTunerEx {}
impl ::core::fmt::Debug for IScanningTunerEx {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IScanningTunerEx").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IScanningTunerEx {
    type Vtable = IScanningTunerEx_Vtbl;
}
impl ::core::clone::Clone for IScanningTunerEx {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IScanningTunerEx {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x04bbd195_0e2d_4593_9bd5_4f908bc33cf5);
}
#[repr(C)]
#[doc(hidden)]
pub struct IScanningTunerEx_Vtbl {
    pub base__: IScanningTuner_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub GetCurrentLocator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pilocator: *const *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetCurrentLocator: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub PerformExhaustiveScan: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwlowerfreq: i32, dwhigherfreq: i32, bfinetune: super::super::super::Foundation::VARIANT_BOOL, hevent: usize) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    PerformExhaustiveScan: usize,
    pub TerminateCurrentScan: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcurrentfreq: *mut i32) -> ::windows::core::HRESULT,
    pub ResumeCurrentScan: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hevent: usize) -> ::windows::core::HRESULT,
    pub GetTunerScanningCapability: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hardwareassistedscanning: *mut i32, numstandardssupported: *mut i32, broadcaststandards: *mut ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub GetTunerStatus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, secondsleft: *mut i32, currentlocktype: *mut i32, autodetect: *mut i32, currentfreq: *mut i32) -> ::windows::core::HRESULT,
    pub GetCurrentTunerStandardCapability: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, currentbroadcaststandard: ::windows::core::GUID, settlingtime: *mut i32, tvstandardssupported: *mut i32) -> ::windows::core::HRESULT,
    pub SetScanSignalTypeFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, scanmodulationtypes: i32, analogvideostandard: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ISectionList(::windows::core::IUnknown);
impl ISectionList {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Initialize<P0, P1>(&self, requesttype: MPEG_REQUEST_TYPE, pmpeg2data: P0, pcontext: *const MPEG_CONTEXT, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, timeout: u32, hdoneevent: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IMpeg2Data>,
        P1: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), requesttype, pmpeg2data.into_param().abi(), pcontext, pid, tid, pfilter, timeout, hdoneevent.into_param().abi()).ok()
    }
    pub unsafe fn InitializeWithRawSections(&self, pmplsections: *const MPEG_PACKET_LIST) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).InitializeWithRawSections)(::windows::core::Interface::as_raw(self), pmplsections).ok()
    }
    pub unsafe fn CancelPendingRequest(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CancelPendingRequest)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetNumberOfSections(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetNumberOfSections)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSectionData(&self, sectionnumber: u16, pdwrawpacketlength: *mut u32, ppsection: *mut *mut SECTION) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetSectionData)(::windows::core::Interface::as_raw(self), sectionnumber, pdwrawpacketlength, ppsection).ok()
    }
    pub unsafe fn GetProgramIdentifier(&self, ppid: *const u16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetProgramIdentifier)(::windows::core::Interface::as_raw(self), ppid).ok()
    }
    pub unsafe fn GetTableIdentifier(&self, ptableid: *const u8) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableIdentifier)(::windows::core::Interface::as_raw(self), ptableid).ok()
    }
}
::windows::imp::interface_hierarchy!(ISectionList, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ISectionList {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISectionList {}
impl ::core::fmt::Debug for ISectionList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISectionList").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ISectionList {
    type Vtable = ISectionList_Vtbl;
}
impl ::core::clone::Clone for ISectionList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ISectionList {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xafec1eb5_2a64_46c6_bf4b_ae3ccb6afdb0);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISectionList_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, requesttype: MPEG_REQUEST_TYPE, pmpeg2data: *mut ::core::ffi::c_void, pcontext: *const MPEG_CONTEXT, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, timeout: u32, hdoneevent: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Initialize: usize,
    pub InitializeWithRawSections: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmplsections: *const MPEG_PACKET_LIST) -> ::windows::core::HRESULT,
    pub CancelPendingRequest: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetNumberOfSections: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcount: *mut u16) -> ::windows::core::HRESULT,
    pub GetSectionData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, sectionnumber: u16, pdwrawpacketlength: *mut u32, ppsection: *mut *mut SECTION) -> ::windows::core::HRESULT,
    pub GetProgramIdentifier: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *const u16) -> ::windows::core::HRESULT,
    pub GetTableIdentifier: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ptableid: *const u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IServiceLocationDescriptor(::windows::core::IUnknown);
impl IServiceLocationDescriptor {
    pub unsafe fn GetPCR_PID(&self) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetPCR_PID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetNumberOfElements(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetNumberOfElements)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetElementStreamType(&self, bindex: u8) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetElementStreamType)(::windows::core::Interface::as_raw(self), bindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetElementPID(&self, bindex: u8) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetElementPID)(::windows::core::Interface::as_raw(self), bindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetElementLanguageCode(&self, bindex: u8, langcode: &mut [u8; 3]) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetElementLanguageCode)(::windows::core::Interface::as_raw(self), bindex, ::core::mem::transmute(langcode.as_ptr())).ok()
    }
}
::windows::imp::interface_hierarchy!(IServiceLocationDescriptor, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IServiceLocationDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IServiceLocationDescriptor {}
impl ::core::fmt::Debug for IServiceLocationDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IServiceLocationDescriptor").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IServiceLocationDescriptor {
    type Vtable = IServiceLocationDescriptor_Vtbl;
}
impl ::core::clone::Clone for IServiceLocationDescriptor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IServiceLocationDescriptor {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x58c3c827_9d91_4215_bff3_820a49f0904c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IServiceLocationDescriptor_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetPCR_PID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetNumberOfElements: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetElementStreamType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetElementPID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bindex: u8, pwval: *mut u16) -> ::windows::core::HRESULT,
    pub GetElementLanguageCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bindex: u8, langcode: *mut u8) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IStreamBufferConfigure(::windows::core::IUnknown);
impl IStreamBufferConfigure {
    pub unsafe fn SetDirectory<P0>(&self, pszdirectoryname: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        (::windows::core::Interface::vtable(self).SetDirectory)(::windows::core::Interface::as_raw(self), pszdirectoryname.into_param().abi()).ok()
    }
    pub unsafe fn GetDirectory(&self) -> ::windows::core::Result<::windows::core::PWSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::PWSTR>();
        (::windows::core::Interface::vtable(self).GetDirectory)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetBackingFileCount(&self, dwmin: u32, dwmax: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetBackingFileCount)(::windows::core::Interface::as_raw(self), dwmin, dwmax).ok()
    }
    pub unsafe fn GetBackingFileCount(&self, pdwmin: *mut u32, pdwmax: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetBackingFileCount)(::windows::core::Interface::as_raw(self), pdwmin, pdwmax).ok()
    }
    pub unsafe fn SetBackingFileDuration(&self, dwseconds: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetBackingFileDuration)(::windows::core::Interface::as_raw(self), dwseconds).ok()
    }
    pub unsafe fn GetBackingFileDuration(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetBackingFileDuration)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IStreamBufferConfigure, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IStreamBufferConfigure {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IStreamBufferConfigure {}
impl ::core::fmt::Debug for IStreamBufferConfigure {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IStreamBufferConfigure").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IStreamBufferConfigure {
    type Vtable = IStreamBufferConfigure_Vtbl;
}
impl ::core::clone::Clone for IStreamBufferConfigure {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IStreamBufferConfigure {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xce14dfae_4098_4af7_bbf7_d6511f835414);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStreamBufferConfigure_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub SetDirectory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszdirectoryname: ::windows::core::PCWSTR) -> ::windows::core::HRESULT,
    pub GetDirectory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppszdirectoryname: *mut ::windows::core::PWSTR) -> ::windows::core::HRESULT,
    pub SetBackingFileCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwmin: u32, dwmax: u32) -> ::windows::core::HRESULT,
    pub GetBackingFileCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwmin: *mut u32, pdwmax: *mut u32) -> ::windows::core::HRESULT,
    pub SetBackingFileDuration: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwseconds: u32) -> ::windows::core::HRESULT,
    pub GetBackingFileDuration: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwseconds: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IStreamBufferConfigure2(::windows::core::IUnknown);
impl IStreamBufferConfigure2 {
    pub unsafe fn SetDirectory<P0>(&self, pszdirectoryname: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.SetDirectory)(::windows::core::Interface::as_raw(self), pszdirectoryname.into_param().abi()).ok()
    }
    pub unsafe fn GetDirectory(&self) -> ::windows::core::Result<::windows::core::PWSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::PWSTR>();
        (::windows::core::Interface::vtable(self).base__.GetDirectory)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetBackingFileCount(&self, dwmin: u32, dwmax: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetBackingFileCount)(::windows::core::Interface::as_raw(self), dwmin, dwmax).ok()
    }
    pub unsafe fn GetBackingFileCount(&self, pdwmin: *mut u32, pdwmax: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.GetBackingFileCount)(::windows::core::Interface::as_raw(self), pdwmin, pdwmax).ok()
    }
    pub unsafe fn SetBackingFileDuration(&self, dwseconds: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetBackingFileDuration)(::windows::core::Interface::as_raw(self), dwseconds).ok()
    }
    pub unsafe fn GetBackingFileDuration(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetBackingFileDuration)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMultiplexedPacketSize(&self, cbbytesperpacket: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMultiplexedPacketSize)(::windows::core::Interface::as_raw(self), cbbytesperpacket).ok()
    }
    pub unsafe fn GetMultiplexedPacketSize(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetMultiplexedPacketSize)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFFTransitionRates(&self, dwmaxfullframerate: u32, dwmaxnonskippingrate: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetFFTransitionRates)(::windows::core::Interface::as_raw(self), dwmaxfullframerate, dwmaxnonskippingrate).ok()
    }
    pub unsafe fn GetFFTransitionRates(&self, pdwmaxfullframerate: *mut u32, pdwmaxnonskippingrate: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetFFTransitionRates)(::windows::core::Interface::as_raw(self), pdwmaxfullframerate, pdwmaxnonskippingrate).ok()
    }
}
::windows::imp::interface_hierarchy!(IStreamBufferConfigure2, ::windows::core::IUnknown, IStreamBufferConfigure);
impl ::core::cmp::PartialEq for IStreamBufferConfigure2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IStreamBufferConfigure2 {}
impl ::core::fmt::Debug for IStreamBufferConfigure2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IStreamBufferConfigure2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IStreamBufferConfigure2 {
    type Vtable = IStreamBufferConfigure2_Vtbl;
}
impl ::core::clone::Clone for IStreamBufferConfigure2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IStreamBufferConfigure2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x53e037bf_3992_4282_ae34_2487b4dae06b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStreamBufferConfigure2_Vtbl {
    pub base__: IStreamBufferConfigure_Vtbl,
    pub SetMultiplexedPacketSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, cbbytesperpacket: u32) -> ::windows::core::HRESULT,
    pub GetMultiplexedPacketSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcbbytesperpacket: *mut u32) -> ::windows::core::HRESULT,
    pub SetFFTransitionRates: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwmaxfullframerate: u32, dwmaxnonskippingrate: u32) -> ::windows::core::HRESULT,
    pub GetFFTransitionRates: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwmaxfullframerate: *mut u32, pdwmaxnonskippingrate: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IStreamBufferConfigure3(::windows::core::IUnknown);
impl IStreamBufferConfigure3 {
    pub unsafe fn SetDirectory<P0>(&self, pszdirectoryname: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.SetDirectory)(::windows::core::Interface::as_raw(self), pszdirectoryname.into_param().abi()).ok()
    }
    pub unsafe fn GetDirectory(&self) -> ::windows::core::Result<::windows::core::PWSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::PWSTR>();
        (::windows::core::Interface::vtable(self).base__.base__.GetDirectory)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetBackingFileCount(&self, dwmin: u32, dwmax: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetBackingFileCount)(::windows::core::Interface::as_raw(self), dwmin, dwmax).ok()
    }
    pub unsafe fn GetBackingFileCount(&self, pdwmin: *mut u32, pdwmax: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.GetBackingFileCount)(::windows::core::Interface::as_raw(self), pdwmin, pdwmax).ok()
    }
    pub unsafe fn SetBackingFileDuration(&self, dwseconds: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetBackingFileDuration)(::windows::core::Interface::as_raw(self), dwseconds).ok()
    }
    pub unsafe fn GetBackingFileDuration(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.base__.GetBackingFileDuration)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMultiplexedPacketSize(&self, cbbytesperpacket: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetMultiplexedPacketSize)(::windows::core::Interface::as_raw(self), cbbytesperpacket).ok()
    }
    pub unsafe fn GetMultiplexedPacketSize(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetMultiplexedPacketSize)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFFTransitionRates(&self, dwmaxfullframerate: u32, dwmaxnonskippingrate: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetFFTransitionRates)(::windows::core::Interface::as_raw(self), dwmaxfullframerate, dwmaxnonskippingrate).ok()
    }
    pub unsafe fn GetFFTransitionRates(&self, pdwmaxfullframerate: *mut u32, pdwmaxnonskippingrate: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.GetFFTransitionRates)(::windows::core::Interface::as_raw(self), pdwmaxfullframerate, pdwmaxnonskippingrate).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetStartRecConfig<P0>(&self, fstartstopscur: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::BOOL>,
    {
        (::windows::core::Interface::vtable(self).SetStartRecConfig)(::windows::core::Interface::as_raw(self), fstartstopscur.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetStartRecConfig(&self) -> ::windows::core::Result<super::super::super::Foundation::BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::BOOL>();
        (::windows::core::Interface::vtable(self).GetStartRecConfig)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetNamespace<P0>(&self, psznamespace: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        (::windows::core::Interface::vtable(self).SetNamespace)(::windows::core::Interface::as_raw(self), psznamespace.into_param().abi()).ok()
    }
    pub unsafe fn GetNamespace(&self) -> ::windows::core::Result<::windows::core::PWSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::PWSTR>();
        (::windows::core::Interface::vtable(self).GetNamespace)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IStreamBufferConfigure3, ::windows::core::IUnknown, IStreamBufferConfigure, IStreamBufferConfigure2);
impl ::core::cmp::PartialEq for IStreamBufferConfigure3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IStreamBufferConfigure3 {}
impl ::core::fmt::Debug for IStreamBufferConfigure3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IStreamBufferConfigure3").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IStreamBufferConfigure3 {
    type Vtable = IStreamBufferConfigure3_Vtbl;
}
impl ::core::clone::Clone for IStreamBufferConfigure3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IStreamBufferConfigure3 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x7e2d2a1e_7192_4bd7_80c1_061fd1d10402);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStreamBufferConfigure3_Vtbl {
    pub base__: IStreamBufferConfigure2_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub SetStartRecConfig: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fstartstopscur: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetStartRecConfig: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetStartRecConfig: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfstartstopscur: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetStartRecConfig: usize,
    pub SetNamespace: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psznamespace: ::windows::core::PCWSTR) -> ::windows::core::HRESULT,
    pub GetNamespace: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppsznamespace: *mut ::windows::core::PWSTR) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IStreamBufferDataCounters(::windows::core::IUnknown);
impl IStreamBufferDataCounters {
    pub unsafe fn GetData(&self, ppindata: *mut SBE_PIN_DATA) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetData)(::windows::core::Interface::as_raw(self), ppindata).ok()
    }
    pub unsafe fn ResetData(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ResetData)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IStreamBufferDataCounters, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IStreamBufferDataCounters {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IStreamBufferDataCounters {}
impl ::core::fmt::Debug for IStreamBufferDataCounters {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IStreamBufferDataCounters").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IStreamBufferDataCounters {
    type Vtable = IStreamBufferDataCounters_Vtbl;
}
impl ::core::clone::Clone for IStreamBufferDataCounters {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IStreamBufferDataCounters {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9d2a2563_31ab_402e_9a6b_adb903489440);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStreamBufferDataCounters_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppindata: *mut SBE_PIN_DATA) -> ::windows::core::HRESULT,
    pub ResetData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IStreamBufferInitialize(::windows::core::IUnknown);
impl IStreamBufferInitialize {
    #[doc = "*Required features: `\"Win32_System_Registry\"`*"]
    #[cfg(feature = "Win32_System_Registry")]
    pub unsafe fn SetHKEY<P0>(&self, hkeyroot: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::System::Registry::HKEY>,
    {
        (::windows::core::Interface::vtable(self).SetHKEY)(::windows::core::Interface::as_raw(self), hkeyroot.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetSIDs(&self, csids: u32, ppsid: *mut super::super::super::Foundation::PSID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetSIDs)(::windows::core::Interface::as_raw(self), csids, ppsid).ok()
    }
}
::windows::imp::interface_hierarchy!(IStreamBufferInitialize, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IStreamBufferInitialize {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IStreamBufferInitialize {}
impl ::core::fmt::Debug for IStreamBufferInitialize {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IStreamBufferInitialize").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IStreamBufferInitialize {
    type Vtable = IStreamBufferInitialize_Vtbl;
}
impl ::core::clone::Clone for IStreamBufferInitialize {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IStreamBufferInitialize {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9ce50f2d_6ba7_40fb_a034_50b1a674ec78);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStreamBufferInitialize_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Registry")]
    pub SetHKEY: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hkeyroot: super::super::super::System::Registry::HKEY) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Registry"))]
    SetHKEY: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetSIDs: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, csids: u32, ppsid: *mut super::super::super::Foundation::PSID) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetSIDs: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IStreamBufferMediaSeeking(::windows::core::IUnknown);
impl IStreamBufferMediaSeeking {
    pub unsafe fn GetCapabilities(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.GetCapabilities)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CheckCapabilities(&self, pcapabilities: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.CheckCapabilities)(::windows::core::Interface::as_raw(self), pcapabilities).ok()
    }
    pub unsafe fn IsFormatSupported(&self, pformat: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.IsFormatSupported)(::windows::core::Interface::as_raw(self), pformat).ok()
    }
    pub unsafe fn QueryPreferredFormat(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.QueryPreferredFormat)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTimeFormat(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.GetTimeFormat)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn IsUsingTimeFormat(&self, pformat: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.IsUsingTimeFormat)(::windows::core::Interface::as_raw(self), pformat).ok()
    }
    pub unsafe fn SetTimeFormat(&self, pformat: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetTimeFormat)(::windows::core::Interface::as_raw(self), pformat).ok()
    }
    pub unsafe fn GetDuration(&self) -> ::windows::core::Result<i64> {
        let mut result__ = ::windows::core::zeroed::<i64>();
        (::windows::core::Interface::vtable(self).base__.GetDuration)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetStopPosition(&self) -> ::windows::core::Result<i64> {
        let mut result__ = ::windows::core::zeroed::<i64>();
        (::windows::core::Interface::vtable(self).base__.GetStopPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCurrentPosition(&self) -> ::windows::core::Result<i64> {
        let mut result__ = ::windows::core::zeroed::<i64>();
        (::windows::core::Interface::vtable(self).base__.GetCurrentPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ConvertTimeFormat(&self, ptarget: *mut i64, ptargetformat: ::core::option::Option<*const ::windows::core::GUID>, source: i64, psourceformat: ::core::option::Option<*const ::windows::core::GUID>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.ConvertTimeFormat)(::windows::core::Interface::as_raw(self), ptarget, ::core::mem::transmute(ptargetformat.unwrap_or(::std::ptr::null())), source, ::core::mem::transmute(psourceformat.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn SetPositions(&self, pcurrent: ::core::option::Option<*mut i64>, dwcurrentflags: u32, pstop: ::core::option::Option<*mut i64>, dwstopflags: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetPositions)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pcurrent.unwrap_or(::std::ptr::null_mut())), dwcurrentflags, ::core::mem::transmute(pstop.unwrap_or(::std::ptr::null_mut())), dwstopflags).ok()
    }
    pub unsafe fn GetPositions(&self, pcurrent: ::core::option::Option<*mut i64>, pstop: ::core::option::Option<*mut i64>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.GetPositions)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pcurrent.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pstop.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    pub unsafe fn GetAvailable(&self, pearliest: ::core::option::Option<*mut i64>, platest: ::core::option::Option<*mut i64>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.GetAvailable)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pearliest.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(platest.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    pub unsafe fn SetRate(&self, drate: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.SetRate)(::windows::core::Interface::as_raw(self), drate).ok()
    }
    pub unsafe fn GetRate(&self) -> ::windows::core::Result<f64> {
        let mut result__ = ::windows::core::zeroed::<f64>();
        (::windows::core::Interface::vtable(self).base__.GetRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPreroll(&self) -> ::windows::core::Result<i64> {
        let mut result__ = ::windows::core::zeroed::<i64>();
        (::windows::core::Interface::vtable(self).base__.GetPreroll)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IStreamBufferMediaSeeking, ::windows::core::IUnknown, super::IMediaSeeking);
impl ::core::cmp::PartialEq for IStreamBufferMediaSeeking {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IStreamBufferMediaSeeking {}
impl ::core::fmt::Debug for IStreamBufferMediaSeeking {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IStreamBufferMediaSeeking").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IStreamBufferMediaSeeking {
    type Vtable = IStreamBufferMediaSeeking_Vtbl;
}
impl ::core::clone::Clone for IStreamBufferMediaSeeking {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IStreamBufferMediaSeeking {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf61f5c26_863d_4afa_b0ba_2f81dc978596);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStreamBufferMediaSeeking_Vtbl {
    pub base__: super::IMediaSeeking_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IStreamBufferMediaSeeking2(::windows::core::IUnknown);
impl IStreamBufferMediaSeeking2 {
    pub unsafe fn GetCapabilities(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).base__.base__.GetCapabilities)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CheckCapabilities(&self, pcapabilities: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.CheckCapabilities)(::windows::core::Interface::as_raw(self), pcapabilities).ok()
    }
    pub unsafe fn IsFormatSupported(&self, pformat: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.IsFormatSupported)(::windows::core::Interface::as_raw(self), pformat).ok()
    }
    pub unsafe fn QueryPreferredFormat(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.QueryPreferredFormat)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTimeFormat(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self).base__.base__.GetTimeFormat)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn IsUsingTimeFormat(&self, pformat: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.IsUsingTimeFormat)(::windows::core::Interface::as_raw(self), pformat).ok()
    }
    pub unsafe fn SetTimeFormat(&self, pformat: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetTimeFormat)(::windows::core::Interface::as_raw(self), pformat).ok()
    }
    pub unsafe fn GetDuration(&self) -> ::windows::core::Result<i64> {
        let mut result__ = ::windows::core::zeroed::<i64>();
        (::windows::core::Interface::vtable(self).base__.base__.GetDuration)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetStopPosition(&self) -> ::windows::core::Result<i64> {
        let mut result__ = ::windows::core::zeroed::<i64>();
        (::windows::core::Interface::vtable(self).base__.base__.GetStopPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCurrentPosition(&self) -> ::windows::core::Result<i64> {
        let mut result__ = ::windows::core::zeroed::<i64>();
        (::windows::core::Interface::vtable(self).base__.base__.GetCurrentPosition)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ConvertTimeFormat(&self, ptarget: *mut i64, ptargetformat: ::core::option::Option<*const ::windows::core::GUID>, source: i64, psourceformat: ::core::option::Option<*const ::windows::core::GUID>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.ConvertTimeFormat)(::windows::core::Interface::as_raw(self), ptarget, ::core::mem::transmute(ptargetformat.unwrap_or(::std::ptr::null())), source, ::core::mem::transmute(psourceformat.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn SetPositions(&self, pcurrent: ::core::option::Option<*mut i64>, dwcurrentflags: u32, pstop: ::core::option::Option<*mut i64>, dwstopflags: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetPositions)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pcurrent.unwrap_or(::std::ptr::null_mut())), dwcurrentflags, ::core::mem::transmute(pstop.unwrap_or(::std::ptr::null_mut())), dwstopflags).ok()
    }
    pub unsafe fn GetPositions(&self, pcurrent: ::core::option::Option<*mut i64>, pstop: ::core::option::Option<*mut i64>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.GetPositions)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pcurrent.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pstop.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    pub unsafe fn GetAvailable(&self, pearliest: ::core::option::Option<*mut i64>, platest: ::core::option::Option<*mut i64>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.GetAvailable)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(pearliest.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(platest.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    pub unsafe fn SetRate(&self, drate: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.SetRate)(::windows::core::Interface::as_raw(self), drate).ok()
    }
    pub unsafe fn GetRate(&self) -> ::windows::core::Result<f64> {
        let mut result__ = ::windows::core::zeroed::<f64>();
        (::windows::core::Interface::vtable(self).base__.base__.GetRate)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPreroll(&self) -> ::windows::core::Result<i64> {
        let mut result__ = ::windows::core::zeroed::<i64>();
        (::windows::core::Interface::vtable(self).base__.base__.GetPreroll)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetRateEx(&self, drate: f64, dwframespersec: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetRateEx)(::windows::core::Interface::as_raw(self), drate, dwframespersec).ok()
    }
}
::windows::imp::interface_hierarchy!(IStreamBufferMediaSeeking2, ::windows::core::IUnknown, super::IMediaSeeking, IStreamBufferMediaSeeking);
impl ::core::cmp::PartialEq for IStreamBufferMediaSeeking2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IStreamBufferMediaSeeking2 {}
impl ::core::fmt::Debug for IStreamBufferMediaSeeking2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IStreamBufferMediaSeeking2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IStreamBufferMediaSeeking2 {
    type Vtable = IStreamBufferMediaSeeking2_Vtbl;
}
impl ::core::clone::Clone for IStreamBufferMediaSeeking2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IStreamBufferMediaSeeking2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3a439ab0_155f_470a_86a6_9ea54afd6eaf);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStreamBufferMediaSeeking2_Vtbl {
    pub base__: IStreamBufferMediaSeeking_Vtbl,
    pub SetRateEx: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, drate: f64, dwframespersec: u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IStreamBufferRecComp(::windows::core::IUnknown);
impl IStreamBufferRecComp {
    pub unsafe fn Initialize<P0, P1>(&self, psztargetfilename: P0, pszsbrecprofileref: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
        P1: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psztargetfilename.into_param().abi(), pszsbrecprofileref.into_param().abi()).ok()
    }
    pub unsafe fn Append<P0>(&self, pszsbrecording: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        (::windows::core::Interface::vtable(self).Append)(::windows::core::Interface::as_raw(self), pszsbrecording.into_param().abi()).ok()
    }
    pub unsafe fn AppendEx<P0>(&self, pszsbrecording: P0, rtstart: i64, rtstop: i64) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        (::windows::core::Interface::vtable(self).AppendEx)(::windows::core::Interface::as_raw(self), pszsbrecording.into_param().abi(), rtstart, rtstop).ok()
    }
    pub unsafe fn GetCurrentLength(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCurrentLength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Close(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Close)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Cancel(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Cancel)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IStreamBufferRecComp, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IStreamBufferRecComp {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IStreamBufferRecComp {}
impl ::core::fmt::Debug for IStreamBufferRecComp {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IStreamBufferRecComp").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IStreamBufferRecComp {
    type Vtable = IStreamBufferRecComp_Vtbl;
}
impl ::core::clone::Clone for IStreamBufferRecComp {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IStreamBufferRecComp {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9e259a9b_8815_42ae_b09f_221970b154fd);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStreamBufferRecComp_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psztargetfilename: ::windows::core::PCWSTR, pszsbrecprofileref: ::windows::core::PCWSTR) -> ::windows::core::HRESULT,
    pub Append: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszsbrecording: ::windows::core::PCWSTR) -> ::windows::core::HRESULT,
    pub AppendEx: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszsbrecording: ::windows::core::PCWSTR, rtstart: i64, rtstop: i64) -> ::windows::core::HRESULT,
    pub GetCurrentLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcseconds: *mut u32) -> ::windows::core::HRESULT,
    pub Close: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub Cancel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IStreamBufferRecordControl(::windows::core::IUnknown);
impl IStreamBufferRecordControl {
    pub unsafe fn Start(&self, prtstart: *mut i64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Start)(::windows::core::Interface::as_raw(self), prtstart).ok()
    }
    pub unsafe fn Stop(&self, rtstop: i64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Stop)(::windows::core::Interface::as_raw(self), rtstop).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetRecordingStatus(&self, phresult: *mut ::windows::core::HRESULT, pbstarted: *mut super::super::super::Foundation::BOOL, pbstopped: *mut super::super::super::Foundation::BOOL) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetRecordingStatus)(::windows::core::Interface::as_raw(self), phresult, pbstarted, pbstopped).ok()
    }
}
::windows::imp::interface_hierarchy!(IStreamBufferRecordControl, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IStreamBufferRecordControl {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IStreamBufferRecordControl {}
impl ::core::fmt::Debug for IStreamBufferRecordControl {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IStreamBufferRecordControl").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IStreamBufferRecordControl {
    type Vtable = IStreamBufferRecordControl_Vtbl;
}
impl ::core::clone::Clone for IStreamBufferRecordControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IStreamBufferRecordControl {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xba9b6c99_f3c7_4ff2_92db_cfdd4851bf31);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStreamBufferRecordControl_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Start: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prtstart: *mut i64) -> ::windows::core::HRESULT,
    pub Stop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rtstop: i64) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetRecordingStatus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phresult: *mut ::windows::core::HRESULT, pbstarted: *mut super::super::super::Foundation::BOOL, pbstopped: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetRecordingStatus: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IStreamBufferRecordingAttribute(::windows::core::IUnknown);
impl IStreamBufferRecordingAttribute {
    pub unsafe fn SetAttribute<P0>(&self, ulreserved: u32, pszattributename: P0, streambufferattributetype: STREAMBUFFER_ATTR_DATATYPE, pbattribute: &[u8]) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        (::windows::core::Interface::vtable(self).SetAttribute)(::windows::core::Interface::as_raw(self), ulreserved, pszattributename.into_param().abi(), streambufferattributetype, ::core::mem::transmute(pbattribute.as_ptr()), pbattribute.len() as _).ok()
    }
    pub unsafe fn GetAttributeCount(&self, ulreserved: u32) -> ::windows::core::Result<u16> {
        let mut result__ = ::windows::core::zeroed::<u16>();
        (::windows::core::Interface::vtable(self).GetAttributeCount)(::windows::core::Interface::as_raw(self), ulreserved, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetAttributeByName<P0>(&self, pszattributename: P0, pulreserved: *const u32, pstreambufferattributetype: *mut STREAMBUFFER_ATTR_DATATYPE, pbattribute: *mut u8, pcblength: *mut u16) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        (::windows::core::Interface::vtable(self).GetAttributeByName)(::windows::core::Interface::as_raw(self), pszattributename.into_param().abi(), pulreserved, pstreambufferattributetype, pbattribute, pcblength).ok()
    }
    pub unsafe fn GetAttributeByIndex(&self, windex: u16, pulreserved: *const u32, pszattributename: ::windows::core::PWSTR, pcchnamelength: *mut u16, pstreambufferattributetype: *mut STREAMBUFFER_ATTR_DATATYPE, pbattribute: *mut u8, pcblength: *mut u16) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetAttributeByIndex)(::windows::core::Interface::as_raw(self), windex, pulreserved, ::core::mem::transmute(pszattributename), pcchnamelength, pstreambufferattributetype, pbattribute, pcblength).ok()
    }
    pub unsafe fn EnumAttributes(&self) -> ::windows::core::Result<IEnumStreamBufferRecordingAttrib> {
        let mut result__ = ::windows::core::zeroed::<IEnumStreamBufferRecordingAttrib>();
        (::windows::core::Interface::vtable(self).EnumAttributes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(IStreamBufferRecordingAttribute, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IStreamBufferRecordingAttribute {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IStreamBufferRecordingAttribute {}
impl ::core::fmt::Debug for IStreamBufferRecordingAttribute {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IStreamBufferRecordingAttribute").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IStreamBufferRecordingAttribute {
    type Vtable = IStreamBufferRecordingAttribute_Vtbl;
}
impl ::core::clone::Clone for IStreamBufferRecordingAttribute {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IStreamBufferRecordingAttribute {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x16ca4e03_fe69_4705_bd41_5b7dfc0c95f3);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStreamBufferRecordingAttribute_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub SetAttribute: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ulreserved: u32, pszattributename: ::windows::core::PCWSTR, streambufferattributetype: STREAMBUFFER_ATTR_DATATYPE, pbattribute: *const u8, cbattributelength: u16) -> ::windows::core::HRESULT,
    pub GetAttributeCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ulreserved: u32, pcattributes: *mut u16) -> ::windows::core::HRESULT,
    pub GetAttributeByName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszattributename: ::windows::core::PCWSTR, pulreserved: *const u32, pstreambufferattributetype: *mut STREAMBUFFER_ATTR_DATATYPE, pbattribute: *mut u8, pcblength: *mut u16) -> ::windows::core::HRESULT,
    pub GetAttributeByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, windex: u16, pulreserved: *const u32, pszattributename: ::windows::core::PWSTR, pcchnamelength: *mut u16, pstreambufferattributetype: *mut STREAMBUFFER_ATTR_DATATYPE, pbattribute: *mut u8, pcblength: *mut u16) -> ::windows::core::HRESULT,
    pub EnumAttributes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppienumstreambufferattrib: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IStreamBufferSink(::windows::core::IUnknown);
impl IStreamBufferSink {
    pub unsafe fn LockProfile<P0>(&self, pszstreambufferfilename: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        (::windows::core::Interface::vtable(self).LockProfile)(::windows::core::Interface::as_raw(self), pszstreambufferfilename.into_param().abi()).ok()
    }
    pub unsafe fn CreateRecorder<P0>(&self, pszfilename: P0, dwrecordtype: u32) -> ::windows::core::Result<::windows::core::IUnknown>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).CreateRecorder)(::windows::core::Interface::as_raw(self), pszfilename.into_param().abi(), dwrecordtype, &mut result__).from_abi(result__)
    }
    pub unsafe fn IsProfileLocked(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsProfileLocked)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IStreamBufferSink, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IStreamBufferSink {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IStreamBufferSink {}
impl ::core::fmt::Debug for IStreamBufferSink {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IStreamBufferSink").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IStreamBufferSink {
    type Vtable = IStreamBufferSink_Vtbl;
}
impl ::core::clone::Clone for IStreamBufferSink {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IStreamBufferSink {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xafd1f242_7efd_45ee_ba4e_407a25c9a77a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStreamBufferSink_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub LockProfile: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszstreambufferfilename: ::windows::core::PCWSTR) -> ::windows::core::HRESULT,
    pub CreateRecorder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfilename: ::windows::core::PCWSTR, dwrecordtype: u32, precordingiunknown: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub IsProfileLocked: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IStreamBufferSink2(::windows::core::IUnknown);
impl IStreamBufferSink2 {
    pub unsafe fn LockProfile<P0>(&self, pszstreambufferfilename: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.LockProfile)(::windows::core::Interface::as_raw(self), pszstreambufferfilename.into_param().abi()).ok()
    }
    pub unsafe fn CreateRecorder<P0>(&self, pszfilename: P0, dwrecordtype: u32) -> ::windows::core::Result<::windows::core::IUnknown>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).base__.CreateRecorder)(::windows::core::Interface::as_raw(self), pszfilename.into_param().abi(), dwrecordtype, &mut result__).from_abi(result__)
    }
    pub unsafe fn IsProfileLocked(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.IsProfileLocked)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn UnlockProfile(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).UnlockProfile)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IStreamBufferSink2, ::windows::core::IUnknown, IStreamBufferSink);
impl ::core::cmp::PartialEq for IStreamBufferSink2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IStreamBufferSink2 {}
impl ::core::fmt::Debug for IStreamBufferSink2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IStreamBufferSink2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IStreamBufferSink2 {
    type Vtable = IStreamBufferSink2_Vtbl;
}
impl ::core::clone::Clone for IStreamBufferSink2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IStreamBufferSink2 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xdb94a660_f4fb_4bfa_bcc6_fe159a4eea93);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStreamBufferSink2_Vtbl {
    pub base__: IStreamBufferSink_Vtbl,
    pub UnlockProfile: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IStreamBufferSink3(::windows::core::IUnknown);
impl IStreamBufferSink3 {
    pub unsafe fn LockProfile<P0>(&self, pszstreambufferfilename: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        (::windows::core::Interface::vtable(self).base__.base__.LockProfile)(::windows::core::Interface::as_raw(self), pszstreambufferfilename.into_param().abi()).ok()
    }
    pub unsafe fn CreateRecorder<P0>(&self, pszfilename: P0, dwrecordtype: u32) -> ::windows::core::Result<::windows::core::IUnknown>
    where
        P0: ::windows::core::IntoParam<::windows::core::PCWSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).base__.base__.CreateRecorder)(::windows::core::Interface::as_raw(self), pszfilename.into_param().abi(), dwrecordtype, &mut result__).from_abi(result__)
    }
    pub unsafe fn IsProfileLocked(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.base__.IsProfileLocked)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn UnlockProfile(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base__.UnlockProfile)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetAvailableFilter(&self, prtmin: *mut i64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetAvailableFilter)(::windows::core::Interface::as_raw(self), prtmin).ok()
    }
}
::windows::imp::interface_hierarchy!(IStreamBufferSink3, ::windows::core::IUnknown, IStreamBufferSink, IStreamBufferSink2);
impl ::core::cmp::PartialEq for IStreamBufferSink3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IStreamBufferSink3 {}
impl ::core::fmt::Debug for IStreamBufferSink3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IStreamBufferSink3").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IStreamBufferSink3 {
    type Vtable = IStreamBufferSink3_Vtbl;
}
impl ::core::clone::Clone for IStreamBufferSink3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IStreamBufferSink3 {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x974723f2_887a_4452_9366_2cff3057bc8f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStreamBufferSink3_Vtbl {
    pub base__: IStreamBufferSink2_Vtbl,
    pub SetAvailableFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prtmin: *mut i64) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IStreamBufferSource(::windows::core::IUnknown);
impl IStreamBufferSource {
    pub unsafe fn SetStreamSink<P0>(&self, pistreambuffersink: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IStreamBufferSink>,
    {
        (::windows::core::Interface::vtable(self).SetStreamSink)(::windows::core::Interface::as_raw(self), pistreambuffersink.into_param().abi()).ok()
    }
}
::windows::imp::interface_hierarchy!(IStreamBufferSource, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IStreamBufferSource {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IStreamBufferSource {}
impl ::core::fmt::Debug for IStreamBufferSource {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IStreamBufferSource").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IStreamBufferSource {
    type Vtable = IStreamBufferSource_Vtbl;
}
impl ::core::clone::Clone for IStreamBufferSource {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IStreamBufferSource {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1c5bd776_6ced_4f44_8164_5eab0e98db12);
}
#[repr(C)]
#[doc(hidden)]
pub struct IStreamBufferSource_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub SetStreamSink: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pistreambuffersink: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ITSDT(::windows::core::IUnknown);
impl ITSDT {
    pub unsafe fn Initialize<P0, P1>(&self, psectionlist: P0, pmpegdata: P1) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ISectionList>,
        P1: ::windows::core::IntoParam<IMpeg2Data>,
    {
        (::windows::core::Interface::vtable(self).Initialize)(::windows::core::Interface::as_raw(self), psectionlist.into_param().abi(), pmpegdata.into_param().abi()).ok()
    }
    pub unsafe fn GetVersionNumber(&self) -> ::windows::core::Result<u8> {
        let mut result__ = ::windows::core::zeroed::<u8>();
        (::windows::core::Interface::vtable(self).GetVersionNumber)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCountOfTableDescriptors(&self) -> ::windows::core::Result<u32> {
        let mut result__ = ::windows::core::zeroed::<u32>();
        (::windows::core::Interface::vtable(self).GetCountOfTableDescriptors)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByIndex(&self, dwindex: u32) -> ::windows::core::Result<IGenericDescriptor> {
        let mut result__ = ::windows::core::zeroed::<IGenericDescriptor>();
        (::windows::core::Interface::vtable(self).GetTableDescriptorByIndex)(::windows::core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTableDescriptorByTag(&self, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetTableDescriptorByTag)(::windows::core::Interface::as_raw(self), btag, pdwcookie, ::core::mem::transmute(ppdescriptor)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForNextTable<P0>(&self, hnexttableavailable: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForNextTable)(::windows::core::Interface::as_raw(self), hnexttableavailable.into_param().abi()).ok()
    }
    pub unsafe fn GetNextTable(&self) -> ::windows::core::Result<ITSDT> {
        let mut result__ = ::windows::core::zeroed::<ITSDT>();
        (::windows::core::Interface::vtable(self).GetNextTable)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterForWhenCurrent<P0>(&self, hnexttableiscurrent: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<super::super::super::Foundation::HANDLE>,
    {
        (::windows::core::Interface::vtable(self).RegisterForWhenCurrent)(::windows::core::Interface::as_raw(self), hnexttableiscurrent.into_param().abi()).ok()
    }
    pub unsafe fn ConvertNextToCurrent(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ConvertNextToCurrent)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(ITSDT, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ITSDT {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ITSDT {}
impl ::core::fmt::Debug for ITSDT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ITSDT").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ITSDT {
    type Vtable = ITSDT_Vtbl;
}
impl ::core::clone::Clone for ITSDT {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ITSDT {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd19bdb43_405b_4a7c_a791_c89110c33165);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITSDT_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetVersionNumber: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows::core::HRESULT,
    pub GetCountOfTableDescriptors: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub GetTableDescriptorByTag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForNextTable: usize,
    pub GetNextTable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pptsdt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterForWhenCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterForWhenCurrent: usize,
    pub ConvertNextToCurrent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct ITuneRequest(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl ITuneRequest {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuningSpace(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).TuningSpace)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Components(&self) -> ::windows::core::Result<IComponents> {
        let mut result__ = ::windows::core::zeroed::<IComponents>();
        (::windows::core::Interface::vtable(self).Components)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Locator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).Locator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetLocator<P0>(&self, locator: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).SetLocator)(::windows::core::Interface::as_raw(self), locator.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(ITuneRequest, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for ITuneRequest {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for ITuneRequest {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for ITuneRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ITuneRequest").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for ITuneRequest {
    type Vtable = ITuneRequest_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for ITuneRequest {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for ITuneRequest {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x07ddc146_fc3d_11d2_9d8c_00c04f72d980);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct ITuneRequest_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub TuningSpace: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tuningspace: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    TuningSpace: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Components: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, components: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Components: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newtunerequest: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Clone: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Locator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, locator: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Locator: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetLocator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, locator: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetLocator: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ITuneRequestInfo(::windows::core::IUnknown);
impl ITuneRequestInfo {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetLocatorData<P0>(&self, request: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        (::windows::core::Interface::vtable(self).GetLocatorData)(::windows::core::Interface::as_raw(self), request.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetComponentData<P0>(&self, currentrequest: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        (::windows::core::Interface::vtable(self).GetComponentData)(::windows::core::Interface::as_raw(self), currentrequest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateComponentList<P0>(&self, currentrequest: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        (::windows::core::Interface::vtable(self).CreateComponentList)(::windows::core::Interface::as_raw(self), currentrequest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetNextProgram<P0>(&self, currentrequest: P0) -> ::windows::core::Result<ITuneRequest>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).GetNextProgram)(::windows::core::Interface::as_raw(self), currentrequest.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetPreviousProgram<P0>(&self, currentrequest: P0) -> ::windows::core::Result<ITuneRequest>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).GetPreviousProgram)(::windows::core::Interface::as_raw(self), currentrequest.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetNextLocator<P0>(&self, currentrequest: P0) -> ::windows::core::Result<ITuneRequest>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).GetNextLocator)(::windows::core::Interface::as_raw(self), currentrequest.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetPreviousLocator<P0>(&self, currentrequest: P0) -> ::windows::core::Result<ITuneRequest>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).GetPreviousLocator)(::windows::core::Interface::as_raw(self), currentrequest.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(ITuneRequestInfo, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ITuneRequestInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ITuneRequestInfo {}
impl ::core::fmt::Debug for ITuneRequestInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ITuneRequestInfo").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ITuneRequestInfo {
    type Vtable = ITuneRequestInfo_Vtbl;
}
impl ::core::clone::Clone for ITuneRequestInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ITuneRequestInfo {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa3b152df_7a90_4218_ac54_9830bee8c0b6);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITuneRequestInfo_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub GetLocatorData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, request: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetLocatorData: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub GetComponentData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, currentrequest: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetComponentData: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub CreateComponentList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, currentrequest: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    CreateComponentList: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub GetNextProgram: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, currentrequest: *mut ::core::ffi::c_void, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetNextProgram: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub GetPreviousProgram: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, currentrequest: *mut ::core::ffi::c_void, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetPreviousProgram: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub GetNextLocator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, currentrequest: *mut ::core::ffi::c_void, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetNextLocator: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub GetPreviousLocator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, currentrequest: *mut ::core::ffi::c_void, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetPreviousLocator: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ITuneRequestInfoEx(::windows::core::IUnknown);
impl ITuneRequestInfoEx {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetLocatorData<P0>(&self, request: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        (::windows::core::Interface::vtable(self).base__.GetLocatorData)(::windows::core::Interface::as_raw(self), request.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetComponentData<P0>(&self, currentrequest: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        (::windows::core::Interface::vtable(self).base__.GetComponentData)(::windows::core::Interface::as_raw(self), currentrequest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateComponentList<P0>(&self, currentrequest: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        (::windows::core::Interface::vtable(self).base__.CreateComponentList)(::windows::core::Interface::as_raw(self), currentrequest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetNextProgram<P0>(&self, currentrequest: P0) -> ::windows::core::Result<ITuneRequest>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.GetNextProgram)(::windows::core::Interface::as_raw(self), currentrequest.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetPreviousProgram<P0>(&self, currentrequest: P0) -> ::windows::core::Result<ITuneRequest>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.GetPreviousProgram)(::windows::core::Interface::as_raw(self), currentrequest.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetNextLocator<P0>(&self, currentrequest: P0) -> ::windows::core::Result<ITuneRequest>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.GetNextLocator)(::windows::core::Interface::as_raw(self), currentrequest.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetPreviousLocator<P0>(&self, currentrequest: P0) -> ::windows::core::Result<ITuneRequest>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).base__.GetPreviousLocator)(::windows::core::Interface::as_raw(self), currentrequest.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateComponentListEx<P0>(&self, currentrequest: P0) -> ::windows::core::Result<::windows::core::IUnknown>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).CreateComponentListEx)(::windows::core::Interface::as_raw(self), currentrequest.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(ITuneRequestInfoEx, ::windows::core::IUnknown, ITuneRequestInfo);
impl ::core::cmp::PartialEq for ITuneRequestInfoEx {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ITuneRequestInfoEx {}
impl ::core::fmt::Debug for ITuneRequestInfoEx {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ITuneRequestInfoEx").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ITuneRequestInfoEx {
    type Vtable = ITuneRequestInfoEx_Vtbl;
}
impl ::core::clone::Clone for ITuneRequestInfoEx {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ITuneRequestInfoEx {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xee957c52_b0d0_4e78_8dd1_b87a08bfd893);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITuneRequestInfoEx_Vtbl {
    pub base__: ITuneRequestInfo_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub CreateComponentListEx: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, currentrequest: *mut ::core::ffi::c_void, ppcurpmt: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    CreateComponentListEx: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ITuner(::windows::core::IUnknown);
impl ITuner {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuningSpace(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).TuningSpace)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetTuningSpace<P0>(&self, tuningspace: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuningSpace>,
    {
        (::windows::core::Interface::vtable(self).SetTuningSpace)(::windows::core::Interface::as_raw(self), tuningspace.into_param().abi()).ok()
    }
    pub unsafe fn EnumTuningSpaces(&self) -> ::windows::core::Result<IEnumTuningSpaces> {
        let mut result__ = ::windows::core::zeroed::<IEnumTuningSpaces>();
        (::windows::core::Interface::vtable(self).EnumTuningSpaces)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuneRequest(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).TuneRequest)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetTuneRequest<P0>(&self, tunerequest: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        (::windows::core::Interface::vtable(self).SetTuneRequest)(::windows::core::Interface::as_raw(self), tunerequest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Validate<P0>(&self, tunerequest: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuneRequest>,
    {
        (::windows::core::Interface::vtable(self).Validate)(::windows::core::Interface::as_raw(self), tunerequest.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn PreferredComponentTypes(&self) -> ::windows::core::Result<IComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IComponentTypes>();
        (::windows::core::Interface::vtable(self).PreferredComponentTypes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetPreferredComponentTypes<P0>(&self, componenttypes: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentTypes>,
    {
        (::windows::core::Interface::vtable(self).SetPreferredComponentTypes)(::windows::core::Interface::as_raw(self), componenttypes.into_param().abi()).ok()
    }
    pub unsafe fn SignalStrength(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).SignalStrength)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn TriggerSignalEvents(&self, interval: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).TriggerSignalEvents)(::windows::core::Interface::as_raw(self), interval).ok()
    }
}
::windows::imp::interface_hierarchy!(ITuner, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ITuner {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ITuner {}
impl ::core::fmt::Debug for ITuner {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ITuner").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ITuner {
    type Vtable = ITuner_Vtbl;
}
impl ::core::clone::Clone for ITuner {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ITuner {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x28c52640_018a_11d3_9d8e_00c04f72d980);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITuner_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub TuningSpace: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tuningspace: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    TuningSpace: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetTuningSpace: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tuningspace: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetTuningSpace: usize,
    pub EnumTuningSpaces: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub TuneRequest: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    TuneRequest: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetTuneRequest: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tunerequest: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetTuneRequest: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Validate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tunerequest: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Validate: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub PreferredComponentTypes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, componenttypes: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    PreferredComponentTypes: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetPreferredComponentTypes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, componenttypes: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetPreferredComponentTypes: usize,
    pub SignalStrength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, strength: *mut i32) -> ::windows::core::HRESULT,
    pub TriggerSignalEvents: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, interval: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ITunerCap(::windows::core::IUnknown);
impl ITunerCap {
    pub unsafe fn get_SupportedNetworkTypes(&self, ulcnetworktypesmax: u32, pulcnetworktypes: *mut u32, pguidnetworktypes: *mut ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).get_SupportedNetworkTypes)(::windows::core::Interface::as_raw(self), ulcnetworktypesmax, pulcnetworktypes, pguidnetworktypes).ok()
    }
    pub unsafe fn get_SupportedVideoFormats(&self, pulamtunermodetype: *mut u32, pulanalogvideostandard: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).get_SupportedVideoFormats)(::windows::core::Interface::as_raw(self), pulamtunermodetype, pulanalogvideostandard).ok()
    }
    pub unsafe fn get_AuxInputCount(&self, pulcompositecount: *mut u32, pulsvideocount: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).get_AuxInputCount)(::windows::core::Interface::as_raw(self), pulcompositecount, pulsvideocount).ok()
    }
}
::windows::imp::interface_hierarchy!(ITunerCap, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ITunerCap {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ITunerCap {}
impl ::core::fmt::Debug for ITunerCap {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ITunerCap").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ITunerCap {
    type Vtable = ITunerCap_Vtbl;
}
impl ::core::clone::Clone for ITunerCap {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ITunerCap {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xe60dfa45_8d56_4e65_a8ab_d6be9412c249);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITunerCap_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub get_SupportedNetworkTypes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ulcnetworktypesmax: u32, pulcnetworktypes: *mut u32, pguidnetworktypes: *mut ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub get_SupportedVideoFormats: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pulamtunermodetype: *mut u32, pulanalogvideostandard: *mut u32) -> ::windows::core::HRESULT,
    pub get_AuxInputCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pulcompositecount: *mut u32, pulsvideocount: *mut u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct ITunerCapEx(::windows::core::IUnknown);
impl ITunerCapEx {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Has608_708Caption(&self) -> ::windows::core::Result<super::super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::Foundation::VARIANT_BOOL>();
        (::windows::core::Interface::vtable(self).Has608_708Caption)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows::imp::interface_hierarchy!(ITunerCapEx, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for ITunerCapEx {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ITunerCapEx {}
impl ::core::fmt::Debug for ITunerCapEx {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ITunerCapEx").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ITunerCapEx {
    type Vtable = ITunerCapEx_Vtbl;
}
impl ::core::clone::Clone for ITunerCapEx {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for ITunerCapEx {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xed3e0c66_18c8_4ea6_9300_f6841fdd35dc);
}
#[repr(C)]
#[doc(hidden)]
pub struct ITunerCapEx_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Has608_708Caption: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbhascaption: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Has608_708Caption: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct ITuningSpace(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl ITuningSpace {
    pub unsafe fn UniqueName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).UniqueName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetUniqueName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetUniqueName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn FriendlyName(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).FriendlyName)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFriendlyName<P0>(&self, name: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetFriendlyName)(::windows::core::Interface::as_raw(self), name.into_param().abi()).ok()
    }
    pub unsafe fn CLSID(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).CLSID)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn NetworkType(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetNetworkType<P0>(&self, networktypeguid: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetNetworkType)(::windows::core::Interface::as_raw(self), networktypeguid.into_param().abi()).ok()
    }
    pub unsafe fn _NetworkType(&self) -> ::windows::core::Result<::windows::core::GUID> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::GUID>();
        (::windows::core::Interface::vtable(self)._NetworkType)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Set_NetworkType(&self, networktypeguid: *const ::windows::core::GUID) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Set_NetworkType)(::windows::core::Interface::as_raw(self), networktypeguid).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateTuneRequest(&self) -> ::windows::core::Result<ITuneRequest> {
        let mut result__ = ::windows::core::zeroed::<ITuneRequest>();
        (::windows::core::Interface::vtable(self).CreateTuneRequest)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumCategoryGUIDs(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumGUID> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumGUID>();
        (::windows::core::Interface::vtable(self).EnumCategoryGUIDs)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumDeviceMonikers(&self) -> ::windows::core::Result<super::super::super::System::Com::IEnumMoniker> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::IEnumMoniker>();
        (::windows::core::Interface::vtable(self).EnumDeviceMonikers)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultPreferredComponentTypes(&self) -> ::windows::core::Result<IComponentTypes> {
        let mut result__ = ::windows::core::zeroed::<IComponentTypes>();
        (::windows::core::Interface::vtable(self).DefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultPreferredComponentTypes<P0>(&self, newcomponenttypes: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<IComponentTypes>,
    {
        (::windows::core::Interface::vtable(self).SetDefaultPreferredComponentTypes)(::windows::core::Interface::as_raw(self), newcomponenttypes.into_param().abi()).ok()
    }
    pub unsafe fn FrequencyMapping(&self) -> ::windows::core::Result<::windows::core::BSTR> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::BSTR>();
        (::windows::core::Interface::vtable(self).FrequencyMapping)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFrequencyMapping<P0>(&self, mapping: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        (::windows::core::Interface::vtable(self).SetFrequencyMapping)(::windows::core::Interface::as_raw(self), mapping.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn DefaultLocator(&self) -> ::windows::core::Result<ILocator> {
        let mut result__ = ::windows::core::zeroed::<ILocator>();
        (::windows::core::Interface::vtable(self).DefaultLocator)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDefaultLocator<P0>(&self, locatorval: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ILocator>,
    {
        (::windows::core::Interface::vtable(self).SetDefaultLocator)(::windows::core::Interface::as_raw(self), locatorval.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).Clone)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(ITuningSpace, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for ITuningSpace {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for ITuningSpace {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for ITuningSpace {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ITuningSpace").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for ITuningSpace {
    type Vtable = ITuningSpace_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for ITuningSpace {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for ITuningSpace {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x061c6e30_e622_11d2_9493_00c04f72d980);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct ITuningSpace_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub UniqueName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, name: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SetUniqueName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, name: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub FriendlyName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, name: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SetFriendlyName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, name: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub CLSID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, spaceclsid: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub NetworkType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, networktypeguid: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SetNetworkType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, networktypeguid: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub _NetworkType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, networktypeguid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT,
    pub Set_NetworkType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, networktypeguid: *const ::windows::core::GUID) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub CreateTuneRequest: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    CreateTuneRequest: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub EnumCategoryGUIDs: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    EnumCategoryGUIDs: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub EnumDeviceMonikers: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    EnumDeviceMonikers: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub DefaultPreferredComponentTypes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, componenttypes: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    DefaultPreferredComponentTypes: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetDefaultPreferredComponentTypes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newcomponenttypes: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetDefaultPreferredComponentTypes: usize,
    pub FrequencyMapping: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmapping: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    pub SetFrequencyMapping: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mapping: ::std::mem::MaybeUninit<::windows::core::BSTR>) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub DefaultLocator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, locatorval: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    DefaultLocator: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetDefaultLocator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, locatorval: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetDefaultLocator: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newts: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Clone: usize,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct ITuningSpaceContainer(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl ITuningSpaceContainer {
    pub unsafe fn Count(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Count)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn _NewEnum(&self) -> ::windows::core::Result<super::super::super::System::Ole::IEnumVARIANT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IEnumVARIANT>();
        (::windows::core::Interface::vtable(self)._NewEnum)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn get_Item(&self, varindex: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).get_Item)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(varindex), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn put_Item<P0>(&self, varindex: super::super::super::System::Com::VARIANT, tuningspace: P0) -> ::windows::core::Result<()>
    where
        P0: ::windows::core::IntoParam<ITuningSpace>,
    {
        (::windows::core::Interface::vtable(self).put_Item)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(varindex), tuningspace.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuningSpacesForCLSID<P0>(&self, spaceclsid: P0) -> ::windows::core::Result<ITuningSpaces>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<ITuningSpaces>();
        (::windows::core::Interface::vtable(self).TuningSpacesForCLSID)(::windows::core::Interface::as_raw(self), spaceclsid.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn _TuningSpacesForCLSID2(&self, spaceclsid: *const ::windows::core::GUID) -> ::windows::core::Result<ITuningSpaces> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpaces>();
        (::windows::core::Interface::vtable(self)._TuningSpacesForCLSID2)(::windows::core::Interface::as_raw(self), spaceclsid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn TuningSpacesForName<P0>(&self, name: P0) -> ::windows::core::Result<ITuningSpaces>
    where
        P0: ::windows::core::IntoParam<::windows::core::BSTR>,
    {
        let mut result__ = ::windows::core::zeroed::<ITuningSpaces>();
        (::windows::core::Interface::vtable(self).TuningSpacesForName)(::windows::core::Interface::as_raw(self), name.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn FindID<P0>(&self, tuningspace: P0) -> ::windows::core::Result<i32>
    where
        P0: ::windows::core::IntoParam<ITuningSpace>,
    {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).FindID)(::windows::core::Interface::as_raw(self), tuningspace.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Add<P0>(&self, tuningspace: P0) -> ::windows::core::Result<super::super::super::System::Com::VARIANT>
    where
        P0: ::windows::core::IntoParam<ITuningSpace>,
    {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Com::VARIANT>();
        (::windows::core::Interface::vtable(self).Add)(::windows::core::Interface::as_raw(self), tuningspace.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn EnumTuningSpaces(&self) -> ::windows::core::Result<IEnumTuningSpaces> {
        let mut result__ = ::windows::core::zeroed::<IEnumTuningSpaces>();
        (::windows::core::Interface::vtable(self).EnumTuningSpaces)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Remove(&self, index: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Remove)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(index)).ok()
    }
    pub unsafe fn MaxCount(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).MaxCount)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMaxCount(&self, maxcount: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMaxCount)(::windows::core::Interface::as_raw(self), maxcount).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(ITuningSpaceContainer, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for ITuningSpaceContainer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for ITuningSpaceContainer {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for ITuningSpaceContainer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ITuningSpaceContainer").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for ITuningSpaceContainer {
    type Vtable = ITuningSpaceContainer_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for ITuningSpaceContainer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for ITuningSpaceContainer {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5b692e84_e2f1_11d2_9493_00c04f72d980);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct ITuningSpaceContainer_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub Count: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Ole")]
    pub _NewEnum: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    _NewEnum: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub get_Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, varindex: super::super::super::System::Com::VARIANT, tuningspace: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    get_Item: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub put_Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, varindex: super::super::super::System::Com::VARIANT, tuningspace: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    put_Item: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub TuningSpacesForCLSID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, spaceclsid: ::std::mem::MaybeUninit<::windows::core::BSTR>, newcoll: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    TuningSpacesForCLSID: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub _TuningSpacesForCLSID2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, spaceclsid: *const ::windows::core::GUID, newcoll: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    _TuningSpacesForCLSID2: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub TuningSpacesForName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, name: ::std::mem::MaybeUninit<::windows::core::BSTR>, newcoll: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    TuningSpacesForName: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub FindID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tuningspace: *mut ::core::ffi::c_void, id: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    FindID: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Add: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, tuningspace: *mut ::core::ffi::c_void, newindex: *mut super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Add: usize,
    pub EnumTuningSpaces: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Remove: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, index: super::super::super::System::Com::VARIANT) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Remove: usize,
    pub MaxCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, maxcount: *mut i32) -> ::windows::core::HRESULT,
    pub SetMaxCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, maxcount: i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct ITuningSpaces(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl ITuningSpaces {
    pub unsafe fn Count(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).Count)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn _NewEnum(&self) -> ::windows::core::Result<super::super::super::System::Ole::IEnumVARIANT> {
        let mut result__ = ::windows::core::zeroed::<super::super::super::System::Ole::IEnumVARIANT>();
        (::windows::core::Interface::vtable(self)._NewEnum)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn get_Item(&self, varindex: super::super::super::System::Com::VARIANT) -> ::windows::core::Result<ITuningSpace> {
        let mut result__ = ::windows::core::zeroed::<ITuningSpace>();
        (::windows::core::Interface::vtable(self).get_Item)(::windows::core::Interface::as_raw(self), ::core::mem::transmute(varindex), &mut result__).from_abi(result__)
    }
    pub unsafe fn EnumTuningSpaces(&self) -> ::windows::core::Result<IEnumTuningSpaces> {
        let mut result__ = ::windows::core::zeroed::<IEnumTuningSpaces>();
        (::windows::core::Interface::vtable(self).EnumTuningSpaces)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(ITuningSpaces, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for ITuningSpaces {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for ITuningSpaces {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for ITuningSpaces {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ITuningSpaces").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for ITuningSpaces {
    type Vtable = ITuningSpaces_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for ITuningSpaces {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for ITuningSpaces {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x901284e4_33fe_4b69_8d63_634a596f3756);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct ITuningSpaces_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub Count: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows::core::HRESULT,
    #[cfg(feature = "Win32_System_Ole")]
    pub _NewEnum: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    _NewEnum: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub get_Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, varindex: super::super::super::System::Com::VARIANT, tuningspace: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    get_Item: usize,
    pub EnumTuningSpaces: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, newenum: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IXDSCodec(::windows::core::IUnknown);
impl IXDSCodec {
    pub unsafe fn XDSToRatObjOK(&self) -> ::windows::core::Result<::windows::core::HRESULT> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::HRESULT>();
        (::windows::core::Interface::vtable(self).XDSToRatObjOK)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCCSubstreamService(&self, substreammask: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetCCSubstreamService)(::windows::core::Interface::as_raw(self), substreammask).ok()
    }
    pub unsafe fn CCSubstreamService(&self) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).CCSubstreamService)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetContentAdvisoryRating(&self, prat: *mut i32, ppktseqid: *mut i32, pcallseqid: *mut i32, ptimestart: *mut i64, ptimeend: *mut i64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetContentAdvisoryRating)(::windows::core::Interface::as_raw(self), prat, ppktseqid, pcallseqid, ptimestart, ptimeend).ok()
    }
    pub unsafe fn GetXDSPacket(&self, pxdsclasspkt: *mut i32, pxdstypepkt: *mut i32, pbstrxdspkt: *mut ::windows::core::BSTR, ppktseqid: *mut i32, pcallseqid: *mut i32, ptimestart: *mut i64, ptimeend: *mut i64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetXDSPacket)(::windows::core::Interface::as_raw(self), pxdsclasspkt, pxdstypepkt, ::core::mem::transmute(pbstrxdspkt), ppktseqid, pcallseqid, ptimestart, ptimeend).ok()
    }
    pub unsafe fn GetCurrLicenseExpDate(&self, prottype: *const ProtType) -> ::windows::core::Result<i32> {
        let mut result__ = ::windows::core::zeroed::<i32>();
        (::windows::core::Interface::vtable(self).GetCurrLicenseExpDate)(::windows::core::Interface::as_raw(self), prottype, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetLastErrorCode(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetLastErrorCode)(::windows::core::Interface::as_raw(self)).ok()
    }
}
::windows::imp::interface_hierarchy!(IXDSCodec, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IXDSCodec {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IXDSCodec {}
impl ::core::fmt::Debug for IXDSCodec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IXDSCodec").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IXDSCodec {
    type Vtable = IXDSCodec_Vtbl;
}
impl ::core::clone::Clone for IXDSCodec {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IXDSCodec {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4b3_0049_4e2b_98fb_9537f6ce516d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IXDSCodec_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub XDSToRatObjOK: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phrcocreateretval: *mut ::windows::core::HRESULT) -> ::windows::core::HRESULT,
    pub SetCCSubstreamService: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, substreammask: i32) -> ::windows::core::HRESULT,
    pub CCSubstreamService: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psubstreammask: *mut i32) -> ::windows::core::HRESULT,
    pub GetContentAdvisoryRating: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prat: *mut i32, ppktseqid: *mut i32, pcallseqid: *mut i32, ptimestart: *mut i64, ptimeend: *mut i64) -> ::windows::core::HRESULT,
    pub GetXDSPacket: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pxdsclasspkt: *mut i32, pxdstypepkt: *mut i32, pbstrxdspkt: *mut ::std::mem::MaybeUninit<::windows::core::BSTR>, ppktseqid: *mut i32, pcallseqid: *mut i32, ptimestart: *mut i64, ptimeend: *mut i64) -> ::windows::core::HRESULT,
    pub GetCurrLicenseExpDate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prottype: *const ProtType, lpdatetime: *mut i32) -> ::windows::core::HRESULT,
    pub GetLastErrorCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
pub struct IXDSCodecConfig(::windows::core::IUnknown);
impl IXDSCodecConfig {
    pub unsafe fn GetSecureChannelObject(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__ = ::windows::core::zeroed::<::windows::core::IUnknown>();
        (::windows::core::Interface::vtable(self).GetSecureChannelObject)(::windows::core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPauseBufferTime(&self, dwpausebuffertime: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPauseBufferTime)(::windows::core::Interface::as_raw(self), dwpausebuffertime).ok()
    }
}
::windows::imp::interface_hierarchy!(IXDSCodecConfig, ::windows::core::IUnknown);
impl ::core::cmp::PartialEq for IXDSCodecConfig {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IXDSCodecConfig {}
impl ::core::fmt::Debug for IXDSCodecConfig {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IXDSCodecConfig").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for IXDSCodecConfig {
    type Vtable = IXDSCodecConfig_Vtbl;
}
impl ::core::clone::Clone for IXDSCodecConfig {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows::core::ComInterface for IXDSCodecConfig {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4d3_0049_4e2b_98fb_9537f6ce516d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IXDSCodecConfig_Vtbl {
    pub base__: ::windows::core::IUnknown_Vtbl,
    pub GetSecureChannelObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppunkdrmsecurechannel: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub SetPauseBufferTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwpausebuffertime: u32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IXDSCodecEvents(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IXDSCodecEvents {}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IXDSCodecEvents, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IXDSCodecEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IXDSCodecEvents {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IXDSCodecEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IXDSCodecEvents").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IXDSCodecEvents {
    type Vtable = IXDSCodecEvents_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IXDSCodecEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IXDSCodecEvents {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4c3_0049_4e2b_98fb_9537f6ce516d);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IXDSCodecEvents_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IXDSToRat(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IXDSToRat {
    pub unsafe fn Init(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Init)(::windows::core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ParseXDSBytePair(&self, byte1: u8, byte2: u8, pensystem: *mut EnTvRat_System, penlevel: *mut EnTvRat_GenericLevel, plbfenattributes: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ParseXDSBytePair)(::windows::core::Interface::as_raw(self), byte1, byte2, pensystem, penlevel, plbfenattributes).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(IXDSToRat, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IXDSToRat {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IXDSToRat {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IXDSToRat {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IXDSToRat").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for IXDSToRat {
    type Vtable = IXDSToRat_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IXDSToRat {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for IXDSToRat {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc5c5c5b0_3abc_11d6_b25b_00c04fa0c026);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IXDSToRat_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
    pub Init: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub ParseXDSBytePair: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, byte1: u8, byte2: u8, pensystem: *mut EnTvRat_System, penlevel: *mut EnTvRat_GenericLevel, plbfenattributes: *mut i32) -> ::windows::core::HRESULT,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct _IMSVidCtlEvents(::windows::core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl _IMSVidCtlEvents {}
#[cfg(feature = "Win32_System_Com")]
::windows::imp::interface_hierarchy!(_IMSVidCtlEvents, ::windows::core::IUnknown, super::super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for _IMSVidCtlEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for _IMSVidCtlEvents {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for _IMSVidCtlEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("_IMSVidCtlEvents").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::Interface for _IMSVidCtlEvents {
    type Vtable = _IMSVidCtlEvents_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for _IMSVidCtlEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows::core::ComInterface for _IMSVidCtlEvents {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb0edf164_910a_11d2_b632_00c04f79498e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct _IMSVidCtlEvents_Vtbl {
    pub base__: super::super::super::System::Com::IDispatch_Vtbl,
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ANALOG_AUXIN_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x742ef867_09e1_40a3_82d3_9669ba35325f);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ANALOG_FM_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x7728087b_2bb9_4e30_8078_449476e59dbb);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ANALOG_TV_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb820d87e_e0e3_478f_8a38_4e13f7b3df42);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSCChannelTuneRequest: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0369b4e6_45b6_11d3_b650_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSCComponentType: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa8dcf3d5_0780_4ef4_8a83_2cffaacb8ace);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSCLocator: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8872ff1b_98fa_4d7a_8d93_c9f1055f85bb);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSCTuningSpace: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa2e30750_6c3d_11d3_b653_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_EIT_TID: u32 = 203u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_ETM_LOCATION_IN_PTC_FOR_EVENT: u32 = 2u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_ETM_LOCATION_IN_PTC_FOR_PSIP: u32 = 1u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_ETM_LOCATION_NOT_PRESENT: u32 = 0u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_ETM_LOCATION_RESERVED: u32 = 3u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_ETT_TID: u32 = 204u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_MGT_PID: u32 = 8187u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_MGT_TID: u32 = 199u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_PIT_TID: u32 = 208u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_RRT_PID: u32 = 8187u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_RRT_TID: u32 = 202u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_STT_PID: u32 = 8187u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_STT_TID: u32 = 205u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_TERRESTRIAL_TV_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0dad2fdd_5fd7_11d3_8f50_00c04f7971e2);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_VCT_CABL_TID: u32 = 201u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_VCT_PID: u32 = 8187u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ATSC_VCT_TERR_TID: u32 = 200u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const AnalogAudioComponentType: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x28ab0005_e845_4ffa_aa9b_f4665236141c);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const AnalogLocator: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x49638b91_48ab_48b7_a47a_7d0e75a08ede);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const AnalogRadioTuningSpace: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8a674b4c_1f63_11d3_b64c_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const AnalogTVTuningSpace: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8a674b4d_1f63_11d3_b64c_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const AudioType_Commentary: u32 = 5u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const AudioType_Dialogue: u32 = 4u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const AudioType_Emergency: u32 = 6u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const AudioType_Hearing_Impaired: u32 = 3u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const AudioType_Music_And_Effects: u32 = 1u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const AudioType_Reserved: i32 = -1i32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const AudioType_Standard: u32 = 0u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const AudioType_Visually_Impaired: u32 = 2u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const AudioType_Voiceover: u32 = 7u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const AuxInTuningSpace: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf9769a06_7aca_4e39_9cfb_97bb35f0e77e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const BDANETWORKTYPE_ATSC: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x71985f51_1ca1_11d3_9cc8_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const BDA_DEBUG_DATA_AVAILABLE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x69c24f54_9983_497e_b415_282be4c555fb);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const BDA_DEBUG_DATA_TYPE_STRING: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa806e767_de5c_430c_80bf_a21ebe06c748);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const BSKYB_TERRESTRIAL_TV_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9e9e46c6_3aba_4f08_ad0e_cc5ac8148c2b);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const BroadcastEventService: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0b3ffb92_0919_4934_9d5b_619c719d0202);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CLSID_CPCAFiltersCategory: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4fc_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CLSID_DTFilterEncProperties: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c482_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CLSID_DTFilterTagProperties: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c492_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CLSID_ETFilterEncProperties: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c481_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CLSID_ETFilterTagProperties: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c491_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CLSID_Mpeg2TableFilter: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x752845f1_758f_4c83_a043_4270c593308e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CLSID_PTFilter: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9cd31617_b303_4f96_8330_2eb173ea4dc6);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CLSID_XDSCodecProperties: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c483_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CLSID_XDSCodecTagProperties: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c493_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const COMPONENT_TAG_CAPTION_MAX: u32 = 55u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const COMPONENT_TAG_CAPTION_MIN: u32 = 48u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const COMPONENT_TAG_SUPERIMPOSE_MAX: u32 = 63u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const COMPONENT_TAG_SUPERIMPOSE_MIN: u32 = 56u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CXDSData: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4f4_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ChannelIDTuneRequest: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3a9428a7_31a4_45e9_9efb_e055bf7bb3db);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ChannelIDTuningSpace: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xcc829a2f_3365_463f_af13_81dbb6f3a555);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ChannelTuneRequest: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0369b4e5_45b6_11d3_b650_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Component: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x59dc47a8_116c_11d3_9d8e_00c04f72d980);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ComponentType: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x823535a0_0318_11d3_9d8e_00c04f72d980);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ComponentTypes: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa1a2b1c4_0e3a_11d3_9d8e_00c04f72d980);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Components: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x809b6661_94c4_49e6_b6ec_3f0f862215aa);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CreatePropBagOnRegKey: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8a674b49_1f63_11d3_b64c_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DIGITAL_CABLE_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x143827ab_f77b_498d_81ca_5a007aec28bf);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DIRECT_TV_SATELLITE_TV_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x93b66fb5_93d4_4323_921c_c1f52df61d3f);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DSATTRIB_BadSampleInfo: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xe4846dda_5838_42b4_b897_6f7e5faa2f2f);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DSATTRIB_WMDRMProtectionInfo: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x40749583_6b9d_4eec_b43c_67a1801e1a9b);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DTFilter: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4f2_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DTV_CardStatus_Error: u32 = 2u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DTV_CardStatus_FirmwareDownload: u32 = 3u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DTV_CardStatus_Inserted: u32 = 0u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DTV_CardStatus_Removed: u32 = 1u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DTV_Entitlement_CanDecrypt: u32 = 0u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DTV_Entitlement_NotEntitled: u32 = 1u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DTV_Entitlement_TechnicalFailure: u32 = 2u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DTV_MMIMessage_Close: u32 = 1u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DTV_MMIMessage_Open: u32 = 0u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVBCLocator: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc531d9fd_9685_4028_8b68_6e1232079f1e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVBSLocator: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1df7d126_4050_47f0_a7cf_4c4ca9241333);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVBSTuningSpace: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb64016f3_c9a2_4066_96f0_bd9563314726);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVBS_SCAN_TABLE_MAX_SIZE: u32 = 400u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVBTLocator: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9cd64701_bdf3_4d14_8e03_f12983d86664);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVBTLocator2: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xefe3fa02_45d7_4920_be96_53fa7f35b0e6);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVBTuneRequest: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x15d6504a_5494_499c_886c_973c9e53b9f1);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVBTuningSpace: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc6b14b32_76aa_4a86_a7ac_5c79aaf58da7);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_BAT_PID: u32 = 17u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_BAT_TID: u32 = 74u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_CABLE_TV_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xdc0c0fe7_0485_4266_b93f_68fbf80ed834);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_DIT_PID: u32 = 30u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_DIT_TID: u32 = 126u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_EIT_ACTUAL_TID: u32 = 78u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_EIT_OTHER_TID: u32 = 79u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_EIT_PID: u32 = 18u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_NIT_ACTUAL_TID: u32 = 64u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_NIT_OTHER_TID: u32 = 65u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_NIT_PID: u32 = 16u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_RST_PID: u32 = 19u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_RST_TID: u32 = 113u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_SATELLITE_TV_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xfa4b375a_45b4_4d45_8440_263957b11623);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_SDT_ACTUAL_TID: u32 = 66u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_SDT_OTHER_TID: u32 = 70u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_SDT_PID: u32 = 17u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_SIT_PID: u32 = 31u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_SIT_TID: u32 = 127u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_ST_PID_16: u32 = 16u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_ST_PID_17: u32 = 17u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_ST_PID_18: u32 = 18u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_ST_PID_19: u32 = 19u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_ST_PID_20: u32 = 20u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_ST_TID: u32 = 114u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_TDT_PID: u32 = 20u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_TDT_TID: u32 = 112u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_TERRESTRIAL_TV_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x216c62df_6d7f_4e9a_8571_05f14edb766a);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_TOT_PID: u32 = 20u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DVB_TOT_TID: u32 = 115u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DigitalCableLocator: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x03c06416_d127_407a_ab4c_fdd279abbe5d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DigitalCableTuneRequest: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x26ec0b63_aa90_458a_8df4_5659f2c8a18a);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DigitalCableTuningSpace: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd9bb4cee_b87a_47f1_ac92_b08d9c7813fc);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DigitalLocator: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6e50cc0d_c19b_4bf6_810b_5bd60761f5cc);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ECHOSTAR_SATELLITE_TV_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4f6b31b_c6bf_4759_886f_a7386dca27a0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ESEventFactory: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8e8a07da_71f8_40c1_a929_5e3a868ac2c6);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ESEventService: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc20447fc_ec60_475e_813f_d2b0a6decefe);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ETFilter: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4f1_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_ARIBcontentSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3a954083_93d0_463e_90b2_0742c496edf0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_AudioDescriptorSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x107bd41c_a6da_4691_8369_11b2cdaa288e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_AudioTypeSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x501cbfbe_b849_42ce_9be9_3db869fb82b3);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDAConditionalAccessTAG: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xefc3a459_ae8b_4b4a_8fe9_79a0d097f3ea);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDAEventingServicePendingEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5ca51711_5ddc_41a6_9430_e41b8b3bbc5b);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_CASBroadcastMMI: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x676876f0_1132_404c_a7ca_e72069a9d54f);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_CASCloseMMI: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5d0f550f_de2e_479d_8345_ec0e9557e8a2);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_CASOpenMMI: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x85dac915_e593_410d_8471_d6812105f28e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_CASReleaseTuner: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x20c1a16b_441f_49a5_bb5c_e9a04495c6c1);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_CASRequestTuner: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xcf39a9d8_f5d3_4685_be57_ed81dba46b27);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_DiseqCResponseAvailable: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xefa628f8_1f2c_4b67_9ea5_acf6fa9a1f36);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_EncoderSignalLock: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5ec90eb9_39fa_4cfc_b93f_00bb11077f5e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_FdcStatus: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x05f25366_d0eb_43d2_bc3c_682b863df142);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_FdcTableSection: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6a0cd757_4ce3_4e5b_9444_7187b87152c5);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_GPNVValueUpdate: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xff75c68c_f416_4e7e_bf17_6d55c5df1575);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_GuideDataAvailable: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x98db717a_478a_4cd4_92d0_95f66b89e5b1);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_GuideDataError: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xac33c448_6f73_4fd7_b341_594c360d8d74);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_GuideServiceInformationUpdated: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa1c3ea2b_175f_4458_b735_507d22db23a6);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_IsdbCASResponse: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd4cb1966_41bc_4ced_9a20_fdceac78f70d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_LbigsCloseConnectionHandle: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc2f08b99_65ef_4314_9671_e99d4cce0bae);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_LbigsOpenConnection: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x356207b2_6f31_4eb0_a271_b3fa6bb7680f);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_LbigsSendData: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1123277b_f1c6_4154_8b0d_48e6157059aa);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_RatingPinReset: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc6e048c0_c574_4c26_bcda_2f4d35eb5e85);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_TransprtStreamSelectorInfo: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc40f9f85_09d0_489c_9e9c_0abbb56951b0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_TunerNoSignal: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xe29b382b_1edd_4930_bc46_682fd72d2dfb);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_TunerSignalLock: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1872e740_f573_429b_a00e_d9c1e408af09);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_UpdateDrmStatus: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x65a6f681_1462_473b_88ce_cb731427bdb5);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_BDA_UpdateScanState: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x55702b50_7b49_42b8_a82f_4afb691b0628);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_CADenialCountChanged: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2a65c528_2249_4070_ac16_00390cdfb2dd);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_CASFailureSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xead831ae_5529_4d1f_afce_0d8cd1257d30);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_CSDescriptorSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xefe779d9_97f0_4786_800d_95cf505ddc66);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_CandidatePostTuneData: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9f02d3d0_9f06_4369_9f1e_3ad6ca19807e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_CardStatusChanged: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa265faea_f874_4b38_9ff7_c53d02969996);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_ChannelChangeSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9067c5e5_4c5c_4205_86c8_7afe20fe1efa);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_ChannelInfoSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x41f36d80_4132_4cc2_b121_01a43219d81b);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_ChannelTypeSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x72ab1d51_87d2_489b_ba11_0e08dc210243);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_CtxADescriptorSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3ab4a2e6_4247_4b34_896c_30afa5d21c24);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_DFNWithNoActualAVData: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf5689ffe_55f9_4bb3_96be_ae971c63bae0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_DRMParingStatusChanged: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x000906f5_f0d1_41d6_a7df_4028697669f6);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_DRMParingStepComplete: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5b2ebf78_b752_4420_b41e_a472dc95828e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_DTFilterCOPPBlock: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4ea_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_DTFilterCOPPUnblock: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4e8_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_DTFilterDataFormatFailure: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4ed_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_DTFilterDataFormatOK: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4ec_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_DTFilterRatingChange: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4e2_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_DTFilterRatingsBlock: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4e3_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_DTFilterRatingsUnblock: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4e4_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_DTFilterXDSPacket: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4e5_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_DVBScramblingControlSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x4bd4e1c4_90a1_4109_8236_27f00e7dcc5b);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_DemultiplexerFilterDiscontinuity: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x16155770_aed5_475c_bb98_95a33070df0c);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_DualMonoSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa9a29b56_a84b_488c_89d5_0d4e7657c8ce);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_DvbParentalRatingDescriptor: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2a67a58d_eca5_4eac_abcb_e734d3776d0a);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_EASMessageReceived: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd10df9d5_c261_4b85_9e8a_517b3299cab2);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_ETDTFilterLicenseFailure: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4ef_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_ETDTFilterLicenseOK: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4ee_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_ETFilterCopyNever: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4f0_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_ETFilterCopyOnce: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4eb_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_ETFilterEncryptionOff: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4e7_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_ETFilterEncryptionOn: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4e6_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_EmmMessageSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6bf00268_4f7e_4294_aa87_e9e953e43f14);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_EncDecFilterError: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4e9_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_EncDecFilterEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x4a1b465b_0fb9_4159_afbd_e33006a0f9f4);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_EntitlementChanged: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9071ad5d_2359_4c95_8694_afa81d70bfd5);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_FormatNotSupportedEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x24b2280a_b2aa_4777_bf65_63f35e7b024a);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_LanguageSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xe292666d_9c02_448d_aa8d_781a93fdc395);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_MMIMessage: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x052c29af_09a4_4b93_890f_bd6a348968a4);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_NewSignalAcquired: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc87ec52d_cd18_404a_a076_c02a273d3de7);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_PBDAParentalControlEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf947aa85_fb52_48e8_b9c5_e1e1f411a51a);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_PIDListSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x47fc8f65_e2bb_4634_9cef_fdbfe6261d5c);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_PSITable: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1b9c3703_d447_4e16_97bb_01799fc031ed);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_RRTSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf6cfc8f4_da93_4f2f_bff8_ba1ee6fca3a2);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_SBE2RecControlStarted: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8966a89e_f83e_4c0e_bc3b_bfa7649e04cb);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_SBE2RecControlStopped: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x454b1ec8_0c9b_4caa_b1a1_1e7a2666f6c3);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_STBChannelNumber: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x17c4d730_d0f0_413a_8c99_500469de35ad);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_ServiceTerminated: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0a1d591c_e0d2_4f8e_8960_2335bef45ccb);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_SignalAndServiceStatusSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8068c5cb_3c04_492b_b47d_0308820dce51);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_SignalStatusChanged: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6d9cfaf2_702d_4b01_8dff_6892ad20d191);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_StreamIDSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xcaf1ab68_e153_4d41_a6b3_a7c998db75ee);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_StreamTypeSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x82af2ebc_30a6_4264_a80b_ad2e1372ac60);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_SubtitleSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5dcec048_d0b9_4163_872c_4f32223be88a);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_TeletextSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9599d950_5f33_4617_af7c_1e54b510daa3);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_TuneFailureEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd97287b2_2dfd_436a_9485_99d7d4ab5a69);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_TuneFailureSpanningEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6f8aa455_5ee1_48ab_a27c_4c8d70b9aeba);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_TuningChanged: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9d7e6235_4b7d_425d_a6d1_d717c33b9c4c);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_TuningChanging: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x83183c03_c09e_45c4_a719_807a94952bf9);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_XDSCodecDuplicateXDSRating: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4df_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_XDSCodecNewXDSPacket: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4e1_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTID_XDSCodecNewXDSRating: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4e0_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EVENTTYPE_CASDescrambleFailureEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb2127d42_7be5_4f4b_9130_6679899f4f4b);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EvalRat: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc5c5c5f1_3abc_11d6_b25b_00c04fa0c026);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const FORMATTYPE_CPFilters_Processed: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6739b36f_1d5f_4ac2_8192_28bb0e73d16a);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const FORMATTYPE_ETDTFilter_Tagged: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4d1_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDBSLocator: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6504afed_a629_455c_a7f1_04964dea5cc4);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_BIT_PID: u32 = 36u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_BIT_TID: u32 = 196u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_CABLE_TV_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc974ddb5_41fe_4b25_9741_92f049f1d5d1);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_CDT_PID: u32 = 41u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_CDT_TID: u32 = 200u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_EMM_TID: u32 = 133u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_LDT_PID: u32 = 37u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_LDT_TID: u32 = 199u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_NBIT_MSG_TID: u32 = 197u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_NBIT_PID: u32 = 37u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_NBIT_REF_TID: u32 = 198u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_SATELLITE_TV_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb0a4e6a0_6a1a_4b83_bb5b_903e1d90e6b6);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_SDTT_ALT_PID: u32 = 40u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_SDTT_PID: u32 = 35u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_SDTT_TID: u32 = 195u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_ST_TID: u32 = 114u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_S_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa1e78202_1459_41b1_9ca9_2a92587a42cc);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_TERRESTRIAL_TV_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x95037f6f_3ac7_4452_b6c4_45a9ce9292a2);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ISDB_T_NETWORK_TYPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xfc3855a6_c901_4f2e_aba8_90815afc6c83);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSCATEGORY_BDA_IP_SINK: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x71985f4a_1ca1_11d3_9cc8_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSCATEGORY_BDA_NETWORK_EPG: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x71985f49_1ca1_11d3_9cc8_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSCATEGORY_BDA_NETWORK_PROVIDER: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x71985f4b_1ca1_11d3_9cc8_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSCATEGORY_BDA_NETWORK_TUNER: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x71985f48_1ca1_11d3_9cc8_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSCATEGORY_BDA_RECEIVER_COMPONENT: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xfd0a5af4_b41d_11d2_9c95_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSCATEGORY_BDA_TRANSPORT_INFORMATION: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa2e3074f_6c3d_11d3_b653_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_SPECIFIER_BDA_IP: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6b891420_db09_11d2_8f32_00c04f7971e2);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_SPECIFIER_BDA_TRANSPORT: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8deda6fd_ac5f_4334_8ecf_a4ba8fa7d0f0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_SUBTYPE_ATSC_SI: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb3c7397c_d303_414d_b33c_4ed2c9d29733);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_SUBTYPE_BDA_IP: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5a9a213c_db08_11d2_8f32_00c04f7971e2);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_SUBTYPE_BDA_IP_CONTROL: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x499856e8_e85b_48ed_9bea_410d0dd4ef81);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_SUBTYPE_BDA_MPEG2_TRANSPORT: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf4aeb342_0329_4fdd_a8fd_4aff4926c978);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_SUBTYPE_BDA_OPENCABLE_OOB_PSIP: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x951727db_d2ce_4528_96f6_3301fabb2de0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_SUBTYPE_BDA_OPENCABLE_PSIP: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x762e3f66_336f_48d1_bf83_2b00352c11f0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_SUBTYPE_DVB_SI: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xe9dd31a3_221d_4adb_8532_9af309c1a408);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_SUBTYPE_ISDB_SI: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x4a2eeb99_6458_4538_b187_04017c41413f);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_SUBTYPE_PBDA_TRANSPORT_RAW: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0d7aed42_cb9a_11db_9705_005056c00008);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_TYPE_BDA_ANTENNA: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x71985f41_1ca1_11d3_9cc8_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_TYPE_BDA_IF_SIGNAL: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x61be0b47_a5eb_499b_9a85_5b16c07f1258);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_TYPE_BDA_IP: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xe25f7b8e_cccc_11d2_8f25_00c04f7971e2);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_TYPE_BDA_IP_CONTROL: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xdadd5799_7d5b_4b63_80fb_d1442f26b621);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_TYPE_MPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x455f176c_4b06_47ce_9aef_8caef73df7b5);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSDATAFORMAT_TYPE_MPEG2_SECTIONS: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x455f176c_4b06_47ce_9aef_8caef73df7b5);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSEVENTSETID_BdaCAEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x488c4ccc_b768_4129_8eb1_b00a071f9068);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSEVENTSETID_BdaDiseqCEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8b19bbf0_4184_43ac_ad3c_0c889be4c212);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSEVENTSETID_BdaEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xae7e55b2_96d7_4e29_908f_62f95b2a1679);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSEVENTSETID_BdaPinEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x104781cd_50bd_40d5_95fb_087e0e86a591);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSEVENTSETID_BdaTunerEvent: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xaab59e17_01c9_4ebf_93f2_fc3b79b46f91);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaChangeSync: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xfd0a5af3_b41d_11d2_9c95_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaConditionalAccessService: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x10ced3b4_320b_41bf_9824_1b2e68e71eb9);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaDebug: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0d4a90ec_c69d_4ee2_8c5a_fb1f63a50da1);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaDeviceConfiguration: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x71985f45_1ca1_11d3_9cc8_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaDrmService: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xbff6b5bb_b0ae_484c_9dca_73528fb0b46e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaEventing: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf99492da_6193_4eb0_8690_6686cbff713e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaGuideDataDeliveryService: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8d9d5562_1589_417d_99ce_ac531dda19f9);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaIsdbConditionalAccess: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5e68c627_16c2_4e6c_b1e2_d00170cdaa0f);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaMux: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x942aafec_4c05_4c74_b8eb_8706c2a4943f);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaNameValue: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x36e07304_9f0d_4e88_9118_ac0ba317b7f2);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaNameValueA: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0c24096d_5ff5_47de_a856_062e587e3727);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaScanning: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x12eb49df_6249_47f3_b190_e21e6e2f8a9c);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaTSSelector: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1dcfafe9_b45e_41b3_bb2a_561eb129ae98);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaTuner: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb774102f_ac07_478a_8228_2742d961fa7e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaUserActivity: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xeda5c834_4531_483c_be0a_94e6c96ff396);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaWmdrmSession: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x4be6fa3d_07cd_4139_8b80_8c18ba3aec88);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHODSETID_BdaWmdrmTuner: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x86d979cf_a8a7_4f94_b5fb_14c0aca68fe6);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_8PSK_DEMODULATOR: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xe957a0e7_dd98_4a3c_810b_3525157ab62e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_8VSB_DEMODULATOR: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x71985f4f_1ca1_11d3_9cc8_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_ANALOG_DEMODULATOR: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x634db199_27dd_46b8_acfb_ecc98e61a2ad);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_COFDM_DEMODULATOR: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2dac6e05_edbe_4b9c_b387_1b6fad7d6495);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_COMMON_CA_POD: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd83ef8fc_f3b8_45ab_8b71_ecf7c339deb4);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_DRI_DRM: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x4f95ad74_cefb_42d2_94a9_68c5b2c1aabe);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_IP_SINK: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x71985f4e_1ca1_11d3_9cc8_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_ISDB_S_DEMODULATOR: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xedde230a_9086_432d_b8a5_6670263807e9);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_ISDB_T_DEMODULATOR: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xfcea3ae3_2cb2_464d_8f5d_305c0bb778a2);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_OPENCABLE_POD: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x345812a0_fb7c_4790_aa7e_b1db88ac19c9);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_PBDA_CAS: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc026869f_7129_4e71_8696_ec8f75299b77);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_PBDA_DRM: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9eeebd03_eea1_450f_96ae_633e6de63cce);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_PBDA_ISDBCAS: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf2cf2ab3_5b9d_40ae_ab7c_4e7ad0bd1c52);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_PBDA_MUX: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf88c7787_6678_4f4b_a13e_da09861d682b);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_PBDA_TUNER: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xaa5e8286_593c_4979_9494_46a2a9dfe076);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_PID_FILTER: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf5412789_b0a0_44e1_ae4f_ee999b1b7fbe);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_QAM_DEMODULATOR: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x71985f4d_1ca1_11d3_9cc8_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_QPSK_DEMODULATOR: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6390c905_27c1_4d67_bdb7_77c50d079300);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_RF_TUNER: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x71985f4c_1ca1_11d3_9cc8_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_TS_SELECTOR: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5eddf185_fed1_4f45_9685_bbb73c323cfc);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSNODE_BDA_VIDEO_ENCODER: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd98429e3_65c9_4ac4_93aa_766782833b7a);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaAutodemodulate: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xddf15b12_bd25_11d2_9ca0_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaCA: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb0693766_5278_4ec6_b9e1_3ce40560ef5a);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaDigitalDemodulator: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xef30f379_985b_4d10_b640_a79d5e04e1e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaDiseqCommand: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf84e2ab0_3c6b_45e3_a0fc_8669d4b81f11);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaEthernetFilter: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x71985f43_1ca1_11d3_9cc8_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaFrequencyFilter: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x71985f47_1ca1_11d3_9cc8_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaIPv4Filter: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x71985f44_1ca1_11d3_9cc8_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaIPv6Filter: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xe1785a74_2a23_4fb3_9245_a8f88017ef33);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaLNBInfo: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x992cf102_49f9_4719_a664_c4f23e2408f4);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaNullTransform: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xddf15b0d_bd25_11d2_9ca0_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaPIDFilter: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd0a67d65_08df_4fec_8533_e5b550410b85);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaPinControl: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0ded49d5_a8b7_4d5d_97a1_12b0c195874d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaSignalStats: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1347d106_cf3a_428a_a5cb_ac0d9a2a4338);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaTableSection: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x516b99c5_971c_4aaf_b3f3_d9fda8a15e16);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaTopology: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa14ee835_0a23_11d3_9cc7_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPSETID_BdaVoidTransform: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x71985f46_1ca1_11d3_9cc8_00c04f7971e0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const LanguageComponentType: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1be49f30_0e1b_11d3_9d8e_00c04f72d980);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Locator: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0888c883_ac4f_4943_b516_2c38d9b34562);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MAX_COUNTRY_CODE_STRING: u32 = 3u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MEDIASUBTYPE_CPFilters_Processed: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x46adbd28_6fd0_4796_93b2_155c51dc048d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MEDIASUBTYPE_ETDTFilter_Tagged: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4d0_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG2Component: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x055cb2d7_2969_45cd_914b_76890722f112);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG2ComponentType: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x418008f3_cf67_4668_9628_10dc52be1d08);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG2TuneRequest: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0955ac62_bf2e_4cba_a2b9_a63f772d46cf);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG2TuneRequestFactory: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2c63e4eb_4cea_41b8_919c_e947ea19a77c);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG2_FILTER_VERSION_1_SIZE: u32 = 124u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG2_FILTER_VERSION_2_SIZE: u32 = 133u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_CAT_PID: u32 = 1u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_CAT_TID: u32 = 1u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_PAT_PID: u32 = 0u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_PAT_TID: u32 = 0u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_PMT_TID: u32 = 2u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_TSDT_PID: u32 = 2u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_TSDT_TID: u32 = 3u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSEventBinder: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x577faa18_4518_445e_8f70_1473f8cf4ba4);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidAnalogCaptureToCCA: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x942b7909_a28e_49a1_a207_34ebcbcb4b3b);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidAnalogCaptureToDataServices: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc5702cd6_9b79_11d3_b654_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidAnalogCaptureToOverlayMixer: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xe18af75a_08af_11d3_b64a_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidAnalogCaptureToStreamBufferSink: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9f50e8b1_9530_4ddc_825e_1af81d47aed6);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidAnalogCaptureToXDS: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3540d440_5b1d_49cb_821a_e84b8cf065a7);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidAnalogTVToEncoder: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x28953661_0231_41db_8986_21ff4388ee9b);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidAnalogTunerDevice: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1c15d484_911d_11d2_b632_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidAudioRenderer: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37b03544_a4c8_11d2_b634_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidAudioRendererDevices: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc5702ccf_9b79_11d3_b654_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidBDATunerDevice: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa2e3074e_6c3d_11d3_b653_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidCCA: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x86151827_e47b_45ee_8421_d10e6e690979);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidCCAToStreamBufferSink: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3ef76d68_8661_4843_8b8f_c37163d8c9ce);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidCCToAR: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd76334ca_d89e_4baf_86ab_ddb59372afc2);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidCCToVMR: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4bf2784_ae00_41ba_9828_9c953bd3c54a);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidClosedCaptioning: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x7f9cb14d_48e4_43b6_9346_1aebc39c64d3);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidClosedCaptioningSI: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x92ed88bf_879e_448f_b6b6_a385bceb846d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidCtl: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb0edf163_910a_11d2_b632_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidDataServices: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x334125c0_77e5_11d3_b653_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidDataServicesToStreamBufferSink: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x38f03426_e83b_4e68_b65b_dcae73304838);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidDataServicesToXDS: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0429ec6e_1144_4bed_b88b_2fb9899a4a3d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidDevice: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6e40476f_9c49_4c3e_8bb9_8587958eff74);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidDevice2: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x30997f7d_b3b5_4a1c_983a_1fe8098cb77d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidDigitalCaptureToCCA: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x73d14237_b9db_4efa_a6dd_84350421fb2f);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidDigitalCaptureToITV: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5d8e73f7_4989_4ac8_8a98_39ba0d325302);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidDigitalCaptureToStreamBufferSink: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xabe40035_27c3_4a2f_8153_6624471608af);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidEVR: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc45268a2_fa81_4e19_b1e3_72edbd60aeda);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidEncoder: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xbb530c63_d9df_4b49_9439_63453962e598);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidEncoderToStreamBufferSink: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa0b9b497_afbc_45ad_a8a6_9b077c40d4f2);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidFeature: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x7748530b_c08a_47ea_b24c_be8695ff405f);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidFeatures: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc5702cd0_9b79_11d3_b654_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidFilePlaybackDevice: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37b0353c_a4c8_11d2_b634_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidFilePlaybackToAudioRenderer: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xcc23f537_18d4_4ece_93bd_207a84726979);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidFilePlaybackToVideoRenderer: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb401c5eb_8457_427f_84ea_a4d2363364b0);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidGenericComposite: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2764bce5_cc39_11d2_b639_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidGenericSink: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x4a5869cf_929d_4040_ae03_fcafc5b9cd42);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidITVCapture: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5740a302_ef0b_45ce_bf3b_4470a14a8980);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidITVPlayback: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9e797ed0_5253_4243_a9b7_bd06c58f8ef3);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidITVToStreamBufferSink: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x92b94828_1af7_4e6e_9ebf_770657f77af5);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidInputDevice: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xac1972f2_138a_4ca3_90da_ae51112eda28);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidInputDevices: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc5702ccc_9b79_11d3_b654_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidMPEG2DecoderToClosedCaptioning: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6ad28ee1_5002_4e71_aaf7_bd077907b1a4);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidOutput: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x87eb890d_03ad_4e9d_9866_376e5ec572ed);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidOutputDevices: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc5702ccd_9b79_11d3_b654_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidRect: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xcb4276e6_7d5f_4cf1_9727_629c5e6db6ae);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidSBESourceToCC: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9193a8f9_0cba_400e_aa97_eb4709164576);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidSBESourceToGenericSink: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x991da7e5_953f_435b_be5e_b92a05edfc42);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidSBESourceToITV: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2291478c_5ee3_4bef_ab5d_b5ff2cf58352);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidStreamBufferRecordingControl: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xcaafdd83_cefc_4e3d_ba03_175f17a24f91);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidStreamBufferSink: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x9e77aac4_35e5_42a1_bdc2_8f3ff399847c);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidStreamBufferSource: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xad8e510d_217f_409b_8076_29c5e73b98e8);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidStreamBufferSourceToVideoRenderer: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3c4708dc_b181_46a8_8da8_4ab0371758cd);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidStreamBufferV2Source: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xfd351ea1_4173_4af4_821d_80d4ae979048);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidVMR9: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x24dc3975_09bf_4231_8655_3ee71f43837d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidVideoInputDevice: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x95f4820b_bb3a_4e2d_bc64_5b817bc2c30e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidVideoPlaybackDevice: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1990d634_1a5e_4071_a34a_53aaffce9f36);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidVideoRenderer: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x37b03543_a4c8_11d2_b634_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidVideoRendererDevices: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc5702cce_9b79_11d3_b654_00c04f79498e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidWebDVD: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x011b3619_fe63_4814_8a84_15a194ce9ce3);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidWebDVDAdm: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xfa7c375b_66a7_4280_879d_fd459c84bb02);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidWebDVDToAudioRenderer: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x8d04238e_9fd1_41c6_8de3_9e1ee309e935);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidWebDVDToVideoRenderer: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x267db0b3_55e3_4902_949b_df8f5cec0191);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidXDS: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x0149eedf_d08f_4142_8d73_d23903d21e90);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Mpeg2Data: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc666e115_bb62_4027_a113_82d643fe2d99);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Mpeg2DataLib: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xdbaf6c1b_b6a4_4898_ae65_204f0d9509a1);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Mpeg2Stream: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xf91d96c7_8509_4d0b_ab26_a0dd10904bb7);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const OCUR_PAIRING_PROTOCOL_VERSION: u32 = 2u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PARENTAL_CONTROL_ATTRIB_DIALOGUE: u32 = 515u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PARENTAL_CONTROL_ATTRIB_FANTASY: u32 = 516u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PARENTAL_CONTROL_ATTRIB_LANGUAGE: u32 = 513u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PARENTAL_CONTROL_ATTRIB_SEXUAL: u32 = 514u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PARENTAL_CONTROL_ATTRIB_VIOLENCE: u32 = 512u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PARENTAL_CONTROL_CONTENT_RATING: u32 = 256u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PARENTAL_CONTROL_TIME_RANGE: u32 = 1u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PARENTAL_CONTROL_VALUE_UNDEFINED: u32 = 0u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PBDA_ALWAYS_TUNE_IN_MUX: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1e1d7141_583f_4ac2_b019_1f430eda0f4c);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PBDA_PAIRING_PROTOCOL_VERSION: u32 = 3u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PINNAME_BDA_ANALOG_AUDIO: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd28a580a_9b1f_4b0c_9c33_9bf0a8ea636b);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PINNAME_BDA_ANALOG_VIDEO: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5c0c8281_5667_486c_8482_63e31f01a6e9);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PINNAME_BDA_FM_RADIO: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd2855fed_b2d3_4eeb_9bd0_193436a2f890);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PINNAME_BDA_IF_PIN: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x1a9d4a42_f3cd_48a1_9aea_71de133cbe14);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PINNAME_BDA_OPENCABLE_PSIP_PIN: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x297bb104_e5c9_4ace_b123_95c3cbb24d4f);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PINNAME_BDA_TRANSPORT: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x78216a81_cfa8_493e_9711_36a61c08bd9d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PINNAME_IPSINK_INPUT: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x3fdffa70_ac9a_11d2_8f17_00c04f7971e2);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PINNAME_MPE: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc1b06d73_1dbb_11d3_8f46_00c04f7971e2);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PersistTuneXmlUtility: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xe77026b0_b97f_4cbb_b7fb_f4f03ad69f11);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const REQUIRED_PARENTAL_CONTROL_TIME_RANGE: u32 = 2u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SAMPLE_SEQ_CONTENT_B_FRAME: u32 = 3u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SAMPLE_SEQ_CONTENT_I_FRAME: u32 = 1u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SAMPLE_SEQ_CONTENT_NONREF_FRAME: u32 = 3u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SAMPLE_SEQ_CONTENT_P_FRAME: u32 = 2u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SAMPLE_SEQ_CONTENT_REF_FRAME: u32 = 2u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SAMPLE_SEQ_CONTENT_STANDALONE_FRAME: u32 = 1u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SAMPLE_SEQ_CONTENT_UNKNOWN: u32 = 0u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SAMPLE_SEQ_FRAME_START: u32 = 3u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SAMPLE_SEQ_GOP_HEADER: u32 = 2u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SAMPLE_SEQ_PICTURE_HEADER: u32 = 3u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SAMPLE_SEQ_SEEK_POINT: u32 = 2u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SAMPLE_SEQ_SEQUENCE_HEADER: u32 = 1u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SAMPLE_SEQ_SEQUENCE_START: u32 = 1u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SBE2_STREAM_DESC_EVENT: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x2313a4ed_bf2d_454f_ad8a_d95ba7f91fee);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SBE2_STREAM_DESC_VERSION: u32 = 1u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SBE2_V1_STREAMS_CREATION_EVENT: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x000fcf09_97f5_46ac_9769_7a83b35384fb);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SBE2_V2_STREAMS_CREATION_EVENT: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xa72530a3_0344_4cab_a2d0_fe937dbdcab3);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SCTE_EAS_IB_PID: u32 = 8187u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SCTE_EAS_OOB_PID: u32 = 8188u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SCTE_EAS_TID: u32 = 216u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SID_DRMSecureServiceChannel: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4c4_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SID_MSVidCtl_CurrentAudioEndpoint: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xcf9a88f4_abcf_4ed8_9b74_7db33445459e);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_EC_BASE: u32 = 806u32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_EC_CONTENT_BECOMING_STALE: i32 = 809i32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_EC_PRIMARY_AUDIO: i32 = 814i32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_EC_RATE_CHANGED: i32 = 813i32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_EC_RATE_CHANGING_FOR_SETPOSITIONS: i32 = 815i32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_EC_READ_FAILURE: i32 = 812i32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_EC_SETPOSITIONS_EVENTS_DONE: i32 = 816i32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_EC_STALE_DATA_READ: i32 = 807i32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_EC_STALE_FILE_DELETED: i32 = 808i32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_EC_TIMEHOLE: i32 = 806i32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_EC_WRITE_FAILURE: i32 = 810i32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_EC_WRITE_FAILURE_CLEAR: i32 = 811i32;
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SectionList: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x73da5d04_4347_45d3_a9dc_fae9ddbe558d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SystemTuningSpaces: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xd02aac50_027e_11d3_9d8e_00c04f72d980);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TIFLoad: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x14eb8748_1753_4393_95ae_4f7e7a87aad6);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TuneRequest: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xb46e0d38_ab35_4a06_a137_70576b01b39f);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TunerMarshaler: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x6438570b_0c08_4a25_9504_8012bb4d50cf);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TuningSpace: ::windows::core::GUID = ::windows::core::GUID::from_u128(0x5ffdc5e6_b83a_4b55_b6e8_c69e765fe9db);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const XDSCodec: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc4c4c4f3_0049_4e2b_98fb_9537f6ce516d);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const XDSToRat: ::windows::core::GUID = ::windows::core::GUID::from_u128(0xc5c5c5f0_3abc_11d6_b25b_00c04fa0c026);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingAlbumArtist: ::windows::core::PCWSTR = ::windows::core::w!("WM/AlbumArtist");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingAlbumCoverURL: ::windows::core::PCWSTR = ::windows::core::w!("WM/AlbumCoverURL");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingAlbumTitle: ::windows::core::PCWSTR = ::windows::core::w!("WM/AlbumTitle");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingAspectRatioX: ::windows::core::PCWSTR = ::windows::core::w!("AspectRatioX");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingAspectRatioY: ::windows::core::PCWSTR = ::windows::core::w!("AspectRatioY");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingAuthor: ::windows::core::PCWSTR = ::windows::core::w!("Author");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingBannerImageData: ::windows::core::PCWSTR = ::windows::core::w!("BannerImageData");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingBannerImageType: ::windows::core::PCWSTR = ::windows::core::w!("BannerImageType");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingBannerImageURL: ::windows::core::PCWSTR = ::windows::core::w!("BannerImageURL");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingBitrate: ::windows::core::PCWSTR = ::windows::core::w!("Bitrate");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingBroadcast: ::windows::core::PCWSTR = ::windows::core::w!("Broadcast");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingComposer: ::windows::core::PCWSTR = ::windows::core::w!("WM/Composer");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingCopyright: ::windows::core::PCWSTR = ::windows::core::w!("Copyright");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingCopyrightURL: ::windows::core::PCWSTR = ::windows::core::w!("CopyrightURL");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingCurrentBitrate: ::windows::core::PCWSTR = ::windows::core::w!("CurrentBitrate");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingDRM_Flags: ::windows::core::PCWSTR = ::windows::core::w!("DRM_Flags");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingDRM_Level: ::windows::core::PCWSTR = ::windows::core::w!("DRM_Level");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingDescription: ::windows::core::PCWSTR = ::windows::core::w!("Description");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingDuration: ::windows::core::PCWSTR = ::windows::core::w!("Duration");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingFileSize: ::windows::core::PCWSTR = ::windows::core::w!("FileSize");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingGenre: ::windows::core::PCWSTR = ::windows::core::w!("WM/Genre");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingGenreID: ::windows::core::PCWSTR = ::windows::core::w!("WM/GenreID");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingHasArbitraryDataStream: ::windows::core::PCWSTR = ::windows::core::w!("HasArbitraryDataStream");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingHasAttachedImages: ::windows::core::PCWSTR = ::windows::core::w!("HasAttachedImages");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingHasAudio: ::windows::core::PCWSTR = ::windows::core::w!("HasAudio");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingHasFileTransferStream: ::windows::core::PCWSTR = ::windows::core::w!("HasFileTransferStream");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingHasImage: ::windows::core::PCWSTR = ::windows::core::w!("HasImage");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingHasScript: ::windows::core::PCWSTR = ::windows::core::w!("HasScript");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingHasVideo: ::windows::core::PCWSTR = ::windows::core::w!("HasVideo");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingIsVBR: ::windows::core::PCWSTR = ::windows::core::w!("IsVBR");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingLyrics: ::windows::core::PCWSTR = ::windows::core::w!("WM/Lyrics");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingMCDI: ::windows::core::PCWSTR = ::windows::core::w!("WM/MCDI");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingNSCAddress: ::windows::core::PCWSTR = ::windows::core::w!("NSC_Address");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingNSCDescription: ::windows::core::PCWSTR = ::windows::core::w!("NSC_Description");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingNSCEmail: ::windows::core::PCWSTR = ::windows::core::w!("NSC_Email");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingNSCName: ::windows::core::PCWSTR = ::windows::core::w!("NSC_Name");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingNSCPhone: ::windows::core::PCWSTR = ::windows::core::w!("NSC_Phone");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingNumberOfFrames: ::windows::core::PCWSTR = ::windows::core::w!("NumberOfFrames");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingOptimalBitrate: ::windows::core::PCWSTR = ::windows::core::w!("OptimalBitrate");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingPromotionURL: ::windows::core::PCWSTR = ::windows::core::w!("WM/PromotionURL");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingProtected: ::windows::core::PCWSTR = ::windows::core::w!("Is_Protected");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingRating: ::windows::core::PCWSTR = ::windows::core::w!("Rating");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingSeekable: ::windows::core::PCWSTR = ::windows::core::w!("Seekable");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingSignature_Name: ::windows::core::PCWSTR = ::windows::core::w!("Signature_Name");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingSkipBackward: ::windows::core::PCWSTR = ::windows::core::w!("Can_Skip_Backward");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingSkipForward: ::windows::core::PCWSTR = ::windows::core::w!("Can_Skip_Forward");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingStridable: ::windows::core::PCWSTR = ::windows::core::w!("Stridable");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingTitle: ::windows::core::PCWSTR = ::windows::core::w!("Title");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingToolName: ::windows::core::PCWSTR = ::windows::core::w!("WM/ToolName");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingToolVersion: ::windows::core::PCWSTR = ::windows::core::w!("WM/ToolVersion");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingTrack: ::windows::core::PCWSTR = ::windows::core::w!("WM/Track");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingTrackNumber: ::windows::core::PCWSTR = ::windows::core::w!("WM/TrackNumber");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingTrusted: ::windows::core::PCWSTR = ::windows::core::w!("Is_Trusted");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingUse_DRM: ::windows::core::PCWSTR = ::windows::core::w!("Use_DRM");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const g_wszStreamBufferRecordingYear: ::windows::core::PCWSTR = ::windows::core::w!("WM/Year");
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct BDA_DigitalSignalStandard(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Bda_DigitalStandard_None: BDA_DigitalSignalStandard = BDA_DigitalSignalStandard(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Bda_DigitalStandard_DVB_T: BDA_DigitalSignalStandard = BDA_DigitalSignalStandard(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Bda_DigitalStandard_DVB_S: BDA_DigitalSignalStandard = BDA_DigitalSignalStandard(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Bda_DigitalStandard_DVB_C: BDA_DigitalSignalStandard = BDA_DigitalSignalStandard(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Bda_DigitalStandard_ATSC: BDA_DigitalSignalStandard = BDA_DigitalSignalStandard(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Bda_DigitalStandard_ISDB_T: BDA_DigitalSignalStandard = BDA_DigitalSignalStandard(16i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Bda_DigitalStandard_ISDB_S: BDA_DigitalSignalStandard = BDA_DigitalSignalStandard(32i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Bda_DigitalStandard_ISDB_C: BDA_DigitalSignalStandard = BDA_DigitalSignalStandard(64i32);
impl ::core::marker::Copy for BDA_DigitalSignalStandard {}
impl ::core::clone::Clone for BDA_DigitalSignalStandard {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for BDA_DigitalSignalStandard {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for BDA_DigitalSignalStandard {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for BDA_DigitalSignalStandard {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BDA_DigitalSignalStandard").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct BDA_LockType(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Bda_LockType_None: BDA_LockType = BDA_LockType(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Bda_LockType_PLL: BDA_LockType = BDA_LockType(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Bda_LockType_DecoderDemod: BDA_LockType = BDA_LockType(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Bda_LockType_Complete: BDA_LockType = BDA_LockType(128i32);
impl ::core::marker::Copy for BDA_LockType {}
impl ::core::clone::Clone for BDA_LockType {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for BDA_LockType {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for BDA_LockType {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for BDA_LockType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BDA_LockType").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct BDA_SignalType(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Bda_SignalType_Unknown: BDA_SignalType = BDA_SignalType(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Bda_SignalType_Analog: BDA_SignalType = BDA_SignalType(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Bda_SignalType_Digital: BDA_SignalType = BDA_SignalType(2i32);
impl ::core::marker::Copy for BDA_SignalType {}
impl ::core::clone::Clone for BDA_SignalType {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for BDA_SignalType {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for BDA_SignalType {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for BDA_SignalType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BDA_SignalType").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct BfEnTvRat_Attributes_CAE_TV(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAE_IsBlocked: BfEnTvRat_Attributes_CAE_TV = BfEnTvRat_Attributes_CAE_TV(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAE_ValidAttrSubmask: BfEnTvRat_Attributes_CAE_TV = BfEnTvRat_Attributes_CAE_TV(1i32);
impl ::core::marker::Copy for BfEnTvRat_Attributes_CAE_TV {}
impl ::core::clone::Clone for BfEnTvRat_Attributes_CAE_TV {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for BfEnTvRat_Attributes_CAE_TV {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for BfEnTvRat_Attributes_CAE_TV {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for BfEnTvRat_Attributes_CAE_TV {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BfEnTvRat_Attributes_CAE_TV").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct BfEnTvRat_Attributes_CAF_TV(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAF_IsBlocked: BfEnTvRat_Attributes_CAF_TV = BfEnTvRat_Attributes_CAF_TV(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAF_ValidAttrSubmask: BfEnTvRat_Attributes_CAF_TV = BfEnTvRat_Attributes_CAF_TV(1i32);
impl ::core::marker::Copy for BfEnTvRat_Attributes_CAF_TV {}
impl ::core::clone::Clone for BfEnTvRat_Attributes_CAF_TV {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for BfEnTvRat_Attributes_CAF_TV {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for BfEnTvRat_Attributes_CAF_TV {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for BfEnTvRat_Attributes_CAF_TV {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BfEnTvRat_Attributes_CAF_TV").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct BfEnTvRat_Attributes_MPAA(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPAA_IsBlocked: BfEnTvRat_Attributes_MPAA = BfEnTvRat_Attributes_MPAA(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPAA_ValidAttrSubmask: BfEnTvRat_Attributes_MPAA = BfEnTvRat_Attributes_MPAA(1i32);
impl ::core::marker::Copy for BfEnTvRat_Attributes_MPAA {}
impl ::core::clone::Clone for BfEnTvRat_Attributes_MPAA {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for BfEnTvRat_Attributes_MPAA {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for BfEnTvRat_Attributes_MPAA {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for BfEnTvRat_Attributes_MPAA {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BfEnTvRat_Attributes_MPAA").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct BfEnTvRat_Attributes_US_TV(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const US_TV_IsBlocked: BfEnTvRat_Attributes_US_TV = BfEnTvRat_Attributes_US_TV(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const US_TV_IsViolent: BfEnTvRat_Attributes_US_TV = BfEnTvRat_Attributes_US_TV(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const US_TV_IsSexualSituation: BfEnTvRat_Attributes_US_TV = BfEnTvRat_Attributes_US_TV(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const US_TV_IsAdultLanguage: BfEnTvRat_Attributes_US_TV = BfEnTvRat_Attributes_US_TV(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const US_TV_IsSexuallySuggestiveDialog: BfEnTvRat_Attributes_US_TV = BfEnTvRat_Attributes_US_TV(16i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const US_TV_ValidAttrSubmask: BfEnTvRat_Attributes_US_TV = BfEnTvRat_Attributes_US_TV(31i32);
impl ::core::marker::Copy for BfEnTvRat_Attributes_US_TV {}
impl ::core::clone::Clone for BfEnTvRat_Attributes_US_TV {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for BfEnTvRat_Attributes_US_TV {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for BfEnTvRat_Attributes_US_TV {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for BfEnTvRat_Attributes_US_TV {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BfEnTvRat_Attributes_US_TV").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct BfEnTvRat_GenericAttributes(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const BfAttrNone: BfEnTvRat_GenericAttributes = BfEnTvRat_GenericAttributes(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const BfIsBlocked: BfEnTvRat_GenericAttributes = BfEnTvRat_GenericAttributes(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const BfIsAttr_1: BfEnTvRat_GenericAttributes = BfEnTvRat_GenericAttributes(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const BfIsAttr_2: BfEnTvRat_GenericAttributes = BfEnTvRat_GenericAttributes(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const BfIsAttr_3: BfEnTvRat_GenericAttributes = BfEnTvRat_GenericAttributes(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const BfIsAttr_4: BfEnTvRat_GenericAttributes = BfEnTvRat_GenericAttributes(16i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const BfIsAttr_5: BfEnTvRat_GenericAttributes = BfEnTvRat_GenericAttributes(32i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const BfIsAttr_6: BfEnTvRat_GenericAttributes = BfEnTvRat_GenericAttributes(64i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const BfIsAttr_7: BfEnTvRat_GenericAttributes = BfEnTvRat_GenericAttributes(128i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const BfValidAttrSubmask: BfEnTvRat_GenericAttributes = BfEnTvRat_GenericAttributes(255i32);
impl ::core::marker::Copy for BfEnTvRat_GenericAttributes {}
impl ::core::clone::Clone for BfEnTvRat_GenericAttributes {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for BfEnTvRat_GenericAttributes {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for BfEnTvRat_GenericAttributes {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for BfEnTvRat_GenericAttributes {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BfEnTvRat_GenericAttributes").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct COPPEventBlockReason(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const COPP_Unknown: COPPEventBlockReason = COPPEventBlockReason(-1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const COPP_BadDriver: COPPEventBlockReason = COPPEventBlockReason(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const COPP_NoCardHDCPSupport: COPPEventBlockReason = COPPEventBlockReason(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const COPP_NoMonitorHDCPSupport: COPPEventBlockReason = COPPEventBlockReason(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const COPP_BadCertificate: COPPEventBlockReason = COPPEventBlockReason(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const COPP_InvalidBusProtection: COPPEventBlockReason = COPPEventBlockReason(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const COPP_AeroGlassOff: COPPEventBlockReason = COPPEventBlockReason(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const COPP_RogueApp: COPPEventBlockReason = COPPEventBlockReason(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const COPP_ForbiddenVideo: COPPEventBlockReason = COPPEventBlockReason(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const COPP_Activate: COPPEventBlockReason = COPPEventBlockReason(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const COPP_DigitalAudioUnprotected: COPPEventBlockReason = COPPEventBlockReason(9i32);
impl ::core::marker::Copy for COPPEventBlockReason {}
impl ::core::clone::Clone for COPPEventBlockReason {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COPPEventBlockReason {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for COPPEventBlockReason {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for COPPEventBlockReason {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COPPEventBlockReason").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CPEventBitShift(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_BITSHIFT_RATINGS: CPEventBitShift = CPEventBitShift(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_BITSHIFT_COPP: CPEventBitShift = CPEventBitShift(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_BITSHIFT_LICENSE: CPEventBitShift = CPEventBitShift(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_BITSHIFT_ROLLBACK: CPEventBitShift = CPEventBitShift(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_BITSHIFT_SAC: CPEventBitShift = CPEventBitShift(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_BITSHIFT_DOWNRES: CPEventBitShift = CPEventBitShift(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_BITSHIFT_STUBLIB: CPEventBitShift = CPEventBitShift(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_BITSHIFT_UNTRUSTEDGRAPH: CPEventBitShift = CPEventBitShift(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_BITSHIFT_PENDING_CERTIFICATE: CPEventBitShift = CPEventBitShift(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_BITSHIFT_NO_PLAYREADY: CPEventBitShift = CPEventBitShift(9i32);
impl ::core::marker::Copy for CPEventBitShift {}
impl ::core::clone::Clone for CPEventBitShift {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CPEventBitShift {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for CPEventBitShift {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for CPEventBitShift {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CPEventBitShift").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CPEvents(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_NONE: CPEvents = CPEvents(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_RATINGS: CPEvents = CPEvents(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_COPP: CPEvents = CPEvents(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_LICENSE: CPEvents = CPEvents(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_ROLLBACK: CPEvents = CPEvents(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_SAC: CPEvents = CPEvents(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_DOWNRES: CPEvents = CPEvents(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_STUBLIB: CPEvents = CPEvents(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_UNTRUSTEDGRAPH: CPEvents = CPEvents(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CPEVENT_PROTECTWINDOWED: CPEvents = CPEvents(9i32);
impl ::core::marker::Copy for CPEvents {}
impl ::core::clone::Clone for CPEvents {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CPEvents {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for CPEvents {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for CPEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CPEvents").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CPRecordingStatus(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const RECORDING_STOPPED: CPRecordingStatus = CPRecordingStatus(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const RECORDING_STARTED: CPRecordingStatus = CPRecordingStatus(1i32);
impl ::core::marker::Copy for CPRecordingStatus {}
impl ::core::clone::Clone for CPRecordingStatus {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CPRecordingStatus {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for CPRecordingStatus {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for CPRecordingStatus {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CPRecordingStatus").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CRID_LOCATION(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CRID_LOCATION_IN_DESCRIPTOR: CRID_LOCATION = CRID_LOCATION(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CRID_LOCATION_IN_CIT: CRID_LOCATION = CRID_LOCATION(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CRID_LOCATION_DVB_RESERVED1: CRID_LOCATION = CRID_LOCATION(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CRID_LOCATION_DVB_RESERVED2: CRID_LOCATION = CRID_LOCATION(3i32);
impl ::core::marker::Copy for CRID_LOCATION {}
impl ::core::clone::Clone for CRID_LOCATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CRID_LOCATION {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for CRID_LOCATION {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for CRID_LOCATION {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CRID_LOCATION").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct CROSSBAR_DEFAULT_FLAGS(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DEF_MODE_PROFILE: CROSSBAR_DEFAULT_FLAGS = CROSSBAR_DEFAULT_FLAGS(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DEF_MODE_STREAMS: CROSSBAR_DEFAULT_FLAGS = CROSSBAR_DEFAULT_FLAGS(2i32);
impl ::core::marker::Copy for CROSSBAR_DEFAULT_FLAGS {}
impl ::core::clone::Clone for CROSSBAR_DEFAULT_FLAGS {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for CROSSBAR_DEFAULT_FLAGS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for CROSSBAR_DEFAULT_FLAGS {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for CROSSBAR_DEFAULT_FLAGS {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CROSSBAR_DEFAULT_FLAGS").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ChannelChangeSpanningEvent_State(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ChannelChangeSpanningEvent_Start: ChannelChangeSpanningEvent_State = ChannelChangeSpanningEvent_State(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ChannelChangeSpanningEvent_End: ChannelChangeSpanningEvent_State = ChannelChangeSpanningEvent_State(2i32);
impl ::core::marker::Copy for ChannelChangeSpanningEvent_State {}
impl ::core::clone::Clone for ChannelChangeSpanningEvent_State {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ChannelChangeSpanningEvent_State {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for ChannelChangeSpanningEvent_State {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for ChannelChangeSpanningEvent_State {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ChannelChangeSpanningEvent_State").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ChannelType(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ChannelTypeNone: ChannelType = ChannelType(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ChannelTypeOther: ChannelType = ChannelType(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ChannelTypeVideo: ChannelType = ChannelType(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ChannelTypeAudio: ChannelType = ChannelType(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ChannelTypeText: ChannelType = ChannelType(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ChannelTypeSubtitles: ChannelType = ChannelType(16i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ChannelTypeCaptions: ChannelType = ChannelType(32i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ChannelTypeSuperimpose: ChannelType = ChannelType(64i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ChannelTypeData: ChannelType = ChannelType(128i32);
impl ::core::marker::Copy for ChannelType {}
impl ::core::clone::Clone for ChannelType {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ChannelType {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for ChannelType {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for ChannelType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ChannelType").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct DESC_LINKAGE_TYPE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DESC_LINKAGE_RESERVED0: DESC_LINKAGE_TYPE = DESC_LINKAGE_TYPE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DESC_LINKAGE_INFORMATION: DESC_LINKAGE_TYPE = DESC_LINKAGE_TYPE(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DESC_LINKAGE_EPG: DESC_LINKAGE_TYPE = DESC_LINKAGE_TYPE(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DESC_LINKAGE_CA_REPLACEMENT: DESC_LINKAGE_TYPE = DESC_LINKAGE_TYPE(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DESC_LINKAGE_COMPLETE_NET_BOUQUET_SI: DESC_LINKAGE_TYPE = DESC_LINKAGE_TYPE(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DESC_LINKAGE_REPLACEMENT: DESC_LINKAGE_TYPE = DESC_LINKAGE_TYPE(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DESC_LINKAGE_DATA: DESC_LINKAGE_TYPE = DESC_LINKAGE_TYPE(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DESC_LINKAGE_RESERVED1: DESC_LINKAGE_TYPE = DESC_LINKAGE_TYPE(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DESC_LINKAGE_USER: DESC_LINKAGE_TYPE = DESC_LINKAGE_TYPE(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DESC_LINKAGE_RESERVED2: DESC_LINKAGE_TYPE = DESC_LINKAGE_TYPE(255i32);
impl ::core::marker::Copy for DESC_LINKAGE_TYPE {}
impl ::core::clone::Clone for DESC_LINKAGE_TYPE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for DESC_LINKAGE_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for DESC_LINKAGE_TYPE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for DESC_LINKAGE_TYPE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DESC_LINKAGE_TYPE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct DISPID_TUNER(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_UNIQUENAME: DISPID_TUNER = DISPID_TUNER(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_FRIENDLYNAME: DISPID_TUNER = DISPID_TUNER(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_CLSID: DISPID_TUNER = DISPID_TUNER(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_NETWORKTYPE: DISPID_TUNER = DISPID_TUNER(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS__NETWORKTYPE: DISPID_TUNER = DISPID_TUNER(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_CREATETUNEREQUEST: DISPID_TUNER = DISPID_TUNER(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_ENUMCATEGORYGUIDS: DISPID_TUNER = DISPID_TUNER(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_ENUMDEVICEMONIKERS: DISPID_TUNER = DISPID_TUNER(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DEFAULTPREFERREDCOMPONENTTYPES: DISPID_TUNER = DISPID_TUNER(9i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_FREQMAP: DISPID_TUNER = DISPID_TUNER(10i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DEFLOCATOR: DISPID_TUNER = DISPID_TUNER(11i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_CLONE: DISPID_TUNER = DISPID_TUNER(12i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TR_TUNINGSPACE: DISPID_TUNER = DISPID_TUNER(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TR_COMPONENTS: DISPID_TUNER = DISPID_TUNER(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TR_CLONE: DISPID_TUNER = DISPID_TUNER(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TR_LOCATOR: DISPID_TUNER = DISPID_TUNER(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_CT_CATEGORY: DISPID_TUNER = DISPID_TUNER(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_CT_MEDIAMAJORTYPE: DISPID_TUNER = DISPID_TUNER(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_CT__MEDIAMAJORTYPE: DISPID_TUNER = DISPID_TUNER(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_CT_MEDIASUBTYPE: DISPID_TUNER = DISPID_TUNER(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_CT__MEDIASUBTYPE: DISPID_TUNER = DISPID_TUNER(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_CT_MEDIAFORMATTYPE: DISPID_TUNER = DISPID_TUNER(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_CT__MEDIAFORMATTYPE: DISPID_TUNER = DISPID_TUNER(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_CT_MEDIATYPE: DISPID_TUNER = DISPID_TUNER(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_CT_CLONE: DISPID_TUNER = DISPID_TUNER(9i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_LCT_LANGID: DISPID_TUNER = DISPID_TUNER(100i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_MP2CT_TYPE: DISPID_TUNER = DISPID_TUNER(200i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_ATSCCT_FLAGS: DISPID_TUNER = DISPID_TUNER(300i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_CARRFREQ: DISPID_TUNER = DISPID_TUNER(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_INNERFECMETHOD: DISPID_TUNER = DISPID_TUNER(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_INNERFECRATE: DISPID_TUNER = DISPID_TUNER(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_OUTERFECMETHOD: DISPID_TUNER = DISPID_TUNER(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_OUTERFECRATE: DISPID_TUNER = DISPID_TUNER(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_MOD: DISPID_TUNER = DISPID_TUNER(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_SYMRATE: DISPID_TUNER = DISPID_TUNER(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_CLONE: DISPID_TUNER = DISPID_TUNER(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_ATSC_PHYS_CHANNEL: DISPID_TUNER = DISPID_TUNER(201i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_ATSC_TSID: DISPID_TUNER = DISPID_TUNER(202i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_ATSC_MP2_PROGNO: DISPID_TUNER = DISPID_TUNER(203i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBT_BANDWIDTH: DISPID_TUNER = DISPID_TUNER(301i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBT_LPINNERFECMETHOD: DISPID_TUNER = DISPID_TUNER(302i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBT_LPINNERFECRATE: DISPID_TUNER = DISPID_TUNER(303i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBT_GUARDINTERVAL: DISPID_TUNER = DISPID_TUNER(304i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBT_HALPHA: DISPID_TUNER = DISPID_TUNER(305i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBT_TRANSMISSIONMODE: DISPID_TUNER = DISPID_TUNER(306i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBT_INUSE: DISPID_TUNER = DISPID_TUNER(307i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBT2_PHYSICALLAYERPIPEID: DISPID_TUNER = DISPID_TUNER(351i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBS_POLARISATION: DISPID_TUNER = DISPID_TUNER(401i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBS_WEST: DISPID_TUNER = DISPID_TUNER(402i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBS_ORBITAL: DISPID_TUNER = DISPID_TUNER(403i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBS_AZIMUTH: DISPID_TUNER = DISPID_TUNER(404i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBS_ELEVATION: DISPID_TUNER = DISPID_TUNER(405i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBS2_DISEQ_LNB_SOURCE: DISPID_TUNER = DISPID_TUNER(406i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DVBS2_LOW_OSC_FREQ_OVERRIDE: DISPID_TUNER = DISPID_TUNER(407i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DVBS2_HI_OSC_FREQ_OVERRIDE: DISPID_TUNER = DISPID_TUNER(408i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DVBS2_LNB_SWITCH_FREQ_OVERRIDE: DISPID_TUNER = DISPID_TUNER(409i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DVBS2_SPECTRAL_INVERSION_OVERRIDE: DISPID_TUNER = DISPID_TUNER(410i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBS2_ROLLOFF: DISPID_TUNER = DISPID_TUNER(411i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DVBS2_PILOT: DISPID_TUNER = DISPID_TUNER(412i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_ANALOG_STANDARD: DISPID_TUNER = DISPID_TUNER(601i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_L_DTV_O_MAJOR_CHANNEL: DISPID_TUNER = DISPID_TUNER(701i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_C_TYPE: DISPID_TUNER = DISPID_TUNER(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_C_STATUS: DISPID_TUNER = DISPID_TUNER(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_C_LANGID: DISPID_TUNER = DISPID_TUNER(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_C_DESCRIPTION: DISPID_TUNER = DISPID_TUNER(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_C_CLONE: DISPID_TUNER = DISPID_TUNER(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_C_MP2_PID: DISPID_TUNER = DISPID_TUNER(101i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_C_MP2_PCRPID: DISPID_TUNER = DISPID_TUNER(102i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_C_MP2_PROGNO: DISPID_TUNER = DISPID_TUNER(103i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_C_ANALOG_AUDIO: DISPID_TUNER = DISPID_TUNER(201i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DVB_SYSTEMTYPE: DISPID_TUNER = DISPID_TUNER(101i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DVB2_NETWORK_ID: DISPID_TUNER = DISPID_TUNER(102i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DVBS_LOW_OSC_FREQ: DISPID_TUNER = DISPID_TUNER(1001i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DVBS_HI_OSC_FREQ: DISPID_TUNER = DISPID_TUNER(1002i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DVBS_LNB_SWITCH_FREQ: DISPID_TUNER = DISPID_TUNER(1003i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DVBS_INPUT_RANGE: DISPID_TUNER = DISPID_TUNER(1004i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DVBS_SPECTRAL_INVERSION: DISPID_TUNER = DISPID_TUNER(1005i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_AR_MINFREQUENCY: DISPID_TUNER = DISPID_TUNER(101i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_AR_MAXFREQUENCY: DISPID_TUNER = DISPID_TUNER(102i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_AR_STEP: DISPID_TUNER = DISPID_TUNER(103i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_AR_COUNTRYCODE: DISPID_TUNER = DISPID_TUNER(104i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_AUX_COUNTRYCODE: DISPID_TUNER = DISPID_TUNER(101i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_ATV_MINCHANNEL: DISPID_TUNER = DISPID_TUNER(101i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_ATV_MAXCHANNEL: DISPID_TUNER = DISPID_TUNER(102i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_ATV_INPUTTYPE: DISPID_TUNER = DISPID_TUNER(103i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_ATV_COUNTRYCODE: DISPID_TUNER = DISPID_TUNER(104i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_ATSC_MINMINORCHANNEL: DISPID_TUNER = DISPID_TUNER(201i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_ATSC_MAXMINORCHANNEL: DISPID_TUNER = DISPID_TUNER(202i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_ATSC_MINPHYSCHANNEL: DISPID_TUNER = DISPID_TUNER(203i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_ATSC_MAXPHYSCHANNEL: DISPID_TUNER = DISPID_TUNER(204i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DC_MINMAJORCHANNEL: DISPID_TUNER = DISPID_TUNER(301i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DC_MAXMAJORCHANNEL: DISPID_TUNER = DISPID_TUNER(302i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DC_MINSOURCEID: DISPID_TUNER = DISPID_TUNER(303i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_TUNER_TS_DC_MAXSOURCEID: DISPID_TUNER = DISPID_TUNER(304i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_CHTUNER_ATVAC_CHANNEL: DISPID_TUNER = DISPID_TUNER(101i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_CHTUNER_ATVDC_SYSTEM: DISPID_TUNER = DISPID_TUNER(101i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_CHTUNER_ATVDC_CONTENT: DISPID_TUNER = DISPID_TUNER(102i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_CHTUNER_CIDTR_CHANNELID: DISPID_TUNER = DISPID_TUNER(101i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_CHTUNER_CTR_CHANNEL: DISPID_TUNER = DISPID_TUNER(101i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_CHTUNER_ACTR_MINOR_CHANNEL: DISPID_TUNER = DISPID_TUNER(201i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_CHTUNER_DCTR_MAJOR_CHANNEL: DISPID_TUNER = DISPID_TUNER(301i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_CHTUNER_DCTR_SRCID: DISPID_TUNER = DISPID_TUNER(302i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_DVBTUNER_DVBC_ATTRIBUTESVALID: DISPID_TUNER = DISPID_TUNER(101i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_DVBTUNER_DVBC_PID: DISPID_TUNER = DISPID_TUNER(102i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_DVBTUNER_DVBC_TAG: DISPID_TUNER = DISPID_TUNER(103i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_DVBTUNER_DVBC_COMPONENTTYPE: DISPID_TUNER = DISPID_TUNER(104i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_DVBTUNER_ONID: DISPID_TUNER = DISPID_TUNER(101i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_DVBTUNER_TSID: DISPID_TUNER = DISPID_TUNER(102i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_DVBTUNER_SID: DISPID_TUNER = DISPID_TUNER(103i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_MP2TUNER_TSID: DISPID_TUNER = DISPID_TUNER(101i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_MP2TUNER_PROGNO: DISPID_TUNER = DISPID_TUNER(102i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DISPID_MP2TUNERFACTORY_CREATETUNEREQUEST: DISPID_TUNER = DISPID_TUNER(1i32);
impl ::core::marker::Copy for DISPID_TUNER {}
impl ::core::clone::Clone for DISPID_TUNER {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for DISPID_TUNER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for DISPID_TUNER {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for DISPID_TUNER {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DISPID_TUNER").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct DVB_STRCONV_MODE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STRCONV_MODE_DVB: DVB_STRCONV_MODE = DVB_STRCONV_MODE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STRCONV_MODE_DVB_EMPHASIS: DVB_STRCONV_MODE = DVB_STRCONV_MODE(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STRCONV_MODE_DVB_WITHOUT_EMPHASIS: DVB_STRCONV_MODE = DVB_STRCONV_MODE(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STRCONV_MODE_ISDB: DVB_STRCONV_MODE = DVB_STRCONV_MODE(3i32);
impl ::core::marker::Copy for DVB_STRCONV_MODE {}
impl ::core::clone::Clone for DVB_STRCONV_MODE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for DVB_STRCONV_MODE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for DVB_STRCONV_MODE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for DVB_STRCONV_MODE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DVB_STRCONV_MODE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct DVDFilterState(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdState_Undefined: DVDFilterState = DVDFilterState(-2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdState_Unitialized: DVDFilterState = DVDFilterState(-1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdState_Stopped: DVDFilterState = DVDFilterState(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdState_Paused: DVDFilterState = DVDFilterState(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdState_Running: DVDFilterState = DVDFilterState(2i32);
impl ::core::marker::Copy for DVDFilterState {}
impl ::core::clone::Clone for DVDFilterState {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for DVDFilterState {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for DVDFilterState {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for DVDFilterState {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DVDFilterState").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct DVDMenuIDConstants(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdMenu_Title: DVDMenuIDConstants = DVDMenuIDConstants(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdMenu_Root: DVDMenuIDConstants = DVDMenuIDConstants(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdMenu_Subpicture: DVDMenuIDConstants = DVDMenuIDConstants(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdMenu_Audio: DVDMenuIDConstants = DVDMenuIDConstants(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdMenu_Angle: DVDMenuIDConstants = DVDMenuIDConstants(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdMenu_Chapter: DVDMenuIDConstants = DVDMenuIDConstants(7i32);
impl ::core::marker::Copy for DVDMenuIDConstants {}
impl ::core::clone::Clone for DVDMenuIDConstants {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for DVDMenuIDConstants {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for DVDMenuIDConstants {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for DVDMenuIDConstants {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DVDMenuIDConstants").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct DVDSPExt(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdSPExt_NotSpecified: DVDSPExt = DVDSPExt(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdSPExt_Caption_Normal: DVDSPExt = DVDSPExt(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdSPExt_Caption_Big: DVDSPExt = DVDSPExt(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdSPExt_Caption_Children: DVDSPExt = DVDSPExt(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdSPExt_CC_Normal: DVDSPExt = DVDSPExt(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdSPExt_CC_Big: DVDSPExt = DVDSPExt(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdSPExt_CC_Children: DVDSPExt = DVDSPExt(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdSPExt_Forced: DVDSPExt = DVDSPExt(9i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdSPExt_DirectorComments_Normal: DVDSPExt = DVDSPExt(13i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdSPExt_DirectorComments_Big: DVDSPExt = DVDSPExt(14i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdSPExt_DirectorComments_Children: DVDSPExt = DVDSPExt(15i32);
impl ::core::marker::Copy for DVDSPExt {}
impl ::core::clone::Clone for DVDSPExt {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for DVDSPExt {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for DVDSPExt {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for DVDSPExt {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DVDSPExt").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct DVDTextStringType(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdStruct_Volume: DVDTextStringType = DVDTextStringType(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdStruct_Title: DVDTextStringType = DVDTextStringType(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdStruct_ParentalID: DVDTextStringType = DVDTextStringType(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdStruct_PartOfTitle: DVDTextStringType = DVDTextStringType(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdStruct_Cell: DVDTextStringType = DVDTextStringType(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdStream_Audio: DVDTextStringType = DVDTextStringType(16i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdStream_Subpicture: DVDTextStringType = DVDTextStringType(17i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdStream_Angle: DVDTextStringType = DVDTextStringType(18i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdChannel_Audio: DVDTextStringType = DVDTextStringType(32i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdGeneral_Name: DVDTextStringType = DVDTextStringType(48i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdGeneral_Comments: DVDTextStringType = DVDTextStringType(49i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Series: DVDTextStringType = DVDTextStringType(56i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Movie: DVDTextStringType = DVDTextStringType(57i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Video: DVDTextStringType = DVDTextStringType(58i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Album: DVDTextStringType = DVDTextStringType(59i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Song: DVDTextStringType = DVDTextStringType(60i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Other: DVDTextStringType = DVDTextStringType(63i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Sub_Series: DVDTextStringType = DVDTextStringType(64i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Sub_Movie: DVDTextStringType = DVDTextStringType(65i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Sub_Video: DVDTextStringType = DVDTextStringType(66i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Sub_Album: DVDTextStringType = DVDTextStringType(67i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Sub_Song: DVDTextStringType = DVDTextStringType(68i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Sub_Other: DVDTextStringType = DVDTextStringType(71i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Orig_Series: DVDTextStringType = DVDTextStringType(72i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Orig_Movie: DVDTextStringType = DVDTextStringType(73i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Orig_Video: DVDTextStringType = DVDTextStringType(74i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Orig_Album: DVDTextStringType = DVDTextStringType(75i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Orig_Song: DVDTextStringType = DVDTextStringType(76i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdTitle_Orig_Other: DVDTextStringType = DVDTextStringType(79i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdOther_Scene: DVDTextStringType = DVDTextStringType(80i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdOther_Cut: DVDTextStringType = DVDTextStringType(81i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dvdOther_Take: DVDTextStringType = DVDTextStringType(82i32);
impl ::core::marker::Copy for DVDTextStringType {}
impl ::core::clone::Clone for DVDTextStringType {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for DVDTextStringType {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for DVDTextStringType {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for DVDTextStringType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DVDTextStringType").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct DisplaySizeList(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dslDefaultSize: DisplaySizeList = DisplaySizeList(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dslSourceSize: DisplaySizeList = DisplaySizeList(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dslHalfSourceSize: DisplaySizeList = DisplaySizeList(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dslDoubleSourceSize: DisplaySizeList = DisplaySizeList(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dslFullScreen: DisplaySizeList = DisplaySizeList(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dslHalfScreen: DisplaySizeList = DisplaySizeList(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dslQuarterScreen: DisplaySizeList = DisplaySizeList(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dslSixteenthScreen: DisplaySizeList = DisplaySizeList(6i32);
impl ::core::marker::Copy for DisplaySizeList {}
impl ::core::clone::Clone for DisplaySizeList {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for DisplaySizeList {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for DisplaySizeList {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for DisplaySizeList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DisplaySizeList").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct DownResEventParam(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DOWNRES_Always: DownResEventParam = DownResEventParam(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DOWNRES_InWindowOnly: DownResEventParam = DownResEventParam(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const DOWNRES_Undefined: DownResEventParam = DownResEventParam(2i32);
impl ::core::marker::Copy for DownResEventParam {}
impl ::core::clone::Clone for DownResEventParam {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for DownResEventParam {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for DownResEventParam {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for DownResEventParam {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DownResEventParam").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct EnTag_Mode(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EnTag_Remove: EnTag_Mode = EnTag_Mode(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EnTag_Once: EnTag_Mode = EnTag_Mode(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const EnTag_Repeat: EnTag_Mode = EnTag_Mode(2i32);
impl ::core::marker::Copy for EnTag_Mode {}
impl ::core::clone::Clone for EnTag_Mode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for EnTag_Mode {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for EnTag_Mode {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for EnTag_Mode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EnTag_Mode").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct EnTvRat_CAE_TV(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAE_TV_Exempt: EnTvRat_CAE_TV = EnTvRat_CAE_TV(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAE_TV_C: EnTvRat_CAE_TV = EnTvRat_CAE_TV(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAE_TV_C8: EnTvRat_CAE_TV = EnTvRat_CAE_TV(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAE_TV_G: EnTvRat_CAE_TV = EnTvRat_CAE_TV(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAE_TV_PG: EnTvRat_CAE_TV = EnTvRat_CAE_TV(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAE_TV_14: EnTvRat_CAE_TV = EnTvRat_CAE_TV(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAE_TV_18: EnTvRat_CAE_TV = EnTvRat_CAE_TV(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAE_TV_Reserved: EnTvRat_CAE_TV = EnTvRat_CAE_TV(7i32);
impl ::core::marker::Copy for EnTvRat_CAE_TV {}
impl ::core::clone::Clone for EnTvRat_CAE_TV {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for EnTvRat_CAE_TV {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for EnTvRat_CAE_TV {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for EnTvRat_CAE_TV {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EnTvRat_CAE_TV").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct EnTvRat_CAF_TV(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAF_TV_Exempt: EnTvRat_CAF_TV = EnTvRat_CAF_TV(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAF_TV_G: EnTvRat_CAF_TV = EnTvRat_CAF_TV(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAF_TV_8: EnTvRat_CAF_TV = EnTvRat_CAF_TV(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAF_TV_13: EnTvRat_CAF_TV = EnTvRat_CAF_TV(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAF_TV_16: EnTvRat_CAF_TV = EnTvRat_CAF_TV(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAF_TV_18: EnTvRat_CAF_TV = EnTvRat_CAF_TV(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAF_TV_Reserved6: EnTvRat_CAF_TV = EnTvRat_CAF_TV(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CAF_TV_Reserved: EnTvRat_CAF_TV = EnTvRat_CAF_TV(7i32);
impl ::core::marker::Copy for EnTvRat_CAF_TV {}
impl ::core::clone::Clone for EnTvRat_CAF_TV {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for EnTvRat_CAF_TV {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for EnTvRat_CAF_TV {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for EnTvRat_CAF_TV {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EnTvRat_CAF_TV").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct EnTvRat_GenericLevel(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_0: EnTvRat_GenericLevel = EnTvRat_GenericLevel(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_1: EnTvRat_GenericLevel = EnTvRat_GenericLevel(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_2: EnTvRat_GenericLevel = EnTvRat_GenericLevel(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_3: EnTvRat_GenericLevel = EnTvRat_GenericLevel(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_4: EnTvRat_GenericLevel = EnTvRat_GenericLevel(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_5: EnTvRat_GenericLevel = EnTvRat_GenericLevel(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_6: EnTvRat_GenericLevel = EnTvRat_GenericLevel(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_7: EnTvRat_GenericLevel = EnTvRat_GenericLevel(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_8: EnTvRat_GenericLevel = EnTvRat_GenericLevel(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_9: EnTvRat_GenericLevel = EnTvRat_GenericLevel(9i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_10: EnTvRat_GenericLevel = EnTvRat_GenericLevel(10i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_11: EnTvRat_GenericLevel = EnTvRat_GenericLevel(11i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_12: EnTvRat_GenericLevel = EnTvRat_GenericLevel(12i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_13: EnTvRat_GenericLevel = EnTvRat_GenericLevel(13i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_14: EnTvRat_GenericLevel = EnTvRat_GenericLevel(14i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_15: EnTvRat_GenericLevel = EnTvRat_GenericLevel(15i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_16: EnTvRat_GenericLevel = EnTvRat_GenericLevel(16i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_17: EnTvRat_GenericLevel = EnTvRat_GenericLevel(17i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_18: EnTvRat_GenericLevel = EnTvRat_GenericLevel(18i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_19: EnTvRat_GenericLevel = EnTvRat_GenericLevel(19i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_20: EnTvRat_GenericLevel = EnTvRat_GenericLevel(20i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_21: EnTvRat_GenericLevel = EnTvRat_GenericLevel(21i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_kLevels: EnTvRat_GenericLevel = EnTvRat_GenericLevel(22i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_Unblock: EnTvRat_GenericLevel = EnTvRat_GenericLevel(-1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_LevelDontKnow: EnTvRat_GenericLevel = EnTvRat_GenericLevel(255i32);
impl ::core::marker::Copy for EnTvRat_GenericLevel {}
impl ::core::clone::Clone for EnTvRat_GenericLevel {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for EnTvRat_GenericLevel {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for EnTvRat_GenericLevel {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for EnTvRat_GenericLevel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EnTvRat_GenericLevel").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct EnTvRat_MPAA(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPAA_NotApplicable: EnTvRat_MPAA = EnTvRat_MPAA(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPAA_G: EnTvRat_MPAA = EnTvRat_MPAA(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPAA_PG: EnTvRat_MPAA = EnTvRat_MPAA(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPAA_PG13: EnTvRat_MPAA = EnTvRat_MPAA(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPAA_R: EnTvRat_MPAA = EnTvRat_MPAA(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPAA_NC17: EnTvRat_MPAA = EnTvRat_MPAA(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPAA_X: EnTvRat_MPAA = EnTvRat_MPAA(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPAA_NotRated: EnTvRat_MPAA = EnTvRat_MPAA(7i32);
impl ::core::marker::Copy for EnTvRat_MPAA {}
impl ::core::clone::Clone for EnTvRat_MPAA {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for EnTvRat_MPAA {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for EnTvRat_MPAA {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for EnTvRat_MPAA {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EnTvRat_MPAA").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct EnTvRat_System(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPAA: EnTvRat_System = EnTvRat_System(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const US_TV: EnTvRat_System = EnTvRat_System(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Canadian_English: EnTvRat_System = EnTvRat_System(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Canadian_French: EnTvRat_System = EnTvRat_System(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Reserved4: EnTvRat_System = EnTvRat_System(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const System5: EnTvRat_System = EnTvRat_System(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const System6: EnTvRat_System = EnTvRat_System(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const Reserved7: EnTvRat_System = EnTvRat_System(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PBDA: EnTvRat_System = EnTvRat_System(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const AgeBased: EnTvRat_System = EnTvRat_System(9i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_kSystems: EnTvRat_System = EnTvRat_System(10i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TvRat_SystemDontKnow: EnTvRat_System = EnTvRat_System(255i32);
impl ::core::marker::Copy for EnTvRat_System {}
impl ::core::clone::Clone for EnTvRat_System {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for EnTvRat_System {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for EnTvRat_System {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for EnTvRat_System {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EnTvRat_System").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct EnTvRat_US_TV(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const US_TV_None: EnTvRat_US_TV = EnTvRat_US_TV(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const US_TV_Y: EnTvRat_US_TV = EnTvRat_US_TV(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const US_TV_Y7: EnTvRat_US_TV = EnTvRat_US_TV(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const US_TV_G: EnTvRat_US_TV = EnTvRat_US_TV(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const US_TV_PG: EnTvRat_US_TV = EnTvRat_US_TV(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const US_TV_14: EnTvRat_US_TV = EnTvRat_US_TV(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const US_TV_MA: EnTvRat_US_TV = EnTvRat_US_TV(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const US_TV_None7: EnTvRat_US_TV = EnTvRat_US_TV(7i32);
impl ::core::marker::Copy for EnTvRat_US_TV {}
impl ::core::clone::Clone for EnTvRat_US_TV {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for EnTvRat_US_TV {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for EnTvRat_US_TV {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for EnTvRat_US_TV {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EnTvRat_US_TV").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct EncDecEvents(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ENCDEC_CPEVENT: EncDecEvents = EncDecEvents(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const ENCDEC_RECORDING_STATUS: EncDecEvents = EncDecEvents(1i32);
impl ::core::marker::Copy for EncDecEvents {}
impl ::core::clone::Clone for EncDecEvents {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for EncDecEvents {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for EncDecEvents {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for EncDecEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EncDecEvents").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct FormatNotSupportedEvents(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const FORMATNOTSUPPORTED_CLEAR: FormatNotSupportedEvents = FormatNotSupportedEvents(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const FORMATNOTSUPPORTED_NOTSUPPORTED: FormatNotSupportedEvents = FormatNotSupportedEvents(1i32);
impl ::core::marker::Copy for FormatNotSupportedEvents {}
impl ::core::clone::Clone for FormatNotSupportedEvents {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for FormatNotSupportedEvents {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for FormatNotSupportedEvents {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for FormatNotSupportedEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FormatNotSupportedEvents").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSEVENT_BDA_EVENT_TYPE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSEVENT_BDA_EVENT_PENDINGEVENT: KSEVENT_BDA_EVENT_TYPE = KSEVENT_BDA_EVENT_TYPE(0i32);
impl ::core::marker::Copy for KSEVENT_BDA_EVENT_TYPE {}
impl ::core::clone::Clone for KSEVENT_BDA_EVENT_TYPE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSEVENT_BDA_EVENT_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSEVENT_BDA_EVENT_TYPE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSEVENT_BDA_EVENT_TYPE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSEVENT_BDA_EVENT_TYPE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSEVENT_BDA_TUNER(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSEVENT_BDA_TUNER_SCAN: KSEVENT_BDA_TUNER = KSEVENT_BDA_TUNER(0i32);
impl ::core::marker::Copy for KSEVENT_BDA_TUNER {}
impl ::core::clone::Clone for KSEVENT_BDA_TUNER {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSEVENT_BDA_TUNER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSEVENT_BDA_TUNER {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSEVENT_BDA_TUNER {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSEVENT_BDA_TUNER").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_CAS_SERVICE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_CAS_CHECKENTITLEMENTTOKEN: KSMETHOD_BDA_CAS_SERVICE = KSMETHOD_BDA_CAS_SERVICE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_CAS_SETCAPTURETOKEN: KSMETHOD_BDA_CAS_SERVICE = KSMETHOD_BDA_CAS_SERVICE(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_CAS_OPENBROADCASTMMI: KSMETHOD_BDA_CAS_SERVICE = KSMETHOD_BDA_CAS_SERVICE(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_CAS_CLOSEMMIDIALOG: KSMETHOD_BDA_CAS_SERVICE = KSMETHOD_BDA_CAS_SERVICE(3i32);
impl ::core::marker::Copy for KSMETHOD_BDA_CAS_SERVICE {}
impl ::core::clone::Clone for KSMETHOD_BDA_CAS_SERVICE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_CAS_SERVICE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_CAS_SERVICE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_CAS_SERVICE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_CAS_SERVICE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_CHANGE_SYNC(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_START_CHANGES: KSMETHOD_BDA_CHANGE_SYNC = KSMETHOD_BDA_CHANGE_SYNC(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_CHECK_CHANGES: KSMETHOD_BDA_CHANGE_SYNC = KSMETHOD_BDA_CHANGE_SYNC(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_COMMIT_CHANGES: KSMETHOD_BDA_CHANGE_SYNC = KSMETHOD_BDA_CHANGE_SYNC(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_GET_CHANGE_STATE: KSMETHOD_BDA_CHANGE_SYNC = KSMETHOD_BDA_CHANGE_SYNC(3i32);
impl ::core::marker::Copy for KSMETHOD_BDA_CHANGE_SYNC {}
impl ::core::clone::Clone for KSMETHOD_BDA_CHANGE_SYNC {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_CHANGE_SYNC {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_CHANGE_SYNC {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_CHANGE_SYNC {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_CHANGE_SYNC").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_DEBUG_SERVICE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_DEBUG_LEVEL: KSMETHOD_BDA_DEBUG_SERVICE = KSMETHOD_BDA_DEBUG_SERVICE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_DEBUG_DATA: KSMETHOD_BDA_DEBUG_SERVICE = KSMETHOD_BDA_DEBUG_SERVICE(1i32);
impl ::core::marker::Copy for KSMETHOD_BDA_DEBUG_SERVICE {}
impl ::core::clone::Clone for KSMETHOD_BDA_DEBUG_SERVICE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_DEBUG_SERVICE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_DEBUG_SERVICE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_DEBUG_SERVICE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_DEBUG_SERVICE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_DEVICE_CONFIGURATION(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_CREATE_PIN_FACTORY: KSMETHOD_BDA_DEVICE_CONFIGURATION = KSMETHOD_BDA_DEVICE_CONFIGURATION(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_DELETE_PIN_FACTORY: KSMETHOD_BDA_DEVICE_CONFIGURATION = KSMETHOD_BDA_DEVICE_CONFIGURATION(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_CREATE_TOPOLOGY: KSMETHOD_BDA_DEVICE_CONFIGURATION = KSMETHOD_BDA_DEVICE_CONFIGURATION(2i32);
impl ::core::marker::Copy for KSMETHOD_BDA_DEVICE_CONFIGURATION {}
impl ::core::clone::Clone for KSMETHOD_BDA_DEVICE_CONFIGURATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_DEVICE_CONFIGURATION {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_DEVICE_CONFIGURATION {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_DEVICE_CONFIGURATION {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_DEVICE_CONFIGURATION").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_DRM(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_DRM_CURRENT: KSMETHOD_BDA_DRM = KSMETHOD_BDA_DRM(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_DRM_DRMSTATUS: KSMETHOD_BDA_DRM = KSMETHOD_BDA_DRM(1i32);
impl ::core::marker::Copy for KSMETHOD_BDA_DRM {}
impl ::core::clone::Clone for KSMETHOD_BDA_DRM {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_DRM {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_DRM {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_DRM {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_DRM").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_EVENTING_SERVICE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_EVENT_DATA: KSMETHOD_BDA_EVENTING_SERVICE = KSMETHOD_BDA_EVENTING_SERVICE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_EVENT_COMPLETE: KSMETHOD_BDA_EVENTING_SERVICE = KSMETHOD_BDA_EVENTING_SERVICE(1i32);
impl ::core::marker::Copy for KSMETHOD_BDA_EVENTING_SERVICE {}
impl ::core::clone::Clone for KSMETHOD_BDA_EVENTING_SERVICE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_EVENTING_SERVICE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_EVENTING_SERVICE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_EVENTING_SERVICE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_EVENTING_SERVICE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_GDDS_SERVICE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_GDDS_DATATYPE: KSMETHOD_BDA_GDDS_SERVICE = KSMETHOD_BDA_GDDS_SERVICE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_GDDS_DATA: KSMETHOD_BDA_GDDS_SERVICE = KSMETHOD_BDA_GDDS_SERVICE(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_GDDS_TUNEXMLFROMIDX: KSMETHOD_BDA_GDDS_SERVICE = KSMETHOD_BDA_GDDS_SERVICE(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_GDDS_GETSERVICES: KSMETHOD_BDA_GDDS_SERVICE = KSMETHOD_BDA_GDDS_SERVICE(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_GDDS_SERVICEFROMTUNEXML: KSMETHOD_BDA_GDDS_SERVICE = KSMETHOD_BDA_GDDS_SERVICE(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_GDDS_DATAUPDATE: KSMETHOD_BDA_GDDS_SERVICE = KSMETHOD_BDA_GDDS_SERVICE(5i32);
impl ::core::marker::Copy for KSMETHOD_BDA_GDDS_SERVICE {}
impl ::core::clone::Clone for KSMETHOD_BDA_GDDS_SERVICE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_GDDS_SERVICE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_GDDS_SERVICE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_GDDS_SERVICE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_GDDS_SERVICE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_GPNV_SERVICE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_GPNV_GETVALUE: KSMETHOD_BDA_GPNV_SERVICE = KSMETHOD_BDA_GPNV_SERVICE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_GPNV_SETVALUE: KSMETHOD_BDA_GPNV_SERVICE = KSMETHOD_BDA_GPNV_SERVICE(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_GPNV_NAMEFROMINDEX: KSMETHOD_BDA_GPNV_SERVICE = KSMETHOD_BDA_GPNV_SERVICE(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_GPNV_GETVALUEUPDATENAME: KSMETHOD_BDA_GPNV_SERVICE = KSMETHOD_BDA_GPNV_SERVICE(3i32);
impl ::core::marker::Copy for KSMETHOD_BDA_GPNV_SERVICE {}
impl ::core::clone::Clone for KSMETHOD_BDA_GPNV_SERVICE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_GPNV_SERVICE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_GPNV_SERVICE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_GPNV_SERVICE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_GPNV_SERVICE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_ISDB_CAS(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_ISDBCAS_SETREQUEST: KSMETHOD_BDA_ISDB_CAS = KSMETHOD_BDA_ISDB_CAS(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_ISDBCAS_RESPONSEDATA: KSMETHOD_BDA_ISDB_CAS = KSMETHOD_BDA_ISDB_CAS(1i32);
impl ::core::marker::Copy for KSMETHOD_BDA_ISDB_CAS {}
impl ::core::clone::Clone for KSMETHOD_BDA_ISDB_CAS {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_ISDB_CAS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_ISDB_CAS {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_ISDB_CAS {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_ISDB_CAS").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_MUX_SERVICE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_MUX_GETPIDLIST: KSMETHOD_BDA_MUX_SERVICE = KSMETHOD_BDA_MUX_SERVICE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_MUX_SETPIDLIST: KSMETHOD_BDA_MUX_SERVICE = KSMETHOD_BDA_MUX_SERVICE(1i32);
impl ::core::marker::Copy for KSMETHOD_BDA_MUX_SERVICE {}
impl ::core::clone::Clone for KSMETHOD_BDA_MUX_SERVICE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_MUX_SERVICE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_MUX_SERVICE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_MUX_SERVICE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_MUX_SERVICE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_SCAN_SERVICE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_SCAN_CAPABILTIES: KSMETHOD_BDA_SCAN_SERVICE = KSMETHOD_BDA_SCAN_SERVICE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_SCANNING_STATE: KSMETHOD_BDA_SCAN_SERVICE = KSMETHOD_BDA_SCAN_SERVICE(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_SCAN_FILTER: KSMETHOD_BDA_SCAN_SERVICE = KSMETHOD_BDA_SCAN_SERVICE(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_SCAN_START: KSMETHOD_BDA_SCAN_SERVICE = KSMETHOD_BDA_SCAN_SERVICE(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_SCAN_RESUME: KSMETHOD_BDA_SCAN_SERVICE = KSMETHOD_BDA_SCAN_SERVICE(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_SCAN_STOP: KSMETHOD_BDA_SCAN_SERVICE = KSMETHOD_BDA_SCAN_SERVICE(5i32);
impl ::core::marker::Copy for KSMETHOD_BDA_SCAN_SERVICE {}
impl ::core::clone::Clone for KSMETHOD_BDA_SCAN_SERVICE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_SCAN_SERVICE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_SCAN_SERVICE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_SCAN_SERVICE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_SCAN_SERVICE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_TS_SELECTOR(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_TS_SELECTOR_SETTSID: KSMETHOD_BDA_TS_SELECTOR = KSMETHOD_BDA_TS_SELECTOR(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_TS_SELECTOR_GETTSINFORMATION: KSMETHOD_BDA_TS_SELECTOR = KSMETHOD_BDA_TS_SELECTOR(1i32);
impl ::core::marker::Copy for KSMETHOD_BDA_TS_SELECTOR {}
impl ::core::clone::Clone for KSMETHOD_BDA_TS_SELECTOR {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_TS_SELECTOR {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_TS_SELECTOR {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_TS_SELECTOR {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_TS_SELECTOR").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_TUNER_SERVICE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_TUNER_SETTUNER: KSMETHOD_BDA_TUNER_SERVICE = KSMETHOD_BDA_TUNER_SERVICE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_TUNER_GETTUNERSTATE: KSMETHOD_BDA_TUNER_SERVICE = KSMETHOD_BDA_TUNER_SERVICE(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_TUNER_SIGNALNOISERATIO: KSMETHOD_BDA_TUNER_SERVICE = KSMETHOD_BDA_TUNER_SERVICE(2i32);
impl ::core::marker::Copy for KSMETHOD_BDA_TUNER_SERVICE {}
impl ::core::clone::Clone for KSMETHOD_BDA_TUNER_SERVICE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_TUNER_SERVICE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_TUNER_SERVICE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_TUNER_SERVICE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_TUNER_SERVICE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_USERACTIVITY_SERVICE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_USERACTIVITY_USEREASON: KSMETHOD_BDA_USERACTIVITY_SERVICE = KSMETHOD_BDA_USERACTIVITY_SERVICE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_USERACTIVITY_INTERVAL: KSMETHOD_BDA_USERACTIVITY_SERVICE = KSMETHOD_BDA_USERACTIVITY_SERVICE(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_USERACTIVITY_DETECTED: KSMETHOD_BDA_USERACTIVITY_SERVICE = KSMETHOD_BDA_USERACTIVITY_SERVICE(2i32);
impl ::core::marker::Copy for KSMETHOD_BDA_USERACTIVITY_SERVICE {}
impl ::core::clone::Clone for KSMETHOD_BDA_USERACTIVITY_SERVICE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_USERACTIVITY_SERVICE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_USERACTIVITY_SERVICE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_USERACTIVITY_SERVICE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_USERACTIVITY_SERVICE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_WMDRM(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_WMDRM_STATUS: KSMETHOD_BDA_WMDRM = KSMETHOD_BDA_WMDRM(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_WMDRM_REVINFO: KSMETHOD_BDA_WMDRM = KSMETHOD_BDA_WMDRM(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_WMDRM_CRL: KSMETHOD_BDA_WMDRM = KSMETHOD_BDA_WMDRM(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_WMDRM_MESSAGE: KSMETHOD_BDA_WMDRM = KSMETHOD_BDA_WMDRM(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_WMDRM_REISSUELICENSE: KSMETHOD_BDA_WMDRM = KSMETHOD_BDA_WMDRM(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_WMDRM_RENEWLICENSE: KSMETHOD_BDA_WMDRM = KSMETHOD_BDA_WMDRM(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_WMDRM_LICENSE: KSMETHOD_BDA_WMDRM = KSMETHOD_BDA_WMDRM(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_WMDRM_KEYINFO: KSMETHOD_BDA_WMDRM = KSMETHOD_BDA_WMDRM(7i32);
impl ::core::marker::Copy for KSMETHOD_BDA_WMDRM {}
impl ::core::clone::Clone for KSMETHOD_BDA_WMDRM {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_WMDRM {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_WMDRM {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_WMDRM {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_WMDRM").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSMETHOD_BDA_WMDRM_TUNER(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_WMDRMTUNER_CANCELCAPTURETOKEN: KSMETHOD_BDA_WMDRM_TUNER = KSMETHOD_BDA_WMDRM_TUNER(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_WMDRMTUNER_SETPIDPROTECTION: KSMETHOD_BDA_WMDRM_TUNER = KSMETHOD_BDA_WMDRM_TUNER(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_WMDRMTUNER_GETPIDPROTECTION: KSMETHOD_BDA_WMDRM_TUNER = KSMETHOD_BDA_WMDRM_TUNER(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_WMDRMTUNER_SETSYNCVALUE: KSMETHOD_BDA_WMDRM_TUNER = KSMETHOD_BDA_WMDRM_TUNER(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_WMDRMTUNER_STARTCODEPROFILE: KSMETHOD_BDA_WMDRM_TUNER = KSMETHOD_BDA_WMDRM_TUNER(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSMETHOD_BDA_WMDRMTUNER_PURCHASE_ENTITLEMENT: KSMETHOD_BDA_WMDRM_TUNER = KSMETHOD_BDA_WMDRM_TUNER(5i32);
impl ::core::marker::Copy for KSMETHOD_BDA_WMDRM_TUNER {}
impl ::core::clone::Clone for KSMETHOD_BDA_WMDRM_TUNER {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSMETHOD_BDA_WMDRM_TUNER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSMETHOD_BDA_WMDRM_TUNER {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSMETHOD_BDA_WMDRM_TUNER {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSMETHOD_BDA_WMDRM_TUNER").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_AUTODEMODULATE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_AUTODEMODULATE_START: KSPROPERTY_BDA_AUTODEMODULATE = KSPROPERTY_BDA_AUTODEMODULATE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_AUTODEMODULATE_STOP: KSPROPERTY_BDA_AUTODEMODULATE = KSPROPERTY_BDA_AUTODEMODULATE(1i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_AUTODEMODULATE {}
impl ::core::clone::Clone for KSPROPERTY_BDA_AUTODEMODULATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_AUTODEMODULATE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_AUTODEMODULATE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_AUTODEMODULATE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_AUTODEMODULATE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_CA(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_ECM_MAP_STATUS: KSPROPERTY_BDA_CA = KSPROPERTY_BDA_CA(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_CA_MODULE_STATUS: KSPROPERTY_BDA_CA = KSPROPERTY_BDA_CA(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_CA_SMART_CARD_STATUS: KSPROPERTY_BDA_CA = KSPROPERTY_BDA_CA(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_CA_MODULE_UI: KSPROPERTY_BDA_CA = KSPROPERTY_BDA_CA(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_CA_SET_PROGRAM_PIDS: KSPROPERTY_BDA_CA = KSPROPERTY_BDA_CA(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_CA_REMOVE_PROGRAM: KSPROPERTY_BDA_CA = KSPROPERTY_BDA_CA(5i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_CA {}
impl ::core::clone::Clone for KSPROPERTY_BDA_CA {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_CA {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_CA {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_CA {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_CA").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_CA_EVENT(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSEVENT_BDA_PROGRAM_FLOW_STATUS_CHANGED: KSPROPERTY_BDA_CA_EVENT = KSPROPERTY_BDA_CA_EVENT(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSEVENT_BDA_CA_MODULE_STATUS_CHANGED: KSPROPERTY_BDA_CA_EVENT = KSPROPERTY_BDA_CA_EVENT(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSEVENT_BDA_CA_SMART_CARD_STATUS_CHANGED: KSPROPERTY_BDA_CA_EVENT = KSPROPERTY_BDA_CA_EVENT(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSEVENT_BDA_CA_MODULE_UI_REQUESTED: KSPROPERTY_BDA_CA_EVENT = KSPROPERTY_BDA_CA_EVENT(3i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_CA_EVENT {}
impl ::core::clone::Clone for KSPROPERTY_BDA_CA_EVENT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_CA_EVENT {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_CA_EVENT {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_CA_EVENT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_CA_EVENT").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_DIGITAL_DEMODULATOR(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_MODULATION_TYPE: KSPROPERTY_BDA_DIGITAL_DEMODULATOR = KSPROPERTY_BDA_DIGITAL_DEMODULATOR(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_INNER_FEC_TYPE: KSPROPERTY_BDA_DIGITAL_DEMODULATOR = KSPROPERTY_BDA_DIGITAL_DEMODULATOR(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_INNER_FEC_RATE: KSPROPERTY_BDA_DIGITAL_DEMODULATOR = KSPROPERTY_BDA_DIGITAL_DEMODULATOR(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_OUTER_FEC_TYPE: KSPROPERTY_BDA_DIGITAL_DEMODULATOR = KSPROPERTY_BDA_DIGITAL_DEMODULATOR(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_OUTER_FEC_RATE: KSPROPERTY_BDA_DIGITAL_DEMODULATOR = KSPROPERTY_BDA_DIGITAL_DEMODULATOR(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_SYMBOL_RATE: KSPROPERTY_BDA_DIGITAL_DEMODULATOR = KSPROPERTY_BDA_DIGITAL_DEMODULATOR(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_SPECTRAL_INVERSION: KSPROPERTY_BDA_DIGITAL_DEMODULATOR = KSPROPERTY_BDA_DIGITAL_DEMODULATOR(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_GUARD_INTERVAL: KSPROPERTY_BDA_DIGITAL_DEMODULATOR = KSPROPERTY_BDA_DIGITAL_DEMODULATOR(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_TRANSMISSION_MODE: KSPROPERTY_BDA_DIGITAL_DEMODULATOR = KSPROPERTY_BDA_DIGITAL_DEMODULATOR(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_ROLL_OFF: KSPROPERTY_BDA_DIGITAL_DEMODULATOR = KSPROPERTY_BDA_DIGITAL_DEMODULATOR(9i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_PILOT: KSPROPERTY_BDA_DIGITAL_DEMODULATOR = KSPROPERTY_BDA_DIGITAL_DEMODULATOR(10i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_SIGNALTIMEOUTS: KSPROPERTY_BDA_DIGITAL_DEMODULATOR = KSPROPERTY_BDA_DIGITAL_DEMODULATOR(11i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_PLP_NUMBER: KSPROPERTY_BDA_DIGITAL_DEMODULATOR = KSPROPERTY_BDA_DIGITAL_DEMODULATOR(12i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_DIGITAL_DEMODULATOR {}
impl ::core::clone::Clone for KSPROPERTY_BDA_DIGITAL_DEMODULATOR {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_DIGITAL_DEMODULATOR {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_DIGITAL_DEMODULATOR {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_DIGITAL_DEMODULATOR {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_DIGITAL_DEMODULATOR").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_DISEQC_COMMAND(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_DISEQC_ENABLE: KSPROPERTY_BDA_DISEQC_COMMAND = KSPROPERTY_BDA_DISEQC_COMMAND(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_DISEQC_LNB_SOURCE: KSPROPERTY_BDA_DISEQC_COMMAND = KSPROPERTY_BDA_DISEQC_COMMAND(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_DISEQC_USETONEBURST: KSPROPERTY_BDA_DISEQC_COMMAND = KSPROPERTY_BDA_DISEQC_COMMAND(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_DISEQC_REPEATS: KSPROPERTY_BDA_DISEQC_COMMAND = KSPROPERTY_BDA_DISEQC_COMMAND(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_DISEQC_SEND: KSPROPERTY_BDA_DISEQC_COMMAND = KSPROPERTY_BDA_DISEQC_COMMAND(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_DISEQC_RESPONSE: KSPROPERTY_BDA_DISEQC_COMMAND = KSPROPERTY_BDA_DISEQC_COMMAND(5i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_DISEQC_COMMAND {}
impl ::core::clone::Clone for KSPROPERTY_BDA_DISEQC_COMMAND {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_DISEQC_COMMAND {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_DISEQC_COMMAND {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_DISEQC_COMMAND {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_DISEQC_COMMAND").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_DISEQC_EVENT(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSEVENT_BDA_DISEQC_DATA_RECEIVED: KSPROPERTY_BDA_DISEQC_EVENT = KSPROPERTY_BDA_DISEQC_EVENT(0i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_DISEQC_EVENT {}
impl ::core::clone::Clone for KSPROPERTY_BDA_DISEQC_EVENT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_DISEQC_EVENT {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_DISEQC_EVENT {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_DISEQC_EVENT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_DISEQC_EVENT").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_ETHERNET_FILTER(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST_SIZE: KSPROPERTY_BDA_ETHERNET_FILTER = KSPROPERTY_BDA_ETHERNET_FILTER(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST: KSPROPERTY_BDA_ETHERNET_FILTER = KSPROPERTY_BDA_ETHERNET_FILTER(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_MODE: KSPROPERTY_BDA_ETHERNET_FILTER = KSPROPERTY_BDA_ETHERNET_FILTER(2i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_ETHERNET_FILTER {}
impl ::core::clone::Clone for KSPROPERTY_BDA_ETHERNET_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_ETHERNET_FILTER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_ETHERNET_FILTER {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_ETHERNET_FILTER {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_ETHERNET_FILTER").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_FREQUENCY_FILTER(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_RF_TUNER_FREQUENCY: KSPROPERTY_BDA_FREQUENCY_FILTER = KSPROPERTY_BDA_FREQUENCY_FILTER(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_RF_TUNER_POLARITY: KSPROPERTY_BDA_FREQUENCY_FILTER = KSPROPERTY_BDA_FREQUENCY_FILTER(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_RF_TUNER_RANGE: KSPROPERTY_BDA_FREQUENCY_FILTER = KSPROPERTY_BDA_FREQUENCY_FILTER(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_RF_TUNER_TRANSPONDER: KSPROPERTY_BDA_FREQUENCY_FILTER = KSPROPERTY_BDA_FREQUENCY_FILTER(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_RF_TUNER_BANDWIDTH: KSPROPERTY_BDA_FREQUENCY_FILTER = KSPROPERTY_BDA_FREQUENCY_FILTER(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_RF_TUNER_FREQUENCY_MULTIPLIER: KSPROPERTY_BDA_FREQUENCY_FILTER = KSPROPERTY_BDA_FREQUENCY_FILTER(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_RF_TUNER_CAPS: KSPROPERTY_BDA_FREQUENCY_FILTER = KSPROPERTY_BDA_FREQUENCY_FILTER(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS: KSPROPERTY_BDA_FREQUENCY_FILTER = KSPROPERTY_BDA_FREQUENCY_FILTER(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_RF_TUNER_STANDARD: KSPROPERTY_BDA_FREQUENCY_FILTER = KSPROPERTY_BDA_FREQUENCY_FILTER(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE: KSPROPERTY_BDA_FREQUENCY_FILTER = KSPROPERTY_BDA_FREQUENCY_FILTER(9i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_FREQUENCY_FILTER {}
impl ::core::clone::Clone for KSPROPERTY_BDA_FREQUENCY_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_FREQUENCY_FILTER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_FREQUENCY_FILTER {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_FREQUENCY_FILTER {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_FREQUENCY_FILTER").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_IPv4_FILTER(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST_SIZE: KSPROPERTY_BDA_IPv4_FILTER = KSPROPERTY_BDA_IPv4_FILTER(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST: KSPROPERTY_BDA_IPv4_FILTER = KSPROPERTY_BDA_IPv4_FILTER(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_MODE: KSPROPERTY_BDA_IPv4_FILTER = KSPROPERTY_BDA_IPv4_FILTER(2i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_IPv4_FILTER {}
impl ::core::clone::Clone for KSPROPERTY_BDA_IPv4_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_IPv4_FILTER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_IPv4_FILTER {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_IPv4_FILTER {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_IPv4_FILTER").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_IPv6_FILTER(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST_SIZE: KSPROPERTY_BDA_IPv6_FILTER = KSPROPERTY_BDA_IPv6_FILTER(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST: KSPROPERTY_BDA_IPv6_FILTER = KSPROPERTY_BDA_IPv6_FILTER(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_MODE: KSPROPERTY_BDA_IPv6_FILTER = KSPROPERTY_BDA_IPv6_FILTER(2i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_IPv6_FILTER {}
impl ::core::clone::Clone for KSPROPERTY_BDA_IPv6_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_IPv6_FILTER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_IPv6_FILTER {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_IPv6_FILTER {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_IPv6_FILTER").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_LNB_INFO(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_LNB_LOF_LOW_BAND: KSPROPERTY_BDA_LNB_INFO = KSPROPERTY_BDA_LNB_INFO(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_LNB_LOF_HIGH_BAND: KSPROPERTY_BDA_LNB_INFO = KSPROPERTY_BDA_LNB_INFO(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_LNB_SWITCH_FREQUENCY: KSPROPERTY_BDA_LNB_INFO = KSPROPERTY_BDA_LNB_INFO(2i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_LNB_INFO {}
impl ::core::clone::Clone for KSPROPERTY_BDA_LNB_INFO {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_LNB_INFO {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_LNB_INFO {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_LNB_INFO {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_LNB_INFO").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_NULL_TRANSFORM(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_NULL_TRANSFORM_START: KSPROPERTY_BDA_NULL_TRANSFORM = KSPROPERTY_BDA_NULL_TRANSFORM(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_NULL_TRANSFORM_STOP: KSPROPERTY_BDA_NULL_TRANSFORM = KSPROPERTY_BDA_NULL_TRANSFORM(1i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_NULL_TRANSFORM {}
impl ::core::clone::Clone for KSPROPERTY_BDA_NULL_TRANSFORM {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_NULL_TRANSFORM {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_NULL_TRANSFORM {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_NULL_TRANSFORM {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_NULL_TRANSFORM").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_PIDFILTER(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_PIDFILTER_MAP_PIDS: KSPROPERTY_BDA_PIDFILTER = KSPROPERTY_BDA_PIDFILTER(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_PIDFILTER_UNMAP_PIDS: KSPROPERTY_BDA_PIDFILTER = KSPROPERTY_BDA_PIDFILTER(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_PIDFILTER_LIST_PIDS: KSPROPERTY_BDA_PIDFILTER = KSPROPERTY_BDA_PIDFILTER(2i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_PIDFILTER {}
impl ::core::clone::Clone for KSPROPERTY_BDA_PIDFILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_PIDFILTER {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_PIDFILTER {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_PIDFILTER {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_PIDFILTER").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_PIN_CONTROL(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_PIN_ID: KSPROPERTY_BDA_PIN_CONTROL = KSPROPERTY_BDA_PIN_CONTROL(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_PIN_TYPE: KSPROPERTY_BDA_PIN_CONTROL = KSPROPERTY_BDA_PIN_CONTROL(1i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_PIN_CONTROL {}
impl ::core::clone::Clone for KSPROPERTY_BDA_PIN_CONTROL {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_PIN_CONTROL {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_PIN_CONTROL {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_PIN_CONTROL {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_PIN_CONTROL").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_PIN_EVENT(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSEVENT_BDA_PIN_CONNECTED: KSPROPERTY_BDA_PIN_EVENT = KSPROPERTY_BDA_PIN_EVENT(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSEVENT_BDA_PIN_DISCONNECTED: KSPROPERTY_BDA_PIN_EVENT = KSPROPERTY_BDA_PIN_EVENT(1i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_PIN_EVENT {}
impl ::core::clone::Clone for KSPROPERTY_BDA_PIN_EVENT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_PIN_EVENT {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_PIN_EVENT {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_PIN_EVENT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_PIN_EVENT").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_SIGNAL_STATS(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_SIGNAL_STRENGTH: KSPROPERTY_BDA_SIGNAL_STATS = KSPROPERTY_BDA_SIGNAL_STATS(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_SIGNAL_QUALITY: KSPROPERTY_BDA_SIGNAL_STATS = KSPROPERTY_BDA_SIGNAL_STATS(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_SIGNAL_PRESENT: KSPROPERTY_BDA_SIGNAL_STATS = KSPROPERTY_BDA_SIGNAL_STATS(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_SIGNAL_LOCKED: KSPROPERTY_BDA_SIGNAL_STATS = KSPROPERTY_BDA_SIGNAL_STATS(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_SAMPLE_TIME: KSPROPERTY_BDA_SIGNAL_STATS = KSPROPERTY_BDA_SIGNAL_STATS(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_SIGNAL_LOCK_CAPS: KSPROPERTY_BDA_SIGNAL_STATS = KSPROPERTY_BDA_SIGNAL_STATS(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_SIGNAL_LOCK_TYPE: KSPROPERTY_BDA_SIGNAL_STATS = KSPROPERTY_BDA_SIGNAL_STATS(6i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_SIGNAL_STATS {}
impl ::core::clone::Clone for KSPROPERTY_BDA_SIGNAL_STATS {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_SIGNAL_STATS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_SIGNAL_STATS {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_SIGNAL_STATS {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_SIGNAL_STATS").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_TOPOLOGY(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_NODE_TYPES: KSPROPERTY_BDA_TOPOLOGY = KSPROPERTY_BDA_TOPOLOGY(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_PIN_TYPES: KSPROPERTY_BDA_TOPOLOGY = KSPROPERTY_BDA_TOPOLOGY(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_TEMPLATE_CONNECTIONS: KSPROPERTY_BDA_TOPOLOGY = KSPROPERTY_BDA_TOPOLOGY(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_NODE_METHODS: KSPROPERTY_BDA_TOPOLOGY = KSPROPERTY_BDA_TOPOLOGY(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_NODE_PROPERTIES: KSPROPERTY_BDA_TOPOLOGY = KSPROPERTY_BDA_TOPOLOGY(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_NODE_EVENTS: KSPROPERTY_BDA_TOPOLOGY = KSPROPERTY_BDA_TOPOLOGY(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_CONTROLLING_PIN_ID: KSPROPERTY_BDA_TOPOLOGY = KSPROPERTY_BDA_TOPOLOGY(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_NODE_DESCRIPTORS: KSPROPERTY_BDA_TOPOLOGY = KSPROPERTY_BDA_TOPOLOGY(7i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_TOPOLOGY {}
impl ::core::clone::Clone for KSPROPERTY_BDA_TOPOLOGY {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_TOPOLOGY {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_TOPOLOGY {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_TOPOLOGY {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_TOPOLOGY").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_BDA_VOID_TRANSFORM(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_VOID_TRANSFORM_START: KSPROPERTY_BDA_VOID_TRANSFORM = KSPROPERTY_BDA_VOID_TRANSFORM(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_VOID_TRANSFORM_STOP: KSPROPERTY_BDA_VOID_TRANSFORM = KSPROPERTY_BDA_VOID_TRANSFORM(1i32);
impl ::core::marker::Copy for KSPROPERTY_BDA_VOID_TRANSFORM {}
impl ::core::clone::Clone for KSPROPERTY_BDA_VOID_TRANSFORM {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_BDA_VOID_TRANSFORM {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_BDA_VOID_TRANSFORM {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_BDA_VOID_TRANSFORM {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_BDA_VOID_TRANSFORM").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct KSPROPERTY_IDS_BDA_TABLE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const KSPROPERTY_BDA_TABLE_SECTION: KSPROPERTY_IDS_BDA_TABLE = KSPROPERTY_IDS_BDA_TABLE(0i32);
impl ::core::marker::Copy for KSPROPERTY_IDS_BDA_TABLE {}
impl ::core::clone::Clone for KSPROPERTY_IDS_BDA_TABLE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for KSPROPERTY_IDS_BDA_TABLE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for KSPROPERTY_IDS_BDA_TABLE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for KSPROPERTY_IDS_BDA_TABLE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("KSPROPERTY_IDS_BDA_TABLE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct LicenseEventBlockReason(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const LIC_BadLicense: LicenseEventBlockReason = LicenseEventBlockReason(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const LIC_NeedIndiv: LicenseEventBlockReason = LicenseEventBlockReason(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const LIC_Expired: LicenseEventBlockReason = LicenseEventBlockReason(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const LIC_NeedActivation: LicenseEventBlockReason = LicenseEventBlockReason(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const LIC_ExtenderBlocked: LicenseEventBlockReason = LicenseEventBlockReason(4i32);
impl ::core::marker::Copy for LicenseEventBlockReason {}
impl ::core::clone::Clone for LicenseEventBlockReason {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for LicenseEventBlockReason {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for LicenseEventBlockReason {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for LicenseEventBlockReason {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("LicenseEventBlockReason").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct MPEG_CONTEXT_TYPE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_CONTEXT_BCS_DEMUX: MPEG_CONTEXT_TYPE = MPEG_CONTEXT_TYPE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_CONTEXT_WINSOCK: MPEG_CONTEXT_TYPE = MPEG_CONTEXT_TYPE(1i32);
impl ::core::marker::Copy for MPEG_CONTEXT_TYPE {}
impl ::core::clone::Clone for MPEG_CONTEXT_TYPE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for MPEG_CONTEXT_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for MPEG_CONTEXT_TYPE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for MPEG_CONTEXT_TYPE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MPEG_CONTEXT_TYPE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct MPEG_CURRENT_NEXT_BIT(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_SECTION_IS_NEXT: MPEG_CURRENT_NEXT_BIT = MPEG_CURRENT_NEXT_BIT(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_SECTION_IS_CURRENT: MPEG_CURRENT_NEXT_BIT = MPEG_CURRENT_NEXT_BIT(1i32);
impl ::core::marker::Copy for MPEG_CURRENT_NEXT_BIT {}
impl ::core::clone::Clone for MPEG_CURRENT_NEXT_BIT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for MPEG_CURRENT_NEXT_BIT {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for MPEG_CURRENT_NEXT_BIT {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for MPEG_CURRENT_NEXT_BIT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MPEG_CURRENT_NEXT_BIT").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct MPEG_REQUEST_TYPE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_RQST_UNKNOWN: MPEG_REQUEST_TYPE = MPEG_REQUEST_TYPE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_RQST_GET_SECTION: MPEG_REQUEST_TYPE = MPEG_REQUEST_TYPE(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_RQST_GET_SECTION_ASYNC: MPEG_REQUEST_TYPE = MPEG_REQUEST_TYPE(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_RQST_GET_TABLE: MPEG_REQUEST_TYPE = MPEG_REQUEST_TYPE(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_RQST_GET_TABLE_ASYNC: MPEG_REQUEST_TYPE = MPEG_REQUEST_TYPE(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_RQST_GET_SECTIONS_STREAM: MPEG_REQUEST_TYPE = MPEG_REQUEST_TYPE(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_RQST_GET_PES_STREAM: MPEG_REQUEST_TYPE = MPEG_REQUEST_TYPE(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_RQST_GET_TS_STREAM: MPEG_REQUEST_TYPE = MPEG_REQUEST_TYPE(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MPEG_RQST_START_MPE_STREAM: MPEG_REQUEST_TYPE = MPEG_REQUEST_TYPE(8i32);
impl ::core::marker::Copy for MPEG_REQUEST_TYPE {}
impl ::core::clone::Clone for MPEG_REQUEST_TYPE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for MPEG_REQUEST_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for MPEG_REQUEST_TYPE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for MPEG_REQUEST_TYPE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MPEG_REQUEST_TYPE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct MSVidCCService(pub i32);
impl MSVidCCService {
    pub const None: Self = Self(0i32);
    pub const Caption1: Self = Self(1i32);
    pub const Caption2: Self = Self(2i32);
    pub const Text1: Self = Self(3i32);
    pub const Text2: Self = Self(4i32);
    pub const XDS: Self = Self(5i32);
}
impl ::core::marker::Copy for MSVidCCService {}
impl ::core::clone::Clone for MSVidCCService {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for MSVidCCService {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for MSVidCCService {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for MSVidCCService {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MSVidCCService").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct MSVidCtlButtonstate(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVIDCTL_LEFT_BUTTON: MSVidCtlButtonstate = MSVidCtlButtonstate(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVIDCTL_RIGHT_BUTTON: MSVidCtlButtonstate = MSVidCtlButtonstate(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVIDCTL_MIDDLE_BUTTON: MSVidCtlButtonstate = MSVidCtlButtonstate(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVIDCTL_X_BUTTON1: MSVidCtlButtonstate = MSVidCtlButtonstate(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVIDCTL_X_BUTTON2: MSVidCtlButtonstate = MSVidCtlButtonstate(16i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVIDCTL_SHIFT: MSVidCtlButtonstate = MSVidCtlButtonstate(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVIDCTL_CTRL: MSVidCtlButtonstate = MSVidCtlButtonstate(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVIDCTL_ALT: MSVidCtlButtonstate = MSVidCtlButtonstate(4i32);
impl ::core::marker::Copy for MSVidCtlButtonstate {}
impl ::core::clone::Clone for MSVidCtlButtonstate {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for MSVidCtlButtonstate {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for MSVidCtlButtonstate {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for MSVidCtlButtonstate {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MSVidCtlButtonstate").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct MSVidCtlStateList(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STATE_UNBUILT: MSVidCtlStateList = MSVidCtlStateList(-1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STATE_STOP: MSVidCtlStateList = MSVidCtlStateList(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STATE_PAUSE: MSVidCtlStateList = MSVidCtlStateList(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STATE_PLAY: MSVidCtlStateList = MSVidCtlStateList(2i32);
impl ::core::marker::Copy for MSVidCtlStateList {}
impl ::core::clone::Clone for MSVidCtlStateList {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for MSVidCtlStateList {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for MSVidCtlStateList {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for MSVidCtlStateList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MSVidCtlStateList").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct MSVidSegmentType(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidSEG_SOURCE: MSVidSegmentType = MSVidSegmentType(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidSEG_XFORM: MSVidSegmentType = MSVidSegmentType(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidSEG_DEST: MSVidSegmentType = MSVidSegmentType(2i32);
impl ::core::marker::Copy for MSVidSegmentType {}
impl ::core::clone::Clone for MSVidSegmentType {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for MSVidSegmentType {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for MSVidSegmentType {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for MSVidSegmentType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MSVidSegmentType").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct MSVidSinkStreams(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidSink_Video: MSVidSinkStreams = MSVidSinkStreams(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidSink_Audio: MSVidSinkStreams = MSVidSinkStreams(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const MSVidSink_Other: MSVidSinkStreams = MSVidSinkStreams(4i32);
impl ::core::marker::Copy for MSVidSinkStreams {}
impl ::core::clone::Clone for MSVidSinkStreams {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for MSVidSinkStreams {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for MSVidSinkStreams {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for MSVidSinkStreams {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MSVidSinkStreams").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct MSViddispidList(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidInputs: MSViddispidList = MSViddispidList(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidOutputs: MSViddispidList = MSViddispidList(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_Inputs: MSViddispidList = MSViddispidList(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_Outputs: MSViddispidList = MSViddispidList(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidVideoRenderers: MSViddispidList = MSViddispidList(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidAudioRenderers: MSViddispidList = MSViddispidList(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidFeatures: MSViddispidList = MSViddispidList(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidInput: MSViddispidList = MSViddispidList(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidOutput: MSViddispidList = MSViddispidList(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidVideoRenderer: MSViddispidList = MSViddispidList(9i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidAudioRenderer: MSViddispidList = MSViddispidList(10i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidSelectedFeatures: MSViddispidList = MSViddispidList(11i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidView: MSViddispidList = MSViddispidList(12i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidBuild: MSViddispidList = MSViddispidList(13i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidPause: MSViddispidList = MSViddispidList(14i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidRun: MSViddispidList = MSViddispidList(15i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidStop: MSViddispidList = MSViddispidList(16i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDecompose: MSViddispidList = MSViddispidList(17i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDisplaySize: MSViddispidList = MSViddispidList(18i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidMaintainAspectRatio: MSViddispidList = MSViddispidList(19i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidColorKey: MSViddispidList = MSViddispidList(20i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidStateChange: MSViddispidList = MSViddispidList(21i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidgetState: MSViddispidList = MSViddispidList(22i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidunbind: MSViddispidList = MSViddispidList(23i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidbind: MSViddispidList = MSViddispidList(24i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDisableVideo: MSViddispidList = MSViddispidList(25i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDisableAudio: MSViddispidList = MSViddispidList(26i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidViewNext: MSViddispidList = MSViddispidList(27i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidServiceP: MSViddispidList = MSViddispidList(28i32);
impl ::core::marker::Copy for MSViddispidList {}
impl ::core::clone::Clone for MSViddispidList {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for MSViddispidList {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for MSViddispidList {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for MSViddispidList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MSViddispidList").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct PositionModeList(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const FrameMode: PositionModeList = PositionModeList(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const TenthsSecondsMode: PositionModeList = PositionModeList(1i32);
impl ::core::marker::Copy for PositionModeList {}
impl ::core::clone::Clone for PositionModeList {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for PositionModeList {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for PositionModeList {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for PositionModeList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PositionModeList").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ProtType(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PROT_COPY_FREE: ProtType = ProtType(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PROT_COPY_ONCE: ProtType = ProtType(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PROT_COPY_NEVER: ProtType = ProtType(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PROT_COPY_NEVER_REALLY: ProtType = ProtType(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PROT_COPY_NO_MORE: ProtType = ProtType(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PROT_COPY_FREE_CIT: ProtType = ProtType(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PROT_COPY_BF: ProtType = ProtType(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PROT_COPY_CN_RECORDING_STOP: ProtType = ProtType(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PROT_COPY_FREE_SECURE: ProtType = ProtType(9i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const PROT_COPY_INVALID: ProtType = ProtType(50i32);
impl ::core::marker::Copy for ProtType {}
impl ::core::clone::Clone for ProtType {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ProtType {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for ProtType {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for ProtType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ProtType").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct RECORDING_TYPE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const RECORDING_TYPE_CONTENT: RECORDING_TYPE = RECORDING_TYPE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const RECORDING_TYPE_REFERENCE: RECORDING_TYPE = RECORDING_TYPE(1i32);
impl ::core::marker::Copy for RECORDING_TYPE {}
impl ::core::clone::Clone for RECORDING_TYPE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for RECORDING_TYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for RECORDING_TYPE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for RECORDING_TYPE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RECORDING_TYPE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct RecordingType(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const CONTENT: RecordingType = RecordingType(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const REFERENCE: RecordingType = RecordingType(1i32);
impl ::core::marker::Copy for RecordingType {}
impl ::core::clone::Clone for RecordingType {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for RecordingType {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for RecordingType {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for RecordingType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RecordingType").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct RevokedComponent(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const REVOKED_COPP: RevokedComponent = RevokedComponent(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const REVOKED_SAC: RevokedComponent = RevokedComponent(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const REVOKED_APP_STUB: RevokedComponent = RevokedComponent(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const REVOKED_SECURE_PIPELINE: RevokedComponent = RevokedComponent(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const REVOKED_MAX_TYPES: RevokedComponent = RevokedComponent(4i32);
impl ::core::marker::Copy for RevokedComponent {}
impl ::core::clone::Clone for RevokedComponent {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for RevokedComponent {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for RevokedComponent {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for RevokedComponent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RevokedComponent").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct STREAMBUFFER_ATTR_DATATYPE(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_TYPE_DWORD: STREAMBUFFER_ATTR_DATATYPE = STREAMBUFFER_ATTR_DATATYPE(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_TYPE_STRING: STREAMBUFFER_ATTR_DATATYPE = STREAMBUFFER_ATTR_DATATYPE(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_TYPE_BINARY: STREAMBUFFER_ATTR_DATATYPE = STREAMBUFFER_ATTR_DATATYPE(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_TYPE_BOOL: STREAMBUFFER_ATTR_DATATYPE = STREAMBUFFER_ATTR_DATATYPE(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_TYPE_QWORD: STREAMBUFFER_ATTR_DATATYPE = STREAMBUFFER_ATTR_DATATYPE(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_TYPE_WORD: STREAMBUFFER_ATTR_DATATYPE = STREAMBUFFER_ATTR_DATATYPE(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const STREAMBUFFER_TYPE_GUID: STREAMBUFFER_ATTR_DATATYPE = STREAMBUFFER_ATTR_DATATYPE(6i32);
impl ::core::marker::Copy for STREAMBUFFER_ATTR_DATATYPE {}
impl ::core::clone::Clone for STREAMBUFFER_ATTR_DATATYPE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for STREAMBUFFER_ATTR_DATATYPE {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for STREAMBUFFER_ATTR_DATATYPE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for STREAMBUFFER_ATTR_DATATYPE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("STREAMBUFFER_ATTR_DATATYPE").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct SegDispidList(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidName: SegDispidList = SegDispidList(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidStatus: SegDispidList = SegDispidList(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevImageSourceWidth: SegDispidList = SegDispidList(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevImageSourceHeight: SegDispidList = SegDispidList(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevCountryCode: SegDispidList = SegDispidList(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevOverScan: SegDispidList = SegDispidList(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidSegment: SegDispidList = SegDispidList(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevVolume: SegDispidList = SegDispidList(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevBalance: SegDispidList = SegDispidList(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevPower: SegDispidList = SegDispidList(9i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidTuneChan: SegDispidList = SegDispidList(10i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevVideoSubchannel: SegDispidList = SegDispidList(11i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevAudioSubchannel: SegDispidList = SegDispidList(12i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidChannelAvailable: SegDispidList = SegDispidList(13i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevVideoFrequency: SegDispidList = SegDispidList(14i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevAudioFrequency: SegDispidList = SegDispidList(15i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidCount: SegDispidList = SegDispidList(16i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevFileName: SegDispidList = SegDispidList(17i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidVisible: SegDispidList = SegDispidList(18i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidOwner: SegDispidList = SegDispidList(19i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidMessageDrain: SegDispidList = SegDispidList(20i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidViewable: SegDispidList = SegDispidList(21i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevView: SegDispidList = SegDispidList(22i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidKSCat: SegDispidList = SegDispidList(23i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidCLSID: SegDispidList = SegDispidList(24i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_KSCat: SegDispidList = SegDispidList(25i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_CLSID: SegDispidList = SegDispidList(26i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidTune: SegDispidList = SegDispidList(27i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidTS: SegDispidList = SegDispidList(28i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevSAP: SegDispidList = SegDispidList(29i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidClip: SegDispidList = SegDispidList(30i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidRequestedClipRect: SegDispidList = SegDispidList(31i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidClippedSourceRect: SegDispidList = SegDispidList(32i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidAvailableSourceRect: SegDispidList = SegDispidList(33i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidMediaPosition: SegDispidList = SegDispidList(34i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevRun: SegDispidList = SegDispidList(35i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevPause: SegDispidList = SegDispidList(36i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevStop: SegDispidList = SegDispidList(37i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidCCEnable: SegDispidList = SegDispidList(38i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevStep: SegDispidList = SegDispidList(39i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevCanStep: SegDispidList = SegDispidList(40i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidSourceSize: SegDispidList = SegDispidList(41i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_playtitle: SegDispidList = SegDispidList(42i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_playchapterintitle: SegDispidList = SegDispidList(43i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_playchapter: SegDispidList = SegDispidList(44i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_playchaptersautostop: SegDispidList = SegDispidList(45i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_playattime: SegDispidList = SegDispidList(46i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_playattimeintitle: SegDispidList = SegDispidList(47i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_playperiodintitleautostop: SegDispidList = SegDispidList(48i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_replaychapter: SegDispidList = SegDispidList(49i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_playprevchapter: SegDispidList = SegDispidList(50i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_playnextchapter: SegDispidList = SegDispidList(51i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_playforwards: SegDispidList = SegDispidList(52i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_playbackwards: SegDispidList = SegDispidList(53i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_stilloff: SegDispidList = SegDispidList(54i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_audiolanguage: SegDispidList = SegDispidList(55i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_showmenu: SegDispidList = SegDispidList(56i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_resume: SegDispidList = SegDispidList(57i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_returnfromsubmenu: SegDispidList = SegDispidList(58i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_buttonsavailable: SegDispidList = SegDispidList(59i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_currentbutton: SegDispidList = SegDispidList(60i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SelectAndActivateButton: SegDispidList = SegDispidList(61i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_ActivateButton: SegDispidList = SegDispidList(62i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SelectRightButton: SegDispidList = SegDispidList(63i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SelectLeftButton: SegDispidList = SegDispidList(64i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SelectLowerButton: SegDispidList = SegDispidList(65i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SelectUpperButton: SegDispidList = SegDispidList(66i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_ActivateAtPosition: SegDispidList = SegDispidList(67i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SelectAtPosition: SegDispidList = SegDispidList(68i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_ButtonAtPosition: SegDispidList = SegDispidList(69i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_NumberOfChapters: SegDispidList = SegDispidList(70i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_TotalTitleTime: SegDispidList = SegDispidList(71i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_TitlesAvailable: SegDispidList = SegDispidList(72i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_VolumesAvailable: SegDispidList = SegDispidList(73i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_CurrentVolume: SegDispidList = SegDispidList(74i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_CurrentDiscSide: SegDispidList = SegDispidList(75i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_CurrentDomain: SegDispidList = SegDispidList(76i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_CurrentChapter: SegDispidList = SegDispidList(77i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_CurrentTitle: SegDispidList = SegDispidList(78i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_CurrentTime: SegDispidList = SegDispidList(79i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_FramesPerSecond: SegDispidList = SegDispidList(80i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DVDTimeCode2bstr: SegDispidList = SegDispidList(81i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DVDDirectory: SegDispidList = SegDispidList(82i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_IsSubpictureStreamEnabled: SegDispidList = SegDispidList(83i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_IsAudioStreamEnabled: SegDispidList = SegDispidList(84i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_CurrentSubpictureStream: SegDispidList = SegDispidList(85i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SubpictureLanguage: SegDispidList = SegDispidList(86i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_CurrentAudioStream: SegDispidList = SegDispidList(87i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_AudioStreamsAvailable: SegDispidList = SegDispidList(88i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_AnglesAvailable: SegDispidList = SegDispidList(89i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_CurrentAngle: SegDispidList = SegDispidList(90i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_CCActive: SegDispidList = SegDispidList(91i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_CurrentCCService: SegDispidList = SegDispidList(92i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SubpictureStreamsAvailable: SegDispidList = SegDispidList(93i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SubpictureOn: SegDispidList = SegDispidList(94i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DVDUniqueID: SegDispidList = SegDispidList(95i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_EnableResetOnStop: SegDispidList = SegDispidList(96i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_AcceptParentalLevelChange: SegDispidList = SegDispidList(97i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_NotifyParentalLevelChange: SegDispidList = SegDispidList(98i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SelectParentalCountry: SegDispidList = SegDispidList(99i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SelectParentalLevel: SegDispidList = SegDispidList(100i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_TitleParentalLevels: SegDispidList = SegDispidList(101i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_PlayerParentalCountry: SegDispidList = SegDispidList(102i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_PlayerParentalLevel: SegDispidList = SegDispidList(103i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_Eject: SegDispidList = SegDispidList(104i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_UOPValid: SegDispidList = SegDispidList(105i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SPRM: SegDispidList = SegDispidList(106i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_GPRM: SegDispidList = SegDispidList(107i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DVDTextStringType: SegDispidList = SegDispidList(108i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DVDTextString: SegDispidList = SegDispidList(109i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DVDTextNumberOfStrings: SegDispidList = SegDispidList(110i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DVDTextNumberOfLanguages: SegDispidList = SegDispidList(111i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DVDTextLanguageLCID: SegDispidList = SegDispidList(112i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_RegionChange: SegDispidList = SegDispidList(113i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DVDAdm: SegDispidList = SegDispidList(114i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DeleteBookmark: SegDispidList = SegDispidList(115i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_RestoreBookmark: SegDispidList = SegDispidList(116i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SaveBookmark: SegDispidList = SegDispidList(117i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SelectDefaultAudioLanguage: SegDispidList = SegDispidList(118i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SelectDefaultSubpictureLanguage: SegDispidList = SegDispidList(119i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_PreferredSubpictureStream: SegDispidList = SegDispidList(120i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DefaultMenuLanguage: SegDispidList = SegDispidList(121i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DefaultSubpictureLanguage: SegDispidList = SegDispidList(122i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DefaultAudioLanguage: SegDispidList = SegDispidList(123i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DefaultSubpictureLanguageExt: SegDispidList = SegDispidList(124i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DefaultAudioLanguageExt: SegDispidList = SegDispidList(125i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_LanguageFromLCID: SegDispidList = SegDispidList(126i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_KaraokeAudioPresentationMode: SegDispidList = SegDispidList(127i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_KaraokeChannelContent: SegDispidList = SegDispidList(128i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_KaraokeChannelAssignment: SegDispidList = SegDispidList(129i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_RestorePreferredSettings: SegDispidList = SegDispidList(130i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_ButtonRect: SegDispidList = SegDispidList(131i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DVDScreenInMouseCoordinates: SegDispidList = SegDispidList(132i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_CustomCompositorClass: SegDispidList = SegDispidList(133i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidCustomCompositorClass: SegDispidList = SegDispidList(134i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_CustomCompositor: SegDispidList = SegDispidList(135i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidMixerBitmap: SegDispidList = SegDispidList(136i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_MixerBitmap: SegDispidList = SegDispidList(137i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidMixerBitmapOpacity: SegDispidList = SegDispidList(138i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidMixerBitmapRect: SegDispidList = SegDispidList(139i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidSetupMixerBitmap: SegDispidList = SegDispidList(140i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidUsingOverlay: SegDispidList = SegDispidList(141i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDisplayChange: SegDispidList = SegDispidList(142i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidRePaint: SegDispidList = SegDispidList(143i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_IsEqualDevice: SegDispidList = SegDispidList(144i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidrate: SegDispidList = SegDispidList(145i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidposition: SegDispidList = SegDispidList(146i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidpositionmode: SegDispidList = SegDispidList(147i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidlength: SegDispidList = SegDispidList(148i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidChangePassword: SegDispidList = SegDispidList(149i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidSaveParentalLevel: SegDispidList = SegDispidList(150i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidSaveParentalCountry: SegDispidList = SegDispidList(151i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidConfirmPassword: SegDispidList = SegDispidList(152i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidGetParentalLevel: SegDispidList = SegDispidList(153i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidGetParentalCountry: SegDispidList = SegDispidList(154i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDefaultAudioLCID: SegDispidList = SegDispidList(155i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDefaultSubpictureLCID: SegDispidList = SegDispidList(156i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDefaultMenuLCID: SegDispidList = SegDispidList(157i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidBookmarkOnStop: SegDispidList = SegDispidList(158i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidMaxVidRect: SegDispidList = SegDispidList(159i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidMinVidRect: SegDispidList = SegDispidList(160i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidCapture: SegDispidList = SegDispidList(161i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_DecimateInput: SegDispidList = SegDispidList(162i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidAlloctor: SegDispidList = SegDispidList(163i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_Allocator: SegDispidList = SegDispidList(164i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidAllocPresentID: SegDispidList = SegDispidList(165i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidSetAllocator: SegDispidList = SegDispidList(166i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SetAllocator: SegDispidList = SegDispidList(167i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidStreamBufferSinkName: SegDispidList = SegDispidList(168i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidStreamBufferSourceName: SegDispidList = SegDispidList(169i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidStreamBufferContentRecording: SegDispidList = SegDispidList(170i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidStreamBufferReferenceRecording: SegDispidList = SegDispidList(171i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidstarttime: SegDispidList = SegDispidList(172i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidstoptime: SegDispidList = SegDispidList(173i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidrecordingstopped: SegDispidList = SegDispidList(174i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidrecordingstarted: SegDispidList = SegDispidList(175i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidNameSetLock: SegDispidList = SegDispidList(176i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidrecordingtype: SegDispidList = SegDispidList(177i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidstart: SegDispidList = SegDispidList(178i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidRecordingAttribute: SegDispidList = SegDispidList(179i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_RecordingAttribute: SegDispidList = SegDispidList(180i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidSBEConfigure: SegDispidList = SegDispidList(181i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_CurrentRatings: SegDispidList = SegDispidList(182i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_MaxRatingsLevel: SegDispidList = SegDispidList(183i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_audioencoderint: SegDispidList = SegDispidList(184i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_videoencoderint: SegDispidList = SegDispidList(185i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidService: SegDispidList = SegDispidList(186i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_BlockUnrated: SegDispidList = SegDispidList(187i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_UnratedDelay: SegDispidList = SegDispidList(188i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SuppressEffects: SegDispidList = SegDispidList(189i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidsbesource: SegDispidList = SegDispidList(190i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidSetSinkFilter: SegDispidList = SegDispidList(191i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SinkStreams: SegDispidList = SegDispidList(192i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidTVFormats: SegDispidList = SegDispidList(193i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidModes: SegDispidList = SegDispidList(194i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidAuxInputs: SegDispidList = SegDispidList(195i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidTeleTextFilter: SegDispidList = SegDispidList(196i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_channelchangeint: SegDispidList = SegDispidList(197i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidUnlockProfile: SegDispidList = SegDispidList(198i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_AddFilter: SegDispidList = SegDispidList(199i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidSetMinSeek: SegDispidList = SegDispidList(200i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidRateEx: SegDispidList = SegDispidList(201i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidaudiocounter: SegDispidList = SegDispidList(202i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidvideocounter: SegDispidList = SegDispidList(203i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidcccounter: SegDispidList = SegDispidList(204i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidwstcounter: SegDispidList = SegDispidList(205i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_audiocounter: SegDispidList = SegDispidList(206i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_videocounter: SegDispidList = SegDispidList(207i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_cccounter: SegDispidList = SegDispidList(208i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_wstcounter: SegDispidList = SegDispidList(209i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidaudioanalysis: SegDispidList = SegDispidList(210i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidvideoanalysis: SegDispidList = SegDispidList(211i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispiddataanalysis: SegDispidList = SegDispidList(212i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidaudio_analysis: SegDispidList = SegDispidList(213i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidvideo_analysis: SegDispidList = SegDispidList(214i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispiddata_analysis: SegDispidList = SegDispidList(215i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_resetFilterList: SegDispidList = SegDispidList(216i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidDevicePath: SegDispidList = SegDispidList(217i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_SourceFilter: SegDispidList = SegDispidList(218i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid__SourceFilter: SegDispidList = SegDispidList(219i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidUserEvent: SegDispidList = SegDispidList(220i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispid_Bookmark: SegDispidList = SegDispidList(221i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const LastReservedDeviceDispid: SegDispidList = SegDispidList(16383i32);
impl ::core::marker::Copy for SegDispidList {}
impl ::core::clone::Clone for SegDispidList {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for SegDispidList {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for SegDispidList {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for SegDispidList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SegDispidList").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct SegEventidList(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidStateChange: SegEventidList = SegEventidList(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidOnTuneChanged: SegEventidList = SegEventidList(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidEndOfMedia: SegEventidList = SegEventidList(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidDVDNotify: SegEventidList = SegEventidList(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidPlayForwards: SegEventidList = SegEventidList(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidPlayBackwards: SegEventidList = SegEventidList(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidShowMenu: SegEventidList = SegEventidList(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidResume: SegEventidList = SegEventidList(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidSelectOrActivateButton: SegEventidList = SegEventidList(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidStillOff: SegEventidList = SegEventidList(9i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidPauseOn: SegEventidList = SegEventidList(10i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidChangeCurrentAudioStream: SegEventidList = SegEventidList(11i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidChangeCurrentSubpictureStream: SegEventidList = SegEventidList(12i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidChangeCurrentAngle: SegEventidList = SegEventidList(13i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidPlayAtTimeInTitle: SegEventidList = SegEventidList(14i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidPlayAtTime: SegEventidList = SegEventidList(15i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidPlayChapterInTitle: SegEventidList = SegEventidList(16i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidPlayChapter: SegEventidList = SegEventidList(17i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidReplayChapter: SegEventidList = SegEventidList(18i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidPlayNextChapter: SegEventidList = SegEventidList(19i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidStop: SegEventidList = SegEventidList(20i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidReturnFromSubmenu: SegEventidList = SegEventidList(21i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidPlayTitle: SegEventidList = SegEventidList(22i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidPlayPrevChapter: SegEventidList = SegEventidList(23i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidChangeKaraokePresMode: SegEventidList = SegEventidList(24i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidChangeVideoPresMode: SegEventidList = SegEventidList(25i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidOverlayUnavailable: SegEventidList = SegEventidList(26i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidSinkCertificateFailure: SegEventidList = SegEventidList(27i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidSinkCertificateSuccess: SegEventidList = SegEventidList(28i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidSourceCertificateFailure: SegEventidList = SegEventidList(29i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidSourceCertificateSuccess: SegEventidList = SegEventidList(30i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidRatingsBlocked: SegEventidList = SegEventidList(31i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidRatingsUnlocked: SegEventidList = SegEventidList(32i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidRatingsChanged: SegEventidList = SegEventidList(33i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidWriteFailure: SegEventidList = SegEventidList(34i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidTimeHole: SegEventidList = SegEventidList(35i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidStaleDataRead: SegEventidList = SegEventidList(36i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidContentBecomingStale: SegEventidList = SegEventidList(37i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidStaleFileDeleted: SegEventidList = SegEventidList(38i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidEncryptionOn: SegEventidList = SegEventidList(39i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidEncryptionOff: SegEventidList = SegEventidList(40i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidRateChange: SegEventidList = SegEventidList(41i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidLicenseChange: SegEventidList = SegEventidList(42i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidCOPPBlocked: SegEventidList = SegEventidList(43i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidCOPPUnblocked: SegEventidList = SegEventidList(44i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidlicenseerrorcode: SegEventidList = SegEventidList(45i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidBroadcastEvent: SegEventidList = SegEventidList(46i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidBroadcastEventEx: SegEventidList = SegEventidList(47i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidContentPrimarilyAudio: SegEventidList = SegEventidList(48i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidAVDecAudioDualMonoEvent: SegEventidList = SegEventidList(49i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidAVAudioSampleRateEvent: SegEventidList = SegEventidList(50i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidAVAudioChannelConfigEvent: SegEventidList = SegEventidList(51i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidAVAudioChannelCountEvent: SegEventidList = SegEventidList(52i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidAVDecCommonMeanBitRateEvent: SegEventidList = SegEventidList(53i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidAVDDSurroundModeEvent: SegEventidList = SegEventidList(54i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidAVDecCommonInputFormatEvent: SegEventidList = SegEventidList(55i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const dispidAVDecCommonOutputFormatEvent: SegEventidList = SegEventidList(56i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const eventidWriteFailureClear: SegEventidList = SegEventidList(57i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const LastReservedDeviceEvent: SegEventidList = SegEventidList(16383i32);
impl ::core::marker::Copy for SegEventidList {}
impl ::core::clone::Clone for SegEventidList {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for SegEventidList {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for SegEventidList {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for SegEventidList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SegEventidList").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct SignalAndServiceStatusSpanningEvent_State(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SignalAndServiceStatusSpanningEvent_None: SignalAndServiceStatusSpanningEvent_State = SignalAndServiceStatusSpanningEvent_State(-1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SignalAndServiceStatusSpanningEvent_Clear: SignalAndServiceStatusSpanningEvent_State = SignalAndServiceStatusSpanningEvent_State(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SignalAndServiceStatusSpanningEvent_NoTVSignal: SignalAndServiceStatusSpanningEvent_State = SignalAndServiceStatusSpanningEvent_State(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SignalAndServiceStatusSpanningEvent_ServiceOffAir: SignalAndServiceStatusSpanningEvent_State = SignalAndServiceStatusSpanningEvent_State(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SignalAndServiceStatusSpanningEvent_WeakTVSignal: SignalAndServiceStatusSpanningEvent_State = SignalAndServiceStatusSpanningEvent_State(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SignalAndServiceStatusSpanningEvent_NoSubscription: SignalAndServiceStatusSpanningEvent_State = SignalAndServiceStatusSpanningEvent_State(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const SignalAndServiceStatusSpanningEvent_AllAVScrambled: SignalAndServiceStatusSpanningEvent_State = SignalAndServiceStatusSpanningEvent_State(5i32);
impl ::core::marker::Copy for SignalAndServiceStatusSpanningEvent_State {}
impl ::core::clone::Clone for SignalAndServiceStatusSpanningEvent_State {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for SignalAndServiceStatusSpanningEvent_State {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for SignalAndServiceStatusSpanningEvent_State {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for SignalAndServiceStatusSpanningEvent_State {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SignalAndServiceStatusSpanningEvent_State").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct SourceSizeList(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const sslFullSize: SourceSizeList = SourceSizeList(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const sslClipByOverScan: SourceSizeList = SourceSizeList(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const sslClipByClipRect: SourceSizeList = SourceSizeList(2i32);
impl ::core::marker::Copy for SourceSizeList {}
impl ::core::clone::Clone for SourceSizeList {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for SourceSizeList {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for SourceSizeList {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for SourceSizeList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SourceSizeList").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct VA_COLOR_PRIMARIES(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_PRIMARIES_ITU_R_BT_709: VA_COLOR_PRIMARIES = VA_COLOR_PRIMARIES(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_PRIMARIES_UNSPECIFIED: VA_COLOR_PRIMARIES = VA_COLOR_PRIMARIES(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_PRIMARIES_ITU_R_BT_470_SYSTEM_M: VA_COLOR_PRIMARIES = VA_COLOR_PRIMARIES(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_PRIMARIES_ITU_R_BT_470_SYSTEM_B_G: VA_COLOR_PRIMARIES = VA_COLOR_PRIMARIES(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_PRIMARIES_SMPTE_170M: VA_COLOR_PRIMARIES = VA_COLOR_PRIMARIES(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_PRIMARIES_SMPTE_240M: VA_COLOR_PRIMARIES = VA_COLOR_PRIMARIES(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_PRIMARIES_H264_GENERIC_FILM: VA_COLOR_PRIMARIES = VA_COLOR_PRIMARIES(8i32);
impl ::core::marker::Copy for VA_COLOR_PRIMARIES {}
impl ::core::clone::Clone for VA_COLOR_PRIMARIES {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for VA_COLOR_PRIMARIES {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for VA_COLOR_PRIMARIES {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for VA_COLOR_PRIMARIES {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("VA_COLOR_PRIMARIES").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct VA_MATRIX_COEFFICIENTS(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_MATRIX_COEFF_H264_RGB: VA_MATRIX_COEFFICIENTS = VA_MATRIX_COEFFICIENTS(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_MATRIX_COEFF_ITU_R_BT_709: VA_MATRIX_COEFFICIENTS = VA_MATRIX_COEFFICIENTS(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_MATRIX_COEFF_UNSPECIFIED: VA_MATRIX_COEFFICIENTS = VA_MATRIX_COEFFICIENTS(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_MATRIX_COEFF_FCC: VA_MATRIX_COEFFICIENTS = VA_MATRIX_COEFFICIENTS(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_MATRIX_COEFF_ITU_R_BT_470_SYSTEM_B_G: VA_MATRIX_COEFFICIENTS = VA_MATRIX_COEFFICIENTS(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_MATRIX_COEFF_SMPTE_170M: VA_MATRIX_COEFFICIENTS = VA_MATRIX_COEFFICIENTS(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_MATRIX_COEFF_SMPTE_240M: VA_MATRIX_COEFFICIENTS = VA_MATRIX_COEFFICIENTS(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_MATRIX_COEFF_H264_YCgCo: VA_MATRIX_COEFFICIENTS = VA_MATRIX_COEFFICIENTS(8i32);
impl ::core::marker::Copy for VA_MATRIX_COEFFICIENTS {}
impl ::core::clone::Clone for VA_MATRIX_COEFFICIENTS {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for VA_MATRIX_COEFFICIENTS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for VA_MATRIX_COEFFICIENTS {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for VA_MATRIX_COEFFICIENTS {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("VA_MATRIX_COEFFICIENTS").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct VA_TRANSFER_CHARACTERISTICS(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_709: VA_TRANSFER_CHARACTERISTICS = VA_TRANSFER_CHARACTERISTICS(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_TRANSFER_CHARACTERISTICS_UNSPECIFIED: VA_TRANSFER_CHARACTERISTICS = VA_TRANSFER_CHARACTERISTICS(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_470_SYSTEM_M: VA_TRANSFER_CHARACTERISTICS = VA_TRANSFER_CHARACTERISTICS(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_TRANSFER_CHARACTERISTICS_ITU_R_BT_470_SYSTEM_B_G: VA_TRANSFER_CHARACTERISTICS = VA_TRANSFER_CHARACTERISTICS(5i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_TRANSFER_CHARACTERISTICS_SMPTE_170M: VA_TRANSFER_CHARACTERISTICS = VA_TRANSFER_CHARACTERISTICS(6i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_TRANSFER_CHARACTERISTICS_SMPTE_240M: VA_TRANSFER_CHARACTERISTICS = VA_TRANSFER_CHARACTERISTICS(7i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_TRANSFER_CHARACTERISTICS_LINEAR: VA_TRANSFER_CHARACTERISTICS = VA_TRANSFER_CHARACTERISTICS(8i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_TRANSFER_CHARACTERISTICS_H264_LOG_100_TO_1: VA_TRANSFER_CHARACTERISTICS = VA_TRANSFER_CHARACTERISTICS(9i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_TRANSFER_CHARACTERISTICS_H264_LOG_316_TO_1: VA_TRANSFER_CHARACTERISTICS = VA_TRANSFER_CHARACTERISTICS(10i32);
impl ::core::marker::Copy for VA_TRANSFER_CHARACTERISTICS {}
impl ::core::clone::Clone for VA_TRANSFER_CHARACTERISTICS {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for VA_TRANSFER_CHARACTERISTICS {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for VA_TRANSFER_CHARACTERISTICS {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for VA_TRANSFER_CHARACTERISTICS {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("VA_TRANSFER_CHARACTERISTICS").field(&self.0).finish()
    }
}
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct VA_VIDEO_FORMAT(pub i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_VIDEO_COMPONENT: VA_VIDEO_FORMAT = VA_VIDEO_FORMAT(0i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_VIDEO_PAL: VA_VIDEO_FORMAT = VA_VIDEO_FORMAT(1i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_VIDEO_NTSC: VA_VIDEO_FORMAT = VA_VIDEO_FORMAT(2i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_VIDEO_SECAM: VA_VIDEO_FORMAT = VA_VIDEO_FORMAT(3i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_VIDEO_MAC: VA_VIDEO_FORMAT = VA_VIDEO_FORMAT(4i32);
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub const VA_VIDEO_UNSPECIFIED: VA_VIDEO_FORMAT = VA_VIDEO_FORMAT(5i32);
impl ::core::marker::Copy for VA_VIDEO_FORMAT {}
impl ::core::clone::Clone for VA_VIDEO_FORMAT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for VA_VIDEO_FORMAT {
    fn default() -> Self {
        Self(0)
    }
}
impl ::windows::core::TypeKind for VA_VIDEO_FORMAT {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::fmt::Debug for VA_VIDEO_FORMAT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("VA_VIDEO_FORMAT").field(&self.0).finish()
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
pub struct ATSC_FILTER_OPTIONS {
    pub fSpecifyEtmId: super::super::super::Foundation::BOOL,
    pub EtmId: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::marker::Copy for ATSC_FILTER_OPTIONS {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::clone::Clone for ATSC_FILTER_OPTIONS {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows::core::TypeKind for ATSC_FILTER_OPTIONS {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for ATSC_FILTER_OPTIONS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct BDA_DEBUG_DATA {
    pub lResult: i32,
    pub uuidDebugDataType: ::windows::core::GUID,
    pub ulDataSize: u32,
    pub argbDebugData: [u8; 1],
}
impl ::core::marker::Copy for BDA_DEBUG_DATA {}
impl ::core::clone::Clone for BDA_DEBUG_DATA {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for BDA_DEBUG_DATA {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("BDA_DEBUG_DATA").field("lResult", &self.lResult).field("uuidDebugDataType", &self.uuidDebugDataType).field("ulDataSize", &self.ulDataSize).field("argbDebugData", &self.argbDebugData).finish()
    }
}
impl ::windows::core::TypeKind for BDA_DEBUG_DATA {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for BDA_DEBUG_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.lResult == other.lResult && self.uuidDebugDataType == other.uuidDebugDataType && self.ulDataSize == other.ulDataSize && self.argbDebugData == other.argbDebugData
    }
}
impl ::core::cmp::Eq for BDA_DEBUG_DATA {}
impl ::core::default::Default for BDA_DEBUG_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct BDA_EVENT_DATA {
    pub lResult: i32,
    pub ulEventID: u32,
    pub uuidEventType: ::windows::core::GUID,
    pub ulEventDataLength: u32,
    pub argbEventData: [u8; 1],
}
impl ::core::marker::Copy for BDA_EVENT_DATA {}
impl ::core::clone::Clone for BDA_EVENT_DATA {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for BDA_EVENT_DATA {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("BDA_EVENT_DATA").field("lResult", &self.lResult).field("ulEventID", &self.ulEventID).field("uuidEventType", &self.uuidEventType).field("ulEventDataLength", &self.ulEventDataLength).field("argbEventData", &self.argbEventData).finish()
    }
}
impl ::windows::core::TypeKind for BDA_EVENT_DATA {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for BDA_EVENT_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.lResult == other.lResult && self.ulEventID == other.ulEventID && self.uuidEventType == other.uuidEventType && self.ulEventDataLength == other.ulEventDataLength && self.argbEventData == other.argbEventData
    }
}
impl ::core::cmp::Eq for BDA_EVENT_DATA {}
impl ::core::default::Default for BDA_EVENT_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct BDA_TRANSPORT_INFO {
    pub ulcbPhyiscalPacket: u32,
    pub ulcbPhyiscalFrame: u32,
    pub ulcbPhyiscalFrameAlignment: u32,
    pub AvgTimePerFrame: i64,
}
impl ::core::marker::Copy for BDA_TRANSPORT_INFO {}
impl ::core::clone::Clone for BDA_TRANSPORT_INFO {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for BDA_TRANSPORT_INFO {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("BDA_TRANSPORT_INFO").field("ulcbPhyiscalPacket", &self.ulcbPhyiscalPacket).field("ulcbPhyiscalFrame", &self.ulcbPhyiscalFrame).field("ulcbPhyiscalFrameAlignment", &self.ulcbPhyiscalFrameAlignment).field("AvgTimePerFrame", &self.AvgTimePerFrame).finish()
    }
}
impl ::windows::core::TypeKind for BDA_TRANSPORT_INFO {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for BDA_TRANSPORT_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.ulcbPhyiscalPacket == other.ulcbPhyiscalPacket && self.ulcbPhyiscalFrame == other.ulcbPhyiscalFrame && self.ulcbPhyiscalFrameAlignment == other.ulcbPhyiscalFrameAlignment && self.AvgTimePerFrame == other.AvgTimePerFrame
    }
}
impl ::core::cmp::Eq for BDA_TRANSPORT_INFO {}
impl ::core::default::Default for BDA_TRANSPORT_INFO {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct BadSampleInfo {
    pub hrReason: ::windows::core::HRESULT,
}
impl ::core::marker::Copy for BadSampleInfo {}
impl ::core::clone::Clone for BadSampleInfo {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for BadSampleInfo {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for BadSampleInfo {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct CAPTURE_STREAMTIME {
    pub StreamTime: i64,
}
impl ::core::marker::Copy for CAPTURE_STREAMTIME {}
impl ::core::clone::Clone for CAPTURE_STREAMTIME {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for CAPTURE_STREAMTIME {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("CAPTURE_STREAMTIME").field("StreamTime", &self.StreamTime).finish()
    }
}
impl ::windows::core::TypeKind for CAPTURE_STREAMTIME {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for CAPTURE_STREAMTIME {
    fn eq(&self, other: &Self) -> bool {
        self.StreamTime == other.StreamTime
    }
}
impl ::core::cmp::Eq for CAPTURE_STREAMTIME {}
impl ::core::default::Default for CAPTURE_STREAMTIME {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct ChannelChangeInfo {
    pub state: ChannelChangeSpanningEvent_State,
    pub TimeStamp: u64,
}
impl ::core::marker::Copy for ChannelChangeInfo {}
impl ::core::clone::Clone for ChannelChangeInfo {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for ChannelChangeInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("ChannelChangeInfo").field("state", &self.state).field("TimeStamp", &self.TimeStamp).finish()
    }
}
impl ::windows::core::TypeKind for ChannelChangeInfo {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for ChannelChangeInfo {
    fn eq(&self, other: &Self) -> bool {
        self.state == other.state && self.TimeStamp == other.TimeStamp
    }
}
impl ::core::cmp::Eq for ChannelChangeInfo {}
impl ::core::default::Default for ChannelChangeInfo {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct ChannelInfo {
    pub lFrequency: i32,
    pub Anonymous: ChannelInfo_0,
}
impl ::core::marker::Copy for ChannelInfo {}
impl ::core::clone::Clone for ChannelInfo {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for ChannelInfo {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for ChannelInfo {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub union ChannelInfo_0 {
    pub DVB: ChannelInfo_0_2,
    pub DC: ChannelInfo_0_1,
    pub ATSC: ChannelInfo_0_0,
}
impl ::core::marker::Copy for ChannelInfo_0 {}
impl ::core::clone::Clone for ChannelInfo_0 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for ChannelInfo_0 {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for ChannelInfo_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct ChannelInfo_0_0 {
    pub lProgNumber: i32,
}
impl ::core::marker::Copy for ChannelInfo_0_0 {}
impl ::core::clone::Clone for ChannelInfo_0_0 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for ChannelInfo_0_0 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("ChannelInfo_0_0").field("lProgNumber", &self.lProgNumber).finish()
    }
}
impl ::windows::core::TypeKind for ChannelInfo_0_0 {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for ChannelInfo_0_0 {
    fn eq(&self, other: &Self) -> bool {
        self.lProgNumber == other.lProgNumber
    }
}
impl ::core::cmp::Eq for ChannelInfo_0_0 {}
impl ::core::default::Default for ChannelInfo_0_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct ChannelInfo_0_1 {
    pub lProgNumber: i32,
}
impl ::core::marker::Copy for ChannelInfo_0_1 {}
impl ::core::clone::Clone for ChannelInfo_0_1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for ChannelInfo_0_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("ChannelInfo_0_1").field("lProgNumber", &self.lProgNumber).finish()
    }
}
impl ::windows::core::TypeKind for ChannelInfo_0_1 {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for ChannelInfo_0_1 {
    fn eq(&self, other: &Self) -> bool {
        self.lProgNumber == other.lProgNumber
    }
}
impl ::core::cmp::Eq for ChannelInfo_0_1 {}
impl ::core::default::Default for ChannelInfo_0_1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct ChannelInfo_0_2 {
    pub lONID: i32,
    pub lTSID: i32,
    pub lSID: i32,
}
impl ::core::marker::Copy for ChannelInfo_0_2 {}
impl ::core::clone::Clone for ChannelInfo_0_2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for ChannelInfo_0_2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("ChannelInfo_0_2").field("lONID", &self.lONID).field("lTSID", &self.lTSID).field("lSID", &self.lSID).finish()
    }
}
impl ::windows::core::TypeKind for ChannelInfo_0_2 {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for ChannelInfo_0_2 {
    fn eq(&self, other: &Self) -> bool {
        self.lONID == other.lONID && self.lTSID == other.lTSID && self.lSID == other.lSID
    }
}
impl ::core::cmp::Eq for ChannelInfo_0_2 {}
impl ::core::default::Default for ChannelInfo_0_2 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct ChannelTypeInfo {
    pub channelType: ChannelType,
    pub timeStamp: u64,
}
impl ::core::marker::Copy for ChannelTypeInfo {}
impl ::core::clone::Clone for ChannelTypeInfo {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for ChannelTypeInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("ChannelTypeInfo").field("channelType", &self.channelType).field("timeStamp", &self.timeStamp).finish()
    }
}
impl ::windows::core::TypeKind for ChannelTypeInfo {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for ChannelTypeInfo {
    fn eq(&self, other: &Self) -> bool {
        self.channelType == other.channelType && self.timeStamp == other.timeStamp
    }
}
impl ::core::cmp::Eq for ChannelTypeInfo {}
impl ::core::default::Default for ChannelTypeInfo {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
pub struct DSHOW_STREAM_DESC {
    pub VersionNo: u32,
    pub StreamId: u32,
    pub Default: super::super::super::Foundation::BOOL,
    pub Creation: super::super::super::Foundation::BOOL,
    pub Reserved: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::marker::Copy for DSHOW_STREAM_DESC {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::clone::Clone for DSHOW_STREAM_DESC {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DSHOW_STREAM_DESC {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("DSHOW_STREAM_DESC").field("VersionNo", &self.VersionNo).field("StreamId", &self.StreamId).field("Default", &self.Default).field("Creation", &self.Creation).field("Reserved", &self.Reserved).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows::core::TypeKind for DSHOW_STREAM_DESC {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DSHOW_STREAM_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.VersionNo == other.VersionNo && self.StreamId == other.StreamId && self.Default == other.Default && self.Creation == other.Creation && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DSHOW_STREAM_DESC {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DSHOW_STREAM_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct DSMCC_ELEMENT {
    pub pid: u16,
    pub bComponentTag: u8,
    pub dwCarouselId: u32,
    pub dwTransactionId: u32,
    pub pNext: *mut DSMCC_ELEMENT,
}
impl ::core::marker::Copy for DSMCC_ELEMENT {}
impl ::core::clone::Clone for DSMCC_ELEMENT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for DSMCC_ELEMENT {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for DSMCC_ELEMENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
pub struct DSMCC_FILTER_OPTIONS {
    pub fSpecifyProtocol: super::super::super::Foundation::BOOL,
    pub Protocol: u8,
    pub fSpecifyType: super::super::super::Foundation::BOOL,
    pub Type: u8,
    pub fSpecifyMessageId: super::super::super::Foundation::BOOL,
    pub MessageId: u16,
    pub fSpecifyTransactionId: super::super::super::Foundation::BOOL,
    pub fUseTrxIdMessageIdMask: super::super::super::Foundation::BOOL,
    pub TransactionId: u32,
    pub fSpecifyModuleVersion: super::super::super::Foundation::BOOL,
    pub ModuleVersion: u8,
    pub fSpecifyBlockNumber: super::super::super::Foundation::BOOL,
    pub BlockNumber: u16,
    pub fGetModuleCall: super::super::super::Foundation::BOOL,
    pub NumberOfBlocksInModule: u16,
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::marker::Copy for DSMCC_FILTER_OPTIONS {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::clone::Clone for DSMCC_FILTER_OPTIONS {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows::core::TypeKind for DSMCC_FILTER_OPTIONS {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DSMCC_FILTER_OPTIONS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct DSMCC_SECTION {
    pub TableId: u8,
    pub Header: DSMCC_SECTION_0,
    pub TableIdExtension: u16,
    pub Version: DSMCC_SECTION_1,
    pub SectionNumber: u8,
    pub LastSectionNumber: u8,
    pub ProtocolDiscriminator: u8,
    pub DsmccType: u8,
    pub MessageId: u16,
    pub TransactionId: u32,
    pub Reserved: u8,
    pub AdaptationLength: u8,
    pub MessageLength: u16,
    pub RemainingData: [u8; 1],
}
impl ::core::marker::Copy for DSMCC_SECTION {}
impl ::core::clone::Clone for DSMCC_SECTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for DSMCC_SECTION {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for DSMCC_SECTION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub union DSMCC_SECTION_0 {
    pub S: MPEG_HEADER_BITS_MIDL,
    pub W: u16,
}
impl ::core::marker::Copy for DSMCC_SECTION_0 {}
impl ::core::clone::Clone for DSMCC_SECTION_0 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for DSMCC_SECTION_0 {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for DSMCC_SECTION_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub union DSMCC_SECTION_1 {
    pub S: MPEG_HEADER_VERSION_BITS_MIDL,
    pub B: u8,
}
impl ::core::marker::Copy for DSMCC_SECTION_1 {}
impl ::core::clone::Clone for DSMCC_SECTION_1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for DSMCC_SECTION_1 {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for DSMCC_SECTION_1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
pub struct DVBScramblingControlSpanningEvent {
    pub ulPID: u32,
    pub fScrambled: super::super::super::Foundation::BOOL,
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::marker::Copy for DVBScramblingControlSpanningEvent {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::clone::Clone for DVBScramblingControlSpanningEvent {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for DVBScramblingControlSpanningEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("DVBScramblingControlSpanningEvent").field("ulPID", &self.ulPID).field("fScrambled", &self.fScrambled).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows::core::TypeKind for DVBScramblingControlSpanningEvent {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for DVBScramblingControlSpanningEvent {
    fn eq(&self, other: &Self) -> bool {
        self.ulPID == other.ulPID && self.fScrambled == other.fScrambled
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for DVBScramblingControlSpanningEvent {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DVBScramblingControlSpanningEvent {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
pub struct DVB_EIT_FILTER_OPTIONS {
    pub fSpecifySegment: super::super::super::Foundation::BOOL,
    pub bSegment: u8,
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::marker::Copy for DVB_EIT_FILTER_OPTIONS {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::clone::Clone for DVB_EIT_FILTER_OPTIONS {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows::core::TypeKind for DVB_EIT_FILTER_OPTIONS {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for DVB_EIT_FILTER_OPTIONS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
pub struct DVR_STREAM_DESC {
    pub Version: u32,
    pub StreamId: u32,
    pub Default: super::super::super::Foundation::BOOL,
    pub Creation: super::super::super::Foundation::BOOL,
    pub Reserved: u32,
    pub guidSubMediaType: ::windows::core::GUID,
    pub guidFormatType: ::windows::core::GUID,
    pub MediaType: super::super::MediaFoundation::AM_MEDIA_TYPE,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
impl ::core::clone::Clone for DVR_STREAM_DESC {
    fn clone(&self) -> Self {
        unsafe { ::core::mem::transmute_copy(self) }
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
impl ::core::fmt::Debug for DVR_STREAM_DESC {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("DVR_STREAM_DESC").field("Version", &self.Version).field("StreamId", &self.StreamId).field("Default", &self.Default).field("Creation", &self.Creation).field("Reserved", &self.Reserved).field("guidSubMediaType", &self.guidSubMediaType).field("guidFormatType", &self.guidFormatType).field("MediaType", &self.MediaType).finish()
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
impl ::windows::core::TypeKind for DVR_STREAM_DESC {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
impl ::core::cmp::PartialEq for DVR_STREAM_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.Version == other.Version && self.StreamId == other.StreamId && self.Default == other.Default && self.Creation == other.Creation && self.Reserved == other.Reserved && self.guidSubMediaType == other.guidSubMediaType && self.guidFormatType == other.guidFormatType && self.MediaType == other.MediaType
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
impl ::core::cmp::Eq for DVR_STREAM_DESC {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
impl ::core::default::Default for DVR_STREAM_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct DualMonoInfo {
    pub LangID1: u16,
    pub LangID2: u16,
    pub lISOLangCode1: i32,
    pub lISOLangCode2: i32,
}
impl ::core::marker::Copy for DualMonoInfo {}
impl ::core::clone::Clone for DualMonoInfo {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for DualMonoInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("DualMonoInfo").field("LangID1", &self.LangID1).field("LangID2", &self.LangID2).field("lISOLangCode1", &self.lISOLangCode1).field("lISOLangCode2", &self.lISOLangCode2).finish()
    }
}
impl ::windows::core::TypeKind for DualMonoInfo {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for DualMonoInfo {
    fn eq(&self, other: &Self) -> bool {
        self.LangID1 == other.LangID1 && self.LangID2 == other.LangID2 && self.lISOLangCode1 == other.lISOLangCode1 && self.lISOLangCode2 == other.lISOLangCode2
    }
}
impl ::core::cmp::Eq for DualMonoInfo {}
impl ::core::default::Default for DualMonoInfo {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct DvbParentalRatingDescriptor {
    pub ulNumParams: u32,
    pub pParams: [DvbParentalRatingParam; 1],
}
impl ::core::marker::Copy for DvbParentalRatingDescriptor {}
impl ::core::clone::Clone for DvbParentalRatingDescriptor {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for DvbParentalRatingDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("DvbParentalRatingDescriptor").field("ulNumParams", &self.ulNumParams).field("pParams", &self.pParams).finish()
    }
}
impl ::windows::core::TypeKind for DvbParentalRatingDescriptor {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for DvbParentalRatingDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.ulNumParams == other.ulNumParams && self.pParams == other.pParams
    }
}
impl ::core::cmp::Eq for DvbParentalRatingDescriptor {}
impl ::core::default::Default for DvbParentalRatingDescriptor {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct DvbParentalRatingParam {
    pub szCountryCode: [u8; 4],
    pub bRating: u8,
}
impl ::core::marker::Copy for DvbParentalRatingParam {}
impl ::core::clone::Clone for DvbParentalRatingParam {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for DvbParentalRatingParam {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("DvbParentalRatingParam").field("szCountryCode", &self.szCountryCode).field("bRating", &self.bRating).finish()
    }
}
impl ::windows::core::TypeKind for DvbParentalRatingParam {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for DvbParentalRatingParam {
    fn eq(&self, other: &Self) -> bool {
        self.szCountryCode == other.szCountryCode && self.bRating == other.bRating
    }
}
impl ::core::cmp::Eq for DvbParentalRatingParam {}
impl ::core::default::Default for DvbParentalRatingParam {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Foundation\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_KernelStreaming"))]
pub struct KSEVENTDATA_BDA_RF_TUNER_SCAN_S {
    pub EventData: super::super::KernelStreaming::KSEVENTDATA,
    pub StartFrequency: u32,
    pub EndFrequency: u32,
    pub LockRequested: BDA_LockType,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_KernelStreaming"))]
impl ::core::marker::Copy for KSEVENTDATA_BDA_RF_TUNER_SCAN_S {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_KernelStreaming"))]
impl ::core::clone::Clone for KSEVENTDATA_BDA_RF_TUNER_SCAN_S {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_KernelStreaming"))]
impl ::windows::core::TypeKind for KSEVENTDATA_BDA_RF_TUNER_SCAN_S {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_KernelStreaming"))]
impl ::core::default::Default for KSEVENTDATA_BDA_RF_TUNER_SCAN_S {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_BUFFER {
    pub NodeMethod: super::super::KernelStreaming::KSM_NODE,
    pub ulBufferSize: u32,
    pub argbBuffer: [u8; 1],
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_BUFFER {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_BUFFER {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_BUFFER {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_BUFFER {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_CAS_CAPTURETOKEN {
    pub NodeMethod: super::super::KernelStreaming::KSM_NODE,
    pub ulTokenLength: u32,
    pub argbToken: [u8; 1],
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_CAS_CAPTURETOKEN {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_CAS_CAPTURETOKEN {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_CAS_CAPTURETOKEN {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_CAS_CAPTURETOKEN {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_CAS_CLOSEMMIDIALOG {
    pub NodeMethod: super::super::KernelStreaming::KSM_NODE,
    pub ulDialogRequest: u32,
    pub cLanguage: [u8; 12],
    pub ulDialogNumber: u32,
    pub ulReason: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_CAS_CLOSEMMIDIALOG {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_CAS_CLOSEMMIDIALOG {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_CAS_CLOSEMMIDIALOG {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_CAS_CLOSEMMIDIALOG {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_CAS_ENTITLEMENTTOKEN {
    pub NodeMethod: super::super::KernelStreaming::KSM_NODE,
    pub ulDialogRequest: u32,
    pub cLanguage: [u8; 12],
    pub ulRequestType: u32,
    pub ulEntitlementTokenLen: u32,
    pub argbEntitlementToken: [u8; 1],
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_CAS_ENTITLEMENTTOKEN {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_CAS_ENTITLEMENTTOKEN {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_CAS_ENTITLEMENTTOKEN {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_CAS_ENTITLEMENTTOKEN {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_CAS_OPENBROADCASTMMI {
    pub NodeMethod: super::super::KernelStreaming::KSM_NODE,
    pub ulDialogRequest: u32,
    pub cLanguage: [u8; 12],
    pub ulEventId: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_CAS_OPENBROADCASTMMI {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_CAS_OPENBROADCASTMMI {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_CAS_OPENBROADCASTMMI {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_CAS_OPENBROADCASTMMI {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_DEBUG_LEVEL {
    pub Method: super::super::KernelStreaming::KSIDENTIFIER,
    pub ucDebugLevel: u8,
    pub ulDebugStringSize: u32,
    pub argbDebugString: [u8; 1],
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_DEBUG_LEVEL {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_DEBUG_LEVEL {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_DEBUG_LEVEL {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_DEBUG_LEVEL {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_DRM_SETDRM {
    pub NodeMethod: super::super::KernelStreaming::KSM_NODE,
    pub NewDRMuuid: ::windows::core::GUID,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_DRM_SETDRM {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_DRM_SETDRM {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_DRM_SETDRM {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_DRM_SETDRM {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_EVENT_COMPLETE {
    pub Method: super::super::KernelStreaming::KSIDENTIFIER,
    pub ulEventID: u32,
    pub ulEventResult: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_EVENT_COMPLETE {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_EVENT_COMPLETE {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_EVENT_COMPLETE {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_EVENT_COMPLETE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_GDDS_SERVICEFROMTUNEXML {
    pub Method: super::super::KernelStreaming::KSIDENTIFIER,
    pub ulTuneXmlLength: u32,
    pub argbTuneXml: [u8; 1],
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_GDDS_SERVICEFROMTUNEXML {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_GDDS_SERVICEFROMTUNEXML {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_GDDS_SERVICEFROMTUNEXML {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_GDDS_SERVICEFROMTUNEXML {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_GDDS_TUNEXMLFROMIDX {
    pub Method: super::super::KernelStreaming::KSIDENTIFIER,
    pub ulIdx: u64,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_GDDS_TUNEXMLFROMIDX {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_GDDS_TUNEXMLFROMIDX {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_GDDS_TUNEXMLFROMIDX {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_GDDS_TUNEXMLFROMIDX {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_GPNV_GETVALUE {
    pub Method: super::super::KernelStreaming::KSIDENTIFIER,
    pub ulNameLength: u32,
    pub cLanguage: [u8; 12],
    pub argbData: [u8; 1],
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_GPNV_GETVALUE {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_GPNV_GETVALUE {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_GPNV_GETVALUE {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_GPNV_GETVALUE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_GPNV_NAMEINDEX {
    pub Method: super::super::KernelStreaming::KSIDENTIFIER,
    pub ulValueNameIndex: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_GPNV_NAMEINDEX {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_GPNV_NAMEINDEX {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_GPNV_NAMEINDEX {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_GPNV_NAMEINDEX {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_GPNV_SETVALUE {
    pub Method: super::super::KernelStreaming::KSIDENTIFIER,
    pub ulDialogRequest: u32,
    pub cLanguage: [u8; 12],
    pub ulNameLength: u32,
    pub ulValueLength: u32,
    pub argbName: [u8; 1],
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_GPNV_SETVALUE {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_GPNV_SETVALUE {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_GPNV_SETVALUE {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_GPNV_SETVALUE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_ISDBCAS_REQUEST {
    pub NodeMethod: super::super::KernelStreaming::KSM_NODE,
    pub ulRequestID: u32,
    pub ulIsdbCommandSize: u32,
    pub argbIsdbCommandData: [u8; 1],
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_ISDBCAS_REQUEST {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_ISDBCAS_REQUEST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_ISDBCAS_REQUEST {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_ISDBCAS_REQUEST {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_PIN {
    pub Method: super::super::KernelStreaming::KSIDENTIFIER,
    pub Anonymous: KSM_BDA_PIN_0,
    pub Reserved: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_PIN {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_PIN {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_PIN {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_PIN {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub union KSM_BDA_PIN_0 {
    pub PinId: u32,
    pub PinType: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_PIN_0 {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_PIN_0 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_PIN_0 {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_PIN_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_PIN_PAIR {
    pub Method: super::super::KernelStreaming::KSIDENTIFIER,
    pub Anonymous1: KSM_BDA_PIN_PAIR_0,
    pub Anonymous2: KSM_BDA_PIN_PAIR_1,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_PIN_PAIR {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_PIN_PAIR {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_PIN_PAIR {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_PIN_PAIR {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub union KSM_BDA_PIN_PAIR_0 {
    pub InputPinId: u32,
    pub InputPinType: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_PIN_PAIR_0 {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_PIN_PAIR_0 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_PIN_PAIR_0 {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_PIN_PAIR_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub union KSM_BDA_PIN_PAIR_1 {
    pub OutputPinId: u32,
    pub OutputPinType: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_PIN_PAIR_1 {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_PIN_PAIR_1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_PIN_PAIR_1 {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_PIN_PAIR_1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_SCAN_CAPABILTIES {
    pub Method: super::super::KernelStreaming::KSIDENTIFIER,
    pub uuidBroadcastStandard: ::windows::core::GUID,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_SCAN_CAPABILTIES {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_SCAN_CAPABILTIES {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_SCAN_CAPABILTIES {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_SCAN_CAPABILTIES {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_SCAN_FILTER {
    pub Method: super::super::KernelStreaming::KSIDENTIFIER,
    pub ulScanModulationTypeSize: u32,
    pub AnalogVideoStandards: u64,
    pub argbScanModulationTypes: [u8; 1],
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_SCAN_FILTER {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_SCAN_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_SCAN_FILTER {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_SCAN_FILTER {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_SCAN_START {
    pub Method: super::super::KernelStreaming::KSIDENTIFIER,
    pub LowerFrequency: u32,
    pub HigherFrequency: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_SCAN_START {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_SCAN_START {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_SCAN_START {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_SCAN_START {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_TS_SELECTOR_SETTSID {
    pub NodeMethod: super::super::KernelStreaming::KSM_NODE,
    pub usTSID: u16,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_TS_SELECTOR_SETTSID {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_TS_SELECTOR_SETTSID {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_TS_SELECTOR_SETTSID {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_TS_SELECTOR_SETTSID {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_TUNER_TUNEREQUEST {
    pub Method: super::super::KernelStreaming::KSIDENTIFIER,
    pub ulTuneLength: u32,
    pub argbTuneData: [u8; 1],
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_TUNER_TUNEREQUEST {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_TUNER_TUNEREQUEST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_TUNER_TUNEREQUEST {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_TUNER_TUNEREQUEST {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_USERACTIVITY_USEREASON {
    pub Method: super::super::KernelStreaming::KSIDENTIFIER,
    pub ulUseReason: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_USERACTIVITY_USEREASON {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_USERACTIVITY_USEREASON {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_USERACTIVITY_USEREASON {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_USERACTIVITY_USEREASON {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_WMDRMTUNER_GETPIDPROTECTION {
    pub NodeMethod: super::super::KernelStreaming::KSM_NODE,
    pub ulPID: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_WMDRMTUNER_GETPIDPROTECTION {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_WMDRMTUNER_GETPIDPROTECTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_WMDRMTUNER_GETPIDPROTECTION {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_WMDRMTUNER_GETPIDPROTECTION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT {
    pub NodeMethod: super::super::KernelStreaming::KSM_NODE,
    pub ulDialogRequest: u32,
    pub cLanguage: [u8; 12],
    pub ulPurchaseTokenLength: u32,
    pub argbDataBuffer: [u8; 1],
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_WMDRMTUNER_PURCHASEENTITLEMENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_WMDRMTUNER_SETPIDPROTECTION {
    pub NodeMethod: super::super::KernelStreaming::KSM_NODE,
    pub ulPID: u32,
    pub uuidKeyID: ::windows::core::GUID,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_WMDRMTUNER_SETPIDPROTECTION {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_WMDRMTUNER_SETPIDPROTECTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_WMDRMTUNER_SETPIDPROTECTION {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_WMDRMTUNER_SETPIDPROTECTION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_WMDRMTUNER_SYNCVALUE {
    pub NodeMethod: super::super::KernelStreaming::KSM_NODE,
    pub ulSyncValue: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_WMDRMTUNER_SYNCVALUE {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_WMDRMTUNER_SYNCVALUE {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_WMDRMTUNER_SYNCVALUE {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_WMDRMTUNER_SYNCVALUE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_WMDRM_LICENSE {
    pub NodeMethod: super::super::KernelStreaming::KSM_NODE,
    pub uuidKeyID: ::windows::core::GUID,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_WMDRM_LICENSE {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_WMDRM_LICENSE {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_WMDRM_LICENSE {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_WMDRM_LICENSE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSM_BDA_WMDRM_RENEWLICENSE {
    pub NodeMethod: super::super::KernelStreaming::KSM_NODE,
    pub ulXMRLicenseLength: u32,
    pub ulEntitlementTokenLength: u32,
    pub argbDataBuffer: [u8; 1],
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSM_BDA_WMDRM_RENEWLICENSE {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSM_BDA_WMDRM_RENEWLICENSE {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSM_BDA_WMDRM_RENEWLICENSE {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSM_BDA_WMDRM_RENEWLICENSE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSPROPERTY_BDA_RF_TUNER_CAPS_S {
    pub Property: super::super::KernelStreaming::KSP_NODE,
    pub Mode: u32,
    pub AnalogStandardsSupported: u32,
    pub DigitalStandardsSupported: u32,
    pub MinFrequency: u32,
    pub MaxFrequency: u32,
    pub SettlingTime: u32,
    pub AnalogSensingRange: u32,
    pub DigitalSensingRange: u32,
    pub MilliSecondsPerMHz: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSPROPERTY_BDA_RF_TUNER_CAPS_S {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSPROPERTY_BDA_RF_TUNER_CAPS_S {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSPROPERTY_BDA_RF_TUNER_CAPS_S {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSPROPERTY_BDA_RF_TUNER_CAPS_S {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S {
    pub Property: super::super::KernelStreaming::KSP_NODE,
    pub CurrentFrequency: u32,
    pub FrequencyRangeMin: u32,
    pub FrequencyRangeMax: u32,
    pub MilliSecondsLeft: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSPROPERTY_BDA_RF_TUNER_SCAN_STATUS_S {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Foundation\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_KernelStreaming"))]
pub struct KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S {
    pub Property: super::super::KernelStreaming::KSP_NODE,
    pub AutoDetect: super::super::super::Foundation::BOOL,
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_KernelStreaming"))]
impl ::core::marker::Copy for KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_KernelStreaming"))]
impl ::core::clone::Clone for KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_KernelStreaming"))]
impl ::windows::core::TypeKind for KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_KernelStreaming"))]
impl ::core::default::Default for KSPROPERTY_BDA_RF_TUNER_STANDARD_MODE_S {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSPROPERTY_BDA_RF_TUNER_STANDARD_S {
    pub Property: super::super::KernelStreaming::KSP_NODE,
    pub SignalType: BDA_SignalType,
    pub SignalStandard: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSPROPERTY_BDA_RF_TUNER_STANDARD_S {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSPROPERTY_BDA_RF_TUNER_STANDARD_S {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSPROPERTY_BDA_RF_TUNER_STANDARD_S {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSPROPERTY_BDA_RF_TUNER_STANDARD_S {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSP_BDA_NODE_PIN {
    pub Property: super::super::KernelStreaming::KSIDENTIFIER,
    pub ulNodeType: u32,
    pub ulInputPinId: u32,
    pub ulOutputPinId: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSP_BDA_NODE_PIN {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSP_BDA_NODE_PIN {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSP_BDA_NODE_PIN {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSP_BDA_NODE_PIN {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KSP_NODE_ESPID {
    pub Property: super::super::KernelStreaming::KSP_NODE,
    pub EsPid: u32,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KSP_NODE_ESPID {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KSP_NODE_ESPID {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KSP_NODE_ESPID {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KSP_NODE_ESPID {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KS_DATARANGE_BDA_ANTENNA {
    pub DataRange: super::super::KernelStreaming::KSDATAFORMAT,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KS_DATARANGE_BDA_ANTENNA {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KS_DATARANGE_BDA_ANTENNA {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KS_DATARANGE_BDA_ANTENNA {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KS_DATARANGE_BDA_ANTENNA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Media_KernelStreaming\"`*"]
#[cfg(feature = "Win32_Media_KernelStreaming")]
pub struct KS_DATARANGE_BDA_TRANSPORT {
    pub DataRange: super::super::KernelStreaming::KSDATAFORMAT,
    pub BdaTransportInfo: BDA_TRANSPORT_INFO,
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::marker::Copy for KS_DATARANGE_BDA_TRANSPORT {}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::clone::Clone for KS_DATARANGE_BDA_TRANSPORT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::windows::core::TypeKind for KS_DATARANGE_BDA_TRANSPORT {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Media_KernelStreaming")]
impl ::core::default::Default for KS_DATARANGE_BDA_TRANSPORT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct LONG_SECTION {
    pub TableId: u8,
    pub Header: LONG_SECTION_0,
    pub TableIdExtension: u16,
    pub Version: LONG_SECTION_1,
    pub SectionNumber: u8,
    pub LastSectionNumber: u8,
    pub RemainingData: [u8; 1],
}
impl ::core::marker::Copy for LONG_SECTION {}
impl ::core::clone::Clone for LONG_SECTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for LONG_SECTION {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for LONG_SECTION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub union LONG_SECTION_0 {
    pub S: MPEG_HEADER_BITS_MIDL,
    pub W: u16,
}
impl ::core::marker::Copy for LONG_SECTION_0 {}
impl ::core::clone::Clone for LONG_SECTION_0 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for LONG_SECTION_0 {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for LONG_SECTION_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub union LONG_SECTION_1 {
    pub S: MPEG_HEADER_VERSION_BITS_MIDL,
    pub B: u8,
}
impl ::core::marker::Copy for LONG_SECTION_1 {}
impl ::core::clone::Clone for LONG_SECTION_1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for LONG_SECTION_1 {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for LONG_SECTION_1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct LanguageInfo {
    pub LangID: u16,
    pub lISOLangCode: i32,
}
impl ::core::marker::Copy for LanguageInfo {}
impl ::core::clone::Clone for LanguageInfo {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for LanguageInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("LanguageInfo").field("LangID", &self.LangID).field("lISOLangCode", &self.lISOLangCode).finish()
    }
}
impl ::windows::core::TypeKind for LanguageInfo {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for LanguageInfo {
    fn eq(&self, other: &Self) -> bool {
        self.LangID == other.LangID && self.lISOLangCode == other.lISOLangCode
    }
}
impl ::core::cmp::Eq for LanguageInfo {}
impl ::core::default::Default for LanguageInfo {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
pub struct MPEG2_FILTER {
    pub bVersionNumber: u8,
    pub wFilterSize: u16,
    pub fUseRawFilteringBits: super::super::super::Foundation::BOOL,
    pub Filter: [u8; 16],
    pub Mask: [u8; 16],
    pub fSpecifyTableIdExtension: super::super::super::Foundation::BOOL,
    pub TableIdExtension: u16,
    pub fSpecifyVersion: super::super::super::Foundation::BOOL,
    pub Version: u8,
    pub fSpecifySectionNumber: super::super::super::Foundation::BOOL,
    pub SectionNumber: u8,
    pub fSpecifyCurrentNext: super::super::super::Foundation::BOOL,
    pub fNext: super::super::super::Foundation::BOOL,
    pub fSpecifyDsmccOptions: super::super::super::Foundation::BOOL,
    pub Dsmcc: DSMCC_FILTER_OPTIONS,
    pub fSpecifyAtscOptions: super::super::super::Foundation::BOOL,
    pub Atsc: ATSC_FILTER_OPTIONS,
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::marker::Copy for MPEG2_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::clone::Clone for MPEG2_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows::core::TypeKind for MPEG2_FILTER {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MPEG2_FILTER {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
pub struct MPEG2_FILTER2 {
    pub Anonymous: MPEG2_FILTER2_0,
    pub fSpecifyDvbEitOptions: super::super::super::Foundation::BOOL,
    pub DvbEit: DVB_EIT_FILTER_OPTIONS,
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::marker::Copy for MPEG2_FILTER2 {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::clone::Clone for MPEG2_FILTER2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows::core::TypeKind for MPEG2_FILTER2 {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MPEG2_FILTER2 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
pub union MPEG2_FILTER2_0 {
    pub Anonymous: MPEG2_FILTER2_0_0,
    pub bVersion1Bytes: [u8; 124],
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::marker::Copy for MPEG2_FILTER2_0 {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::clone::Clone for MPEG2_FILTER2_0 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows::core::TypeKind for MPEG2_FILTER2_0 {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MPEG2_FILTER2_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
pub struct MPEG2_FILTER2_0_0 {
    pub bVersionNumber: u8,
    pub wFilterSize: u16,
    pub fUseRawFilteringBits: super::super::super::Foundation::BOOL,
    pub Filter: [u8; 16],
    pub Mask: [u8; 16],
    pub fSpecifyTableIdExtension: super::super::super::Foundation::BOOL,
    pub TableIdExtension: u16,
    pub fSpecifyVersion: super::super::super::Foundation::BOOL,
    pub Version: u8,
    pub fSpecifySectionNumber: super::super::super::Foundation::BOOL,
    pub SectionNumber: u8,
    pub fSpecifyCurrentNext: super::super::super::Foundation::BOOL,
    pub fNext: super::super::super::Foundation::BOOL,
    pub fSpecifyDsmccOptions: super::super::super::Foundation::BOOL,
    pub Dsmcc: DSMCC_FILTER_OPTIONS,
    pub fSpecifyAtscOptions: super::super::super::Foundation::BOOL,
    pub Atsc: ATSC_FILTER_OPTIONS,
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::marker::Copy for MPEG2_FILTER2_0_0 {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::clone::Clone for MPEG2_FILTER2_0_0 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows::core::TypeKind for MPEG2_FILTER2_0_0 {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MPEG2_FILTER2_0_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct MPEG_BCS_DEMUX {
    pub AVMGraphId: u32,
}
impl ::core::marker::Copy for MPEG_BCS_DEMUX {}
impl ::core::clone::Clone for MPEG_BCS_DEMUX {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for MPEG_BCS_DEMUX {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for MPEG_BCS_DEMUX {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct MPEG_CONTEXT {
    pub Type: MPEG_CONTEXT_TYPE,
    pub U: MPEG_CONTEXT_0,
}
impl ::core::marker::Copy for MPEG_CONTEXT {}
impl ::core::clone::Clone for MPEG_CONTEXT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for MPEG_CONTEXT {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for MPEG_CONTEXT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub union MPEG_CONTEXT_0 {
    pub Demux: MPEG_BCS_DEMUX,
    pub Winsock: MPEG_WINSOCK,
}
impl ::core::marker::Copy for MPEG_CONTEXT_0 {}
impl ::core::clone::Clone for MPEG_CONTEXT_0 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for MPEG_CONTEXT_0 {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for MPEG_CONTEXT_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct MPEG_DATE {
    pub Date: u8,
    pub Month: u8,
    pub Year: u16,
}
impl ::core::marker::Copy for MPEG_DATE {}
impl ::core::clone::Clone for MPEG_DATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for MPEG_DATE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for MPEG_DATE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct MPEG_DATE_AND_TIME {
    pub D: MPEG_DATE,
    pub T: MPEG_TIME,
}
impl ::core::marker::Copy for MPEG_DATE_AND_TIME {}
impl ::core::clone::Clone for MPEG_DATE_AND_TIME {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for MPEG_DATE_AND_TIME {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for MPEG_DATE_AND_TIME {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct MPEG_HEADER_BITS {
    pub _bitfield: u16,
}
impl ::core::marker::Copy for MPEG_HEADER_BITS {}
impl ::core::clone::Clone for MPEG_HEADER_BITS {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for MPEG_HEADER_BITS {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for MPEG_HEADER_BITS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct MPEG_HEADER_BITS_MIDL {
    pub Bits: u16,
}
impl ::core::marker::Copy for MPEG_HEADER_BITS_MIDL {}
impl ::core::clone::Clone for MPEG_HEADER_BITS_MIDL {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for MPEG_HEADER_BITS_MIDL {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for MPEG_HEADER_BITS_MIDL {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct MPEG_HEADER_VERSION_BITS {
    pub _bitfield: u8,
}
impl ::core::marker::Copy for MPEG_HEADER_VERSION_BITS {}
impl ::core::clone::Clone for MPEG_HEADER_VERSION_BITS {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for MPEG_HEADER_VERSION_BITS {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("MPEG_HEADER_VERSION_BITS").field("_bitfield", &self._bitfield).finish()
    }
}
impl ::windows::core::TypeKind for MPEG_HEADER_VERSION_BITS {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for MPEG_HEADER_VERSION_BITS {
    fn eq(&self, other: &Self) -> bool {
        self._bitfield == other._bitfield
    }
}
impl ::core::cmp::Eq for MPEG_HEADER_VERSION_BITS {}
impl ::core::default::Default for MPEG_HEADER_VERSION_BITS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct MPEG_HEADER_VERSION_BITS_MIDL {
    pub Bits: u8,
}
impl ::core::marker::Copy for MPEG_HEADER_VERSION_BITS_MIDL {}
impl ::core::clone::Clone for MPEG_HEADER_VERSION_BITS_MIDL {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for MPEG_HEADER_VERSION_BITS_MIDL {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("MPEG_HEADER_VERSION_BITS_MIDL").field("Bits", &self.Bits).finish()
    }
}
impl ::windows::core::TypeKind for MPEG_HEADER_VERSION_BITS_MIDL {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for MPEG_HEADER_VERSION_BITS_MIDL {
    fn eq(&self, other: &Self) -> bool {
        self.Bits == other.Bits
    }
}
impl ::core::cmp::Eq for MPEG_HEADER_VERSION_BITS_MIDL {}
impl ::core::default::Default for MPEG_HEADER_VERSION_BITS_MIDL {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct MPEG_PACKET_LIST {
    pub wPacketCount: u16,
    pub PacketList: [*mut MPEG_RQST_PACKET; 1],
}
impl ::core::marker::Copy for MPEG_PACKET_LIST {}
impl ::core::clone::Clone for MPEG_PACKET_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for MPEG_PACKET_LIST {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for MPEG_PACKET_LIST {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct MPEG_RQST_PACKET {
    pub dwLength: u32,
    pub pSection: *mut SECTION,
}
impl ::core::marker::Copy for MPEG_RQST_PACKET {}
impl ::core::clone::Clone for MPEG_RQST_PACKET {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for MPEG_RQST_PACKET {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for MPEG_RQST_PACKET {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
pub struct MPEG_SERVICE_REQUEST {
    pub Type: MPEG_REQUEST_TYPE,
    pub Context: MPEG_CONTEXT,
    pub Pid: u16,
    pub TableId: u8,
    pub Filter: MPEG2_FILTER,
    pub Flags: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::marker::Copy for MPEG_SERVICE_REQUEST {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::clone::Clone for MPEG_SERVICE_REQUEST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows::core::TypeKind for MPEG_SERVICE_REQUEST {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MPEG_SERVICE_REQUEST {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct MPEG_SERVICE_RESPONSE {
    pub IPAddress: u32,
    pub Port: u16,
}
impl ::core::marker::Copy for MPEG_SERVICE_RESPONSE {}
impl ::core::clone::Clone for MPEG_SERVICE_RESPONSE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for MPEG_SERVICE_RESPONSE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for MPEG_SERVICE_RESPONSE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct MPEG_STREAM_BUFFER {
    pub hr: ::windows::core::HRESULT,
    pub dwDataBufferSize: u32,
    pub dwSizeOfDataRead: u32,
    pub pDataBuffer: *mut u8,
}
impl ::core::marker::Copy for MPEG_STREAM_BUFFER {}
impl ::core::clone::Clone for MPEG_STREAM_BUFFER {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for MPEG_STREAM_BUFFER {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for MPEG_STREAM_BUFFER {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
pub struct MPEG_STREAM_FILTER {
    pub wPidValue: u16,
    pub dwFilterSize: u32,
    pub fCrcEnabled: super::super::super::Foundation::BOOL,
    pub rgchFilter: [u8; 16],
    pub rgchMask: [u8; 16],
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::marker::Copy for MPEG_STREAM_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::clone::Clone for MPEG_STREAM_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows::core::TypeKind for MPEG_STREAM_FILTER {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for MPEG_STREAM_FILTER {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct MPEG_TIME {
    pub Hours: u8,
    pub Minutes: u8,
    pub Seconds: u8,
}
impl ::core::marker::Copy for MPEG_TIME {}
impl ::core::clone::Clone for MPEG_TIME {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for MPEG_TIME {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for MPEG_TIME {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct MPEG_WINSOCK {
    pub AVMGraphId: u32,
}
impl ::core::marker::Copy for MPEG_WINSOCK {}
impl ::core::clone::Clone for MPEG_WINSOCK {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for MPEG_WINSOCK {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for MPEG_WINSOCK {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct MPE_ELEMENT {
    pub pid: u16,
    pub bComponentTag: u8,
    pub pNext: *mut MPE_ELEMENT,
}
impl ::core::marker::Copy for MPE_ELEMENT {}
impl ::core::clone::Clone for MPE_ELEMENT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for MPE_ELEMENT {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for MPE_ELEMENT {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct Mpeg2TableSampleHdr {
    pub SectionCount: u8,
    pub Reserved: [u8; 3],
    pub SectionOffsets: [i32; 1],
}
impl ::core::marker::Copy for Mpeg2TableSampleHdr {}
impl ::core::clone::Clone for Mpeg2TableSampleHdr {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for Mpeg2TableSampleHdr {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for Mpeg2TableSampleHdr {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct PBDAParentalControl {
    pub rating_system_count: u32,
    pub rating_systems: *mut RATING_SYSTEM,
}
impl ::core::marker::Copy for PBDAParentalControl {}
impl ::core::clone::Clone for PBDAParentalControl {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for PBDAParentalControl {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for PBDAParentalControl {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct PBDA_TAG_ATTRIBUTE {
    pub TableUUId: ::windows::core::GUID,
    pub TableId: u8,
    pub VersionNo: u16,
    pub TableDataSize: u32,
    pub TableData: [u8; 1],
}
impl ::core::marker::Copy for PBDA_TAG_ATTRIBUTE {}
impl ::core::clone::Clone for PBDA_TAG_ATTRIBUTE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for PBDA_TAG_ATTRIBUTE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("PBDA_TAG_ATTRIBUTE").field("TableUUId", &self.TableUUId).field("TableId", &self.TableId).field("VersionNo", &self.VersionNo).field("TableDataSize", &self.TableDataSize).field("TableData", &self.TableData).finish()
    }
}
impl ::windows::core::TypeKind for PBDA_TAG_ATTRIBUTE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for PBDA_TAG_ATTRIBUTE {
    fn eq(&self, other: &Self) -> bool {
        self.TableUUId == other.TableUUId && self.TableId == other.TableId && self.VersionNo == other.VersionNo && self.TableDataSize == other.TableDataSize && self.TableData == other.TableData
    }
}
impl ::core::cmp::Eq for PBDA_TAG_ATTRIBUTE {}
impl ::core::default::Default for PBDA_TAG_ATTRIBUTE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct PIC_SEQ_SAMPLE {
    pub _bitfield: u32,
}
impl ::core::marker::Copy for PIC_SEQ_SAMPLE {}
impl ::core::clone::Clone for PIC_SEQ_SAMPLE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for PIC_SEQ_SAMPLE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("PIC_SEQ_SAMPLE").field("_bitfield", &self._bitfield).finish()
    }
}
impl ::windows::core::TypeKind for PIC_SEQ_SAMPLE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for PIC_SEQ_SAMPLE {
    fn eq(&self, other: &Self) -> bool {
        self._bitfield == other._bitfield
    }
}
impl ::core::cmp::Eq for PIC_SEQ_SAMPLE {}
impl ::core::default::Default for PIC_SEQ_SAMPLE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct PIDListSpanningEvent {
    pub wPIDCount: u16,
    pub pulPIDs: [u32; 1],
}
impl ::core::marker::Copy for PIDListSpanningEvent {}
impl ::core::clone::Clone for PIDListSpanningEvent {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for PIDListSpanningEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("PIDListSpanningEvent").field("wPIDCount", &self.wPIDCount).field("pulPIDs", &self.pulPIDs).finish()
    }
}
impl ::windows::core::TypeKind for PIDListSpanningEvent {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for PIDListSpanningEvent {
    fn eq(&self, other: &Self) -> bool {
        self.wPIDCount == other.wPIDCount && self.pulPIDs == other.pulPIDs
    }
}
impl ::core::cmp::Eq for PIDListSpanningEvent {}
impl ::core::default::Default for PIDListSpanningEvent {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct PID_BITS {
    pub _bitfield: u16,
}
impl ::core::marker::Copy for PID_BITS {}
impl ::core::clone::Clone for PID_BITS {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for PID_BITS {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for PID_BITS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct PID_BITS_MIDL {
    pub Bits: u16,
}
impl ::core::marker::Copy for PID_BITS_MIDL {}
impl ::core::clone::Clone for PID_BITS_MIDL {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for PID_BITS_MIDL {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for PID_BITS_MIDL {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct ProgramElement {
    pub wProgramNumber: u16,
    pub wProgramMapPID: u16,
}
impl ::core::marker::Copy for ProgramElement {}
impl ::core::clone::Clone for ProgramElement {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for ProgramElement {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("ProgramElement").field("wProgramNumber", &self.wProgramNumber).field("wProgramMapPID", &self.wProgramMapPID).finish()
    }
}
impl ::windows::core::TypeKind for ProgramElement {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for ProgramElement {
    fn eq(&self, other: &Self) -> bool {
        self.wProgramNumber == other.wProgramNumber && self.wProgramMapPID == other.wProgramMapPID
    }
}
impl ::core::cmp::Eq for ProgramElement {}
impl ::core::default::Default for ProgramElement {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct RATING_ATTRIBUTE {
    pub rating_attribute_id: u32,
    pub rating_attribute_value: u32,
}
impl ::core::marker::Copy for RATING_ATTRIBUTE {}
impl ::core::clone::Clone for RATING_ATTRIBUTE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for RATING_ATTRIBUTE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for RATING_ATTRIBUTE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct RATING_INFO {
    pub rating_system_count: u32,
    pub lpratingsystem: *mut RATING_SYSTEM,
}
impl ::core::marker::Copy for RATING_INFO {}
impl ::core::clone::Clone for RATING_INFO {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for RATING_INFO {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for RATING_INFO {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct RATING_SYSTEM {
    pub rating_system_id: ::windows::core::GUID,
    pub _bitfield: u8,
    pub country_code: [u8; 3],
    pub rating_attribute_count: u32,
    pub lpratingattrib: *mut RATING_ATTRIBUTE,
}
impl ::core::marker::Copy for RATING_SYSTEM {}
impl ::core::clone::Clone for RATING_SYSTEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for RATING_SYSTEM {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for RATING_SYSTEM {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct SAMPLE_LIVE_STREAM_TIME {
    pub qwStreamTime: u64,
    pub qwLiveTime: u64,
}
impl ::core::marker::Copy for SAMPLE_LIVE_STREAM_TIME {}
impl ::core::clone::Clone for SAMPLE_LIVE_STREAM_TIME {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for SAMPLE_LIVE_STREAM_TIME {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("SAMPLE_LIVE_STREAM_TIME").field("qwStreamTime", &self.qwStreamTime).field("qwLiveTime", &self.qwLiveTime).finish()
    }
}
impl ::windows::core::TypeKind for SAMPLE_LIVE_STREAM_TIME {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for SAMPLE_LIVE_STREAM_TIME {
    fn eq(&self, other: &Self) -> bool {
        self.qwStreamTime == other.qwStreamTime && self.qwLiveTime == other.qwLiveTime
    }
}
impl ::core::cmp::Eq for SAMPLE_LIVE_STREAM_TIME {}
impl ::core::default::Default for SAMPLE_LIVE_STREAM_TIME {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct SAMPLE_SEQ_OFFSET {
    pub _bitfield: u32,
}
impl ::core::marker::Copy for SAMPLE_SEQ_OFFSET {}
impl ::core::clone::Clone for SAMPLE_SEQ_OFFSET {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for SAMPLE_SEQ_OFFSET {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("SAMPLE_SEQ_OFFSET").field("_bitfield", &self._bitfield).finish()
    }
}
impl ::windows::core::TypeKind for SAMPLE_SEQ_OFFSET {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for SAMPLE_SEQ_OFFSET {
    fn eq(&self, other: &Self) -> bool {
        self._bitfield == other._bitfield
    }
}
impl ::core::cmp::Eq for SAMPLE_SEQ_OFFSET {}
impl ::core::default::Default for SAMPLE_SEQ_OFFSET {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct SBE2_STREAM_DESC {
    pub Version: u32,
    pub StreamId: u32,
    pub Default: u32,
    pub Reserved: u32,
}
impl ::core::marker::Copy for SBE2_STREAM_DESC {}
impl ::core::clone::Clone for SBE2_STREAM_DESC {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for SBE2_STREAM_DESC {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("SBE2_STREAM_DESC").field("Version", &self.Version).field("StreamId", &self.StreamId).field("Default", &self.Default).field("Reserved", &self.Reserved).finish()
    }
}
impl ::windows::core::TypeKind for SBE2_STREAM_DESC {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for SBE2_STREAM_DESC {
    fn eq(&self, other: &Self) -> bool {
        self.Version == other.Version && self.StreamId == other.StreamId && self.Default == other.Default && self.Reserved == other.Reserved
    }
}
impl ::core::cmp::Eq for SBE2_STREAM_DESC {}
impl ::core::default::Default for SBE2_STREAM_DESC {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct SBE_PIN_DATA {
    pub cDataBytes: u64,
    pub cSamplesProcessed: u64,
    pub cDiscontinuities: u64,
    pub cSyncPoints: u64,
    pub cTimestamps: u64,
}
impl ::core::marker::Copy for SBE_PIN_DATA {}
impl ::core::clone::Clone for SBE_PIN_DATA {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for SBE_PIN_DATA {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("SBE_PIN_DATA").field("cDataBytes", &self.cDataBytes).field("cSamplesProcessed", &self.cSamplesProcessed).field("cDiscontinuities", &self.cDiscontinuities).field("cSyncPoints", &self.cSyncPoints).field("cTimestamps", &self.cTimestamps).finish()
    }
}
impl ::windows::core::TypeKind for SBE_PIN_DATA {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for SBE_PIN_DATA {
    fn eq(&self, other: &Self) -> bool {
        self.cDataBytes == other.cDataBytes && self.cSamplesProcessed == other.cSamplesProcessed && self.cDiscontinuities == other.cDiscontinuities && self.cSyncPoints == other.cSyncPoints && self.cTimestamps == other.cTimestamps
    }
}
impl ::core::cmp::Eq for SBE_PIN_DATA {}
impl ::core::default::Default for SBE_PIN_DATA {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct SECTION {
    pub TableId: u8,
    pub Header: SECTION_0,
    pub SectionData: [u8; 1],
}
impl ::core::marker::Copy for SECTION {}
impl ::core::clone::Clone for SECTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for SECTION {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for SECTION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub union SECTION_0 {
    pub S: MPEG_HEADER_BITS_MIDL,
    pub W: u16,
}
impl ::core::marker::Copy for SECTION_0 {}
impl ::core::clone::Clone for SECTION_0 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for SECTION_0 {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for SECTION_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct STREAMBUFFER_ATTRIBUTE {
    pub pszName: ::windows::core::PWSTR,
    pub StreamBufferAttributeType: STREAMBUFFER_ATTR_DATATYPE,
    pub pbAttribute: *mut u8,
    pub cbLength: u16,
}
impl ::core::marker::Copy for STREAMBUFFER_ATTRIBUTE {}
impl ::core::clone::Clone for STREAMBUFFER_ATTRIBUTE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for STREAMBUFFER_ATTRIBUTE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("STREAMBUFFER_ATTRIBUTE").field("pszName", &self.pszName).field("StreamBufferAttributeType", &self.StreamBufferAttributeType).field("pbAttribute", &self.pbAttribute).field("cbLength", &self.cbLength).finish()
    }
}
impl ::windows::core::TypeKind for STREAMBUFFER_ATTRIBUTE {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for STREAMBUFFER_ATTRIBUTE {
    fn eq(&self, other: &Self) -> bool {
        self.pszName == other.pszName && self.StreamBufferAttributeType == other.StreamBufferAttributeType && self.pbAttribute == other.pbAttribute && self.cbLength == other.cbLength
    }
}
impl ::core::cmp::Eq for STREAMBUFFER_ATTRIBUTE {}
impl ::core::default::Default for STREAMBUFFER_ATTRIBUTE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct SpanningEventDescriptor {
    pub wDataLen: u16,
    pub wProgNumber: u16,
    pub wSID: u16,
    pub bDescriptor: [u8; 1],
}
impl ::core::marker::Copy for SpanningEventDescriptor {}
impl ::core::clone::Clone for SpanningEventDescriptor {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for SpanningEventDescriptor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("SpanningEventDescriptor").field("wDataLen", &self.wDataLen).field("wProgNumber", &self.wProgNumber).field("wSID", &self.wSID).field("bDescriptor", &self.bDescriptor).finish()
    }
}
impl ::windows::core::TypeKind for SpanningEventDescriptor {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for SpanningEventDescriptor {
    fn eq(&self, other: &Self) -> bool {
        self.wDataLen == other.wDataLen && self.wProgNumber == other.wProgNumber && self.wSID == other.wSID && self.bDescriptor == other.bDescriptor
    }
}
impl ::core::cmp::Eq for SpanningEventDescriptor {}
impl ::core::default::Default for SpanningEventDescriptor {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct SpanningEventEmmMessage {
    pub bCAbroadcasterGroupId: u8,
    pub bMessageControl: u8,
    pub wServiceId: u16,
    pub wTableIdExtension: u16,
    pub bDeletionStatus: u8,
    pub bDisplayingDuration1: u8,
    pub bDisplayingDuration2: u8,
    pub bDisplayingDuration3: u8,
    pub bDisplayingCycle: u8,
    pub bFormatVersion: u8,
    pub bDisplayPosition: u8,
    pub wMessageLength: u16,
    pub szMessageArea: [u16; 1],
}
impl ::core::marker::Copy for SpanningEventEmmMessage {}
impl ::core::clone::Clone for SpanningEventEmmMessage {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for SpanningEventEmmMessage {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("SpanningEventEmmMessage")
            .field("bCAbroadcasterGroupId", &self.bCAbroadcasterGroupId)
            .field("bMessageControl", &self.bMessageControl)
            .field("wServiceId", &self.wServiceId)
            .field("wTableIdExtension", &self.wTableIdExtension)
            .field("bDeletionStatus", &self.bDeletionStatus)
            .field("bDisplayingDuration1", &self.bDisplayingDuration1)
            .field("bDisplayingDuration2", &self.bDisplayingDuration2)
            .field("bDisplayingDuration3", &self.bDisplayingDuration3)
            .field("bDisplayingCycle", &self.bDisplayingCycle)
            .field("bFormatVersion", &self.bFormatVersion)
            .field("bDisplayPosition", &self.bDisplayPosition)
            .field("wMessageLength", &self.wMessageLength)
            .field("szMessageArea", &self.szMessageArea)
            .finish()
    }
}
impl ::windows::core::TypeKind for SpanningEventEmmMessage {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for SpanningEventEmmMessage {
    fn eq(&self, other: &Self) -> bool {
        self.bCAbroadcasterGroupId == other.bCAbroadcasterGroupId && self.bMessageControl == other.bMessageControl && self.wServiceId == other.wServiceId && self.wTableIdExtension == other.wTableIdExtension && self.bDeletionStatus == other.bDeletionStatus && self.bDisplayingDuration1 == other.bDisplayingDuration1 && self.bDisplayingDuration2 == other.bDisplayingDuration2 && self.bDisplayingDuration3 == other.bDisplayingDuration3 && self.bDisplayingCycle == other.bDisplayingCycle && self.bFormatVersion == other.bFormatVersion && self.bDisplayPosition == other.bDisplayPosition && self.wMessageLength == other.wMessageLength && self.szMessageArea == other.szMessageArea
    }
}
impl ::core::cmp::Eq for SpanningEventEmmMessage {}
impl ::core::default::Default for SpanningEventEmmMessage {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct TID_EXTENSION {
    pub wTidExt: u16,
    pub wCount: u16,
}
impl ::core::marker::Copy for TID_EXTENSION {}
impl ::core::clone::Clone for TID_EXTENSION {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for TID_EXTENSION {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for TID_EXTENSION {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct TRANSPORT_PROPERTIES {
    pub PID: u32,
    pub PCR: i64,
    pub Fields: TRANSPORT_PROPERTIES_0,
}
impl ::core::marker::Copy for TRANSPORT_PROPERTIES {}
impl ::core::clone::Clone for TRANSPORT_PROPERTIES {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for TRANSPORT_PROPERTIES {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for TRANSPORT_PROPERTIES {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub union TRANSPORT_PROPERTIES_0 {
    pub Others: TRANSPORT_PROPERTIES_0_0,
    pub Value: i64,
}
impl ::core::marker::Copy for TRANSPORT_PROPERTIES_0 {}
impl ::core::clone::Clone for TRANSPORT_PROPERTIES_0 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for TRANSPORT_PROPERTIES_0 {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for TRANSPORT_PROPERTIES_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct TRANSPORT_PROPERTIES_0_0 {
    pub _bitfield: i64,
}
impl ::core::marker::Copy for TRANSPORT_PROPERTIES_0_0 {}
impl ::core::clone::Clone for TRANSPORT_PROPERTIES_0_0 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for TRANSPORT_PROPERTIES_0_0 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("TRANSPORT_PROPERTIES_0_0").field("_bitfield", &self._bitfield).finish()
    }
}
impl ::windows::core::TypeKind for TRANSPORT_PROPERTIES_0_0 {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for TRANSPORT_PROPERTIES_0_0 {
    fn eq(&self, other: &Self) -> bool {
        self._bitfield == other._bitfield
    }
}
impl ::core::cmp::Eq for TRANSPORT_PROPERTIES_0_0 {}
impl ::core::default::Default for TRANSPORT_PROPERTIES_0_0 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
pub struct UDCR_TAG {
    pub bVersion: u8,
    pub KID: [u8; 25],
    pub ullBaseCounter: u64,
    pub ullBaseCounterRange: u64,
    pub fScrambled: super::super::super::Foundation::BOOL,
    pub bStreamMark: u8,
    pub dwReserved1: u32,
    pub dwReserved2: u32,
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::marker::Copy for UDCR_TAG {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::clone::Clone for UDCR_TAG {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::fmt::Debug for UDCR_TAG {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("UDCR_TAG").field("bVersion", &self.bVersion).field("KID", &self.KID).field("ullBaseCounter", &self.ullBaseCounter).field("ullBaseCounterRange", &self.ullBaseCounterRange).field("fScrambled", &self.fScrambled).field("bStreamMark", &self.bStreamMark).field("dwReserved1", &self.dwReserved1).field("dwReserved2", &self.dwReserved2).finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows::core::TypeKind for UDCR_TAG {
    type TypeKind = ::windows::core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::PartialEq for UDCR_TAG {
    fn eq(&self, other: &Self) -> bool {
        self.bVersion == other.bVersion && self.KID == other.KID && self.ullBaseCounter == other.ullBaseCounter && self.ullBaseCounterRange == other.ullBaseCounterRange && self.fScrambled == other.fScrambled && self.bStreamMark == other.bStreamMark && self.dwReserved1 == other.dwReserved1 && self.dwReserved2 == other.dwReserved2
    }
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::cmp::Eq for UDCR_TAG {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::default::Default for UDCR_TAG {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct VA_OPTIONAL_VIDEO_PROPERTIES {
    pub dwPictureHeight: u16,
    pub dwPictureWidth: u16,
    pub dwAspectRatioX: u16,
    pub dwAspectRatioY: u16,
    pub VAVideoFormat: VA_VIDEO_FORMAT,
    pub VAColorPrimaries: VA_COLOR_PRIMARIES,
    pub VATransferCharacteristics: VA_TRANSFER_CHARACTERISTICS,
    pub VAMatrixCoefficients: VA_MATRIX_COEFFICIENTS,
}
impl ::core::marker::Copy for VA_OPTIONAL_VIDEO_PROPERTIES {}
impl ::core::clone::Clone for VA_OPTIONAL_VIDEO_PROPERTIES {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for VA_OPTIONAL_VIDEO_PROPERTIES {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("VA_OPTIONAL_VIDEO_PROPERTIES").field("dwPictureHeight", &self.dwPictureHeight).field("dwPictureWidth", &self.dwPictureWidth).field("dwAspectRatioX", &self.dwAspectRatioX).field("dwAspectRatioY", &self.dwAspectRatioY).field("VAVideoFormat", &self.VAVideoFormat).field("VAColorPrimaries", &self.VAColorPrimaries).field("VATransferCharacteristics", &self.VATransferCharacteristics).field("VAMatrixCoefficients", &self.VAMatrixCoefficients).finish()
    }
}
impl ::windows::core::TypeKind for VA_OPTIONAL_VIDEO_PROPERTIES {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::cmp::PartialEq for VA_OPTIONAL_VIDEO_PROPERTIES {
    fn eq(&self, other: &Self) -> bool {
        self.dwPictureHeight == other.dwPictureHeight && self.dwPictureWidth == other.dwPictureWidth && self.dwAspectRatioX == other.dwAspectRatioX && self.dwAspectRatioY == other.dwAspectRatioY && self.VAVideoFormat == other.VAVideoFormat && self.VAColorPrimaries == other.VAColorPrimaries && self.VATransferCharacteristics == other.VATransferCharacteristics && self.VAMatrixCoefficients == other.VAMatrixCoefficients
    }
}
impl ::core::cmp::Eq for VA_OPTIONAL_VIDEO_PROPERTIES {}
impl ::core::default::Default for VA_OPTIONAL_VIDEO_PROPERTIES {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C, packed(1))]
#[doc = "*Required features: `\"Win32_Media_DirectShow_Tv\"`*"]
pub struct WMDRMProtectionInfo {
    pub wszKID: [u16; 25],
    pub qwCounter: u64,
    pub qwIndex: u64,
    pub bOffset: u8,
}
impl ::core::marker::Copy for WMDRMProtectionInfo {}
impl ::core::clone::Clone for WMDRMProtectionInfo {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::windows::core::TypeKind for WMDRMProtectionInfo {
    type TypeKind = ::windows::core::CopyType;
}
impl ::core::default::Default for WMDRMProtectionInfo {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "implement")]
::core::include!("impl.rs");
