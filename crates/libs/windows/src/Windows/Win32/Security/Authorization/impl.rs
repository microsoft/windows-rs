# [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzApplicationImpl < > : Sized + IDispatchImpl where { fn Name ( ) ; fn SetName ( ) ; fn Description ( ) ; fn SetDescription ( ) ; fn ApplicationData ( ) ; fn SetApplicationData ( ) ; fn AuthzInterfaceClsid ( ) ; fn SetAuthzInterfaceClsid ( ) ; fn Version ( ) ; fn SetVersion ( ) ; fn GenerateAudits ( ) ; fn SetGenerateAudits ( ) ; fn ApplyStoreSacl ( ) ; fn SetApplyStoreSacl ( ) ; fn Writable ( ) ; fn GetProperty ( ) ; fn SetProperty ( ) ; fn PolicyAdministrators ( ) ; fn PolicyReaders ( ) ; fn AddPolicyAdministrator ( ) ; fn DeletePolicyAdministrator ( ) ; fn AddPolicyReader ( ) ; fn DeletePolicyReader ( ) ; fn Scopes ( ) ; fn OpenScope ( ) ; fn CreateScope ( ) ; fn DeleteScope ( ) ; fn Operations ( ) ; fn OpenOperation ( ) ; fn CreateOperation ( ) ; fn DeleteOperation ( ) ; fn Tasks ( ) ; fn OpenTask ( ) ; fn CreateTask ( ) ; fn DeleteTask ( ) ; fn ApplicationGroups ( ) ; fn OpenApplicationGroup ( ) ; fn CreateApplicationGroup ( ) ; fn DeleteApplicationGroup ( ) ; fn Roles ( ) ; fn OpenRole ( ) ; fn CreateRole ( ) ; fn DeleteRole ( ) ; fn InitializeClientContextFromToken ( ) ; fn AddPropertyItem ( ) ; fn DeletePropertyItem ( ) ; fn Submit ( ) ; fn InitializeClientContextFromName ( ) ; fn DelegatedPolicyUsers ( ) ; fn AddDelegatedPolicyUser ( ) ; fn DeleteDelegatedPolicyUser ( ) ; fn InitializeClientContextFromStringSid ( ) ; fn PolicyAdministratorsName ( ) ; fn PolicyReadersName ( ) ; fn AddPolicyAdministratorName ( ) ; fn DeletePolicyAdministratorName ( ) ; fn AddPolicyReaderName ( ) ; fn DeletePolicyReaderName ( ) ; fn DelegatedPolicyUsersName ( ) ; fn AddDelegatedPolicyUserName ( ) ; fn DeleteDelegatedPolicyUserName ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzApplicationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzApplicationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzApplicationVtbl < > { unsafe extern "system" fn Name < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetName < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Description < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrdescription : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDescription < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdescription : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplicationData < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrapplicationdata : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetApplicationData < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrapplicationdata : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AuthzInterfaceClsid < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetAuthzInterfaceClsid < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Version < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetVersion < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GenerateAudits < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbprop : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetGenerateAudits < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bprop : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplyStoreSacl < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbprop : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetApplyStoreSacl < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bprop : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Writable < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfprop : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProperty < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProperty < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PolicyAdministrators < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvaradmins : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PolicyReaders < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarreaders : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPolicyAdministrator < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstradmin : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePolicyAdministrator < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstradmin : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPolicyReader < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrreader : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePolicyReader < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrreader : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Scopes < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppscopecollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenScope < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppscope : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateScope < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppscope : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteScope < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Operations < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppoperationcollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenOperation < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstroperationname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppoperation : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateOperation < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstroperationname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppoperation : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteOperation < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstroperationname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Tasks < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pptaskcollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenTask < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtaskname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pptask : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateTask < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtaskname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pptask : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteTask < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtaskname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplicationGroups < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppgroupcollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenApplicationGroup < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrgroupname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppgroup : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateApplicationGroup < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrgroupname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppgroup : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteApplicationGroup < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrgroupname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Roles < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pprolecollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenRole < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrrolename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pprole : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateRole < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrrolename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pprole : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteRole < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrrolename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InitializeClientContextFromToken < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulltokenhandle : u64 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclientcontext : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPropertyItem < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePropertyItem < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Submit < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lflags : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InitializeClientContextFromName < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , clientname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , domainname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclientcontext : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DelegatedPolicyUsers < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvardelegatedpolicyusers : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddDelegatedPolicyUser < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdelegatedpolicyuser : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteDelegatedPolicyUser < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdelegatedpolicyuser : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InitializeClientContextFromStringSid < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , sidstring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , loptions : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclientcontext : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PolicyAdministratorsName < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvaradmins : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PolicyReadersName < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarreaders : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPolicyAdministratorName < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstradmin : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePolicyAdministratorName < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstradmin : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPolicyReaderName < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrreader : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePolicyReaderName < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrreader : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DelegatedPolicyUsersName < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvardelegatedpolicyusers : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddDelegatedPolicyUserName < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdelegatedpolicyuser : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteDelegatedPolicyUserName < Impl : IAzApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdelegatedpolicyuser : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Name : Name :: < Impl , IMPL_OFFSET > , SetName : SetName :: < Impl , IMPL_OFFSET > , Description : Description :: < Impl , IMPL_OFFSET > , SetDescription : SetDescription :: < Impl , IMPL_OFFSET > , ApplicationData : ApplicationData :: < Impl , IMPL_OFFSET > , SetApplicationData : SetApplicationData :: < Impl , IMPL_OFFSET > , AuthzInterfaceClsid : AuthzInterfaceClsid :: < Impl , IMPL_OFFSET > , SetAuthzInterfaceClsid : SetAuthzInterfaceClsid :: < Impl , IMPL_OFFSET > , Version : Version :: < Impl , IMPL_OFFSET > , SetVersion : SetVersion :: < Impl , IMPL_OFFSET > , GenerateAudits : GenerateAudits :: < Impl , IMPL_OFFSET > , SetGenerateAudits : SetGenerateAudits :: < Impl , IMPL_OFFSET > , ApplyStoreSacl : ApplyStoreSacl :: < Impl , IMPL_OFFSET > , SetApplyStoreSacl : SetApplyStoreSacl :: < Impl , IMPL_OFFSET > , Writable : Writable :: < Impl , IMPL_OFFSET > , GetProperty : GetProperty :: < Impl , IMPL_OFFSET > , SetProperty : SetProperty :: < Impl , IMPL_OFFSET > , PolicyAdministrators : PolicyAdministrators :: < Impl , IMPL_OFFSET > , PolicyReaders : PolicyReaders :: < Impl , IMPL_OFFSET > , AddPolicyAdministrator : AddPolicyAdministrator :: < Impl , IMPL_OFFSET > , DeletePolicyAdministrator : DeletePolicyAdministrator :: < Impl , IMPL_OFFSET > , AddPolicyReader : AddPolicyReader :: < Impl , IMPL_OFFSET > , DeletePolicyReader : DeletePolicyReader :: < Impl , IMPL_OFFSET > , Scopes : Scopes :: < Impl , IMPL_OFFSET > , OpenScope : OpenScope :: < Impl , IMPL_OFFSET > , CreateScope : CreateScope :: < Impl , IMPL_OFFSET > , DeleteScope : DeleteScope :: < Impl , IMPL_OFFSET > , Operations : Operations :: < Impl , IMPL_OFFSET > , OpenOperation : OpenOperation :: < Impl , IMPL_OFFSET > , CreateOperation : CreateOperation :: < Impl , IMPL_OFFSET > , DeleteOperation : DeleteOperation :: < Impl , IMPL_OFFSET > , Tasks : Tasks :: < Impl , IMPL_OFFSET > , OpenTask : OpenTask :: < Impl , IMPL_OFFSET > , CreateTask : CreateTask :: < Impl , IMPL_OFFSET > , DeleteTask : DeleteTask :: < Impl , IMPL_OFFSET > , ApplicationGroups : ApplicationGroups :: < Impl , IMPL_OFFSET > , OpenApplicationGroup : OpenApplicationGroup :: < Impl , IMPL_OFFSET > , CreateApplicationGroup : CreateApplicationGroup :: < Impl , IMPL_OFFSET > , DeleteApplicationGroup : DeleteApplicationGroup :: < Impl , IMPL_OFFSET > , Roles : Roles :: < Impl , IMPL_OFFSET > , OpenRole : OpenRole :: < Impl , IMPL_OFFSET > , CreateRole : CreateRole :: < Impl , IMPL_OFFSET > , DeleteRole : DeleteRole :: < Impl , IMPL_OFFSET > , InitializeClientContextFromToken : InitializeClientContextFromToken :: < Impl , IMPL_OFFSET > , AddPropertyItem : AddPropertyItem :: < Impl , IMPL_OFFSET > , DeletePropertyItem : DeletePropertyItem :: < Impl , IMPL_OFFSET > , Submit : Submit :: < Impl , IMPL_OFFSET > , InitializeClientContextFromName : InitializeClientContextFromName :: < Impl , IMPL_OFFSET > , DelegatedPolicyUsers : DelegatedPolicyUsers :: < Impl , IMPL_OFFSET > , AddDelegatedPolicyUser : AddDelegatedPolicyUser :: < Impl , IMPL_OFFSET > , DeleteDelegatedPolicyUser : DeleteDelegatedPolicyUser :: < Impl , IMPL_OFFSET > , InitializeClientContextFromStringSid : InitializeClientContextFromStringSid :: < Impl , IMPL_OFFSET > , PolicyAdministratorsName : PolicyAdministratorsName :: < Impl , IMPL_OFFSET > , PolicyReadersName : PolicyReadersName :: < Impl , IMPL_OFFSET > , AddPolicyAdministratorName : AddPolicyAdministratorName :: < Impl , IMPL_OFFSET > , DeletePolicyAdministratorName : DeletePolicyAdministratorName :: < Impl , IMPL_OFFSET > , AddPolicyReaderName : AddPolicyReaderName :: < Impl , IMPL_OFFSET > , DeletePolicyReaderName : DeletePolicyReaderName :: < Impl , IMPL_OFFSET > , DelegatedPolicyUsersName : DelegatedPolicyUsersName :: < Impl , IMPL_OFFSET > , AddDelegatedPolicyUserName : AddDelegatedPolicyUserName :: < Impl , IMPL_OFFSET > , DeleteDelegatedPolicyUserName : DeleteDelegatedPolicyUserName :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzApplication < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzApplication2Impl < > : Sized + IAzApplicationImpl + IDispatchImpl where { fn InitializeClientContextFromToken2 ( ) ; fn InitializeClientContext2 ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzApplication2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzApplication2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzApplication2Vtbl < > { unsafe extern "system" fn InitializeClientContextFromToken2 < Impl : IAzApplication2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ultokenhandlelowpart : u32 , ultokenhandlehighpart : u32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclientcontext : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InitializeClientContext2 < Impl : IAzApplication2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , identifyingstring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppclientcontext : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , InitializeClientContextFromToken2 : InitializeClientContextFromToken2 :: < Impl , IMPL_OFFSET > , InitializeClientContext2 : InitializeClientContext2 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzApplication2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzApplication3Impl < > : Sized + IAzApplication2Impl + IAzApplicationImpl + IDispatchImpl where { fn ScopeExists ( ) ; fn OpenScope2 ( ) ; fn CreateScope2 ( ) ; fn DeleteScope2 ( ) ; fn RoleDefinitions ( ) ; fn CreateRoleDefinition ( ) ; fn OpenRoleDefinition ( ) ; fn DeleteRoleDefinition ( ) ; fn RoleAssignments ( ) ; fn CreateRoleAssignment ( ) ; fn OpenRoleAssignment ( ) ; fn DeleteRoleAssignment ( ) ; fn BizRulesEnabled ( ) ; fn SetBizRulesEnabled ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzApplication3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzApplication3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzApplication3Vtbl < > { unsafe extern "system" fn ScopeExists < Impl : IAzApplication3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pbexist : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenScope2 < Impl : IAzApplication3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppscope2 : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateScope2 < Impl : IAzApplication3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppscope2 : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteScope2 < Impl : IAzApplication3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RoleDefinitions < Impl : IAzApplication3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pproledefinitions : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateRoleDefinition < Impl : IAzApplication3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroledefinitionname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pproledefinitions : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenRoleDefinition < Impl : IAzApplication3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroledefinitionname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pproledefinitions : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteRoleDefinition < Impl : IAzApplication3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroledefinitionname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RoleAssignments < Impl : IAzApplication3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pproleassignments : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateRoleAssignment < Impl : IAzApplication3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroleassignmentname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pproleassignment : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenRoleAssignment < Impl : IAzApplication3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroleassignmentname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pproleassignment : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteRoleAssignment < Impl : IAzApplication3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroleassignmentname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BizRulesEnabled < Impl : IAzApplication3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbenabled : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBizRulesEnabled < Impl : IAzApplication3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , benabled : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , ScopeExists : ScopeExists :: < Impl , IMPL_OFFSET > , OpenScope2 : OpenScope2 :: < Impl , IMPL_OFFSET > , CreateScope2 : CreateScope2 :: < Impl , IMPL_OFFSET > , DeleteScope2 : DeleteScope2 :: < Impl , IMPL_OFFSET > , RoleDefinitions : RoleDefinitions :: < Impl , IMPL_OFFSET > , CreateRoleDefinition : CreateRoleDefinition :: < Impl , IMPL_OFFSET > , OpenRoleDefinition : OpenRoleDefinition :: < Impl , IMPL_OFFSET > , DeleteRoleDefinition : DeleteRoleDefinition :: < Impl , IMPL_OFFSET > , RoleAssignments : RoleAssignments :: < Impl , IMPL_OFFSET > , CreateRoleAssignment : CreateRoleAssignment :: < Impl , IMPL_OFFSET > , OpenRoleAssignment : OpenRoleAssignment :: < Impl , IMPL_OFFSET > , DeleteRoleAssignment : DeleteRoleAssignment :: < Impl , IMPL_OFFSET > , BizRulesEnabled : BizRulesEnabled :: < Impl , IMPL_OFFSET > , SetBizRulesEnabled : SetBizRulesEnabled :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzApplication3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzApplicationGroupImpl < > : Sized + IDispatchImpl where { fn Name ( ) ; fn SetName ( ) ; fn Type ( ) ; fn SetType ( ) ; fn LdapQuery ( ) ; fn SetLdapQuery ( ) ; fn AppMembers ( ) ; fn AppNonMembers ( ) ; fn Members ( ) ; fn NonMembers ( ) ; fn Description ( ) ; fn SetDescription ( ) ; fn AddAppMember ( ) ; fn DeleteAppMember ( ) ; fn AddAppNonMember ( ) ; fn DeleteAppNonMember ( ) ; fn AddMember ( ) ; fn DeleteMember ( ) ; fn AddNonMember ( ) ; fn DeleteNonMember ( ) ; fn Writable ( ) ; fn GetProperty ( ) ; fn SetProperty ( ) ; fn AddPropertyItem ( ) ; fn DeletePropertyItem ( ) ; fn Submit ( ) ; fn AddMemberName ( ) ; fn DeleteMemberName ( ) ; fn AddNonMemberName ( ) ; fn DeleteNonMemberName ( ) ; fn MembersName ( ) ; fn NonMembersName ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzApplicationGroupVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzApplicationGroupImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzApplicationGroupVtbl < > { unsafe extern "system" fn Name < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetName < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Type < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plprop : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetType < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lprop : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LdapQuery < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetLdapQuery < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AppMembers < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AppNonMembers < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Members < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NonMembers < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Description < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrdescription : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDescription < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdescription : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddAppMember < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteAppMember < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddAppNonMember < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteAppNonMember < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddMember < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteMember < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddNonMember < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteNonMember < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Writable < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfprop : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProperty < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProperty < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPropertyItem < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePropertyItem < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Submit < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lflags : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddMemberName < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteMemberName < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddNonMemberName < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteNonMemberName < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MembersName < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NonMembersName < Impl : IAzApplicationGroupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Name : Name :: < Impl , IMPL_OFFSET > , SetName : SetName :: < Impl , IMPL_OFFSET > , Type : Type :: < Impl , IMPL_OFFSET > , SetType : SetType :: < Impl , IMPL_OFFSET > , LdapQuery : LdapQuery :: < Impl , IMPL_OFFSET > , SetLdapQuery : SetLdapQuery :: < Impl , IMPL_OFFSET > , AppMembers : AppMembers :: < Impl , IMPL_OFFSET > , AppNonMembers : AppNonMembers :: < Impl , IMPL_OFFSET > , Members : Members :: < Impl , IMPL_OFFSET > , NonMembers : NonMembers :: < Impl , IMPL_OFFSET > , Description : Description :: < Impl , IMPL_OFFSET > , SetDescription : SetDescription :: < Impl , IMPL_OFFSET > , AddAppMember : AddAppMember :: < Impl , IMPL_OFFSET > , DeleteAppMember : DeleteAppMember :: < Impl , IMPL_OFFSET > , AddAppNonMember : AddAppNonMember :: < Impl , IMPL_OFFSET > , DeleteAppNonMember : DeleteAppNonMember :: < Impl , IMPL_OFFSET > , AddMember : AddMember :: < Impl , IMPL_OFFSET > , DeleteMember : DeleteMember :: < Impl , IMPL_OFFSET > , AddNonMember : AddNonMember :: < Impl , IMPL_OFFSET > , DeleteNonMember : DeleteNonMember :: < Impl , IMPL_OFFSET > , Writable : Writable :: < Impl , IMPL_OFFSET > , GetProperty : GetProperty :: < Impl , IMPL_OFFSET > , SetProperty : SetProperty :: < Impl , IMPL_OFFSET > , AddPropertyItem : AddPropertyItem :: < Impl , IMPL_OFFSET > , DeletePropertyItem : DeletePropertyItem :: < Impl , IMPL_OFFSET > , Submit : Submit :: < Impl , IMPL_OFFSET > , AddMemberName : AddMemberName :: < Impl , IMPL_OFFSET > , DeleteMemberName : DeleteMemberName :: < Impl , IMPL_OFFSET > , AddNonMemberName : AddNonMemberName :: < Impl , IMPL_OFFSET > , DeleteNonMemberName : DeleteNonMemberName :: < Impl , IMPL_OFFSET > , MembersName : MembersName :: < Impl , IMPL_OFFSET > , NonMembersName : NonMembersName :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzApplicationGroup < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzApplicationGroup2Impl < > : Sized + IAzApplicationGroupImpl + IDispatchImpl where { fn BizRule ( ) ; fn SetBizRule ( ) ; fn BizRuleLanguage ( ) ; fn SetBizRuleLanguage ( ) ; fn BizRuleImportedPath ( ) ; fn SetBizRuleImportedPath ( ) ; fn RoleAssignments ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzApplicationGroup2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzApplicationGroup2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzApplicationGroup2Vtbl < > { unsafe extern "system" fn BizRule < Impl : IAzApplicationGroup2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBizRule < Impl : IAzApplicationGroup2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BizRuleLanguage < Impl : IAzApplicationGroup2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBizRuleLanguage < Impl : IAzApplicationGroup2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BizRuleImportedPath < Impl : IAzApplicationGroup2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBizRuleImportedPath < Impl : IAzApplicationGroup2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RoleAssignments < Impl : IAzApplicationGroup2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , brecursive : i16 , pproleassignments : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , BizRule : BizRule :: < Impl , IMPL_OFFSET > , SetBizRule : SetBizRule :: < Impl , IMPL_OFFSET > , BizRuleLanguage : BizRuleLanguage :: < Impl , IMPL_OFFSET > , SetBizRuleLanguage : SetBizRuleLanguage :: < Impl , IMPL_OFFSET > , BizRuleImportedPath : BizRuleImportedPath :: < Impl , IMPL_OFFSET > , SetBizRuleImportedPath : SetBizRuleImportedPath :: < Impl , IMPL_OFFSET > , RoleAssignments : RoleAssignments :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzApplicationGroup2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzApplicationGroupsImpl < > : Sized + IDispatchImpl where { fn Item ( ) ; fn Count ( ) ; fn _NewEnum ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzApplicationGroupsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzApplicationGroupsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzApplicationGroupsVtbl < > { unsafe extern "system" fn Item < Impl : IAzApplicationGroupsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pvarobtptr : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IAzApplicationGroupsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : IAzApplicationGroupsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenumptr : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Item : Item :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzApplicationGroups < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzApplicationsImpl < > : Sized + IDispatchImpl where { fn Item ( ) ; fn Count ( ) ; fn _NewEnum ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzApplicationsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzApplicationsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzApplicationsVtbl < > { unsafe extern "system" fn Item < Impl : IAzApplicationsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pvarobtptr : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IAzApplicationsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : IAzApplicationsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenumptr : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Item : Item :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzApplications < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzAuthorizationStoreImpl < > : Sized + IDispatchImpl where { fn Description ( ) ; fn SetDescription ( ) ; fn ApplicationData ( ) ; fn SetApplicationData ( ) ; fn DomainTimeout ( ) ; fn SetDomainTimeout ( ) ; fn ScriptEngineTimeout ( ) ; fn SetScriptEngineTimeout ( ) ; fn MaxScriptEngines ( ) ; fn SetMaxScriptEngines ( ) ; fn GenerateAudits ( ) ; fn SetGenerateAudits ( ) ; fn Writable ( ) ; fn GetProperty ( ) ; fn SetProperty ( ) ; fn AddPropertyItem ( ) ; fn DeletePropertyItem ( ) ; fn PolicyAdministrators ( ) ; fn PolicyReaders ( ) ; fn AddPolicyAdministrator ( ) ; fn DeletePolicyAdministrator ( ) ; fn AddPolicyReader ( ) ; fn DeletePolicyReader ( ) ; fn Initialize ( ) ; fn UpdateCache ( ) ; fn Delete ( ) ; fn Applications ( ) ; fn OpenApplication ( ) ; fn CreateApplication ( ) ; fn DeleteApplication ( ) ; fn ApplicationGroups ( ) ; fn CreateApplicationGroup ( ) ; fn OpenApplicationGroup ( ) ; fn DeleteApplicationGroup ( ) ; fn Submit ( ) ; fn DelegatedPolicyUsers ( ) ; fn AddDelegatedPolicyUser ( ) ; fn DeleteDelegatedPolicyUser ( ) ; fn TargetMachine ( ) ; fn ApplyStoreSacl ( ) ; fn SetApplyStoreSacl ( ) ; fn PolicyAdministratorsName ( ) ; fn PolicyReadersName ( ) ; fn AddPolicyAdministratorName ( ) ; fn DeletePolicyAdministratorName ( ) ; fn AddPolicyReaderName ( ) ; fn DeletePolicyReaderName ( ) ; fn DelegatedPolicyUsersName ( ) ; fn AddDelegatedPolicyUserName ( ) ; fn DeleteDelegatedPolicyUserName ( ) ; fn CloseApplication ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzAuthorizationStoreVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzAuthorizationStoreImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzAuthorizationStoreVtbl < > { unsafe extern "system" fn Description < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrdescription : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDescription < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdescription : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplicationData < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrapplicationdata : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetApplicationData < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrapplicationdata : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DomainTimeout < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plprop : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDomainTimeout < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lprop : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ScriptEngineTimeout < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plprop : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetScriptEngineTimeout < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lprop : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MaxScriptEngines < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plprop : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMaxScriptEngines < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lprop : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GenerateAudits < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbprop : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetGenerateAudits < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bprop : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Writable < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfprop : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProperty < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProperty < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPropertyItem < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : AZ_PROP_CONSTANTS , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePropertyItem < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PolicyAdministrators < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvaradmins : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PolicyReaders < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarreaders : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPolicyAdministrator < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstradmin : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePolicyAdministrator < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstradmin : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPolicyReader < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrreader : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePolicyReader < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrreader : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Initialize < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lflags : AZ_PROP_CONSTANTS , bstrpolicyurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateCache < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Delete < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Applications < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppappcollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenApplication < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrapplicationname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppapplication : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateApplication < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrapplicationname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppapplication : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteApplication < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrapplicationname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplicationGroups < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppgroupcollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateApplicationGroup < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrgroupname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppgroup : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenApplicationGroup < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrgroupname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppgroup : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteApplicationGroup < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrgroupname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Submit < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lflags : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DelegatedPolicyUsers < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvardelegatedpolicyusers : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddDelegatedPolicyUser < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdelegatedpolicyuser : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteDelegatedPolicyUser < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdelegatedpolicyuser : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TargetMachine < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrtargetmachine : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplyStoreSacl < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbapplystoresacl : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetApplyStoreSacl < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bapplystoresacl : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PolicyAdministratorsName < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvaradmins : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PolicyReadersName < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarreaders : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPolicyAdministratorName < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstradmin : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePolicyAdministratorName < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstradmin : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPolicyReaderName < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrreader : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePolicyReaderName < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrreader : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DelegatedPolicyUsersName < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvardelegatedpolicyusers : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddDelegatedPolicyUserName < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdelegatedpolicyuser : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteDelegatedPolicyUserName < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdelegatedpolicyuser : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CloseApplication < Impl : IAzAuthorizationStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrapplicationname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lflag : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Description : Description :: < Impl , IMPL_OFFSET > , SetDescription : SetDescription :: < Impl , IMPL_OFFSET > , ApplicationData : ApplicationData :: < Impl , IMPL_OFFSET > , SetApplicationData : SetApplicationData :: < Impl , IMPL_OFFSET > , DomainTimeout : DomainTimeout :: < Impl , IMPL_OFFSET > , SetDomainTimeout : SetDomainTimeout :: < Impl , IMPL_OFFSET > , ScriptEngineTimeout : ScriptEngineTimeout :: < Impl , IMPL_OFFSET > , SetScriptEngineTimeout : SetScriptEngineTimeout :: < Impl , IMPL_OFFSET > , MaxScriptEngines : MaxScriptEngines :: < Impl , IMPL_OFFSET > , SetMaxScriptEngines : SetMaxScriptEngines :: < Impl , IMPL_OFFSET > , GenerateAudits : GenerateAudits :: < Impl , IMPL_OFFSET > , SetGenerateAudits : SetGenerateAudits :: < Impl , IMPL_OFFSET > , Writable : Writable :: < Impl , IMPL_OFFSET > , GetProperty : GetProperty :: < Impl , IMPL_OFFSET > , SetProperty : SetProperty :: < Impl , IMPL_OFFSET > , AddPropertyItem : AddPropertyItem :: < Impl , IMPL_OFFSET > , DeletePropertyItem : DeletePropertyItem :: < Impl , IMPL_OFFSET > , PolicyAdministrators : PolicyAdministrators :: < Impl , IMPL_OFFSET > , PolicyReaders : PolicyReaders :: < Impl , IMPL_OFFSET > , AddPolicyAdministrator : AddPolicyAdministrator :: < Impl , IMPL_OFFSET > , DeletePolicyAdministrator : DeletePolicyAdministrator :: < Impl , IMPL_OFFSET > , AddPolicyReader : AddPolicyReader :: < Impl , IMPL_OFFSET > , DeletePolicyReader : DeletePolicyReader :: < Impl , IMPL_OFFSET > , Initialize : Initialize :: < Impl , IMPL_OFFSET > , UpdateCache : UpdateCache :: < Impl , IMPL_OFFSET > , Delete : Delete :: < Impl , IMPL_OFFSET > , Applications : Applications :: < Impl , IMPL_OFFSET > , OpenApplication : OpenApplication :: < Impl , IMPL_OFFSET > , CreateApplication : CreateApplication :: < Impl , IMPL_OFFSET > , DeleteApplication : DeleteApplication :: < Impl , IMPL_OFFSET > , ApplicationGroups : ApplicationGroups :: < Impl , IMPL_OFFSET > , CreateApplicationGroup : CreateApplicationGroup :: < Impl , IMPL_OFFSET > , OpenApplicationGroup : OpenApplicationGroup :: < Impl , IMPL_OFFSET > , DeleteApplicationGroup : DeleteApplicationGroup :: < Impl , IMPL_OFFSET > , Submit : Submit :: < Impl , IMPL_OFFSET > , DelegatedPolicyUsers : DelegatedPolicyUsers :: < Impl , IMPL_OFFSET > , AddDelegatedPolicyUser : AddDelegatedPolicyUser :: < Impl , IMPL_OFFSET > , DeleteDelegatedPolicyUser : DeleteDelegatedPolicyUser :: < Impl , IMPL_OFFSET > , TargetMachine : TargetMachine :: < Impl , IMPL_OFFSET > , ApplyStoreSacl : ApplyStoreSacl :: < Impl , IMPL_OFFSET > , SetApplyStoreSacl : SetApplyStoreSacl :: < Impl , IMPL_OFFSET > , PolicyAdministratorsName : PolicyAdministratorsName :: < Impl , IMPL_OFFSET > , PolicyReadersName : PolicyReadersName :: < Impl , IMPL_OFFSET > , AddPolicyAdministratorName : AddPolicyAdministratorName :: < Impl , IMPL_OFFSET > , DeletePolicyAdministratorName : DeletePolicyAdministratorName :: < Impl , IMPL_OFFSET > , AddPolicyReaderName : AddPolicyReaderName :: < Impl , IMPL_OFFSET > , DeletePolicyReaderName : DeletePolicyReaderName :: < Impl , IMPL_OFFSET > , DelegatedPolicyUsersName : DelegatedPolicyUsersName :: < Impl , IMPL_OFFSET > , AddDelegatedPolicyUserName : AddDelegatedPolicyUserName :: < Impl , IMPL_OFFSET > , DeleteDelegatedPolicyUserName : DeleteDelegatedPolicyUserName :: < Impl , IMPL_OFFSET > , CloseApplication : CloseApplication :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzAuthorizationStore < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzAuthorizationStore2Impl < > : Sized + IAzAuthorizationStoreImpl + IDispatchImpl where { fn OpenApplication2 ( ) ; fn CreateApplication2 ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzAuthorizationStore2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzAuthorizationStore2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzAuthorizationStore2Vtbl < > { unsafe extern "system" fn OpenApplication2 < Impl : IAzAuthorizationStore2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrapplicationname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppapplication : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateApplication2 < Impl : IAzAuthorizationStore2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrapplicationname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppapplication : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , OpenApplication2 : OpenApplication2 :: < Impl , IMPL_OFFSET > , CreateApplication2 : CreateApplication2 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzAuthorizationStore2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzAuthorizationStore3Impl < > : Sized + IAzAuthorizationStore2Impl + IAzAuthorizationStoreImpl + IDispatchImpl where { fn IsUpdateNeeded ( ) ; fn BizruleGroupSupported ( ) ; fn UpgradeStoresFunctionalLevel ( ) ; fn IsFunctionalLevelUpgradeSupported ( ) ; fn GetSchemaVersion ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzAuthorizationStore3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzAuthorizationStore3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzAuthorizationStore3Vtbl < > { unsafe extern "system" fn IsUpdateNeeded < Impl : IAzAuthorizationStore3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbisupdateneeded : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BizruleGroupSupported < Impl : IAzAuthorizationStore3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbsupported : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpgradeStoresFunctionalLevel < Impl : IAzAuthorizationStore3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lfunctionallevel : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsFunctionalLevelUpgradeSupported < Impl : IAzAuthorizationStore3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lfunctionallevel : i32 , pbsupported : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSchemaVersion < Impl : IAzAuthorizationStore3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plmajorversion : * mut i32 , plminorversion : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , IsUpdateNeeded : IsUpdateNeeded :: < Impl , IMPL_OFFSET > , BizruleGroupSupported : BizruleGroupSupported :: < Impl , IMPL_OFFSET > , UpgradeStoresFunctionalLevel : UpgradeStoresFunctionalLevel :: < Impl , IMPL_OFFSET > , IsFunctionalLevelUpgradeSupported : IsFunctionalLevelUpgradeSupported :: < Impl , IMPL_OFFSET > , GetSchemaVersion : GetSchemaVersion :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzAuthorizationStore3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzBizRuleContextImpl < > : Sized + IDispatchImpl where { fn SetBusinessRuleResult ( ) ; fn SetBusinessRuleString ( ) ; fn BusinessRuleString ( ) ; fn GetParameter ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzBizRuleContextVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzBizRuleContextImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzBizRuleContextVtbl < > { unsafe extern "system" fn SetBusinessRuleResult < Impl : IAzBizRuleContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bresult : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBusinessRuleString < Impl : IAzBizRuleContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrbusinessrulestring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BusinessRuleString < Impl : IAzBizRuleContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrbusinessrulestring : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetParameter < Impl : IAzBizRuleContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrparametername : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvarparametervalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetBusinessRuleResult : SetBusinessRuleResult :: < Impl , IMPL_OFFSET > , SetBusinessRuleString : SetBusinessRuleString :: < Impl , IMPL_OFFSET > , BusinessRuleString : BusinessRuleString :: < Impl , IMPL_OFFSET > , GetParameter : GetParameter :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzBizRuleContext < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzBizRuleInterfacesImpl < > : Sized + IDispatchImpl where { fn AddInterface ( ) ; fn AddInterfaces ( ) ; fn GetInterfaceValue ( ) ; fn Remove ( ) ; fn RemoveAll ( ) ; fn Count ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzBizRuleInterfacesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzBizRuleInterfacesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzBizRuleInterfacesVtbl < > { unsafe extern "system" fn AddInterface < Impl : IAzBizRuleInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrinterfacename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , linterfaceflag : i32 , varinterface : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddInterfaces < Impl : IAzBizRuleInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varinterfacenames : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varinterfaceflags : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varinterfaces : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetInterfaceValue < Impl : IAzBizRuleInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrinterfacename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , linterfaceflag : * mut i32 , varinterface : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Remove < Impl : IAzBizRuleInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrinterfacename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveAll < Impl : IAzBizRuleInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IAzBizRuleInterfacesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , AddInterface : AddInterface :: < Impl , IMPL_OFFSET > , AddInterfaces : AddInterfaces :: < Impl , IMPL_OFFSET > , GetInterfaceValue : GetInterfaceValue :: < Impl , IMPL_OFFSET > , Remove : Remove :: < Impl , IMPL_OFFSET > , RemoveAll : RemoveAll :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzBizRuleInterfaces < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzBizRuleParametersImpl < > : Sized + IDispatchImpl where { fn AddParameter ( ) ; fn AddParameters ( ) ; fn GetParameterValue ( ) ; fn Remove ( ) ; fn RemoveAll ( ) ; fn Count ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzBizRuleParametersVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzBizRuleParametersImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzBizRuleParametersVtbl < > { unsafe extern "system" fn AddParameter < Impl : IAzBizRuleParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrparametername : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varparametervalue : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddParameters < Impl : IAzBizRuleParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varparameternames : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varparametervalues : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetParameterValue < Impl : IAzBizRuleParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrparametername : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvarparametervalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Remove < Impl : IAzBizRuleParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varparametername : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveAll < Impl : IAzBizRuleParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IAzBizRuleParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , AddParameter : AddParameter :: < Impl , IMPL_OFFSET > , AddParameters : AddParameters :: < Impl , IMPL_OFFSET > , GetParameterValue : GetParameterValue :: < Impl , IMPL_OFFSET > , Remove : Remove :: < Impl , IMPL_OFFSET > , RemoveAll : RemoveAll :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzBizRuleParameters < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzClientContextImpl < > : Sized + IDispatchImpl where { fn AccessCheck ( ) ; fn GetBusinessRuleString ( ) ; fn UserDn ( ) ; fn UserSamCompat ( ) ; fn UserDisplay ( ) ; fn UserGuid ( ) ; fn UserCanonical ( ) ; fn UserUpn ( ) ; fn UserDnsSamCompat ( ) ; fn GetProperty ( ) ; fn GetRoles ( ) ; fn RoleForAccessCheck ( ) ; fn SetRoleForAccessCheck ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzClientContextVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzClientContextImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzClientContextVtbl < > { unsafe extern "system" fn AccessCheck < Impl : IAzClientContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrobjectname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varscopenames : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varoperations : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varparameternames : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varparametervalues : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varinterfacenames : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varinterfaceflags : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varinterfaces : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pvarresults : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBusinessRuleString < Impl : IAzClientContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrbusinessrulestring : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UserDn < Impl : IAzClientContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UserSamCompat < Impl : IAzClientContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UserDisplay < Impl : IAzClientContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UserGuid < Impl : IAzClientContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UserCanonical < Impl : IAzClientContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UserUpn < Impl : IAzClientContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UserDnsSamCompat < Impl : IAzClientContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProperty < Impl : IAzClientContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetRoles < Impl : IAzClientContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvarrolenames : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RoleForAccessCheck < Impl : IAzClientContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetRoleForAccessCheck < Impl : IAzClientContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , AccessCheck : AccessCheck :: < Impl , IMPL_OFFSET > , GetBusinessRuleString : GetBusinessRuleString :: < Impl , IMPL_OFFSET > , UserDn : UserDn :: < Impl , IMPL_OFFSET > , UserSamCompat : UserSamCompat :: < Impl , IMPL_OFFSET > , UserDisplay : UserDisplay :: < Impl , IMPL_OFFSET > , UserGuid : UserGuid :: < Impl , IMPL_OFFSET > , UserCanonical : UserCanonical :: < Impl , IMPL_OFFSET > , UserUpn : UserUpn :: < Impl , IMPL_OFFSET > , UserDnsSamCompat : UserDnsSamCompat :: < Impl , IMPL_OFFSET > , GetProperty : GetProperty :: < Impl , IMPL_OFFSET > , GetRoles : GetRoles :: < Impl , IMPL_OFFSET > , RoleForAccessCheck : RoleForAccessCheck :: < Impl , IMPL_OFFSET > , SetRoleForAccessCheck : SetRoleForAccessCheck :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzClientContext < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzClientContext2Impl < > : Sized + IAzClientContextImpl + IDispatchImpl where { fn GetAssignedScopesPage ( ) ; fn AddRoles ( ) ; fn AddApplicationGroups ( ) ; fn AddStringSids ( ) ; fn SetLDAPQueryDN ( ) ; fn LDAPQueryDN ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzClientContext2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzClientContext2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzClientContext2Vtbl < > { unsafe extern "system" fn GetAssignedScopesPage < Impl : IAzClientContext2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , loptions : i32 , pagesize : i32 , pvarcursor : * mut super::super::System::Com:: VARIANT , pvarscopenames : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddRoles < Impl : IAzClientContext2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varroles : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddApplicationGroups < Impl : IAzClientContext2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varapplicationgroups : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddStringSids < Impl : IAzClientContext2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varstringsids : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetLDAPQueryDN < Impl : IAzClientContext2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrldapquerydn : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LDAPQueryDN < Impl : IAzClientContext2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrldapquerydn : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetAssignedScopesPage : GetAssignedScopesPage :: < Impl , IMPL_OFFSET > , AddRoles : AddRoles :: < Impl , IMPL_OFFSET > , AddApplicationGroups : AddApplicationGroups :: < Impl , IMPL_OFFSET > , AddStringSids : AddStringSids :: < Impl , IMPL_OFFSET > , SetLDAPQueryDN : SetLDAPQueryDN :: < Impl , IMPL_OFFSET > , LDAPQueryDN : LDAPQueryDN :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzClientContext2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzClientContext3Impl < > : Sized + IAzClientContext2Impl + IAzClientContextImpl + IDispatchImpl where { fn AccessCheck2 ( ) ; fn IsInRoleAssignment ( ) ; fn GetOperations ( ) ; fn GetTasks ( ) ; fn BizRuleParameters ( ) ; fn BizRuleInterfaces ( ) ; fn GetGroups ( ) ; fn Sids ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzClientContext3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzClientContext3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzClientContext3Vtbl < > { unsafe extern "system" fn AccessCheck2 < Impl : IAzClientContext3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrobjectname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , loperation : i32 , plresult : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsInRoleAssignment < Impl : IAzClientContext3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrrolename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pbisinrole : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetOperations < Impl : IAzClientContext3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppoperationcollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTasks < Impl : IAzClientContext3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pptaskcollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BizRuleParameters < Impl : IAzClientContext3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppbizruleparam : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BizRuleInterfaces < Impl : IAzClientContext3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppbizruleinterfaces : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetGroups < Impl : IAzClientContext3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , uloptions : AZ_PROP_CONSTANTS , pgrouparray : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sids < Impl : IAzClientContext3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstringsidarray : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , AccessCheck2 : AccessCheck2 :: < Impl , IMPL_OFFSET > , IsInRoleAssignment : IsInRoleAssignment :: < Impl , IMPL_OFFSET > , GetOperations : GetOperations :: < Impl , IMPL_OFFSET > , GetTasks : GetTasks :: < Impl , IMPL_OFFSET > , BizRuleParameters : BizRuleParameters :: < Impl , IMPL_OFFSET > , BizRuleInterfaces : BizRuleInterfaces :: < Impl , IMPL_OFFSET > , GetGroups : GetGroups :: < Impl , IMPL_OFFSET > , Sids : Sids :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzClientContext3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzNameResolverImpl < > : Sized + IDispatchImpl where { fn NameFromSid ( ) ; fn NamesFromSids ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzNameResolverVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzNameResolverImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzNameResolverVtbl < > { unsafe extern "system" fn NameFromSid < Impl : IAzNameResolverImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrsid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , psidtype : * mut i32 , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NamesFromSids < Impl : IAzNameResolverImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vsids : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pvsidtypes : * mut super::super::System::Com:: VARIANT , pvnames : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , NameFromSid : NameFromSid :: < Impl , IMPL_OFFSET > , NamesFromSids : NamesFromSids :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzNameResolver < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzObjectPickerImpl < > : Sized + IDispatchImpl where { fn GetPrincipals ( ) ; fn Name ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzObjectPickerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzObjectPickerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzObjectPickerVtbl < > { unsafe extern "system" fn GetPrincipals < Impl : IAzObjectPickerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hparentwnd : super::super::Foundation:: HWND , bstrtitle : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvsidtypes : * mut super::super::System::Com:: VARIANT , pvnames : * mut super::super::System::Com:: VARIANT , pvsids : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Name < Impl : IAzObjectPickerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetPrincipals : GetPrincipals :: < Impl , IMPL_OFFSET > , Name : Name :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzObjectPicker < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzOperationImpl < > : Sized + IDispatchImpl where { fn Name ( ) ; fn SetName ( ) ; fn Description ( ) ; fn SetDescription ( ) ; fn ApplicationData ( ) ; fn SetApplicationData ( ) ; fn OperationID ( ) ; fn SetOperationID ( ) ; fn Writable ( ) ; fn GetProperty ( ) ; fn SetProperty ( ) ; fn Submit ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzOperationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzOperationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzOperationVtbl < > { unsafe extern "system" fn Name < Impl : IAzOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetName < Impl : IAzOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Description < Impl : IAzOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrdescription : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDescription < Impl : IAzOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdescription : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplicationData < Impl : IAzOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrapplicationdata : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetApplicationData < Impl : IAzOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrapplicationdata : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OperationID < Impl : IAzOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plprop : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetOperationID < Impl : IAzOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lprop : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Writable < Impl : IAzOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfprop : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProperty < Impl : IAzOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProperty < Impl : IAzOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Submit < Impl : IAzOperationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lflags : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Name : Name :: < Impl , IMPL_OFFSET > , SetName : SetName :: < Impl , IMPL_OFFSET > , Description : Description :: < Impl , IMPL_OFFSET > , SetDescription : SetDescription :: < Impl , IMPL_OFFSET > , ApplicationData : ApplicationData :: < Impl , IMPL_OFFSET > , SetApplicationData : SetApplicationData :: < Impl , IMPL_OFFSET > , OperationID : OperationID :: < Impl , IMPL_OFFSET > , SetOperationID : SetOperationID :: < Impl , IMPL_OFFSET > , Writable : Writable :: < Impl , IMPL_OFFSET > , GetProperty : GetProperty :: < Impl , IMPL_OFFSET > , SetProperty : SetProperty :: < Impl , IMPL_OFFSET > , Submit : Submit :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzOperation < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzOperation2Impl < > : Sized + IAzOperationImpl + IDispatchImpl where { fn RoleAssignments ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzOperation2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzOperation2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzOperation2Vtbl < > { unsafe extern "system" fn RoleAssignments < Impl : IAzOperation2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , brecursive : i16 , pproleassignments : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , RoleAssignments : RoleAssignments :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzOperation2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzOperationsImpl < > : Sized + IDispatchImpl where { fn Item ( ) ; fn Count ( ) ; fn _NewEnum ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzOperationsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzOperationsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzOperationsVtbl < > { unsafe extern "system" fn Item < Impl : IAzOperationsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pvarobtptr : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IAzOperationsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : IAzOperationsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenumptr : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Item : Item :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzOperations < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzPrincipalLocatorImpl < > : Sized + IDispatchImpl where { fn NameResolver ( ) ; fn ObjectPicker ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzPrincipalLocatorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzPrincipalLocatorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzPrincipalLocatorVtbl < > { unsafe extern "system" fn NameResolver < Impl : IAzPrincipalLocatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppnameresolver : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ObjectPicker < Impl : IAzPrincipalLocatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppobjectpicker : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , NameResolver : NameResolver :: < Impl , IMPL_OFFSET > , ObjectPicker : ObjectPicker :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzPrincipalLocator < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzRoleImpl < > : Sized + IDispatchImpl where { fn Name ( ) ; fn SetName ( ) ; fn Description ( ) ; fn SetDescription ( ) ; fn ApplicationData ( ) ; fn SetApplicationData ( ) ; fn AddAppMember ( ) ; fn DeleteAppMember ( ) ; fn AddTask ( ) ; fn DeleteTask ( ) ; fn AddOperation ( ) ; fn DeleteOperation ( ) ; fn AddMember ( ) ; fn DeleteMember ( ) ; fn Writable ( ) ; fn GetProperty ( ) ; fn SetProperty ( ) ; fn AppMembers ( ) ; fn Members ( ) ; fn Operations ( ) ; fn Tasks ( ) ; fn AddPropertyItem ( ) ; fn DeletePropertyItem ( ) ; fn Submit ( ) ; fn AddMemberName ( ) ; fn DeleteMemberName ( ) ; fn MembersName ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzRoleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzRoleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzRoleVtbl < > { unsafe extern "system" fn Name < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetName < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Description < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrdescription : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDescription < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdescription : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplicationData < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrapplicationdata : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetApplicationData < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrapplicationdata : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddAppMember < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteAppMember < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddTask < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteTask < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddOperation < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteOperation < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddMember < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteMember < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Writable < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfprop : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProperty < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProperty < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AppMembers < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Members < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Operations < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Tasks < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPropertyItem < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePropertyItem < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Submit < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lflags : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddMemberName < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteMemberName < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MembersName < Impl : IAzRoleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Name : Name :: < Impl , IMPL_OFFSET > , SetName : SetName :: < Impl , IMPL_OFFSET > , Description : Description :: < Impl , IMPL_OFFSET > , SetDescription : SetDescription :: < Impl , IMPL_OFFSET > , ApplicationData : ApplicationData :: < Impl , IMPL_OFFSET > , SetApplicationData : SetApplicationData :: < Impl , IMPL_OFFSET > , AddAppMember : AddAppMember :: < Impl , IMPL_OFFSET > , DeleteAppMember : DeleteAppMember :: < Impl , IMPL_OFFSET > , AddTask : AddTask :: < Impl , IMPL_OFFSET > , DeleteTask : DeleteTask :: < Impl , IMPL_OFFSET > , AddOperation : AddOperation :: < Impl , IMPL_OFFSET > , DeleteOperation : DeleteOperation :: < Impl , IMPL_OFFSET > , AddMember : AddMember :: < Impl , IMPL_OFFSET > , DeleteMember : DeleteMember :: < Impl , IMPL_OFFSET > , Writable : Writable :: < Impl , IMPL_OFFSET > , GetProperty : GetProperty :: < Impl , IMPL_OFFSET > , SetProperty : SetProperty :: < Impl , IMPL_OFFSET > , AppMembers : AppMembers :: < Impl , IMPL_OFFSET > , Members : Members :: < Impl , IMPL_OFFSET > , Operations : Operations :: < Impl , IMPL_OFFSET > , Tasks : Tasks :: < Impl , IMPL_OFFSET > , AddPropertyItem : AddPropertyItem :: < Impl , IMPL_OFFSET > , DeletePropertyItem : DeletePropertyItem :: < Impl , IMPL_OFFSET > , Submit : Submit :: < Impl , IMPL_OFFSET > , AddMemberName : AddMemberName :: < Impl , IMPL_OFFSET > , DeleteMemberName : DeleteMemberName :: < Impl , IMPL_OFFSET > , MembersName : MembersName :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzRole < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzRoleAssignmentImpl < > : Sized + IAzRoleImpl + IDispatchImpl where { fn AddRoleDefinition ( ) ; fn DeleteRoleDefinition ( ) ; fn RoleDefinitions ( ) ; fn Scope ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzRoleAssignmentVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzRoleAssignmentImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzRoleAssignmentVtbl < > { unsafe extern "system" fn AddRoleDefinition < Impl : IAzRoleAssignmentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroledefinition : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteRoleDefinition < Impl : IAzRoleAssignmentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroledefinition : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RoleDefinitions < Impl : IAzRoleAssignmentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pproledefinitions : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Scope < Impl : IAzRoleAssignmentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppscope : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , AddRoleDefinition : AddRoleDefinition :: < Impl , IMPL_OFFSET > , DeleteRoleDefinition : DeleteRoleDefinition :: < Impl , IMPL_OFFSET > , RoleDefinitions : RoleDefinitions :: < Impl , IMPL_OFFSET > , Scope : Scope :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzRoleAssignment < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzRoleAssignmentsImpl < > : Sized + IDispatchImpl where { fn Item ( ) ; fn Count ( ) ; fn _NewEnum ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzRoleAssignmentsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzRoleAssignmentsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzRoleAssignmentsVtbl < > { unsafe extern "system" fn Item < Impl : IAzRoleAssignmentsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pvarobtptr : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IAzRoleAssignmentsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : IAzRoleAssignmentsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenumptr : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Item : Item :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzRoleAssignments < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzRoleDefinitionImpl < > : Sized + IAzTaskImpl + IDispatchImpl where { fn RoleAssignments ( ) ; fn AddRoleDefinition ( ) ; fn DeleteRoleDefinition ( ) ; fn RoleDefinitions ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzRoleDefinitionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzRoleDefinitionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzRoleDefinitionVtbl < > { unsafe extern "system" fn RoleAssignments < Impl : IAzRoleDefinitionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , brecursive : i16 , pproleassignments : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddRoleDefinition < Impl : IAzRoleDefinitionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroledefinition : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteRoleDefinition < Impl : IAzRoleDefinitionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroledefinition : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RoleDefinitions < Impl : IAzRoleDefinitionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pproledefinitions : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , RoleAssignments : RoleAssignments :: < Impl , IMPL_OFFSET > , AddRoleDefinition : AddRoleDefinition :: < Impl , IMPL_OFFSET > , DeleteRoleDefinition : DeleteRoleDefinition :: < Impl , IMPL_OFFSET > , RoleDefinitions : RoleDefinitions :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzRoleDefinition < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzRoleDefinitionsImpl < > : Sized + IDispatchImpl where { fn Item ( ) ; fn Count ( ) ; fn _NewEnum ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzRoleDefinitionsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzRoleDefinitionsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzRoleDefinitionsVtbl < > { unsafe extern "system" fn Item < Impl : IAzRoleDefinitionsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pvarobtptr : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IAzRoleDefinitionsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : IAzRoleDefinitionsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenumptr : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Item : Item :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzRoleDefinitions < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzRolesImpl < > : Sized + IDispatchImpl where { fn Item ( ) ; fn Count ( ) ; fn _NewEnum ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzRolesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzRolesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzRolesVtbl < > { unsafe extern "system" fn Item < Impl : IAzRolesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pvarobtptr : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IAzRolesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : IAzRolesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenumptr : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Item : Item :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzRoles < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzScopeImpl < > : Sized + IDispatchImpl where { fn Name ( ) ; fn SetName ( ) ; fn Description ( ) ; fn SetDescription ( ) ; fn ApplicationData ( ) ; fn SetApplicationData ( ) ; fn Writable ( ) ; fn GetProperty ( ) ; fn SetProperty ( ) ; fn AddPropertyItem ( ) ; fn DeletePropertyItem ( ) ; fn PolicyAdministrators ( ) ; fn PolicyReaders ( ) ; fn AddPolicyAdministrator ( ) ; fn DeletePolicyAdministrator ( ) ; fn AddPolicyReader ( ) ; fn DeletePolicyReader ( ) ; fn ApplicationGroups ( ) ; fn OpenApplicationGroup ( ) ; fn CreateApplicationGroup ( ) ; fn DeleteApplicationGroup ( ) ; fn Roles ( ) ; fn OpenRole ( ) ; fn CreateRole ( ) ; fn DeleteRole ( ) ; fn Tasks ( ) ; fn OpenTask ( ) ; fn CreateTask ( ) ; fn DeleteTask ( ) ; fn Submit ( ) ; fn CanBeDelegated ( ) ; fn BizrulesWritable ( ) ; fn PolicyAdministratorsName ( ) ; fn PolicyReadersName ( ) ; fn AddPolicyAdministratorName ( ) ; fn DeletePolicyAdministratorName ( ) ; fn AddPolicyReaderName ( ) ; fn DeletePolicyReaderName ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzScopeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzScopeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzScopeVtbl < > { unsafe extern "system" fn Name < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetName < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Description < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrdescription : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDescription < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdescription : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplicationData < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrapplicationdata : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetApplicationData < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrapplicationdata : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Writable < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfprop : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProperty < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProperty < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPropertyItem < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePropertyItem < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PolicyAdministrators < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvaradmins : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PolicyReaders < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarreaders : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPolicyAdministrator < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstradmin : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePolicyAdministrator < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstradmin : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPolicyReader < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrreader : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePolicyReader < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrreader : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplicationGroups < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppgroupcollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenApplicationGroup < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrgroupname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppgroup : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateApplicationGroup < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrgroupname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppgroup : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteApplicationGroup < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrgroupname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Roles < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pprolecollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenRole < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrrolename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pprole : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateRole < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrrolename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pprole : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteRole < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrrolename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Tasks < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pptaskcollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenTask < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtaskname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pptask : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateTask < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtaskname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pptask : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteTask < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtaskname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Submit < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lflags : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CanBeDelegated < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfprop : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BizrulesWritable < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfprop : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PolicyAdministratorsName < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvaradmins : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PolicyReadersName < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarreaders : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPolicyAdministratorName < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstradmin : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePolicyAdministratorName < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstradmin : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPolicyReaderName < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrreader : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePolicyReaderName < Impl : IAzScopeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrreader : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Name : Name :: < Impl , IMPL_OFFSET > , SetName : SetName :: < Impl , IMPL_OFFSET > , Description : Description :: < Impl , IMPL_OFFSET > , SetDescription : SetDescription :: < Impl , IMPL_OFFSET > , ApplicationData : ApplicationData :: < Impl , IMPL_OFFSET > , SetApplicationData : SetApplicationData :: < Impl , IMPL_OFFSET > , Writable : Writable :: < Impl , IMPL_OFFSET > , GetProperty : GetProperty :: < Impl , IMPL_OFFSET > , SetProperty : SetProperty :: < Impl , IMPL_OFFSET > , AddPropertyItem : AddPropertyItem :: < Impl , IMPL_OFFSET > , DeletePropertyItem : DeletePropertyItem :: < Impl , IMPL_OFFSET > , PolicyAdministrators : PolicyAdministrators :: < Impl , IMPL_OFFSET > , PolicyReaders : PolicyReaders :: < Impl , IMPL_OFFSET > , AddPolicyAdministrator : AddPolicyAdministrator :: < Impl , IMPL_OFFSET > , DeletePolicyAdministrator : DeletePolicyAdministrator :: < Impl , IMPL_OFFSET > , AddPolicyReader : AddPolicyReader :: < Impl , IMPL_OFFSET > , DeletePolicyReader : DeletePolicyReader :: < Impl , IMPL_OFFSET > , ApplicationGroups : ApplicationGroups :: < Impl , IMPL_OFFSET > , OpenApplicationGroup : OpenApplicationGroup :: < Impl , IMPL_OFFSET > , CreateApplicationGroup : CreateApplicationGroup :: < Impl , IMPL_OFFSET > , DeleteApplicationGroup : DeleteApplicationGroup :: < Impl , IMPL_OFFSET > , Roles : Roles :: < Impl , IMPL_OFFSET > , OpenRole : OpenRole :: < Impl , IMPL_OFFSET > , CreateRole : CreateRole :: < Impl , IMPL_OFFSET > , DeleteRole : DeleteRole :: < Impl , IMPL_OFFSET > , Tasks : Tasks :: < Impl , IMPL_OFFSET > , OpenTask : OpenTask :: < Impl , IMPL_OFFSET > , CreateTask : CreateTask :: < Impl , IMPL_OFFSET > , DeleteTask : DeleteTask :: < Impl , IMPL_OFFSET > , Submit : Submit :: < Impl , IMPL_OFFSET > , CanBeDelegated : CanBeDelegated :: < Impl , IMPL_OFFSET > , BizrulesWritable : BizrulesWritable :: < Impl , IMPL_OFFSET > , PolicyAdministratorsName : PolicyAdministratorsName :: < Impl , IMPL_OFFSET > , PolicyReadersName : PolicyReadersName :: < Impl , IMPL_OFFSET > , AddPolicyAdministratorName : AddPolicyAdministratorName :: < Impl , IMPL_OFFSET > , DeletePolicyAdministratorName : DeletePolicyAdministratorName :: < Impl , IMPL_OFFSET > , AddPolicyReaderName : AddPolicyReaderName :: < Impl , IMPL_OFFSET > , DeletePolicyReaderName : DeletePolicyReaderName :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzScope < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzScope2Impl < > : Sized + IAzScopeImpl + IDispatchImpl where { fn RoleDefinitions ( ) ; fn CreateRoleDefinition ( ) ; fn OpenRoleDefinition ( ) ; fn DeleteRoleDefinition ( ) ; fn RoleAssignments ( ) ; fn CreateRoleAssignment ( ) ; fn OpenRoleAssignment ( ) ; fn DeleteRoleAssignment ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzScope2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzScope2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzScope2Vtbl < > { unsafe extern "system" fn RoleDefinitions < Impl : IAzScope2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pproledefinitions : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateRoleDefinition < Impl : IAzScope2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroledefinitionname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pproledefinitions : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenRoleDefinition < Impl : IAzScope2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroledefinitionname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pproledefinitions : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteRoleDefinition < Impl : IAzScope2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroledefinitionname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RoleAssignments < Impl : IAzScope2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pproleassignments : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateRoleAssignment < Impl : IAzScope2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroleassignmentname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pproleassignment : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenRoleAssignment < Impl : IAzScope2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroleassignmentname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pproleassignment : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteRoleAssignment < Impl : IAzScope2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroleassignmentname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , RoleDefinitions : RoleDefinitions :: < Impl , IMPL_OFFSET > , CreateRoleDefinition : CreateRoleDefinition :: < Impl , IMPL_OFFSET > , OpenRoleDefinition : OpenRoleDefinition :: < Impl , IMPL_OFFSET > , DeleteRoleDefinition : DeleteRoleDefinition :: < Impl , IMPL_OFFSET > , RoleAssignments : RoleAssignments :: < Impl , IMPL_OFFSET > , CreateRoleAssignment : CreateRoleAssignment :: < Impl , IMPL_OFFSET > , OpenRoleAssignment : OpenRoleAssignment :: < Impl , IMPL_OFFSET > , DeleteRoleAssignment : DeleteRoleAssignment :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzScope2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzScopesImpl < > : Sized + IDispatchImpl where { fn Item ( ) ; fn Count ( ) ; fn _NewEnum ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzScopesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzScopesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzScopesVtbl < > { unsafe extern "system" fn Item < Impl : IAzScopesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pvarobtptr : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IAzScopesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : IAzScopesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenumptr : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Item : Item :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzScopes < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzTaskImpl < > : Sized + IDispatchImpl where { fn Name ( ) ; fn SetName ( ) ; fn Description ( ) ; fn SetDescription ( ) ; fn ApplicationData ( ) ; fn SetApplicationData ( ) ; fn BizRule ( ) ; fn SetBizRule ( ) ; fn BizRuleLanguage ( ) ; fn SetBizRuleLanguage ( ) ; fn BizRuleImportedPath ( ) ; fn SetBizRuleImportedPath ( ) ; fn IsRoleDefinition ( ) ; fn SetIsRoleDefinition ( ) ; fn Operations ( ) ; fn Tasks ( ) ; fn AddOperation ( ) ; fn DeleteOperation ( ) ; fn AddTask ( ) ; fn DeleteTask ( ) ; fn Writable ( ) ; fn GetProperty ( ) ; fn SetProperty ( ) ; fn AddPropertyItem ( ) ; fn DeletePropertyItem ( ) ; fn Submit ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzTaskVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzTaskImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzTaskVtbl < > { unsafe extern "system" fn Name < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetName < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Description < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrdescription : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDescription < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdescription : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplicationData < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrapplicationdata : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetApplicationData < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrapplicationdata : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BizRule < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBizRule < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BizRuleLanguage < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBizRuleLanguage < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BizRuleImportedPath < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrprop : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetBizRuleImportedPath < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsRoleDefinition < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfprop : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetIsRoleDefinition < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fprop : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Operations < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Tasks < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddOperation < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteOperation < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrop : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddTask < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtask : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteTask < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtask : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Writable < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfprop : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProperty < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pvarprop : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProperty < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddPropertyItem < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeletePropertyItem < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpropid : i32 , varprop : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Submit < Impl : IAzTaskImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lflags : i32 , varreserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Name : Name :: < Impl , IMPL_OFFSET > , SetName : SetName :: < Impl , IMPL_OFFSET > , Description : Description :: < Impl , IMPL_OFFSET > , SetDescription : SetDescription :: < Impl , IMPL_OFFSET > , ApplicationData : ApplicationData :: < Impl , IMPL_OFFSET > , SetApplicationData : SetApplicationData :: < Impl , IMPL_OFFSET > , BizRule : BizRule :: < Impl , IMPL_OFFSET > , SetBizRule : SetBizRule :: < Impl , IMPL_OFFSET > , BizRuleLanguage : BizRuleLanguage :: < Impl , IMPL_OFFSET > , SetBizRuleLanguage : SetBizRuleLanguage :: < Impl , IMPL_OFFSET > , BizRuleImportedPath : BizRuleImportedPath :: < Impl , IMPL_OFFSET > , SetBizRuleImportedPath : SetBizRuleImportedPath :: < Impl , IMPL_OFFSET > , IsRoleDefinition : IsRoleDefinition :: < Impl , IMPL_OFFSET > , SetIsRoleDefinition : SetIsRoleDefinition :: < Impl , IMPL_OFFSET > , Operations : Operations :: < Impl , IMPL_OFFSET > , Tasks : Tasks :: < Impl , IMPL_OFFSET > , AddOperation : AddOperation :: < Impl , IMPL_OFFSET > , DeleteOperation : DeleteOperation :: < Impl , IMPL_OFFSET > , AddTask : AddTask :: < Impl , IMPL_OFFSET > , DeleteTask : DeleteTask :: < Impl , IMPL_OFFSET > , Writable : Writable :: < Impl , IMPL_OFFSET > , GetProperty : GetProperty :: < Impl , IMPL_OFFSET > , SetProperty : SetProperty :: < Impl , IMPL_OFFSET > , AddPropertyItem : AddPropertyItem :: < Impl , IMPL_OFFSET > , DeletePropertyItem : DeletePropertyItem :: < Impl , IMPL_OFFSET > , Submit : Submit :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzTask < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzTask2Impl < > : Sized + IAzTaskImpl + IDispatchImpl where { fn RoleAssignments ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzTask2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzTask2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzTask2Vtbl < > { unsafe extern "system" fn RoleAssignments < Impl : IAzTask2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrscopename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , brecursive : i16 , pproleassignments : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , RoleAssignments : RoleAssignments :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzTask2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAzTasksImpl < > : Sized + IDispatchImpl where { fn Item ( ) ; fn Count ( ) ; fn _NewEnum ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAzTasksVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAzTasksImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAzTasksVtbl < > { unsafe extern "system" fn Item < Impl : IAzTasksImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pvarobtptr : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IAzTasksImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : IAzTasksImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenumptr : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Item : Item :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAzTasks < > as :: windows :: core :: Interface > :: IID } } 